/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

/*!*************************************************************************
 * Copyright 2021 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. 
 **************************************************************************/

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var browser = {exports: {}};

/**
 * Helpers.
 */

var ms;
var hasRequiredMs;

function requireMs () {
	if (hasRequiredMs) return ms;
	hasRequiredMs = 1;
	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var w = d * 7;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} [options]
	 * @throws {Error} throw an error if val is not a non-empty string or a number
	 * @return {String|Number}
	 * @api public
	 */

	ms = function(val, options) {
	  options = options || {};
	  var type = typeof val;
	  if (type === 'string' && val.length > 0) {
	    return parse(val);
	  } else if (type === 'number' && isFinite(val)) {
	    return options.long ? fmtLong(val) : fmtShort(val);
	  }
	  throw new Error(
	    'val is not a non-empty string or a valid number. val=' +
	      JSON.stringify(val)
	  );
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  str = String(str);
	  if (str.length > 100) {
	    return;
	  }
	  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
	    str
	  );
	  if (!match) {
	    return;
	  }
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'weeks':
	    case 'week':
	    case 'w':
	      return n * w;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	    default:
	      return undefined;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtShort(ms) {
	  var msAbs = Math.abs(ms);
	  if (msAbs >= d) {
	    return Math.round(ms / d) + 'd';
	  }
	  if (msAbs >= h) {
	    return Math.round(ms / h) + 'h';
	  }
	  if (msAbs >= m) {
	    return Math.round(ms / m) + 'm';
	  }
	  if (msAbs >= s) {
	    return Math.round(ms / s) + 's';
	  }
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtLong(ms) {
	  var msAbs = Math.abs(ms);
	  if (msAbs >= d) {
	    return plural(ms, msAbs, d, 'day');
	  }
	  if (msAbs >= h) {
	    return plural(ms, msAbs, h, 'hour');
	  }
	  if (msAbs >= m) {
	    return plural(ms, msAbs, m, 'minute');
	  }
	  if (msAbs >= s) {
	    return plural(ms, msAbs, s, 'second');
	  }
	  return ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, msAbs, n, name) {
	  var isPlural = msAbs >= n * 1.5;
	  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
	}
	return ms;
}

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */

function setup(env) {
	createDebug.debug = createDebug;
	createDebug.default = createDebug;
	createDebug.coerce = coerce;
	createDebug.disable = disable;
	createDebug.enable = enable;
	createDebug.enabled = enabled;
	createDebug.humanize = requireMs();
	createDebug.destroy = destroy;

	Object.keys(env).forEach(key => {
		createDebug[key] = env[key];
	});

	/**
	* The currently active debug mode names, and names to skip.
	*/

	createDebug.names = [];
	createDebug.skips = [];

	/**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/
	createDebug.formatters = {};

	/**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/
	function selectColor(namespace) {
		let hash = 0;

		for (let i = 0; i < namespace.length; i++) {
			hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
			hash |= 0; // Convert to 32bit integer
		}

		return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
	}
	createDebug.selectColor = selectColor;

	/**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/
	function createDebug(namespace) {
		let prevTime;
		let enableOverride = null;
		let namespacesCache;
		let enabledCache;

		function debug(...args) {
			// Disabled?
			if (!debug.enabled) {
				return;
			}

			const self = debug;

			// Set `diff` timestamp
			const curr = Number(new Date());
			const ms = curr - (prevTime || curr);
			self.diff = ms;
			self.prev = prevTime;
			self.curr = curr;
			prevTime = curr;

			args[0] = createDebug.coerce(args[0]);

			if (typeof args[0] !== 'string') {
				// Anything else let's inspect with %O
				args.unshift('%O');
			}

			// Apply any `formatters` transformations
			let index = 0;
			args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
				// If we encounter an escaped % then don't increase the array index
				if (match === '%%') {
					return '%';
				}
				index++;
				const formatter = createDebug.formatters[format];
				if (typeof formatter === 'function') {
					const val = args[index];
					match = formatter.call(self, val);

					// Now we need to remove `args[index]` since it's inlined in the `format`
					args.splice(index, 1);
					index--;
				}
				return match;
			});

			// Apply env-specific formatting (colors, etc.)
			createDebug.formatArgs.call(self, args);

			const logFn = self.log || createDebug.log;
			logFn.apply(self, args);
		}

		debug.namespace = namespace;
		debug.useColors = createDebug.useColors();
		debug.color = createDebug.selectColor(namespace);
		debug.extend = extend;
		debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

		Object.defineProperty(debug, 'enabled', {
			enumerable: true,
			configurable: false,
			get: () => {
				if (enableOverride !== null) {
					return enableOverride;
				}
				if (namespacesCache !== createDebug.namespaces) {
					namespacesCache = createDebug.namespaces;
					enabledCache = createDebug.enabled(namespace);
				}

				return enabledCache;
			},
			set: v => {
				enableOverride = v;
			}
		});

		// Env-specific initialization logic for debug instances
		if (typeof createDebug.init === 'function') {
			createDebug.init(debug);
		}

		return debug;
	}

	function extend(namespace, delimiter) {
		const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
		newDebug.log = this.log;
		return newDebug;
	}

	/**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/
	function enable(namespaces) {
		createDebug.save(namespaces);
		createDebug.namespaces = namespaces;

		createDebug.names = [];
		createDebug.skips = [];

		let i;
		const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
		const len = split.length;

		for (i = 0; i < len; i++) {
			if (!split[i]) {
				// ignore empty strings
				continue;
			}

			namespaces = split[i].replace(/\*/g, '.*?');

			if (namespaces[0] === '-') {
				createDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));
			} else {
				createDebug.names.push(new RegExp('^' + namespaces + '$'));
			}
		}
	}

	/**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/
	function disable() {
		const namespaces = [
			...createDebug.names.map(toNamespace),
			...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
		].join(',');
		createDebug.enable('');
		return namespaces;
	}

	/**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/
	function enabled(name) {
		if (name[name.length - 1] === '*') {
			return true;
		}

		let i;
		let len;

		for (i = 0, len = createDebug.skips.length; i < len; i++) {
			if (createDebug.skips[i].test(name)) {
				return false;
			}
		}

		for (i = 0, len = createDebug.names.length; i < len; i++) {
			if (createDebug.names[i].test(name)) {
				return true;
			}
		}

		return false;
	}

	/**
	* Convert regexp to namespace
	*
	* @param {RegExp} regxep
	* @return {String} namespace
	* @api private
	*/
	function toNamespace(regexp) {
		return regexp.toString()
			.substring(2, regexp.toString().length - 2)
			.replace(/\.\*\?$/, '*');
	}

	/**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/
	function coerce(val) {
		if (val instanceof Error) {
			return val.stack || val.message;
		}
		return val;
	}

	/**
	* XXX DO NOT USE. This is a temporary stub function.
	* XXX It WILL be removed in the next major release.
	*/
	function destroy() {
		console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
	}

	createDebug.enable(createDebug.load());

	return createDebug;
}

var common = setup;

/* eslint-env browser */

(function (module, exports) {
	/**
	 * This is the web browser implementation of `debug()`.
	 */

	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = localstorage();
	exports.destroy = (() => {
		let warned = false;

		return () => {
			if (!warned) {
				warned = true;
				console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
			}
		};
	})();

	/**
	 * Colors.
	 */

	exports.colors = [
		'#0000CC',
		'#0000FF',
		'#0033CC',
		'#0033FF',
		'#0066CC',
		'#0066FF',
		'#0099CC',
		'#0099FF',
		'#00CC00',
		'#00CC33',
		'#00CC66',
		'#00CC99',
		'#00CCCC',
		'#00CCFF',
		'#3300CC',
		'#3300FF',
		'#3333CC',
		'#3333FF',
		'#3366CC',
		'#3366FF',
		'#3399CC',
		'#3399FF',
		'#33CC00',
		'#33CC33',
		'#33CC66',
		'#33CC99',
		'#33CCCC',
		'#33CCFF',
		'#6600CC',
		'#6600FF',
		'#6633CC',
		'#6633FF',
		'#66CC00',
		'#66CC33',
		'#9900CC',
		'#9900FF',
		'#9933CC',
		'#9933FF',
		'#99CC00',
		'#99CC33',
		'#CC0000',
		'#CC0033',
		'#CC0066',
		'#CC0099',
		'#CC00CC',
		'#CC00FF',
		'#CC3300',
		'#CC3333',
		'#CC3366',
		'#CC3399',
		'#CC33CC',
		'#CC33FF',
		'#CC6600',
		'#CC6633',
		'#CC9900',
		'#CC9933',
		'#CCCC00',
		'#CCCC33',
		'#FF0000',
		'#FF0033',
		'#FF0066',
		'#FF0099',
		'#FF00CC',
		'#FF00FF',
		'#FF3300',
		'#FF3333',
		'#FF3366',
		'#FF3399',
		'#FF33CC',
		'#FF33FF',
		'#FF6600',
		'#FF6633',
		'#FF9900',
		'#FF9933',
		'#FFCC00',
		'#FFCC33'
	];

	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	// eslint-disable-next-line complexity
	function useColors() {
		// NB: In an Electron preload script, document will be defined but not fully
		// initialized. Since we know we're in Chrome, we'll just detect this case
		// explicitly
		if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
			return true;
		}

		// Internet Explorer and Edge do not support colors.
		if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
			return false;
		}

		// Is webkit? http://stackoverflow.com/a/16459606/376773
		// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
		return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
			// Is firebug? http://stackoverflow.com/a/398120/376773
			(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
			// Is firefox >= v31?
			// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
			(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
			// Double check webkit in userAgent just in case we are in a worker
			(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
	}

	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs(args) {
		args[0] = (this.useColors ? '%c' : '') +
			this.namespace +
			(this.useColors ? ' %c' : ' ') +
			args[0] +
			(this.useColors ? '%c ' : ' ') +
			'+' + module.exports.humanize(this.diff);

		if (!this.useColors) {
			return;
		}

		const c = 'color: ' + this.color;
		args.splice(1, 0, c, 'color: inherit');

		// The final "%c" is somewhat tricky, because there could be other
		// arguments passed either before or after the %c, so we need to
		// figure out the correct index to insert the CSS into
		let index = 0;
		let lastC = 0;
		args[0].replace(/%[a-zA-Z%]/g, match => {
			if (match === '%%') {
				return;
			}
			index++;
			if (match === '%c') {
				// We only are interested in the *last* %c
				// (the user may have provided their own)
				lastC = index;
			}
		});

		args.splice(lastC, 0, c);
	}

	/**
	 * Invokes `console.debug()` when available.
	 * No-op when `console.debug` is not a "function".
	 * If `console.debug` is not available, falls back
	 * to `console.log`.
	 *
	 * @api public
	 */
	exports.log = console.debug || console.log || (() => {});

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */
	function save(namespaces) {
		try {
			if (namespaces) {
				exports.storage.setItem('debug', namespaces);
			} else {
				exports.storage.removeItem('debug');
			}
		} catch (error) {
			// Swallow
			// XXX (@Qix-) should we be logging these?
		}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */
	function load() {
		let r;
		try {
			r = exports.storage.getItem('debug');
		} catch (error) {
			// Swallow
			// XXX (@Qix-) should we be logging these?
		}

		// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
		if (!r && typeof process !== 'undefined' && 'env' in process) {
			r = process.env.DEBUG;
		}

		return r;
	}

	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */

	function localstorage() {
		try {
			// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
			// The Browser also has localStorage in the global context.
			return localStorage;
		} catch (error) {
			// Swallow
			// XXX (@Qix-) should we be logging these?
		}
	}

	module.exports = common(exports);

	const {formatters} = module.exports;

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	formatters.j = function (v) {
		try {
			return JSON.stringify(v);
		} catch (error) {
			return '[UnexpectedJSONParseError]: ' + error.message;
		}
	};
} (browser, browser.exports));

var debug = browser.exports;

/**
 * Copyright 2021 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it.
 */
class IncompatibleBrowserError extends Error {
    constructor() {
        super("The browser you are using isn't compatible with this application, or HTTPS is not being used on a non-localhost domain.");
        this.name = this.constructor.name;
    }
}
class InvalidWorkerSourceError extends Error {
    constructor(url, res, options) {
        super(`Could not fetch web worker from ${url}`, options);
        this.name = this.constructor.name;
        this.url = url;
        this.response = res;
    }
}
class InvalidInputError extends Error {
    constructor() {
        super(`Invalid input passed`);
        this.name = this.constructor.name;
    }
}
class InvalidMimeTypeError extends Error {
    constructor(mimeType) {
        super(`Invalid mime type found on asset`);
        this.name = this.constructor.name;
        this.mimeType = mimeType;
    }
}
class UrlFetchError extends Error {
    constructor(url, res, options) {
        super(`Could not fetch resource from ${url}`, options);
        this.name = this.constructor.name;
        this.url = url;
        this.response = res;
    }
}
class SigningStorageMissingError extends Error {
    constructor() {
        super(`At least one element must be provided to storageLocations.`);
        this.name = this.constructor.name;
    }
}
class InvalidConfigError extends Error {
    constructor(identifier = null) {
        if (identifier) {
            super(`${InvalidConfigError.baseMessage} for ${identifier}`);
        }
        else {
            super(InvalidConfigError.baseMessage);
        }
        this.name = this.constructor.name;
        this.identifier = identifier;
    }
}
InvalidConfigError.baseMessage = `Invalid or missing config options passed`;
class InvalidThumbnailSourceError extends Error {
    constructor(receivedMimeType) {
        super(`Invalid thumbnail source MIME type. Received ${receivedMimeType}`);
        this.name = this.constructor.name;
        this.receivedMimeType = receivedMimeType;
    }
}
class ResizeImageError extends Error {
    constructor(options) {
        super(`Error resizing image`, options);
        this.name = this.constructor.name;
    }
}
class C2paSigningError extends Error {
    constructor(options) {
        super(`Error signing image with C2PA`, options);
        this.name = this.constructor.name;
    }
}
class C2paScanningError extends Error {
    constructor(options) {
        super(`Error scanning image for C2PA`, options);
        this.name = this.constructor.name;
    }
}
class SigningCancelledError extends Error {
    constructor(options) {
        super(`Signing operation has been cancelled`, options);
        this.name = this.constructor.name;
    }
}
class IngredientIdentifierMissing extends Error {
    constructor(options) {
        super(`An identifier must be provided when creating ingredients and generateIdentifierIfMissing is set to false.`, options);
        this.name = this.constructor.name;
    }
}
class IngredientHashMissingError extends Error {
    constructor(ingredient, options) {
        super(`The supplied ingredient is missing a hash value`, options);
        this.name = this.constructor.name;
        this.ingredient = ingredient;
    }
}

/**
 * Copyright 2021 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it.
 */
const WINDOW_FEATURES = [
    'ArrayBuffer',
    'File',
    'FileReader',
    'SubtleCrypto',
    'Uint8Array',
    'WebAssembly',
    'fetch',
];
/**
 * Checks if the current browser is compatible with the features needed for
 * this library.
 *
 * @return {boolean}
 */
function isCompatible() {
    return WINDOW_FEATURES.every((x) => x in self);
}
/**
 * Throws an error if the current browser is incompatible with this library.
 */
function ensureCompatibility() {
    if (!isCompatible()) {
        throw new IncompatibleBrowserError();
    }
}

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */

function listCacheClear$1() {
  this.__data__ = [];
  this.size = 0;
}

var _listCacheClear = listCacheClear$1;

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */

function eq$5(value, other) {
  return value === other || (value !== value && other !== other);
}

var eq_1 = eq$5;

var eq$4 = eq_1;

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf$4(array, key) {
  var length = array.length;
  while (length--) {
    if (eq$4(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

var _assocIndexOf = assocIndexOf$4;

var assocIndexOf$3 = _assocIndexOf;

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete$1(key) {
  var data = this.__data__,
      index = assocIndexOf$3(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

var _listCacheDelete = listCacheDelete$1;

var assocIndexOf$2 = _assocIndexOf;

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet$1(key) {
  var data = this.__data__,
      index = assocIndexOf$2(data, key);

  return index < 0 ? undefined : data[index][1];
}

var _listCacheGet = listCacheGet$1;

var assocIndexOf$1 = _assocIndexOf;

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas$1(key) {
  return assocIndexOf$1(this.__data__, key) > -1;
}

var _listCacheHas = listCacheHas$1;

var assocIndexOf = _assocIndexOf;

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet$1(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

var _listCacheSet = listCacheSet$1;

var listCacheClear = _listCacheClear,
    listCacheDelete = _listCacheDelete,
    listCacheGet = _listCacheGet,
    listCacheHas = _listCacheHas,
    listCacheSet = _listCacheSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache$4(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache$4.prototype.clear = listCacheClear;
ListCache$4.prototype['delete'] = listCacheDelete;
ListCache$4.prototype.get = listCacheGet;
ListCache$4.prototype.has = listCacheHas;
ListCache$4.prototype.set = listCacheSet;

var _ListCache = ListCache$4;

var ListCache$3 = _ListCache;

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear$1() {
  this.__data__ = new ListCache$3;
  this.size = 0;
}

var _stackClear = stackClear$1;

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

function stackDelete$1(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

var _stackDelete = stackDelete$1;

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

function stackGet$1(key) {
  return this.__data__.get(key);
}

var _stackGet = stackGet$1;

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

function stackHas$1(key) {
  return this.__data__.has(key);
}

var _stackHas = stackHas$1;

/** Detect free variable `global` from Node.js. */

var freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

var _freeGlobal = freeGlobal$1;

var freeGlobal = _freeGlobal;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root$a = freeGlobal || freeSelf || Function('return this')();

var _root = root$a;

var _Symbol;
var hasRequired_Symbol;

function require_Symbol () {
	if (hasRequired_Symbol) return _Symbol;
	hasRequired_Symbol = 1;
	var root = _root;

	/** Built-in value references. */
	var Symbol = root.Symbol;

	_Symbol = Symbol;
	return _Symbol;
}

var Symbol$5 = require_Symbol();

/** Used for built-in method references. */
var objectProto$f = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$c = objectProto$f.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString$1 = objectProto$f.toString;

/** Built-in value references. */
var symToStringTag$1 = Symbol$5 ? Symbol$5.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag$1(value) {
  var isOwn = hasOwnProperty$c.call(value, symToStringTag$1),
      tag = value[symToStringTag$1];

  try {
    value[symToStringTag$1] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString$1.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag$1] = tag;
    } else {
      delete value[symToStringTag$1];
    }
  }
  return result;
}

var _getRawTag = getRawTag$1;

/** Used for built-in method references. */

var objectProto$e = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto$e.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString$1(value) {
  return nativeObjectToString.call(value);
}

var _objectToString = objectToString$1;

var Symbol$4 = require_Symbol(),
    getRawTag = _getRawTag,
    objectToString = _objectToString;

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol$4 ? Symbol$4.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag$7(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

var _baseGetTag = baseGetTag$7;

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */

function isObject$c(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

var isObject_1 = isObject$c;

var baseGetTag$6 = _baseGetTag,
    isObject$b = isObject_1;

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag$2 = '[object Function]',
    genTag$1 = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction$3(value) {
  if (!isObject$b(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag$6(value);
  return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
}

var isFunction_1 = isFunction$3;

var root$9 = _root;

/** Used to detect overreaching core-js shims. */
var coreJsData$1 = root$9['__core-js_shared__'];

var _coreJsData = coreJsData$1;

var coreJsData = _coreJsData;

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked$1(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

var _isMasked = isMasked$1;

/** Used for built-in method references. */

var funcProto$2 = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString$2 = funcProto$2.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource$2(func) {
  if (func != null) {
    try {
      return funcToString$2.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

var _toSource = toSource$2;

var isFunction$2 = isFunction_1,
    isMasked = _isMasked,
    isObject$a = isObject_1,
    toSource$1 = _toSource;

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto$1 = Function.prototype,
    objectProto$d = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString$1 = funcProto$1.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$b = objectProto$d.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString$1.call(hasOwnProperty$b).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative$1(value) {
  if (!isObject$a(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction$2(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource$1(value));
}

var _baseIsNative = baseIsNative$1;

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */

function getValue$1(object, key) {
  return object == null ? undefined : object[key];
}

var _getValue = getValue$1;

var baseIsNative = _baseIsNative,
    getValue = _getValue;

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative$6(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

var _getNative = getNative$6;

var getNative$5 = _getNative,
    root$8 = _root;

/* Built-in method references that are verified to be native. */
var Map$4 = getNative$5(root$8, 'Map');

var _Map = Map$4;

var getNative$4 = _getNative;

/* Built-in method references that are verified to be native. */
var nativeCreate$4 = getNative$4(Object, 'create');

var _nativeCreate = nativeCreate$4;

var nativeCreate$3 = _nativeCreate;

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear$1() {
  this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
  this.size = 0;
}

var _hashClear = hashClear$1;

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

function hashDelete$1(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

var _hashDelete = hashDelete$1;

var nativeCreate$2 = _nativeCreate;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto$c = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$a = objectProto$c.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet$1(key) {
  var data = this.__data__;
  if (nativeCreate$2) {
    var result = data[key];
    return result === HASH_UNDEFINED$1 ? undefined : result;
  }
  return hasOwnProperty$a.call(data, key) ? data[key] : undefined;
}

var _hashGet = hashGet$1;

var nativeCreate$1 = _nativeCreate;

/** Used for built-in method references. */
var objectProto$b = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$9 = objectProto$b.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas$1(key) {
  var data = this.__data__;
  return nativeCreate$1 ? (data[key] !== undefined) : hasOwnProperty$9.call(data, key);
}

var _hashHas = hashHas$1;

var nativeCreate = _nativeCreate;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet$1(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

var _hashSet = hashSet$1;

var hashClear = _hashClear,
    hashDelete = _hashDelete,
    hashGet = _hashGet,
    hashHas = _hashHas,
    hashSet = _hashSet;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash$1(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash$1.prototype.clear = hashClear;
Hash$1.prototype['delete'] = hashDelete;
Hash$1.prototype.get = hashGet;
Hash$1.prototype.has = hashHas;
Hash$1.prototype.set = hashSet;

var _Hash = Hash$1;

var Hash = _Hash,
    ListCache$2 = _ListCache,
    Map$3 = _Map;

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear$1() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map$3 || ListCache$2),
    'string': new Hash
  };
}

var _mapCacheClear = mapCacheClear$1;

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */

function isKeyable$1(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

var _isKeyable = isKeyable$1;

var isKeyable = _isKeyable;

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData$4(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

var _getMapData = getMapData$4;

var getMapData$3 = _getMapData;

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete$1(key) {
  var result = getMapData$3(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

var _mapCacheDelete = mapCacheDelete$1;

var getMapData$2 = _getMapData;

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet$1(key) {
  return getMapData$2(this, key).get(key);
}

var _mapCacheGet = mapCacheGet$1;

var getMapData$1 = _getMapData;

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas$1(key) {
  return getMapData$1(this, key).has(key);
}

var _mapCacheHas = mapCacheHas$1;

var getMapData = _getMapData;

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet$1(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

var _mapCacheSet = mapCacheSet$1;

var mapCacheClear = _mapCacheClear,
    mapCacheDelete = _mapCacheDelete,
    mapCacheGet = _mapCacheGet,
    mapCacheHas = _mapCacheHas,
    mapCacheSet = _mapCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache$2(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache$2.prototype.clear = mapCacheClear;
MapCache$2.prototype['delete'] = mapCacheDelete;
MapCache$2.prototype.get = mapCacheGet;
MapCache$2.prototype.has = mapCacheHas;
MapCache$2.prototype.set = mapCacheSet;

var _MapCache = MapCache$2;

var ListCache$1 = _ListCache,
    Map$2 = _Map,
    MapCache$1 = _MapCache;

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet$1(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache$1) {
    var pairs = data.__data__;
    if (!Map$2 || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache$1(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

var _stackSet = stackSet$1;

var ListCache = _ListCache,
    stackClear = _stackClear,
    stackDelete = _stackDelete,
    stackGet = _stackGet,
    stackHas = _stackHas,
    stackSet = _stackSet;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack$4(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack$4.prototype.clear = stackClear;
Stack$4.prototype['delete'] = stackDelete;
Stack$4.prototype.get = stackGet;
Stack$4.prototype.has = stackHas;
Stack$4.prototype.set = stackSet;

var _Stack = Stack$4;

var getNative$3 = _getNative;

var defineProperty$2 = (function() {
  try {
    var func = getNative$3(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

var _defineProperty = defineProperty$2;

var defineProperty$1 = _defineProperty;

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue$5(object, key, value) {
  if (key == '__proto__' && defineProperty$1) {
    defineProperty$1(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

var _baseAssignValue = baseAssignValue$5;

var baseAssignValue$4 = _baseAssignValue,
    eq$3 = eq_1;

/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignMergeValue$2(object, key, value) {
  if ((value !== undefined && !eq$3(object[key], value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue$4(object, key, value);
  }
}

var _assignMergeValue = assignMergeValue$2;

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */

function createBaseFor$1(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

var _createBaseFor = createBaseFor$1;

var createBaseFor = _createBaseFor;

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor$2 = createBaseFor();

var _baseFor = baseFor$2;

var _cloneBuffer = {exports: {}};

(function (module, exports) {
	var root = _root;

	/** Detect free variable `exports`. */
	var freeExports = exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined,
	    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

	/**
	 * Creates a clone of  `buffer`.
	 *
	 * @private
	 * @param {Buffer} buffer The buffer to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Buffer} Returns the cloned buffer.
	 */
	function cloneBuffer(buffer, isDeep) {
	  if (isDeep) {
	    return buffer.slice();
	  }
	  var length = buffer.length,
	      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

	  buffer.copy(result);
	  return result;
	}

	module.exports = cloneBuffer;
} (_cloneBuffer, _cloneBuffer.exports));

var root$7 = _root;

/** Built-in value references. */
var Uint8Array$3 = root$7.Uint8Array;

var _Uint8Array = Uint8Array$3;

var Uint8Array$2 = _Uint8Array;

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer$3(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array$2(result).set(new Uint8Array$2(arrayBuffer));
  return result;
}

var _cloneArrayBuffer = cloneArrayBuffer$3;

var cloneArrayBuffer$2 = _cloneArrayBuffer;

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray$2(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer$2(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

var _cloneTypedArray = cloneTypedArray$2;

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */

function copyArray$4(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

var _copyArray = copyArray$4;

var isObject$9 = isObject_1;

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate$2 = (function() {
  function object() {}
  return function(proto) {
    if (!isObject$9(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

var _baseCreate = baseCreate$2;

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */

function overArg$2(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

var _overArg = overArg$2;

var overArg$1 = _overArg;

/** Built-in value references. */
var getPrototype$3 = overArg$1(Object.getPrototypeOf, Object);

var _getPrototype = getPrototype$3;

/** Used for built-in method references. */

var objectProto$a = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype$3(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$a;

  return value === proto;
}

var _isPrototype = isPrototype$3;

var baseCreate$1 = _baseCreate,
    getPrototype$2 = _getPrototype,
    isPrototype$2 = _isPrototype;

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject$2(object) {
  return (typeof object.constructor == 'function' && !isPrototype$2(object))
    ? baseCreate$1(getPrototype$2(object))
    : {};
}

var _initCloneObject = initCloneObject$2;

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */

function isObjectLike$b(value) {
  return value != null && typeof value == 'object';
}

var isObjectLike_1 = isObjectLike$b;

var baseGetTag$5 = _baseGetTag,
    isObjectLike$a = isObjectLike_1;

/** `Object#toString` result references. */
var argsTag$3 = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments$1(value) {
  return isObjectLike$a(value) && baseGetTag$5(value) == argsTag$3;
}

var _baseIsArguments = baseIsArguments$1;

var baseIsArguments = _baseIsArguments,
    isObjectLike$9 = isObjectLike_1;

/** Used for built-in method references. */
var objectProto$9 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$8 = objectProto$9.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable$1 = objectProto$9.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments$3 = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike$9(value) && hasOwnProperty$8.call(value, 'callee') &&
    !propertyIsEnumerable$1.call(value, 'callee');
};

var isArguments_1 = isArguments$3;

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */

var isArray$c = Array.isArray;

var isArray_1 = isArray$c;

/** Used as references for various `Number` constants. */

var MAX_SAFE_INTEGER$1 = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength$3(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
}

var isLength_1 = isLength$3;

var isFunction$1 = isFunction_1,
    isLength$2 = isLength_1;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike$5(value) {
  return value != null && isLength$2(value.length) && !isFunction$1(value);
}

var isArrayLike_1 = isArrayLike$5;

var isArrayLike$4 = isArrayLike_1,
    isObjectLike$8 = isObjectLike_1;

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject$1(value) {
  return isObjectLike$8(value) && isArrayLike$4(value);
}

var isArrayLikeObject_1 = isArrayLikeObject$1;

var isBuffer$4 = {exports: {}};

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */

function stubFalse() {
  return false;
}

var stubFalse_1 = stubFalse;

(function (module, exports) {
	var root = _root,
	    stubFalse = stubFalse_1;

	/** Detect free variable `exports`. */
	var freeExports = exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse;

	module.exports = isBuffer;
} (isBuffer$4, isBuffer$4.exports));

var baseGetTag$4 = _baseGetTag,
    getPrototype$1 = _getPrototype,
    isObjectLike$7 = isObjectLike_1;

/** `Object#toString` result references. */
var objectTag$4 = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto$8 = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$7 = objectProto$8.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject$2(value) {
  if (!isObjectLike$7(value) || baseGetTag$4(value) != objectTag$4) {
    return false;
  }
  var proto = getPrototype$1(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty$7.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

var isPlainObject_1 = isPlainObject$2;

var baseGetTag$3 = _baseGetTag,
    isLength$1 = isLength_1,
    isObjectLike$6 = isObjectLike_1;

/** `Object#toString` result references. */
var argsTag$2 = '[object Arguments]',
    arrayTag$2 = '[object Array]',
    boolTag$3 = '[object Boolean]',
    dateTag$3 = '[object Date]',
    errorTag$3 = '[object Error]',
    funcTag$1 = '[object Function]',
    mapTag$5 = '[object Map]',
    numberTag$3 = '[object Number]',
    objectTag$3 = '[object Object]',
    regexpTag$3 = '[object RegExp]',
    setTag$5 = '[object Set]',
    stringTag$3 = '[object String]',
    weakMapTag$3 = '[object WeakMap]';

var arrayBufferTag$3 = '[object ArrayBuffer]',
    dataViewTag$4 = '[object DataView]',
    float32Tag$2 = '[object Float32Array]',
    float64Tag$2 = '[object Float64Array]',
    int8Tag$2 = '[object Int8Array]',
    int16Tag$2 = '[object Int16Array]',
    int32Tag$2 = '[object Int32Array]',
    uint8Tag$2 = '[object Uint8Array]',
    uint8ClampedTag$2 = '[object Uint8ClampedArray]',
    uint16Tag$2 = '[object Uint16Array]',
    uint32Tag$2 = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] =
typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] =
typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] =
typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] =
typedArrayTags[uint32Tag$2] = true;
typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] =
typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$3] =
typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] =
typedArrayTags[errorTag$3] = typedArrayTags[funcTag$1] =
typedArrayTags[mapTag$5] = typedArrayTags[numberTag$3] =
typedArrayTags[objectTag$3] = typedArrayTags[regexpTag$3] =
typedArrayTags[setTag$5] = typedArrayTags[stringTag$3] =
typedArrayTags[weakMapTag$3] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray$1(value) {
  return isObjectLike$6(value) &&
    isLength$1(value.length) && !!typedArrayTags[baseGetTag$3(value)];
}

var _baseIsTypedArray = baseIsTypedArray$1;

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */

var _baseUnary;
var hasRequired_baseUnary;

function require_baseUnary () {
	if (hasRequired_baseUnary) return _baseUnary;
	hasRequired_baseUnary = 1;
	function baseUnary(func) {
	  return function(value) {
	    return func(value);
	  };
	}

	_baseUnary = baseUnary;
	return _baseUnary;
}

var _nodeUtil = {exports: {}};

(function (module, exports) {
	var freeGlobal = _freeGlobal;

	/** Detect free variable `exports`. */
	var freeExports = exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && freeGlobal.process;

	/** Used to access faster Node.js helpers. */
	var nodeUtil = (function() {
	  try {
	    // Use `util.types` for Node.js 10+.
	    var types = freeModule && freeModule.require && freeModule.require('util').types;

	    if (types) {
	      return types;
	    }

	    // Legacy `process.binding('util')` for Node.js < 10.
	    return freeProcess && freeProcess.binding && freeProcess.binding('util');
	  } catch (e) {}
	}());

	module.exports = nodeUtil;
} (_nodeUtil, _nodeUtil.exports));

var baseIsTypedArray = _baseIsTypedArray,
    baseUnary$2 = require_baseUnary(),
    nodeUtil$2 = _nodeUtil.exports;

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil$2 && nodeUtil$2.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray$3 = nodeIsTypedArray ? baseUnary$2(nodeIsTypedArray) : baseIsTypedArray;

var isTypedArray_1 = isTypedArray$3;

/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */

function safeGet$2(object, key) {
  if (key === 'constructor' && typeof object[key] === 'function') {
    return;
  }

  if (key == '__proto__') {
    return;
  }

  return object[key];
}

var _safeGet = safeGet$2;

var baseAssignValue$3 = _baseAssignValue,
    eq$2 = eq_1;

/** Used for built-in method references. */
var objectProto$7 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$6 = objectProto$7.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue$3(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty$6.call(object, key) && eq$2(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue$3(object, key, value);
  }
}

var _assignValue = assignValue$3;

var assignValue$2 = _assignValue,
    baseAssignValue$2 = _baseAssignValue;

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject$5(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue$2(object, key, newValue);
    } else {
      assignValue$2(object, key, newValue);
    }
  }
  return object;
}

var _copyObject = copyObject$5;

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */

function baseTimes$1(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

var _baseTimes = baseTimes$1;

/** Used as references for various `Number` constants. */

var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex$5(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

var _isIndex = isIndex$5;

var baseTimes = _baseTimes,
    isArguments$2 = isArguments_1,
    isArray$b = isArray_1,
    isBuffer$3 = isBuffer$4.exports,
    isIndex$4 = _isIndex,
    isTypedArray$2 = isTypedArray_1;

/** Used for built-in method references. */
var objectProto$6 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$5 = objectProto$6.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys$2(value, inherited) {
  var isArr = isArray$b(value),
      isArg = !isArr && isArguments$2(value),
      isBuff = !isArr && !isArg && isBuffer$3(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray$2(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty$5.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex$4(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

var _arrayLikeKeys = arrayLikeKeys$2;

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

function nativeKeysIn$1(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

var _nativeKeysIn = nativeKeysIn$1;

var isObject$8 = isObject_1,
    isPrototype$1 = _isPrototype,
    nativeKeysIn = _nativeKeysIn;

/** Used for built-in method references. */
var objectProto$5 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$4 = objectProto$5.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn$1(object) {
  if (!isObject$8(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype$1(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty$4.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

var _baseKeysIn = baseKeysIn$1;

var arrayLikeKeys$1 = _arrayLikeKeys,
    baseKeysIn = _baseKeysIn,
    isArrayLike$3 = isArrayLike_1;

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn$5(object) {
  return isArrayLike$3(object) ? arrayLikeKeys$1(object, true) : baseKeysIn(object);
}

var keysIn_1 = keysIn$5;

var copyObject$4 = _copyObject,
    keysIn$4 = keysIn_1;

/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */
function toPlainObject$1(value) {
  return copyObject$4(value, keysIn$4(value));
}

var toPlainObject_1 = toPlainObject$1;

var assignMergeValue$1 = _assignMergeValue,
    cloneBuffer$1 = _cloneBuffer.exports,
    cloneTypedArray$1 = _cloneTypedArray,
    copyArray$3 = _copyArray,
    initCloneObject$1 = _initCloneObject,
    isArguments$1 = isArguments_1,
    isArray$a = isArray_1,
    isArrayLikeObject = isArrayLikeObject_1,
    isBuffer$2 = isBuffer$4.exports,
    isFunction = isFunction_1,
    isObject$7 = isObject_1,
    isPlainObject$1 = isPlainObject_1,
    isTypedArray$1 = isTypedArray_1,
    safeGet$1 = _safeGet,
    toPlainObject = toPlainObject_1;

/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMergeDeep$1(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = safeGet$1(object, key),
      srcValue = safeGet$1(source, key),
      stacked = stack.get(srcValue);

  if (stacked) {
    assignMergeValue$1(object, key, stacked);
    return;
  }
  var newValue = customizer
    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    : undefined;

  var isCommon = newValue === undefined;

  if (isCommon) {
    var isArr = isArray$a(srcValue),
        isBuff = !isArr && isBuffer$2(srcValue),
        isTyped = !isArr && !isBuff && isTypedArray$1(srcValue);

    newValue = srcValue;
    if (isArr || isBuff || isTyped) {
      if (isArray$a(objValue)) {
        newValue = objValue;
      }
      else if (isArrayLikeObject(objValue)) {
        newValue = copyArray$3(objValue);
      }
      else if (isBuff) {
        isCommon = false;
        newValue = cloneBuffer$1(srcValue, true);
      }
      else if (isTyped) {
        isCommon = false;
        newValue = cloneTypedArray$1(srcValue, true);
      }
      else {
        newValue = [];
      }
    }
    else if (isPlainObject$1(srcValue) || isArguments$1(srcValue)) {
      newValue = objValue;
      if (isArguments$1(objValue)) {
        newValue = toPlainObject(objValue);
      }
      else if (!isObject$7(objValue) || isFunction(objValue)) {
        newValue = initCloneObject$1(srcValue);
      }
    }
    else {
      isCommon = false;
    }
  }
  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack['delete'](srcValue);
  }
  assignMergeValue$1(object, key, newValue);
}

var _baseMergeDeep = baseMergeDeep$1;

var Stack$3 = _Stack,
    assignMergeValue = _assignMergeValue,
    baseFor$1 = _baseFor,
    baseMergeDeep = _baseMergeDeep,
    isObject$6 = isObject_1,
    keysIn$3 = keysIn_1,
    safeGet = _safeGet;

/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMerge$1(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  baseFor$1(source, function(srcValue, key) {
    stack || (stack = new Stack$3);
    if (isObject$6(srcValue)) {
      baseMergeDeep(object, source, key, srcIndex, baseMerge$1, customizer, stack);
    }
    else {
      var newValue = customizer
        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
        : undefined;

      if (newValue === undefined) {
        newValue = srcValue;
      }
      assignMergeValue(object, key, newValue);
    }
  }, keysIn$3);
}

var _baseMerge = baseMerge$1;

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */

function identity$5(value) {
  return value;
}

var identity_1 = identity$5;

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */

function apply$3(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

var _apply = apply$3;

var apply$2 = _apply;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax$3 = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest$1(func, start, transform) {
  start = nativeMax$3(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax$3(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply$2(func, this, otherArgs);
  };
}

var _overRest = overRest$1;

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */

function constant$1(value) {
  return function() {
    return value;
  };
}

var constant_1 = constant$1;

var constant = constant_1,
    defineProperty = _defineProperty,
    identity$4 = identity_1;

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString$1 = !defineProperty ? identity$4 : function(func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

var _baseSetToString = baseSetToString$1;

/** Used to detect hot functions by number of calls within a span of milliseconds. */

var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut$2(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

var _shortOut = shortOut$2;

var baseSetToString = _baseSetToString,
    shortOut$1 = _shortOut;

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString$2 = shortOut$1(baseSetToString);

var _setToString = setToString$2;

var identity$3 = identity_1,
    overRest = _overRest,
    setToString$1 = _setToString;

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest$1(func, start) {
  return setToString$1(overRest(func, start, identity$3), func + '');
}

var _baseRest = baseRest$1;

var eq$1 = eq_1,
    isArrayLike$2 = isArrayLike_1,
    isIndex$3 = _isIndex,
    isObject$5 = isObject_1;

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall$1(value, index, object) {
  if (!isObject$5(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike$2(object) && isIndex$3(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq$1(object[index], value);
  }
  return false;
}

var _isIterateeCall = isIterateeCall$1;

var baseRest = _baseRest,
    isIterateeCall = _isIterateeCall;

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner$1(assigner) {
  return baseRest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

var _createAssigner = createAssigner$1;

var baseMerge = _baseMerge,
    createAssigner = _createAssigner;

/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable string keyed properties of source objects into the
 * destination object. Source properties that resolve to `undefined` are
 * skipped if a destination value exists. Array and plain object properties
 * are merged recursively. Other objects and value types are overridden by
 * assignment. Source objects are applied from left to right. Subsequent
 * sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {
 *   'a': [{ 'b': 2 }, { 'd': 4 }]
 * };
 *
 * var other = {
 *   'a': [{ 'c': 3 }, { 'e': 5 }]
 * };
 *
 * _.merge(object, other);
 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
 */
var merge = createAssigner(function(object, source, srcIndex) {
  baseMerge(object, source, srcIndex);
});

var merge_1 = merge;

/**
 * Copyright 2021 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it.
 */
var _Validator_pool, _Validator_detectionLength;
const dbg$8 = debug('c2pa:Validator');
/**
 * Handles validation of input before processing it for C2PA metadata
 *
 * @public
 */
class Validator {
    constructor(pool, detectionLength) {
        _Validator_pool.set(this, void 0);
        _Validator_detectionLength.set(this, void 0);
        __classPrivateFieldSet(this, _Validator_pool, pool, "f");
        __classPrivateFieldSet(this, _Validator_detectionLength, detectionLength ?? Validator.DEFAULT_DETECTION_LENGTH, "f");
    }
    /**
     * Sanitizes mime type strings for proper file type checking
     *
     * @remarks
     * We need to do this since some Content-Types can coming in such as `image/jpeg; charset=utf-8`.
     *
     * @param type - The mime type of the asset
     */
    static sanitizeMimeType(type) {
        return type.split(';')[0];
    }
    /**
     * Checks if the asset has a mime type that is compatible with C2PA
     *
     * @param type - The mime type of the asset to check
     */
    static isValidMimeType(type) {
        return this.VALID_MIME_TYPES.includes(this.sanitizeMimeType(type));
    }
    /**
     * Scans an individual binary chunk for a C2PA metadata marker
     *
     * @param chunk - the chunk to check for the metadata marker
     */
    async scanChunk(chunk) {
        dbg$8('Scanning buffer for C2PA marker with length %d', chunk.byteLength);
        // TODO: Add support for transferable objects
        const result = await __classPrivateFieldGet(this, _Validator_pool, "f").scanInput(chunk);
        dbg$8('Scanned buffer and got result', result);
        return result;
    }
    /**
     * Scans a buffer/Blob for a C2PA metadata marker
     *
     * @remarks
     * This will automatically handle both a `ArrayBuffer` or a `Blob` as input
     * and automatically decide if it should be passed as a transferable object or not.
     * It will then pass it to `scanChunk` for the actual processing.
     *
     * @param input - The buffer/blob to scan
     */
    async scanInput(input) {
        let buffer = null;
        if (input instanceof ArrayBuffer) {
            buffer = input;
        }
        else if (input instanceof Blob) {
            // Only send this as a transferable object if we are extracting an array
            // buffer from a blob, since we won't be re-using this buffer anywhere else
            const fullBuffer = await input.arrayBuffer();
            if (__classPrivateFieldGet(this, _Validator_detectionLength, "f") > 0) {
                buffer = fullBuffer.slice(0, __classPrivateFieldGet(this, _Validator_detectionLength, "f"));
            }
            else {
                buffer = fullBuffer;
            }
        }
        if (!buffer) {
            throw new InvalidInputError();
        }
        return this.scanChunk(buffer);
    }
}
_Validator_pool = new WeakMap(), _Validator_detectionLength = new WeakMap();
Validator.VALID_MIME_TYPES = [
    'image/jpeg',
    'image/png',
    'image/webp',
    'image/svg+xml',
    'video/mp4',
    'application/x-c2pa-manifest-store',
];
Validator.DEFAULT_DETECTION_LENGTH = 65535;

/**
 * Copyright 2021 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it.
 */
var _a, _Downloader_options, _Downloader_pool, _Downloader_validator, _Downloader_responseCache, _Downloader_defaultOptions, _Downloader_defaultFetchOptions;
const dbg$7 = debug('c2pa:Downloader');
const cacheDbg = debug('c2pa:Downloader:Cache');
/**
 * Handles downloading of any assets
 *
 * @public
 */
class Downloader {
    constructor(pool, opts = {}) {
        _Downloader_options.set(this, void 0);
        _Downloader_pool.set(this, void 0);
        _Downloader_validator.set(this, void 0);
        __classPrivateFieldSet(this, _Downloader_options, { ...__classPrivateFieldGet(Downloader, _a, "f", _Downloader_defaultOptions), ...opts }, "f");
        __classPrivateFieldSet(this, _Downloader_pool, pool, "f");
        __classPrivateFieldSet(this, _Downloader_validator, new Validator(__classPrivateFieldGet(this, _Downloader_pool, "f"), __classPrivateFieldGet(this, _Downloader_options, "f").inspectSize), "f");
    }
    /**
     * Wrapper around `fetch` to download an asset
     *
     * @remarks
     * This has convenience logic for range requests
     *
     * @param url - The URL to fetch
     * @param fetchOptions - Options for this particular request
     */
    static async download(url, fetchOptions = {}) {
        dbg$7('Downloading', url);
        try {
            const defaultOpts = __classPrivateFieldGet(Downloader, _a, "f", _Downloader_defaultFetchOptions);
            const opts = merge_1({}, defaultOpts, fetchOptions);
            // Only use range if it is specified. If not, it may lead to CORS issues due to not being whitelisted
            const useRange = opts.rangeStart !== defaultOpts.rangeStart ||
                opts.rangeEnd !== defaultOpts.rangeEnd;
            const range = [opts.rangeStart, opts.rangeEnd ?? ''].join('-');
            const rangeHeaders = useRange
                ? { headers: { range: `bytes=${range}` } }
                : null;
            const res = await fetch(url, merge_1({}, opts.fetchConfig, rangeHeaders));
            if (res.ok) {
                return res;
            }
            else {
                throw new UrlFetchError(url, res);
            }
        }
        catch (err) {
            throw new UrlFetchError(url, null, { cause: err });
        }
    }
    /**
     * This allows us to inspect the image to see if the header contains C2PA data
     *
     * @remarks
     * We will request a download to the server requesting the first `inspectSize` bytes. From there:
     * - if the server responds with a payload less than the content-length, we will inspect that chunk and
     *   download the rest if the content-type matches and that chunk contains metadata
     * - if it responds with a payload equal to or greater than the content-length, we will inspect that the
     *   content type matches, scan the chunk, and return the data
     * - we'll return `null` if the content-type is invalid or if CAI data does not exist
     *
     * @param url - The URL to fetch
     */
    async inspect(url) {
        dbg$7('Inspecting', url);
        let res;
        let contentType = null;
        const shouldInspect = __classPrivateFieldGet(this, _Downloader_options, "f").inspectSize > 0;
        if (shouldInspect) {
            try {
                res = await Downloader.download(url, {
                    rangeEnd: __classPrivateFieldGet(this, _Downloader_options, "f").inspectSize,
                });
                contentType = res.headers.get('content-type');
                if (res.status === 206) {
                    dbg$7('Successfully downloaded first part of url (supports range requests)', url, res);
                }
                else {
                    dbg$7('Successfully downloaded complete url (server does not support range requests)', url, res);
                }
            }
            catch (err) {
                dbg$7('Attempting to download with a range header failed, trying again without one', err);
            }
        }
        else {
            dbg$7('inspectSize of 0 given, downloading entire file');
        }
        if (!res) {
            try {
                // We don't have an initial response due to not doing the initial range download
                // Do a HEAD request to determine if we should download the entire file based on content-type
                const headRes = await Downloader.download(url, {
                    fetchConfig: {
                        method: 'HEAD',
                    },
                });
                contentType = headRes.headers.get('content-type');
                dbg$7('Performed HEAD request and got content-type', url, contentType);
            }
            catch (err) {
                dbg$7('HEAD request to check for content-type failed, downloading entire file');
            }
        }
        if (contentType && !Validator.isValidMimeType(contentType)) {
            dbg$7('Resource has invalid content type', contentType);
            throw new InvalidMimeTypeError(contentType);
        }
        if (!res) {
            res = await Downloader.download(url);
        }
        const blob = await res.blob();
        if (!shouldInspect) {
            dbg$7(`Skipping inspection due to disabling the config`);
            return blob;
        }
        const buffer = await blob.arrayBuffer();
        const { found } = await __classPrivateFieldGet(this, _Downloader_validator, "f").scanChunk(buffer);
        if (found) {
            dbg$7('C2PA metadata found for url', url);
        }
        else {
            dbg$7('No C2PA metadata found for url', url);
            return null;
        }
        // We don't get a full content-length back from the server when doing a range
        // request, so we need to guess based on the response. We should continue if
        // we get a 206 back from the server instead of a 200, and that equals the `inspectSize`.
        // In that case, changes are the second request will yield more data, unless the image
        // size is exactly the `inspectSize`, and we get no data back.
        const shouldContinue = res.status === 206 && buffer.byteLength === __classPrivateFieldGet(this, _Downloader_options, "f").inspectSize + 1;
        if (shouldContinue) {
            dbg$7('Continuing download at offset %d', __classPrivateFieldGet(this, _Downloader_options, "f").inspectSize);
            const tailRes = await Downloader.download(url, {
                // We need to start the range at the next byte
                rangeStart: __classPrivateFieldGet(this, _Downloader_options, "f").inspectSize + 1,
            });
            const tailBuffer = await tailRes.arrayBuffer();
            dbg$7('Successfully downloaded rest of file (%d bytes)', tailBuffer.byteLength);
            return new Blob([buffer, tailBuffer], { type: blob.type });
        }
        return blob;
    }
    /**
     * Fetches a JSON payload and caches it, using the requested URL as the key
     *
     * @param url - The URL to fetch and cache
     */
    static async cachedGetJson(url) {
        if (!__classPrivateFieldGet(this, _a, "f", _Downloader_responseCache).get(url)) {
            cacheDbg('No cache found for %s', url);
            const res = await Downloader.download(url, {
                fetchConfig: {
                    credentials: 'omit',
                    headers: {
                        Accept: 'application/json',
                    },
                },
            });
            const data = await res.json();
            cacheDbg('Saving data for %s', url, data);
            __classPrivateFieldGet(this, _a, "f", _Downloader_responseCache).set(url, data);
        }
        cacheDbg('Returning cached data for %s', url);
        return __classPrivateFieldGet(this, _a, "f", _Downloader_responseCache).get(url);
    }
}
_a = Downloader, _Downloader_options = new WeakMap(), _Downloader_pool = new WeakMap(), _Downloader_validator = new WeakMap();
_Downloader_responseCache = { value: new Map() };
_Downloader_defaultOptions = { value: {
        inspectSize: 0,
    } };
_Downloader_defaultFetchOptions = { value: {
        rangeStart: 0,
        rangeEnd: undefined,
        fetchConfig: {},
    } };

/**
 * Copyright 2023 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it.
 */
function createTask(task) {
    return task;
}

/**
 * Copyright 2023 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it.
 */
// From https://github.com/josdejong/workerpool/blob/master/src/WorkerHandler.js#L179-L193
function deserializeError(serializedError) {
    var temp = new Error('');
    var props = Object.keys(serializedError);
    for (var i = 0; i < props.length; i++) {
        // @ts-ignore
        temp[props[i]] = serializedError[props[i]];
    }
    return temp;
}

/**
 * Copyright 2023 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it.
 */
/**
 * Create a wrapper responsible for managing a single worker
 *
 * @param scriptUrl URL to worker script
 * @returns {WorkerManager}
 */
function createWorkerManager(scriptUrl) {
    const worker = new Worker(scriptUrl, { type: 'module' });
    let working = false;
    const execute = async (request) => {
        worker.postMessage(request);
        working = true;
        return new Promise((resolve, reject) => {
            worker.onmessage = function (e) {
                if (e.data.type === 'success') {
                    resolve(e.data.data);
                }
                else {
                    reject(deserializeError(e.data.error));
                }
                working = false;
            };
            worker.onerror = function (e) {
                working = false;
                reject(e);
            };
        });
    };
    const isWorking = () => working;
    const terminate = () => worker.terminate();
    return {
        execute,
        isWorking,
        terminate,
    };
}

/**
 * Copyright 2023 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it.
 */
/**
 * Create a configurable pool of workers capable of concurrent task execution
 *
 * @param {WorkerPoolConfig} config
 * @returns {WorkerPool}
 */
function createWorkerPool(config) {
    const workers = [];
    const tasks = [];
    /**
     * Retrieve an available worker. If none are available and the max is not reached,
     * a new one will be created and returned.
     *
     * @returns {WorkerManager | null} worker
     */
    const getWorker = () => {
        for (const worker of workers) {
            if (!worker.isWorking())
                return worker;
        }
        if (workers.length < config.maxWorkers) {
            const newWorker = createWorkerManager(config.scriptSrc);
            workers.push(newWorker);
            return newWorker;
        }
        return null;
    };
    /**
     * Attempt to process the task queue by retrieving a worker, assigning it a task,
     * and resolving the task once complete.
     */
    const assignTask = async () => {
        const worker = getWorker();
        if (!worker) {
            return;
        }
        const task = tasks.pop();
        if (!task) {
            return;
        }
        try {
            const result = await worker.execute(task.request);
            task.resolve(result);
        }
        catch (error) {
            task.reject(error);
        }
    };
    /**
     * Attempt to execute a method on the worker
     *
     * @param method Name of method to execute
     * @param args Arguments to be passed
     * @returns Promise that resolves once the method has finished executing
     */
    const execute = (method, args) => {
        return new Promise((resolve, reject) => {
            const task = createTask({
                request: {
                    method,
                    args,
                },
                resolve: (value) => {
                    resolve(value);
                    // Upon completion of this task, its worker is now free and the queue should be checked
                    assignTask();
                },
                reject: (value) => {
                    reject(value);
                    assignTask();
                },
            });
            tasks.push(task);
            assignTask();
        });
    };
    const terminate = () => {
        workers.forEach((worker) => worker.terminate());
    };
    return {
        execute,
        terminate,
    };
}

/**
 * Copyright 2022 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it.
 */
const dbg$6 = debug('c2pa:workers');
async function createLocalExecutionEnvironment(scriptSrc) {
    console.debug('Using local execution environment from', scriptSrc);
    const { worker } = await import(
    /* @vite-ignore */ /* webpackIgnore: true */ scriptSrc);
    return {
        ...worker,
        dispose: () => { },
    };
}
async function createPoolWrapper(config) {
    // Fix for Safari < 14 when trying to call this from inside an existing Web worker
    if (typeof Worker === 'undefined') {
        return createLocalExecutionEnvironment(config.fallbackScriptSrc ?? config.scriptSrc);
    }
    const res = await fetch(config.scriptSrc);
    if (!res.ok)
        throw new InvalidWorkerSourceError(config.scriptSrc, res);
    const src = await res.text();
    // @TODO: check subresource integrity
    dbg$6('Fetched worker from %s (%d bytes)', config.scriptSrc, src.length);
    const workerBlob = new Blob([src], { type: 'application/javascript' });
    const workerUrl = URL.createObjectURL(workerBlob);
    const workerPool = createWorkerPool({
        ...config,
        scriptSrc: workerUrl,
    });
    const pool = {
        compileWasm: async (...args) => workerPool.execute('compileWasm', args),
        embedAndSign: async (...args) => workerPool.execute('embedAndSign', args),
        exportImage: async (...args) => workerPool.execute('exportImage', args),
        getReport: async (...args) => workerPool.execute('getReport', args),
        getReportFromAssetAndManifestBuffer: async (...args) => workerPool.execute('getReportFromAssetAndManifestBuffer', args),
        scanInput: async (...args) => workerPool.execute('scanInput', args),
        scanInputUrl: async (...args) => workerPool.execute('scanInputUrl', args),
        createIngredientFromArrayBuffer: async (...args) => workerPool.execute('createIngredientFromArrayBuffer', args),
        createIngredientFromFile: async (...args) => workerPool.execute('createIngredientFromFile', args),
    };
    return {
        ...pool,
        dispose: () => {
            URL.revokeObjectURL(workerUrl);
            return workerPool.terminate();
        },
    };
}

/**
 * Copyright 2022 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it.
 */
const dbg$5 = debug('c2pa:wasm');
/**
 * Fetches the WASM binary from a supplied URL
 *
 * @param pool Worker pool to be used when compiling WASM
 * @param binaryUrl URL pointing to WASM binary
 */
async function fetchWasm(pool, binaryUrl) {
    // @ts-ignore - this value is rewritten by Rollup
    const integrity = {"toolkit.d.ts":"sha512-r+ih6ZkxwO2E9x1cHz2xKt80/3tA4X+lXRE19pstEBT0mTDeHdnfRoWto59WBkkoZUokB9ywXN3X2F2a6/AI+g==","toolkit.js":"sha512-Ny0s+M5jH9L0itMaPWBeMSgyKNyxGTqO3+b9TOQi9bizJjAHvkwmrApGsR6Bp+qD4xmFezUWKIv+7pthvLymiA==","toolkit_bg.wasm":"sha512-JyEtOqeuxkQ+sBW7UK4HG88RixHqmHYFEL5jJxPeQ6Ib1i9iPaH6JpmBFvp4IUxRA/J/xNpkbnGvGvGpQ04zHQ==","toolkit_bg.wasm.d.ts":"sha512-0V8H8TW0j8W5DxXW26xVGMkCcjr8bJC8Op4TYgskCVySx1w5qGOEeYLb62S/0d7zPWuxYWrJGSPDGO1t9rN/WA=="};
    const wasmIntegrity = integrity?.['toolkit_bg.wasm'];
    dbg$5('Fetching WASM binary from url %s', binaryUrl, {
        expectedIntegrity: wasmIntegrity,
    });
    const response = await fetch(binaryUrl, {
        integrity: wasmIntegrity,
    });
    const buffer = await response.arrayBuffer();
    dbg$5('Sending WASM binary buffer to worker for compilation', {
        size: buffer.byteLength,
    });
    const wasm = await pool.compileWasm(buffer);
    dbg$5('Compilation finished');
    return wasm;
}

/**
 * Copyright 2022 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it.
 */
/**
 * Creates a facade object with convenience methods over assertion data returned from the toolkit.
 *
 * @param assertionData Raw assertion data returned by the toolkit
 */
function createAssertionAccessor(assertionData) {
    const sortedAssertions = assertionData.sort((a, b) => (a?.instance ?? 0) - (b?.instance ?? 0));
    return {
        data: sortedAssertions,
        get: (label) => {
            // @TODO: can the "any" cast be avoided?
            return sortedAssertions.filter((data) => data.label === label);
        },
    };
}

/**
 * Copyright 2021 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it.
 */
const DEFAULT_ALG = 'SHA-256';
/**
 * Calculates the SHA of a buffer or blob using WebCrypto
 */
async function sha(data, algorithm = DEFAULT_ALG) {
    const buffer = data instanceof ArrayBuffer ? data : await data.arrayBuffer();
    // deepcode ignore InsecureHash: used for comparison, not security
    const hashBuf = await crypto.subtle.digest(algorithm, buffer);
    const hashArr = Array.from(new Uint8Array(hashBuf));
    // base64 encode the hash
    return btoa(hashArr.map((b) => String.fromCharCode(b)).join(''));
}
async function labeledSha(data, algorithm = DEFAULT_ALG) {
    const hash = await sha(data, algorithm);
    const prefix = algorithm.toString().toLowerCase().replace('-', '');
    const suffix = data.type.split('/')[1] ?? 'bin';
    return `${prefix}-${hash}.${suffix}`;
}
async function getResourceReference(data, instanceId, algorithm = DEFAULT_ALG) {
    const suffix = data.type.split('/')[1] ?? 'bin';
    const identifier = instanceId
        ? `${instanceId.replace(/[^a-z0-9\-]+/gi, '-')}.${suffix}`
        : await labeledSha(data, algorithm);
    return {
        format: data.type,
        identifier,
    };
}

/**
 * Copyright 2023 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it.
 */
function getResourceAsBlob(store, reference) {
    const { format: type, identifier } = reference ?? {};
    const data = store.resources?.[identifier];
    if (data) {
        return new Blob([Uint8Array.from(data)], {
            type,
        });
    }
    return null;
}

/**
 * Copyright 2022 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it.
 */
/**
 * Creates a facade object with convenience methods over thumbnail data returned from the toolkit.
 *
 * @param resourceStore The resource store attached to the ResourceParent
 * @param resourceReference The reference to the resource that provides the thumbnail data
 */
function createThumbnail$1(resourceStore, resourceReference) {
    const blob = resourceReference && getResourceAsBlob(resourceStore, resourceReference);
    if (!blob) {
        return null;
    }
    return {
        blob,
        contentType: resourceReference.format,
        hash: () => sha(blob),
        getUrl: () => createObjectUrlFromBlob(blob),
    };
}
function createThumbnailFromBlob(blob, contentType) {
    return {
        blob,
        contentType,
        hash: () => sha(blob),
        getUrl: () => createObjectUrlFromBlob(blob),
    };
}
function createThumbnailFromUrl(url) {
    return {
        contentType: undefined,
        getUrl: () => ({
            url,
            dispose: () => { },
        }),
    };
}
function createObjectUrlFromBlob(blob) {
    const url = URL.createObjectURL(blob);
    return {
        url,
        dispose: () => URL.revokeObjectURL(url),
    };
}

/**
 * Copyright 2022 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it.
 */
/**
 * Creates a facade object with convenience methods over ingredient data returned from the toolkit.
 *
 * @param ingredientData Raw ingredient data returned by the toolkit
 * @param manifest If provided, the created ingredient will link to this manifest. This should be the manifest with a label matching this ingredient's manifestId field.
 */
function createIngredient(ingredientData, manifest) {
    return {
        title: ingredientData.title,
        format: ingredientData.format,
        documentId: ingredientData.document_id ?? null,
        instanceId: ingredientData.instance_id,
        provenance: ingredientData.provenance ?? null,
        hash: ingredientData.hash ?? null,
        relationship: ingredientData.relationship ?? null,
        validationStatus: ingredientData.validation_status ?? [],
        metadata: ingredientData.metadata ?? null,
        manifest: manifest ?? null,
        thumbnail: createThumbnail$1(ingredientData.resources, ingredientData.thumbnail),
    };
}

/**
 * Copyright 2022 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it.
 */
/**
 * Creates a facade object with convenience methods over manifest data returned from the toolkit.
 *
 * @param manifestData Raw manifest data returned by the toolkit
 * @param manifests A map of previously-created manifest objects to be provided to ingredients. Must contain any manifest referenced by this manifest's ingredients.
 */
function createManifest(manifestData, manifests) {
    const ingredients = manifestData.ingredients.map((ingredientData) => createIngredient(ingredientData, ingredientData.active_manifest
        ? manifests[ingredientData.active_manifest]
        : undefined));
    return {
        title: manifestData.title,
        format: manifestData.format,
        vendor: manifestData.vendor ?? null,
        claimGenerator: manifestData.claim_generator,
        claimGeneratorHints: manifestData.claim_generator_hints ?? null,
        instanceId: manifestData.instance_id,
        signatureInfo: manifestData.signature_info ?? null,
        credentials: manifestData.credentials ?? [],
        ingredients,
        redactions: manifestData.redactions ?? [],
        parent: null,
        thumbnail: createThumbnail$1(manifestData.resources, manifestData.thumbnail),
        assertions: createAssertionAccessor(manifestData.assertions),
    };
}

/**
 * Copyright 2022 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it.
 */
const dbg$4 = debug('c2pa:manifestStore');
/**
 * Creates a facade object with convenience methods over manifest store data returned from the toolkit.
 *
 * @param config C2pa configuration object
 * @param manifestStoreData Manifest store data returned by the toolkit
 */
function createManifestStore(manifestStoreData) {
    const manifests = createManifests(manifestStoreData);
    return {
        manifests,
        activeManifest: manifests[manifestStoreData.active_manifest],
        validationStatus: manifestStoreData?.validation_status ?? [],
    };
}
/**
 * Ensures manifests are resolved in the correct order to build the "tree" of manifests and their ingredients.
 *
 * @param manifestStoreData
 * @returns
 */
function createManifests(manifestStoreData) {
    const { manifests: toolkitManifests, active_manifest: toolkitActiveManifestId, } = manifestStoreData;
    dbg$4('Received manifest store from toolkit', manifestStoreData);
    // Perform a post-order traversal of the manifest tree (leaves-to-root) to guarantee that a manifest's ingredient
    // manifests are already available when it is created.
    const stack = [
        {
            data: toolkitManifests[toolkitActiveManifestId],
            label: toolkitActiveManifestId,
        },
    ];
    const postorderManifests = [];
    while (stack.length) {
        const current = stack.pop();
        postorderManifests.unshift(current);
        const { data: currentManifest } = current;
        currentManifest?.ingredients?.forEach(({ active_manifest: manifestId }) => {
            if (manifestId) {
                if (manifestStoreData.manifests[manifestId]) {
                    stack.push({
                        data: manifestStoreData.manifests[manifestId],
                        label: manifestId,
                    });
                }
                else {
                    dbg$4('No manifest found for id', manifestId);
                }
            }
        });
    }
    const orderedManifests = postorderManifests.reduce((manifests, stackManifestData) => {
        const { data: manifestData, label } = stackManifestData;
        dbg$4('Creating manifest with data', manifestData);
        const manifest = createManifest(manifestData, manifests);
        manifests[label] = manifest;
        return manifests;
    }, {});
    const manifestStack = [orderedManifests[toolkitActiveManifestId]];
    // Perform an in-order traversal of the manifest tree to set 'parent' values of ingredient manifests
    while (manifestStack.length) {
        const currentManifest = manifestStack.pop();
        currentManifest.ingredients?.forEach(({ manifest }) => {
            if (manifest) {
                const selectedManifest = manifest;
                selectedManifest.parent = currentManifest;
                manifestStack.push(selectedManifest);
            }
        });
    }
    return orderedManifests;
}

var overArg = _overArg;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys$1 = overArg(Object.keys, Object);

var _nativeKeys = nativeKeys$1;

var isPrototype = _isPrototype,
    nativeKeys = _nativeKeys;

/** Used for built-in method references. */
var objectProto$4 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$3 = objectProto$4.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys$1(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty$3.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

var _baseKeys = baseKeys$1;

var arrayLikeKeys = _arrayLikeKeys,
    baseKeys = _baseKeys,
    isArrayLike$1 = isArrayLike_1;

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys$5(object) {
  return isArrayLike$1(object) ? arrayLikeKeys(object) : baseKeys(object);
}

var keys_1 = keys$5;

var baseFor = _baseFor,
    keys$4 = keys_1;

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn$3(object, iteratee) {
  return object && baseFor(object, iteratee, keys$4);
}

var _baseForOwn = baseForOwn$3;

/** Used to stand-in for `undefined` hash values. */

var _setCacheAdd;
var hasRequired_setCacheAdd;

function require_setCacheAdd () {
	if (hasRequired_setCacheAdd) return _setCacheAdd;
	hasRequired_setCacheAdd = 1;
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/**
	 * Adds `value` to the array cache.
	 *
	 * @private
	 * @name add
	 * @memberOf SetCache
	 * @alias push
	 * @param {*} value The value to cache.
	 * @returns {Object} Returns the cache instance.
	 */
	function setCacheAdd(value) {
	  this.__data__.set(value, HASH_UNDEFINED);
	  return this;
	}

	_setCacheAdd = setCacheAdd;
	return _setCacheAdd;
}

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */

var _setCacheHas;
var hasRequired_setCacheHas;

function require_setCacheHas () {
	if (hasRequired_setCacheHas) return _setCacheHas;
	hasRequired_setCacheHas = 1;
	function setCacheHas(value) {
	  return this.__data__.has(value);
	}

	_setCacheHas = setCacheHas;
	return _setCacheHas;
}

var _SetCache;
var hasRequired_SetCache;

function require_SetCache () {
	if (hasRequired_SetCache) return _SetCache;
	hasRequired_SetCache = 1;
	var MapCache = _MapCache,
	    setCacheAdd = require_setCacheAdd(),
	    setCacheHas = require_setCacheHas();

	/**
	 *
	 * Creates an array cache object to store unique values.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache(values) {
	  var index = -1,
	      length = values == null ? 0 : values.length;

	  this.__data__ = new MapCache;
	  while (++index < length) {
	    this.add(values[index]);
	  }
	}

	// Add methods to `SetCache`.
	SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	SetCache.prototype.has = setCacheHas;

	_SetCache = SetCache;
	return _SetCache;
}

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */

function arraySome$1(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

var _arraySome = arraySome$1;

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

var _cacheHas;
var hasRequired_cacheHas;

function require_cacheHas () {
	if (hasRequired_cacheHas) return _cacheHas;
	hasRequired_cacheHas = 1;
	function cacheHas(cache, key) {
	  return cache.has(key);
	}

	_cacheHas = cacheHas;
	return _cacheHas;
}

var SetCache = require_SetCache(),
    arraySome = _arraySome,
    cacheHas = require_cacheHas();

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$5 = 1,
    COMPARE_UNORDERED_FLAG$3 = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays$2(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Check that cyclic values are equal.
  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG$3) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

var _equalArrays = equalArrays$2;

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */

function mapToArray$1(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

var _mapToArray = mapToArray$1;

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */

var _setToArray;
var hasRequired_setToArray;

function require_setToArray () {
	if (hasRequired_setToArray) return _setToArray;
	hasRequired_setToArray = 1;
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function(value) {
	    result[++index] = value;
	  });
	  return result;
	}

	_setToArray = setToArray;
	return _setToArray;
}

var Symbol$3 = require_Symbol(),
    Uint8Array$1 = _Uint8Array,
    eq = eq_1,
    equalArrays$1 = _equalArrays,
    mapToArray = _mapToArray,
    setToArray = require_setToArray();

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$4 = 1,
    COMPARE_UNORDERED_FLAG$2 = 2;

/** `Object#toString` result references. */
var boolTag$2 = '[object Boolean]',
    dateTag$2 = '[object Date]',
    errorTag$2 = '[object Error]',
    mapTag$4 = '[object Map]',
    numberTag$2 = '[object Number]',
    regexpTag$2 = '[object RegExp]',
    setTag$4 = '[object Set]',
    stringTag$2 = '[object String]',
    symbolTag$3 = '[object Symbol]';

var arrayBufferTag$2 = '[object ArrayBuffer]',
    dataViewTag$3 = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto$2 = Symbol$3 ? Symbol$3.prototype : undefined,
    symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag$1(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag$3:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag$2:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array$1(object), new Uint8Array$1(other))) {
        return false;
      }
      return true;

    case boolTag$2:
    case dateTag$2:
    case numberTag$2:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag$2:
      return object.name == other.name && object.message == other.message;

    case regexpTag$2:
    case stringTag$2:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag$4:
      var convert = mapToArray;

    case setTag$4:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG$2;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays$1(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag$3:
      if (symbolValueOf$1) {
        return symbolValueOf$1.call(object) == symbolValueOf$1.call(other);
      }
  }
  return false;
}

var _equalByTag = equalByTag$1;

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */

var _arrayPush;
var hasRequired_arrayPush;

function require_arrayPush () {
	if (hasRequired_arrayPush) return _arrayPush;
	hasRequired_arrayPush = 1;
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	_arrayPush = arrayPush;
	return _arrayPush;
}

var arrayPush$1 = require_arrayPush(),
    isArray$9 = isArray_1;

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys$2(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray$9(object) ? result : arrayPush$1(result, symbolsFunc(object));
}

var _baseGetAllKeys = baseGetAllKeys$2;

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */

function arrayFilter$1(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

var _arrayFilter = arrayFilter$1;

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */

function stubArray$2() {
  return [];
}

var stubArray_1 = stubArray$2;

var arrayFilter = _arrayFilter,
    stubArray$1 = stubArray_1;

/** Used for built-in method references. */
var objectProto$3 = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols$3 = !nativeGetSymbols$1 ? stubArray$1 : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols$1(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

var _getSymbols = getSymbols$3;

var baseGetAllKeys$1 = _baseGetAllKeys,
    getSymbols$2 = _getSymbols,
    keys$3 = keys_1;

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys$2(object) {
  return baseGetAllKeys$1(object, keys$3, getSymbols$2);
}

var _getAllKeys = getAllKeys$2;

var getAllKeys$1 = _getAllKeys;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$3 = 1;

/** Used for built-in method references. */
var objectProto$2 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$2 = objectProto$2.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects$1(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
      objProps = getAllKeys$1(object),
      objLength = objProps.length,
      othProps = getAllKeys$1(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty$2.call(other, key))) {
      return false;
    }
  }
  // Check that cyclic values are equal.
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

var _equalObjects = equalObjects$1;

var getNative$2 = _getNative,
    root$6 = _root;

/* Built-in method references that are verified to be native. */
var DataView$1 = getNative$2(root$6, 'DataView');

var _DataView = DataView$1;

var getNative$1 = _getNative,
    root$5 = _root;

/* Built-in method references that are verified to be native. */
var Promise$2 = getNative$1(root$5, 'Promise');

var _Promise = Promise$2;

var _Set;
var hasRequired_Set;

function require_Set () {
	if (hasRequired_Set) return _Set;
	hasRequired_Set = 1;
	var getNative = _getNative,
	    root = _root;

	/* Built-in method references that are verified to be native. */
	var Set = getNative(root, 'Set');

	_Set = Set;
	return _Set;
}

var getNative = _getNative,
    root$4 = _root;

/* Built-in method references that are verified to be native. */
var WeakMap$2 = getNative(root$4, 'WeakMap');

var _WeakMap = WeakMap$2;

var DataView = _DataView,
    Map$1 = _Map,
    Promise$1 = _Promise,
    Set = require_Set(),
    WeakMap$1 = _WeakMap,
    baseGetTag$2 = _baseGetTag,
    toSource = _toSource;

/** `Object#toString` result references. */
var mapTag$3 = '[object Map]',
    objectTag$2 = '[object Object]',
    promiseTag = '[object Promise]',
    setTag$3 = '[object Set]',
    weakMapTag$2 = '[object WeakMap]';

var dataViewTag$2 = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map$1),
    promiseCtorString = toSource(Promise$1),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap$1);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag$5 = baseGetTag$2;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag$5(new DataView(new ArrayBuffer(1))) != dataViewTag$2) ||
    (Map$1 && getTag$5(new Map$1) != mapTag$3) ||
    (Promise$1 && getTag$5(Promise$1.resolve()) != promiseTag) ||
    (Set && getTag$5(new Set) != setTag$3) ||
    (WeakMap$1 && getTag$5(new WeakMap$1) != weakMapTag$2)) {
  getTag$5 = function(value) {
    var result = baseGetTag$2(value),
        Ctor = result == objectTag$2 ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag$2;
        case mapCtorString: return mapTag$3;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag$3;
        case weakMapCtorString: return weakMapTag$2;
      }
    }
    return result;
  };
}

var _getTag = getTag$5;

var Stack$2 = _Stack,
    equalArrays = _equalArrays,
    equalByTag = _equalByTag,
    equalObjects = _equalObjects,
    getTag$4 = _getTag,
    isArray$8 = isArray_1,
    isBuffer$1 = isBuffer$4.exports,
    isTypedArray = isTypedArray_1;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$2 = 1;

/** `Object#toString` result references. */
var argsTag$1 = '[object Arguments]',
    arrayTag$1 = '[object Array]',
    objectTag$1 = '[object Object]';

/** Used for built-in method references. */
var objectProto$1 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$1 = objectProto$1.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep$1(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray$8(object),
      othIsArr = isArray$8(other),
      objTag = objIsArr ? arrayTag$1 : getTag$4(object),
      othTag = othIsArr ? arrayTag$1 : getTag$4(other);

  objTag = objTag == argsTag$1 ? objectTag$1 : objTag;
  othTag = othTag == argsTag$1 ? objectTag$1 : othTag;

  var objIsObj = objTag == objectTag$1,
      othIsObj = othTag == objectTag$1,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer$1(object)) {
    if (!isBuffer$1(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack$2);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
    var objIsWrapped = objIsObj && hasOwnProperty$1.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty$1.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack$2);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack$2);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

var _baseIsEqualDeep = baseIsEqualDeep$1;

var baseIsEqualDeep = _baseIsEqualDeep,
    isObjectLike$5 = isObjectLike_1;

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual$2(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike$5(value) && !isObjectLike$5(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual$2, stack);
}

var _baseIsEqual = baseIsEqual$2;

var Stack$1 = _Stack,
    baseIsEqual$1 = _baseIsEqual;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$1 = 1,
    COMPARE_UNORDERED_FLAG$1 = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch$1(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack$1;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual$1(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

var _baseIsMatch = baseIsMatch$1;

var isObject$4 = isObject_1;

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable$2(value) {
  return value === value && !isObject$4(value);
}

var _isStrictComparable = isStrictComparable$2;

var isStrictComparable$1 = _isStrictComparable,
    keys$2 = keys_1;

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData$1(object) {
  var result = keys$2(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable$1(value)];
  }
  return result;
}

var _getMatchData = getMatchData$1;

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */

function matchesStrictComparable$2(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

var _matchesStrictComparable = matchesStrictComparable$2;

var baseIsMatch = _baseIsMatch,
    getMatchData = _getMatchData,
    matchesStrictComparable$1 = _matchesStrictComparable;

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches$1(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable$1(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

var _baseMatches = baseMatches$1;

var baseGetTag$1 = _baseGetTag,
    isObjectLike$4 = isObjectLike_1;

/** `Object#toString` result references. */
var symbolTag$2 = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol$5(value) {
  return typeof value == 'symbol' ||
    (isObjectLike$4(value) && baseGetTag$1(value) == symbolTag$2);
}

var isSymbol_1 = isSymbol$5;

var isArray$7 = isArray_1,
    isSymbol$4 = isSymbol_1;

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey$3(value, object) {
  if (isArray$7(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol$4(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

var _isKey = isKey$3;

var MapCache = _MapCache;

/** Error message constants. */
var FUNC_ERROR_TEXT$1 = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize$1(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT$1);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize$1.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize$1.Cache = MapCache;

var memoize_1 = memoize$1;

var memoize = memoize_1;

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped$1(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

var _memoizeCapped = memoizeCapped$1;

var memoizeCapped = _memoizeCapped;

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath$2 = memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

var _stringToPath = stringToPath$2;

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */

var _arrayMap;
var hasRequired_arrayMap;

function require_arrayMap () {
	if (hasRequired_arrayMap) return _arrayMap;
	hasRequired_arrayMap = 1;
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}

	_arrayMap = arrayMap;
	return _arrayMap;
}

var Symbol$2 = require_Symbol(),
    arrayMap$1 = require_arrayMap(),
    isArray$6 = isArray_1,
    isSymbol$3 = isSymbol_1;

/** Used as references for various `Number` constants. */
var INFINITY$2 = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto$1 = Symbol$2 ? Symbol$2.prototype : undefined,
    symbolToString = symbolProto$1 ? symbolProto$1.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString$1(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray$6(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap$1(value, baseToString$1) + '';
  }
  if (isSymbol$3(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY$2) ? '-0' : result;
}

var _baseToString = baseToString$1;

var baseToString = _baseToString;

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString$2(value) {
  return value == null ? '' : baseToString(value);
}

var toString_1 = toString$2;

var isArray$5 = isArray_1,
    isKey$2 = _isKey,
    stringToPath$1 = _stringToPath,
    toString$1 = toString_1;

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath$2(value, object) {
  if (isArray$5(value)) {
    return value;
  }
  return isKey$2(value, object) ? [value] : stringToPath$1(toString$1(value));
}

var _castPath = castPath$2;

var isSymbol$2 = isSymbol_1;

/** Used as references for various `Number` constants. */
var INFINITY$1 = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey$5(value) {
  if (typeof value == 'string' || isSymbol$2(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
}

var _toKey = toKey$5;

var _baseGet;
var hasRequired_baseGet;

function require_baseGet () {
	if (hasRequired_baseGet) return _baseGet;
	hasRequired_baseGet = 1;
	var castPath = _castPath,
	    toKey = _toKey;

	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path) {
	  path = castPath(path, object);

	  var index = 0,
	      length = path.length;

	  while (object != null && index < length) {
	    object = object[toKey(path[index++])];
	  }
	  return (index && index == length) ? object : undefined;
	}

	_baseGet = baseGet;
	return _baseGet;
}

var baseGet$1 = require_baseGet();

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get$1(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet$1(object, path);
  return result === undefined ? defaultValue : result;
}

var get_1 = get$1;

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */

function baseHasIn$1(object, key) {
  return object != null && key in Object(object);
}

var _baseHasIn = baseHasIn$1;

var castPath$1 = _castPath,
    isArguments = isArguments_1,
    isArray$4 = isArray_1,
    isIndex$2 = _isIndex,
    isLength = isLength_1,
    toKey$4 = _toKey;

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath$1(object, path, hasFunc) {
  path = castPath$1(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey$4(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex$2(key, length) &&
    (isArray$4(object) || isArguments(object));
}

var _hasPath = hasPath$1;

var baseHasIn = _baseHasIn,
    hasPath = _hasPath;

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn$1(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

var hasIn_1 = hasIn$1;

var baseIsEqual = _baseIsEqual,
    get = get_1,
    hasIn = hasIn_1,
    isKey$1 = _isKey,
    isStrictComparable = _isStrictComparable,
    matchesStrictComparable = _matchesStrictComparable,
    toKey$3 = _toKey;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty$1(path, srcValue) {
  if (isKey$1(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey$3(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

var _baseMatchesProperty = baseMatchesProperty$1;

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */

function baseProperty$1(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

var _baseProperty = baseProperty$1;

var baseGet = require_baseGet();

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep$1(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

var _basePropertyDeep = basePropertyDeep$1;

var baseProperty = _baseProperty,
    basePropertyDeep = _basePropertyDeep,
    isKey = _isKey,
    toKey$2 = _toKey;

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property$1(path) {
  return isKey(path) ? baseProperty(toKey$2(path)) : basePropertyDeep(path);
}

var property_1 = property$1;

var baseMatches = _baseMatches,
    baseMatchesProperty = _baseMatchesProperty,
    identity$2 = identity_1,
    isArray$3 = isArray_1,
    property = property_1;

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee$3(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity$2;
  }
  if (typeof value == 'object') {
    return isArray$3(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

var _baseIteratee = baseIteratee$3;

var baseAssignValue$1 = _baseAssignValue,
    baseForOwn$2 = _baseForOwn,
    baseIteratee$2 = _baseIteratee;

/**
 * Creates an object with the same keys as `object` and values generated
 * by running each own enumerable string keyed property of `object` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, key, object).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @see _.mapKeys
 * @example
 *
 * var users = {
 *   'fred':    { 'user': 'fred',    'age': 40 },
 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
 * };
 *
 * _.mapValues(users, function(o) { return o.age; });
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 *
 * // The `_.property` iteratee shorthand.
 * _.mapValues(users, 'age');
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 */
function mapValues(object, iteratee) {
  var result = {};
  iteratee = baseIteratee$2(iteratee);

  baseForOwn$2(object, function(value, key, object) {
    baseAssignValue$1(result, key, iteratee(value, key, object));
  });
  return result;
}

var mapValues_1 = mapValues;

var pDefer$1 = () => {
	const ret = {};

	ret.promise = new Promise((resolve, reject) => {
		ret.resolve = resolve;
		ret.reject = reject;
	});

	return ret;
};

const pDefer = pDefer$1;
function mapAgeCleaner$1(map, property = 'maxAge') {
    let processingKey;
    let processingTimer;
    let processingDeferred;
    const cleanup = async () => {
        if (processingKey !== undefined) {
            // If we are already processing an item, we can safely exit
            return;
        }
        const setupTimer = async (item) => {
            processingDeferred = pDefer();
            const delay = item[1][property] - Date.now();
            if (delay <= 0) {
                // Remove the item immediately if the delay is equal to or below 0
                map.delete(item[0]);
                processingDeferred.resolve();
                return;
            }
            // Keep track of the current processed key
            processingKey = item[0];
            processingTimer = setTimeout(() => {
                // Remove the item when the timeout fires
                map.delete(item[0]);
                if (processingDeferred) {
                    processingDeferred.resolve();
                }
            }, delay);
            // tslint:disable-next-line:strict-type-predicates
            if (typeof processingTimer.unref === 'function') {
                // Don't hold up the process from exiting
                processingTimer.unref();
            }
            return processingDeferred.promise;
        };
        try {
            for (const entry of map) {
                await setupTimer(entry);
            }
        }
        catch (_a) {
            // Do nothing if an error occurs, this means the timer was cleaned up and we should stop processing
        }
        processingKey = undefined;
    };
    const reset = () => {
        processingKey = undefined;
        if (processingTimer !== undefined) {
            clearTimeout(processingTimer);
            processingTimer = undefined;
        }
        if (processingDeferred !== undefined) { // tslint:disable-line:early-exit
            processingDeferred.reject(undefined);
            processingDeferred = undefined;
        }
    };
    const originalSet = map.set.bind(map);
    map.set = (key, value) => {
        if (map.has(key)) {
            // If the key already exist, remove it so we can add it back at the end of the map.
            map.delete(key);
        }
        // Call the original `map.set`
        const result = originalSet(key, value);
        // If we are already processing a key and the key added is the current processed key, stop processing it
        if (processingKey && processingKey === key) {
            reset();
        }
        // Always run the cleanup method in case it wasn't started yet
        cleanup(); // tslint:disable-line:no-floating-promises
        return result;
    };
    cleanup(); // tslint:disable-line:no-floating-promises
    return map;
}
var dist$1 = mapAgeCleaner$1;

const mapAgeCleaner = dist$1;
class ExpiryMap {
    constructor(maxAge, data) {
        this.maxAge = maxAge;
        this[Symbol.toStringTag] = 'Map';
        this.data = new Map();
        // Bootstrap the cleanup process which frees up memory when an item expires
        mapAgeCleaner(this.data);
        if (data) { // tslint:disable-line:early-exit
            for (const [key, value] of data) {
                this.set(key, value);
            }
        }
    }
    get size() {
        return this.data.size;
    }
    clear() {
        this.data.clear();
    }
    delete(key) {
        return this.data.delete(key);
    }
    has(key) {
        return this.data.has(key);
    }
    get(key) {
        const value = this.data.get(key);
        if (value) {
            return value.data;
        }
        return;
    }
    set(key, value) {
        this.data.set(key, {
            maxAge: Date.now() + this.maxAge,
            data: value
        });
        return this;
    }
    values() {
        return this.createIterator(item => item[1].data);
    }
    keys() {
        return this.data.keys();
    }
    entries() {
        return this.createIterator(item => [item[0], item[1].data]);
    }
    forEach(callbackfn, thisArg) {
        for (const [key, value] of this.entries()) {
            callbackfn.apply(thisArg, [value, key, this]);
        }
    }
    [Symbol.iterator]() {
        return this.entries();
    }
    *createIterator(projection) {
        for (const item of this.data.entries()) {
            yield projection(item);
        }
    }
}
var dist = ExpiryMap;

const copyProperty = (to, from, property, ignoreNonConfigurable) => {
	// `Function#length` should reflect the parameters of `to` not `from` since we keep its body.
	// `Function#prototype` is non-writable and non-configurable so can never be modified.
	if (property === 'length' || property === 'prototype') {
		return;
	}

	// `Function#arguments` and `Function#caller` should not be copied. They were reported to be present in `Reflect.ownKeys` for some devices in React Native (#41), so we explicitly ignore them here.
	if (property === 'arguments' || property === 'caller') {
		return;
	}

	const toDescriptor = Object.getOwnPropertyDescriptor(to, property);
	const fromDescriptor = Object.getOwnPropertyDescriptor(from, property);

	if (!canCopyProperty(toDescriptor, fromDescriptor) && ignoreNonConfigurable) {
		return;
	}

	Object.defineProperty(to, property, fromDescriptor);
};

// `Object.defineProperty()` throws if the property exists, is not configurable and either:
// - one its descriptors is changed
// - it is non-writable and its value is changed
const canCopyProperty = function (toDescriptor, fromDescriptor) {
	return toDescriptor === undefined || toDescriptor.configurable || (
		toDescriptor.writable === fromDescriptor.writable &&
		toDescriptor.enumerable === fromDescriptor.enumerable &&
		toDescriptor.configurable === fromDescriptor.configurable &&
		(toDescriptor.writable || toDescriptor.value === fromDescriptor.value)
	);
};

const changePrototype = (to, from) => {
	const fromPrototype = Object.getPrototypeOf(from);
	if (fromPrototype === Object.getPrototypeOf(to)) {
		return;
	}

	Object.setPrototypeOf(to, fromPrototype);
};

const wrappedToString = (withName, fromBody) => `/* Wrapped ${withName}*/\n${fromBody}`;

const toStringDescriptor = Object.getOwnPropertyDescriptor(Function.prototype, 'toString');
const toStringName = Object.getOwnPropertyDescriptor(Function.prototype.toString, 'name');

// We call `from.toString()` early (not lazily) to ensure `from` can be garbage collected.
// We use `bind()` instead of a closure for the same reason.
// Calling `from.toString()` early also allows caching it in case `to.toString()` is called several times.
const changeToString = (to, from, name) => {
	const withName = name === '' ? '' : `with ${name.trim()}() `;
	const newToString = wrappedToString.bind(null, withName, from.toString());
	// Ensure `to.toString.toString` is non-enumerable and has the same `same`
	Object.defineProperty(newToString, 'name', toStringName);
	Object.defineProperty(to, 'toString', {...toStringDescriptor, value: newToString});
};

function mimicFunction(to, from, {ignoreNonConfigurable = false} = {}) {
	const {name} = to;

	for (const property of Reflect.ownKeys(from)) {
		copyProperty(to, from, property, ignoreNonConfigurable);
	}

	changePrototype(to, from);
	changeToString(to, from, name);

	return to;
}

const cacheStore = new WeakMap();
/**
[Memoize](https://en.wikipedia.org/wiki/Memoization) functions - An optimization used to speed up consecutive function calls by caching the result of calls with identical input.

@param fn - Function to be memoized.

@example
```
import {setTimeout as delay} from 'node:timer/promises';
import pMemoize from 'p-memoize';
import got from 'got';

const memoizedGot = pMemoize(got);

await memoizedGot('https://sindresorhus.com');

// This call is cached
await memoizedGot('https://sindresorhus.com');

await delay(2000);

// This call is not cached as the cache has expired
await memoizedGot('https://sindresorhus.com');
```
*/
function pMemoize(fn, { cacheKey = ([firstArgument]) => firstArgument, cache = new Map(), } = {}) {
    // Promise objects can't be serialized so we keep track of them internally and only provide their resolved values to `cache`
    // `Promise<AsyncReturnType<FunctionToMemoize>>` is used instead of `ReturnType<FunctionToMemoize>` because promise properties are not kept
    const promiseCache = new Map();
    const memoized = function (...arguments_) {
        const key = cacheKey(arguments_);
        if (promiseCache.has(key)) {
            return promiseCache.get(key);
        }
        const promise = (async () => {
            try {
                if (cache && await cache.has(key)) {
                    return (await cache.get(key));
                }
                const promise = fn.apply(this, arguments_);
                const result = await promise;
                try {
                    return result;
                }
                finally {
                    if (cache) {
                        await cache.set(key, result);
                    }
                }
            }
            finally {
                promiseCache.delete(key);
            }
        })();
        promiseCache.set(key, promise);
        return promise;
    };
    mimicFunction(memoized, fn, {
        ignoreNonConfigurable: true,
    });
    cacheStore.set(memoized, cache);
    return memoized;
}

/**
 * Copyright 2023 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it.
 */
function labelAsUrl(label, settings) {
    const host = settings.global.manifestStorage?.get?.host;
    if (!host) {
        // TODO: See why `InvalidConfigError` breaks tests running in `wtr`
        throw new Error('manifest_storage_get_host');
    }
    const url = new URL(host);
    url.pathname = `/manifests`;
    return [url.toString(), label.replaceAll(':', '-')].join('/');
}
async function uploadSignedManifest(manifest, settings) {
    const serviceConfig = settings.global.manifestStorage?.post;
    const { authToken } = settings.sign;
    if (!serviceConfig?.host || !serviceConfig.apiKey || !authToken) {
        throw new InvalidConfigError(`manifest_storage`);
    }
    const { host, apiKey } = serviceConfig;
    const url = `${host}/manifests/v1`;
    const res = await fetch(url, {
        method: 'POST',
        headers: new Headers({
            'x-api-key': apiKey,
            Authorization: `Bearer ${authToken}`,
        }),
        body: manifest,
    });
    if (!res.ok) {
        throw new UrlFetchError(url, res);
    }
}

/**
 * Copyright 2023 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it.
 */
const dbg$3 = debug('c2pa:sign:image');
function getCanvas(width, height, workingCanvas = null) {
    if (workingCanvas) {
        workingCanvas.width = width;
        workingCanvas.height = height;
        return workingCanvas;
    }
    return new OffscreenCanvas(width, height);
}
function getResizeDimensions(srcWidth, srcHeight, options) {
    const { maxSize } = options;
    if (srcWidth > maxSize || srcHeight > maxSize) {
        const ratio = srcWidth >= srcHeight ? maxSize / srcWidth : maxSize / srcHeight;
        return {
            width: Math.round(srcWidth * ratio),
            height: Math.round(srcHeight * ratio),
        };
    }
    return {
        width: srcWidth,
        height: srcHeight,
    };
}
function hasAlpha(image) {
    let alphaFound = false;
    for (let i = 3; i < image.data.length; i += 4) {
        if (image.data[i] < 255) {
            alphaFound = true;
            break;
        }
    }
    dbg$3('Alpha found?', alphaFound);
    return alphaFound;
}
// TODO: Replace with all `createImageBitmap` calls once it has better support in Firefox and Safari
async function exportImage(data, options, workingCanvas = null) {
    let image = undefined;
    try {
        image = await createImageBitmap(data);
        const { quality } = options;
        const { width, height } = getResizeDimensions(image.width, image.height, options);
        // We still want this to run even if the dimensions are the same size so that it can convert PNG
        // to JPEG to save space if necessary
        const canvas = getCanvas(width, height, workingCanvas);
        const ctx = canvas.getContext('2d');
        ctx.drawImage(image, 0, 0, width, height);
        const imageData = ctx.getImageData(0, 0, width, height);
        const type = hasAlpha(imageData) ? 'image/png' : 'image/jpeg';
        if ('OffscreenCanvas' in globalThis && canvas instanceof OffscreenCanvas) {
            dbg$3('Rendering with OffscreenCanvas');
            // @ts-ignore
            return canvas.convertToBlob({ type, quality });
        }
        else if (canvas instanceof HTMLCanvasElement) {
            dbg$3('OffscreenCanvas not found, rendering in main thread');
            return await new Promise((resolve, reject) => {
                return canvas.toBlob((exported) => {
                    if (exported) {
                        resolve(exported);
                    }
                    else {
                        reject(null);
                    }
                }, type, quality);
            });
        }
        else {
            throw new ResizeImageError({
                cause: new Error('Canvas type not supported'),
            });
        }
    }
    catch (err) {
        throw new ResizeImageError({ cause: err });
    }
    finally {
        image?.close();
    }
}

/**
 * Copyright 2023 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it.
 */
const allowedMimeTypes = [
    'image/jpeg',
    'image/png',
    'image/webp',
    'image/svg+xml',
];
const bypassThumbnailMimeTypes = ['image/svg+xml'];
async function createThumbnail(data, pool, options) {
    if (!allowedMimeTypes.includes(data.type)) {
        throw new InvalidThumbnailSourceError(data.type);
    }
    if ('OffscreenCanvas' in self &&
        !bypassThumbnailMimeTypes.includes(data.type)) {
        return pool.exportImage(data, options);
    }
    else if ('document' in self &&
        !bypassThumbnailMimeTypes.includes(data.type)) {
        // No OffscreenCanvas exists, we'll need to run this on the main thread (Safari)
        const canvas = document.createElement('canvas');
        return exportImage(data, options, canvas);
    }
    else {
        return null;
    }
}

/**
 * Copyright 2023 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it.
 */
const dbg$2 = debug('c2pa:sign:sign');
const defaultGlobalConfig = {
    connectedAccounts: {
        host: 'https://cai-identity.adobe.io',
        apiKey: 'cai-ps-plugin',
    },
    claimsSigner: {
        host: 'https://cai.adobe.io',
        apiKey: 'cai-desktop-helper',
        reserveSizeCacheMs: 3600 * 1000,
    },
    manifestStorage: {
        post: {
            host: 'https://cai-msb.adobe.io',
            apiKey: 'cai-desktop-helper',
        },
        get: {
            host: 'https://cai-manifests.adobe.com',
        },
    },
    signTimeoutMs: 10 * 1000,
    thumbnail: {
        maxSize: 1024,
        quality: 80,
    },
};
const defaultSignConfig = {
    authToken: '',
    storageLocations: ['embedded'],
};
async function fetchReserveSize(globalConfig, signConfig) {
    const serviceConfig = globalConfig.claimsSigner;
    if (!serviceConfig?.host || !serviceConfig.apiKey || !signConfig.authToken) {
        throw new InvalidConfigError(`claims_signer`);
    }
    const { host, apiKey } = serviceConfig;
    const url = `${host}/signature/box_size/v1`;
    const res = await fetch(url, {
        headers: new Headers({
            'x-api-key': apiKey,
            Authorization: `Bearer ${signConfig.authToken}`,
        }),
    });
    if (!res.ok) {
        throw new UrlFetchError(url, res);
    }
    const data = await res.json();
    return data.box_size;
}
function getReserveSizeFn(globalConfig) {
    const cacheMs = globalConfig.claimsSigner?.reserveSizeCacheMs ??
        defaultGlobalConfig.claimsSigner.reserveSizeCacheMs;
    if (cacheMs === Infinity) {
        return pMemoize(fetchReserveSize);
    }
    else if (!cacheMs) {
        return fetchReserveSize;
    }
    else {
        const cache = new dist(cacheMs);
        return pMemoize(fetchReserveSize, { cache });
    }
}
function createSign(c2paConfig, dependencies, 
// Pass an auth token to pre-fetch and cache the reserve size
authToken) {
    const globalConfig = merge_1({}, defaultGlobalConfig, c2paConfig);
    const { pool, wasm } = dependencies;
    const getReserveSize = getReserveSizeFn(globalConfig);
    // Try to prefetch and cache the auth token when signing is initialized
    if (authToken) {
        getReserveSize(globalConfig, { authToken });
    }
    const signFn = async (asset, manifest, signConfig, options) => {
        try {
            const { storageLocations, waitForUpload, onProgress, onResult, onUploadComplete, onUploadError, } = merge_1({}, defaultSignConfig, signConfig);
            delete signConfig.waitForUpload;
            delete signConfig.onProgress;
            delete signConfig.onResult;
            delete signConfig.onUploadComplete;
            delete signConfig.onUploadError;
            // We call this before running any callbacks to see if an AbortSignal was
            // received before moving on to the next step of the process. It's not the most
            // elegant solution, but trying to throw using `onAbort` will throw from the top
            // level which results in an unhandled error. This is to stop an edge case where
            // the function can time out and the promise keeps executing and updating status.
            //
            // TODO: See if there's a better way fo doing this.
            const throwIfCancelled = () => {
                if (options?.signal?.aborted) {
                    throw new SigningCancelledError();
                }
            };
            const handleProgress = (progress) => {
                throwIfCancelled();
                onProgress?.(progress);
            };
            const handleResult = (result) => {
                throwIfCancelled();
                onResult?.(result);
            };
            if (!storageLocations.includes('embedded')) {
                throw new SigningStorageMissingError();
            }
            const start = performance.now();
            const getElapsed = () => performance.now() - start;
            handleProgress({
                value: 0,
                stage: 'initialized',
                elapsed: getElapsed(),
            });
            const reserveSize = await getReserveSize(globalConfig, signConfig);
            const settings = {
                global: globalConfig,
                sign: signConfig,
                reserveSize,
            };
            const thumbnailOptions = typeof signConfig?.thumbnail !== 'undefined'
                ? signConfig.thumbnail
                : settings.global.thumbnail;
            handleProgress({
                value: 10,
                stage: 'got_reserve_size',
                elapsed: getElapsed(),
            });
            // We need to do this here instead of in `embedAndSign` since Safari cannot
            // run this in a worker (as of Feb 2023)
            const thumbnail = thumbnailOptions
                ? await createThumbnail(asset, pool, thumbnailOptions)
                : null;
            handleProgress({
                value: 35,
                stage: 'created_thumbnail',
                elapsed: getElapsed(),
            });
            manifest.createLabel(storageLocations.includes('cloud') ? 'adobe' : null);
            if (storageLocations.includes('cloud')) {
                settings.remoteManifestUrl = labelAsUrl(manifest.definition.label, settings);
            }
            dbg$2('Calling embedAndSign on worker pool', {
                asset,
                manifest,
                thumbnail,
                settings,
            });
            // In parallel, we can create a thumbnail and get connected accounts info
            const result = await pool.embedAndSign(wasm, asset, manifest.definition, manifest.ingredients, thumbnail, settings);
            handleProgress({
                value: 75,
                stage: 'embed_and_sign',
                elapsed: getElapsed(),
            });
            handleResult(result);
            if (storageLocations.includes('cloud') && waitForUpload === false) {
                // Don't wait for this to complete, and run on next tick
                setTimeout(() => {
                    uploadSignedManifest(result.signedManifest, settings)
                        .then(() => {
                        handleProgress({
                            value: 100,
                            stage: 'complete',
                            elapsed: getElapsed(),
                        });
                        onUploadComplete?.();
                    })
                        .catch((err) => {
                        if (onUploadError) {
                            onUploadError?.(err);
                        }
                        else {
                            throw err;
                        }
                    });
                });
                return result;
            }
            else if (storageLocations.includes('cloud')) {
                try {
                    await uploadSignedManifest(result.signedManifest, settings);
                    onUploadComplete?.();
                }
                catch (err) {
                    onUploadError?.(err);
                    throw err;
                }
            }
            handleProgress({
                value: 100,
                stage: 'complete',
                elapsed: getElapsed(),
            });
            return result;
        }
        catch (err) {
            throw new C2paSigningError({ cause: err });
        }
    };
    return async (asset, manifest, signConfig) => {
        const timeout = globalConfig.signTimeoutMs;
        const timeoutSupported = 'AbortSignal' in self && typeof AbortSignal.timeout === 'function';
        if (!timeoutSupported) {
            console.warn('AbortSignal.timeout() not supported, disabling timeout');
        }
        // Safari < 16 doesn't have support for `AbortSignal.timeout`, disable if this is the case
        const signal = timeout && timeoutSupported ? AbortSignal.timeout(timeout) : undefined;
        return signFn(asset, manifest, signConfig, { signal });
    };
}

function createIngredientManager(c2paConfig, dependencies) {
    // TODO: Move into shared config function
    const globalConfig = merge_1({}, defaultGlobalConfig, c2paConfig);
    const { pool, wasm } = dependencies;
    return {
        /**
         * Takes a `File` or `Blob` of an asset and returns an ingredient that can be stored on the backend.
         *
         * If a `File` is supplied, it will stream the data to avoid loading the entire file into memory.
         * This is recommended for large files.
         */
        async createIngredient({ input, title, thumbnail, identifier, generateIdentifierIfMissing = true, }) {
            let ingredient;
            if (input instanceof File) {
                ingredient = await pool.createIngredientFromFile(wasm, input);
                if (!identifier && !ingredient.hash && !generateIdentifierIfMissing) {
                    throw new IngredientIdentifierMissing();
                }
                // Generate UUID v4 if no identifier is provided to avoid hashing the entire file
                ingredient.hash = identifier ?? ingredient.hash ?? crypto.randomUUID();
            }
            else {
                const buffer = await input.arrayBuffer();
                ingredient = await pool.createIngredientFromArrayBuffer(wasm, buffer, input.type);
                if (!identifier && !ingredient.hash && !generateIdentifierIfMissing) {
                    throw new IngredientIdentifierMissing();
                }
                // Generate hash if no identifier is provided and no hash is returned from Rust
                ingredient.hash =
                    identifier ?? ingredient.hash ?? (await labeledSha(input));
            }
            // Separate resources out into their own object so they can be stored more easily
            const resources = mapValues_1(ingredient.resources.resources ?? {}, (resource) => Uint8Array.from(resource).buffer);
            ingredient.resources = {};
            ingredient.title = title;
            // Generate a thumbnail if one doesn't exist on the ingredient's manifest
            if (!ingredient.thumbnail) {
                const isImage = input.type.startsWith('image/');
                const thumbnailBlob = 
                // Use thumbnail if provided
                thumbnail ||
                    // Otherwise generate one if configured to do so
                    (globalConfig.thumbnail && thumbnail !== false && isImage
                        ? await createThumbnail(input, pool, globalConfig.thumbnail)
                        : null);
                if (thumbnailBlob) {
                    const resourceRef = await getResourceReference(thumbnailBlob, ingredient.instance_id);
                    ingredient.thumbnail = resourceRef;
                    resources[resourceRef.identifier] = await thumbnailBlob.arrayBuffer();
                }
            }
            return {
                ingredient,
                resources,
            };
        },
    };
}

var version = "0.16.2";

var _ManifestBuilder_definition, _ManifestBuilder_config, _ManifestBuilder_ingredients;
class ManifestBuilder {
    static get generator() {
        return `c2pa-adobe-js/${version}`;
    }
    constructor(baseDefinition, config) {
        // FIXME: figure out why this causes an unknown error in jasmine
        _ManifestBuilder_definition.set(this, void 0);
        _ManifestBuilder_config.set(this, void 0);
        _ManifestBuilder_ingredients.set(this, {});
        // const missingFields = difference(
        //   ManifestBuilder.requiredFields,
        //   Object.keys(baseDefinition),
        // );
        // if (missingFields.length) {
        //   const cause = new Error(
        //     `Missing required fields: ${missingFields.join(', ')}`,
        //   );
        //   throw new ManifestBuilderError({ cause });
        // }
        // Append JS library to claim generator
        const claimGenerator = baseDefinition.claim_generator.split(/\s+/);
        claimGenerator.push(ManifestBuilder.generator);
        baseDefinition.claim_generator = claimGenerator.join(' ');
        __classPrivateFieldSet(this, _ManifestBuilder_config, config, "f");
        __classPrivateFieldSet(this, _ManifestBuilder_definition, baseDefinition, "f");
    }
    createLabel(vendor) {
        const urn = crypto.randomUUID();
        if (typeof vendor === 'string') {
            __classPrivateFieldGet(this, _ManifestBuilder_definition, "f").label = `${vendor.toLowerCase()}:${urn}`;
        }
        __classPrivateFieldGet(this, _ManifestBuilder_definition, "f").label = urn;
    }
    async addIngredient(input) {
        const { ingredient } = input;
        if (!ingredient.hash) {
            throw new IngredientHashMissingError(ingredient);
        }
        if (!__classPrivateFieldGet(this, _ManifestBuilder_ingredients, "f").hasOwnProperty(ingredient.hash)) {
            __classPrivateFieldGet(this, _ManifestBuilder_ingredients, "f")[ingredient.hash] = input;
        }
    }
    get definition() {
        return __classPrivateFieldGet(this, _ManifestBuilder_definition, "f");
    }
    get ingredients() {
        return Object.values(__classPrivateFieldGet(this, _ManifestBuilder_ingredients, "f"));
    }
}
_ManifestBuilder_definition = new WeakMap(), _ManifestBuilder_config = new WeakMap(), _ManifestBuilder_ingredients = new WeakMap();
ManifestBuilder.requiredFields = ['claim_generator', 'format'];
function createManifestBuilder(c2paConfig, dependencies) {
    // TODO: Move into shared config function
    const globalConfig = merge_1({}, defaultGlobalConfig, c2paConfig);
    return (baseDefinition) => {
        return new ManifestBuilder(baseDefinition, {
            dependencies,
            globalConfig,
        });
    };
}

/**
 * Copyright 2022 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it.
 */
/**
 * Creates an object containing data for the image provided to the c2pa object.
 *
 * @param downloader Downloader instance used to inspect/download images from a URL
 * @param input Input provided to the c2pa object
 * @param metadata Any additional metadata for the referenced image
 */
async function createSource(downloader, input, metadata) {
    const { blob, metadata: inputMetadata } = await getDataFromInput(downloader, input, metadata ?? {});
    if (!blob) {
        return {
            thumbnail: createThumbnailFromUrl(input),
            metadata: { ...inputMetadata, ...metadata },
            type: '',
            blob: null,
            arrayBuffer: async () => new ArrayBuffer(0),
        };
    }
    if (!Validator.isValidMimeType(blob.type))
        throw new InvalidMimeTypeError(blob.type);
    return {
        thumbnail: createThumbnailFromBlob(blob, blob.type),
        metadata: { ...inputMetadata, ...metadata },
        type: blob.type,
        blob: blob,
        arrayBuffer: () => blob.arrayBuffer(),
    };
}
async function getDataFromInput(downloader, input, metadata) {
    if (input instanceof Blob) {
        // Handle file/blob inputs
        const finalMetadata = {
            ...metadata,
            filename: input instanceof File ? input.name : undefined,
        };
        return {
            blob: input,
            metadata: finalMetadata,
        };
    }
    else {
        // handle string / HTMLImageElement inputs
        const url = typeof input === 'string' ? input : input.src;
        const blob = await downloader.inspect(url);
        let path = url;
        try {
            const { pathname } = new URL(url);
            path = pathname;
        }
        catch (err) { }
        const filename = path.split('/').pop() ?? '';
        return {
            blob,
            metadata: { ...metadata, filename },
        };
    }
}

/**
 * Copyright 2022 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it.
 */
const dbg$1 = debug('c2pa');
const dbgTask = debug('c2pa:task');
/**
 * Creates a c2pa object that can be used to read c2pa metadata from an image.
 *
 * @param config - Configuration options for the created c2pa object
 */
async function createC2pa(config) {
    let jobCounter = 0;
    dbg$1('Creating c2pa with config', config);
    ensureCompatibility();
    const pool = await createPoolWrapper({
        scriptSrc: config.workerSrc,
        fallbackScriptSrc: config.fallbackWorkerSrc,
        maxWorkers: navigator.hardwareConcurrency || 4,
    });
    const downloader = new Downloader(pool, config.downloaderOptions);
    const wasm = config.wasmSrc instanceof WebAssembly.Module
        ? config.wasmSrc
        : await fetchWasm(pool, config.wasmSrc);
    const read = async (input) => {
        const jobId = ++jobCounter;
        dbgTask('[%s] Reading from input', jobId, input);
        const source = await createSource(downloader, input);
        dbgTask('[%s] Processing input', jobId, input);
        if (!source.blob) {
            return {
                manifestStore: null,
                source,
            };
        }
        const buffer = await source.arrayBuffer();
        try {
            const result = await pool.getReport(wasm, buffer, source.type);
            dbgTask('[%s] Received worker result', jobId, result);
            return {
                manifestStore: createManifestStore(result),
                source,
            };
        }
        catch (err) {
            const manifestStore = await handleErrors(source, err, pool, wasm, config.fetchRemoteManifests);
            return {
                manifestStore,
                source,
            };
        }
    };
    const readAll = async (inputs) => Promise.all(inputs.map((input) => read(input)));
    const readAndValidateManifestData = async (manifestBuffer, input) => {
        const source = await createSource(downloader, input);
        const buffer = await source.arrayBuffer();
        try {
            const result = await pool.getReportFromAssetAndManifestBuffer(wasm, manifestBuffer, buffer, source.type);
            return {
                manifestStore: createManifestStore(result),
                source,
            };
        }
        catch (err) {
            const manifestStore = await handleErrors(source, err, pool, wasm, config.fetchRemoteManifests);
            return {
                manifestStore,
                source,
            };
        }
    };
    const scan = async (input) => {
        const source = await createSource(downloader, input);
        const buffer = await source.arrayBuffer();
        try {
            return await pool.scanInput(buffer);
        }
        catch (err) {
            throw new C2paScanningError({ cause: err });
        }
    };
    const scanUrl = async (url) => {
        try {
            return await pool.scanInputUrl(url);
        }
        catch (err) {
            throw new C2paScanningError({ cause: err });
        }
    };
    const sign = createSign(config, { pool, wasm });
    const createManifest = createManifestBuilder(config, {
        pool,
        wasm,
    });
    const ingredientManager = createIngredientManager(config, {
        pool,
        wasm,
    });
    return {
        _pool: pool,
        read,
        readAll,
        readAndValidateManifestData,
        scan,
        scanUrl,
        sign,
        createManifest,
        createIngredient: ingredientManager.createIngredient,
        dispose: () => pool.dispose(),
    };
}
/**
 * Handles errors from the toolkit and fetches/processes remote manifests, if applicable.
 *
 * @param source - Source object representing the asset
 * @param error - Error from toolkit
 * @param pool - Worker pool to use when processing remote manifests (triggered by Toolkit(RemoteManifestUrl) error)
 * @param wasm - WASM module to use when processing remote manifests
 * @param fetchRemote - Controls remote-fetching behavior
 * @returns A manifestStore, if applicable, null otherwise or a re-thrown error.
 */
function handleErrors(source, error, pool, wasm, fetchRemote = true) {
    switch (error.name) {
        case 'Toolkit(RemoteManifestUrl)':
            if (fetchRemote && error.url) {
                return fetchRemoteManifest(source, error.url, pool, wasm);
            }
            break;
        case 'C2pa(ProvenanceMissing)':
        case 'C2pa(JumbfNotFound)':
            dbg$1('No provenance data found');
            break;
        default:
            throw error;
    }
    return null;
}
async function fetchRemoteManifest(source, manifestUrl, pool, wasm) {
    try {
        const url = new URL(manifestUrl);
        dbg$1('Fetching remote manifest from', url);
        const manifestBytes = await fetch(url.toString());
        const manifestBlob = await manifestBytes.blob();
        const manifestBuffer = await manifestBlob.arrayBuffer();
        const sourceBuffer = await source.arrayBuffer();
        const result = await pool.getReportFromAssetAndManifestBuffer(wasm, manifestBuffer, sourceBuffer, source.type);
        return createManifestStore(result);
    }
    catch (err) {
        if (err instanceof TypeError) {
            dbg$1('Invalid URL given, skipping remote manifest loading', manifestUrl);
            return null;
        }
        dbg$1('Error loading remote manifest from', manifestUrl, err);
        throw err;
    }
}

var each$1 = {exports: {}};

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */

function arrayEach$3(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

var _arrayEach = arrayEach$3;

var isArrayLike = isArrayLike_1;

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach$1(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

var _createBaseEach = createBaseEach$1;

var baseForOwn$1 = _baseForOwn,
    createBaseEach = _createBaseEach;

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach$1 = createBaseEach(baseForOwn$1);

var _baseEach = baseEach$1;

var identity$1 = identity_1;

/**
 * Casts `value` to `identity` if it's not a function.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Function} Returns cast function.
 */
function castFunction$1(value) {
  return typeof value == 'function' ? value : identity$1;
}

var _castFunction = castFunction$1;

var arrayEach$2 = _arrayEach,
    baseEach = _baseEach,
    castFunction = _castFunction,
    isArray$2 = isArray_1;

/**
 * Iterates over elements of `collection` and invokes `iteratee` for each element.
 * The iteratee is invoked with three arguments: (value, index|key, collection).
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * **Note:** As with other "Collections" methods, objects with a "length"
 * property are iterated like arrays. To avoid this behavior use `_.forIn`
 * or `_.forOwn` for object iteration.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @alias each
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 * @see _.forEachRight
 * @example
 *
 * _.forEach([1, 2], function(value) {
 *   console.log(value);
 * });
 * // => Logs `1` then `2`.
 *
 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
 */
function forEach(collection, iteratee) {
  var func = isArray$2(collection) ? arrayEach$2 : baseEach;
  return func(collection, castFunction(iteratee));
}

var forEach_1 = forEach;

(function (module) {
	module.exports = forEach_1;
} (each$1));

/*@__PURE__*/getDefaultExportFromCjs(each$1.exports);

var _mapping = {};

/** Used to map aliases to their real names. */

(function (exports) {
	exports.aliasToReal = {

	  // Lodash aliases.
	  'each': 'forEach',
	  'eachRight': 'forEachRight',
	  'entries': 'toPairs',
	  'entriesIn': 'toPairsIn',
	  'extend': 'assignIn',
	  'extendAll': 'assignInAll',
	  'extendAllWith': 'assignInAllWith',
	  'extendWith': 'assignInWith',
	  'first': 'head',

	  // Methods that are curried variants of others.
	  'conforms': 'conformsTo',
	  'matches': 'isMatch',
	  'property': 'get',

	  // Ramda aliases.
	  '__': 'placeholder',
	  'F': 'stubFalse',
	  'T': 'stubTrue',
	  'all': 'every',
	  'allPass': 'overEvery',
	  'always': 'constant',
	  'any': 'some',
	  'anyPass': 'overSome',
	  'apply': 'spread',
	  'assoc': 'set',
	  'assocPath': 'set',
	  'complement': 'negate',
	  'compose': 'flowRight',
	  'contains': 'includes',
	  'dissoc': 'unset',
	  'dissocPath': 'unset',
	  'dropLast': 'dropRight',
	  'dropLastWhile': 'dropRightWhile',
	  'equals': 'isEqual',
	  'identical': 'eq',
	  'indexBy': 'keyBy',
	  'init': 'initial',
	  'invertObj': 'invert',
	  'juxt': 'over',
	  'omitAll': 'omit',
	  'nAry': 'ary',
	  'path': 'get',
	  'pathEq': 'matchesProperty',
	  'pathOr': 'getOr',
	  'paths': 'at',
	  'pickAll': 'pick',
	  'pipe': 'flow',
	  'pluck': 'map',
	  'prop': 'get',
	  'propEq': 'matchesProperty',
	  'propOr': 'getOr',
	  'props': 'at',
	  'symmetricDifference': 'xor',
	  'symmetricDifferenceBy': 'xorBy',
	  'symmetricDifferenceWith': 'xorWith',
	  'takeLast': 'takeRight',
	  'takeLastWhile': 'takeRightWhile',
	  'unapply': 'rest',
	  'unnest': 'flatten',
	  'useWith': 'overArgs',
	  'where': 'conformsTo',
	  'whereEq': 'isMatch',
	  'zipObj': 'zipObject'
	};

	/** Used to map ary to method names. */
	exports.aryMethod = {
	  '1': [
	    'assignAll', 'assignInAll', 'attempt', 'castArray', 'ceil', 'create',
	    'curry', 'curryRight', 'defaultsAll', 'defaultsDeepAll', 'floor', 'flow',
	    'flowRight', 'fromPairs', 'invert', 'iteratee', 'memoize', 'method', 'mergeAll',
	    'methodOf', 'mixin', 'nthArg', 'over', 'overEvery', 'overSome','rest', 'reverse',
	    'round', 'runInContext', 'spread', 'template', 'trim', 'trimEnd', 'trimStart',
	    'uniqueId', 'words', 'zipAll'
	  ],
	  '2': [
	    'add', 'after', 'ary', 'assign', 'assignAllWith', 'assignIn', 'assignInAllWith',
	    'at', 'before', 'bind', 'bindAll', 'bindKey', 'chunk', 'cloneDeepWith',
	    'cloneWith', 'concat', 'conformsTo', 'countBy', 'curryN', 'curryRightN',
	    'debounce', 'defaults', 'defaultsDeep', 'defaultTo', 'delay', 'difference',
	    'divide', 'drop', 'dropRight', 'dropRightWhile', 'dropWhile', 'endsWith', 'eq',
	    'every', 'filter', 'find', 'findIndex', 'findKey', 'findLast', 'findLastIndex',
	    'findLastKey', 'flatMap', 'flatMapDeep', 'flattenDepth', 'forEach',
	    'forEachRight', 'forIn', 'forInRight', 'forOwn', 'forOwnRight', 'get',
	    'groupBy', 'gt', 'gte', 'has', 'hasIn', 'includes', 'indexOf', 'intersection',
	    'invertBy', 'invoke', 'invokeMap', 'isEqual', 'isMatch', 'join', 'keyBy',
	    'lastIndexOf', 'lt', 'lte', 'map', 'mapKeys', 'mapValues', 'matchesProperty',
	    'maxBy', 'meanBy', 'merge', 'mergeAllWith', 'minBy', 'multiply', 'nth', 'omit',
	    'omitBy', 'overArgs', 'pad', 'padEnd', 'padStart', 'parseInt', 'partial',
	    'partialRight', 'partition', 'pick', 'pickBy', 'propertyOf', 'pull', 'pullAll',
	    'pullAt', 'random', 'range', 'rangeRight', 'rearg', 'reject', 'remove',
	    'repeat', 'restFrom', 'result', 'sampleSize', 'some', 'sortBy', 'sortedIndex',
	    'sortedIndexOf', 'sortedLastIndex', 'sortedLastIndexOf', 'sortedUniqBy',
	    'split', 'spreadFrom', 'startsWith', 'subtract', 'sumBy', 'take', 'takeRight',
	    'takeRightWhile', 'takeWhile', 'tap', 'throttle', 'thru', 'times', 'trimChars',
	    'trimCharsEnd', 'trimCharsStart', 'truncate', 'union', 'uniqBy', 'uniqWith',
	    'unset', 'unzipWith', 'without', 'wrap', 'xor', 'zip', 'zipObject',
	    'zipObjectDeep'
	  ],
	  '3': [
	    'assignInWith', 'assignWith', 'clamp', 'differenceBy', 'differenceWith',
	    'findFrom', 'findIndexFrom', 'findLastFrom', 'findLastIndexFrom', 'getOr',
	    'includesFrom', 'indexOfFrom', 'inRange', 'intersectionBy', 'intersectionWith',
	    'invokeArgs', 'invokeArgsMap', 'isEqualWith', 'isMatchWith', 'flatMapDepth',
	    'lastIndexOfFrom', 'mergeWith', 'orderBy', 'padChars', 'padCharsEnd',
	    'padCharsStart', 'pullAllBy', 'pullAllWith', 'rangeStep', 'rangeStepRight',
	    'reduce', 'reduceRight', 'replace', 'set', 'slice', 'sortedIndexBy',
	    'sortedLastIndexBy', 'transform', 'unionBy', 'unionWith', 'update', 'xorBy',
	    'xorWith', 'zipWith'
	  ],
	  '4': [
	    'fill', 'setWith', 'updateWith'
	  ]
	};

	/** Used to map ary to rearg configs. */
	exports.aryRearg = {
	  '2': [1, 0],
	  '3': [2, 0, 1],
	  '4': [3, 2, 0, 1]
	};

	/** Used to map method names to their iteratee ary. */
	exports.iterateeAry = {
	  'dropRightWhile': 1,
	  'dropWhile': 1,
	  'every': 1,
	  'filter': 1,
	  'find': 1,
	  'findFrom': 1,
	  'findIndex': 1,
	  'findIndexFrom': 1,
	  'findKey': 1,
	  'findLast': 1,
	  'findLastFrom': 1,
	  'findLastIndex': 1,
	  'findLastIndexFrom': 1,
	  'findLastKey': 1,
	  'flatMap': 1,
	  'flatMapDeep': 1,
	  'flatMapDepth': 1,
	  'forEach': 1,
	  'forEachRight': 1,
	  'forIn': 1,
	  'forInRight': 1,
	  'forOwn': 1,
	  'forOwnRight': 1,
	  'map': 1,
	  'mapKeys': 1,
	  'mapValues': 1,
	  'partition': 1,
	  'reduce': 2,
	  'reduceRight': 2,
	  'reject': 1,
	  'remove': 1,
	  'some': 1,
	  'takeRightWhile': 1,
	  'takeWhile': 1,
	  'times': 1,
	  'transform': 2
	};

	/** Used to map method names to iteratee rearg configs. */
	exports.iterateeRearg = {
	  'mapKeys': [1],
	  'reduceRight': [1, 0]
	};

	/** Used to map method names to rearg configs. */
	exports.methodRearg = {
	  'assignInAllWith': [1, 0],
	  'assignInWith': [1, 2, 0],
	  'assignAllWith': [1, 0],
	  'assignWith': [1, 2, 0],
	  'differenceBy': [1, 2, 0],
	  'differenceWith': [1, 2, 0],
	  'getOr': [2, 1, 0],
	  'intersectionBy': [1, 2, 0],
	  'intersectionWith': [1, 2, 0],
	  'isEqualWith': [1, 2, 0],
	  'isMatchWith': [2, 1, 0],
	  'mergeAllWith': [1, 0],
	  'mergeWith': [1, 2, 0],
	  'padChars': [2, 1, 0],
	  'padCharsEnd': [2, 1, 0],
	  'padCharsStart': [2, 1, 0],
	  'pullAllBy': [2, 1, 0],
	  'pullAllWith': [2, 1, 0],
	  'rangeStep': [1, 2, 0],
	  'rangeStepRight': [1, 2, 0],
	  'setWith': [3, 1, 2, 0],
	  'sortedIndexBy': [2, 1, 0],
	  'sortedLastIndexBy': [2, 1, 0],
	  'unionBy': [1, 2, 0],
	  'unionWith': [1, 2, 0],
	  'updateWith': [3, 1, 2, 0],
	  'xorBy': [1, 2, 0],
	  'xorWith': [1, 2, 0],
	  'zipWith': [1, 2, 0]
	};

	/** Used to map method names to spread configs. */
	exports.methodSpread = {
	  'assignAll': { 'start': 0 },
	  'assignAllWith': { 'start': 0 },
	  'assignInAll': { 'start': 0 },
	  'assignInAllWith': { 'start': 0 },
	  'defaultsAll': { 'start': 0 },
	  'defaultsDeepAll': { 'start': 0 },
	  'invokeArgs': { 'start': 2 },
	  'invokeArgsMap': { 'start': 2 },
	  'mergeAll': { 'start': 0 },
	  'mergeAllWith': { 'start': 0 },
	  'partial': { 'start': 1 },
	  'partialRight': { 'start': 1 },
	  'without': { 'start': 1 },
	  'zipAll': { 'start': 0 }
	};

	/** Used to identify methods which mutate arrays or objects. */
	exports.mutate = {
	  'array': {
	    'fill': true,
	    'pull': true,
	    'pullAll': true,
	    'pullAllBy': true,
	    'pullAllWith': true,
	    'pullAt': true,
	    'remove': true,
	    'reverse': true
	  },
	  'object': {
	    'assign': true,
	    'assignAll': true,
	    'assignAllWith': true,
	    'assignIn': true,
	    'assignInAll': true,
	    'assignInAllWith': true,
	    'assignInWith': true,
	    'assignWith': true,
	    'defaults': true,
	    'defaultsAll': true,
	    'defaultsDeep': true,
	    'defaultsDeepAll': true,
	    'merge': true,
	    'mergeAll': true,
	    'mergeAllWith': true,
	    'mergeWith': true,
	  },
	  'set': {
	    'set': true,
	    'setWith': true,
	    'unset': true,
	    'update': true,
	    'updateWith': true
	  }
	};

	/** Used to map real names to their aliases. */
	exports.realToAlias = (function() {
	  var hasOwnProperty = Object.prototype.hasOwnProperty,
	      object = exports.aliasToReal,
	      result = {};

	  for (var key in object) {
	    var value = object[key];
	    if (hasOwnProperty.call(result, value)) {
	      result[value].push(key);
	    } else {
	      result[value] = [key];
	    }
	  }
	  return result;
	}());

	/** Used to map method names to other names. */
	exports.remap = {
	  'assignAll': 'assign',
	  'assignAllWith': 'assignWith',
	  'assignInAll': 'assignIn',
	  'assignInAllWith': 'assignInWith',
	  'curryN': 'curry',
	  'curryRightN': 'curryRight',
	  'defaultsAll': 'defaults',
	  'defaultsDeepAll': 'defaultsDeep',
	  'findFrom': 'find',
	  'findIndexFrom': 'findIndex',
	  'findLastFrom': 'findLast',
	  'findLastIndexFrom': 'findLastIndex',
	  'getOr': 'get',
	  'includesFrom': 'includes',
	  'indexOfFrom': 'indexOf',
	  'invokeArgs': 'invoke',
	  'invokeArgsMap': 'invokeMap',
	  'lastIndexOfFrom': 'lastIndexOf',
	  'mergeAll': 'merge',
	  'mergeAllWith': 'mergeWith',
	  'padChars': 'pad',
	  'padCharsEnd': 'padEnd',
	  'padCharsStart': 'padStart',
	  'propertyOf': 'get',
	  'rangeStep': 'range',
	  'rangeStepRight': 'rangeRight',
	  'restFrom': 'rest',
	  'spreadFrom': 'spread',
	  'trimChars': 'trim',
	  'trimCharsEnd': 'trimEnd',
	  'trimCharsStart': 'trimStart',
	  'zipAll': 'zip'
	};

	/** Used to track methods that skip fixing their arity. */
	exports.skipFixed = {
	  'castArray': true,
	  'flow': true,
	  'flowRight': true,
	  'iteratee': true,
	  'mixin': true,
	  'rearg': true,
	  'runInContext': true
	};

	/** Used to track methods that skip rearranging arguments. */
	exports.skipRearg = {
	  'add': true,
	  'assign': true,
	  'assignIn': true,
	  'bind': true,
	  'bindKey': true,
	  'concat': true,
	  'difference': true,
	  'divide': true,
	  'eq': true,
	  'gt': true,
	  'gte': true,
	  'isEqual': true,
	  'lt': true,
	  'lte': true,
	  'matchesProperty': true,
	  'merge': true,
	  'multiply': true,
	  'overArgs': true,
	  'partial': true,
	  'partialRight': true,
	  'propertyOf': true,
	  'random': true,
	  'range': true,
	  'rangeRight': true,
	  'subtract': true,
	  'zip': true,
	  'zipObject': true,
	  'zipObjectDeep': true
	};
} (_mapping));

/**
 * The default argument placeholder value for methods.
 *
 * @type {Object}
 */

var placeholder;
var hasRequiredPlaceholder;

function requirePlaceholder () {
	if (hasRequiredPlaceholder) return placeholder;
	hasRequiredPlaceholder = 1;
	placeholder = {};
	return placeholder;
}

var mapping = _mapping,
    fallbackHolder = requirePlaceholder();

/** Built-in value reference. */
var push = Array.prototype.push;

/**
 * Creates a function, with an arity of `n`, that invokes `func` with the
 * arguments it receives.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} n The arity of the new function.
 * @returns {Function} Returns the new function.
 */
function baseArity(func, n) {
  return n == 2
    ? function(a, b) { return func.apply(undefined, arguments); }
    : function(a) { return func.apply(undefined, arguments); };
}

/**
 * Creates a function that invokes `func`, with up to `n` arguments, ignoring
 * any additional arguments.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @param {number} n The arity cap.
 * @returns {Function} Returns the new function.
 */
function baseAry(func, n) {
  return n == 2
    ? function(a, b) { return func(a, b); }
    : function(a) { return func(a); };
}

/**
 * Creates a clone of `array`.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the cloned array.
 */
function cloneArray(array) {
  var length = array ? array.length : 0,
      result = Array(length);

  while (length--) {
    result[length] = array[length];
  }
  return result;
}

/**
 * Creates a function that clones a given object using the assignment `func`.
 *
 * @private
 * @param {Function} func The assignment function.
 * @returns {Function} Returns the new cloner function.
 */
function createCloner(func) {
  return function(object) {
    return func({}, object);
  };
}

/**
 * A specialized version of `_.spread` which flattens the spread array into
 * the arguments of the invoked `func`.
 *
 * @private
 * @param {Function} func The function to spread arguments over.
 * @param {number} start The start position of the spread.
 * @returns {Function} Returns the new function.
 */
function flatSpread(func, start) {
  return function() {
    var length = arguments.length,
        lastIndex = length - 1,
        args = Array(length);

    while (length--) {
      args[length] = arguments[length];
    }
    var array = args[start],
        otherArgs = args.slice(0, start);

    if (array) {
      push.apply(otherArgs, array);
    }
    if (start != lastIndex) {
      push.apply(otherArgs, args.slice(start + 1));
    }
    return func.apply(this, otherArgs);
  };
}

/**
 * Creates a function that wraps `func` and uses `cloner` to clone the first
 * argument it receives.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} cloner The function to clone arguments.
 * @returns {Function} Returns the new immutable function.
 */
function wrapImmutable(func, cloner) {
  return function() {
    var length = arguments.length;
    if (!length) {
      return;
    }
    var args = Array(length);
    while (length--) {
      args[length] = arguments[length];
    }
    var result = args[0] = cloner.apply(undefined, args);
    func.apply(undefined, args);
    return result;
  };
}

/**
 * The base implementation of `convert` which accepts a `util` object of methods
 * required to perform conversions.
 *
 * @param {Object} util The util object.
 * @param {string} name The name of the function to convert.
 * @param {Function} func The function to convert.
 * @param {Object} [options] The options object.
 * @param {boolean} [options.cap=true] Specify capping iteratee arguments.
 * @param {boolean} [options.curry=true] Specify currying.
 * @param {boolean} [options.fixed=true] Specify fixed arity.
 * @param {boolean} [options.immutable=true] Specify immutable operations.
 * @param {boolean} [options.rearg=true] Specify rearranging arguments.
 * @returns {Function|Object} Returns the converted function or object.
 */
function baseConvert$1(util, name, func, options) {
  var isLib = typeof name == 'function',
      isObj = name === Object(name);

  if (isObj) {
    options = func;
    func = name;
    name = undefined;
  }
  if (func == null) {
    throw new TypeError;
  }
  options || (options = {});

  var config = {
    'cap': 'cap' in options ? options.cap : true,
    'curry': 'curry' in options ? options.curry : true,
    'fixed': 'fixed' in options ? options.fixed : true,
    'immutable': 'immutable' in options ? options.immutable : true,
    'rearg': 'rearg' in options ? options.rearg : true
  };

  var defaultHolder = isLib ? func : fallbackHolder,
      forceCurry = ('curry' in options) && options.curry,
      forceFixed = ('fixed' in options) && options.fixed,
      forceRearg = ('rearg' in options) && options.rearg,
      pristine = isLib ? func.runInContext() : undefined;

  var helpers = isLib ? func : {
    'ary': util.ary,
    'assign': util.assign,
    'clone': util.clone,
    'curry': util.curry,
    'forEach': util.forEach,
    'isArray': util.isArray,
    'isError': util.isError,
    'isFunction': util.isFunction,
    'isWeakMap': util.isWeakMap,
    'iteratee': util.iteratee,
    'keys': util.keys,
    'rearg': util.rearg,
    'toInteger': util.toInteger,
    'toPath': util.toPath
  };

  var ary = helpers.ary,
      assign = helpers.assign,
      clone = helpers.clone,
      curry = helpers.curry,
      each = helpers.forEach,
      isArray = helpers.isArray,
      isError = helpers.isError,
      isFunction = helpers.isFunction,
      isWeakMap = helpers.isWeakMap,
      keys = helpers.keys,
      rearg = helpers.rearg,
      toInteger = helpers.toInteger,
      toPath = helpers.toPath;

  var aryMethodKeys = keys(mapping.aryMethod);

  var wrappers = {
    'castArray': function(castArray) {
      return function() {
        var value = arguments[0];
        return isArray(value)
          ? castArray(cloneArray(value))
          : castArray.apply(undefined, arguments);
      };
    },
    'iteratee': function(iteratee) {
      return function() {
        var func = arguments[0],
            arity = arguments[1],
            result = iteratee(func, arity),
            length = result.length;

        if (config.cap && typeof arity == 'number') {
          arity = arity > 2 ? (arity - 2) : 1;
          return (length && length <= arity) ? result : baseAry(result, arity);
        }
        return result;
      };
    },
    'mixin': function(mixin) {
      return function(source) {
        var func = this;
        if (!isFunction(func)) {
          return mixin(func, Object(source));
        }
        var pairs = [];
        each(keys(source), function(key) {
          if (isFunction(source[key])) {
            pairs.push([key, func.prototype[key]]);
          }
        });

        mixin(func, Object(source));

        each(pairs, function(pair) {
          var value = pair[1];
          if (isFunction(value)) {
            func.prototype[pair[0]] = value;
          } else {
            delete func.prototype[pair[0]];
          }
        });
        return func;
      };
    },
    'nthArg': function(nthArg) {
      return function(n) {
        var arity = n < 0 ? 1 : (toInteger(n) + 1);
        return curry(nthArg(n), arity);
      };
    },
    'rearg': function(rearg) {
      return function(func, indexes) {
        var arity = indexes ? indexes.length : 0;
        return curry(rearg(func, indexes), arity);
      };
    },
    'runInContext': function(runInContext) {
      return function(context) {
        return baseConvert$1(util, runInContext(context), options);
      };
    }
  };

  /*--------------------------------------------------------------------------*/

  /**
   * Casts `func` to a function with an arity capped iteratee if needed.
   *
   * @private
   * @param {string} name The name of the function to inspect.
   * @param {Function} func The function to inspect.
   * @returns {Function} Returns the cast function.
   */
  function castCap(name, func) {
    if (config.cap) {
      var indexes = mapping.iterateeRearg[name];
      if (indexes) {
        return iterateeRearg(func, indexes);
      }
      var n = !isLib && mapping.iterateeAry[name];
      if (n) {
        return iterateeAry(func, n);
      }
    }
    return func;
  }

  /**
   * Casts `func` to a curried function if needed.
   *
   * @private
   * @param {string} name The name of the function to inspect.
   * @param {Function} func The function to inspect.
   * @param {number} n The arity of `func`.
   * @returns {Function} Returns the cast function.
   */
  function castCurry(name, func, n) {
    return (forceCurry || (config.curry && n > 1))
      ? curry(func, n)
      : func;
  }

  /**
   * Casts `func` to a fixed arity function if needed.
   *
   * @private
   * @param {string} name The name of the function to inspect.
   * @param {Function} func The function to inspect.
   * @param {number} n The arity cap.
   * @returns {Function} Returns the cast function.
   */
  function castFixed(name, func, n) {
    if (config.fixed && (forceFixed || !mapping.skipFixed[name])) {
      var data = mapping.methodSpread[name],
          start = data && data.start;

      return start  === undefined ? ary(func, n) : flatSpread(func, start);
    }
    return func;
  }

  /**
   * Casts `func` to an rearged function if needed.
   *
   * @private
   * @param {string} name The name of the function to inspect.
   * @param {Function} func The function to inspect.
   * @param {number} n The arity of `func`.
   * @returns {Function} Returns the cast function.
   */
  function castRearg(name, func, n) {
    return (config.rearg && n > 1 && (forceRearg || !mapping.skipRearg[name]))
      ? rearg(func, mapping.methodRearg[name] || mapping.aryRearg[n])
      : func;
  }

  /**
   * Creates a clone of `object` by `path`.
   *
   * @private
   * @param {Object} object The object to clone.
   * @param {Array|string} path The path to clone by.
   * @returns {Object} Returns the cloned object.
   */
  function cloneByPath(object, path) {
    path = toPath(path);

    var index = -1,
        length = path.length,
        lastIndex = length - 1,
        result = clone(Object(object)),
        nested = result;

    while (nested != null && ++index < length) {
      var key = path[index],
          value = nested[key];

      if (value != null &&
          !(isFunction(value) || isError(value) || isWeakMap(value))) {
        nested[key] = clone(index == lastIndex ? value : Object(value));
      }
      nested = nested[key];
    }
    return result;
  }

  /**
   * Converts `lodash` to an immutable auto-curried iteratee-first data-last
   * version with conversion `options` applied.
   *
   * @param {Object} [options] The options object. See `baseConvert` for more details.
   * @returns {Function} Returns the converted `lodash`.
   */
  function convertLib(options) {
    return _.runInContext.convert(options)(undefined);
  }

  /**
   * Create a converter function for `func` of `name`.
   *
   * @param {string} name The name of the function to convert.
   * @param {Function} func The function to convert.
   * @returns {Function} Returns the new converter function.
   */
  function createConverter(name, func) {
    var realName = mapping.aliasToReal[name] || name,
        methodName = mapping.remap[realName] || realName,
        oldOptions = options;

    return function(options) {
      var newUtil = isLib ? pristine : helpers,
          newFunc = isLib ? pristine[methodName] : func,
          newOptions = assign(assign({}, oldOptions), options);

      return baseConvert$1(newUtil, realName, newFunc, newOptions);
    };
  }

  /**
   * Creates a function that wraps `func` to invoke its iteratee, with up to `n`
   * arguments, ignoring any additional arguments.
   *
   * @private
   * @param {Function} func The function to cap iteratee arguments for.
   * @param {number} n The arity cap.
   * @returns {Function} Returns the new function.
   */
  function iterateeAry(func, n) {
    return overArg(func, function(func) {
      return typeof func == 'function' ? baseAry(func, n) : func;
    });
  }

  /**
   * Creates a function that wraps `func` to invoke its iteratee with arguments
   * arranged according to the specified `indexes` where the argument value at
   * the first index is provided as the first argument, the argument value at
   * the second index is provided as the second argument, and so on.
   *
   * @private
   * @param {Function} func The function to rearrange iteratee arguments for.
   * @param {number[]} indexes The arranged argument indexes.
   * @returns {Function} Returns the new function.
   */
  function iterateeRearg(func, indexes) {
    return overArg(func, function(func) {
      var n = indexes.length;
      return baseArity(rearg(baseAry(func, n), indexes), n);
    });
  }

  /**
   * Creates a function that invokes `func` with its first argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function() {
      var length = arguments.length;
      if (!length) {
        return func();
      }
      var args = Array(length);
      while (length--) {
        args[length] = arguments[length];
      }
      var index = config.rearg ? 0 : (length - 1);
      args[index] = transform(args[index]);
      return func.apply(undefined, args);
    };
  }

  /**
   * Creates a function that wraps `func` and applys the conversions
   * rules by `name`.
   *
   * @private
   * @param {string} name The name of the function to wrap.
   * @param {Function} func The function to wrap.
   * @returns {Function} Returns the converted function.
   */
  function wrap(name, func, placeholder) {
    var result,
        realName = mapping.aliasToReal[name] || name,
        wrapped = func,
        wrapper = wrappers[realName];

    if (wrapper) {
      wrapped = wrapper(func);
    }
    else if (config.immutable) {
      if (mapping.mutate.array[realName]) {
        wrapped = wrapImmutable(func, cloneArray);
      }
      else if (mapping.mutate.object[realName]) {
        wrapped = wrapImmutable(func, createCloner(func));
      }
      else if (mapping.mutate.set[realName]) {
        wrapped = wrapImmutable(func, cloneByPath);
      }
    }
    each(aryMethodKeys, function(aryKey) {
      each(mapping.aryMethod[aryKey], function(otherName) {
        if (realName == otherName) {
          var data = mapping.methodSpread[realName],
              afterRearg = data && data.afterRearg;

          result = afterRearg
            ? castFixed(realName, castRearg(realName, wrapped, aryKey), aryKey)
            : castRearg(realName, castFixed(realName, wrapped, aryKey), aryKey);

          result = castCap(realName, result);
          result = castCurry(realName, result, aryKey);
          return false;
        }
      });
      return !result;
    });

    result || (result = wrapped);
    if (result == func) {
      result = forceCurry ? curry(result, 1) : function() {
        return func.apply(this, arguments);
      };
    }
    result.convert = createConverter(realName, func);
    result.placeholder = func.placeholder = placeholder;

    return result;
  }

  /*--------------------------------------------------------------------------*/

  if (!isObj) {
    return wrap(name, func, defaultHolder);
  }
  var _ = func;

  // Convert methods by ary cap.
  var pairs = [];
  each(aryMethodKeys, function(aryKey) {
    each(mapping.aryMethod[aryKey], function(key) {
      var func = _[mapping.remap[key] || key];
      if (func) {
        pairs.push([key, wrap(key, func, _)]);
      }
    });
  });

  // Convert remaining methods.
  each(keys(_), function(key) {
    var func = _[key];
    if (typeof func == 'function') {
      var length = pairs.length;
      while (length--) {
        if (pairs[length][0] == key) {
          return;
        }
      }
      func.convert = createConverter(key, func);
      pairs.push([key, func]);
    }
  });

  // Assign to `_` leaving `_.prototype` unchanged to allow chaining.
  each(pairs, function(pair) {
    _[pair[0]] = pair[1];
  });

  _.convert = convertLib;
  _.placeholder = _;

  // Assign aliases.
  each(keys(_), function(key) {
    each(mapping.realToAlias[key] || [], function(alias) {
      _[alias] = _[key];
    });
  });

  return _;
}

var _baseConvert = baseConvert$1;

var _metaMap;
var hasRequired_metaMap;

function require_metaMap () {
	if (hasRequired_metaMap) return _metaMap;
	hasRequired_metaMap = 1;
	var WeakMap = _WeakMap;

	/** Used to store function metadata. */
	var metaMap = WeakMap && new WeakMap;

	_metaMap = metaMap;
	return _metaMap;
}

var identity = identity_1,
    metaMap = require_metaMap();

/**
 * The base implementation of `setData` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to associate metadata with.
 * @param {*} data The metadata.
 * @returns {Function} Returns `func`.
 */
var baseSetData$2 = !metaMap ? identity : function(func, data) {
  metaMap.set(func, data);
  return func;
};

var _baseSetData = baseSetData$2;

var baseCreate = _baseCreate,
    isObject$3 = isObject_1;

/**
 * Creates a function that produces an instance of `Ctor` regardless of
 * whether it was invoked as part of a `new` expression or by `call` or `apply`.
 *
 * @private
 * @param {Function} Ctor The constructor to wrap.
 * @returns {Function} Returns the new wrapped function.
 */
function createCtor$4(Ctor) {
  return function() {
    // Use a `switch` statement to work with class constructors. See
    // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
    // for more details.
    var args = arguments;
    switch (args.length) {
      case 0: return new Ctor;
      case 1: return new Ctor(args[0]);
      case 2: return new Ctor(args[0], args[1]);
      case 3: return new Ctor(args[0], args[1], args[2]);
      case 4: return new Ctor(args[0], args[1], args[2], args[3]);
      case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
      case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
      case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
    }
    var thisBinding = baseCreate(Ctor.prototype),
        result = Ctor.apply(thisBinding, args);

    // Mimic the constructor's `return` behavior.
    // See https://es5.github.io/#x13.2.2 for more details.
    return isObject$3(result) ? result : thisBinding;
  };
}

var _createCtor = createCtor$4;

var createCtor$3 = _createCtor,
    root$3 = _root;

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG$6 = 1;

/**
 * Creates a function that wraps `func` to invoke it with the optional `this`
 * binding of `thisArg`.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createBind$1(func, bitmask, thisArg) {
  var isBind = bitmask & WRAP_BIND_FLAG$6,
      Ctor = createCtor$3(func);

  function wrapper() {
    var fn = (this && this !== root$3 && this instanceof wrapper) ? Ctor : func;
    return fn.apply(isBind ? thisArg : this, arguments);
  }
  return wrapper;
}

var _createBind = createBind$1;

/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeMax$2 = Math.max;

/**
 * Creates an array that is the composition of partially applied arguments,
 * placeholders, and provided arguments into a single array of arguments.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to prepend to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */
function composeArgs$2(args, partials, holders, isCurried) {
  var argsIndex = -1,
      argsLength = args.length,
      holdersLength = holders.length,
      leftIndex = -1,
      leftLength = partials.length,
      rangeLength = nativeMax$2(argsLength - holdersLength, 0),
      result = Array(leftLength + rangeLength),
      isUncurried = !isCurried;

  while (++leftIndex < leftLength) {
    result[leftIndex] = partials[leftIndex];
  }
  while (++argsIndex < holdersLength) {
    if (isUncurried || argsIndex < argsLength) {
      result[holders[argsIndex]] = args[argsIndex];
    }
  }
  while (rangeLength--) {
    result[leftIndex++] = args[argsIndex++];
  }
  return result;
}

var _composeArgs = composeArgs$2;

/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeMax$1 = Math.max;

/**
 * This function is like `composeArgs` except that the arguments composition
 * is tailored for `_.partialRight`.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to append to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */
function composeArgsRight$2(args, partials, holders, isCurried) {
  var argsIndex = -1,
      argsLength = args.length,
      holdersIndex = -1,
      holdersLength = holders.length,
      rightIndex = -1,
      rightLength = partials.length,
      rangeLength = nativeMax$1(argsLength - holdersLength, 0),
      result = Array(rangeLength + rightLength),
      isUncurried = !isCurried;

  while (++argsIndex < rangeLength) {
    result[argsIndex] = args[argsIndex];
  }
  var offset = argsIndex;
  while (++rightIndex < rightLength) {
    result[offset + rightIndex] = partials[rightIndex];
  }
  while (++holdersIndex < holdersLength) {
    if (isUncurried || argsIndex < argsLength) {
      result[offset + holders[holdersIndex]] = args[argsIndex++];
    }
  }
  return result;
}

var _composeArgsRight = composeArgsRight$2;

/**
 * Gets the number of `placeholder` occurrences in `array`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} placeholder The placeholder to search for.
 * @returns {number} Returns the placeholder count.
 */

function countHolders$1(array, placeholder) {
  var length = array.length,
      result = 0;

  while (length--) {
    if (array[length] === placeholder) {
      ++result;
    }
  }
  return result;
}

var _countHolders = countHolders$1;

/**
 * The function whose prototype chain sequence wrappers inherit from.
 *
 * @private
 */

var _baseLodash;
var hasRequired_baseLodash;

function require_baseLodash () {
	if (hasRequired_baseLodash) return _baseLodash;
	hasRequired_baseLodash = 1;
	function baseLodash() {
	  // No operation performed.
	}

	_baseLodash = baseLodash;
	return _baseLodash;
}

var _LazyWrapper;
var hasRequired_LazyWrapper;

function require_LazyWrapper () {
	if (hasRequired_LazyWrapper) return _LazyWrapper;
	hasRequired_LazyWrapper = 1;
	var baseCreate = _baseCreate,
	    baseLodash = require_baseLodash();

	/** Used as references for the maximum length and index of an array. */
	var MAX_ARRAY_LENGTH = 4294967295;

	/**
	 * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	 *
	 * @private
	 * @constructor
	 * @param {*} value The value to wrap.
	 */
	function LazyWrapper(value) {
	  this.__wrapped__ = value;
	  this.__actions__ = [];
	  this.__dir__ = 1;
	  this.__filtered__ = false;
	  this.__iteratees__ = [];
	  this.__takeCount__ = MAX_ARRAY_LENGTH;
	  this.__views__ = [];
	}

	// Ensure `LazyWrapper` is an instance of `baseLodash`.
	LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	LazyWrapper.prototype.constructor = LazyWrapper;

	_LazyWrapper = LazyWrapper;
	return _LazyWrapper;
}

/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */

var noop_1;
var hasRequiredNoop;

function requireNoop () {
	if (hasRequiredNoop) return noop_1;
	hasRequiredNoop = 1;
	function noop() {
	  // No operation performed.
	}

	noop_1 = noop;
	return noop_1;
}

var _getData;
var hasRequired_getData;

function require_getData () {
	if (hasRequired_getData) return _getData;
	hasRequired_getData = 1;
	var metaMap = require_metaMap(),
	    noop = requireNoop();

	/**
	 * Gets metadata for `func`.
	 *
	 * @private
	 * @param {Function} func The function to query.
	 * @returns {*} Returns the metadata for `func`.
	 */
	var getData = !metaMap ? noop : function(func) {
	  return metaMap.get(func);
	};

	_getData = getData;
	return _getData;
}

/** Used to lookup unminified function names. */

var _realNames;
var hasRequired_realNames;

function require_realNames () {
	if (hasRequired_realNames) return _realNames;
	hasRequired_realNames = 1;
	var realNames = {};

	_realNames = realNames;
	return _realNames;
}

var _getFuncName;
var hasRequired_getFuncName;

function require_getFuncName () {
	if (hasRequired_getFuncName) return _getFuncName;
	hasRequired_getFuncName = 1;
	var realNames = require_realNames();

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Gets the name of `func`.
	 *
	 * @private
	 * @param {Function} func The function to query.
	 * @returns {string} Returns the function name.
	 */
	function getFuncName(func) {
	  var result = (func.name + ''),
	      array = realNames[result],
	      length = hasOwnProperty.call(realNames, result) ? array.length : 0;

	  while (length--) {
	    var data = array[length],
	        otherFunc = data.func;
	    if (otherFunc == null || otherFunc == func) {
	      return data.name;
	    }
	  }
	  return result;
	}

	_getFuncName = getFuncName;
	return _getFuncName;
}

var _LodashWrapper;
var hasRequired_LodashWrapper;

function require_LodashWrapper () {
	if (hasRequired_LodashWrapper) return _LodashWrapper;
	hasRequired_LodashWrapper = 1;
	var baseCreate = _baseCreate,
	    baseLodash = require_baseLodash();

	/**
	 * The base constructor for creating `lodash` wrapper objects.
	 *
	 * @private
	 * @param {*} value The value to wrap.
	 * @param {boolean} [chainAll] Enable explicit method chain sequences.
	 */
	function LodashWrapper(value, chainAll) {
	  this.__wrapped__ = value;
	  this.__actions__ = [];
	  this.__chain__ = !!chainAll;
	  this.__index__ = 0;
	  this.__values__ = undefined;
	}

	LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	LodashWrapper.prototype.constructor = LodashWrapper;

	_LodashWrapper = LodashWrapper;
	return _LodashWrapper;
}

var _wrapperClone;
var hasRequired_wrapperClone;

function require_wrapperClone () {
	if (hasRequired_wrapperClone) return _wrapperClone;
	hasRequired_wrapperClone = 1;
	var LazyWrapper = require_LazyWrapper(),
	    LodashWrapper = require_LodashWrapper(),
	    copyArray = _copyArray;

	/**
	 * Creates a clone of `wrapper`.
	 *
	 * @private
	 * @param {Object} wrapper The wrapper to clone.
	 * @returns {Object} Returns the cloned wrapper.
	 */
	function wrapperClone(wrapper) {
	  if (wrapper instanceof LazyWrapper) {
	    return wrapper.clone();
	  }
	  var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
	  result.__actions__ = copyArray(wrapper.__actions__);
	  result.__index__  = wrapper.__index__;
	  result.__values__ = wrapper.__values__;
	  return result;
	}

	_wrapperClone = wrapperClone;
	return _wrapperClone;
}

var wrapperLodash;
var hasRequiredWrapperLodash;

function requireWrapperLodash () {
	if (hasRequiredWrapperLodash) return wrapperLodash;
	hasRequiredWrapperLodash = 1;
	var LazyWrapper = require_LazyWrapper(),
	    LodashWrapper = require_LodashWrapper(),
	    baseLodash = require_baseLodash(),
	    isArray = isArray_1,
	    isObjectLike = isObjectLike_1,
	    wrapperClone = require_wrapperClone();

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Creates a `lodash` object which wraps `value` to enable implicit method
	 * chain sequences. Methods that operate on and return arrays, collections,
	 * and functions can be chained together. Methods that retrieve a single value
	 * or may return a primitive value will automatically end the chain sequence
	 * and return the unwrapped value. Otherwise, the value must be unwrapped
	 * with `_#value`.
	 *
	 * Explicit chain sequences, which must be unwrapped with `_#value`, may be
	 * enabled using `_.chain`.
	 *
	 * The execution of chained methods is lazy, that is, it's deferred until
	 * `_#value` is implicitly or explicitly called.
	 *
	 * Lazy evaluation allows several methods to support shortcut fusion.
	 * Shortcut fusion is an optimization to merge iteratee calls; this avoids
	 * the creation of intermediate arrays and can greatly reduce the number of
	 * iteratee executions. Sections of a chain sequence qualify for shortcut
	 * fusion if the section is applied to an array and iteratees accept only
	 * one argument. The heuristic for whether a section qualifies for shortcut
	 * fusion is subject to change.
	 *
	 * Chaining is supported in custom builds as long as the `_#value` method is
	 * directly or indirectly included in the build.
	 *
	 * In addition to lodash methods, wrappers have `Array` and `String` methods.
	 *
	 * The wrapper `Array` methods are:
	 * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
	 *
	 * The wrapper `String` methods are:
	 * `replace` and `split`
	 *
	 * The wrapper methods that support shortcut fusion are:
	 * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
	 * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
	 * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
	 *
	 * The chainable wrapper methods are:
	 * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
	 * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
	 * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
	 * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
	 * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
	 * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
	 * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
	 * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
	 * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
	 * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
	 * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
	 * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
	 * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
	 * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
	 * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
	 * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
	 * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
	 * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
	 * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
	 * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
	 * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
	 * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
	 * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
	 * `zipObject`, `zipObjectDeep`, and `zipWith`
	 *
	 * The wrapper methods that are **not** chainable by default are:
	 * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
	 * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
	 * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
	 * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
	 * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
	 * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
	 * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
	 * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
	 * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
	 * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
	 * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
	 * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
	 * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
	 * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
	 * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
	 * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
	 * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
	 * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
	 * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
	 * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
	 * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
	 * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
	 * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
	 * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
	 * `upperFirst`, `value`, and `words`
	 *
	 * @name _
	 * @constructor
	 * @category Seq
	 * @param {*} value The value to wrap in a `lodash` instance.
	 * @returns {Object} Returns the new `lodash` wrapper instance.
	 * @example
	 *
	 * function square(n) {
	 *   return n * n;
	 * }
	 *
	 * var wrapped = _([1, 2, 3]);
	 *
	 * // Returns an unwrapped value.
	 * wrapped.reduce(_.add);
	 * // => 6
	 *
	 * // Returns a wrapped value.
	 * var squares = wrapped.map(square);
	 *
	 * _.isArray(squares);
	 * // => false
	 *
	 * _.isArray(squares.value());
	 * // => true
	 */
	function lodash(value) {
	  if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	    if (value instanceof LodashWrapper) {
	      return value;
	    }
	    if (hasOwnProperty.call(value, '__wrapped__')) {
	      return wrapperClone(value);
	    }
	  }
	  return new LodashWrapper(value);
	}

	// Ensure wrappers are instances of `baseLodash`.
	lodash.prototype = baseLodash.prototype;
	lodash.prototype.constructor = lodash;

	wrapperLodash = lodash;
	return wrapperLodash;
}

var _isLaziable;
var hasRequired_isLaziable;

function require_isLaziable () {
	if (hasRequired_isLaziable) return _isLaziable;
	hasRequired_isLaziable = 1;
	var LazyWrapper = require_LazyWrapper(),
	    getData = require_getData(),
	    getFuncName = require_getFuncName(),
	    lodash = requireWrapperLodash();

	/**
	 * Checks if `func` has a lazy counterpart.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
	 *  else `false`.
	 */
	function isLaziable(func) {
	  var funcName = getFuncName(func),
	      other = lodash[funcName];

	  if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
	    return false;
	  }
	  if (func === other) {
	    return true;
	  }
	  var data = getData(other);
	  return !!data && func === data[0];
	}

	_isLaziable = isLaziable;
	return _isLaziable;
}

var baseSetData$1 = _baseSetData,
    shortOut = _shortOut;

/**
 * Sets metadata for `func`.
 *
 * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
 * period of time, it will trip its breaker and transition to an identity
 * function to avoid garbage collection pauses in V8. See
 * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
 * for more details.
 *
 * @private
 * @param {Function} func The function to associate metadata with.
 * @param {*} data The metadata.
 * @returns {Function} Returns `func`.
 */
var setData$2 = shortOut(baseSetData$1);

var _setData = setData$2;

/** Used to match wrap detail comments. */

var reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
    reSplitDetails = /,? & /;

/**
 * Extracts wrapper details from the `source` body comment.
 *
 * @private
 * @param {string} source The source to inspect.
 * @returns {Array} Returns the wrapper details.
 */
function getWrapDetails$1(source) {
  var match = source.match(reWrapDetails);
  return match ? match[1].split(reSplitDetails) : [];
}

var _getWrapDetails = getWrapDetails$1;

/** Used to match wrap detail comments. */

var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/;

/**
 * Inserts wrapper `details` in a comment at the top of the `source` body.
 *
 * @private
 * @param {string} source The source to modify.
 * @returns {Array} details The details to insert.
 * @returns {string} Returns the modified source.
 */
function insertWrapDetails$1(source, details) {
  var length = details.length;
  if (!length) {
    return source;
  }
  var lastIndex = length - 1;
  details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
  details = details.join(length > 2 ? ', ' : ' ');
  return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
}

var _insertWrapDetails = insertWrapDetails$1;

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */

var _baseFindIndex;
var hasRequired_baseFindIndex;

function require_baseFindIndex () {
	if (hasRequired_baseFindIndex) return _baseFindIndex;
	hasRequired_baseFindIndex = 1;
	function baseFindIndex(array, predicate, fromIndex, fromRight) {
	  var length = array.length,
	      index = fromIndex + (fromRight ? 1 : -1);

	  while ((fromRight ? index-- : ++index < length)) {
	    if (predicate(array[index], index, array)) {
	      return index;
	    }
	  }
	  return -1;
	}

	_baseFindIndex = baseFindIndex;
	return _baseFindIndex;
}

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */

var _baseIsNaN;
var hasRequired_baseIsNaN;

function require_baseIsNaN () {
	if (hasRequired_baseIsNaN) return _baseIsNaN;
	hasRequired_baseIsNaN = 1;
	function baseIsNaN(value) {
	  return value !== value;
	}

	_baseIsNaN = baseIsNaN;
	return _baseIsNaN;
}

/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */

var _strictIndexOf;
var hasRequired_strictIndexOf;

function require_strictIndexOf () {
	if (hasRequired_strictIndexOf) return _strictIndexOf;
	hasRequired_strictIndexOf = 1;
	function strictIndexOf(array, value, fromIndex) {
	  var index = fromIndex - 1,
	      length = array.length;

	  while (++index < length) {
	    if (array[index] === value) {
	      return index;
	    }
	  }
	  return -1;
	}

	_strictIndexOf = strictIndexOf;
	return _strictIndexOf;
}

var _baseIndexOf;
var hasRequired_baseIndexOf;

function require_baseIndexOf () {
	if (hasRequired_baseIndexOf) return _baseIndexOf;
	hasRequired_baseIndexOf = 1;
	var baseFindIndex = require_baseFindIndex(),
	    baseIsNaN = require_baseIsNaN(),
	    strictIndexOf = require_strictIndexOf();

	/**
	 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseIndexOf(array, value, fromIndex) {
	  return value === value
	    ? strictIndexOf(array, value, fromIndex)
	    : baseFindIndex(array, baseIsNaN, fromIndex);
	}

	_baseIndexOf = baseIndexOf;
	return _baseIndexOf;
}

var _arrayIncludes;
var hasRequired_arrayIncludes;

function require_arrayIncludes () {
	if (hasRequired_arrayIncludes) return _arrayIncludes;
	hasRequired_arrayIncludes = 1;
	var baseIndexOf = require_baseIndexOf();

	/**
	 * A specialized version of `_.includes` for arrays without support for
	 * specifying an index to search from.
	 *
	 * @private
	 * @param {Array} [array] The array to inspect.
	 * @param {*} target The value to search for.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */
	function arrayIncludes(array, value) {
	  var length = array == null ? 0 : array.length;
	  return !!length && baseIndexOf(array, value, 0) > -1;
	}

	_arrayIncludes = arrayIncludes;
	return _arrayIncludes;
}

var arrayEach$1 = _arrayEach,
    arrayIncludes = require_arrayIncludes();

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG$5 = 1,
    WRAP_BIND_KEY_FLAG$4 = 2,
    WRAP_CURRY_FLAG$5 = 8,
    WRAP_CURRY_RIGHT_FLAG$2 = 16,
    WRAP_PARTIAL_FLAG$2 = 32,
    WRAP_PARTIAL_RIGHT_FLAG$2 = 64,
    WRAP_ARY_FLAG$3 = 128,
    WRAP_REARG_FLAG$2 = 256,
    WRAP_FLIP_FLAG$1 = 512;

/** Used to associate wrap methods with their bit flags. */
var wrapFlags = [
  ['ary', WRAP_ARY_FLAG$3],
  ['bind', WRAP_BIND_FLAG$5],
  ['bindKey', WRAP_BIND_KEY_FLAG$4],
  ['curry', WRAP_CURRY_FLAG$5],
  ['curryRight', WRAP_CURRY_RIGHT_FLAG$2],
  ['flip', WRAP_FLIP_FLAG$1],
  ['partial', WRAP_PARTIAL_FLAG$2],
  ['partialRight', WRAP_PARTIAL_RIGHT_FLAG$2],
  ['rearg', WRAP_REARG_FLAG$2]
];

/**
 * Updates wrapper `details` based on `bitmask` flags.
 *
 * @private
 * @returns {Array} details The details to modify.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @returns {Array} Returns `details`.
 */
function updateWrapDetails$1(details, bitmask) {
  arrayEach$1(wrapFlags, function(pair) {
    var value = '_.' + pair[0];
    if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
      details.push(value);
    }
  });
  return details.sort();
}

var _updateWrapDetails = updateWrapDetails$1;

var getWrapDetails = _getWrapDetails,
    insertWrapDetails = _insertWrapDetails,
    setToString = _setToString,
    updateWrapDetails = _updateWrapDetails;

/**
 * Sets the `toString` method of `wrapper` to mimic the source of `reference`
 * with wrapper details in a comment at the top of the source body.
 *
 * @private
 * @param {Function} wrapper The function to modify.
 * @param {Function} reference The reference function.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @returns {Function} Returns `wrapper`.
 */
function setWrapToString$2(wrapper, reference, bitmask) {
  var source = (reference + '');
  return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
}

var _setWrapToString = setWrapToString$2;

var isLaziable = require_isLaziable(),
    setData$1 = _setData,
    setWrapToString$1 = _setWrapToString;

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG$4 = 1,
    WRAP_BIND_KEY_FLAG$3 = 2,
    WRAP_CURRY_BOUND_FLAG$1 = 4,
    WRAP_CURRY_FLAG$4 = 8,
    WRAP_PARTIAL_FLAG$1 = 32,
    WRAP_PARTIAL_RIGHT_FLAG$1 = 64;

/**
 * Creates a function that wraps `func` to continue currying.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {Function} wrapFunc The function to create the `func` wrapper.
 * @param {*} placeholder The placeholder value.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to prepend to those provided to
 *  the new function.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createRecurry$2(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
  var isCurry = bitmask & WRAP_CURRY_FLAG$4,
      newHolders = isCurry ? holders : undefined,
      newHoldersRight = isCurry ? undefined : holders,
      newPartials = isCurry ? partials : undefined,
      newPartialsRight = isCurry ? undefined : partials;

  bitmask |= (isCurry ? WRAP_PARTIAL_FLAG$1 : WRAP_PARTIAL_RIGHT_FLAG$1);
  bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG$1 : WRAP_PARTIAL_FLAG$1);

  if (!(bitmask & WRAP_CURRY_BOUND_FLAG$1)) {
    bitmask &= ~(WRAP_BIND_FLAG$4 | WRAP_BIND_KEY_FLAG$3);
  }
  var newData = [
    func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
    newHoldersRight, argPos, ary, arity
  ];

  var result = wrapFunc.apply(undefined, newData);
  if (isLaziable(func)) {
    setData$1(result, newData);
  }
  result.placeholder = placeholder;
  return setWrapToString$1(result, func, bitmask);
}

var _createRecurry = createRecurry$2;

/**
 * Gets the argument placeholder value for `func`.
 *
 * @private
 * @param {Function} func The function to inspect.
 * @returns {*} Returns the placeholder value.
 */

function getHolder$2(func) {
  var object = func;
  return object.placeholder;
}

var _getHolder = getHolder$2;

var copyArray$2 = _copyArray,
    isIndex$1 = _isIndex;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin$1 = Math.min;

/**
 * Reorder `array` according to the specified indexes where the element at
 * the first index is assigned as the first element, the element at
 * the second index is assigned as the second element, and so on.
 *
 * @private
 * @param {Array} array The array to reorder.
 * @param {Array} indexes The arranged array indexes.
 * @returns {Array} Returns `array`.
 */
function reorder$1(array, indexes) {
  var arrLength = array.length,
      length = nativeMin$1(indexes.length, arrLength),
      oldArray = copyArray$2(array);

  while (length--) {
    var index = indexes[length];
    array[length] = isIndex$1(index, arrLength) ? oldArray[index] : undefined;
  }
  return array;
}

var _reorder = reorder$1;

/** Used as the internal argument placeholder. */

var PLACEHOLDER$1 = '__lodash_placeholder__';

/**
 * Replaces all `placeholder` elements in `array` with an internal placeholder
 * and returns an array of their indexes.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {*} placeholder The placeholder to replace.
 * @returns {Array} Returns the new array of placeholder indexes.
 */
function replaceHolders$3(array, placeholder) {
  var index = -1,
      length = array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (value === placeholder || value === PLACEHOLDER$1) {
      array[index] = PLACEHOLDER$1;
      result[resIndex++] = index;
    }
  }
  return result;
}

var _replaceHolders = replaceHolders$3;

var composeArgs$1 = _composeArgs,
    composeArgsRight$1 = _composeArgsRight,
    countHolders = _countHolders,
    createCtor$2 = _createCtor,
    createRecurry$1 = _createRecurry,
    getHolder$1 = _getHolder,
    reorder = _reorder,
    replaceHolders$2 = _replaceHolders,
    root$2 = _root;

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG$3 = 1,
    WRAP_BIND_KEY_FLAG$2 = 2,
    WRAP_CURRY_FLAG$3 = 8,
    WRAP_CURRY_RIGHT_FLAG$1 = 16,
    WRAP_ARY_FLAG$2 = 128,
    WRAP_FLIP_FLAG = 512;

/**
 * Creates a function that wraps `func` to invoke it with optional `this`
 * binding of `thisArg`, partial application, and currying.
 *
 * @private
 * @param {Function|string} func The function or method name to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to prepend to those provided to
 *  the new function.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [partialsRight] The arguments to append to those provided
 *  to the new function.
 * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createHybrid$2(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
  var isAry = bitmask & WRAP_ARY_FLAG$2,
      isBind = bitmask & WRAP_BIND_FLAG$3,
      isBindKey = bitmask & WRAP_BIND_KEY_FLAG$2,
      isCurried = bitmask & (WRAP_CURRY_FLAG$3 | WRAP_CURRY_RIGHT_FLAG$1),
      isFlip = bitmask & WRAP_FLIP_FLAG,
      Ctor = isBindKey ? undefined : createCtor$2(func);

  function wrapper() {
    var length = arguments.length,
        args = Array(length),
        index = length;

    while (index--) {
      args[index] = arguments[index];
    }
    if (isCurried) {
      var placeholder = getHolder$1(wrapper),
          holdersCount = countHolders(args, placeholder);
    }
    if (partials) {
      args = composeArgs$1(args, partials, holders, isCurried);
    }
    if (partialsRight) {
      args = composeArgsRight$1(args, partialsRight, holdersRight, isCurried);
    }
    length -= holdersCount;
    if (isCurried && length < arity) {
      var newHolders = replaceHolders$2(args, placeholder);
      return createRecurry$1(
        func, bitmask, createHybrid$2, wrapper.placeholder, thisArg,
        args, newHolders, argPos, ary, arity - length
      );
    }
    var thisBinding = isBind ? thisArg : this,
        fn = isBindKey ? thisBinding[func] : func;

    length = args.length;
    if (argPos) {
      args = reorder(args, argPos);
    } else if (isFlip && length > 1) {
      args.reverse();
    }
    if (isAry && ary < length) {
      args.length = ary;
    }
    if (this && this !== root$2 && this instanceof wrapper) {
      fn = Ctor || createCtor$2(fn);
    }
    return fn.apply(thisBinding, args);
  }
  return wrapper;
}

var _createHybrid = createHybrid$2;

var apply$1 = _apply,
    createCtor$1 = _createCtor,
    createHybrid$1 = _createHybrid,
    createRecurry = _createRecurry,
    getHolder = _getHolder,
    replaceHolders$1 = _replaceHolders,
    root$1 = _root;

/**
 * Creates a function that wraps `func` to enable currying.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {number} arity The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createCurry$1(func, bitmask, arity) {
  var Ctor = createCtor$1(func);

  function wrapper() {
    var length = arguments.length,
        args = Array(length),
        index = length,
        placeholder = getHolder(wrapper);

    while (index--) {
      args[index] = arguments[index];
    }
    var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
      ? []
      : replaceHolders$1(args, placeholder);

    length -= holders.length;
    if (length < arity) {
      return createRecurry(
        func, bitmask, createHybrid$1, wrapper.placeholder, undefined,
        args, holders, undefined, undefined, arity - length);
    }
    var fn = (this && this !== root$1 && this instanceof wrapper) ? Ctor : func;
    return apply$1(fn, this, args);
  }
  return wrapper;
}

var _createCurry = createCurry$1;

var apply = _apply,
    createCtor = _createCtor,
    root = _root;

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG$2 = 1;

/**
 * Creates a function that wraps `func` to invoke it with the `this` binding
 * of `thisArg` and `partials` prepended to the arguments it receives.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} partials The arguments to prepend to those provided to
 *  the new function.
 * @returns {Function} Returns the new wrapped function.
 */
function createPartial$1(func, bitmask, thisArg, partials) {
  var isBind = bitmask & WRAP_BIND_FLAG$2,
      Ctor = createCtor(func);

  function wrapper() {
    var argsIndex = -1,
        argsLength = arguments.length,
        leftIndex = -1,
        leftLength = partials.length,
        args = Array(leftLength + argsLength),
        fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

    while (++leftIndex < leftLength) {
      args[leftIndex] = partials[leftIndex];
    }
    while (argsLength--) {
      args[leftIndex++] = arguments[++argsIndex];
    }
    return apply(fn, isBind ? thisArg : this, args);
  }
  return wrapper;
}

var _createPartial = createPartial$1;

var composeArgs = _composeArgs,
    composeArgsRight = _composeArgsRight,
    replaceHolders = _replaceHolders;

/** Used as the internal argument placeholder. */
var PLACEHOLDER = '__lodash_placeholder__';

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG$1 = 1,
    WRAP_BIND_KEY_FLAG$1 = 2,
    WRAP_CURRY_BOUND_FLAG = 4,
    WRAP_CURRY_FLAG$2 = 8,
    WRAP_ARY_FLAG$1 = 128,
    WRAP_REARG_FLAG$1 = 256;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin = Math.min;

/**
 * Merges the function metadata of `source` into `data`.
 *
 * Merging metadata reduces the number of wrappers used to invoke a function.
 * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
 * may be applied regardless of execution order. Methods like `_.ary` and
 * `_.rearg` modify function arguments, making the order in which they are
 * executed important, preventing the merging of metadata. However, we make
 * an exception for a safe combined case where curried functions have `_.ary`
 * and or `_.rearg` applied.
 *
 * @private
 * @param {Array} data The destination metadata.
 * @param {Array} source The source metadata.
 * @returns {Array} Returns `data`.
 */
function mergeData$1(data, source) {
  var bitmask = data[1],
      srcBitmask = source[1],
      newBitmask = bitmask | srcBitmask,
      isCommon = newBitmask < (WRAP_BIND_FLAG$1 | WRAP_BIND_KEY_FLAG$1 | WRAP_ARY_FLAG$1);

  var isCombo =
    ((srcBitmask == WRAP_ARY_FLAG$1) && (bitmask == WRAP_CURRY_FLAG$2)) ||
    ((srcBitmask == WRAP_ARY_FLAG$1) && (bitmask == WRAP_REARG_FLAG$1) && (data[7].length <= source[8])) ||
    ((srcBitmask == (WRAP_ARY_FLAG$1 | WRAP_REARG_FLAG$1)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG$2));

  // Exit early if metadata can't be merged.
  if (!(isCommon || isCombo)) {
    return data;
  }
  // Use source `thisArg` if available.
  if (srcBitmask & WRAP_BIND_FLAG$1) {
    data[2] = source[2];
    // Set when currying a bound function.
    newBitmask |= bitmask & WRAP_BIND_FLAG$1 ? 0 : WRAP_CURRY_BOUND_FLAG;
  }
  // Compose partial arguments.
  var value = source[3];
  if (value) {
    var partials = data[3];
    data[3] = partials ? composeArgs(partials, value, source[4]) : value;
    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
  }
  // Compose partial right arguments.
  value = source[5];
  if (value) {
    partials = data[5];
    data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
  }
  // Use source `argPos` if available.
  value = source[7];
  if (value) {
    data[7] = value;
  }
  // Use source `ary` if it's smaller.
  if (srcBitmask & WRAP_ARY_FLAG$1) {
    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
  }
  // Use source `arity` if one is not provided.
  if (data[9] == null) {
    data[9] = source[9];
  }
  // Use source `func` and merge bitmasks.
  data[0] = source[0];
  data[1] = newBitmask;

  return data;
}

var _mergeData = mergeData$1;

/** Used to match a single whitespace character. */

var reWhitespace = /\s/;

/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */
function trimmedEndIndex$1(string) {
  var index = string.length;

  while (index-- && reWhitespace.test(string.charAt(index))) {}
  return index;
}

var _trimmedEndIndex = trimmedEndIndex$1;

var trimmedEndIndex = _trimmedEndIndex;

/** Used to match leading whitespace. */
var reTrimStart = /^\s+/;

/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */
function baseTrim$1(string) {
  return string
    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
    : string;
}

var _baseTrim = baseTrim$1;

var baseTrim = _baseTrim,
    isObject$2 = isObject_1,
    isSymbol$1 = isSymbol_1;

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber$1(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol$1(value)) {
    return NAN;
  }
  if (isObject$2(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject$2(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = baseTrim(value);
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

var toNumber_1 = toNumber$1;

var toNumber = toNumber_1;

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite$1(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

var toFinite_1 = toFinite$1;

var toFinite = toFinite_1;

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger$1(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

var toInteger_1 = toInteger$1;

var baseSetData = _baseSetData,
    createBind = _createBind,
    createCurry = _createCurry,
    createHybrid = _createHybrid,
    createPartial = _createPartial,
    getData = require_getData(),
    mergeData = _mergeData,
    setData = _setData,
    setWrapToString = _setWrapToString,
    toInteger = toInteger_1;

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG = 1,
    WRAP_BIND_KEY_FLAG = 2,
    WRAP_CURRY_FLAG$1 = 8,
    WRAP_CURRY_RIGHT_FLAG = 16,
    WRAP_PARTIAL_FLAG = 32,
    WRAP_PARTIAL_RIGHT_FLAG = 64;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * Creates a function that either curries or invokes `func` with optional
 * `this` binding and partially applied arguments.
 *
 * @private
 * @param {Function|string} func The function or method name to wrap.
 * @param {number} bitmask The bitmask flags.
 *    1 - `_.bind`
 *    2 - `_.bindKey`
 *    4 - `_.curry` or `_.curryRight` of a bound function
 *    8 - `_.curry`
 *   16 - `_.curryRight`
 *   32 - `_.partial`
 *   64 - `_.partialRight`
 *  128 - `_.rearg`
 *  256 - `_.ary`
 *  512 - `_.flip`
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to be partially applied.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createWrap$3(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
  var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
  if (!isBindKey && typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var length = partials ? partials.length : 0;
  if (!length) {
    bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
    partials = holders = undefined;
  }
  ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
  arity = arity === undefined ? arity : toInteger(arity);
  length -= holders ? holders.length : 0;

  if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
    var partialsRight = partials,
        holdersRight = holders;

    partials = holders = undefined;
  }
  var data = isBindKey ? undefined : getData(func);

  var newData = [
    func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
    argPos, ary, arity
  ];

  if (data) {
    mergeData(newData, data);
  }
  func = newData[0];
  bitmask = newData[1];
  thisArg = newData[2];
  partials = newData[3];
  holders = newData[4];
  arity = newData[9] = newData[9] === undefined
    ? (isBindKey ? 0 : func.length)
    : nativeMax(newData[9] - length, 0);

  if (!arity && bitmask & (WRAP_CURRY_FLAG$1 | WRAP_CURRY_RIGHT_FLAG)) {
    bitmask &= ~(WRAP_CURRY_FLAG$1 | WRAP_CURRY_RIGHT_FLAG);
  }
  if (!bitmask || bitmask == WRAP_BIND_FLAG) {
    var result = createBind(func, bitmask, thisArg);
  } else if (bitmask == WRAP_CURRY_FLAG$1 || bitmask == WRAP_CURRY_RIGHT_FLAG) {
    result = createCurry(func, bitmask, arity);
  } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
    result = createPartial(func, bitmask, thisArg, partials);
  } else {
    result = createHybrid.apply(undefined, newData);
  }
  var setter = data ? baseSetData : setData;
  return setWrapToString(setter(result, newData), func, bitmask);
}

var _createWrap = createWrap$3;

var createWrap$2 = _createWrap;

/** Used to compose bitmasks for function metadata. */
var WRAP_ARY_FLAG = 128;

/**
 * Creates a function that invokes `func`, with up to `n` arguments,
 * ignoring any additional arguments.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} func The function to cap arguments for.
 * @param {number} [n=func.length] The arity cap.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Function} Returns the new capped function.
 * @example
 *
 * _.map(['6', '8', '10'], _.ary(parseInt, 1));
 * // => [6, 8, 10]
 */
function ary(func, n, guard) {
  n = guard ? undefined : n;
  n = (func && n == null) ? func.length : n;
  return createWrap$2(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
}

var ary_1 = ary;

var copyObject$3 = _copyObject,
    keys$1 = keys_1;

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign$1(object, source) {
  return object && copyObject$3(source, keys$1(source), object);
}

var _baseAssign = baseAssign$1;

var copyObject$2 = _copyObject,
    keysIn$2 = keysIn_1;

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssignIn$1(object, source) {
  return object && copyObject$2(source, keysIn$2(source), object);
}

var _baseAssignIn = baseAssignIn$1;

var copyObject$1 = _copyObject,
    getSymbols$1 = _getSymbols;

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols$1(source, object) {
  return copyObject$1(source, getSymbols$1(source), object);
}

var _copySymbols = copySymbols$1;

var arrayPush = require_arrayPush(),
    getPrototype = _getPrototype,
    getSymbols = _getSymbols,
    stubArray = stubArray_1;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn$2 = !nativeGetSymbols ? stubArray : function(object) {
  var result = [];
  while (object) {
    arrayPush(result, getSymbols(object));
    object = getPrototype(object);
  }
  return result;
};

var _getSymbolsIn = getSymbolsIn$2;

var copyObject = _copyObject,
    getSymbolsIn$1 = _getSymbolsIn;

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbolsIn$1(source, object) {
  return copyObject(source, getSymbolsIn$1(source), object);
}

var _copySymbolsIn = copySymbolsIn$1;

var baseGetAllKeys = _baseGetAllKeys,
    getSymbolsIn = _getSymbolsIn,
    keysIn$1 = keysIn_1;

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn$1(object) {
  return baseGetAllKeys(object, keysIn$1, getSymbolsIn);
}

var _getAllKeysIn = getAllKeysIn$1;

/** Used for built-in method references. */

var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray$1(array) {
  var length = array.length,
      result = new array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

var _initCloneArray = initCloneArray$1;

var cloneArrayBuffer$1 = _cloneArrayBuffer;

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView$1(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer$1(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

var _cloneDataView = cloneDataView$1;

/** Used to match `RegExp` flags from their coerced string values. */

var reFlags = /\w*$/;

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp$1(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

var _cloneRegExp = cloneRegExp$1;

var Symbol$1 = require_Symbol();

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol$1(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

var _cloneSymbol = cloneSymbol$1;

var cloneArrayBuffer = _cloneArrayBuffer,
    cloneDataView = _cloneDataView,
    cloneRegExp = _cloneRegExp,
    cloneSymbol = _cloneSymbol,
    cloneTypedArray = _cloneTypedArray;

/** `Object#toString` result references. */
var boolTag$1 = '[object Boolean]',
    dateTag$1 = '[object Date]',
    mapTag$2 = '[object Map]',
    numberTag$1 = '[object Number]',
    regexpTag$1 = '[object RegExp]',
    setTag$2 = '[object Set]',
    stringTag$1 = '[object String]',
    symbolTag$1 = '[object Symbol]';

var arrayBufferTag$1 = '[object ArrayBuffer]',
    dataViewTag$1 = '[object DataView]',
    float32Tag$1 = '[object Float32Array]',
    float64Tag$1 = '[object Float64Array]',
    int8Tag$1 = '[object Int8Array]',
    int16Tag$1 = '[object Int16Array]',
    int32Tag$1 = '[object Int32Array]',
    uint8Tag$1 = '[object Uint8Array]',
    uint8ClampedTag$1 = '[object Uint8ClampedArray]',
    uint16Tag$1 = '[object Uint16Array]',
    uint32Tag$1 = '[object Uint32Array]';

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag$1(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag$1:
      return cloneArrayBuffer(object);

    case boolTag$1:
    case dateTag$1:
      return new Ctor(+object);

    case dataViewTag$1:
      return cloneDataView(object, isDeep);

    case float32Tag$1: case float64Tag$1:
    case int8Tag$1: case int16Tag$1: case int32Tag$1:
    case uint8Tag$1: case uint8ClampedTag$1: case uint16Tag$1: case uint32Tag$1:
      return cloneTypedArray(object, isDeep);

    case mapTag$2:
      return new Ctor;

    case numberTag$1:
    case stringTag$1:
      return new Ctor(object);

    case regexpTag$1:
      return cloneRegExp(object);

    case setTag$2:
      return new Ctor;

    case symbolTag$1:
      return cloneSymbol(object);
  }
}

var _initCloneByTag = initCloneByTag$1;

var getTag$3 = _getTag,
    isObjectLike$3 = isObjectLike_1;

/** `Object#toString` result references. */
var mapTag$1 = '[object Map]';

/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */
function baseIsMap$1(value) {
  return isObjectLike$3(value) && getTag$3(value) == mapTag$1;
}

var _baseIsMap = baseIsMap$1;

var baseIsMap = _baseIsMap,
    baseUnary$1 = require_baseUnary(),
    nodeUtil$1 = _nodeUtil.exports;

/* Node.js helper references. */
var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;

/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */
var isMap$1 = nodeIsMap ? baseUnary$1(nodeIsMap) : baseIsMap;

var isMap_1 = isMap$1;

var getTag$2 = _getTag,
    isObjectLike$2 = isObjectLike_1;

/** `Object#toString` result references. */
var setTag$1 = '[object Set]';

/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */
function baseIsSet$1(value) {
  return isObjectLike$2(value) && getTag$2(value) == setTag$1;
}

var _baseIsSet = baseIsSet$1;

var baseIsSet = _baseIsSet,
    baseUnary = require_baseUnary(),
    nodeUtil = _nodeUtil.exports;

/* Node.js helper references. */
var nodeIsSet = nodeUtil && nodeUtil.isSet;

/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */
var isSet$1 = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

var isSet_1 = isSet$1;

var Stack = _Stack,
    arrayEach = _arrayEach,
    assignValue$1 = _assignValue,
    baseAssign = _baseAssign,
    baseAssignIn = _baseAssignIn,
    cloneBuffer = _cloneBuffer.exports,
    copyArray$1 = _copyArray,
    copySymbols = _copySymbols,
    copySymbolsIn = _copySymbolsIn,
    getAllKeys = _getAllKeys,
    getAllKeysIn = _getAllKeysIn,
    getTag$1 = _getTag,
    initCloneArray = _initCloneArray,
    initCloneByTag = _initCloneByTag,
    initCloneObject = _initCloneObject,
    isArray$1 = isArray_1,
    isBuffer = isBuffer$4.exports,
    isMap = isMap_1,
    isObject$1 = isObject_1,
    isSet = isSet_1,
    keys = keys_1,
    keysIn = keysIn_1;

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG$1 = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG$1 = 4;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag$1 = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag$1 = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
cloneableTags[boolTag] = cloneableTags[dateTag] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag] =
cloneableTags[numberTag] = cloneableTags[objectTag] =
cloneableTags[regexpTag] = cloneableTags[setTag] =
cloneableTags[stringTag] = cloneableTags[symbolTag] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag$1] = cloneableTags[funcTag] =
cloneableTags[weakMapTag$1] = false;

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone$2(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG$1,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG$1;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject$1(value)) {
    return value;
  }
  var isArr = isArray$1(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray$1(value, result);
    }
  } else {
    var tag = getTag$1(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      result = (isFlat || isFunc) ? {} : initCloneObject(value);
      if (!isDeep) {
        return isFlat
          ? copySymbolsIn(value, baseAssignIn(result, value))
          : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (isSet(value)) {
    value.forEach(function(subValue) {
      result.add(baseClone$2(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (isMap(value)) {
    value.forEach(function(subValue, key) {
      result.set(key, baseClone$2(subValue, bitmask, customizer, key, value, stack));
    });
  }

  var keysFunc = isFull
    ? (isFlat ? getAllKeysIn : getAllKeys)
    : (isFlat ? keysIn : keys);

  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue$1(result, key, baseClone$2(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

var _baseClone = baseClone$2;

var baseClone$1 = _baseClone;

/** Used to compose bitmasks for cloning. */
var CLONE_SYMBOLS_FLAG = 4;

/**
 * Creates a shallow clone of `value`.
 *
 * **Note:** This method is loosely based on the
 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
 * and supports cloning arrays, array buffers, booleans, date objects, maps,
 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
 * arrays. The own enumerable properties of `arguments` objects are cloned
 * as plain objects. An empty object is returned for uncloneable values such
 * as error objects, functions, DOM nodes, and WeakMaps.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to clone.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeep
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var shallow = _.clone(objects);
 * console.log(shallow[0] === objects[0]);
 * // => true
 */
function clone(value) {
  return baseClone$1(value, CLONE_SYMBOLS_FLAG);
}

var clone_1 = clone;

var createWrap$1 = _createWrap;

/** Used to compose bitmasks for function metadata. */
var WRAP_CURRY_FLAG = 8;

/**
 * Creates a function that accepts arguments of `func` and either invokes
 * `func` returning its result, if at least `arity` number of arguments have
 * been provided, or returns a function that accepts the remaining `func`
 * arguments, and so on. The arity of `func` may be specified if `func.length`
 * is not sufficient.
 *
 * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
 * may be used as a placeholder for provided arguments.
 *
 * **Note:** This method doesn't set the "length" property of curried functions.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Function
 * @param {Function} func The function to curry.
 * @param {number} [arity=func.length] The arity of `func`.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Function} Returns the new curried function.
 * @example
 *
 * var abc = function(a, b, c) {
 *   return [a, b, c];
 * };
 *
 * var curried = _.curry(abc);
 *
 * curried(1)(2)(3);
 * // => [1, 2, 3]
 *
 * curried(1, 2)(3);
 * // => [1, 2, 3]
 *
 * curried(1, 2, 3);
 * // => [1, 2, 3]
 *
 * // Curried with placeholders.
 * curried(1)(_, 3)(2);
 * // => [1, 2, 3]
 */
function curry(func, arity, guard) {
  arity = guard ? undefined : arity;
  var result = createWrap$1(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
  result.placeholder = curry.placeholder;
  return result;
}

// Assign default placeholders.
curry.placeholder = {};

var curry_1 = curry;

var baseGetTag = _baseGetTag,
    isObjectLike$1 = isObjectLike_1,
    isPlainObject = isPlainObject_1;

/** `Object#toString` result references. */
var domExcTag = '[object DOMException]',
    errorTag = '[object Error]';

/**
 * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
 * `SyntaxError`, `TypeError`, or `URIError` object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
 * @example
 *
 * _.isError(new Error);
 * // => true
 *
 * _.isError(Error);
 * // => false
 */
function isError(value) {
  if (!isObjectLike$1(value)) {
    return false;
  }
  var tag = baseGetTag(value);
  return tag == errorTag || tag == domExcTag ||
    (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
}

var isError_1 = isError;

var getTag = _getTag,
    isObjectLike = isObjectLike_1;

/** `Object#toString` result references. */
var weakMapTag = '[object WeakMap]';

/**
 * Checks if `value` is classified as a `WeakMap` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
 * @example
 *
 * _.isWeakMap(new WeakMap);
 * // => true
 *
 * _.isWeakMap(new Map);
 * // => false
 */
function isWeakMap(value) {
  return isObjectLike(value) && getTag(value) == weakMapTag;
}

var isWeakMap_1 = isWeakMap;

var baseClone = _baseClone,
    baseIteratee$1 = _baseIteratee;

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1;

/**
 * Creates a function that invokes `func` with the arguments of the created
 * function. If `func` is a property name, the created function returns the
 * property value for a given element. If `func` is an array or object, the
 * created function returns `true` for elements that contain the equivalent
 * source properties, otherwise it returns `false`.
 *
 * @static
 * @since 4.0.0
 * @memberOf _
 * @category Util
 * @param {*} [func=_.identity] The value to convert to a callback.
 * @returns {Function} Returns the callback.
 * @example
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': true },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
 * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.filter(users, _.iteratee(['user', 'fred']));
 * // => [{ 'user': 'fred', 'age': 40 }]
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, _.iteratee('user'));
 * // => ['barney', 'fred']
 *
 * // Create custom iteratee shorthands.
 * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
 *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
 *     return func.test(string);
 *   };
 * });
 *
 * _.filter(['abc', 'def'], /ef/);
 * // => ['def']
 */
function iteratee(func) {
  return baseIteratee$1(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
}

var iteratee_1 = iteratee;

var _isFlattenable;
var hasRequired_isFlattenable;

function require_isFlattenable () {
	if (hasRequired_isFlattenable) return _isFlattenable;
	hasRequired_isFlattenable = 1;
	var Symbol = require_Symbol(),
	    isArguments = isArguments_1,
	    isArray = isArray_1;

	/** Built-in value references. */
	var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

	/**
	 * Checks if `value` is a flattenable `arguments` object or array.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	 */
	function isFlattenable(value) {
	  return isArray(value) || isArguments(value) ||
	    !!(spreadableSymbol && value && value[spreadableSymbol]);
	}

	_isFlattenable = isFlattenable;
	return _isFlattenable;
}

var _baseFlatten;
var hasRequired_baseFlatten;

function require_baseFlatten () {
	if (hasRequired_baseFlatten) return _baseFlatten;
	hasRequired_baseFlatten = 1;
	var arrayPush = require_arrayPush(),
	    isFlattenable = require_isFlattenable();

	/**
	 * The base implementation of `_.flatten` with support for restricting flattening.
	 *
	 * @private
	 * @param {Array} array The array to flatten.
	 * @param {number} depth The maximum recursion depth.
	 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	 * @param {Array} [result=[]] The initial result value.
	 * @returns {Array} Returns the new flattened array.
	 */
	function baseFlatten(array, depth, predicate, isStrict, result) {
	  var index = -1,
	      length = array.length;

	  predicate || (predicate = isFlattenable);
	  result || (result = []);

	  while (++index < length) {
	    var value = array[index];
	    if (depth > 0 && predicate(value)) {
	      if (depth > 1) {
	        // Recursively flatten arrays (susceptible to call stack limits).
	        baseFlatten(value, depth - 1, predicate, isStrict, result);
	      } else {
	        arrayPush(result, value);
	      }
	    } else if (!isStrict) {
	      result[result.length] = value;
	    }
	  }
	  return result;
	}

	_baseFlatten = baseFlatten;
	return _baseFlatten;
}

var flatten_1;
var hasRequiredFlatten;

function requireFlatten () {
	if (hasRequiredFlatten) return flatten_1;
	hasRequiredFlatten = 1;
	var baseFlatten = require_baseFlatten();

	/**
	 * Flattens `array` a single level deep.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to flatten.
	 * @returns {Array} Returns the new flattened array.
	 * @example
	 *
	 * _.flatten([1, [2, [3, [4]], 5]]);
	 * // => [1, 2, [3, [4]], 5]
	 */
	function flatten(array) {
	  var length = array == null ? 0 : array.length;
	  return length ? baseFlatten(array, 1) : [];
	}

	flatten_1 = flatten;
	return flatten_1;
}

var _flatRest;
var hasRequired_flatRest;

function require_flatRest () {
	if (hasRequired_flatRest) return _flatRest;
	hasRequired_flatRest = 1;
	var flatten = requireFlatten(),
	    overRest = _overRest,
	    setToString = _setToString;

	/**
	 * A specialized version of `baseRest` which flattens the rest array.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @returns {Function} Returns the new function.
	 */
	function flatRest(func) {
	  return setToString(overRest(func, undefined, flatten), func + '');
	}

	_flatRest = flatRest;
	return _flatRest;
}

var createWrap = _createWrap,
    flatRest = require_flatRest();

/** Used to compose bitmasks for function metadata. */
var WRAP_REARG_FLAG = 256;

/**
 * Creates a function that invokes `func` with arguments arranged according
 * to the specified `indexes` where the argument value at the first index is
 * provided as the first argument, the argument value at the second index is
 * provided as the second argument, and so on.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} func The function to rearrange arguments for.
 * @param {...(number|number[])} indexes The arranged argument indexes.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var rearged = _.rearg(function(a, b, c) {
 *   return [a, b, c];
 * }, [2, 0, 1]);
 *
 * rearged('b', 'c', 'a')
 * // => ['a', 'b', 'c']
 */
var rearg = flatRest(function(func, indexes) {
  return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
});

var rearg_1 = rearg;

var arrayMap = require_arrayMap(),
    copyArray = _copyArray,
    isArray = isArray_1,
    isSymbol = isSymbol_1,
    stringToPath = _stringToPath,
    toKey$1 = _toKey,
    toString = toString_1;

/**
 * Converts `value` to a property path array.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Util
 * @param {*} value The value to convert.
 * @returns {Array} Returns the new property path array.
 * @example
 *
 * _.toPath('a.b.c');
 * // => ['a', 'b', 'c']
 *
 * _.toPath('a[0].b.c');
 * // => ['a', '0', 'b', 'c']
 */
function toPath(value) {
  if (isArray(value)) {
    return arrayMap(value, toKey$1);
  }
  return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
}

var toPath_1 = toPath;

var _util = {
  'ary': ary_1,
  'assign': _baseAssign,
  'clone': clone_1,
  'curry': curry_1,
  'forEach': _arrayEach,
  'isArray': isArray_1,
  'isError': isError_1,
  'isFunction': isFunction_1,
  'isWeakMap': isWeakMap_1,
  'iteratee': iteratee_1,
  'keys': _baseKeys,
  'rearg': rearg_1,
  'toInteger': toInteger_1,
  'toPath': toPath_1
};

var baseConvert = _baseConvert,
    util = _util;

/**
 * Converts `func` of `name` to an immutable auto-curried iteratee-first data-last
 * version with conversion `options` applied. If `name` is an object its methods
 * will be converted.
 *
 * @param {string} name The name of the function to wrap.
 * @param {Function} [func] The function to wrap.
 * @param {Object} [options] The options object. See `baseConvert` for more details.
 * @returns {Function|Object} Returns the converted function or object.
 */
function convert$4(name, func, options) {
  return baseConvert(util, name, func, options);
}

var convert_1 = convert$4;

/**
 * Creates an array with all falsey values removed. The values `false`, `null`,
 * `0`, `""`, `undefined`, and `NaN` are falsey.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to compact.
 * @returns {Array} Returns the new array of filtered values.
 * @example
 *
 * _.compact([0, 1, false, 2, '', 3]);
 * // => [1, 2, 3]
 */

var compact_1;
var hasRequiredCompact;

function requireCompact () {
	if (hasRequiredCompact) return compact_1;
	hasRequiredCompact = 1;
	function compact(array) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      resIndex = 0,
	      result = [];

	  while (++index < length) {
	    var value = array[index];
	    if (value) {
	      result[resIndex++] = value;
	    }
	  }
	  return result;
	}

	compact_1 = compact;
	return compact_1;
}

var _falseOptions;
var hasRequired_falseOptions;

function require_falseOptions () {
	if (hasRequired_falseOptions) return _falseOptions;
	hasRequired_falseOptions = 1;
	_falseOptions = {
	  'cap': false,
	  'curry': false,
	  'fixed': false,
	  'immutable': false,
	  'rearg': false
	};
	return _falseOptions;
}

var convert$3 = convert_1,
    func$3 = convert$3('compact', requireCompact(), require_falseOptions());

func$3.placeholder = requirePlaceholder();
var compact = func$3;

var _createFlow;
var hasRequired_createFlow;

function require_createFlow () {
	if (hasRequired_createFlow) return _createFlow;
	hasRequired_createFlow = 1;
	var LodashWrapper = require_LodashWrapper(),
	    flatRest = require_flatRest(),
	    getData = require_getData(),
	    getFuncName = require_getFuncName(),
	    isArray = isArray_1,
	    isLaziable = require_isLaziable();

	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/** Used to compose bitmasks for function metadata. */
	var WRAP_CURRY_FLAG = 8,
	    WRAP_PARTIAL_FLAG = 32,
	    WRAP_ARY_FLAG = 128,
	    WRAP_REARG_FLAG = 256;

	/**
	 * Creates a `_.flow` or `_.flowRight` function.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new flow function.
	 */
	function createFlow(fromRight) {
	  return flatRest(function(funcs) {
	    var length = funcs.length,
	        index = length,
	        prereq = LodashWrapper.prototype.thru;

	    if (fromRight) {
	      funcs.reverse();
	    }
	    while (index--) {
	      var func = funcs[index];
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
	        var wrapper = new LodashWrapper([], true);
	      }
	    }
	    index = wrapper ? index : length;
	    while (++index < length) {
	      func = funcs[index];

	      var funcName = getFuncName(func),
	          data = funcName == 'wrapper' ? getData(func) : undefined;

	      if (data && isLaziable(data[0]) &&
	            data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
	            !data[4].length && data[9] == 1
	          ) {
	        wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	      } else {
	        wrapper = (func.length == 1 && isLaziable(func))
	          ? wrapper[funcName]()
	          : wrapper.thru(func);
	      }
	    }
	    return function() {
	      var args = arguments,
	          value = args[0];

	      if (wrapper && args.length == 1 && isArray(value)) {
	        return wrapper.plant(value).value();
	      }
	      var index = 0,
	          result = length ? funcs[index].apply(this, args) : value;

	      while (++index < length) {
	        result = funcs[index].call(this, result);
	      }
	      return result;
	    };
	  });
	}

	_createFlow = createFlow;
	return _createFlow;
}

var flow_1;
var hasRequiredFlow;

function requireFlow () {
	if (hasRequiredFlow) return flow_1;
	hasRequiredFlow = 1;
	var createFlow = require_createFlow();

	/**
	 * Creates a function that returns the result of invoking the given functions
	 * with the `this` binding of the created function, where each successive
	 * invocation is supplied the return value of the previous.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Util
	 * @param {...(Function|Function[])} [funcs] The functions to invoke.
	 * @returns {Function} Returns the new composite function.
	 * @see _.flowRight
	 * @example
	 *
	 * function square(n) {
	 *   return n * n;
	 * }
	 *
	 * var addSquare = _.flow([_.add, square]);
	 * addSquare(1, 2);
	 * // => 9
	 */
	var flow = createFlow();

	flow_1 = flow;
	return flow_1;
}

var convert$2 = convert_1,
    func$2 = convert$2('flow', requireFlow());

func$2.placeholder = requirePlaceholder();
var flow = func$2;

var _baseMap;
var hasRequired_baseMap;

function require_baseMap () {
	if (hasRequired_baseMap) return _baseMap;
	hasRequired_baseMap = 1;
	var baseEach = _baseEach,
	    isArrayLike = isArrayLike_1;

	/**
	 * The base implementation of `_.map` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function baseMap(collection, iteratee) {
	  var index = -1,
	      result = isArrayLike(collection) ? Array(collection.length) : [];

	  baseEach(collection, function(value, key, collection) {
	    result[++index] = iteratee(value, key, collection);
	  });
	  return result;
	}

	_baseMap = baseMap;
	return _baseMap;
}

/**
 * The base implementation of `_.sortBy` which uses `comparer` to define the
 * sort order of `array` and replaces criteria objects with their corresponding
 * values.
 *
 * @private
 * @param {Array} array The array to sort.
 * @param {Function} comparer The function to define sort order.
 * @returns {Array} Returns `array`.
 */

var _baseSortBy;
var hasRequired_baseSortBy;

function require_baseSortBy () {
	if (hasRequired_baseSortBy) return _baseSortBy;
	hasRequired_baseSortBy = 1;
	function baseSortBy(array, comparer) {
	  var length = array.length;

	  array.sort(comparer);
	  while (length--) {
	    array[length] = array[length].value;
	  }
	  return array;
	}

	_baseSortBy = baseSortBy;
	return _baseSortBy;
}

var _compareAscending;
var hasRequired_compareAscending;

function require_compareAscending () {
	if (hasRequired_compareAscending) return _compareAscending;
	hasRequired_compareAscending = 1;
	var isSymbol = isSymbol_1;

	/**
	 * Compares values to sort them in ascending order.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {number} Returns the sort order indicator for `value`.
	 */
	function compareAscending(value, other) {
	  if (value !== other) {
	    var valIsDefined = value !== undefined,
	        valIsNull = value === null,
	        valIsReflexive = value === value,
	        valIsSymbol = isSymbol(value);

	    var othIsDefined = other !== undefined,
	        othIsNull = other === null,
	        othIsReflexive = other === other,
	        othIsSymbol = isSymbol(other);

	    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
	        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
	        (valIsNull && othIsDefined && othIsReflexive) ||
	        (!valIsDefined && othIsReflexive) ||
	        !valIsReflexive) {
	      return 1;
	    }
	    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
	        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
	        (othIsNull && valIsDefined && valIsReflexive) ||
	        (!othIsDefined && valIsReflexive) ||
	        !othIsReflexive) {
	      return -1;
	    }
	  }
	  return 0;
	}

	_compareAscending = compareAscending;
	return _compareAscending;
}

var _compareMultiple;
var hasRequired_compareMultiple;

function require_compareMultiple () {
	if (hasRequired_compareMultiple) return _compareMultiple;
	hasRequired_compareMultiple = 1;
	var compareAscending = require_compareAscending();

	/**
	 * Used by `_.orderBy` to compare multiple properties of a value to another
	 * and stable sort them.
	 *
	 * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
	 * specify an order of "desc" for descending or "asc" for ascending sort order
	 * of corresponding values.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {boolean[]|string[]} orders The order to sort by for each property.
	 * @returns {number} Returns the sort order indicator for `object`.
	 */
	function compareMultiple(object, other, orders) {
	  var index = -1,
	      objCriteria = object.criteria,
	      othCriteria = other.criteria,
	      length = objCriteria.length,
	      ordersLength = orders.length;

	  while (++index < length) {
	    var result = compareAscending(objCriteria[index], othCriteria[index]);
	    if (result) {
	      if (index >= ordersLength) {
	        return result;
	      }
	      var order = orders[index];
	      return result * (order == 'desc' ? -1 : 1);
	    }
	  }
	  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	  // that causes it, under certain circumstances, to provide the same value for
	  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	  // for more details.
	  //
	  // This also ensures a stable sort in V8 and other engines.
	  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
	  return object.index - other.index;
	}

	_compareMultiple = compareMultiple;
	return _compareMultiple;
}

var _baseOrderBy;
var hasRequired_baseOrderBy;

function require_baseOrderBy () {
	if (hasRequired_baseOrderBy) return _baseOrderBy;
	hasRequired_baseOrderBy = 1;
	var arrayMap = require_arrayMap(),
	    baseGet = require_baseGet(),
	    baseIteratee = _baseIteratee,
	    baseMap = require_baseMap(),
	    baseSortBy = require_baseSortBy(),
	    baseUnary = require_baseUnary(),
	    compareMultiple = require_compareMultiple(),
	    identity = identity_1,
	    isArray = isArray_1;

	/**
	 * The base implementation of `_.orderBy` without param guards.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	 * @param {string[]} orders The sort orders of `iteratees`.
	 * @returns {Array} Returns the new sorted array.
	 */
	function baseOrderBy(collection, iteratees, orders) {
	  if (iteratees.length) {
	    iteratees = arrayMap(iteratees, function(iteratee) {
	      if (isArray(iteratee)) {
	        return function(value) {
	          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
	        }
	      }
	      return iteratee;
	    });
	  } else {
	    iteratees = [identity];
	  }

	  var index = -1;
	  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));

	  var result = baseMap(collection, function(value, key, collection) {
	    var criteria = arrayMap(iteratees, function(iteratee) {
	      return iteratee(value);
	    });
	    return { 'criteria': criteria, 'index': ++index, 'value': value };
	  });

	  return baseSortBy(result, function(object, other) {
	    return compareMultiple(object, other, orders);
	  });
	}

	_baseOrderBy = baseOrderBy;
	return _baseOrderBy;
}

var sortBy_1;
var hasRequiredSortBy;

function requireSortBy () {
	if (hasRequiredSortBy) return sortBy_1;
	hasRequiredSortBy = 1;
	var baseFlatten = require_baseFlatten(),
	    baseOrderBy = require_baseOrderBy(),
	    baseRest = _baseRest,
	    isIterateeCall = _isIterateeCall;

	/**
	 * Creates an array of elements, sorted in ascending order by the results of
	 * running each element in a collection thru each iteratee. This method
	 * performs a stable sort, that is, it preserves the original sort order of
	 * equal elements. The iteratees are invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {...(Function|Function[])} [iteratees=[_.identity]]
	 *  The iteratees to sort by.
	 * @returns {Array} Returns the new sorted array.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'fred',   'age': 48 },
	 *   { 'user': 'barney', 'age': 36 },
	 *   { 'user': 'fred',   'age': 30 },
	 *   { 'user': 'barney', 'age': 34 }
	 * ];
	 *
	 * _.sortBy(users, [function(o) { return o.user; }]);
	 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
	 *
	 * _.sortBy(users, ['user', 'age']);
	 * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
	 */
	var sortBy = baseRest(function(collection, iteratees) {
	  if (collection == null) {
	    return [];
	  }
	  var length = iteratees.length;
	  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
	    iteratees = [];
	  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
	    iteratees = [iteratees[0]];
	  }
	  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
	});

	sortBy_1 = sortBy;
	return sortBy_1;
}

var convert$1 = convert_1,
    func$1 = convert$1('sortBy', requireSortBy());

func$1.placeholder = requirePlaceholder();
var sortBy = func$1;

/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */

var _arrayIncludesWith;
var hasRequired_arrayIncludesWith;

function require_arrayIncludesWith () {
	if (hasRequired_arrayIncludesWith) return _arrayIncludesWith;
	hasRequired_arrayIncludesWith = 1;
	function arrayIncludesWith(array, value, comparator) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (comparator(value, array[index])) {
	      return true;
	    }
	  }
	  return false;
	}

	_arrayIncludesWith = arrayIncludesWith;
	return _arrayIncludesWith;
}

var _createSet;
var hasRequired_createSet;

function require_createSet () {
	if (hasRequired_createSet) return _createSet;
	hasRequired_createSet = 1;
	var Set = require_Set(),
	    noop = requireNoop(),
	    setToArray = require_setToArray();

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/**
	 * Creates a set object of `values`.
	 *
	 * @private
	 * @param {Array} values The values to add to the set.
	 * @returns {Object} Returns the new set.
	 */
	var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
	  return new Set(values);
	};

	_createSet = createSet;
	return _createSet;
}

var _baseUniq;
var hasRequired_baseUniq;

function require_baseUniq () {
	if (hasRequired_baseUniq) return _baseUniq;
	hasRequired_baseUniq = 1;
	var SetCache = require_SetCache(),
	    arrayIncludes = require_arrayIncludes(),
	    arrayIncludesWith = require_arrayIncludesWith(),
	    cacheHas = require_cacheHas(),
	    createSet = require_createSet(),
	    setToArray = require_setToArray();

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} [iteratee] The iteratee invoked per element.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns the new duplicate free array.
	 */
	function baseUniq(array, iteratee, comparator) {
	  var index = -1,
	      includes = arrayIncludes,
	      length = array.length,
	      isCommon = true,
	      result = [],
	      seen = result;

	  if (comparator) {
	    isCommon = false;
	    includes = arrayIncludesWith;
	  }
	  else if (length >= LARGE_ARRAY_SIZE) {
	    var set = iteratee ? null : createSet(array);
	    if (set) {
	      return setToArray(set);
	    }
	    isCommon = false;
	    includes = cacheHas;
	    seen = new SetCache;
	  }
	  else {
	    seen = iteratee ? [] : result;
	  }
	  outer:
	  while (++index < length) {
	    var value = array[index],
	        computed = iteratee ? iteratee(value) : value;

	    value = (comparator || value !== 0) ? value : 0;
	    if (isCommon && computed === computed) {
	      var seenIndex = seen.length;
	      while (seenIndex--) {
	        if (seen[seenIndex] === computed) {
	          continue outer;
	        }
	      }
	      if (iteratee) {
	        seen.push(computed);
	      }
	      result.push(value);
	    }
	    else if (!includes(seen, computed, comparator)) {
	      if (seen !== result) {
	        seen.push(computed);
	      }
	      result.push(value);
	    }
	  }
	  return result;
	}

	_baseUniq = baseUniq;
	return _baseUniq;
}

var uniqBy_1;
var hasRequiredUniqBy;

function requireUniqBy () {
	if (hasRequiredUniqBy) return uniqBy_1;
	hasRequiredUniqBy = 1;
	var baseIteratee = _baseIteratee,
	    baseUniq = require_baseUniq();

	/**
	 * This method is like `_.uniq` except that it accepts `iteratee` which is
	 * invoked for each element in `array` to generate the criterion by which
	 * uniqueness is computed. The order of result values is determined by the
	 * order they occur in the array. The iteratee is invoked with one argument:
	 * (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	 * @returns {Array} Returns the new duplicate free array.
	 * @example
	 *
	 * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
	 * // => [2.1, 1.2]
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	 * // => [{ 'x': 1 }, { 'x': 2 }]
	 */
	function uniqBy(array, iteratee) {
	  return (array && array.length) ? baseUniq(array, baseIteratee(iteratee)) : [];
	}

	uniqBy_1 = uniqBy;
	return uniqBy_1;
}

var convert = convert_1,
    func = convert('uniqBy', requireUniqBy());

func.placeholder = requirePlaceholder();
var uniqBy = func;

var baseAssignValue = _baseAssignValue,
    baseForOwn = _baseForOwn,
    baseIteratee = _baseIteratee;

/**
 * The opposite of `_.mapValues`; this method creates an object with the
 * same values as `object` and keys generated by running each own enumerable
 * string keyed property of `object` thru `iteratee`. The iteratee is invoked
 * with three arguments: (value, key, object).
 *
 * @static
 * @memberOf _
 * @since 3.8.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @see _.mapValues
 * @example
 *
 * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
 *   return key + value;
 * });
 * // => { 'a1': 1, 'b2': 2 }
 */
function mapKeys(object, iteratee) {
  var result = {};
  iteratee = baseIteratee(iteratee);

  baseForOwn(object, function(value, key, object) {
    baseAssignValue(result, iteratee(value, key, object), value);
  });
  return result;
}

var mapKeys_1 = mapKeys;

var selectors$k = {
	editsAndActivity: {
		"c2pa.color_adjustments": {
			description: "Byly upraveny vlastnosti, jako je tón, sytost, křivky, stíny nebo světla",
			label: "Úpravy barev nebo expozice"
		},
		"c2pa.created": {
			description: "Byl vytvořen nový soubor nebo obsah",
			label: "Vytvořeno"
		},
		"c2pa.cropped": {
			description: "Byly použity nástroje pro oříznutí, zmenšení nebo rozšíření viditelné oblasti obsahu",
			label: "Úpravy oříznutí"
		},
		"c2pa.drawing": {
			description: "Byly použity nástroje, jako jsou tužky, štětce, gumy nebo nástroje tvar, cesta nebo pero",
			label: "Úpravy kresby"
		},
		"c2pa.edited": {
			description: "Byly provedeny další změny",
			label: "Další úpravy"
		},
		"c2pa.filtered": {
			description: "Byly použity nástroje, jako jsou filtry, styly nebo efekty, ke změně vzhledu",
			label: "Úpravy filtrů nebo stylů"
		},
		"c2pa.opened": {
			description: "Byl otevřen existující soubor",
			label: "Otevřeno"
		},
		"c2pa.orientation": {
			description: "Byla změněna poloha nebo orientace (otočení, převrácení atd.)",
			label: "Orientace úpravy"
		},
		"c2pa.placed": {
			description: "Do tohoto souboru byl přidán existující obsah",
			label: "Importováno"
		},
		"c2pa.resized": {
			description: "Byly změněny rozměry nebo velikost souboru",
			label: "Změny velikosti"
		},
		"c2pa.unknown": {
			description: "Byly provedeny další úpravy nebo aktivita, kterou nebylo možné rozpoznat",
			label: "Neznámé úpravy nebo aktivita"
		}
	}
};
var csCZ = {
	selectors: selectors$k
};

var selectors$j = {
	editsAndActivity: {
		"c2pa.color_adjustments": {
			description: "Justerede egenskaber såsom tone, mætning, kurver, skygger eller fremhævninger",
			label: "Farve- eller eksponeringsredigeringer"
		},
		"c2pa.created": {
			description: "Oprettede en ny fil eller nyt indhold",
			label: "Oprettede"
		},
		"c2pa.cropped": {
			description: "Brugte beskæringsværktøjer til at reducere eller udvide synligt indholdsområde",
			label: "Beskæring af redigeringer"
		},
		"c2pa.drawing": {
			description: "Brugte værktøjer såsom blyanter, pensler, viskelædere eller form-, sti- eller penneværktøjer",
			label: "Tegneredigeringer"
		},
		"c2pa.edited": {
			description: "Foretog andre ændringer",
			label: "Andre redigeringer"
		},
		"c2pa.filtered": {
			description: "Brugte værktøjer såsom filtre, formater eller effekter til at ændre udseende",
			label: "Filter- eller formatredigeringer"
		},
		"c2pa.opened": {
			description: "Åbnede en allerede eksisterende fil",
			label: "Åbnede"
		},
		"c2pa.orientation": {
			description: "Ændrede placering eller retning (roteret, vendt osv.)",
			label: "Retning redigeringer"
		},
		"c2pa.placed": {
			description: "Føjede allerede eksisterende indhold til denne fil",
			label: "Importerede"
		},
		"c2pa.resized": {
			description: "Ændrede dimensioner eller filstørrelse",
			label: "Ændring af størrelse på redigeringer"
		},
		"c2pa.unknown": {
			description: "Foretog andre redigeringer eller aktiviteter, der ikke kunne genkendes",
			label: "Ukendte redigeringer eller ukendt aktivitet"
		}
	}
};
var daDK = {
	selectors: selectors$j
};

var selectors$i = {
	editsAndActivity: {
		"c2pa.color_adjustments": {
			description: "Angepasste Eigenschaften wie Farbton, Sättigung, Kurven, Schatten oder Glanzlichter",
			label: "Änderung von Farbe oder Belichtung"
		},
		"c2pa.created": {
			description: "Neue Datei oder neuen Inhalt erstellt",
			label: "Erstellt"
		},
		"c2pa.cropped": {
			description: "Verwendete Zuschneidewerkzeuge, Verkleinerung oder Erweiterung des sichtbaren Inhaltsbereichs",
			label: "Zuschneiden von Änderungen"
		},
		"c2pa.drawing": {
			description: "Verwendete Werkzeuge wie Stifte, Pinsel, Radierer oder Form-, Pfad- oder Zeichenstift-Werkzeuge",
			label: "Zeichnungsänderungen"
		},
		"c2pa.edited": {
			description: "Vorgenommene sonstige Änderungen",
			label: "Sonstige Änderungen"
		},
		"c2pa.filtered": {
			description: "Verwendete Tools wie Filter, Stile, Formate oder Effekte, die das Erscheinungsbild ändern",
			label: "Änderungen filtern oder gestalten"
		},
		"c2pa.opened": {
			description: "Vorhandene Datei geöffnet",
			label: "Geöffnet"
		},
		"c2pa.orientation": {
			description: "Position oder Ausrichtung geändert (gedreht, gespiegelt usw.)",
			label: "Ausrichtung Änderungen"
		},
		"c2pa.placed": {
			description: "Vorhandenen Inhalt zu dieser Datei hinzugefügt",
			label: "Importiert"
		},
		"c2pa.resized": {
			description: "Geänderte Abmessungen oder Dateigröße",
			label: "Größenänderungen"
		},
		"c2pa.unknown": {
			description: "Andere Änderungen oder Aktivitäten durchgeführt, die nicht erkannt werden konnten",
			label: "Unbekannte Änderungen oder Aktivitäten"
		}
	}
};
var deDE = {
	selectors: selectors$i
};

var selectors$h = {
	editsAndActivity: {
		"c2pa.color_adjustments": {
			description: "Adjusted properties like tone, saturation, curves, shadows, or highlights",
			label: "Color or exposure edits"
		},
		"c2pa.converted": {
			description: "The format of the asset was changed",
			label: "Converted asset"
		},
		"c2pa.created": {
			description: "Created a new file or content",
			label: "Created"
		},
		"c2pa.cropped": {
			description: "Used cropping tools, reducing or expanding visible content area",
			label: "Cropping edits"
		},
		"c2pa.drawing": {
			description: "Used tools like pencils, brushes, erasers, or shape, path, or pen tools",
			label: "Drawing edits"
		},
		"c2pa.edited": {
			description: "Made other changes",
			label: "Other edits"
		},
		"c2pa.filtered": {
			description: "Used tools like filters, styles, or effects to change appearance",
			label: "Filter or style edits"
		},
		"c2pa.opened": {
			description: "Opened a pre-existing file",
			label: "Opened"
		},
		"c2pa.orientation": {
			description: "Changed position or orientation (rotated, flipped, etc.)",
			label: "Orientation edits"
		},
		"c2pa.placed": {
			description: "Added pre-existing content to this file",
			label: "Imported"
		},
		"c2pa.published": {
			description: "Received and distributed image",
			label: "Published image"
		},
		"c2pa.removed": {
			description: "One or more assets were removed from the file",
			label: "Asset removed"
		},
		"c2pa.repackaged": {
			description: "Asset was repackaged without being processed",
			label: "Repackaged asset"
		},
		"c2pa.resized": {
			description: "Changed dimensions or file size",
			label: "Resizing edits"
		},
		"c2pa.transcoded": {
			description: "Processed or compressed an asset to optimize for display",
			label: "Processed asset"
		},
		"c2pa.unknown": {
			description: "Performed other edits or activity that couldn't be recognized",
			label: "Unknown edits or activity"
		}
	}
};
var enUS = {
	selectors: selectors$h
};

var selectors$g = {
	editsAndActivity: {
		"c2pa.color_adjustments": {
			description: "Se han ajustado propiedades como el tono, la saturación, las curvas, las sombras o las luces",
			label: "Ediciones de color o exposición"
		},
		"c2pa.created": {
			description: "Se ha creado un nuevo archivo o contenido",
			label: "Fecha de creación"
		},
		"c2pa.cropped": {
			description: "Se han usado herramientas de recorte, lo que reduce o expande el área de contenido visible",
			label: "Ediciones de recorte"
		},
		"c2pa.drawing": {
			description: "Se han usado herramientas como lápices, pinceles, borradores o herramientas de formas, trazados o bolígrafos",
			label: "Ediciones de dibujo"
		},
		"c2pa.edited": {
			description: "Se han hecho otros cambios",
			label: "Otras ediciones"
		},
		"c2pa.filtered": {
			description: "Se han usado herramientas como filtros, estilos o efectos para cambiar la apariencia",
			label: "Ediciones de filtro o estilo"
		},
		"c2pa.opened": {
			description: "Se ha abierto un archivo preexistente",
			label: "Abierto"
		},
		"c2pa.orientation": {
			description: "Se ha cambiado la posición u orientación (girado, volteado, etc.)",
			label: "Ediciones de orientación"
		},
		"c2pa.placed": {
			description: "Se ha añadido contenido preexistente a este archivo",
			label: "Importado"
		},
		"c2pa.resized": {
			description: "Se han modificado las dimensiones o el tamaño del archivo",
			label: "Ediciones de cambio de tamaño"
		},
		"c2pa.unknown": {
			description: "Se han realizado otras ediciones o actividades que no se han podido reconocer",
			label: "Ediciones o actividad desconocidas"
		}
	}
};
var esES = {
	selectors: selectors$g
};

var selectors$f = {
	editsAndActivity: {
		"c2pa.color_adjustments": {
			description: "Säädetty ominaisuuksia, kuten sävyä, kylläisyyttä, käyriä, varjoja tai kohokohtia",
			label: "Väreihin tai valotukseen liittyvät muokkaukset"
		},
		"c2pa.created": {
			description: "Luotu uusi tiedosto tai uutta sisältöä",
			label: "Luotu"
		},
		"c2pa.cropped": {
			description: "Käytetty rajaustyökaluja, vähennetty tai laajennettu näkyvää sisältöaluetta",
			label: "Rajaukseen liittyvät muokkaukset"
		},
		"c2pa.drawing": {
			description: "Käytetty työkaluja, kuten kyniä, siveltimiä, pyyhekumeja tai muoto-, reitti- tai kynätyökaluja",
			label: "Piirtämiseen liittyvät muokkaukset"
		},
		"c2pa.edited": {
			description: "Tehty muita muutoksia",
			label: "Muut muokkaukset"
		},
		"c2pa.filtered": {
			description: "Käytetty työkaluja, kuten ulkoasun muuttamiseen tarkoitettuja suodattimia, tyylejä tai tehosteita",
			label: "Suodattimeen tai tyyliin liittyvät muokkaukset"
		},
		"c2pa.opened": {
			description: "Avattu olemassa oleva tiedosto",
			label: "Avattu"
		},
		"c2pa.orientation": {
			description: "Muutettu paikkaa tai suuntaa (kierretty, käännetty jne.)",
			label: "Suuntaan liittyvät muokkaukset"
		},
		"c2pa.placed": {
			description: "Lisätty olemassa olevaa sisältöä tähän tiedostoon",
			label: "Tuotu"
		},
		"c2pa.resized": {
			description: "Muutettu mittasuhteita tai tiedostokokoa",
			label: "Koon muuttamiseen liittyvät muokkaukset"
		},
		"c2pa.unknown": {
			description: "Suoritettu muita muokkauksia tai toimintoja, joita ei tunnistettu",
			label: "Tuntemattomat muokkaukset tai tuntematon toiminta"
		}
	}
};
var fiFI = {
	selectors: selectors$f
};

var selectors$e = {
	editsAndActivity: {
		"c2pa.color_adjustments": {
			description: "Ajustement des propriétés, comme la tonalité, la saturation, les courbes, les ombres ou les tons clairs",
			label: "Modifications de la couleur ou de l’exposition"
		},
		"c2pa.created": {
			description: "Création d’un nouveau fichier ou contenu",
			label: "Créé"
		},
		"c2pa.cropped": {
			description: "Utilisation d’outils de recadrage, réduisant ou élargissant la zone de contenu visible",
			label: "Modifications de recadrage"
		},
		"c2pa.drawing": {
			description: "Utilisation d’outils, comme des crayons, des pinceaux, des gommes ou des outils de forme, de tracé ou de plume",
			label: "Modifications du dessin"
		},
		"c2pa.edited": {
			description: "Réalisation d’autres modifications",
			label: "Autres modifications"
		},
		"c2pa.filtered": {
			description: "Utilisation d’outils tels que des filtres, des styles ou des effets pour modifier l’apparence",
			label: "Modifications du filtre ou du style"
		},
		"c2pa.opened": {
			description: "Ouverture d’un fichier préexistant",
			label: "Ouvert"
		},
		"c2pa.orientation": {
			description: "Changement de position ou d’orientation (rotation, renversement, etc.)",
			label: "Orientation Modifications de "
		},
		"c2pa.placed": {
			description: "Ajout du contenu préexistant à ce fichier",
			label: "Importé"
		},
		"c2pa.resized": {
			description: "Modification des dimensions ou de la taille du fichier",
			label: "Modifications du redimensionnement"
		},
		"c2pa.unknown": {
			description: "Réalisation d’autres modifications ou activités qui n’ont pas pu être reconnues",
			label: "Modifications ou activité inconnues"
		}
	}
};
var frFR = {
	selectors: selectors$e
};

var selectors$d = {
	editsAndActivity: {
		"c2pa.color_adjustments": {
			description: "Beállított olyan tulajdonságokat mint árnyalat, telítettség, görbék, árnyékok vagy csúcsfények",
			label: "Szín vagy expozíció szerkesztése"
		},
		"c2pa.created": {
			description: "Létrehozott egy új fájlt vagy tartalmat",
			label: "Létrehozva"
		},
		"c2pa.cropped": {
			description: "Használt vágóeszközöket, amelyek csökkentik vagy bővítik a tartalom látható területét",
			label: "Vágást használó szerkesztések"
		},
		"c2pa.drawing": {
			description: "Használt olyan eszközöket mint ceruzák, ecsetek, radírok vagy alakzat-, görbe- vagy tolleszközök",
			label: "Rajzolást használó szerkesztések"
		},
		"c2pa.edited": {
			description: "Egyéb módosítások végrehajtva",
			label: "Egyéb szerkesztések"
		},
		"c2pa.filtered": {
			description: "Használt olyan eszközöket mint szűrők, stílusok vagy effektusok a megjelenés megváltoztatására",
			label: "Szűrőt vagy stílust használó szerkesztések"
		},
		"c2pa.opened": {
			description: "Megnyitott egy már létező fájlt",
			label: "Megnyitva"
		},
		"c2pa.orientation": {
			description: "Módosította a pozíciót vagy tájolást (elforgatva, megfordítva stb.)",
			label: "Tájolás szerkesztések"
		},
		"c2pa.placed": {
			description: "Már létező tartalmat adott hozzá ehhez a fájlhoz",
			label: "Importálva"
		},
		"c2pa.resized": {
			description: "A méretek vagy a fájl mérete módosult",
			label: "Szerkesztések átméretezése"
		},
		"c2pa.unknown": {
			description: "Más szerkesztéseket vagy műveleteket hajtott végre, amelyeket nem lehetett felismerni",
			label: "Ismeretlen szerkesztések vagy tevékenység"
		}
	}
};
var huHU = {
	selectors: selectors$d
};

var selectors$c = {
	editsAndActivity: {
		"c2pa.color_adjustments": {
			description: "Proprietà regolate come tono, saturazione, curve, ombre o luci",
			label: "Modifiche del colore o dell'esposizione"
		},
		"c2pa.created": {
			description: "È stato creato un nuovo file o contenuto",
			label: "Creato"
		},
		"c2pa.cropped": {
			description: "Strumenti di ritaglio utilizzati, riducendo o espandendo l'area del contenuto visibile",
			label: "Modifiche di ritaglio"
		},
		"c2pa.drawing": {
			description: "Strumenti usati come matite, pennelli, gomme o strumenti forma, tracciato o penna",
			label: "Modifiche del disegno"
		},
		"c2pa.edited": {
			description: "Sono state apportate altre modifiche",
			label: "Altre modifiche"
		},
		"c2pa.filtered": {
			description: "Strumenti utilizzati come filtri, stili o effetti per modificare l'aspetto",
			label: "Modifiche di filtro o stile"
		},
		"c2pa.opened": {
			description: "È stato aperto un file preesistente",
			label: "Aperto"
		},
		"c2pa.orientation": {
			description: "Posizione o orientamento modificati (ruotati, capovolti e così via)",
			label: "Orientamento modifiche"
		},
		"c2pa.placed": {
			description: "Aggiunto contenuto preesistente a questo file",
			label: "Importato"
		},
		"c2pa.resized": {
			description: "Dimensioni o grandezza del file modificate",
			label: "Modifiche del ridimensionamento"
		},
		"c2pa.unknown": {
			description: "Sono state eseguite altre modifiche o attività che non è stato possibile riconoscere",
			label: "Modifiche o attività sconosciute"
		}
	}
};
var itIT = {
	selectors: selectors$c
};

var selectors$b = {
	editsAndActivity: {
		"c2pa.color_adjustments": {
			description: "トーン、彩度、カーブ、シャドウ、ハイライトなどのプロパティを調整",
			label: "カラーまたは露出の編集"
		},
		"c2pa.created": {
			description: "新しいファイルまたはコンテンツを作成",
			label: "作成済み"
		},
		"c2pa.cropped": {
			description: "切り抜きツールを使用、表示されているコンテンツ領域の縮小または拡大",
			label: "切り抜きの編集"
		},
		"c2pa.drawing": {
			description: "鉛筆、ブラシ、消しゴム、シェイプ、パス、ペンツールなどのツールを使用",
			label: "描画の編集"
		},
		"c2pa.edited": {
			description: "その他の変更",
			label: "その他の編集"
		},
		"c2pa.filtered": {
			description: "フィルター、スタイル、効果などのツールを使用して外観を変更",
			label: "フィルターまたはスタイルの編集"
		},
		"c2pa.opened": {
			description: "既存のファイルを開いた",
			label: "開いた"
		},
		"c2pa.orientation": {
			description: "位置または方向を変更 (回転、反転など)",
			label: "画像方向編集"
		},
		"c2pa.placed": {
			description: "このファイルに既存のコンテンツを追加",
			label: "読み込み済み"
		},
		"c2pa.resized": {
			description: "寸法またはファイルサイズを変更",
			label: "サイズ変更の編集"
		},
		"c2pa.unknown": {
			description: "認識できない他の編集またはアクティビティを実行",
			label: "不明な編集またはアクティビティ"
		}
	}
};
var jaJP = {
	selectors: selectors$b
};

var selectors$a = {
	editsAndActivity: {
		"c2pa.color_adjustments": {
			description: "톤, 채도, 곡선, 그림자 또는 하이라이트와 같은 조정된 속성",
			label: "색상 또는 노출 편집"
		},
		"c2pa.created": {
			description: "새 파일 또는 콘텐츠 생성됨",
			label: "생성됨"
		},
		"c2pa.cropped": {
			description: "사용된 자르기 도구, 보이는 콘텐츠 영역 축소 또는 확장",
			label: "자르기 편집"
		},
		"c2pa.drawing": {
			description: "연필, 브러시, 지우개 또는 모양, 경로 또는 펜 도구와 같은 사용된 도구",
			label: "그리기 편집"
		},
		"c2pa.edited": {
			description: "기타 변경 사항 적용됨",
			label: "기타 편집"
		},
		"c2pa.filtered": {
			description: "필터, 스타일 또는 효과와 같은 모양 변경에 사용된 도구",
			label: "필터 또는 스타일 편집"
		},
		"c2pa.opened": {
			description: "기존 파일 열림",
			label: "열림"
		},
		"c2pa.orientation": {
			description: "변경된 위치 또는 방향 (회전, 반전 등)",
			label: "방향 편집"
		},
		"c2pa.placed": {
			description: "이 파일에 기존 콘텐츠 추가됨",
			label: "가져옴"
		},
		"c2pa.resized": {
			description: "변경된 치수 또는 파일 크기",
			label: "크기 조정 편집"
		},
		"c2pa.unknown": {
			description: "수행되었으나 인식할 수 없는 기타 편집 또는 활동",
			label: "알 수 없는 편집 또는 활동"
		}
	}
};
var koKR = {
	selectors: selectors$a
};

var selectors$9 = {
	editsAndActivity: {
		"c2pa.color_adjustments": {
			description: "Justerte egenskaper som tone, metning, kurver, skygger eller høylys",
			label: "Farge- eller eksponeringsredigeringer"
		},
		"c2pa.created": {
			description: "Opprettet en ny fil eller nytt innhold",
			label: "Opprettet"
		},
		"c2pa.cropped": {
			description: "Brukte beskjæringsverktøy for å redusere eller utvide synlig innholdsområde",
			label: "Beskjæringsredigeringer"
		},
		"c2pa.drawing": {
			description: "Brukte verktøy som blyanter, pensler, viskelær eller form-, bane- eller pennverktøy",
			label: "Tegneredigeringer"
		},
		"c2pa.edited": {
			description: "Gjorde andre endringer",
			label: "Andre redigeringer"
		},
		"c2pa.filtered": {
			description: "Brukte verktøy som filtre, stiler eller effekter for å endre utseende",
			label: "Filter- eller stilredigeringer"
		},
		"c2pa.opened": {
			description: "Åpnet en eksisterende fil",
			label: "Åpnet"
		},
		"c2pa.orientation": {
			description: "Endret posisjon eller retning (rotert, snudd osv.)",
			label: "Retnings- redigeringer"
		},
		"c2pa.placed": {
			description: "La til eksisterende innhold i denne filen",
			label: "Importert"
		},
		"c2pa.resized": {
			description: "Endret dimensjoner eller filstørrelse",
			label: "Størrelsesendringer"
		},
		"c2pa.unknown": {
			description: "Utførte andre redigeringer eller aktiviteter som ikke gjenkjennes",
			label: "Ukjent endring eller aktivitet"
		}
	}
};
var nbNO = {
	selectors: selectors$9
};

var selectors$8 = {
	editsAndActivity: {
		"c2pa.color_adjustments": {
			description: "Eigenschappen zoals tint, verzadiging, curven, schaduwen of hooglichten aangepast",
			label: "Kleur- of belichtingsbewerkingen"
		},
		"c2pa.created": {
			description: "Een nieuw bestand of content gemaakt",
			label: "Gemaakt"
		},
		"c2pa.cropped": {
			description: "Uitsnedegereedschappen gebruikt om het zichtbare deel van de content te beperken of uit te breiden",
			label: "Uitsnedebewerkingen"
		},
		"c2pa.drawing": {
			description: "Gereedschappen gebruikt zoals potloden, penselen, gummetjes, pennen of vorm- of padgereedschappen",
			label: "Tekenbewerkingen"
		},
		"c2pa.edited": {
			description: "Andere wijzigingen aangebracht",
			label: "Andere bewerkingen"
		},
		"c2pa.filtered": {
			description: "Gereedschappen zoals filters, stijlen of effecten gebruikt om het uiterlijk te veranderen",
			label: "Filter- of stijlbewerkingen"
		},
		"c2pa.opened": {
			description: "Een bestaand bestand geopend",
			label: "Geopend"
		},
		"c2pa.orientation": {
			description: "Positie of stand gewijzigd (gedraaid, gespiegeld etc.)",
			label: "Afdrukstand bewerkingen"
		},
		"c2pa.placed": {
			description: "Bestaande content aan dit bestand toegevoegd",
			label: "Geïmporteerd"
		},
		"c2pa.resized": {
			description: "Afmetingen of bestandsgrootte gewijzigd",
			label: "Formaatbewerkingen"
		},
		"c2pa.unknown": {
			description: "Andere bewerkingen of activiteiten uitgevoerd die niet konden worden herkend",
			label: "Onbekende bewerkingen of activiteiten"
		}
	}
};
var nlNL = {
	selectors: selectors$8
};

var selectors$7 = {
	editsAndActivity: {
		"c2pa.color_adjustments": {
			description: "Zmodyfikowano właściwości, takie jak tonacja, nasycenie, krzywe, cienie lub światła",
			label: "Wprowadzono zmiany kolorów lub ekspozycji"
		},
		"c2pa.created": {
			description: "Utworzono nowy plik lub zawartość",
			label: "Utworzono"
		},
		"c2pa.cropped": {
			description: "Użyto narzędzi do kadrowania w celu zmniejszenia lub rozszerzenia widocznego obszaru zawartości",
			label: "Modyfikacje polegające na kadrowaniu"
		},
		"c2pa.drawing": {
			description: "Użyto takich narzędzi, jak ołówki, pędzle i gumki albo narzędzi kształtów, ścieżek lub pióra",
			label: "Modyfikacje rysunkowe"
		},
		"c2pa.edited": {
			description: "Wprowadzono inne zmiany",
			label: "Inne modyfikacje"
		},
		"c2pa.filtered": {
			description: "Użyto narzędzi, takich jak filtry, style lub efekty, aby zmienić wygląd",
			label: "Edycje filtrów lub stylów"
		},
		"c2pa.opened": {
			description: "Otwarto wcześniej istniejący plik",
			label: "Otwarto"
		},
		"c2pa.orientation": {
			description: "Zmieniono pozycję lub orientację (obrócono, odwrócono itp.)",
			label: "Orientacja modyfikacje"
		},
		"c2pa.placed": {
			description: "Dodano wcześniej istniejącą zawartość do tego pliku",
			label: "Zaimportowano"
		},
		"c2pa.resized": {
			description: "Zmieniono wymiary lub rozmiar pliku",
			label: "Modyfikacje polegające na zmianie rozmiaru"
		},
		"c2pa.unknown": {
			description: "Dokonano innych zmian lub wykonano operacje, których nie można rozpoznać",
			label: "Nieznane zmiany lub operacje"
		}
	}
};
var plPL = {
	selectors: selectors$7
};

var selectors$6 = {
	editsAndActivity: {
		"c2pa.color_adjustments": {
			description: "Propriedades como tom, saturação, curvas, sombras ou realces ajustadas",
			label: "Edições de cor ou exposição"
		},
		"c2pa.created": {
			description: "Arquivo ou conteúdo criado",
			label: "Criado"
		},
		"c2pa.cropped": {
			description: "Ferramentas de corte usadas, reduzindo ou expandindo a área de conteúdo visível",
			label: "Edições de corte"
		},
		"c2pa.drawing": {
			description: "Ferramentas como lápis, pincéis, borrachas ou ferramentas de forma, caminho ou caneta usadas",
			label: "Edições de desenho"
		},
		"c2pa.edited": {
			description: "Outras alterações feitas",
			label: "Outras edições"
		},
		"c2pa.filtered": {
			description: "Ferramentas como filtros, estilos ou efeitos usadas para alterar a aparência",
			label: "Edições de filtro ou estilo"
		},
		"c2pa.opened": {
			description: "Arquivo pré-existente aberto",
			label: "Aberto"
		},
		"c2pa.orientation": {
			description: "Posição ou orientação alterada (girado, invertido etc.)",
			label: "Edições de orientação"
		},
		"c2pa.placed": {
			description: "Conteúdo pré-existente adicionado a este arquivo",
			label: "Importado"
		},
		"c2pa.resized": {
			description: "Dimensões ou tamanho do arquivo alterados",
			label: "Edições de redimensionamento"
		},
		"c2pa.unknown": {
			description: "Não foi possível reconhecer outras edições ou atividades realizadas",
			label: "Edições ou atividades desconhecidas"
		}
	}
};
var ptBR = {
	selectors: selectors$6
};

var selectors$5 = {
	editsAndActivity: {
		"c2pa.color_adjustments": {
			description: "Измененные свойства, например тон, насыщенность, кривые, тени или блики.",
			label: "Редактирование цвета или экспозиции"
		},
		"c2pa.created": {
			description: "Создан новый файл или контент",
			label: "Создано"
		},
		"c2pa.cropped": {
			description: "Используемые инструменты обрезки, уменьшение или расширение видимой области содержимого",
			label: "Редактирование обрезки"
		},
		"c2pa.drawing": {
			description: "Используемые инструменты, например карандаши, кисти, ластики или другие инструменты (форма, контур или перо)",
			label: "Редактирование чертежа"
		},
		"c2pa.edited": {
			description: "Внесены другие изменения",
			label: "Другие изменения"
		},
		"c2pa.filtered": {
			description: "Используемые инструменты для изменения внешнего вида, например фильтры, стили или эффекты",
			label: "Редактирование фильтров или стилей"
		},
		"c2pa.opened": {
			description: "Открыт ранее созданный файл",
			label: "Открыто"
		},
		"c2pa.orientation": {
			description: "Изменено положение или ориентация (повернуто, перевернуто и т. д.)",
			label: "Ориентация правки"
		},
		"c2pa.placed": {
			description: "В этот файл добавлен уже существующий контент",
			label: "Импортировано"
		},
		"c2pa.resized": {
			description: "Изменены размеры изображения или размер файла",
			label: "Изменение размеров"
		},
		"c2pa.unknown": {
			description: "Внесены другие правки или выполнены иные действия, которые не удалось распознать",
			label: "Неизвестные изменения или действия"
		}
	}
};
var ruRU = {
	selectors: selectors$5
};

var selectors$4 = {
	editsAndActivity: {
		"c2pa.color_adjustments": {
			description: "Justerade egenskaper som ton, mättnad, kurvor, skuggor och högdagrar",
			label: "Redigering av färg eller exponering"
		},
		"c2pa.created": {
			description: "Skapade en ny fil eller nytt innehåll",
			label: "Skapade"
		},
		"c2pa.cropped": {
			description: "Använde beskärningsverktyg, minskade eller utökade synligt innehållsområde",
			label: "Redigering av beskärning"
		},
		"c2pa.drawing": {
			description: "Använde verktyg som pennor, penslar, suddgummin eller verktygen form, bana eller penna",
			label: "Redigering av teckning"
		},
		"c2pa.edited": {
			description: "Gjorde andra ändringar",
			label: "Annan redigering"
		},
		"c2pa.filtered": {
			description: "Använde verktyg som filter, stilar eller effekter för att ändra utseende",
			label: "Redigering av filter eller stil"
		},
		"c2pa.opened": {
			description: "Öppnade en befintlig fil",
			label: "Öppnade"
		},
		"c2pa.orientation": {
			description: "Ändrade placering eller orientering (roterad, vänd osv.)",
			label: "Orientering redigering"
		},
		"c2pa.placed": {
			description: "Lade till befintligt innehåll i den här filen",
			label: "Importerade"
		},
		"c2pa.resized": {
			description: "Ändrade mått eller filstorlek",
			label: "Redigering av storleksändring"
		},
		"c2pa.unknown": {
			description: "Utförde andra redigeringar eller aktiviteter som inte kunde identifieras",
			label: "Okänd redigering eller aktivitet"
		}
	}
};
var svSE = {
	selectors: selectors$4
};

var selectors$3 = {
	editsAndActivity: {
		"c2pa.color_adjustments": {
			description: "Ton, doygunluk, eğriler, gölgeler veya vurgular gibi ayarlanmış özellikler",
			label: "Renk veya pozlama düzenlemeleri"
		},
		"c2pa.created": {
			description: "Yeni bir dosya veya içerik oluşturuldu",
			label: "Oluşturuldu"
		},
		"c2pa.cropped": {
			description: "Kırpma araçları kullanılarak görünür içerik alanı küçültüldü veya genişletildi",
			label: "Kırpma düzenlemeleri"
		},
		"c2pa.drawing": {
			description: "Kurşun kalem, fırça, silgi veya şekil, yol ya da kalem araçları gibi araçlar kullanıldı",
			label: "Çizim düzenlemeleri"
		},
		"c2pa.edited": {
			description: "Diğer değişiklikler yapıldı",
			label: "Diğer düzenlemeler"
		},
		"c2pa.filtered": {
			description: "Görünümü değiştirmek için filtre, stil veya efekt gibi araçlar kullanıldı",
			label: "Filtre veya stil düzenlemeleri"
		},
		"c2pa.opened": {
			description: "Mevcut bir dosya açıldı",
			label: "Açıldı"
		},
		"c2pa.orientation": {
			description: "Konum veya yönlendirme değiştirildi (döndürüldü, ters çevrildi vb.)",
			label: "Yönlendirme düzenlemeleri"
		},
		"c2pa.placed": {
			description: "Mevcut içerik bu dosyaya eklendi",
			label: "İçe aktarıldı"
		},
		"c2pa.resized": {
			description: "Boyutlar veya dosya boyutu değiştirildi",
			label: "Yeniden boyutlandırma düzenlemeleri"
		},
		"c2pa.unknown": {
			description: "Algılanamayan başka düzenlemeler veya etkinlikler gerçekleştirildi",
			label: "Bilinmeyen düzenlemeler veya etkinlikler"
		}
	}
};
var trTR = {
	selectors: selectors$3
};

var selectors$2 = {
	editsAndActivity: {
		"c2pa.color_adjustments": {
			description: "Скориговано властивості, як-от тон, насиченість, криві, тіні або підсвічування",
			label: "Зміни кольору або експозиції"
		},
		"c2pa.created": {
			description: "Створено новий файл або вміст",
			label: "Створено"
		},
		"c2pa.cropped": {
			description: "Використано інструменти кадрування, зменшення або розширення області видимого вмісту",
			label: "Зміни кадрування"
		},
		"c2pa.drawing": {
			description: "Використано інструменти, як-от олівці, пензлі, гумки, або інструменти для форм, контурів або пера",
			label: "Зміни малювання"
		},
		"c2pa.edited": {
			description: "Внесено інші зміни",
			label: "Інші зміни"
		},
		"c2pa.filtered": {
			description: "Використано інструменти, як-от фільтри, стилі чи ефекти для зміни вигляду",
			label: "Зміни фільтру або стилю"
		},
		"c2pa.opened": {
			description: "Відкрито вже існуючий файл",
			label: "Відкрито"
		},
		"c2pa.orientation": {
			description: "Змінено положення або орієнтація (повернуто, віддзеркалено тощо)",
			label: "Зміни орієнтації"
		},
		"c2pa.placed": {
			description: "Додано вже існуючий вміст до цього файлу",
			label: "Імпортовано"
		},
		"c2pa.resized": {
			description: "Змінено геометричні розміри або розмір файлу",
			label: "Зміни розміру"
		},
		"c2pa.unknown": {
			description: "Виконано інші зміни або дії, які не вдалося розпізнати",
			label: "Невідомі зміни чи дії"
		}
	}
};
var ukUA = {
	selectors: selectors$2
};

var selectors$1 = {
	editsAndActivity: {
		"c2pa.color_adjustments": {
			description: "调整后的属性，如色调、饱和度、曲线、阴影或高光",
			label: "颜色或曝光度编辑"
		},
		"c2pa.created": {
			description: "已创建新文件或内容",
			label: "已创建"
		},
		"c2pa.cropped": {
			description: "已使用的裁切工具（用于减少或扩大可见内容区域）",
			label: "裁切编辑"
		},
		"c2pa.drawing": {
			description: "已使用的工具，如铅笔、画笔、橡皮擦、形状、路径或钢笔工具",
			label: "绘图编辑"
		},
		"c2pa.edited": {
			description: "已执行其他更改",
			label: "其他编辑"
		},
		"c2pa.filtered": {
			description: "已使用滤镜、样式或效果等工具来更改外观",
			label: "滤镜或样式编辑"
		},
		"c2pa.opened": {
			description: "已打开一个预先存在的文件",
			label: "已打开"
		},
		"c2pa.orientation": {
			description: "已改变位置或方向（旋转、翻转等）",
			label: "方向 编辑"
		},
		"c2pa.placed": {
			description: "已向此文件添加预先存在的内容",
			label: "已导入"
		},
		"c2pa.resized": {
			description: "已更改尺寸或文件大小",
			label: "调整编辑大小"
		},
		"c2pa.unknown": {
			description: "已执行其他无法识别的编辑或活动",
			label: "未知的编辑或活动"
		}
	}
};
var zhCN = {
	selectors: selectors$1
};

var selectors = {
	editsAndActivity: {
		"c2pa.color_adjustments": {
			description: "調整了屬性，如色調、飽和度、曲線、陰影或亮部",
			label: "顏色或曝光編輯"
		},
		"c2pa.created": {
			description: "建立了新檔案或內容",
			label: "已建立"
		},
		"c2pa.cropped": {
			description: "使用了裁切工具，縮減或擴大可見內容區域",
			label: "裁切編輯"
		},
		"c2pa.drawing": {
			description: "使用了鉛筆、筆刷、橡皮擦等工具，或是形狀、路徑或鋼筆工具",
			label: "繪圖編輯"
		},
		"c2pa.edited": {
			description: "進行了其他變更",
			label: "其他編輯"
		},
		"c2pa.filtered": {
			description: "使用了濾鏡、風格或效果等工具來變更外觀",
			label: "濾鏡或風格編輯"
		},
		"c2pa.opened": {
			description: "開啟了已存在的檔案",
			label: "已開啟"
		},
		"c2pa.orientation": {
			description: "變更了位置或方向 (旋轉、翻轉等)",
			label: "方向編輯"
		},
		"c2pa.placed": {
			description: "對此檔案新增了已存在的內容",
			label: "已讀入"
		},
		"c2pa.resized": {
			description: "變更了尺寸或檔案大小",
			label: "調整大小編輯"
		},
		"c2pa.unknown": {
			description: "執行了其他無法辨識的編輯或活動",
			label: "未知的編輯或活動"
		}
	}
};
var zhTW = {
	selectors: selectors
};

var locales = /*#__PURE__*/Object.freeze({
	__proto__: null,
	cs_CZ: csCZ,
	da_DK: daDK,
	de_DE: deDE,
	en_US: enUS,
	es_ES: esES,
	fi_FI: fiFI,
	fr_FR: frFR,
	hu_HU: huHU,
	it_IT: itIT,
	ja_JP: jaJP,
	ko_KR: koKR,
	nb_NO: nbNO,
	nl_NL: nlNL,
	pl_PL: plPL,
	pt_BR: ptBR,
	ru_RU: ruRU,
	sv_SE: svSE,
	tr_TR: trTR,
	uk_UA: ukUA,
	zh_CN: zhCN,
	zh_TW: zhTW
});

/**
 * Copyright 2022 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it.
 */
debug('c2pa:selector:editsAndActivity');
// Make sure we update the keys to conform to BCP 47 tags
mapKeys_1(locales, (_, key) => key.replace('_', '-'));
/**
 * Pipeline to convert categories from the dictionary into a structure suitable for the
 * edits and activity web component. This also makes sure the categories are unique and sorted.
 */
flow(compact, uniqBy((category) => category.id), sortBy((category) => category.label));

// import wasmSrc from '@c2pa/adobe-sdk/dist/assets/wasm/toolkit_bg.wasm';
// import workerSrc from '../node_modules/@c2pa/adobe-sdk/dist/c2pa.worker.min.js';
// import wasmSrc from '../node_modules/@c2pa/adobe-sdk/dist/assets/wasm/toolkit_bg.wasm?url';
// import workerSrc from '../node_modules/@c2pa/adobe-sdk/dist/c2pa.worker.min.js?url';
// import wasmSrc from '../node_modules/@c2pa/adobe-sdk/dist/assets/wasm/toolkit_bg.wasm?url';
// import workerSrc from '../node_modules/@c2pa/adobe-sdk/dist/c2pa.worker.esm.min.js?url';
const initCRLite = () => __awaiter(void 0, void 0, void 0, function* () {
    // const c2pa = await createC2pa({
    //     wasmSrc: `https://cdn.jsdelivr.net/npm/c2pa@0.16.2/dist/assets/wasm/toolkit_bg.wasm`,
    //     workerSrc: `https://cdn.jsdelivr.net/npm/c2pa@0.16.2/dist/c2pa.worker.min.js`,
    //   downloaderOptions: {
    //     inspectSize: 0,
    //   },
    // });
    // const wasmModule = await require('c2pa/dist/assets/wasm/toolkit_bg.wasm');
    // console.log(workerSrc)
    // const wasmSrc = await wasmModule();
    const c2pa = yield createC2pa({
        wasmSrc: '../node_modules/@c2pa/adobe-sdk/dist/assets/wasm/toolkit_bg.wasm',
        workerSrc: '../node_modules/@c2pa/adobe-sdk/dist/c2pa.worker.umd.min.js',
        downloaderOptions: {
            inspectSize: 0,
        },
    });
    {
        window.CRlite = c2pa;
        console.info('CRLite initialized');
    }
});
(() => __awaiter(void 0, void 0, void 0, function* () {
    yield initCRLite();
}))();
// export async function initC2pa() {
//   // Initialize the c2pa-js SDK
//   return c2pa;
// }
// export default async function getC2pa(): Promise<C2pa> {
//   const c2pa = await initC2pa();
//   return c2pa;
// }

export { initCRLite };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9jb21tb24vdGVtcC9ub2RlX21vZHVsZXMvLnBucG0vdHNsaWJAMi41LjAvbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIi4uLy4uL2MycGEvZGlzdC9jMnBhLmVzbS5qcyIsIi4uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXNEZWNvcmF0ZShjdG9yLCBkZXNjcmlwdG9ySW4sIGRlY29yYXRvcnMsIGNvbnRleHRJbiwgaW5pdGlhbGl6ZXJzLCBleHRyYUluaXRpYWxpemVycykge1xyXG4gICAgZnVuY3Rpb24gYWNjZXB0KGYpIHsgaWYgKGYgIT09IHZvaWQgMCAmJiB0eXBlb2YgZiAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRnVuY3Rpb24gZXhwZWN0ZWRcIik7IHJldHVybiBmOyB9XHJcbiAgICB2YXIga2luZCA9IGNvbnRleHRJbi5raW5kLCBrZXkgPSBraW5kID09PSBcImdldHRlclwiID8gXCJnZXRcIiA6IGtpbmQgPT09IFwic2V0dGVyXCIgPyBcInNldFwiIDogXCJ2YWx1ZVwiO1xyXG4gICAgdmFyIHRhcmdldCA9ICFkZXNjcmlwdG9ySW4gJiYgY3RvciA/IGNvbnRleHRJbltcInN0YXRpY1wiXSA/IGN0b3IgOiBjdG9yLnByb3RvdHlwZSA6IG51bGw7XHJcbiAgICB2YXIgZGVzY3JpcHRvciA9IGRlc2NyaXB0b3JJbiB8fCAodGFyZ2V0ID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGNvbnRleHRJbi5uYW1lKSA6IHt9KTtcclxuICAgIHZhciBfLCBkb25lID0gZmFsc2U7XHJcbiAgICBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgIHZhciBjb250ZXh0ID0ge307XHJcbiAgICAgICAgZm9yICh2YXIgcCBpbiBjb250ZXh0SW4pIGNvbnRleHRbcF0gPSBwID09PSBcImFjY2Vzc1wiID8ge30gOiBjb250ZXh0SW5bcF07XHJcbiAgICAgICAgZm9yICh2YXIgcCBpbiBjb250ZXh0SW4uYWNjZXNzKSBjb250ZXh0LmFjY2Vzc1twXSA9IGNvbnRleHRJbi5hY2Nlc3NbcF07XHJcbiAgICAgICAgY29udGV4dC5hZGRJbml0aWFsaXplciA9IGZ1bmN0aW9uIChmKSB7IGlmIChkb25lKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGFkZCBpbml0aWFsaXplcnMgYWZ0ZXIgZGVjb3JhdGlvbiBoYXMgY29tcGxldGVkXCIpOyBleHRyYUluaXRpYWxpemVycy5wdXNoKGFjY2VwdChmIHx8IG51bGwpKTsgfTtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gKDAsIGRlY29yYXRvcnNbaV0pKGtpbmQgPT09IFwiYWNjZXNzb3JcIiA/IHsgZ2V0OiBkZXNjcmlwdG9yLmdldCwgc2V0OiBkZXNjcmlwdG9yLnNldCB9IDogZGVzY3JpcHRvcltrZXldLCBjb250ZXh0KTtcclxuICAgICAgICBpZiAoa2luZCA9PT0gXCJhY2Nlc3NvclwiKSB7XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IHZvaWQgMCkgY29udGludWU7XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwgfHwgdHlwZW9mIHJlc3VsdCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBleHBlY3RlZFwiKTtcclxuICAgICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LmdldCkpIGRlc2NyaXB0b3IuZ2V0ID0gXztcclxuICAgICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LnNldCkpIGRlc2NyaXB0b3Iuc2V0ID0gXztcclxuICAgICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LmluaXQpKSBpbml0aWFsaXplcnMucHVzaChfKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoXyA9IGFjY2VwdChyZXN1bHQpKSB7XHJcbiAgICAgICAgICAgIGlmIChraW5kID09PSBcImZpZWxkXCIpIGluaXRpYWxpemVycy5wdXNoKF8pO1xyXG4gICAgICAgICAgICBlbHNlIGRlc2NyaXB0b3Jba2V5XSA9IF87XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHRhcmdldCkgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgY29udGV4dEluLm5hbWUsIGRlc2NyaXB0b3IpO1xyXG4gICAgZG9uZSA9IHRydWU7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19ydW5Jbml0aWFsaXplcnModGhpc0FyZywgaW5pdGlhbGl6ZXJzLCB2YWx1ZSkge1xyXG4gICAgdmFyIHVzZVZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGluaXRpYWxpemVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZhbHVlID0gdXNlVmFsdWUgPyBpbml0aWFsaXplcnNbaV0uY2FsbCh0aGlzQXJnLCB2YWx1ZSkgOiBpbml0aWFsaXplcnNbaV0uY2FsbCh0aGlzQXJnKTtcclxuICAgIH1cclxuICAgIHJldHVybiB1c2VWYWx1ZSA/IHZhbHVlIDogdm9pZCAwO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcHJvcEtleSh4KSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHggPT09IFwic3ltYm9sXCIgPyB4IDogXCJcIi5jb25jYXQoeCk7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zZXRGdW5jdGlvbk5hbWUoZiwgbmFtZSwgcHJlZml4KSB7XHJcbiAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3ltYm9sXCIpIG5hbWUgPSBuYW1lLmRlc2NyaXB0aW9uID8gXCJbXCIuY29uY2F0KG5hbWUuZGVzY3JpcHRpb24sIFwiXVwiKSA6IFwiXCI7XHJcbiAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGYsIFwibmFtZVwiLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHByZWZpeCA/IFwiXCIuY29uY2F0KHByZWZpeCwgXCIgXCIsIG5hbWUpIDogbmFtZSB9KTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoZyAmJiAoZyA9IDAsIG9wWzBdICYmIChfID0gMCkpLCBfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19jcmVhdGVCaW5kaW5nID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcclxuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XHJcbiAgICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XHJcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgb1trMl0gPSBtW2tdO1xyXG59KTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgbykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBwKSkgX19jcmVhdGVCaW5kaW5nKG8sIG0sIHApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG4vKiogQGRlcHJlY2F0ZWQgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xyXG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG4vKiogQGRlcHJlY2F0ZWQgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5KHRvLCBmcm9tLCBwYWNrKSB7XHJcbiAgICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcclxuICAgICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcclxuICAgICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IGZhbHNlIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xyXG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xyXG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEluKHN0YXRlLCByZWNlaXZlcikge1xyXG4gICAgaWYgKHJlY2VpdmVyID09PSBudWxsIHx8ICh0eXBlb2YgcmVjZWl2ZXIgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHJlY2VpdmVyICE9PSBcImZ1bmN0aW9uXCIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHVzZSAnaW4nIG9wZXJhdG9yIG9uIG5vbi1vYmplY3RcIik7XHJcbiAgICByZXR1cm4gdHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciA9PT0gc3RhdGUgOiBzdGF0ZS5oYXMocmVjZWl2ZXIpO1xyXG59XHJcbiIsIlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQ29weXJpZ2h0IDIwMjEgQWRvYmVcbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTk9USUNFOiBBZG9iZSBwZXJtaXRzIHlvdSB0byB1c2UsIG1vZGlmeSwgYW5kIGRpc3RyaWJ1dGUgdGhpcyBmaWxlIGluXG4gKiBhY2NvcmRhbmNlIHdpdGggdGhlIHRlcm1zIG9mIHRoZSBBZG9iZSBsaWNlbnNlIGFncmVlbWVudCBhY2NvbXBhbnlpbmdcbiAqIGl0LiBcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxudmFyIGNvbW1vbmpzR2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRFeHBvcnRGcm9tQ2pzICh4KSB7XG5cdHJldHVybiB4ICYmIHguX19lc01vZHVsZSAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoeCwgJ2RlZmF1bHQnKSA/IHhbJ2RlZmF1bHQnXSA6IHg7XG59XG5cbnZhciBicm93c2VyID0ge2V4cG9ydHM6IHt9fTtcblxuLyoqXG4gKiBIZWxwZXJzLlxuICovXG5cbnZhciBtcztcbnZhciBoYXNSZXF1aXJlZE1zO1xuXG5mdW5jdGlvbiByZXF1aXJlTXMgKCkge1xuXHRpZiAoaGFzUmVxdWlyZWRNcykgcmV0dXJuIG1zO1xuXHRoYXNSZXF1aXJlZE1zID0gMTtcblx0dmFyIHMgPSAxMDAwO1xuXHR2YXIgbSA9IHMgKiA2MDtcblx0dmFyIGggPSBtICogNjA7XG5cdHZhciBkID0gaCAqIDI0O1xuXHR2YXIgdyA9IGQgKiA3O1xuXHR2YXIgeSA9IGQgKiAzNjUuMjU7XG5cblx0LyoqXG5cdCAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG5cdCAqXG5cdCAqIE9wdGlvbnM6XG5cdCAqXG5cdCAqICAtIGBsb25nYCB2ZXJib3NlIGZvcm1hdHRpbmcgW2ZhbHNlXVxuXHQgKlxuXHQgKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuXHQgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG5cdCAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuXHQgKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuXHQgKiBAYXBpIHB1YmxpY1xuXHQgKi9cblxuXHRtcyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuXHQgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHQgIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcblx0ICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcblx0ICAgIHJldHVybiBwYXJzZSh2YWwpO1xuXHQgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUodmFsKSkge1xuXHQgICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/IGZtdExvbmcodmFsKSA6IGZtdFNob3J0KHZhbCk7XG5cdCAgfVxuXHQgIHRocm93IG5ldyBFcnJvcihcblx0ICAgICd2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPScgK1xuXHQgICAgICBKU09OLnN0cmluZ2lmeSh2YWwpXG5cdCAgKTtcblx0fTtcblxuXHQvKipcblx0ICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gc3RyXG5cdCAqIEByZXR1cm4ge051bWJlcn1cblx0ICogQGFwaSBwcml2YXRlXG5cdCAqL1xuXG5cdGZ1bmN0aW9uIHBhcnNlKHN0cikge1xuXHQgIHN0ciA9IFN0cmluZyhzdHIpO1xuXHQgIGlmIChzdHIubGVuZ3RoID4gMTAwKSB7XG5cdCAgICByZXR1cm47XG5cdCAgfVxuXHQgIHZhciBtYXRjaCA9IC9eKC0/KD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx3ZWVrcz98d3x5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcblx0ICAgIHN0clxuXHQgICk7XG5cdCAgaWYgKCFtYXRjaCkge1xuXHQgICAgcmV0dXJuO1xuXHQgIH1cblx0ICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuXHQgIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG5cdCAgc3dpdGNoICh0eXBlKSB7XG5cdCAgICBjYXNlICd5ZWFycyc6XG5cdCAgICBjYXNlICd5ZWFyJzpcblx0ICAgIGNhc2UgJ3lycyc6XG5cdCAgICBjYXNlICd5cic6XG5cdCAgICBjYXNlICd5Jzpcblx0ICAgICAgcmV0dXJuIG4gKiB5O1xuXHQgICAgY2FzZSAnd2Vla3MnOlxuXHQgICAgY2FzZSAnd2Vlayc6XG5cdCAgICBjYXNlICd3Jzpcblx0ICAgICAgcmV0dXJuIG4gKiB3O1xuXHQgICAgY2FzZSAnZGF5cyc6XG5cdCAgICBjYXNlICdkYXknOlxuXHQgICAgY2FzZSAnZCc6XG5cdCAgICAgIHJldHVybiBuICogZDtcblx0ICAgIGNhc2UgJ2hvdXJzJzpcblx0ICAgIGNhc2UgJ2hvdXInOlxuXHQgICAgY2FzZSAnaHJzJzpcblx0ICAgIGNhc2UgJ2hyJzpcblx0ICAgIGNhc2UgJ2gnOlxuXHQgICAgICByZXR1cm4gbiAqIGg7XG5cdCAgICBjYXNlICdtaW51dGVzJzpcblx0ICAgIGNhc2UgJ21pbnV0ZSc6XG5cdCAgICBjYXNlICdtaW5zJzpcblx0ICAgIGNhc2UgJ21pbic6XG5cdCAgICBjYXNlICdtJzpcblx0ICAgICAgcmV0dXJuIG4gKiBtO1xuXHQgICAgY2FzZSAnc2Vjb25kcyc6XG5cdCAgICBjYXNlICdzZWNvbmQnOlxuXHQgICAgY2FzZSAnc2Vjcyc6XG5cdCAgICBjYXNlICdzZWMnOlxuXHQgICAgY2FzZSAncyc6XG5cdCAgICAgIHJldHVybiBuICogcztcblx0ICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG5cdCAgICBjYXNlICdtaWxsaXNlY29uZCc6XG5cdCAgICBjYXNlICdtc2Vjcyc6XG5cdCAgICBjYXNlICdtc2VjJzpcblx0ICAgIGNhc2UgJ21zJzpcblx0ICAgICAgcmV0dXJuIG47XG5cdCAgICBkZWZhdWx0OlxuXHQgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuXHQgIH1cblx0fVxuXG5cdC8qKlxuXHQgKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuXHQgKiBAcmV0dXJuIHtTdHJpbmd9XG5cdCAqIEBhcGkgcHJpdmF0ZVxuXHQgKi9cblxuXHRmdW5jdGlvbiBmbXRTaG9ydChtcykge1xuXHQgIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcblx0ICBpZiAobXNBYnMgPj0gZCkge1xuXHQgICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcblx0ICB9XG5cdCAgaWYgKG1zQWJzID49IGgpIHtcblx0ICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG5cdCAgfVxuXHQgIGlmIChtc0FicyA+PSBtKSB7XG5cdCAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuXHQgIH1cblx0ICBpZiAobXNBYnMgPj0gcykge1xuXHQgICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcblx0ICB9XG5cdCAgcmV0dXJuIG1zICsgJ21zJztcblx0fVxuXG5cdC8qKlxuXHQgKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cblx0ICpcblx0ICogQHBhcmFtIHtOdW1iZXJ9IG1zXG5cdCAqIEByZXR1cm4ge1N0cmluZ31cblx0ICogQGFwaSBwcml2YXRlXG5cdCAqL1xuXG5cdGZ1bmN0aW9uIGZtdExvbmcobXMpIHtcblx0ICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG5cdCAgaWYgKG1zQWJzID49IGQpIHtcblx0ICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBkLCAnZGF5Jyk7XG5cdCAgfVxuXHQgIGlmIChtc0FicyA+PSBoKSB7XG5cdCAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgaCwgJ2hvdXInKTtcblx0ICB9XG5cdCAgaWYgKG1zQWJzID49IG0pIHtcblx0ICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBtLCAnbWludXRlJyk7XG5cdCAgfVxuXHQgIGlmIChtc0FicyA+PSBzKSB7XG5cdCAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgcywgJ3NlY29uZCcpO1xuXHQgIH1cblx0ICByZXR1cm4gbXMgKyAnIG1zJztcblx0fVxuXG5cdC8qKlxuXHQgKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cblx0ICovXG5cblx0ZnVuY3Rpb24gcGx1cmFsKG1zLCBtc0FicywgbiwgbmFtZSkge1xuXHQgIHZhciBpc1BsdXJhbCA9IG1zQWJzID49IG4gKiAxLjU7XG5cdCAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBuKSArICcgJyArIG5hbWUgKyAoaXNQbHVyYWwgPyAncycgOiAnJyk7XG5cdH1cblx0cmV0dXJuIG1zO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgdGhlIGNvbW1vbiBsb2dpYyBmb3IgYm90aCB0aGUgTm9kZS5qcyBhbmQgd2ViIGJyb3dzZXJcbiAqIGltcGxlbWVudGF0aW9ucyBvZiBgZGVidWcoKWAuXG4gKi9cblxuZnVuY3Rpb24gc2V0dXAoZW52KSB7XG5cdGNyZWF0ZURlYnVnLmRlYnVnID0gY3JlYXRlRGVidWc7XG5cdGNyZWF0ZURlYnVnLmRlZmF1bHQgPSBjcmVhdGVEZWJ1Zztcblx0Y3JlYXRlRGVidWcuY29lcmNlID0gY29lcmNlO1xuXHRjcmVhdGVEZWJ1Zy5kaXNhYmxlID0gZGlzYWJsZTtcblx0Y3JlYXRlRGVidWcuZW5hYmxlID0gZW5hYmxlO1xuXHRjcmVhdGVEZWJ1Zy5lbmFibGVkID0gZW5hYmxlZDtcblx0Y3JlYXRlRGVidWcuaHVtYW5pemUgPSByZXF1aXJlTXMoKTtcblx0Y3JlYXRlRGVidWcuZGVzdHJveSA9IGRlc3Ryb3k7XG5cblx0T2JqZWN0LmtleXMoZW52KS5mb3JFYWNoKGtleSA9PiB7XG5cdFx0Y3JlYXRlRGVidWdba2V5XSA9IGVudltrZXldO1xuXHR9KTtcblxuXHQvKipcblx0KiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cblx0Ki9cblxuXHRjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuXHRjcmVhdGVEZWJ1Zy5za2lwcyA9IFtdO1xuXG5cdC8qKlxuXHQqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cblx0KlxuXHQqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cblx0Ki9cblx0Y3JlYXRlRGVidWcuZm9ybWF0dGVycyA9IHt9O1xuXG5cdC8qKlxuXHQqIFNlbGVjdHMgYSBjb2xvciBmb3IgYSBkZWJ1ZyBuYW1lc3BhY2Vcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlIFRoZSBuYW1lc3BhY2Ugc3RyaW5nIGZvciB0aGUgZGVidWcgaW5zdGFuY2UgdG8gYmUgY29sb3JlZFxuXHQqIEByZXR1cm4ge051bWJlcnxTdHJpbmd9IEFuIEFOU0kgY29sb3IgY29kZSBmb3IgdGhlIGdpdmVuIG5hbWVzcGFjZVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiBzZWxlY3RDb2xvcihuYW1lc3BhY2UpIHtcblx0XHRsZXQgaGFzaCA9IDA7XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzcGFjZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0aGFzaCA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgbmFtZXNwYWNlLmNoYXJDb2RlQXQoaSk7XG5cdFx0XHRoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuXHRcdH1cblxuXHRcdHJldHVybiBjcmVhdGVEZWJ1Zy5jb2xvcnNbTWF0aC5hYnMoaGFzaCkgJSBjcmVhdGVEZWJ1Zy5jb2xvcnMubGVuZ3RoXTtcblx0fVxuXHRjcmVhdGVEZWJ1Zy5zZWxlY3RDb2xvciA9IHNlbGVjdENvbG9yO1xuXG5cdC8qKlxuXHQqIENyZWF0ZSBhIGRlYnVnZ2VyIHdpdGggdGhlIGdpdmVuIGBuYW1lc3BhY2VgLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuXHQqIEByZXR1cm4ge0Z1bmN0aW9ufVxuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGNyZWF0ZURlYnVnKG5hbWVzcGFjZSkge1xuXHRcdGxldCBwcmV2VGltZTtcblx0XHRsZXQgZW5hYmxlT3ZlcnJpZGUgPSBudWxsO1xuXHRcdGxldCBuYW1lc3BhY2VzQ2FjaGU7XG5cdFx0bGV0IGVuYWJsZWRDYWNoZTtcblxuXHRcdGZ1bmN0aW9uIGRlYnVnKC4uLmFyZ3MpIHtcblx0XHRcdC8vIERpc2FibGVkP1xuXHRcdFx0aWYgKCFkZWJ1Zy5lbmFibGVkKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3Qgc2VsZiA9IGRlYnVnO1xuXG5cdFx0XHQvLyBTZXQgYGRpZmZgIHRpbWVzdGFtcFxuXHRcdFx0Y29uc3QgY3VyciA9IE51bWJlcihuZXcgRGF0ZSgpKTtcblx0XHRcdGNvbnN0IG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcblx0XHRcdHNlbGYuZGlmZiA9IG1zO1xuXHRcdFx0c2VsZi5wcmV2ID0gcHJldlRpbWU7XG5cdFx0XHRzZWxmLmN1cnIgPSBjdXJyO1xuXHRcdFx0cHJldlRpbWUgPSBjdXJyO1xuXG5cdFx0XHRhcmdzWzBdID0gY3JlYXRlRGVidWcuY29lcmNlKGFyZ3NbMF0pO1xuXG5cdFx0XHRpZiAodHlwZW9mIGFyZ3NbMF0gIT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdC8vIEFueXRoaW5nIGVsc2UgbGV0J3MgaW5zcGVjdCB3aXRoICVPXG5cdFx0XHRcdGFyZ3MudW5zaGlmdCgnJU8nKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQXBwbHkgYW55IGBmb3JtYXR0ZXJzYCB0cmFuc2Zvcm1hdGlvbnNcblx0XHRcdGxldCBpbmRleCA9IDA7XG5cdFx0XHRhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywgKG1hdGNoLCBmb3JtYXQpID0+IHtcblx0XHRcdFx0Ly8gSWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuXHRcdFx0XHRpZiAobWF0Y2ggPT09ICclJScpIHtcblx0XHRcdFx0XHRyZXR1cm4gJyUnO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGluZGV4Kys7XG5cdFx0XHRcdGNvbnN0IGZvcm1hdHRlciA9IGNyZWF0ZURlYnVnLmZvcm1hdHRlcnNbZm9ybWF0XTtcblx0XHRcdFx0aWYgKHR5cGVvZiBmb3JtYXR0ZXIgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0XHRjb25zdCB2YWwgPSBhcmdzW2luZGV4XTtcblx0XHRcdFx0XHRtYXRjaCA9IGZvcm1hdHRlci5jYWxsKHNlbGYsIHZhbCk7XG5cblx0XHRcdFx0XHQvLyBOb3cgd2UgbmVlZCB0byByZW1vdmUgYGFyZ3NbaW5kZXhdYCBzaW5jZSBpdCdzIGlubGluZWQgaW4gdGhlIGBmb3JtYXRgXG5cdFx0XHRcdFx0YXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0XHRcdGluZGV4LS07XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdFx0fSk7XG5cblx0XHRcdC8vIEFwcGx5IGVudi1zcGVjaWZpYyBmb3JtYXR0aW5nIChjb2xvcnMsIGV0Yy4pXG5cdFx0XHRjcmVhdGVEZWJ1Zy5mb3JtYXRBcmdzLmNhbGwoc2VsZiwgYXJncyk7XG5cblx0XHRcdGNvbnN0IGxvZ0ZuID0gc2VsZi5sb2cgfHwgY3JlYXRlRGVidWcubG9nO1xuXHRcdFx0bG9nRm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cdFx0fVxuXG5cdFx0ZGVidWcubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuXHRcdGRlYnVnLnVzZUNvbG9ycyA9IGNyZWF0ZURlYnVnLnVzZUNvbG9ycygpO1xuXHRcdGRlYnVnLmNvbG9yID0gY3JlYXRlRGVidWcuc2VsZWN0Q29sb3IobmFtZXNwYWNlKTtcblx0XHRkZWJ1Zy5leHRlbmQgPSBleHRlbmQ7XG5cdFx0ZGVidWcuZGVzdHJveSA9IGNyZWF0ZURlYnVnLmRlc3Ryb3k7IC8vIFhYWCBUZW1wb3JhcnkuIFdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLlxuXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGRlYnVnLCAnZW5hYmxlZCcsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuXHRcdFx0Z2V0OiAoKSA9PiB7XG5cdFx0XHRcdGlmIChlbmFibGVPdmVycmlkZSAhPT0gbnVsbCkge1xuXHRcdFx0XHRcdHJldHVybiBlbmFibGVPdmVycmlkZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAobmFtZXNwYWNlc0NhY2hlICE9PSBjcmVhdGVEZWJ1Zy5uYW1lc3BhY2VzKSB7XG5cdFx0XHRcdFx0bmFtZXNwYWNlc0NhY2hlID0gY3JlYXRlRGVidWcubmFtZXNwYWNlcztcblx0XHRcdFx0XHRlbmFibGVkQ2FjaGUgPSBjcmVhdGVEZWJ1Zy5lbmFibGVkKG5hbWVzcGFjZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZW5hYmxlZENhY2hlO1xuXHRcdFx0fSxcblx0XHRcdHNldDogdiA9PiB7XG5cdFx0XHRcdGVuYWJsZU92ZXJyaWRlID0gdjtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8vIEVudi1zcGVjaWZpYyBpbml0aWFsaXphdGlvbiBsb2dpYyBmb3IgZGVidWcgaW5zdGFuY2VzXG5cdFx0aWYgKHR5cGVvZiBjcmVhdGVEZWJ1Zy5pbml0ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRjcmVhdGVEZWJ1Zy5pbml0KGRlYnVnKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGVidWc7XG5cdH1cblxuXHRmdW5jdGlvbiBleHRlbmQobmFtZXNwYWNlLCBkZWxpbWl0ZXIpIHtcblx0XHRjb25zdCBuZXdEZWJ1ZyA9IGNyZWF0ZURlYnVnKHRoaXMubmFtZXNwYWNlICsgKHR5cGVvZiBkZWxpbWl0ZXIgPT09ICd1bmRlZmluZWQnID8gJzonIDogZGVsaW1pdGVyKSArIG5hbWVzcGFjZSk7XG5cdFx0bmV3RGVidWcubG9nID0gdGhpcy5sb2c7XG5cdFx0cmV0dXJuIG5ld0RlYnVnO1xuXHR9XG5cblx0LyoqXG5cdCogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuXHQqIHNlcGFyYXRlZCBieSBhIGNvbG9uIGFuZCB3aWxkY2FyZHMuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG5cdFx0Y3JlYXRlRGVidWcuc2F2ZShuYW1lc3BhY2VzKTtcblx0XHRjcmVhdGVEZWJ1Zy5uYW1lc3BhY2VzID0gbmFtZXNwYWNlcztcblxuXHRcdGNyZWF0ZURlYnVnLm5hbWVzID0gW107XG5cdFx0Y3JlYXRlRGVidWcuc2tpcHMgPSBbXTtcblxuXHRcdGxldCBpO1xuXHRcdGNvbnN0IHNwbGl0ID0gKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJyA/IG5hbWVzcGFjZXMgOiAnJykuc3BsaXQoL1tcXHMsXSsvKTtcblx0XHRjb25zdCBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmICghc3BsaXRbaV0pIHtcblx0XHRcdFx0Ly8gaWdub3JlIGVtcHR5IHN0cmluZ3Ncblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdG5hbWVzcGFjZXMgPSBzcGxpdFtpXS5yZXBsYWNlKC9cXCovZywgJy4qPycpO1xuXG5cdFx0XHRpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG5cdFx0XHRcdGNyZWF0ZURlYnVnLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzLnNsaWNlKDEpICsgJyQnKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjcmVhdGVEZWJ1Zy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcyArICckJykpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuXHQqXG5cdCogQHJldHVybiB7U3RyaW5nfSBuYW1lc3BhY2VzXG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZGlzYWJsZSgpIHtcblx0XHRjb25zdCBuYW1lc3BhY2VzID0gW1xuXHRcdFx0Li4uY3JlYXRlRGVidWcubmFtZXMubWFwKHRvTmFtZXNwYWNlKSxcblx0XHRcdC4uLmNyZWF0ZURlYnVnLnNraXBzLm1hcCh0b05hbWVzcGFjZSkubWFwKG5hbWVzcGFjZSA9PiAnLScgKyBuYW1lc3BhY2UpXG5cdFx0XS5qb2luKCcsJyk7XG5cdFx0Y3JlYXRlRGVidWcuZW5hYmxlKCcnKTtcblx0XHRyZXR1cm4gbmFtZXNwYWNlcztcblx0fVxuXG5cdC8qKlxuXHQqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG5cdCogQHJldHVybiB7Qm9vbGVhbn1cblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcblx0XHRpZiAobmFtZVtuYW1lLmxlbmd0aCAtIDFdID09PSAnKicpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdGxldCBpO1xuXHRcdGxldCBsZW47XG5cblx0XHRmb3IgKGkgPSAwLCBsZW4gPSBjcmVhdGVEZWJ1Zy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKGNyZWF0ZURlYnVnLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGxlbiA9IGNyZWF0ZURlYnVnLm5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoY3JlYXRlRGVidWcubmFtZXNbaV0udGVzdChuYW1lKSkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvKipcblx0KiBDb252ZXJ0IHJlZ2V4cCB0byBuYW1lc3BhY2Vcblx0KlxuXHQqIEBwYXJhbSB7UmVnRXhwfSByZWd4ZXBcblx0KiBAcmV0dXJuIHtTdHJpbmd9IG5hbWVzcGFjZVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiB0b05hbWVzcGFjZShyZWdleHApIHtcblx0XHRyZXR1cm4gcmVnZXhwLnRvU3RyaW5nKClcblx0XHRcdC5zdWJzdHJpbmcoMiwgcmVnZXhwLnRvU3RyaW5nKCkubGVuZ3RoIC0gMilcblx0XHRcdC5yZXBsYWNlKC9cXC5cXCpcXD8kLywgJyonKTtcblx0fVxuXG5cdC8qKlxuXHQqIENvZXJjZSBgdmFsYC5cblx0KlxuXHQqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuXHQqIEByZXR1cm4ge01peGVkfVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiBjb2VyY2UodmFsKSB7XG5cdFx0aWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSB7XG5cdFx0XHRyZXR1cm4gdmFsLnN0YWNrIHx8IHZhbC5tZXNzYWdlO1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG5cblx0LyoqXG5cdCogWFhYIERPIE5PVCBVU0UuIFRoaXMgaXMgYSB0ZW1wb3Jhcnkgc3R1YiBmdW5jdGlvbi5cblx0KiBYWFggSXQgV0lMTCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2UuXG5cdCovXG5cdGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG5cdFx0Y29uc29sZS53YXJuKCdJbnN0YW5jZSBtZXRob2QgYGRlYnVnLmRlc3Ryb3koKWAgaXMgZGVwcmVjYXRlZCBhbmQgbm8gbG9uZ2VyIGRvZXMgYW55dGhpbmcuIEl0IHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIG9mIGBkZWJ1Z2AuJyk7XG5cdH1cblxuXHRjcmVhdGVEZWJ1Zy5lbmFibGUoY3JlYXRlRGVidWcubG9hZCgpKTtcblxuXHRyZXR1cm4gY3JlYXRlRGVidWc7XG59XG5cbnZhciBjb21tb24gPSBzZXR1cDtcblxuLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbihmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG5cdC8qKlxuXHQgKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG5cdCAqL1xuXG5cdGV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5cdGV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5cdGV4cG9ydHMubG9hZCA9IGxvYWQ7XG5cdGV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuXHRleHBvcnRzLnN0b3JhZ2UgPSBsb2NhbHN0b3JhZ2UoKTtcblx0ZXhwb3J0cy5kZXN0cm95ID0gKCgpID0+IHtcblx0XHRsZXQgd2FybmVkID0gZmFsc2U7XG5cblx0XHRyZXR1cm4gKCkgPT4ge1xuXHRcdFx0aWYgKCF3YXJuZWQpIHtcblx0XHRcdFx0d2FybmVkID0gdHJ1ZTtcblx0XHRcdFx0Y29uc29sZS53YXJuKCdJbnN0YW5jZSBtZXRob2QgYGRlYnVnLmRlc3Ryb3koKWAgaXMgZGVwcmVjYXRlZCBhbmQgbm8gbG9uZ2VyIGRvZXMgYW55dGhpbmcuIEl0IHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIG9mIGBkZWJ1Z2AuJyk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fSkoKTtcblxuXHQvKipcblx0ICogQ29sb3JzLlxuXHQgKi9cblxuXHRleHBvcnRzLmNvbG9ycyA9IFtcblx0XHQnIzAwMDBDQycsXG5cdFx0JyMwMDAwRkYnLFxuXHRcdCcjMDAzM0NDJyxcblx0XHQnIzAwMzNGRicsXG5cdFx0JyMwMDY2Q0MnLFxuXHRcdCcjMDA2NkZGJyxcblx0XHQnIzAwOTlDQycsXG5cdFx0JyMwMDk5RkYnLFxuXHRcdCcjMDBDQzAwJyxcblx0XHQnIzAwQ0MzMycsXG5cdFx0JyMwMENDNjYnLFxuXHRcdCcjMDBDQzk5Jyxcblx0XHQnIzAwQ0NDQycsXG5cdFx0JyMwMENDRkYnLFxuXHRcdCcjMzMwMENDJyxcblx0XHQnIzMzMDBGRicsXG5cdFx0JyMzMzMzQ0MnLFxuXHRcdCcjMzMzM0ZGJyxcblx0XHQnIzMzNjZDQycsXG5cdFx0JyMzMzY2RkYnLFxuXHRcdCcjMzM5OUNDJyxcblx0XHQnIzMzOTlGRicsXG5cdFx0JyMzM0NDMDAnLFxuXHRcdCcjMzNDQzMzJyxcblx0XHQnIzMzQ0M2NicsXG5cdFx0JyMzM0NDOTknLFxuXHRcdCcjMzNDQ0NDJyxcblx0XHQnIzMzQ0NGRicsXG5cdFx0JyM2NjAwQ0MnLFxuXHRcdCcjNjYwMEZGJyxcblx0XHQnIzY2MzNDQycsXG5cdFx0JyM2NjMzRkYnLFxuXHRcdCcjNjZDQzAwJyxcblx0XHQnIzY2Q0MzMycsXG5cdFx0JyM5OTAwQ0MnLFxuXHRcdCcjOTkwMEZGJyxcblx0XHQnIzk5MzNDQycsXG5cdFx0JyM5OTMzRkYnLFxuXHRcdCcjOTlDQzAwJyxcblx0XHQnIzk5Q0MzMycsXG5cdFx0JyNDQzAwMDAnLFxuXHRcdCcjQ0MwMDMzJyxcblx0XHQnI0NDMDA2NicsXG5cdFx0JyNDQzAwOTknLFxuXHRcdCcjQ0MwMENDJyxcblx0XHQnI0NDMDBGRicsXG5cdFx0JyNDQzMzMDAnLFxuXHRcdCcjQ0MzMzMzJyxcblx0XHQnI0NDMzM2NicsXG5cdFx0JyNDQzMzOTknLFxuXHRcdCcjQ0MzM0NDJyxcblx0XHQnI0NDMzNGRicsXG5cdFx0JyNDQzY2MDAnLFxuXHRcdCcjQ0M2NjMzJyxcblx0XHQnI0NDOTkwMCcsXG5cdFx0JyNDQzk5MzMnLFxuXHRcdCcjQ0NDQzAwJyxcblx0XHQnI0NDQ0MzMycsXG5cdFx0JyNGRjAwMDAnLFxuXHRcdCcjRkYwMDMzJyxcblx0XHQnI0ZGMDA2NicsXG5cdFx0JyNGRjAwOTknLFxuXHRcdCcjRkYwMENDJyxcblx0XHQnI0ZGMDBGRicsXG5cdFx0JyNGRjMzMDAnLFxuXHRcdCcjRkYzMzMzJyxcblx0XHQnI0ZGMzM2NicsXG5cdFx0JyNGRjMzOTknLFxuXHRcdCcjRkYzM0NDJyxcblx0XHQnI0ZGMzNGRicsXG5cdFx0JyNGRjY2MDAnLFxuXHRcdCcjRkY2NjMzJyxcblx0XHQnI0ZGOTkwMCcsXG5cdFx0JyNGRjk5MzMnLFxuXHRcdCcjRkZDQzAwJyxcblx0XHQnI0ZGQ0MzMydcblx0XTtcblxuXHQvKipcblx0ICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcblx0ICogYW5kIHRoZSBGaXJlYnVnIGV4dGVuc2lvbiAoYW55IEZpcmVmb3ggdmVyc2lvbikgYXJlIGtub3duXG5cdCAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cblx0ICpcblx0ICogVE9ETzogYWRkIGEgYGxvY2FsU3RvcmFnZWAgdmFyaWFibGUgdG8gZXhwbGljaXRseSBlbmFibGUvZGlzYWJsZSBjb2xvcnNcblx0ICovXG5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcblx0ZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuXHRcdC8vIE5COiBJbiBhbiBFbGVjdHJvbiBwcmVsb2FkIHNjcmlwdCwgZG9jdW1lbnQgd2lsbCBiZSBkZWZpbmVkIGJ1dCBub3QgZnVsbHlcblx0XHQvLyBpbml0aWFsaXplZC4gU2luY2Ugd2Uga25vdyB3ZSdyZSBpbiBDaHJvbWUsIHdlJ2xsIGp1c3QgZGV0ZWN0IHRoaXMgY2FzZVxuXHRcdC8vIGV4cGxpY2l0bHlcblx0XHRpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnByb2Nlc3MgJiYgKHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicgfHwgd2luZG93LnByb2Nlc3MuX19ud2pzKSkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gSW50ZXJuZXQgRXhwbG9yZXIgYW5kIEVkZ2UgZG8gbm90IHN1cHBvcnQgY29sb3JzLlxuXHRcdGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvKGVkZ2V8dHJpZGVudClcXC8oXFxkKykvKSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIElzIHdlYmtpdD8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTY0NTk2MDYvMzc2NzczXG5cdFx0Ly8gZG9jdW1lbnQgaXMgdW5kZWZpbmVkIGluIHJlYWN0LW5hdGl2ZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9wdWxsLzE2MzJcblx0XHRyZXR1cm4gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSkgfHxcblx0XHRcdC8vIElzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzNcblx0XHRcdCh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY29uc29sZSAmJiAod2luZG93LmNvbnNvbGUuZmlyZWJ1ZyB8fCAod2luZG93LmNvbnNvbGUuZXhjZXB0aW9uICYmIHdpbmRvdy5jb25zb2xlLnRhYmxlKSkpIHx8XG5cdFx0XHQvLyBJcyBmaXJlZm94ID49IHYzMT9cblx0XHRcdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuXHRcdFx0KHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEpIHx8XG5cdFx0XHQvLyBEb3VibGUgY2hlY2sgd2Via2l0IGluIHVzZXJBZ2VudCBqdXN0IGluIGNhc2Ugd2UgYXJlIGluIGEgd29ya2VyXG5cdFx0XHQodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2FwcGxld2Via2l0XFwvKFxcZCspLykpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbG9yaXplIGxvZyBhcmd1bWVudHMgaWYgZW5hYmxlZC5cblx0ICpcblx0ICogQGFwaSBwdWJsaWNcblx0ICovXG5cblx0ZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG5cdFx0YXJnc1swXSA9ICh0aGlzLnVzZUNvbG9ycyA/ICclYycgOiAnJykgK1xuXHRcdFx0dGhpcy5uYW1lc3BhY2UgK1xuXHRcdFx0KHRoaXMudXNlQ29sb3JzID8gJyAlYycgOiAnICcpICtcblx0XHRcdGFyZ3NbMF0gK1xuXHRcdFx0KHRoaXMudXNlQ29sb3JzID8gJyVjICcgOiAnICcpICtcblx0XHRcdCcrJyArIG1vZHVsZS5leHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cblx0XHRpZiAoIXRoaXMudXNlQ29sb3JzKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3QgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG5cdFx0YXJncy5zcGxpY2UoMSwgMCwgYywgJ2NvbG9yOiBpbmhlcml0Jyk7XG5cblx0XHQvLyBUaGUgZmluYWwgXCIlY1wiIGlzIHNvbWV3aGF0IHRyaWNreSwgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBvdGhlclxuXHRcdC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cblx0XHQvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cblx0XHRsZXQgaW5kZXggPSAwO1xuXHRcdGxldCBsYXN0QyA9IDA7XG5cdFx0YXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIG1hdGNoID0+IHtcblx0XHRcdGlmIChtYXRjaCA9PT0gJyUlJykge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRpbmRleCsrO1xuXHRcdFx0aWYgKG1hdGNoID09PSAnJWMnKSB7XG5cdFx0XHRcdC8vIFdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuXHRcdFx0XHQvLyAodGhlIHVzZXIgbWF5IGhhdmUgcHJvdmlkZWQgdGhlaXIgb3duKVxuXHRcdFx0XHRsYXN0QyA9IGluZGV4O1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0YXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEludm9rZXMgYGNvbnNvbGUuZGVidWcoKWAgd2hlbiBhdmFpbGFibGUuXG5cdCAqIE5vLW9wIHdoZW4gYGNvbnNvbGUuZGVidWdgIGlzIG5vdCBhIFwiZnVuY3Rpb25cIi5cblx0ICogSWYgYGNvbnNvbGUuZGVidWdgIGlzIG5vdCBhdmFpbGFibGUsIGZhbGxzIGJhY2tcblx0ICogdG8gYGNvbnNvbGUubG9nYC5cblx0ICpcblx0ICogQGFwaSBwdWJsaWNcblx0ICovXG5cdGV4cG9ydHMubG9nID0gY29uc29sZS5kZWJ1ZyB8fCBjb25zb2xlLmxvZyB8fCAoKCkgPT4ge30pO1xuXG5cdC8qKlxuXHQgKiBTYXZlIGBuYW1lc3BhY2VzYC5cblx0ICpcblx0ICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcblx0ICogQGFwaSBwcml2YXRlXG5cdCAqL1xuXHRmdW5jdGlvbiBzYXZlKG5hbWVzcGFjZXMpIHtcblx0XHR0cnkge1xuXHRcdFx0aWYgKG5hbWVzcGFjZXMpIHtcblx0XHRcdFx0ZXhwb3J0cy5zdG9yYWdlLnNldEl0ZW0oJ2RlYnVnJywgbmFtZXNwYWNlcyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRleHBvcnRzLnN0b3JhZ2UucmVtb3ZlSXRlbSgnZGVidWcnKTtcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0Ly8gU3dhbGxvd1xuXHRcdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIExvYWQgYG5hbWVzcGFjZXNgLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybnMgdGhlIHByZXZpb3VzbHkgcGVyc2lzdGVkIGRlYnVnIG1vZGVzXG5cdCAqIEBhcGkgcHJpdmF0ZVxuXHQgKi9cblx0ZnVuY3Rpb24gbG9hZCgpIHtcblx0XHRsZXQgcjtcblx0XHR0cnkge1xuXHRcdFx0ciA9IGV4cG9ydHMuc3RvcmFnZS5nZXRJdGVtKCdkZWJ1ZycpO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHQvLyBTd2FsbG93XG5cdFx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0XHR9XG5cblx0XHQvLyBJZiBkZWJ1ZyBpc24ndCBzZXQgaW4gTFMsIGFuZCB3ZSdyZSBpbiBFbGVjdHJvbiwgdHJ5IHRvIGxvYWQgJERFQlVHXG5cdFx0aWYgKCFyICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAnZW52JyBpbiBwcm9jZXNzKSB7XG5cdFx0XHRyID0gcHJvY2Vzcy5lbnYuREVCVUc7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHI7XG5cdH1cblxuXHQvKipcblx0ICogTG9jYWxzdG9yYWdlIGF0dGVtcHRzIHRvIHJldHVybiB0aGUgbG9jYWxzdG9yYWdlLlxuXHQgKlxuXHQgKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3Ncblx0ICogd2hlbiBhIHVzZXIgZGlzYWJsZXMgY29va2llcy9sb2NhbHN0b3JhZ2Vcblx0ICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cblx0ICpcblx0ICogQHJldHVybiB7TG9jYWxTdG9yYWdlfVxuXHQgKiBAYXBpIHByaXZhdGVcblx0ICovXG5cblx0ZnVuY3Rpb24gbG9jYWxzdG9yYWdlKCkge1xuXHRcdHRyeSB7XG5cdFx0XHQvLyBUVk1MS2l0IChBcHBsZSBUViBKUyBSdW50aW1lKSBkb2VzIG5vdCBoYXZlIGEgd2luZG93IG9iamVjdCwganVzdCBsb2NhbFN0b3JhZ2UgaW4gdGhlIGdsb2JhbCBjb250ZXh0XG5cdFx0XHQvLyBUaGUgQnJvd3NlciBhbHNvIGhhcyBsb2NhbFN0b3JhZ2UgaW4gdGhlIGdsb2JhbCBjb250ZXh0LlxuXHRcdFx0cmV0dXJuIGxvY2FsU3RvcmFnZTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0Ly8gU3dhbGxvd1xuXHRcdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdFx0fVxuXHR9XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBjb21tb24oZXhwb3J0cyk7XG5cblx0Y29uc3Qge2Zvcm1hdHRlcnN9ID0gbW9kdWxlLmV4cG9ydHM7XG5cblx0LyoqXG5cdCAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cblx0ICovXG5cblx0Zm9ybWF0dGVycy5qID0gZnVuY3Rpb24gKHYpIHtcblx0XHR0cnkge1xuXHRcdFx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KHYpO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRyZXR1cm4gJ1tVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiAnICsgZXJyb3IubWVzc2FnZTtcblx0XHR9XG5cdH07XG59IChicm93c2VyLCBicm93c2VyLmV4cG9ydHMpKTtcblxudmFyIGRlYnVnID0gYnJvd3Nlci5leHBvcnRzO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDIxIEFkb2JlXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIE5PVElDRTogQWRvYmUgcGVybWl0cyB5b3UgdG8gdXNlLCBtb2RpZnksIGFuZCBkaXN0cmlidXRlIHRoaXMgZmlsZSBpblxuICogYWNjb3JkYW5jZSB3aXRoIHRoZSB0ZXJtcyBvZiB0aGUgQWRvYmUgbGljZW5zZSBhZ3JlZW1lbnQgYWNjb21wYW55aW5nXG4gKiBpdC5cbiAqL1xuY2xhc3MgSW5jb21wYXRpYmxlQnJvd3NlckVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihcIlRoZSBicm93c2VyIHlvdSBhcmUgdXNpbmcgaXNuJ3QgY29tcGF0aWJsZSB3aXRoIHRoaXMgYXBwbGljYXRpb24sIG9yIEhUVFBTIGlzIG5vdCBiZWluZyB1c2VkIG9uIGEgbm9uLWxvY2FsaG9zdCBkb21haW4uXCIpO1xuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgfVxufVxuY2xhc3MgSW52YWxpZFdvcmtlclNvdXJjZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHVybCwgcmVzLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGBDb3VsZCBub3QgZmV0Y2ggd2ViIHdvcmtlciBmcm9tICR7dXJsfWAsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xuICAgICAgICB0aGlzLnJlc3BvbnNlID0gcmVzO1xuICAgIH1cbn1cbmNsYXNzIEludmFsaWRJbnB1dEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihgSW52YWxpZCBpbnB1dCBwYXNzZWRgKTtcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgIH1cbn1cbmNsYXNzIEludmFsaWRNaW1lVHlwZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1pbWVUeXBlKSB7XG4gICAgICAgIHN1cGVyKGBJbnZhbGlkIG1pbWUgdHlwZSBmb3VuZCBvbiBhc3NldGApO1xuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgICAgIHRoaXMubWltZVR5cGUgPSBtaW1lVHlwZTtcbiAgICB9XG59XG5jbGFzcyBVcmxGZXRjaEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHVybCwgcmVzLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGBDb3VsZCBub3QgZmV0Y2ggcmVzb3VyY2UgZnJvbSAke3VybH1gLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgICAgICB0aGlzLnVybCA9IHVybDtcbiAgICAgICAgdGhpcy5yZXNwb25zZSA9IHJlcztcbiAgICB9XG59XG5jbGFzcyBTaWduaW5nU3RvcmFnZU1pc3NpbmdFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoYEF0IGxlYXN0IG9uZSBlbGVtZW50IG11c3QgYmUgcHJvdmlkZWQgdG8gc3RvcmFnZUxvY2F0aW9ucy5gKTtcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgIH1cbn1cbmNsYXNzIEludmFsaWRDb25maWdFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihpZGVudGlmaWVyID0gbnVsbCkge1xuICAgICAgICBpZiAoaWRlbnRpZmllcikge1xuICAgICAgICAgICAgc3VwZXIoYCR7SW52YWxpZENvbmZpZ0Vycm9yLmJhc2VNZXNzYWdlfSBmb3IgJHtpZGVudGlmaWVyfWApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3VwZXIoSW52YWxpZENvbmZpZ0Vycm9yLmJhc2VNZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgICAgIHRoaXMuaWRlbnRpZmllciA9IGlkZW50aWZpZXI7XG4gICAgfVxufVxuSW52YWxpZENvbmZpZ0Vycm9yLmJhc2VNZXNzYWdlID0gYEludmFsaWQgb3IgbWlzc2luZyBjb25maWcgb3B0aW9ucyBwYXNzZWRgO1xuY2xhc3MgSW52YWxpZFRodW1ibmFpbFNvdXJjZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHJlY2VpdmVkTWltZVR5cGUpIHtcbiAgICAgICAgc3VwZXIoYEludmFsaWQgdGh1bWJuYWlsIHNvdXJjZSBNSU1FIHR5cGUuIFJlY2VpdmVkICR7cmVjZWl2ZWRNaW1lVHlwZX1gKTtcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgICAgICB0aGlzLnJlY2VpdmVkTWltZVR5cGUgPSByZWNlaXZlZE1pbWVUeXBlO1xuICAgIH1cbn1cbmNsYXNzIFJlc2l6ZUltYWdlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcihgRXJyb3IgcmVzaXppbmcgaW1hZ2VgLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgIH1cbn1cbmNsYXNzIEMycGFTaWduaW5nRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcihgRXJyb3Igc2lnbmluZyBpbWFnZSB3aXRoIEMyUEFgLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgIH1cbn1cbmNsYXNzIEMycGFTY2FubmluZ0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoYEVycm9yIHNjYW5uaW5nIGltYWdlIGZvciBDMlBBYCwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgICB9XG59XG5jbGFzcyBTaWduaW5nQ2FuY2VsbGVkRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcihgU2lnbmluZyBvcGVyYXRpb24gaGFzIGJlZW4gY2FuY2VsbGVkYCwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgICB9XG59XG5jbGFzcyBJbmdyZWRpZW50SWRlbnRpZmllck1pc3NpbmcgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcihgQW4gaWRlbnRpZmllciBtdXN0IGJlIHByb3ZpZGVkIHdoZW4gY3JlYXRpbmcgaW5ncmVkaWVudHMgYW5kIGdlbmVyYXRlSWRlbnRpZmllcklmTWlzc2luZyBpcyBzZXQgdG8gZmFsc2UuYCwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgICB9XG59XG5jbGFzcyBJbmdyZWRpZW50SGFzaE1pc3NpbmdFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihpbmdyZWRpZW50LCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGBUaGUgc3VwcGxpZWQgaW5ncmVkaWVudCBpcyBtaXNzaW5nIGEgaGFzaCB2YWx1ZWAsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgICAgIHRoaXMuaW5ncmVkaWVudCA9IGluZ3JlZGllbnQ7XG4gICAgfVxufVxuXG4vKipcbiAqIENvcHlyaWdodCAyMDIxIEFkb2JlXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIE5PVElDRTogQWRvYmUgcGVybWl0cyB5b3UgdG8gdXNlLCBtb2RpZnksIGFuZCBkaXN0cmlidXRlIHRoaXMgZmlsZSBpblxuICogYWNjb3JkYW5jZSB3aXRoIHRoZSB0ZXJtcyBvZiB0aGUgQWRvYmUgbGljZW5zZSBhZ3JlZW1lbnQgYWNjb21wYW55aW5nXG4gKiBpdC5cbiAqL1xuY29uc3QgV0lORE9XX0ZFQVRVUkVTID0gW1xuICAgICdBcnJheUJ1ZmZlcicsXG4gICAgJ0ZpbGUnLFxuICAgICdGaWxlUmVhZGVyJyxcbiAgICAnU3VidGxlQ3J5cHRvJyxcbiAgICAnVWludDhBcnJheScsXG4gICAgJ1dlYkFzc2VtYmx5JyxcbiAgICAnZmV0Y2gnLFxuXTtcbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBjdXJyZW50IGJyb3dzZXIgaXMgY29tcGF0aWJsZSB3aXRoIHRoZSBmZWF0dXJlcyBuZWVkZWQgZm9yXG4gKiB0aGlzIGxpYnJhcnkuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNDb21wYXRpYmxlKCkge1xuICAgIHJldHVybiBXSU5ET1dfRkVBVFVSRVMuZXZlcnkoKHgpID0+IHggaW4gc2VsZik7XG59XG4vKipcbiAqIFRocm93cyBhbiBlcnJvciBpZiB0aGUgY3VycmVudCBicm93c2VyIGlzIGluY29tcGF0aWJsZSB3aXRoIHRoaXMgbGlicmFyeS5cbiAqL1xuZnVuY3Rpb24gZW5zdXJlQ29tcGF0aWJpbGl0eSgpIHtcbiAgICBpZiAoIWlzQ29tcGF0aWJsZSgpKSB7XG4gICAgICAgIHRocm93IG5ldyBJbmNvbXBhdGlibGVCcm93c2VyRXJyb3IoKTtcbiAgICB9XG59XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG5cclxuZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XHJcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICovXG5cbmZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyJDEoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxudmFyIF9saXN0Q2FjaGVDbGVhciA9IGxpc3RDYWNoZUNsZWFyJDE7XG5cbi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuXG5mdW5jdGlvbiBlcSQ1KHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxudmFyIGVxXzEgPSBlcSQ1O1xuXG52YXIgZXEkNCA9IGVxXzE7XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZiQ0KGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxJDQoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG52YXIgX2Fzc29jSW5kZXhPZiA9IGFzc29jSW5kZXhPZiQ0O1xuXG52YXIgYXNzb2NJbmRleE9mJDMgPSBfYXNzb2NJbmRleE9mO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2U7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZSQxKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZiQzKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgZGF0YS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gIH1cbiAgLS10aGlzLnNpemU7XG4gIHJldHVybiB0cnVlO1xufVxuXG52YXIgX2xpc3RDYWNoZURlbGV0ZSA9IGxpc3RDYWNoZURlbGV0ZSQxO1xuXG52YXIgYXNzb2NJbmRleE9mJDIgPSBfYXNzb2NJbmRleE9mO1xuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQkMShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YkMihkYXRhLCBrZXkpO1xuXG4gIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbn1cblxudmFyIF9saXN0Q2FjaGVHZXQgPSBsaXN0Q2FjaGVHZXQkMTtcblxudmFyIGFzc29jSW5kZXhPZiQxID0gX2Fzc29jSW5kZXhPZjtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUhhcyQxKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mJDEodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xufVxuXG52YXIgX2xpc3RDYWNoZUhhcyA9IGxpc3RDYWNoZUhhcyQxO1xuXG52YXIgYXNzb2NJbmRleE9mID0gX2Fzc29jSW5kZXhPZjtcblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQkMShrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgICsrdGhpcy5zaXplO1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbnZhciBfbGlzdENhY2hlU2V0ID0gbGlzdENhY2hlU2V0JDE7XG5cbnZhciBsaXN0Q2FjaGVDbGVhciA9IF9saXN0Q2FjaGVDbGVhcixcbiAgICBsaXN0Q2FjaGVEZWxldGUgPSBfbGlzdENhY2hlRGVsZXRlLFxuICAgIGxpc3RDYWNoZUdldCA9IF9saXN0Q2FjaGVHZXQsXG4gICAgbGlzdENhY2hlSGFzID0gX2xpc3RDYWNoZUhhcyxcbiAgICBsaXN0Q2FjaGVTZXQgPSBfbGlzdENhY2hlU2V0O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIExpc3RDYWNoZSQ0KGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG5MaXN0Q2FjaGUkNC5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZSQ0LnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG5MaXN0Q2FjaGUkNC5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuTGlzdENhY2hlJDQucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZSQ0LnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbnZhciBfTGlzdENhY2hlID0gTGlzdENhY2hlJDQ7XG5cbnZhciBMaXN0Q2FjaGUkMyA9IF9MaXN0Q2FjaGU7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqL1xuZnVuY3Rpb24gc3RhY2tDbGVhciQxKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZSQzO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG52YXIgX3N0YWNrQ2xlYXIgPSBzdGFja0NsZWFyJDE7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cblxuZnVuY3Rpb24gc3RhY2tEZWxldGUkMShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbnZhciBfc3RhY2tEZWxldGUgPSBzdGFja0RlbGV0ZSQxO1xuXG4vKipcbiAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5cbmZ1bmN0aW9uIHN0YWNrR2V0JDEoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xufVxuXG52YXIgX3N0YWNrR2V0ID0gc3RhY2tHZXQkMTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cblxuZnVuY3Rpb24gc3RhY2tIYXMkMShrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG59XG5cbnZhciBfc3RhY2tIYXMgPSBzdGFja0hhcyQxO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xuXG52YXIgZnJlZUdsb2JhbCQxID0gdHlwZW9mIGNvbW1vbmpzR2xvYmFsID09ICdvYmplY3QnICYmIGNvbW1vbmpzR2xvYmFsICYmIGNvbW1vbmpzR2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGNvbW1vbmpzR2xvYmFsO1xuXG52YXIgX2ZyZWVHbG9iYWwgPSBmcmVlR2xvYmFsJDE7XG5cbnZhciBmcmVlR2xvYmFsID0gX2ZyZWVHbG9iYWw7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCRhID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG52YXIgX3Jvb3QgPSByb290JGE7XG5cbnZhciBfU3ltYm9sO1xudmFyIGhhc1JlcXVpcmVkX1N5bWJvbDtcblxuZnVuY3Rpb24gcmVxdWlyZV9TeW1ib2wgKCkge1xuXHRpZiAoaGFzUmVxdWlyZWRfU3ltYm9sKSByZXR1cm4gX1N5bWJvbDtcblx0aGFzUmVxdWlyZWRfU3ltYm9sID0gMTtcblx0dmFyIHJvb3QgPSBfcm9vdDtcblxuXHQvKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cblx0dmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5cdF9TeW1ib2wgPSBTeW1ib2w7XG5cdHJldHVybiBfU3ltYm9sO1xufVxuXG52YXIgU3ltYm9sJDUgPSByZXF1aXJlX1N5bWJvbCgpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8kZiA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5JGMgPSBvYmplY3RQcm90byRmLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmckMSA9IG9iamVjdFByb3RvJGYudG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnJDEgPSBTeW1ib2wkNSA/IFN5bWJvbCQ1LnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyQxKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5JGMuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWckMSksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZyQxXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnJDFdID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nJDEuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWckMV0gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZyQxXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIF9nZXRSYXdUYWcgPSBnZXRSYXdUYWckMTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xuXG52YXIgb2JqZWN0UHJvdG8kZSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvJGUudG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyQxKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxudmFyIF9vYmplY3RUb1N0cmluZyA9IG9iamVjdFRvU3RyaW5nJDE7XG5cbnZhciBTeW1ib2wkNCA9IHJlcXVpcmVfU3ltYm9sKCksXG4gICAgZ2V0UmF3VGFnID0gX2dldFJhd1RhZyxcbiAgICBvYmplY3RUb1N0cmluZyA9IF9vYmplY3RUb1N0cmluZztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sJDQgPyBTeW1ib2wkNC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWckNyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbnZhciBfYmFzZUdldFRhZyA9IGJhc2VHZXRUYWckNztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuXG5mdW5jdGlvbiBpc09iamVjdCRjKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG52YXIgaXNPYmplY3RfMSA9IGlzT2JqZWN0JGM7XG5cbnZhciBiYXNlR2V0VGFnJDYgPSBfYmFzZUdldFRhZyxcbiAgICBpc09iamVjdCRiID0gaXNPYmplY3RfMTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgIGZ1bmNUYWckMiA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnJDEgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24kMyh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0JGIodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWckNih2YWx1ZSk7XG4gIHJldHVybiB0YWcgPT0gZnVuY1RhZyQyIHx8IHRhZyA9PSBnZW5UYWckMSB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG52YXIgaXNGdW5jdGlvbl8xID0gaXNGdW5jdGlvbiQzO1xuXG52YXIgcm9vdCQ5ID0gX3Jvb3Q7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbnZhciBjb3JlSnNEYXRhJDEgPSByb290JDlbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG52YXIgX2NvcmVKc0RhdGEgPSBjb3JlSnNEYXRhJDE7XG5cbnZhciBjb3JlSnNEYXRhID0gX2NvcmVKc0RhdGE7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG52YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xufSgpKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc01hc2tlZCQxKGZ1bmMpIHtcbiAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbn1cblxudmFyIF9pc01hc2tlZCA9IGlzTWFza2VkJDE7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cblxudmFyIGZ1bmNQcm90byQyID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nJDIgPSBmdW5jUHJvdG8kMi50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlJDIoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmckMi5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxudmFyIF90b1NvdXJjZSA9IHRvU291cmNlJDI7XG5cbnZhciBpc0Z1bmN0aW9uJDIgPSBpc0Z1bmN0aW9uXzEsXG4gICAgaXNNYXNrZWQgPSBfaXNNYXNrZWQsXG4gICAgaXNPYmplY3QkYSA9IGlzT2JqZWN0XzEsXG4gICAgdG9Tb3VyY2UkMSA9IF90b1NvdXJjZTtcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8kMSA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byRkID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyQxID0gZnVuY1Byb3RvJDEudG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5JGIgPSBvYmplY3RQcm90byRkLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nJDEuY2FsbChoYXNPd25Qcm9wZXJ0eSRiKS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYXRpdmUkMSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0JGEodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24kMih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlJDEodmFsdWUpKTtcbn1cblxudmFyIF9iYXNlSXNOYXRpdmUgPSBiYXNlSXNOYXRpdmUkMTtcblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuXG5mdW5jdGlvbiBnZXRWYWx1ZSQxKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG52YXIgX2dldFZhbHVlID0gZ2V0VmFsdWUkMTtcblxudmFyIGJhc2VJc05hdGl2ZSA9IF9iYXNlSXNOYXRpdmUsXG4gICAgZ2V0VmFsdWUgPSBfZ2V0VmFsdWU7XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZSQ2KG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxudmFyIF9nZXROYXRpdmUgPSBnZXROYXRpdmUkNjtcblxudmFyIGdldE5hdGl2ZSQ1ID0gX2dldE5hdGl2ZSxcbiAgICByb290JDggPSBfcm9vdDtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIE1hcCQ0ID0gZ2V0TmF0aXZlJDUocm9vdCQ4LCAnTWFwJyk7XG5cbnZhciBfTWFwID0gTWFwJDQ7XG5cbnZhciBnZXROYXRpdmUkNCA9IF9nZXROYXRpdmU7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBuYXRpdmVDcmVhdGUkNCA9IGdldE5hdGl2ZSQ0KE9iamVjdCwgJ2NyZWF0ZScpO1xuXG52YXIgX25hdGl2ZUNyZWF0ZSA9IG5hdGl2ZUNyZWF0ZSQ0O1xuXG52YXIgbmF0aXZlQ3JlYXRlJDMgPSBfbmF0aXZlQ3JlYXRlO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovXG5mdW5jdGlvbiBoYXNoQ2xlYXIkMSgpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSQzID8gbmF0aXZlQ3JlYXRlJDMobnVsbCkgOiB7fTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxudmFyIF9oYXNoQ2xlYXIgPSBoYXNoQ2xlYXIkMTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cblxuZnVuY3Rpb24gaGFzaERlbGV0ZSQxKGtleSkge1xuICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbnZhciBfaGFzaERlbGV0ZSA9IGhhc2hEZWxldGUkMTtcblxudmFyIG5hdGl2ZUNyZWF0ZSQyID0gX25hdGl2ZUNyZWF0ZTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEJDEgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byRjID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkkYSA9IG9iamVjdFByb3RvJGMuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBoYXNoR2V0JDEoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSQyKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCQxID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICB9XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eSRhLmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxudmFyIF9oYXNoR2V0ID0gaGFzaEdldCQxO1xuXG52YXIgbmF0aXZlQ3JlYXRlJDEgPSBfbmF0aXZlQ3JlYXRlO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8kYiA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5JDkgPSBvYmplY3RQcm90byRiLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hIYXMkMShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICByZXR1cm4gbmF0aXZlQ3JlYXRlJDEgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkkOS5jYWxsKGRhdGEsIGtleSk7XG59XG5cbnZhciBfaGFzaEhhcyA9IGhhc2hIYXMkMTtcblxudmFyIG5hdGl2ZUNyZWF0ZSA9IF9uYXRpdmVDcmVhdGU7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqXG4gKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gaGFzaFNldCQxKGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbnZhciBfaGFzaFNldCA9IGhhc2hTZXQkMTtcblxudmFyIGhhc2hDbGVhciA9IF9oYXNoQ2xlYXIsXG4gICAgaGFzaERlbGV0ZSA9IF9oYXNoRGVsZXRlLFxuICAgIGhhc2hHZXQgPSBfaGFzaEdldCxcbiAgICBoYXNoSGFzID0gX2hhc2hIYXMsXG4gICAgaGFzaFNldCA9IF9oYXNoU2V0O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gSGFzaCQxKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaCQxLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gkMS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbkhhc2gkMS5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gkMS5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gkMS5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxudmFyIF9IYXNoID0gSGFzaCQxO1xuXG52YXIgSGFzaCA9IF9IYXNoLFxuICAgIExpc3RDYWNoZSQyID0gX0xpc3RDYWNoZSxcbiAgICBNYXAkMyA9IF9NYXA7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIkMSgpIHtcbiAgdGhpcy5zaXplID0gMDtcbiAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICdtYXAnOiBuZXcgKE1hcCQzIHx8IExpc3RDYWNoZSQyKSxcbiAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgfTtcbn1cblxudmFyIF9tYXBDYWNoZUNsZWFyID0gbWFwQ2FjaGVDbGVhciQxO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuXG5mdW5jdGlvbiBpc0tleWFibGUkMSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG52YXIgX2lzS2V5YWJsZSA9IGlzS2V5YWJsZSQxO1xuXG52YXIgaXNLZXlhYmxlID0gX2lzS2V5YWJsZTtcblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YSQ0KG1hcCwga2V5KSB7XG4gIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgIDogZGF0YS5tYXA7XG59XG5cbnZhciBfZ2V0TWFwRGF0YSA9IGdldE1hcERhdGEkNDtcblxudmFyIGdldE1hcERhdGEkMyA9IF9nZXRNYXBEYXRhO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUkMShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEkMyh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbnZhciBfbWFwQ2FjaGVEZWxldGUgPSBtYXBDYWNoZURlbGV0ZSQxO1xuXG52YXIgZ2V0TWFwRGF0YSQyID0gX2dldE1hcERhdGE7XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldCQxKGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSQyKHRoaXMsIGtleSkuZ2V0KGtleSk7XG59XG5cbnZhciBfbWFwQ2FjaGVHZXQgPSBtYXBDYWNoZUdldCQxO1xuXG52YXIgZ2V0TWFwRGF0YSQxID0gX2dldE1hcERhdGE7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMkMShrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEkMSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xufVxuXG52YXIgX21hcENhY2hlSGFzID0gbWFwQ2FjaGVIYXMkMTtcblxudmFyIGdldE1hcERhdGEgPSBfZ2V0TWFwRGF0YTtcblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldCQxKGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbnZhciBfbWFwQ2FjaGVTZXQgPSBtYXBDYWNoZVNldCQxO1xuXG52YXIgbWFwQ2FjaGVDbGVhciA9IF9tYXBDYWNoZUNsZWFyLFxuICAgIG1hcENhY2hlRGVsZXRlID0gX21hcENhY2hlRGVsZXRlLFxuICAgIG1hcENhY2hlR2V0ID0gX21hcENhY2hlR2V0LFxuICAgIG1hcENhY2hlSGFzID0gX21hcENhY2hlSGFzLFxuICAgIG1hcENhY2hlU2V0ID0gX21hcENhY2hlU2V0O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUkMihlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZSQyLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7XG5NYXBDYWNoZSQyLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlJDIucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUkMi5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7XG5NYXBDYWNoZSQyLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxudmFyIF9NYXBDYWNoZSA9IE1hcENhY2hlJDI7XG5cbnZhciBMaXN0Q2FjaGUkMSA9IF9MaXN0Q2FjaGUsXG4gICAgTWFwJDIgPSBfTWFwLFxuICAgIE1hcENhY2hlJDEgPSBfTWFwQ2FjaGU7XG5cbi8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xudmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbi8qKlxuICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrU2V0JDEoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlJDEpIHtcbiAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgIGlmICghTWFwJDIgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgdGhpcy5zaXplID0gKytkYXRhLnNpemU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGUkMShwYWlycyk7XG4gIH1cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbnZhciBfc3RhY2tTZXQgPSBzdGFja1NldCQxO1xuXG52YXIgTGlzdENhY2hlID0gX0xpc3RDYWNoZSxcbiAgICBzdGFja0NsZWFyID0gX3N0YWNrQ2xlYXIsXG4gICAgc3RhY2tEZWxldGUgPSBfc3RhY2tEZWxldGUsXG4gICAgc3RhY2tHZXQgPSBfc3RhY2tHZXQsXG4gICAgc3RhY2tIYXMgPSBfc3RhY2tIYXMsXG4gICAgc3RhY2tTZXQgPSBfc3RhY2tTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFN0YWNrJDQoZW50cmllcykge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG5TdGFjayQ0LnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG5TdGFjayQ0LnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcblN0YWNrJDQucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuU3RhY2skNC5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG5TdGFjayQ0LnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxudmFyIF9TdGFjayA9IFN0YWNrJDQ7XG5cbnZhciBnZXROYXRpdmUkMyA9IF9nZXROYXRpdmU7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSQyID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIHZhciBmdW5jID0gZ2V0TmF0aXZlJDMoT2JqZWN0LCAnZGVmaW5lUHJvcGVydHknKTtcbiAgICBmdW5jKHt9LCAnJywge30pO1xuICAgIHJldHVybiBmdW5jO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5JDI7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSQxID0gX2RlZmluZVByb3BlcnR5O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBhc3NpZ25WYWx1ZWAgYW5kIGBhc3NpZ25NZXJnZVZhbHVlYCB3aXRob3V0XG4gKiB2YWx1ZSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYmFzZUFzc2lnblZhbHVlJDUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgPT0gJ19fcHJvdG9fXycgJiYgZGVmaW5lUHJvcGVydHkkMSkge1xuICAgIGRlZmluZVByb3BlcnR5JDEob2JqZWN0LCBrZXksIHtcbiAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgJ2VudW1lcmFibGUnOiB0cnVlLFxuICAgICAgJ3ZhbHVlJzogdmFsdWUsXG4gICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgfVxufVxuXG52YXIgX2Jhc2VBc3NpZ25WYWx1ZSA9IGJhc2VBc3NpZ25WYWx1ZSQ1O1xuXG52YXIgYmFzZUFzc2lnblZhbHVlJDQgPSBfYmFzZUFzc2lnblZhbHVlLFxuICAgIGVxJDMgPSBlcV8xO1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXNzaWduVmFsdWVgIGV4Y2VwdCB0aGF0IGl0IGRvZXNuJ3QgYXNzaWduXG4gKiBgdW5kZWZpbmVkYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYXNzaWduTWVyZ2VWYWx1ZSQyKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBpZiAoKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWVxJDMob2JqZWN0W2tleV0sIHZhbHVlKSkgfHxcbiAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgYmFzZUFzc2lnblZhbHVlJDQob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgfVxufVxuXG52YXIgX2Fzc2lnbk1lcmdlVmFsdWUgPSBhc3NpZ25NZXJnZVZhbHVlJDI7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGJhc2UgZnVuY3Rpb24gZm9yIG1ldGhvZHMgbGlrZSBgXy5mb3JJbmAgYW5kIGBfLmZvck93bmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVCYXNlRm9yJDEoZnJvbVJpZ2h0KSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzRnVuYykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChvYmplY3QpLFxuICAgICAgICBwcm9wcyA9IGtleXNGdW5jKG9iamVjdCksXG4gICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgdmFyIGtleSA9IHByb3BzW2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdO1xuICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfTtcbn1cblxudmFyIF9jcmVhdGVCYXNlRm9yID0gY3JlYXRlQmFzZUZvciQxO1xuXG52YXIgY3JlYXRlQmFzZUZvciA9IF9jcmVhdGVCYXNlRm9yO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBiYXNlRm9yT3duYCB3aGljaCBpdGVyYXRlcyBvdmVyIGBvYmplY3RgXG4gKiBwcm9wZXJ0aWVzIHJldHVybmVkIGJ5IGBrZXlzRnVuY2AgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xudmFyIGJhc2VGb3IkMiA9IGNyZWF0ZUJhc2VGb3IoKTtcblxudmFyIF9iYXNlRm9yID0gYmFzZUZvciQyO1xuXG52YXIgX2Nsb25lQnVmZmVyID0ge2V4cG9ydHM6IHt9fTtcblxuKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcblx0dmFyIHJvb3QgPSBfcm9vdDtcblxuXHQvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xuXHR2YXIgZnJlZUV4cG9ydHMgPSBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cblx0LyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xuXHR2YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmICdvYmplY3QnID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuXHQvKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xuXHR2YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuXHQvKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cblx0dmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZCxcblx0ICAgIGFsbG9jVW5zYWZlID0gQnVmZmVyID8gQnVmZmVyLmFsbG9jVW5zYWZlIDogdW5kZWZpbmVkO1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgY2xvbmUgb2YgIGBidWZmZXJgLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIFRoZSBidWZmZXIgdG8gY2xvbmUuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG5cdCAqIEByZXR1cm5zIHtCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBidWZmZXIuXG5cdCAqL1xuXHRmdW5jdGlvbiBjbG9uZUJ1ZmZlcihidWZmZXIsIGlzRGVlcCkge1xuXHQgIGlmIChpc0RlZXApIHtcblx0ICAgIHJldHVybiBidWZmZXIuc2xpY2UoKTtcblx0ICB9XG5cdCAgdmFyIGxlbmd0aCA9IGJ1ZmZlci5sZW5ndGgsXG5cdCAgICAgIHJlc3VsdCA9IGFsbG9jVW5zYWZlID8gYWxsb2NVbnNhZmUobGVuZ3RoKSA6IG5ldyBidWZmZXIuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuXHQgIGJ1ZmZlci5jb3B5KHJlc3VsdCk7XG5cdCAgcmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdG1vZHVsZS5leHBvcnRzID0gY2xvbmVCdWZmZXI7XG59IChfY2xvbmVCdWZmZXIsIF9jbG9uZUJ1ZmZlci5leHBvcnRzKSk7XG5cbnZhciByb290JDcgPSBfcm9vdDtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgVWludDhBcnJheSQzID0gcm9vdCQ3LlVpbnQ4QXJyYXk7XG5cbnZhciBfVWludDhBcnJheSA9IFVpbnQ4QXJyYXkkMztcblxudmFyIFVpbnQ4QXJyYXkkMiA9IF9VaW50OEFycmF5O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyJDMoYXJyYXlCdWZmZXIpIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyBhcnJheUJ1ZmZlci5jb25zdHJ1Y3RvcihhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgbmV3IFVpbnQ4QXJyYXkkMihyZXN1bHQpLnNldChuZXcgVWludDhBcnJheSQyKGFycmF5QnVmZmVyKSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbnZhciBfY2xvbmVBcnJheUJ1ZmZlciA9IGNsb25lQXJyYXlCdWZmZXIkMztcblxudmFyIGNsb25lQXJyYXlCdWZmZXIkMiA9IF9jbG9uZUFycmF5QnVmZmVyO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgdHlwZWRBcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlZEFycmF5IFRoZSB0eXBlZCBhcnJheSB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgdHlwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNsb25lVHlwZWRBcnJheSQyKHR5cGVkQXJyYXksIGlzRGVlcCkge1xuICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlciQyKHR5cGVkQXJyYXkuYnVmZmVyKSA6IHR5cGVkQXJyYXkuYnVmZmVyO1xuICByZXR1cm4gbmV3IHR5cGVkQXJyYXkuY29uc3RydWN0b3IoYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkubGVuZ3RoKTtcbn1cblxudmFyIF9jbG9uZVR5cGVkQXJyYXkgPSBjbG9uZVR5cGVkQXJyYXkkMjtcblxuLyoqXG4gKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiBgc291cmNlYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIGZyb20uXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXk9W11dIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyB0by5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5cbmZ1bmN0aW9uIGNvcHlBcnJheSQ0KHNvdXJjZSwgYXJyYXkpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuXG4gIGFycmF5IHx8IChhcnJheSA9IEFycmF5KGxlbmd0aCkpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W2luZGV4XSA9IHNvdXJjZVtpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG52YXIgX2NvcHlBcnJheSA9IGNvcHlBcnJheSQ0O1xuXG52YXIgaXNPYmplY3QkOSA9IGlzT2JqZWN0XzE7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdENyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY3JlYXRlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGFzc2lnbmluZ1xuICogcHJvcGVydGllcyB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm90byBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gKi9cbnZhciBiYXNlQ3JlYXRlJDIgPSAoZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIG9iamVjdCgpIHt9XG4gIHJldHVybiBmdW5jdGlvbihwcm90bykge1xuICAgIGlmICghaXNPYmplY3QkOShwcm90bykpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgaWYgKG9iamVjdENyZWF0ZSkge1xuICAgICAgcmV0dXJuIG9iamVjdENyZWF0ZShwcm90byk7XG4gICAgfVxuICAgIG9iamVjdC5wcm90b3R5cGUgPSBwcm90bztcbiAgICB2YXIgcmVzdWx0ID0gbmV3IG9iamVjdDtcbiAgICBvYmplY3QucHJvdG90eXBlID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59KCkpO1xuXG52YXIgX2Jhc2VDcmVhdGUgPSBiYXNlQ3JlYXRlJDI7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5cbmZ1bmN0aW9uIG92ZXJBcmckMihmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxudmFyIF9vdmVyQXJnID0gb3ZlckFyZyQyO1xuXG52YXIgb3ZlckFyZyQxID0gX292ZXJBcmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIGdldFByb3RvdHlwZSQzID0gb3ZlckFyZyQxKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KTtcblxudmFyIF9nZXRQcm90b3R5cGUgPSBnZXRQcm90b3R5cGUkMztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xuXG52YXIgb2JqZWN0UHJvdG8kYSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1Byb3RvdHlwZSQzKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90byRhO1xuXG4gIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG59XG5cbnZhciBfaXNQcm90b3R5cGUgPSBpc1Byb3RvdHlwZSQzO1xuXG52YXIgYmFzZUNyZWF0ZSQxID0gX2Jhc2VDcmVhdGUsXG4gICAgZ2V0UHJvdG90eXBlJDIgPSBfZ2V0UHJvdG90eXBlLFxuICAgIGlzUHJvdG90eXBlJDIgPSBfaXNQcm90b3R5cGU7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAqL1xuZnVuY3Rpb24gaW5pdENsb25lT2JqZWN0JDIob2JqZWN0KSB7XG4gIHJldHVybiAodHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmICFpc1Byb3RvdHlwZSQyKG9iamVjdCkpXG4gICAgPyBiYXNlQ3JlYXRlJDEoZ2V0UHJvdG90eXBlJDIob2JqZWN0KSlcbiAgICA6IHt9O1xufVxuXG52YXIgX2luaXRDbG9uZU9iamVjdCA9IGluaXRDbG9uZU9iamVjdCQyO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuXG5mdW5jdGlvbiBpc09iamVjdExpa2UkYih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbnZhciBpc09iamVjdExpa2VfMSA9IGlzT2JqZWN0TGlrZSRiO1xuXG52YXIgYmFzZUdldFRhZyQ1ID0gX2Jhc2VHZXRUYWcsXG4gICAgaXNPYmplY3RMaWtlJGEgPSBpc09iamVjdExpa2VfMTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWckMyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyQxKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UkYSh2YWx1ZSkgJiYgYmFzZUdldFRhZyQ1KHZhbHVlKSA9PSBhcmdzVGFnJDM7XG59XG5cbnZhciBfYmFzZUlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzJDE7XG5cbnZhciBiYXNlSXNBcmd1bWVudHMgPSBfYmFzZUlzQXJndW1lbnRzLFxuICAgIGlzT2JqZWN0TGlrZSQ5ID0gaXNPYmplY3RMaWtlXzE7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byQ5ID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkkOCA9IG9iamVjdFByb3RvJDkuaGFzT3duUHJvcGVydHk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlJDEgPSBvYmplY3RQcm90byQ5LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcmd1bWVudHMkMyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UkOSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkkOC5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAhcHJvcGVydHlJc0VudW1lcmFibGUkMS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG59O1xuXG52YXIgaXNBcmd1bWVudHNfMSA9IGlzQXJndW1lbnRzJDM7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuXG52YXIgaXNBcnJheSRjID0gQXJyYXkuaXNBcnJheTtcblxudmFyIGlzQXJyYXlfMSA9IGlzQXJyYXkkYztcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG5cbnZhciBNQVhfU0FGRV9JTlRFR0VSJDEgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0xlbmd0aCgzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aCgnMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgkMyh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSJDE7XG59XG5cbnZhciBpc0xlbmd0aF8xID0gaXNMZW5ndGgkMztcblxudmFyIGlzRnVuY3Rpb24kMSA9IGlzRnVuY3Rpb25fMSxcbiAgICBpc0xlbmd0aCQyID0gaXNMZW5ndGhfMTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UkNSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCQyKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24kMSh2YWx1ZSk7XG59XG5cbnZhciBpc0FycmF5TGlrZV8xID0gaXNBcnJheUxpa2UkNTtcblxudmFyIGlzQXJyYXlMaWtlJDQgPSBpc0FycmF5TGlrZV8xLFxuICAgIGlzT2JqZWN0TGlrZSQ4ID0gaXNPYmplY3RMaWtlXzE7XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc0FycmF5TGlrZWAgZXhjZXB0IHRoYXQgaXQgYWxzbyBjaGVja3MgaWYgYHZhbHVlYFxuICogaXMgYW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LWxpa2Ugb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlT2JqZWN0JDEodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSQ4KHZhbHVlKSAmJiBpc0FycmF5TGlrZSQ0KHZhbHVlKTtcbn1cblxudmFyIGlzQXJyYXlMaWtlT2JqZWN0XzEgPSBpc0FycmF5TGlrZU9iamVjdCQxO1xuXG52YXIgaXNCdWZmZXIkNCA9IHtleHBvcnRzOiB7fX07XG5cbi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICovXG5cbmZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG52YXIgc3R1YkZhbHNlXzEgPSBzdHViRmFsc2U7XG5cbihmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG5cdHZhciByb290ID0gX3Jvb3QsXG5cdCAgICBzdHViRmFsc2UgPSBzdHViRmFsc2VfMTtcblxuXHQvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xuXHR2YXIgZnJlZUV4cG9ydHMgPSBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cblx0LyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xuXHR2YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmICdvYmplY3QnID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuXHQvKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xuXHR2YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuXHQvKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cblx0dmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZDtcblxuXHQvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG5cdHZhciBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZDtcblxuXHQvKipcblx0ICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG5cdCAqXG5cdCAqIEBzdGF0aWNcblx0ICogQG1lbWJlck9mIF9cblx0ICogQHNpbmNlIDQuMy4wXG5cdCAqIEBjYXRlZ29yeSBMYW5nXG5cdCAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuXHQgKiBAZXhhbXBsZVxuXHQgKlxuXHQgKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuXHQgKiAvLyA9PiB0cnVlXG5cdCAqXG5cdCAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuXHQgKiAvLyA9PiBmYWxzZVxuXHQgKi9cblx0dmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG5cdG1vZHVsZS5leHBvcnRzID0gaXNCdWZmZXI7XG59IChpc0J1ZmZlciQ0LCBpc0J1ZmZlciQ0LmV4cG9ydHMpKTtcblxudmFyIGJhc2VHZXRUYWckNCA9IF9iYXNlR2V0VGFnLFxuICAgIGdldFByb3RvdHlwZSQxID0gX2dldFByb3RvdHlwZSxcbiAgICBpc09iamVjdExpa2UkNyA9IGlzT2JqZWN0TGlrZV8xO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0VGFnJDQgPSAnW29iamVjdCBPYmplY3RdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byQ4ID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkkNyA9IG9iamVjdFByb3RvJDguaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGluZmVyIHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci4gKi9cbnZhciBvYmplY3RDdG9yU3RyaW5nID0gZnVuY1RvU3RyaW5nLmNhbGwoT2JqZWN0KTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjguMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogfVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCQyKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3RMaWtlJDcodmFsdWUpIHx8IGJhc2VHZXRUYWckNCh2YWx1ZSkgIT0gb2JqZWN0VGFnJDQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlJDEodmFsdWUpO1xuICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5JDcuY2FsbChwcm90bywgJ2NvbnN0cnVjdG9yJykgJiYgcHJvdG8uY29uc3RydWN0b3I7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmXG4gICAgZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgPT0gb2JqZWN0Q3RvclN0cmluZztcbn1cblxudmFyIGlzUGxhaW5PYmplY3RfMSA9IGlzUGxhaW5PYmplY3QkMjtcblxudmFyIGJhc2VHZXRUYWckMyA9IF9iYXNlR2V0VGFnLFxuICAgIGlzTGVuZ3RoJDEgPSBpc0xlbmd0aF8xLFxuICAgIGlzT2JqZWN0TGlrZSQ2ID0gaXNPYmplY3RMaWtlXzE7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnJDIgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyQyID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnJDMgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyQzID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnJDMgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWckMSA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgbWFwVGFnJDUgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWckMyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyQzID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcmVnZXhwVGFnJDMgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWckNSA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyQzID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgd2Vha01hcFRhZyQzID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWckMyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWckNCA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyQyID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyQyID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyQyID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWckMiA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyQyID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnJDIgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnJDIgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyQyID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWckMiA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbnZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xudHlwZWRBcnJheVRhZ3NbZmxvYXQzMlRhZyQyXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWckMl0gPVxudHlwZWRBcnJheVRhZ3NbaW50OFRhZyQyXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnJDJdID1cbnR5cGVkQXJyYXlUYWdzW2ludDMyVGFnJDJdID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWckMl0gPVxudHlwZWRBcnJheVRhZ3NbdWludDhDbGFtcGVkVGFnJDJdID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnJDJdID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZyQyXSA9IHRydWU7XG50eXBlZEFycmF5VGFnc1thcmdzVGFnJDJdID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWckMl0gPVxudHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWckM10gPSB0eXBlZEFycmF5VGFnc1tib29sVGFnJDNdID1cbnR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnJDRdID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZyQzXSA9XG50eXBlZEFycmF5VGFnc1tlcnJvclRhZyQzXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWckMV0gPVxudHlwZWRBcnJheVRhZ3NbbWFwVGFnJDVdID0gdHlwZWRBcnJheVRhZ3NbbnVtYmVyVGFnJDNdID1cbnR5cGVkQXJyYXlUYWdzW29iamVjdFRhZyQzXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZyQzXSA9XG50eXBlZEFycmF5VGFnc1tzZXRUYWckNV0gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWckM10gPVxudHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZyQzXSA9IGZhbHNlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzVHlwZWRBcnJheWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNUeXBlZEFycmF5JDEodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSQ2KHZhbHVlKSAmJlxuICAgIGlzTGVuZ3RoJDEodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW2Jhc2VHZXRUYWckMyh2YWx1ZSldO1xufVxuXG52YXIgX2Jhc2VJc1R5cGVkQXJyYXkgPSBiYXNlSXNUeXBlZEFycmF5JDE7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gKi9cblxudmFyIF9iYXNlVW5hcnk7XG52YXIgaGFzUmVxdWlyZWRfYmFzZVVuYXJ5O1xuXG5mdW5jdGlvbiByZXF1aXJlX2Jhc2VVbmFyeSAoKSB7XG5cdGlmIChoYXNSZXF1aXJlZF9iYXNlVW5hcnkpIHJldHVybiBfYmFzZVVuYXJ5O1xuXHRoYXNSZXF1aXJlZF9iYXNlVW5hcnkgPSAxO1xuXHRmdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuXHQgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuXHQgICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuXHQgIH07XG5cdH1cblxuXHRfYmFzZVVuYXJ5ID0gYmFzZVVuYXJ5O1xuXHRyZXR1cm4gX2Jhc2VVbmFyeTtcbn1cblxudmFyIF9ub2RlVXRpbCA9IHtleHBvcnRzOiB7fX07XG5cbihmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG5cdHZhciBmcmVlR2xvYmFsID0gX2ZyZWVHbG9iYWw7XG5cblx0LyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cblx0dmFyIGZyZWVFeHBvcnRzID0gZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG5cdC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cblx0dmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiAnb2JqZWN0JyA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cblx0LyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cblx0dmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cblx0LyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG5cdHZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG5cdC8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xuXHR2YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG5cdCAgdHJ5IHtcblx0ICAgIC8vIFVzZSBgdXRpbC50eXBlc2AgZm9yIE5vZGUuanMgMTArLlxuXHQgICAgdmFyIHR5cGVzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlKCd1dGlsJykudHlwZXM7XG5cblx0ICAgIGlmICh0eXBlcykge1xuXHQgICAgICByZXR1cm4gdHlwZXM7XG5cdCAgICB9XG5cblx0ICAgIC8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG5cdCAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG5cdCAgfSBjYXRjaCAoZSkge31cblx0fSgpKTtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IG5vZGVVdGlsO1xufSAoX25vZGVVdGlsLCBfbm9kZVV0aWwuZXhwb3J0cykpO1xuXG52YXIgYmFzZUlzVHlwZWRBcnJheSA9IF9iYXNlSXNUeXBlZEFycmF5LFxuICAgIGJhc2VVbmFyeSQyID0gcmVxdWlyZV9iYXNlVW5hcnkoKSxcbiAgICBub2RlVXRpbCQyID0gX25vZGVVdGlsLmV4cG9ydHM7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsJDIgJiYgbm9kZVV0aWwkMi5pc1R5cGVkQXJyYXk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1R5cGVkQXJyYXkkMyA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkkMihub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbnZhciBpc1R5cGVkQXJyYXlfMSA9IGlzVHlwZWRBcnJheSQzO1xuXG4vKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgLCB1bmxlc3MgYGtleWAgaXMgXCJfX3Byb3RvX19cIiBvciBcImNvbnN0cnVjdG9yXCIuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICovXG5cbmZ1bmN0aW9uIHNhZmVHZXQkMihvYmplY3QsIGtleSkge1xuICBpZiAoa2V5ID09PSAnY29uc3RydWN0b3InICYmIHR5cGVvZiBvYmplY3Rba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChrZXkgPT0gJ19fcHJvdG9fXycpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICByZXR1cm4gb2JqZWN0W2tleV07XG59XG5cbnZhciBfc2FmZUdldCA9IHNhZmVHZXQkMjtcblxudmFyIGJhc2VBc3NpZ25WYWx1ZSQzID0gX2Jhc2VBc3NpZ25WYWx1ZSxcbiAgICBlcSQyID0gZXFfMTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvJDcgPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSQ2ID0gb2JqZWN0UHJvdG8kNy5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBc3NpZ25zIGB2YWx1ZWAgdG8gYGtleWAgb2YgYG9iamVjdGAgaWYgdGhlIGV4aXN0aW5nIHZhbHVlIGlzIG5vdCBlcXVpdmFsZW50XG4gKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGFzc2lnblZhbHVlJDMob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICBpZiAoIShoYXNPd25Qcm9wZXJ0eSQ2LmNhbGwob2JqZWN0LCBrZXkpICYmIGVxJDIob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgYmFzZUFzc2lnblZhbHVlJDMob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgfVxufVxuXG52YXIgX2Fzc2lnblZhbHVlID0gYXNzaWduVmFsdWUkMztcblxudmFyIGFzc2lnblZhbHVlJDIgPSBfYXNzaWduVmFsdWUsXG4gICAgYmFzZUFzc2lnblZhbHVlJDIgPSBfYmFzZUFzc2lnblZhbHVlO1xuXG4vKipcbiAqIENvcGllcyBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMgdG8gY29weS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0by5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvcGllZCB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb3B5T2JqZWN0JDUoc291cmNlLCBwcm9wcywgb2JqZWN0LCBjdXN0b21pemVyKSB7XG4gIHZhciBpc05ldyA9ICFvYmplY3Q7XG4gIG9iamVjdCB8fCAob2JqZWN0ID0ge30pO1xuXG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTtcblxuICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgID8gY3VzdG9taXplcihvYmplY3Rba2V5XSwgc291cmNlW2tleV0sIGtleSwgb2JqZWN0LCBzb3VyY2UpXG4gICAgICA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBuZXdWYWx1ZSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgICBpZiAoaXNOZXcpIHtcbiAgICAgIGJhc2VBc3NpZ25WYWx1ZSQyKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2lnblZhbHVlJDIob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxudmFyIF9jb3B5T2JqZWN0ID0gY29weU9iamVjdCQ1O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRpbWVzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHNcbiAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAqL1xuXG5mdW5jdGlvbiBiYXNlVGltZXMkMShuLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIF9iYXNlVGltZXMgPSBiYXNlVGltZXMkMTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG5cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xudmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0luZGV4JDUodmFsdWUsIGxlbmd0aCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbn1cblxudmFyIF9pc0luZGV4ID0gaXNJbmRleCQ1O1xuXG52YXIgYmFzZVRpbWVzID0gX2Jhc2VUaW1lcyxcbiAgICBpc0FyZ3VtZW50cyQyID0gaXNBcmd1bWVudHNfMSxcbiAgICBpc0FycmF5JGIgPSBpc0FycmF5XzEsXG4gICAgaXNCdWZmZXIkMyA9IGlzQnVmZmVyJDQuZXhwb3J0cyxcbiAgICBpc0luZGV4JDQgPSBfaXNJbmRleCxcbiAgICBpc1R5cGVkQXJyYXkkMiA9IGlzVHlwZWRBcnJheV8xO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8kNiA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5JDUgPSBvYmplY3RQcm90byQ2Lmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBhcnJheUxpa2VLZXlzJDIodmFsdWUsIGluaGVyaXRlZCkge1xuICB2YXIgaXNBcnIgPSBpc0FycmF5JGIodmFsdWUpLFxuICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHMkMih2YWx1ZSksXG4gICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyJDModmFsdWUpLFxuICAgICAgaXNUeXBlID0gIWlzQXJyICYmICFpc0FyZyAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheSQyKHZhbHVlKSxcbiAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eSQ1LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgaXNJbmRleCQ0KGtleSwgbGVuZ3RoKVxuICAgICAgICApKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIF9hcnJheUxpa2VLZXlzID0gYXJyYXlMaWtlS2V5cyQyO1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZVxuICogW2BPYmplY3Qua2V5c2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZXhjZXB0IHRoYXQgaXQgaW5jbHVkZXMgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuXG5mdW5jdGlvbiBuYXRpdmVLZXlzSW4kMShvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBpZiAob2JqZWN0ICE9IG51bGwpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbnZhciBfbmF0aXZlS2V5c0luID0gbmF0aXZlS2V5c0luJDE7XG5cbnZhciBpc09iamVjdCQ4ID0gaXNPYmplY3RfMSxcbiAgICBpc1Byb3RvdHlwZSQxID0gX2lzUHJvdG90eXBlLFxuICAgIG5hdGl2ZUtleXNJbiA9IF9uYXRpdmVLZXlzSW47XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byQ1ID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkkNCA9IG9iamVjdFByb3RvJDUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c0luYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzSW4kMShvYmplY3QpIHtcbiAgaWYgKCFpc09iamVjdCQ4KG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5c0luKG9iamVjdCk7XG4gIH1cbiAgdmFyIGlzUHJvdG8gPSBpc1Byb3RvdHlwZSQxKG9iamVjdCksXG4gICAgICByZXN1bHQgPSBbXTtcblxuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKCEoa2V5ID09ICdjb25zdHJ1Y3RvcicgJiYgKGlzUHJvdG8gfHwgIWhhc093blByb3BlcnR5JDQuY2FsbChvYmplY3QsIGtleSkpKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIF9iYXNlS2V5c0luID0gYmFzZUtleXNJbiQxO1xuXG52YXIgYXJyYXlMaWtlS2V5cyQxID0gX2FycmF5TGlrZUtleXMsXG4gICAgYmFzZUtleXNJbiA9IF9iYXNlS2V5c0luLFxuICAgIGlzQXJyYXlMaWtlJDMgPSBpc0FycmF5TGlrZV8xO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzSW4obmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYicsICdjJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqL1xuZnVuY3Rpb24ga2V5c0luJDUob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZSQzKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzJDEob2JqZWN0LCB0cnVlKSA6IGJhc2VLZXlzSW4ob2JqZWN0KTtcbn1cblxudmFyIGtleXNJbl8xID0ga2V5c0luJDU7XG5cbnZhciBjb3B5T2JqZWN0JDQgPSBfY29weU9iamVjdCxcbiAgICBrZXlzSW4kNCA9IGtleXNJbl8xO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwbGFpbiBvYmplY3QgZmxhdHRlbmluZyBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmdcbiAqIGtleWVkIHByb3BlcnRpZXMgb2YgYHZhbHVlYCB0byBvd24gcHJvcGVydGllcyBvZiB0aGUgcGxhaW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29udmVydGVkIHBsYWluIG9iamVjdC5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgbmV3IEZvbyk7XG4gKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAqXG4gKiBfLmFzc2lnbih7ICdhJzogMSB9LCBfLnRvUGxhaW5PYmplY3QobmV3IEZvbykpO1xuICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH1cbiAqL1xuZnVuY3Rpb24gdG9QbGFpbk9iamVjdCQxKHZhbHVlKSB7XG4gIHJldHVybiBjb3B5T2JqZWN0JDQodmFsdWUsIGtleXNJbiQ0KHZhbHVlKSk7XG59XG5cbnZhciB0b1BsYWluT2JqZWN0XzEgPSB0b1BsYWluT2JqZWN0JDE7XG5cbnZhciBhc3NpZ25NZXJnZVZhbHVlJDEgPSBfYXNzaWduTWVyZ2VWYWx1ZSxcbiAgICBjbG9uZUJ1ZmZlciQxID0gX2Nsb25lQnVmZmVyLmV4cG9ydHMsXG4gICAgY2xvbmVUeXBlZEFycmF5JDEgPSBfY2xvbmVUeXBlZEFycmF5LFxuICAgIGNvcHlBcnJheSQzID0gX2NvcHlBcnJheSxcbiAgICBpbml0Q2xvbmVPYmplY3QkMSA9IF9pbml0Q2xvbmVPYmplY3QsXG4gICAgaXNBcmd1bWVudHMkMSA9IGlzQXJndW1lbnRzXzEsXG4gICAgaXNBcnJheSRhID0gaXNBcnJheV8xLFxuICAgIGlzQXJyYXlMaWtlT2JqZWN0ID0gaXNBcnJheUxpa2VPYmplY3RfMSxcbiAgICBpc0J1ZmZlciQyID0gaXNCdWZmZXIkNC5leHBvcnRzLFxuICAgIGlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uXzEsXG4gICAgaXNPYmplY3QkNyA9IGlzT2JqZWN0XzEsXG4gICAgaXNQbGFpbk9iamVjdCQxID0gaXNQbGFpbk9iamVjdF8xLFxuICAgIGlzVHlwZWRBcnJheSQxID0gaXNUeXBlZEFycmF5XzEsXG4gICAgc2FmZUdldCQxID0gX3NhZmVHZXQsXG4gICAgdG9QbGFpbk9iamVjdCA9IHRvUGxhaW5PYmplY3RfMTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VNZXJnZWAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICogZGVlcCBtZXJnZXMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAqIHJlZmVyZW5jZXMgdG8gYmUgbWVyZ2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBtZXJnZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzcmNJbmRleCBUaGUgaW5kZXggb2YgYHNvdXJjZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBtZXJnZUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1lcmdlIHZhbHVlcy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gKiAgY291bnRlcnBhcnRzLlxuICovXG5mdW5jdGlvbiBiYXNlTWVyZ2VEZWVwJDEob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIG1lcmdlRnVuYywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgdmFyIG9ialZhbHVlID0gc2FmZUdldCQxKG9iamVjdCwga2V5KSxcbiAgICAgIHNyY1ZhbHVlID0gc2FmZUdldCQxKHNvdXJjZSwga2V5KSxcbiAgICAgIHN0YWNrZWQgPSBzdGFjay5nZXQoc3JjVmFsdWUpO1xuXG4gIGlmIChzdGFja2VkKSB7XG4gICAgYXNzaWduTWVyZ2VWYWx1ZSQxKG9iamVjdCwga2V5LCBzdGFja2VkKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgID8gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICA6IHVuZGVmaW5lZDtcblxuICB2YXIgaXNDb21tb24gPSBuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gIGlmIChpc0NvbW1vbikge1xuICAgIHZhciBpc0FyciA9IGlzQXJyYXkkYShzcmNWYWx1ZSksXG4gICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiBpc0J1ZmZlciQyKHNyY1ZhbHVlKSxcbiAgICAgICAgaXNUeXBlZCA9ICFpc0FyciAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheSQxKHNyY1ZhbHVlKTtcblxuICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgaWYgKGlzQXJyIHx8IGlzQnVmZiB8fCBpc1R5cGVkKSB7XG4gICAgICBpZiAoaXNBcnJheSRhKG9ialZhbHVlKSkge1xuICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoaXNBcnJheUxpa2VPYmplY3Qob2JqVmFsdWUpKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gY29weUFycmF5JDMob2JqVmFsdWUpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoaXNCdWZmKSB7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIG5ld1ZhbHVlID0gY2xvbmVCdWZmZXIkMShzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChpc1R5cGVkKSB7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIG5ld1ZhbHVlID0gY2xvbmVUeXBlZEFycmF5JDEoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIG5ld1ZhbHVlID0gW107XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzUGxhaW5PYmplY3QkMShzcmNWYWx1ZSkgfHwgaXNBcmd1bWVudHMkMShzcmNWYWx1ZSkpIHtcbiAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICBpZiAoaXNBcmd1bWVudHMkMShvYmpWYWx1ZSkpIHtcbiAgICAgICAgbmV3VmFsdWUgPSB0b1BsYWluT2JqZWN0KG9ialZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKCFpc09iamVjdCQ3KG9ialZhbHVlKSB8fCBpc0Z1bmN0aW9uKG9ialZhbHVlKSkge1xuICAgICAgICBuZXdWYWx1ZSA9IGluaXRDbG9uZU9iamVjdCQxKHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBpZiAoaXNDb21tb24pIHtcbiAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICBtZXJnZUZ1bmMobmV3VmFsdWUsIHNyY1ZhbHVlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spO1xuICAgIHN0YWNrWydkZWxldGUnXShzcmNWYWx1ZSk7XG4gIH1cbiAgYXNzaWduTWVyZ2VWYWx1ZSQxKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG59XG5cbnZhciBfYmFzZU1lcmdlRGVlcCA9IGJhc2VNZXJnZURlZXAkMTtcblxudmFyIFN0YWNrJDMgPSBfU3RhY2ssXG4gICAgYXNzaWduTWVyZ2VWYWx1ZSA9IF9hc3NpZ25NZXJnZVZhbHVlLFxuICAgIGJhc2VGb3IkMSA9IF9iYXNlRm9yLFxuICAgIGJhc2VNZXJnZURlZXAgPSBfYmFzZU1lcmdlRGVlcCxcbiAgICBpc09iamVjdCQ2ID0gaXNPYmplY3RfMSxcbiAgICBrZXlzSW4kMyA9IGtleXNJbl8xLFxuICAgIHNhZmVHZXQgPSBfc2FmZUdldDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdlZCB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICogIGNvdW50ZXJwYXJ0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZU1lcmdlJDEob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjaykge1xuICBpZiAob2JqZWN0ID09PSBzb3VyY2UpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgYmFzZUZvciQxKHNvdXJjZSwgZnVuY3Rpb24oc3JjVmFsdWUsIGtleSkge1xuICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayQzKTtcbiAgICBpZiAoaXNPYmplY3QkNihzcmNWYWx1ZSkpIHtcbiAgICAgIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIGJhc2VNZXJnZSQxLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICA/IGN1c3RvbWl6ZXIoc2FmZUdldChvYmplY3QsIGtleSksIHNyY1ZhbHVlLCAoa2V5ICsgJycpLCBvYmplY3QsIHNvdXJjZSwgc3RhY2spXG4gICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBuZXdWYWx1ZSA9IHNyY1ZhbHVlO1xuICAgICAgfVxuICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgIH1cbiAgfSwga2V5c0luJDMpO1xufVxuXG52YXIgX2Jhc2VNZXJnZSA9IGJhc2VNZXJnZSQxO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGl0IHJlY2VpdmVzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICpcbiAqIGNvbnNvbGUubG9nKF8uaWRlbnRpdHkob2JqZWN0KSA9PT0gb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqL1xuXG5mdW5jdGlvbiBpZGVudGl0eSQ1KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxudmFyIGlkZW50aXR5XzEgPSBpZGVudGl0eSQ1O1xuXG4vKipcbiAqIEEgZmFzdGVyIGFsdGVybmF0aXZlIHRvIGBGdW5jdGlvbiNhcHBseWAsIHRoaXMgZnVuY3Rpb24gaW52b2tlcyBgZnVuY2BcbiAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICovXG5cbmZ1bmN0aW9uIGFwcGx5JDMoZnVuYywgdGhpc0FyZywgYXJncykge1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcpO1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICB9XG4gIHJldHVybiBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xufVxuXG52YXIgX2FwcGx5ID0gYXBwbHkkMztcblxudmFyIGFwcGx5JDIgPSBfYXBwbHk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXgkMyA9IE1hdGgubWF4O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIHRyYW5zZm9ybXMgdGhlIHJlc3QgYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIHJlc3QgYXJyYXkgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJSZXN0JDEoZnVuYywgc3RhcnQsIHRyYW5zZm9ybSkge1xuICBzdGFydCA9IG5hdGl2ZU1heCQzKHN0YXJ0ID09PSB1bmRlZmluZWQgPyAoZnVuYy5sZW5ndGggLSAxKSA6IHN0YXJ0LCAwKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgkMyhhcmdzLmxlbmd0aCAtIHN0YXJ0LCAwKSxcbiAgICAgICAgYXJyYXkgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGFycmF5W2luZGV4XSA9IGFyZ3Nbc3RhcnQgKyBpbmRleF07XG4gICAgfVxuICAgIGluZGV4ID0gLTE7XG4gICAgdmFyIG90aGVyQXJncyA9IEFycmF5KHN0YXJ0ICsgMSk7XG4gICAgd2hpbGUgKCsraW5kZXggPCBzdGFydCkge1xuICAgICAgb3RoZXJBcmdzW2luZGV4XSA9IGFyZ3NbaW5kZXhdO1xuICAgIH1cbiAgICBvdGhlckFyZ3Nbc3RhcnRdID0gdHJhbnNmb3JtKGFycmF5KTtcbiAgICByZXR1cm4gYXBwbHkkMihmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICB9O1xufVxuXG52YXIgX292ZXJSZXN0ID0gb3ZlclJlc3QkMTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybiBmcm9tIHRoZSBuZXcgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICpcbiAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gKlxuICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cblxuZnVuY3Rpb24gY29uc3RhbnQkMSh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xufVxuXG52YXIgY29uc3RhbnRfMSA9IGNvbnN0YW50JDE7XG5cbnZhciBjb25zdGFudCA9IGNvbnN0YW50XzEsXG4gICAgZGVmaW5lUHJvcGVydHkgPSBfZGVmaW5lUHJvcGVydHksXG4gICAgaWRlbnRpdHkkNCA9IGlkZW50aXR5XzE7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldFRvU3RyaW5nYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAqL1xudmFyIGJhc2VTZXRUb1N0cmluZyQxID0gIWRlZmluZVByb3BlcnR5ID8gaWRlbnRpdHkkNCA6IGZ1bmN0aW9uKGZ1bmMsIHN0cmluZykge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHkoZnVuYywgJ3RvU3RyaW5nJywge1xuICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICdlbnVtZXJhYmxlJzogZmFsc2UsXG4gICAgJ3ZhbHVlJzogY29uc3RhbnQoc3RyaW5nKSxcbiAgICAnd3JpdGFibGUnOiB0cnVlXG4gIH0pO1xufTtcblxudmFyIF9iYXNlU2V0VG9TdHJpbmcgPSBiYXNlU2V0VG9TdHJpbmckMTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvdCBmdW5jdGlvbnMgYnkgbnVtYmVyIG9mIGNhbGxzIHdpdGhpbiBhIHNwYW4gb2YgbWlsbGlzZWNvbmRzLiAqL1xuXG52YXIgSE9UX0NPVU5UID0gODAwLFxuICAgIEhPVF9TUEFOID0gMTY7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVOb3cgPSBEYXRlLm5vdztcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCdsbCBzaG9ydCBvdXQgYW5kIGludm9rZSBgaWRlbnRpdHlgIGluc3RlYWRcbiAqIG9mIGBmdW5jYCB3aGVuIGl0J3MgY2FsbGVkIGBIT1RfQ09VTlRgIG9yIG1vcmUgdGltZXMgaW4gYEhPVF9TUEFOYFxuICogbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNob3J0YWJsZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gc2hvcnRPdXQkMihmdW5jKSB7XG4gIHZhciBjb3VudCA9IDAsXG4gICAgICBsYXN0Q2FsbGVkID0gMDtcblxuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0YW1wID0gbmF0aXZlTm93KCksXG4gICAgICAgIHJlbWFpbmluZyA9IEhPVF9TUEFOIC0gKHN0YW1wIC0gbGFzdENhbGxlZCk7XG5cbiAgICBsYXN0Q2FsbGVkID0gc3RhbXA7XG4gICAgaWYgKHJlbWFpbmluZyA+IDApIHtcbiAgICAgIGlmICgrK2NvdW50ID49IEhPVF9DT1VOVCkge1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzWzBdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb3VudCA9IDA7XG4gICAgfVxuICAgIHJldHVybiBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxudmFyIF9zaG9ydE91dCA9IHNob3J0T3V0JDI7XG5cbnZhciBiYXNlU2V0VG9TdHJpbmcgPSBfYmFzZVNldFRvU3RyaW5nLFxuICAgIHNob3J0T3V0JDEgPSBfc2hvcnRPdXQ7XG5cbi8qKlxuICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYGZ1bmNgIHRvIHJldHVybiBgc3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gKi9cbnZhciBzZXRUb1N0cmluZyQyID0gc2hvcnRPdXQkMShiYXNlU2V0VG9TdHJpbmcpO1xuXG52YXIgX3NldFRvU3RyaW5nID0gc2V0VG9TdHJpbmckMjtcblxudmFyIGlkZW50aXR5JDMgPSBpZGVudGl0eV8xLFxuICAgIG92ZXJSZXN0ID0gX292ZXJSZXN0LFxuICAgIHNldFRvU3RyaW5nJDEgPSBfc2V0VG9TdHJpbmc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVzdGAgd2hpY2ggZG9lc24ndCB2YWxpZGF0ZSBvciBjb2VyY2UgYXJndW1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VSZXN0JDEoZnVuYywgc3RhcnQpIHtcbiAgcmV0dXJuIHNldFRvU3RyaW5nJDEob3ZlclJlc3QoZnVuYywgc3RhcnQsIGlkZW50aXR5JDMpLCBmdW5jICsgJycpO1xufVxuXG52YXIgX2Jhc2VSZXN0ID0gYmFzZVJlc3QkMTtcblxudmFyIGVxJDEgPSBlcV8xLFxuICAgIGlzQXJyYXlMaWtlJDIgPSBpc0FycmF5TGlrZV8xLFxuICAgIGlzSW5kZXgkMyA9IF9pc0luZGV4LFxuICAgIGlzT2JqZWN0JDUgPSBpc09iamVjdF8xO1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSB2YWx1ZSBhcmd1bWVudC5cbiAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIG9iamVjdCBhcmd1bWVudC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0l0ZXJhdGVlQ2FsbCQxKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gIGlmICghaXNPYmplY3QkNShvYmplY3QpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0eXBlID0gdHlwZW9mIGluZGV4O1xuICBpZiAodHlwZSA9PSAnbnVtYmVyJ1xuICAgICAgICA/IChpc0FycmF5TGlrZSQyKG9iamVjdCkgJiYgaXNJbmRleCQzKGluZGV4LCBvYmplY3QubGVuZ3RoKSlcbiAgICAgICAgOiAodHlwZSA9PSAnc3RyaW5nJyAmJiBpbmRleCBpbiBvYmplY3QpXG4gICAgICApIHtcbiAgICByZXR1cm4gZXEkMShvYmplY3RbaW5kZXhdLCB2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG52YXIgX2lzSXRlcmF0ZWVDYWxsID0gaXNJdGVyYXRlZUNhbGwkMTtcblxudmFyIGJhc2VSZXN0ID0gX2Jhc2VSZXN0LFxuICAgIGlzSXRlcmF0ZWVDYWxsID0gX2lzSXRlcmF0ZWVDYWxsO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmFzc2lnbmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbmVyIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYXNzaWduZXIgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFzc2lnbmVyJDEoYXNzaWduZXIpIHtcbiAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aCxcbiAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA+IDEgPyBzb3VyY2VzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkLFxuICAgICAgICBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgY3VzdG9taXplciA9IChhc3NpZ25lci5sZW5ndGggPiAzICYmIHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicpXG4gICAgICA/IChsZW5ndGgtLSwgY3VzdG9taXplcilcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiBjdXN0b21pemVyO1xuICAgICAgbGVuZ3RoID0gMTtcbiAgICB9XG4gICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgYXNzaWduZXIob2JqZWN0LCBzb3VyY2UsIGluZGV4LCBjdXN0b21pemVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfSk7XG59XG5cbnZhciBfY3JlYXRlQXNzaWduZXIgPSBjcmVhdGVBc3NpZ25lciQxO1xuXG52YXIgYmFzZU1lcmdlID0gX2Jhc2VNZXJnZSxcbiAgICBjcmVhdGVBc3NpZ25lciA9IF9jcmVhdGVBc3NpZ25lcjtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgbWVyZ2VzIG93biBhbmRcbiAqIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIGludG8gdGhlXG4gKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBwcm9wZXJ0aWVzIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYCBhcmVcbiAqIHNraXBwZWQgaWYgYSBkZXN0aW5hdGlvbiB2YWx1ZSBleGlzdHMuIEFycmF5IGFuZCBwbGFpbiBvYmplY3QgcHJvcGVydGllc1xuICogYXJlIG1lcmdlZCByZWN1cnNpdmVseS4gT3RoZXIgb2JqZWN0cyBhbmQgdmFsdWUgdHlwZXMgYXJlIG92ZXJyaWRkZW4gYnlcbiAqIGFzc2lnbm1lbnQuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC4gU3Vic2VxdWVudFxuICogc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuNS4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7XG4gKiAgICdhJzogW3sgJ2InOiAyIH0sIHsgJ2QnOiA0IH1dXG4gKiB9O1xuICpcbiAqIHZhciBvdGhlciA9IHtcbiAqICAgJ2EnOiBbeyAnYyc6IDMgfSwgeyAnZSc6IDUgfV1cbiAqIH07XG4gKlxuICogXy5tZXJnZShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IDIsICdjJzogMyB9LCB7ICdkJzogNCwgJ2UnOiA1IH1dIH1cbiAqL1xudmFyIG1lcmdlID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KSB7XG4gIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpO1xufSk7XG5cbnZhciBtZXJnZV8xID0gbWVyZ2U7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMjEgQWRvYmVcbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTk9USUNFOiBBZG9iZSBwZXJtaXRzIHlvdSB0byB1c2UsIG1vZGlmeSwgYW5kIGRpc3RyaWJ1dGUgdGhpcyBmaWxlIGluXG4gKiBhY2NvcmRhbmNlIHdpdGggdGhlIHRlcm1zIG9mIHRoZSBBZG9iZSBsaWNlbnNlIGFncmVlbWVudCBhY2NvbXBhbnlpbmdcbiAqIGl0LlxuICovXG52YXIgX1ZhbGlkYXRvcl9wb29sLCBfVmFsaWRhdG9yX2RldGVjdGlvbkxlbmd0aDtcbmNvbnN0IGRiZyQ4ID0gZGVidWcoJ2MycGE6VmFsaWRhdG9yJyk7XG4vKipcbiAqIEhhbmRsZXMgdmFsaWRhdGlvbiBvZiBpbnB1dCBiZWZvcmUgcHJvY2Vzc2luZyBpdCBmb3IgQzJQQSBtZXRhZGF0YVxuICpcbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgVmFsaWRhdG9yIHtcbiAgICBjb25zdHJ1Y3Rvcihwb29sLCBkZXRlY3Rpb25MZW5ndGgpIHtcbiAgICAgICAgX1ZhbGlkYXRvcl9wb29sLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfVmFsaWRhdG9yX2RldGVjdGlvbkxlbmd0aC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfVmFsaWRhdG9yX3Bvb2wsIHBvb2wsIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfVmFsaWRhdG9yX2RldGVjdGlvbkxlbmd0aCwgZGV0ZWN0aW9uTGVuZ3RoID8/IFZhbGlkYXRvci5ERUZBVUxUX0RFVEVDVElPTl9MRU5HVEgsIFwiZlwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2FuaXRpemVzIG1pbWUgdHlwZSBzdHJpbmdzIGZvciBwcm9wZXIgZmlsZSB0eXBlIGNoZWNraW5nXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFdlIG5lZWQgdG8gZG8gdGhpcyBzaW5jZSBzb21lIENvbnRlbnQtVHlwZXMgY2FuIGNvbWluZyBpbiBzdWNoIGFzIGBpbWFnZS9qcGVnOyBjaGFyc2V0PXV0Zi04YC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0eXBlIC0gVGhlIG1pbWUgdHlwZSBvZiB0aGUgYXNzZXRcbiAgICAgKi9cbiAgICBzdGF0aWMgc2FuaXRpemVNaW1lVHlwZSh0eXBlKSB7XG4gICAgICAgIHJldHVybiB0eXBlLnNwbGl0KCc7JylbMF07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgYXNzZXQgaGFzIGEgbWltZSB0eXBlIHRoYXQgaXMgY29tcGF0aWJsZSB3aXRoIEMyUEFcbiAgICAgKlxuICAgICAqIEBwYXJhbSB0eXBlIC0gVGhlIG1pbWUgdHlwZSBvZiB0aGUgYXNzZXQgdG8gY2hlY2tcbiAgICAgKi9cbiAgICBzdGF0aWMgaXNWYWxpZE1pbWVUeXBlKHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuVkFMSURfTUlNRV9UWVBFUy5pbmNsdWRlcyh0aGlzLnNhbml0aXplTWltZVR5cGUodHlwZSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTY2FucyBhbiBpbmRpdmlkdWFsIGJpbmFyeSBjaHVuayBmb3IgYSBDMlBBIG1ldGFkYXRhIG1hcmtlclxuICAgICAqXG4gICAgICogQHBhcmFtIGNodW5rIC0gdGhlIGNodW5rIHRvIGNoZWNrIGZvciB0aGUgbWV0YWRhdGEgbWFya2VyXG4gICAgICovXG4gICAgYXN5bmMgc2NhbkNodW5rKGNodW5rKSB7XG4gICAgICAgIGRiZyQ4KCdTY2FubmluZyBidWZmZXIgZm9yIEMyUEEgbWFya2VyIHdpdGggbGVuZ3RoICVkJywgY2h1bmsuYnl0ZUxlbmd0aCk7XG4gICAgICAgIC8vIFRPRE86IEFkZCBzdXBwb3J0IGZvciB0cmFuc2ZlcmFibGUgb2JqZWN0c1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9WYWxpZGF0b3JfcG9vbCwgXCJmXCIpLnNjYW5JbnB1dChjaHVuayk7XG4gICAgICAgIGRiZyQ4KCdTY2FubmVkIGJ1ZmZlciBhbmQgZ290IHJlc3VsdCcsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNjYW5zIGEgYnVmZmVyL0Jsb2IgZm9yIGEgQzJQQSBtZXRhZGF0YSBtYXJrZXJcbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhpcyB3aWxsIGF1dG9tYXRpY2FsbHkgaGFuZGxlIGJvdGggYSBgQXJyYXlCdWZmZXJgIG9yIGEgYEJsb2JgIGFzIGlucHV0XG4gICAgICogYW5kIGF1dG9tYXRpY2FsbHkgZGVjaWRlIGlmIGl0IHNob3VsZCBiZSBwYXNzZWQgYXMgYSB0cmFuc2ZlcmFibGUgb2JqZWN0IG9yIG5vdC5cbiAgICAgKiBJdCB3aWxsIHRoZW4gcGFzcyBpdCB0byBgc2NhbkNodW5rYCBmb3IgdGhlIGFjdHVhbCBwcm9jZXNzaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIGlucHV0IC0gVGhlIGJ1ZmZlci9ibG9iIHRvIHNjYW5cbiAgICAgKi9cbiAgICBhc3luYyBzY2FuSW5wdXQoaW5wdXQpIHtcbiAgICAgICAgbGV0IGJ1ZmZlciA9IG51bGw7XG4gICAgICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgICBidWZmZXIgPSBpbnB1dDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpbnB1dCBpbnN0YW5jZW9mIEJsb2IpIHtcbiAgICAgICAgICAgIC8vIE9ubHkgc2VuZCB0aGlzIGFzIGEgdHJhbnNmZXJhYmxlIG9iamVjdCBpZiB3ZSBhcmUgZXh0cmFjdGluZyBhbiBhcnJheVxuICAgICAgICAgICAgLy8gYnVmZmVyIGZyb20gYSBibG9iLCBzaW5jZSB3ZSB3b24ndCBiZSByZS11c2luZyB0aGlzIGJ1ZmZlciBhbnl3aGVyZSBlbHNlXG4gICAgICAgICAgICBjb25zdCBmdWxsQnVmZmVyID0gYXdhaXQgaW5wdXQuYXJyYXlCdWZmZXIoKTtcbiAgICAgICAgICAgIGlmIChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9WYWxpZGF0b3JfZGV0ZWN0aW9uTGVuZ3RoLCBcImZcIikgPiAwKSB7XG4gICAgICAgICAgICAgICAgYnVmZmVyID0gZnVsbEJ1ZmZlci5zbGljZSgwLCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9WYWxpZGF0b3JfZGV0ZWN0aW9uTGVuZ3RoLCBcImZcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYnVmZmVyID0gZnVsbEJ1ZmZlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWJ1ZmZlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnB1dEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc2NhbkNodW5rKGJ1ZmZlcik7XG4gICAgfVxufVxuX1ZhbGlkYXRvcl9wb29sID0gbmV3IFdlYWtNYXAoKSwgX1ZhbGlkYXRvcl9kZXRlY3Rpb25MZW5ndGggPSBuZXcgV2Vha01hcCgpO1xuVmFsaWRhdG9yLlZBTElEX01JTUVfVFlQRVMgPSBbXG4gICAgJ2ltYWdlL2pwZWcnLFxuICAgICdpbWFnZS9wbmcnLFxuICAgICdpbWFnZS93ZWJwJyxcbiAgICAnaW1hZ2Uvc3ZnK3htbCcsXG4gICAgJ3ZpZGVvL21wNCcsXG4gICAgJ2FwcGxpY2F0aW9uL3gtYzJwYS1tYW5pZmVzdC1zdG9yZScsXG5dO1xuVmFsaWRhdG9yLkRFRkFVTFRfREVURUNUSU9OX0xFTkdUSCA9IDY1NTM1O1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDIxIEFkb2JlXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIE5PVElDRTogQWRvYmUgcGVybWl0cyB5b3UgdG8gdXNlLCBtb2RpZnksIGFuZCBkaXN0cmlidXRlIHRoaXMgZmlsZSBpblxuICogYWNjb3JkYW5jZSB3aXRoIHRoZSB0ZXJtcyBvZiB0aGUgQWRvYmUgbGljZW5zZSBhZ3JlZW1lbnQgYWNjb21wYW55aW5nXG4gKiBpdC5cbiAqL1xudmFyIF9hLCBfRG93bmxvYWRlcl9vcHRpb25zLCBfRG93bmxvYWRlcl9wb29sLCBfRG93bmxvYWRlcl92YWxpZGF0b3IsIF9Eb3dubG9hZGVyX3Jlc3BvbnNlQ2FjaGUsIF9Eb3dubG9hZGVyX2RlZmF1bHRPcHRpb25zLCBfRG93bmxvYWRlcl9kZWZhdWx0RmV0Y2hPcHRpb25zO1xuY29uc3QgZGJnJDcgPSBkZWJ1ZygnYzJwYTpEb3dubG9hZGVyJyk7XG5jb25zdCBjYWNoZURiZyA9IGRlYnVnKCdjMnBhOkRvd25sb2FkZXI6Q2FjaGUnKTtcbi8qKlxuICogSGFuZGxlcyBkb3dubG9hZGluZyBvZiBhbnkgYXNzZXRzXG4gKlxuICogQHB1YmxpY1xuICovXG5jbGFzcyBEb3dubG9hZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihwb29sLCBvcHRzID0ge30pIHtcbiAgICAgICAgX0Rvd25sb2FkZXJfb3B0aW9ucy5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX0Rvd25sb2FkZXJfcG9vbC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX0Rvd25sb2FkZXJfdmFsaWRhdG9yLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9Eb3dubG9hZGVyX29wdGlvbnMsIHsgLi4uX19jbGFzc1ByaXZhdGVGaWVsZEdldChEb3dubG9hZGVyLCBfYSwgXCJmXCIsIF9Eb3dubG9hZGVyX2RlZmF1bHRPcHRpb25zKSwgLi4ub3B0cyB9LCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0Rvd25sb2FkZXJfcG9vbCwgcG9vbCwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9Eb3dubG9hZGVyX3ZhbGlkYXRvciwgbmV3IFZhbGlkYXRvcihfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Eb3dubG9hZGVyX3Bvb2wsIFwiZlwiKSwgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfRG93bmxvYWRlcl9vcHRpb25zLCBcImZcIikuaW5zcGVjdFNpemUpLCBcImZcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyYXBwZXIgYXJvdW5kIGBmZXRjaGAgdG8gZG93bmxvYWQgYW4gYXNzZXRcbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhpcyBoYXMgY29udmVuaWVuY2UgbG9naWMgZm9yIHJhbmdlIHJlcXVlc3RzXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdXJsIC0gVGhlIFVSTCB0byBmZXRjaFxuICAgICAqIEBwYXJhbSBmZXRjaE9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGlzIHBhcnRpY3VsYXIgcmVxdWVzdFxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBkb3dubG9hZCh1cmwsIGZldGNoT3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGRiZyQ3KCdEb3dubG9hZGluZycsIHVybCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0T3B0cyA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQoRG93bmxvYWRlciwgX2EsIFwiZlwiLCBfRG93bmxvYWRlcl9kZWZhdWx0RmV0Y2hPcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IG9wdHMgPSBtZXJnZV8xKHt9LCBkZWZhdWx0T3B0cywgZmV0Y2hPcHRpb25zKTtcbiAgICAgICAgICAgIC8vIE9ubHkgdXNlIHJhbmdlIGlmIGl0IGlzIHNwZWNpZmllZC4gSWYgbm90LCBpdCBtYXkgbGVhZCB0byBDT1JTIGlzc3VlcyBkdWUgdG8gbm90IGJlaW5nIHdoaXRlbGlzdGVkXG4gICAgICAgICAgICBjb25zdCB1c2VSYW5nZSA9IG9wdHMucmFuZ2VTdGFydCAhPT0gZGVmYXVsdE9wdHMucmFuZ2VTdGFydCB8fFxuICAgICAgICAgICAgICAgIG9wdHMucmFuZ2VFbmQgIT09IGRlZmF1bHRPcHRzLnJhbmdlRW5kO1xuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSBbb3B0cy5yYW5nZVN0YXJ0LCBvcHRzLnJhbmdlRW5kID8/ICcnXS5qb2luKCctJyk7XG4gICAgICAgICAgICBjb25zdCByYW5nZUhlYWRlcnMgPSB1c2VSYW5nZVxuICAgICAgICAgICAgICAgID8geyBoZWFkZXJzOiB7IHJhbmdlOiBgYnl0ZXM9JHtyYW5nZX1gIH0gfVxuICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKHVybCwgbWVyZ2VfMSh7fSwgb3B0cy5mZXRjaENvbmZpZywgcmFuZ2VIZWFkZXJzKSk7XG4gICAgICAgICAgICBpZiAocmVzLm9rKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVcmxGZXRjaEVycm9yKHVybCwgcmVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVXJsRmV0Y2hFcnJvcih1cmwsIG51bGwsIHsgY2F1c2U6IGVyciB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIGFsbG93cyB1cyB0byBpbnNwZWN0IHRoZSBpbWFnZSB0byBzZWUgaWYgdGhlIGhlYWRlciBjb250YWlucyBDMlBBIGRhdGFcbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogV2Ugd2lsbCByZXF1ZXN0IGEgZG93bmxvYWQgdG8gdGhlIHNlcnZlciByZXF1ZXN0aW5nIHRoZSBmaXJzdCBgaW5zcGVjdFNpemVgIGJ5dGVzLiBGcm9tIHRoZXJlOlxuICAgICAqIC0gaWYgdGhlIHNlcnZlciByZXNwb25kcyB3aXRoIGEgcGF5bG9hZCBsZXNzIHRoYW4gdGhlIGNvbnRlbnQtbGVuZ3RoLCB3ZSB3aWxsIGluc3BlY3QgdGhhdCBjaHVuayBhbmRcbiAgICAgKiAgIGRvd25sb2FkIHRoZSByZXN0IGlmIHRoZSBjb250ZW50LXR5cGUgbWF0Y2hlcyBhbmQgdGhhdCBjaHVuayBjb250YWlucyBtZXRhZGF0YVxuICAgICAqIC0gaWYgaXQgcmVzcG9uZHMgd2l0aCBhIHBheWxvYWQgZXF1YWwgdG8gb3IgZ3JlYXRlciB0aGFuIHRoZSBjb250ZW50LWxlbmd0aCwgd2Ugd2lsbCBpbnNwZWN0IHRoYXQgdGhlXG4gICAgICogICBjb250ZW50IHR5cGUgbWF0Y2hlcywgc2NhbiB0aGUgY2h1bmssIGFuZCByZXR1cm4gdGhlIGRhdGFcbiAgICAgKiAtIHdlJ2xsIHJldHVybiBgbnVsbGAgaWYgdGhlIGNvbnRlbnQtdHlwZSBpcyBpbnZhbGlkIG9yIGlmIENBSSBkYXRhIGRvZXMgbm90IGV4aXN0XG4gICAgICpcbiAgICAgKiBAcGFyYW0gdXJsIC0gVGhlIFVSTCB0byBmZXRjaFxuICAgICAqL1xuICAgIGFzeW5jIGluc3BlY3QodXJsKSB7XG4gICAgICAgIGRiZyQ3KCdJbnNwZWN0aW5nJywgdXJsKTtcbiAgICAgICAgbGV0IHJlcztcbiAgICAgICAgbGV0IGNvbnRlbnRUeXBlID0gbnVsbDtcbiAgICAgICAgY29uc3Qgc2hvdWxkSW5zcGVjdCA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0Rvd25sb2FkZXJfb3B0aW9ucywgXCJmXCIpLmluc3BlY3RTaXplID4gMDtcbiAgICAgICAgaWYgKHNob3VsZEluc3BlY3QpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmVzID0gYXdhaXQgRG93bmxvYWRlci5kb3dubG9hZCh1cmwsIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VFbmQ6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0Rvd25sb2FkZXJfb3B0aW9ucywgXCJmXCIpLmluc3BlY3RTaXplLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlID0gcmVzLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzLnN0YXR1cyA9PT0gMjA2KSB7XG4gICAgICAgICAgICAgICAgICAgIGRiZyQ3KCdTdWNjZXNzZnVsbHkgZG93bmxvYWRlZCBmaXJzdCBwYXJ0IG9mIHVybCAoc3VwcG9ydHMgcmFuZ2UgcmVxdWVzdHMpJywgdXJsLCByZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGJnJDcoJ1N1Y2Nlc3NmdWxseSBkb3dubG9hZGVkIGNvbXBsZXRlIHVybCAoc2VydmVyIGRvZXMgbm90IHN1cHBvcnQgcmFuZ2UgcmVxdWVzdHMpJywgdXJsLCByZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBkYmckNygnQXR0ZW1wdGluZyB0byBkb3dubG9hZCB3aXRoIGEgcmFuZ2UgaGVhZGVyIGZhaWxlZCwgdHJ5aW5nIGFnYWluIHdpdGhvdXQgb25lJywgZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRiZyQ3KCdpbnNwZWN0U2l6ZSBvZiAwIGdpdmVuLCBkb3dubG9hZGluZyBlbnRpcmUgZmlsZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcmVzKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIFdlIGRvbid0IGhhdmUgYW4gaW5pdGlhbCByZXNwb25zZSBkdWUgdG8gbm90IGRvaW5nIHRoZSBpbml0aWFsIHJhbmdlIGRvd25sb2FkXG4gICAgICAgICAgICAgICAgLy8gRG8gYSBIRUFEIHJlcXVlc3QgdG8gZGV0ZXJtaW5lIGlmIHdlIHNob3VsZCBkb3dubG9hZCB0aGUgZW50aXJlIGZpbGUgYmFzZWQgb24gY29udGVudC10eXBlXG4gICAgICAgICAgICAgICAgY29uc3QgaGVhZFJlcyA9IGF3YWl0IERvd25sb2FkZXIuZG93bmxvYWQodXJsLCB7XG4gICAgICAgICAgICAgICAgICAgIGZldGNoQ29uZmlnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdIRUFEJyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb250ZW50VHlwZSA9IGhlYWRSZXMuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpO1xuICAgICAgICAgICAgICAgIGRiZyQ3KCdQZXJmb3JtZWQgSEVBRCByZXF1ZXN0IGFuZCBnb3QgY29udGVudC10eXBlJywgdXJsLCBjb250ZW50VHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgZGJnJDcoJ0hFQUQgcmVxdWVzdCB0byBjaGVjayBmb3IgY29udGVudC10eXBlIGZhaWxlZCwgZG93bmxvYWRpbmcgZW50aXJlIGZpbGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udGVudFR5cGUgJiYgIVZhbGlkYXRvci5pc1ZhbGlkTWltZVR5cGUoY29udGVudFR5cGUpKSB7XG4gICAgICAgICAgICBkYmckNygnUmVzb3VyY2UgaGFzIGludmFsaWQgY29udGVudCB0eXBlJywgY29udGVudFR5cGUpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRNaW1lVHlwZUVycm9yKGNvbnRlbnRUeXBlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJlcykge1xuICAgICAgICAgICAgcmVzID0gYXdhaXQgRG93bmxvYWRlci5kb3dubG9hZCh1cmwpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJsb2IgPSBhd2FpdCByZXMuYmxvYigpO1xuICAgICAgICBpZiAoIXNob3VsZEluc3BlY3QpIHtcbiAgICAgICAgICAgIGRiZyQ3KGBTa2lwcGluZyBpbnNwZWN0aW9uIGR1ZSB0byBkaXNhYmxpbmcgdGhlIGNvbmZpZ2ApO1xuICAgICAgICAgICAgcmV0dXJuIGJsb2I7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYnVmZmVyID0gYXdhaXQgYmxvYi5hcnJheUJ1ZmZlcigpO1xuICAgICAgICBjb25zdCB7IGZvdW5kIH0gPSBhd2FpdCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Eb3dubG9hZGVyX3ZhbGlkYXRvciwgXCJmXCIpLnNjYW5DaHVuayhidWZmZXIpO1xuICAgICAgICBpZiAoZm91bmQpIHtcbiAgICAgICAgICAgIGRiZyQ3KCdDMlBBIG1ldGFkYXRhIGZvdW5kIGZvciB1cmwnLCB1cmwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGJnJDcoJ05vIEMyUEEgbWV0YWRhdGEgZm91bmQgZm9yIHVybCcsIHVybCk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvLyBXZSBkb24ndCBnZXQgYSBmdWxsIGNvbnRlbnQtbGVuZ3RoIGJhY2sgZnJvbSB0aGUgc2VydmVyIHdoZW4gZG9pbmcgYSByYW5nZVxuICAgICAgICAvLyByZXF1ZXN0LCBzbyB3ZSBuZWVkIHRvIGd1ZXNzIGJhc2VkIG9uIHRoZSByZXNwb25zZS4gV2Ugc2hvdWxkIGNvbnRpbnVlIGlmXG4gICAgICAgIC8vIHdlIGdldCBhIDIwNiBiYWNrIGZyb20gdGhlIHNlcnZlciBpbnN0ZWFkIG9mIGEgMjAwLCBhbmQgdGhhdCBlcXVhbHMgdGhlIGBpbnNwZWN0U2l6ZWAuXG4gICAgICAgIC8vIEluIHRoYXQgY2FzZSwgY2hhbmdlcyBhcmUgdGhlIHNlY29uZCByZXF1ZXN0IHdpbGwgeWllbGQgbW9yZSBkYXRhLCB1bmxlc3MgdGhlIGltYWdlXG4gICAgICAgIC8vIHNpemUgaXMgZXhhY3RseSB0aGUgYGluc3BlY3RTaXplYCwgYW5kIHdlIGdldCBubyBkYXRhIGJhY2suXG4gICAgICAgIGNvbnN0IHNob3VsZENvbnRpbnVlID0gcmVzLnN0YXR1cyA9PT0gMjA2ICYmIGJ1ZmZlci5ieXRlTGVuZ3RoID09PSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Eb3dubG9hZGVyX29wdGlvbnMsIFwiZlwiKS5pbnNwZWN0U2l6ZSArIDE7XG4gICAgICAgIGlmIChzaG91bGRDb250aW51ZSkge1xuICAgICAgICAgICAgZGJnJDcoJ0NvbnRpbnVpbmcgZG93bmxvYWQgYXQgb2Zmc2V0ICVkJywgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfRG93bmxvYWRlcl9vcHRpb25zLCBcImZcIikuaW5zcGVjdFNpemUpO1xuICAgICAgICAgICAgY29uc3QgdGFpbFJlcyA9IGF3YWl0IERvd25sb2FkZXIuZG93bmxvYWQodXJsLCB7XG4gICAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBzdGFydCB0aGUgcmFuZ2UgYXQgdGhlIG5leHQgYnl0ZVxuICAgICAgICAgICAgICAgIHJhbmdlU3RhcnQ6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0Rvd25sb2FkZXJfb3B0aW9ucywgXCJmXCIpLmluc3BlY3RTaXplICsgMSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgdGFpbEJ1ZmZlciA9IGF3YWl0IHRhaWxSZXMuYXJyYXlCdWZmZXIoKTtcbiAgICAgICAgICAgIGRiZyQ3KCdTdWNjZXNzZnVsbHkgZG93bmxvYWRlZCByZXN0IG9mIGZpbGUgKCVkIGJ5dGVzKScsIHRhaWxCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEJsb2IoW2J1ZmZlciwgdGFpbEJ1ZmZlcl0sIHsgdHlwZTogYmxvYi50eXBlIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBibG9iO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIGEgSlNPTiBwYXlsb2FkIGFuZCBjYWNoZXMgaXQsIHVzaW5nIHRoZSByZXF1ZXN0ZWQgVVJMIGFzIHRoZSBrZXlcbiAgICAgKlxuICAgICAqIEBwYXJhbSB1cmwgLSBUaGUgVVJMIHRvIGZldGNoIGFuZCBjYWNoZVxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBjYWNoZWRHZXRKc29uKHVybCkge1xuICAgICAgICBpZiAoIV9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX2EsIFwiZlwiLCBfRG93bmxvYWRlcl9yZXNwb25zZUNhY2hlKS5nZXQodXJsKSkge1xuICAgICAgICAgICAgY2FjaGVEYmcoJ05vIGNhY2hlIGZvdW5kIGZvciAlcycsIHVybCk7XG4gICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBEb3dubG9hZGVyLmRvd25sb2FkKHVybCwge1xuICAgICAgICAgICAgICAgIGZldGNoQ29uZmlnOiB7XG4gICAgICAgICAgICAgICAgICAgIGNyZWRlbnRpYWxzOiAnb21pdCcsXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXMuanNvbigpO1xuICAgICAgICAgICAgY2FjaGVEYmcoJ1NhdmluZyBkYXRhIGZvciAlcycsIHVybCwgZGF0YSk7XG4gICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9hLCBcImZcIiwgX0Rvd25sb2FkZXJfcmVzcG9uc2VDYWNoZSkuc2V0KHVybCwgZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgY2FjaGVEYmcoJ1JldHVybmluZyBjYWNoZWQgZGF0YSBmb3IgJXMnLCB1cmwpO1xuICAgICAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfYSwgXCJmXCIsIF9Eb3dubG9hZGVyX3Jlc3BvbnNlQ2FjaGUpLmdldCh1cmwpO1xuICAgIH1cbn1cbl9hID0gRG93bmxvYWRlciwgX0Rvd25sb2FkZXJfb3B0aW9ucyA9IG5ldyBXZWFrTWFwKCksIF9Eb3dubG9hZGVyX3Bvb2wgPSBuZXcgV2Vha01hcCgpLCBfRG93bmxvYWRlcl92YWxpZGF0b3IgPSBuZXcgV2Vha01hcCgpO1xuX0Rvd25sb2FkZXJfcmVzcG9uc2VDYWNoZSA9IHsgdmFsdWU6IG5ldyBNYXAoKSB9O1xuX0Rvd25sb2FkZXJfZGVmYXVsdE9wdGlvbnMgPSB7IHZhbHVlOiB7XG4gICAgICAgIGluc3BlY3RTaXplOiAwLFxuICAgIH0gfTtcbl9Eb3dubG9hZGVyX2RlZmF1bHRGZXRjaE9wdGlvbnMgPSB7IHZhbHVlOiB7XG4gICAgICAgIHJhbmdlU3RhcnQ6IDAsXG4gICAgICAgIHJhbmdlRW5kOiB1bmRlZmluZWQsXG4gICAgICAgIGZldGNoQ29uZmlnOiB7fSxcbiAgICB9IH07XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMjMgQWRvYmVcbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTk9USUNFOiBBZG9iZSBwZXJtaXRzIHlvdSB0byB1c2UsIG1vZGlmeSwgYW5kIGRpc3RyaWJ1dGUgdGhpcyBmaWxlIGluXG4gKiBhY2NvcmRhbmNlIHdpdGggdGhlIHRlcm1zIG9mIHRoZSBBZG9iZSBsaWNlbnNlIGFncmVlbWVudCBhY2NvbXBhbnlpbmdcbiAqIGl0LlxuICovXG5mdW5jdGlvbiBjcmVhdGVUYXNrKHRhc2spIHtcbiAgICByZXR1cm4gdGFzaztcbn1cblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAyMyBBZG9iZVxuICogQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBOT1RJQ0U6IEFkb2JlIHBlcm1pdHMgeW91IHRvIHVzZSwgbW9kaWZ5LCBhbmQgZGlzdHJpYnV0ZSB0aGlzIGZpbGUgaW5cbiAqIGFjY29yZGFuY2Ugd2l0aCB0aGUgdGVybXMgb2YgdGhlIEFkb2JlIGxpY2Vuc2UgYWdyZWVtZW50IGFjY29tcGFueWluZ1xuICogaXQuXG4gKi9cbi8vIEZyb20gaHR0cHM6Ly9naXRodWIuY29tL2pvc2Rlam9uZy93b3JrZXJwb29sL2Jsb2IvbWFzdGVyL3NyYy9Xb3JrZXJIYW5kbGVyLmpzI0wxNzktTDE5M1xuZnVuY3Rpb24gZGVzZXJpYWxpemVFcnJvcihzZXJpYWxpemVkRXJyb3IpIHtcbiAgICB2YXIgdGVtcCA9IG5ldyBFcnJvcignJyk7XG4gICAgdmFyIHByb3BzID0gT2JqZWN0LmtleXMoc2VyaWFsaXplZEVycm9yKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGVtcFtwcm9wc1tpXV0gPSBzZXJpYWxpemVkRXJyb3JbcHJvcHNbaV1dO1xuICAgIH1cbiAgICByZXR1cm4gdGVtcDtcbn1cblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAyMyBBZG9iZVxuICogQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBOT1RJQ0U6IEFkb2JlIHBlcm1pdHMgeW91IHRvIHVzZSwgbW9kaWZ5LCBhbmQgZGlzdHJpYnV0ZSB0aGlzIGZpbGUgaW5cbiAqIGFjY29yZGFuY2Ugd2l0aCB0aGUgdGVybXMgb2YgdGhlIEFkb2JlIGxpY2Vuc2UgYWdyZWVtZW50IGFjY29tcGFueWluZ1xuICogaXQuXG4gKi9cbi8qKlxuICogQ3JlYXRlIGEgd3JhcHBlciByZXNwb25zaWJsZSBmb3IgbWFuYWdpbmcgYSBzaW5nbGUgd29ya2VyXG4gKlxuICogQHBhcmFtIHNjcmlwdFVybCBVUkwgdG8gd29ya2VyIHNjcmlwdFxuICogQHJldHVybnMge1dvcmtlck1hbmFnZXJ9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVdvcmtlck1hbmFnZXIoc2NyaXB0VXJsKSB7XG4gICAgY29uc3Qgd29ya2VyID0gbmV3IFdvcmtlcihzY3JpcHRVcmwsIHsgdHlwZTogJ21vZHVsZScgfSk7XG4gICAgbGV0IHdvcmtpbmcgPSBmYWxzZTtcbiAgICBjb25zdCBleGVjdXRlID0gYXN5bmMgKHJlcXVlc3QpID0+IHtcbiAgICAgICAgd29ya2VyLnBvc3RNZXNzYWdlKHJlcXVlc3QpO1xuICAgICAgICB3b3JraW5nID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHdvcmtlci5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGlmIChlLmRhdGEudHlwZSA9PT0gJ3N1Y2Nlc3MnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZS5kYXRhLmRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGRlc2VyaWFsaXplRXJyb3IoZS5kYXRhLmVycm9yKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdvcmtpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3b3JrZXIub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgd29ya2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgaXNXb3JraW5nID0gKCkgPT4gd29ya2luZztcbiAgICBjb25zdCB0ZXJtaW5hdGUgPSAoKSA9PiB3b3JrZXIudGVybWluYXRlKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZXhlY3V0ZSxcbiAgICAgICAgaXNXb3JraW5nLFxuICAgICAgICB0ZXJtaW5hdGUsXG4gICAgfTtcbn1cblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAyMyBBZG9iZVxuICogQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBOT1RJQ0U6IEFkb2JlIHBlcm1pdHMgeW91IHRvIHVzZSwgbW9kaWZ5LCBhbmQgZGlzdHJpYnV0ZSB0aGlzIGZpbGUgaW5cbiAqIGFjY29yZGFuY2Ugd2l0aCB0aGUgdGVybXMgb2YgdGhlIEFkb2JlIGxpY2Vuc2UgYWdyZWVtZW50IGFjY29tcGFueWluZ1xuICogaXQuXG4gKi9cbi8qKlxuICogQ3JlYXRlIGEgY29uZmlndXJhYmxlIHBvb2wgb2Ygd29ya2VycyBjYXBhYmxlIG9mIGNvbmN1cnJlbnQgdGFzayBleGVjdXRpb25cbiAqXG4gKiBAcGFyYW0ge1dvcmtlclBvb2xDb25maWd9IGNvbmZpZ1xuICogQHJldHVybnMge1dvcmtlclBvb2x9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVdvcmtlclBvb2woY29uZmlnKSB7XG4gICAgY29uc3Qgd29ya2VycyA9IFtdO1xuICAgIGNvbnN0IHRhc2tzID0gW107XG4gICAgLyoqXG4gICAgICogUmV0cmlldmUgYW4gYXZhaWxhYmxlIHdvcmtlci4gSWYgbm9uZSBhcmUgYXZhaWxhYmxlIGFuZCB0aGUgbWF4IGlzIG5vdCByZWFjaGVkLFxuICAgICAqIGEgbmV3IG9uZSB3aWxsIGJlIGNyZWF0ZWQgYW5kIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHJldHVybnMge1dvcmtlck1hbmFnZXIgfCBudWxsfSB3b3JrZXJcbiAgICAgKi9cbiAgICBjb25zdCBnZXRXb3JrZXIgPSAoKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3Qgd29ya2VyIG9mIHdvcmtlcnMpIHtcbiAgICAgICAgICAgIGlmICghd29ya2VyLmlzV29ya2luZygpKVxuICAgICAgICAgICAgICAgIHJldHVybiB3b3JrZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdvcmtlcnMubGVuZ3RoIDwgY29uZmlnLm1heFdvcmtlcnMpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1dvcmtlciA9IGNyZWF0ZVdvcmtlck1hbmFnZXIoY29uZmlnLnNjcmlwdFNyYyk7XG4gICAgICAgICAgICB3b3JrZXJzLnB1c2gobmV3V29ya2VyKTtcbiAgICAgICAgICAgIHJldHVybiBuZXdXb3JrZXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBdHRlbXB0IHRvIHByb2Nlc3MgdGhlIHRhc2sgcXVldWUgYnkgcmV0cmlldmluZyBhIHdvcmtlciwgYXNzaWduaW5nIGl0IGEgdGFzayxcbiAgICAgKiBhbmQgcmVzb2x2aW5nIHRoZSB0YXNrIG9uY2UgY29tcGxldGUuXG4gICAgICovXG4gICAgY29uc3QgYXNzaWduVGFzayA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3Qgd29ya2VyID0gZ2V0V29ya2VyKCk7XG4gICAgICAgIGlmICghd29ya2VyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGFzayA9IHRhc2tzLnBvcCgpO1xuICAgICAgICBpZiAoIXRhc2spIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgd29ya2VyLmV4ZWN1dGUodGFzay5yZXF1ZXN0KTtcbiAgICAgICAgICAgIHRhc2sucmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGFzay5yZWplY3QoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBdHRlbXB0IHRvIGV4ZWN1dGUgYSBtZXRob2Qgb24gdGhlIHdvcmtlclxuICAgICAqXG4gICAgICogQHBhcmFtIG1ldGhvZCBOYW1lIG9mIG1ldGhvZCB0byBleGVjdXRlXG4gICAgICogQHBhcmFtIGFyZ3MgQXJndW1lbnRzIHRvIGJlIHBhc3NlZFxuICAgICAqIEByZXR1cm5zIFByb21pc2UgdGhhdCByZXNvbHZlcyBvbmNlIHRoZSBtZXRob2QgaGFzIGZpbmlzaGVkIGV4ZWN1dGluZ1xuICAgICAqL1xuICAgIGNvbnN0IGV4ZWN1dGUgPSAobWV0aG9kLCBhcmdzKSA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0YXNrID0gY3JlYXRlVGFzayh7XG4gICAgICAgICAgICAgICAgcmVxdWVzdDoge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICAgICAgICAgIGFyZ3MsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZXNvbHZlOiAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFVwb24gY29tcGxldGlvbiBvZiB0aGlzIHRhc2ssIGl0cyB3b3JrZXIgaXMgbm93IGZyZWUgYW5kIHRoZSBxdWV1ZSBzaG91bGQgYmUgY2hlY2tlZFxuICAgICAgICAgICAgICAgICAgICBhc3NpZ25UYXNrKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZWplY3Q6ICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBhc3NpZ25UYXNrKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGFza3MucHVzaCh0YXNrKTtcbiAgICAgICAgICAgIGFzc2lnblRhc2soKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCB0ZXJtaW5hdGUgPSAoKSA9PiB7XG4gICAgICAgIHdvcmtlcnMuZm9yRWFjaCgod29ya2VyKSA9PiB3b3JrZXIudGVybWluYXRlKCkpO1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZXhlY3V0ZSxcbiAgICAgICAgdGVybWluYXRlLFxuICAgIH07XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMjIgQWRvYmVcbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTk9USUNFOiBBZG9iZSBwZXJtaXRzIHlvdSB0byB1c2UsIG1vZGlmeSwgYW5kIGRpc3RyaWJ1dGUgdGhpcyBmaWxlIGluXG4gKiBhY2NvcmRhbmNlIHdpdGggdGhlIHRlcm1zIG9mIHRoZSBBZG9iZSBsaWNlbnNlIGFncmVlbWVudCBhY2NvbXBhbnlpbmdcbiAqIGl0LlxuICovXG5jb25zdCBkYmckNiA9IGRlYnVnKCdjMnBhOndvcmtlcnMnKTtcbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUxvY2FsRXhlY3V0aW9uRW52aXJvbm1lbnQoc2NyaXB0U3JjKSB7XG4gICAgY29uc29sZS5kZWJ1ZygnVXNpbmcgbG9jYWwgZXhlY3V0aW9uIGVudmlyb25tZW50IGZyb20nLCBzY3JpcHRTcmMpO1xuICAgIGNvbnN0IHsgd29ya2VyIH0gPSBhd2FpdCBpbXBvcnQoXG4gICAgLyogQHZpdGUtaWdub3JlICovIC8qIHdlYnBhY2tJZ25vcmU6IHRydWUgKi8gc2NyaXB0U3JjKTtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi53b3JrZXIsXG4gICAgICAgIGRpc3Bvc2U6ICgpID0+IHsgfSxcbiAgICB9O1xufVxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlUG9vbFdyYXBwZXIoY29uZmlnKSB7XG4gICAgLy8gRml4IGZvciBTYWZhcmkgPCAxNCB3aGVuIHRyeWluZyB0byBjYWxsIHRoaXMgZnJvbSBpbnNpZGUgYW4gZXhpc3RpbmcgV2ViIHdvcmtlclxuICAgIGlmICh0eXBlb2YgV29ya2VyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWxFeGVjdXRpb25FbnZpcm9ubWVudChjb25maWcuZmFsbGJhY2tTY3JpcHRTcmMgPz8gY29uZmlnLnNjcmlwdFNyYyk7XG4gICAgfVxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGNvbmZpZy5zY3JpcHRTcmMpO1xuICAgIGlmICghcmVzLm9rKVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFdvcmtlclNvdXJjZUVycm9yKGNvbmZpZy5zY3JpcHRTcmMsIHJlcyk7XG4gICAgY29uc3Qgc3JjID0gYXdhaXQgcmVzLnRleHQoKTtcbiAgICAvLyBAVE9ETzogY2hlY2sgc3VicmVzb3VyY2UgaW50ZWdyaXR5XG4gICAgZGJnJDYoJ0ZldGNoZWQgd29ya2VyIGZyb20gJXMgKCVkIGJ5dGVzKScsIGNvbmZpZy5zY3JpcHRTcmMsIHNyYy5sZW5ndGgpO1xuICAgIGNvbnN0IHdvcmtlckJsb2IgPSBuZXcgQmxvYihbc3JjXSwgeyB0eXBlOiAnYXBwbGljYXRpb24vamF2YXNjcmlwdCcgfSk7XG4gICAgY29uc3Qgd29ya2VyVXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTCh3b3JrZXJCbG9iKTtcbiAgICBjb25zdCB3b3JrZXJQb29sID0gY3JlYXRlV29ya2VyUG9vbCh7XG4gICAgICAgIC4uLmNvbmZpZyxcbiAgICAgICAgc2NyaXB0U3JjOiB3b3JrZXJVcmwsXG4gICAgfSk7XG4gICAgY29uc3QgcG9vbCA9IHtcbiAgICAgICAgY29tcGlsZVdhc206IGFzeW5jICguLi5hcmdzKSA9PiB3b3JrZXJQb29sLmV4ZWN1dGUoJ2NvbXBpbGVXYXNtJywgYXJncyksXG4gICAgICAgIGVtYmVkQW5kU2lnbjogYXN5bmMgKC4uLmFyZ3MpID0+IHdvcmtlclBvb2wuZXhlY3V0ZSgnZW1iZWRBbmRTaWduJywgYXJncyksXG4gICAgICAgIGV4cG9ydEltYWdlOiBhc3luYyAoLi4uYXJncykgPT4gd29ya2VyUG9vbC5leGVjdXRlKCdleHBvcnRJbWFnZScsIGFyZ3MpLFxuICAgICAgICBnZXRSZXBvcnQ6IGFzeW5jICguLi5hcmdzKSA9PiB3b3JrZXJQb29sLmV4ZWN1dGUoJ2dldFJlcG9ydCcsIGFyZ3MpLFxuICAgICAgICBnZXRSZXBvcnRGcm9tQXNzZXRBbmRNYW5pZmVzdEJ1ZmZlcjogYXN5bmMgKC4uLmFyZ3MpID0+IHdvcmtlclBvb2wuZXhlY3V0ZSgnZ2V0UmVwb3J0RnJvbUFzc2V0QW5kTWFuaWZlc3RCdWZmZXInLCBhcmdzKSxcbiAgICAgICAgc2NhbklucHV0OiBhc3luYyAoLi4uYXJncykgPT4gd29ya2VyUG9vbC5leGVjdXRlKCdzY2FuSW5wdXQnLCBhcmdzKSxcbiAgICAgICAgc2NhbklucHV0VXJsOiBhc3luYyAoLi4uYXJncykgPT4gd29ya2VyUG9vbC5leGVjdXRlKCdzY2FuSW5wdXRVcmwnLCBhcmdzKSxcbiAgICAgICAgY3JlYXRlSW5ncmVkaWVudEZyb21BcnJheUJ1ZmZlcjogYXN5bmMgKC4uLmFyZ3MpID0+IHdvcmtlclBvb2wuZXhlY3V0ZSgnY3JlYXRlSW5ncmVkaWVudEZyb21BcnJheUJ1ZmZlcicsIGFyZ3MpLFxuICAgICAgICBjcmVhdGVJbmdyZWRpZW50RnJvbUZpbGU6IGFzeW5jICguLi5hcmdzKSA9PiB3b3JrZXJQb29sLmV4ZWN1dGUoJ2NyZWF0ZUluZ3JlZGllbnRGcm9tRmlsZScsIGFyZ3MpLFxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4ucG9vbCxcbiAgICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgVVJMLnJldm9rZU9iamVjdFVSTCh3b3JrZXJVcmwpO1xuICAgICAgICAgICAgcmV0dXJuIHdvcmtlclBvb2wudGVybWluYXRlKCk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAyMiBBZG9iZVxuICogQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBOT1RJQ0U6IEFkb2JlIHBlcm1pdHMgeW91IHRvIHVzZSwgbW9kaWZ5LCBhbmQgZGlzdHJpYnV0ZSB0aGlzIGZpbGUgaW5cbiAqIGFjY29yZGFuY2Ugd2l0aCB0aGUgdGVybXMgb2YgdGhlIEFkb2JlIGxpY2Vuc2UgYWdyZWVtZW50IGFjY29tcGFueWluZ1xuICogaXQuXG4gKi9cbmNvbnN0IGRiZyQ1ID0gZGVidWcoJ2MycGE6d2FzbScpO1xuLyoqXG4gKiBGZXRjaGVzIHRoZSBXQVNNIGJpbmFyeSBmcm9tIGEgc3VwcGxpZWQgVVJMXG4gKlxuICogQHBhcmFtIHBvb2wgV29ya2VyIHBvb2wgdG8gYmUgdXNlZCB3aGVuIGNvbXBpbGluZyBXQVNNXG4gKiBAcGFyYW0gYmluYXJ5VXJsIFVSTCBwb2ludGluZyB0byBXQVNNIGJpbmFyeVxuICovXG5hc3luYyBmdW5jdGlvbiBmZXRjaFdhc20ocG9vbCwgYmluYXJ5VXJsKSB7XG4gICAgLy8gQHRzLWlnbm9yZSAtIHRoaXMgdmFsdWUgaXMgcmV3cml0dGVuIGJ5IFJvbGx1cFxuICAgIGNvbnN0IGludGVncml0eSA9IHtcInRvb2xraXQuZC50c1wiOlwic2hhNTEyLXIraWg2Wmt4d08yRTl4MWNIejJ4S3Q4MC8zdEE0WCtsWFJFMTlwc3RFQlQwbVREZUhkbmZSb1d0bzU5V0Jra29aVW9rQjl5d1hOM1gyRjJhNi9BSStnPT1cIixcInRvb2xraXQuanNcIjpcInNoYTUxMi1OeTBzK001akg5TDBpdE1hUFdCZU1TZ3lLTnl4R1RxTzMrYjlUT1FpOWJpekpqQUh2a3dtckFwR3NSNkJwK3FENHhtRmV6VVdLSXYrN3B0aHZMeW1pQT09XCIsXCJ0b29sa2l0X2JnLndhc21cIjpcInNoYTUxMi1KeUV0T3FldXhrUStzQlc3VUs0SEc4OFJpeEhxbUhZRkVMNWpKeFBlUTZJYjFpOWlQYUg2SnBtQkZ2cDRJVXhSQS9KL3hOcGtibkd2R3ZHcFEwNHpIUT09XCIsXCJ0b29sa2l0X2JnLndhc20uZC50c1wiOlwic2hhNTEyLTBWOEg4VFcwajhXNUR4WFcyNnhWR01rQ2NqcjhiSkM4T3A0VFlnc2tDVnlTeDF3NXFHT0VlWUxiNjJTLzBkN3pQV3V4WVdySkdTUERHTzF0OXJOL1dBPT1cIn07XG4gICAgY29uc3Qgd2FzbUludGVncml0eSA9IGludGVncml0eT8uWyd0b29sa2l0X2JnLndhc20nXTtcbiAgICBkYmckNSgnRmV0Y2hpbmcgV0FTTSBiaW5hcnkgZnJvbSB1cmwgJXMnLCBiaW5hcnlVcmwsIHtcbiAgICAgICAgZXhwZWN0ZWRJbnRlZ3JpdHk6IHdhc21JbnRlZ3JpdHksXG4gICAgfSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChiaW5hcnlVcmwsIHtcbiAgICAgICAgaW50ZWdyaXR5OiB3YXNtSW50ZWdyaXR5LFxuICAgIH0pO1xuICAgIGNvbnN0IGJ1ZmZlciA9IGF3YWl0IHJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XG4gICAgZGJnJDUoJ1NlbmRpbmcgV0FTTSBiaW5hcnkgYnVmZmVyIHRvIHdvcmtlciBmb3IgY29tcGlsYXRpb24nLCB7XG4gICAgICAgIHNpemU6IGJ1ZmZlci5ieXRlTGVuZ3RoLFxuICAgIH0pO1xuICAgIGNvbnN0IHdhc20gPSBhd2FpdCBwb29sLmNvbXBpbGVXYXNtKGJ1ZmZlcik7XG4gICAgZGJnJDUoJ0NvbXBpbGF0aW9uIGZpbmlzaGVkJyk7XG4gICAgcmV0dXJuIHdhc207XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMjIgQWRvYmVcbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTk9USUNFOiBBZG9iZSBwZXJtaXRzIHlvdSB0byB1c2UsIG1vZGlmeSwgYW5kIGRpc3RyaWJ1dGUgdGhpcyBmaWxlIGluXG4gKiBhY2NvcmRhbmNlIHdpdGggdGhlIHRlcm1zIG9mIHRoZSBBZG9iZSBsaWNlbnNlIGFncmVlbWVudCBhY2NvbXBhbnlpbmdcbiAqIGl0LlxuICovXG4vKipcbiAqIENyZWF0ZXMgYSBmYWNhZGUgb2JqZWN0IHdpdGggY29udmVuaWVuY2UgbWV0aG9kcyBvdmVyIGFzc2VydGlvbiBkYXRhIHJldHVybmVkIGZyb20gdGhlIHRvb2xraXQuXG4gKlxuICogQHBhcmFtIGFzc2VydGlvbkRhdGEgUmF3IGFzc2VydGlvbiBkYXRhIHJldHVybmVkIGJ5IHRoZSB0b29sa2l0XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFzc2VydGlvbkFjY2Vzc29yKGFzc2VydGlvbkRhdGEpIHtcbiAgICBjb25zdCBzb3J0ZWRBc3NlcnRpb25zID0gYXNzZXJ0aW9uRGF0YS5zb3J0KChhLCBiKSA9PiAoYT8uaW5zdGFuY2UgPz8gMCkgLSAoYj8uaW5zdGFuY2UgPz8gMCkpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IHNvcnRlZEFzc2VydGlvbnMsXG4gICAgICAgIGdldDogKGxhYmVsKSA9PiB7XG4gICAgICAgICAgICAvLyBAVE9ETzogY2FuIHRoZSBcImFueVwiIGNhc3QgYmUgYXZvaWRlZD9cbiAgICAgICAgICAgIHJldHVybiBzb3J0ZWRBc3NlcnRpb25zLmZpbHRlcigoZGF0YSkgPT4gZGF0YS5sYWJlbCA9PT0gbGFiZWwpO1xuICAgICAgICB9LFxuICAgIH07XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMjEgQWRvYmVcbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTk9USUNFOiBBZG9iZSBwZXJtaXRzIHlvdSB0byB1c2UsIG1vZGlmeSwgYW5kIGRpc3RyaWJ1dGUgdGhpcyBmaWxlIGluXG4gKiBhY2NvcmRhbmNlIHdpdGggdGhlIHRlcm1zIG9mIHRoZSBBZG9iZSBsaWNlbnNlIGFncmVlbWVudCBhY2NvbXBhbnlpbmdcbiAqIGl0LlxuICovXG5jb25zdCBERUZBVUxUX0FMRyA9ICdTSEEtMjU2Jztcbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgU0hBIG9mIGEgYnVmZmVyIG9yIGJsb2IgdXNpbmcgV2ViQ3J5cHRvXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHNoYShkYXRhLCBhbGdvcml0aG0gPSBERUZBVUxUX0FMRykge1xuICAgIGNvbnN0IGJ1ZmZlciA9IGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciA/IGRhdGEgOiBhd2FpdCBkYXRhLmFycmF5QnVmZmVyKCk7XG4gICAgLy8gZGVlcGNvZGUgaWdub3JlIEluc2VjdXJlSGFzaDogdXNlZCBmb3IgY29tcGFyaXNvbiwgbm90IHNlY3VyaXR5XG4gICAgY29uc3QgaGFzaEJ1ZiA9IGF3YWl0IGNyeXB0by5zdWJ0bGUuZGlnZXN0KGFsZ29yaXRobSwgYnVmZmVyKTtcbiAgICBjb25zdCBoYXNoQXJyID0gQXJyYXkuZnJvbShuZXcgVWludDhBcnJheShoYXNoQnVmKSk7XG4gICAgLy8gYmFzZTY0IGVuY29kZSB0aGUgaGFzaFxuICAgIHJldHVybiBidG9hKGhhc2hBcnIubWFwKChiKSA9PiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIpKS5qb2luKCcnKSk7XG59XG5hc3luYyBmdW5jdGlvbiBsYWJlbGVkU2hhKGRhdGEsIGFsZ29yaXRobSA9IERFRkFVTFRfQUxHKSB7XG4gICAgY29uc3QgaGFzaCA9IGF3YWl0IHNoYShkYXRhLCBhbGdvcml0aG0pO1xuICAgIGNvbnN0IHByZWZpeCA9IGFsZ29yaXRobS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgnLScsICcnKTtcbiAgICBjb25zdCBzdWZmaXggPSBkYXRhLnR5cGUuc3BsaXQoJy8nKVsxXSA/PyAnYmluJztcbiAgICByZXR1cm4gYCR7cHJlZml4fS0ke2hhc2h9LiR7c3VmZml4fWA7XG59XG5hc3luYyBmdW5jdGlvbiBnZXRSZXNvdXJjZVJlZmVyZW5jZShkYXRhLCBpbnN0YW5jZUlkLCBhbGdvcml0aG0gPSBERUZBVUxUX0FMRykge1xuICAgIGNvbnN0IHN1ZmZpeCA9IGRhdGEudHlwZS5zcGxpdCgnLycpWzFdID8/ICdiaW4nO1xuICAgIGNvbnN0IGlkZW50aWZpZXIgPSBpbnN0YW5jZUlkXG4gICAgICAgID8gYCR7aW5zdGFuY2VJZC5yZXBsYWNlKC9bXmEtejAtOVxcLV0rL2dpLCAnLScpfS4ke3N1ZmZpeH1gXG4gICAgICAgIDogYXdhaXQgbGFiZWxlZFNoYShkYXRhLCBhbGdvcml0aG0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIGZvcm1hdDogZGF0YS50eXBlLFxuICAgICAgICBpZGVudGlmaWVyLFxuICAgIH07XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMjMgQWRvYmVcbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTk9USUNFOiBBZG9iZSBwZXJtaXRzIHlvdSB0byB1c2UsIG1vZGlmeSwgYW5kIGRpc3RyaWJ1dGUgdGhpcyBmaWxlIGluXG4gKiBhY2NvcmRhbmNlIHdpdGggdGhlIHRlcm1zIG9mIHRoZSBBZG9iZSBsaWNlbnNlIGFncmVlbWVudCBhY2NvbXBhbnlpbmdcbiAqIGl0LlxuICovXG5mdW5jdGlvbiBnZXRSZXNvdXJjZUFzQmxvYihzdG9yZSwgcmVmZXJlbmNlKSB7XG4gICAgY29uc3QgeyBmb3JtYXQ6IHR5cGUsIGlkZW50aWZpZXIgfSA9IHJlZmVyZW5jZSA/PyB7fTtcbiAgICBjb25zdCBkYXRhID0gc3RvcmUucmVzb3VyY2VzPy5baWRlbnRpZmllcl07XG4gICAgaWYgKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBCbG9iKFtVaW50OEFycmF5LmZyb20oZGF0YSldLCB7XG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMjIgQWRvYmVcbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTk9USUNFOiBBZG9iZSBwZXJtaXRzIHlvdSB0byB1c2UsIG1vZGlmeSwgYW5kIGRpc3RyaWJ1dGUgdGhpcyBmaWxlIGluXG4gKiBhY2NvcmRhbmNlIHdpdGggdGhlIHRlcm1zIG9mIHRoZSBBZG9iZSBsaWNlbnNlIGFncmVlbWVudCBhY2NvbXBhbnlpbmdcbiAqIGl0LlxuICovXG4vKipcbiAqIENyZWF0ZXMgYSBmYWNhZGUgb2JqZWN0IHdpdGggY29udmVuaWVuY2UgbWV0aG9kcyBvdmVyIHRodW1ibmFpbCBkYXRhIHJldHVybmVkIGZyb20gdGhlIHRvb2xraXQuXG4gKlxuICogQHBhcmFtIHJlc291cmNlU3RvcmUgVGhlIHJlc291cmNlIHN0b3JlIGF0dGFjaGVkIHRvIHRoZSBSZXNvdXJjZVBhcmVudFxuICogQHBhcmFtIHJlc291cmNlUmVmZXJlbmNlIFRoZSByZWZlcmVuY2UgdG8gdGhlIHJlc291cmNlIHRoYXQgcHJvdmlkZXMgdGhlIHRodW1ibmFpbCBkYXRhXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVRodW1ibmFpbCQxKHJlc291cmNlU3RvcmUsIHJlc291cmNlUmVmZXJlbmNlKSB7XG4gICAgY29uc3QgYmxvYiA9IHJlc291cmNlUmVmZXJlbmNlICYmIGdldFJlc291cmNlQXNCbG9iKHJlc291cmNlU3RvcmUsIHJlc291cmNlUmVmZXJlbmNlKTtcbiAgICBpZiAoIWJsb2IpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGJsb2IsXG4gICAgICAgIGNvbnRlbnRUeXBlOiByZXNvdXJjZVJlZmVyZW5jZS5mb3JtYXQsXG4gICAgICAgIGhhc2g6ICgpID0+IHNoYShibG9iKSxcbiAgICAgICAgZ2V0VXJsOiAoKSA9PiBjcmVhdGVPYmplY3RVcmxGcm9tQmxvYihibG9iKSxcbiAgICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlVGh1bWJuYWlsRnJvbUJsb2IoYmxvYiwgY29udGVudFR5cGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBibG9iLFxuICAgICAgICBjb250ZW50VHlwZSxcbiAgICAgICAgaGFzaDogKCkgPT4gc2hhKGJsb2IpLFxuICAgICAgICBnZXRVcmw6ICgpID0+IGNyZWF0ZU9iamVjdFVybEZyb21CbG9iKGJsb2IpLFxuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVUaHVtYm5haWxGcm9tVXJsKHVybCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGNvbnRlbnRUeXBlOiB1bmRlZmluZWQsXG4gICAgICAgIGdldFVybDogKCkgPT4gKHtcbiAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgIGRpc3Bvc2U6ICgpID0+IHsgfSxcbiAgICAgICAgfSksXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZU9iamVjdFVybEZyb21CbG9iKGJsb2IpIHtcbiAgICBjb25zdCB1cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHVybCxcbiAgICAgICAgZGlzcG9zZTogKCkgPT4gVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpLFxuICAgIH07XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMjIgQWRvYmVcbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTk9USUNFOiBBZG9iZSBwZXJtaXRzIHlvdSB0byB1c2UsIG1vZGlmeSwgYW5kIGRpc3RyaWJ1dGUgdGhpcyBmaWxlIGluXG4gKiBhY2NvcmRhbmNlIHdpdGggdGhlIHRlcm1zIG9mIHRoZSBBZG9iZSBsaWNlbnNlIGFncmVlbWVudCBhY2NvbXBhbnlpbmdcbiAqIGl0LlxuICovXG4vKipcbiAqIENyZWF0ZXMgYSBmYWNhZGUgb2JqZWN0IHdpdGggY29udmVuaWVuY2UgbWV0aG9kcyBvdmVyIGluZ3JlZGllbnQgZGF0YSByZXR1cm5lZCBmcm9tIHRoZSB0b29sa2l0LlxuICpcbiAqIEBwYXJhbSBpbmdyZWRpZW50RGF0YSBSYXcgaW5ncmVkaWVudCBkYXRhIHJldHVybmVkIGJ5IHRoZSB0b29sa2l0XG4gKiBAcGFyYW0gbWFuaWZlc3QgSWYgcHJvdmlkZWQsIHRoZSBjcmVhdGVkIGluZ3JlZGllbnQgd2lsbCBsaW5rIHRvIHRoaXMgbWFuaWZlc3QuIFRoaXMgc2hvdWxkIGJlIHRoZSBtYW5pZmVzdCB3aXRoIGEgbGFiZWwgbWF0Y2hpbmcgdGhpcyBpbmdyZWRpZW50J3MgbWFuaWZlc3RJZCBmaWVsZC5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5ncmVkaWVudChpbmdyZWRpZW50RGF0YSwgbWFuaWZlc3QpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0aXRsZTogaW5ncmVkaWVudERhdGEudGl0bGUsXG4gICAgICAgIGZvcm1hdDogaW5ncmVkaWVudERhdGEuZm9ybWF0LFxuICAgICAgICBkb2N1bWVudElkOiBpbmdyZWRpZW50RGF0YS5kb2N1bWVudF9pZCA/PyBudWxsLFxuICAgICAgICBpbnN0YW5jZUlkOiBpbmdyZWRpZW50RGF0YS5pbnN0YW5jZV9pZCxcbiAgICAgICAgcHJvdmVuYW5jZTogaW5ncmVkaWVudERhdGEucHJvdmVuYW5jZSA/PyBudWxsLFxuICAgICAgICBoYXNoOiBpbmdyZWRpZW50RGF0YS5oYXNoID8/IG51bGwsXG4gICAgICAgIHJlbGF0aW9uc2hpcDogaW5ncmVkaWVudERhdGEucmVsYXRpb25zaGlwID8/IG51bGwsXG4gICAgICAgIHZhbGlkYXRpb25TdGF0dXM6IGluZ3JlZGllbnREYXRhLnZhbGlkYXRpb25fc3RhdHVzID8/IFtdLFxuICAgICAgICBtZXRhZGF0YTogaW5ncmVkaWVudERhdGEubWV0YWRhdGEgPz8gbnVsbCxcbiAgICAgICAgbWFuaWZlc3Q6IG1hbmlmZXN0ID8/IG51bGwsXG4gICAgICAgIHRodW1ibmFpbDogY3JlYXRlVGh1bWJuYWlsJDEoaW5ncmVkaWVudERhdGEucmVzb3VyY2VzLCBpbmdyZWRpZW50RGF0YS50aHVtYm5haWwpLFxuICAgIH07XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMjIgQWRvYmVcbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTk9USUNFOiBBZG9iZSBwZXJtaXRzIHlvdSB0byB1c2UsIG1vZGlmeSwgYW5kIGRpc3RyaWJ1dGUgdGhpcyBmaWxlIGluXG4gKiBhY2NvcmRhbmNlIHdpdGggdGhlIHRlcm1zIG9mIHRoZSBBZG9iZSBsaWNlbnNlIGFncmVlbWVudCBhY2NvbXBhbnlpbmdcbiAqIGl0LlxuICovXG4vKipcbiAqIENyZWF0ZXMgYSBmYWNhZGUgb2JqZWN0IHdpdGggY29udmVuaWVuY2UgbWV0aG9kcyBvdmVyIG1hbmlmZXN0IGRhdGEgcmV0dXJuZWQgZnJvbSB0aGUgdG9vbGtpdC5cbiAqXG4gKiBAcGFyYW0gbWFuaWZlc3REYXRhIFJhdyBtYW5pZmVzdCBkYXRhIHJldHVybmVkIGJ5IHRoZSB0b29sa2l0XG4gKiBAcGFyYW0gbWFuaWZlc3RzIEEgbWFwIG9mIHByZXZpb3VzbHktY3JlYXRlZCBtYW5pZmVzdCBvYmplY3RzIHRvIGJlIHByb3ZpZGVkIHRvIGluZ3JlZGllbnRzLiBNdXN0IGNvbnRhaW4gYW55IG1hbmlmZXN0IHJlZmVyZW5jZWQgYnkgdGhpcyBtYW5pZmVzdCdzIGluZ3JlZGllbnRzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVNYW5pZmVzdChtYW5pZmVzdERhdGEsIG1hbmlmZXN0cykge1xuICAgIGNvbnN0IGluZ3JlZGllbnRzID0gbWFuaWZlc3REYXRhLmluZ3JlZGllbnRzLm1hcCgoaW5ncmVkaWVudERhdGEpID0+IGNyZWF0ZUluZ3JlZGllbnQoaW5ncmVkaWVudERhdGEsIGluZ3JlZGllbnREYXRhLmFjdGl2ZV9tYW5pZmVzdFxuICAgICAgICA/IG1hbmlmZXN0c1tpbmdyZWRpZW50RGF0YS5hY3RpdmVfbWFuaWZlc3RdXG4gICAgICAgIDogdW5kZWZpbmVkKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGl0bGU6IG1hbmlmZXN0RGF0YS50aXRsZSxcbiAgICAgICAgZm9ybWF0OiBtYW5pZmVzdERhdGEuZm9ybWF0LFxuICAgICAgICB2ZW5kb3I6IG1hbmlmZXN0RGF0YS52ZW5kb3IgPz8gbnVsbCxcbiAgICAgICAgY2xhaW1HZW5lcmF0b3I6IG1hbmlmZXN0RGF0YS5jbGFpbV9nZW5lcmF0b3IsXG4gICAgICAgIGNsYWltR2VuZXJhdG9ySGludHM6IG1hbmlmZXN0RGF0YS5jbGFpbV9nZW5lcmF0b3JfaGludHMgPz8gbnVsbCxcbiAgICAgICAgaW5zdGFuY2VJZDogbWFuaWZlc3REYXRhLmluc3RhbmNlX2lkLFxuICAgICAgICBzaWduYXR1cmVJbmZvOiBtYW5pZmVzdERhdGEuc2lnbmF0dXJlX2luZm8gPz8gbnVsbCxcbiAgICAgICAgY3JlZGVudGlhbHM6IG1hbmlmZXN0RGF0YS5jcmVkZW50aWFscyA/PyBbXSxcbiAgICAgICAgaW5ncmVkaWVudHMsXG4gICAgICAgIHJlZGFjdGlvbnM6IG1hbmlmZXN0RGF0YS5yZWRhY3Rpb25zID8/IFtdLFxuICAgICAgICBwYXJlbnQ6IG51bGwsXG4gICAgICAgIHRodW1ibmFpbDogY3JlYXRlVGh1bWJuYWlsJDEobWFuaWZlc3REYXRhLnJlc291cmNlcywgbWFuaWZlc3REYXRhLnRodW1ibmFpbCksXG4gICAgICAgIGFzc2VydGlvbnM6IGNyZWF0ZUFzc2VydGlvbkFjY2Vzc29yKG1hbmlmZXN0RGF0YS5hc3NlcnRpb25zKSxcbiAgICB9O1xufVxuXG4vKipcbiAqIENvcHlyaWdodCAyMDIyIEFkb2JlXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIE5PVElDRTogQWRvYmUgcGVybWl0cyB5b3UgdG8gdXNlLCBtb2RpZnksIGFuZCBkaXN0cmlidXRlIHRoaXMgZmlsZSBpblxuICogYWNjb3JkYW5jZSB3aXRoIHRoZSB0ZXJtcyBvZiB0aGUgQWRvYmUgbGljZW5zZSBhZ3JlZW1lbnQgYWNjb21wYW55aW5nXG4gKiBpdC5cbiAqL1xuY29uc3QgZGJnJDQgPSBkZWJ1ZygnYzJwYTptYW5pZmVzdFN0b3JlJyk7XG4vKipcbiAqIENyZWF0ZXMgYSBmYWNhZGUgb2JqZWN0IHdpdGggY29udmVuaWVuY2UgbWV0aG9kcyBvdmVyIG1hbmlmZXN0IHN0b3JlIGRhdGEgcmV0dXJuZWQgZnJvbSB0aGUgdG9vbGtpdC5cbiAqXG4gKiBAcGFyYW0gY29uZmlnIEMycGEgY29uZmlndXJhdGlvbiBvYmplY3RcbiAqIEBwYXJhbSBtYW5pZmVzdFN0b3JlRGF0YSBNYW5pZmVzdCBzdG9yZSBkYXRhIHJldHVybmVkIGJ5IHRoZSB0b29sa2l0XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU1hbmlmZXN0U3RvcmUobWFuaWZlc3RTdG9yZURhdGEpIHtcbiAgICBjb25zdCBtYW5pZmVzdHMgPSBjcmVhdGVNYW5pZmVzdHMobWFuaWZlc3RTdG9yZURhdGEpO1xuICAgIHJldHVybiB7XG4gICAgICAgIG1hbmlmZXN0cyxcbiAgICAgICAgYWN0aXZlTWFuaWZlc3Q6IG1hbmlmZXN0c1ttYW5pZmVzdFN0b3JlRGF0YS5hY3RpdmVfbWFuaWZlc3RdLFxuICAgICAgICB2YWxpZGF0aW9uU3RhdHVzOiBtYW5pZmVzdFN0b3JlRGF0YT8udmFsaWRhdGlvbl9zdGF0dXMgPz8gW10sXG4gICAgfTtcbn1cbi8qKlxuICogRW5zdXJlcyBtYW5pZmVzdHMgYXJlIHJlc29sdmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyIHRvIGJ1aWxkIHRoZSBcInRyZWVcIiBvZiBtYW5pZmVzdHMgYW5kIHRoZWlyIGluZ3JlZGllbnRzLlxuICpcbiAqIEBwYXJhbSBtYW5pZmVzdFN0b3JlRGF0YVxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gY3JlYXRlTWFuaWZlc3RzKG1hbmlmZXN0U3RvcmVEYXRhKSB7XG4gICAgY29uc3QgeyBtYW5pZmVzdHM6IHRvb2xraXRNYW5pZmVzdHMsIGFjdGl2ZV9tYW5pZmVzdDogdG9vbGtpdEFjdGl2ZU1hbmlmZXN0SWQsIH0gPSBtYW5pZmVzdFN0b3JlRGF0YTtcbiAgICBkYmckNCgnUmVjZWl2ZWQgbWFuaWZlc3Qgc3RvcmUgZnJvbSB0b29sa2l0JywgbWFuaWZlc3RTdG9yZURhdGEpO1xuICAgIC8vIFBlcmZvcm0gYSBwb3N0LW9yZGVyIHRyYXZlcnNhbCBvZiB0aGUgbWFuaWZlc3QgdHJlZSAobGVhdmVzLXRvLXJvb3QpIHRvIGd1YXJhbnRlZSB0aGF0IGEgbWFuaWZlc3QncyBpbmdyZWRpZW50XG4gICAgLy8gbWFuaWZlc3RzIGFyZSBhbHJlYWR5IGF2YWlsYWJsZSB3aGVuIGl0IGlzIGNyZWF0ZWQuXG4gICAgY29uc3Qgc3RhY2sgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRhdGE6IHRvb2xraXRNYW5pZmVzdHNbdG9vbGtpdEFjdGl2ZU1hbmlmZXN0SWRdLFxuICAgICAgICAgICAgbGFiZWw6IHRvb2xraXRBY3RpdmVNYW5pZmVzdElkLFxuICAgICAgICB9LFxuICAgIF07XG4gICAgY29uc3QgcG9zdG9yZGVyTWFuaWZlc3RzID0gW107XG4gICAgd2hpbGUgKHN0YWNrLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gc3RhY2sucG9wKCk7XG4gICAgICAgIHBvc3RvcmRlck1hbmlmZXN0cy51bnNoaWZ0KGN1cnJlbnQpO1xuICAgICAgICBjb25zdCB7IGRhdGE6IGN1cnJlbnRNYW5pZmVzdCB9ID0gY3VycmVudDtcbiAgICAgICAgY3VycmVudE1hbmlmZXN0Py5pbmdyZWRpZW50cz8uZm9yRWFjaCgoeyBhY3RpdmVfbWFuaWZlc3Q6IG1hbmlmZXN0SWQgfSkgPT4ge1xuICAgICAgICAgICAgaWYgKG1hbmlmZXN0SWQpIHtcbiAgICAgICAgICAgICAgICBpZiAobWFuaWZlc3RTdG9yZURhdGEubWFuaWZlc3RzW21hbmlmZXN0SWRdKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogbWFuaWZlc3RTdG9yZURhdGEubWFuaWZlc3RzW21hbmlmZXN0SWRdLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IG1hbmlmZXN0SWQsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGJnJDQoJ05vIG1hbmlmZXN0IGZvdW5kIGZvciBpZCcsIG1hbmlmZXN0SWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IG9yZGVyZWRNYW5pZmVzdHMgPSBwb3N0b3JkZXJNYW5pZmVzdHMucmVkdWNlKChtYW5pZmVzdHMsIHN0YWNrTWFuaWZlc3REYXRhKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgZGF0YTogbWFuaWZlc3REYXRhLCBsYWJlbCB9ID0gc3RhY2tNYW5pZmVzdERhdGE7XG4gICAgICAgIGRiZyQ0KCdDcmVhdGluZyBtYW5pZmVzdCB3aXRoIGRhdGEnLCBtYW5pZmVzdERhdGEpO1xuICAgICAgICBjb25zdCBtYW5pZmVzdCA9IGNyZWF0ZU1hbmlmZXN0KG1hbmlmZXN0RGF0YSwgbWFuaWZlc3RzKTtcbiAgICAgICAgbWFuaWZlc3RzW2xhYmVsXSA9IG1hbmlmZXN0O1xuICAgICAgICByZXR1cm4gbWFuaWZlc3RzO1xuICAgIH0sIHt9KTtcbiAgICBjb25zdCBtYW5pZmVzdFN0YWNrID0gW29yZGVyZWRNYW5pZmVzdHNbdG9vbGtpdEFjdGl2ZU1hbmlmZXN0SWRdXTtcbiAgICAvLyBQZXJmb3JtIGFuIGluLW9yZGVyIHRyYXZlcnNhbCBvZiB0aGUgbWFuaWZlc3QgdHJlZSB0byBzZXQgJ3BhcmVudCcgdmFsdWVzIG9mIGluZ3JlZGllbnQgbWFuaWZlc3RzXG4gICAgd2hpbGUgKG1hbmlmZXN0U3RhY2subGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRNYW5pZmVzdCA9IG1hbmlmZXN0U3RhY2sucG9wKCk7XG4gICAgICAgIGN1cnJlbnRNYW5pZmVzdC5pbmdyZWRpZW50cz8uZm9yRWFjaCgoeyBtYW5pZmVzdCB9KSA9PiB7XG4gICAgICAgICAgICBpZiAobWFuaWZlc3QpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZE1hbmlmZXN0ID0gbWFuaWZlc3Q7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRNYW5pZmVzdC5wYXJlbnQgPSBjdXJyZW50TWFuaWZlc3Q7XG4gICAgICAgICAgICAgICAgbWFuaWZlc3RTdGFjay5wdXNoKHNlbGVjdGVkTWFuaWZlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG9yZGVyZWRNYW5pZmVzdHM7XG59XG5cbnZhciBvdmVyQXJnID0gX292ZXJBcmc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVLZXlzJDEgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpO1xuXG52YXIgX25hdGl2ZUtleXMgPSBuYXRpdmVLZXlzJDE7XG5cbnZhciBpc1Byb3RvdHlwZSA9IF9pc1Byb3RvdHlwZSxcbiAgICBuYXRpdmVLZXlzID0gX25hdGl2ZUtleXM7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byQ0ID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkkMyA9IG9iamVjdFByb3RvJDQuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5cyQxKG9iamVjdCkge1xuICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5JDMuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbnZhciBfYmFzZUtleXMgPSBiYXNlS2V5cyQxO1xuXG52YXIgYXJyYXlMaWtlS2V5cyA9IF9hcnJheUxpa2VLZXlzLFxuICAgIGJhc2VLZXlzID0gX2Jhc2VLZXlzLFxuICAgIGlzQXJyYXlMaWtlJDEgPSBpc0FycmF5TGlrZV8xO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5cyhuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiBfLmtleXMoJ2hpJyk7XG4gKiAvLyA9PiBbJzAnLCAnMSddXG4gKi9cbmZ1bmN0aW9uIGtleXMkNShvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlJDEob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG59XG5cbnZhciBrZXlzXzEgPSBrZXlzJDU7XG5cbnZhciBiYXNlRm9yID0gX2Jhc2VGb3IsXG4gICAga2V5cyQ0ID0ga2V5c18xO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93bmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VGb3JPd24kMyhvYmplY3QsIGl0ZXJhdGVlKSB7XG4gIHJldHVybiBvYmplY3QgJiYgYmFzZUZvcihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzJDQpO1xufVxuXG52YXIgX2Jhc2VGb3JPd24gPSBiYXNlRm9yT3duJDM7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cblxudmFyIF9zZXRDYWNoZUFkZDtcbnZhciBoYXNSZXF1aXJlZF9zZXRDYWNoZUFkZDtcblxuZnVuY3Rpb24gcmVxdWlyZV9zZXRDYWNoZUFkZCAoKSB7XG5cdGlmIChoYXNSZXF1aXJlZF9zZXRDYWNoZUFkZCkgcmV0dXJuIF9zZXRDYWNoZUFkZDtcblx0aGFzUmVxdWlyZWRfc2V0Q2FjaGVBZGQgPSAxO1xuXHR2YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cblx0LyoqXG5cdCAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBuYW1lIGFkZFxuXHQgKiBAbWVtYmVyT2YgU2V0Q2FjaGVcblx0ICogQGFsaWFzIHB1c2hcblx0ICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG5cdCAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIGluc3RhbmNlLlxuXHQgKi9cblx0ZnVuY3Rpb24gc2V0Q2FjaGVBZGQodmFsdWUpIHtcblx0ICB0aGlzLl9fZGF0YV9fLnNldCh2YWx1ZSwgSEFTSF9VTkRFRklORUQpO1xuXHQgIHJldHVybiB0aGlzO1xuXHR9XG5cblx0X3NldENhY2hlQWRkID0gc2V0Q2FjaGVBZGQ7XG5cdHJldHVybiBfc2V0Q2FjaGVBZGQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuXG52YXIgX3NldENhY2hlSGFzO1xudmFyIGhhc1JlcXVpcmVkX3NldENhY2hlSGFzO1xuXG5mdW5jdGlvbiByZXF1aXJlX3NldENhY2hlSGFzICgpIHtcblx0aWYgKGhhc1JlcXVpcmVkX3NldENhY2hlSGFzKSByZXR1cm4gX3NldENhY2hlSGFzO1xuXHRoYXNSZXF1aXJlZF9zZXRDYWNoZUhhcyA9IDE7XG5cdGZ1bmN0aW9uIHNldENhY2hlSGFzKHZhbHVlKSB7XG5cdCAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcblx0fVxuXG5cdF9zZXRDYWNoZUhhcyA9IHNldENhY2hlSGFzO1xuXHRyZXR1cm4gX3NldENhY2hlSGFzO1xufVxuXG52YXIgX1NldENhY2hlO1xudmFyIGhhc1JlcXVpcmVkX1NldENhY2hlO1xuXG5mdW5jdGlvbiByZXF1aXJlX1NldENhY2hlICgpIHtcblx0aWYgKGhhc1JlcXVpcmVkX1NldENhY2hlKSByZXR1cm4gX1NldENhY2hlO1xuXHRoYXNSZXF1aXJlZF9TZXRDYWNoZSA9IDE7XG5cdHZhciBNYXBDYWNoZSA9IF9NYXBDYWNoZSxcblx0ICAgIHNldENhY2hlQWRkID0gcmVxdWlyZV9zZXRDYWNoZUFkZCgpLFxuXHQgICAgc2V0Q2FjaGVIYXMgPSByZXF1aXJlX3NldENhY2hlSGFzKCk7XG5cblx0LyoqXG5cdCAqXG5cdCAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuXHQgKi9cblx0ZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG5cdCAgdmFyIGluZGV4ID0gLTEsXG5cdCAgICAgIGxlbmd0aCA9IHZhbHVlcyA9PSBudWxsID8gMCA6IHZhbHVlcy5sZW5ndGg7XG5cblx0ICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuXHQgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG5cdCAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcblx0ICB9XG5cdH1cblxuXHQvLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuXHRTZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDtcblx0U2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IHNldENhY2hlSGFzO1xuXG5cdF9TZXRDYWNoZSA9IFNldENhY2hlO1xuXHRyZXR1cm4gX1NldENhY2hlO1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zb21lYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuXG5mdW5jdGlvbiBhcnJheVNvbWUkMShhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxudmFyIF9hcnJheVNvbWUgPSBhcnJheVNvbWUkMTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBgY2FjaGVgIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBjYWNoZSBUaGUgY2FjaGUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuXG52YXIgX2NhY2hlSGFzO1xudmFyIGhhc1JlcXVpcmVkX2NhY2hlSGFzO1xuXG5mdW5jdGlvbiByZXF1aXJlX2NhY2hlSGFzICgpIHtcblx0aWYgKGhhc1JlcXVpcmVkX2NhY2hlSGFzKSByZXR1cm4gX2NhY2hlSGFzO1xuXHRoYXNSZXF1aXJlZF9jYWNoZUhhcyA9IDE7XG5cdGZ1bmN0aW9uIGNhY2hlSGFzKGNhY2hlLCBrZXkpIHtcblx0ICByZXR1cm4gY2FjaGUuaGFzKGtleSk7XG5cdH1cblxuXHRfY2FjaGVIYXMgPSBjYWNoZUhhcztcblx0cmV0dXJuIF9jYWNoZUhhcztcbn1cblxudmFyIFNldENhY2hlID0gcmVxdWlyZV9TZXRDYWNoZSgpLFxuICAgIGFycmF5U29tZSA9IF9hcnJheVNvbWUsXG4gICAgY2FjaGVIYXMgPSByZXF1aXJlX2NhY2hlSGFzKCk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHJDUgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUckMyA9IDI7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBhcnJheXMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgYXJyYXlgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEFycmF5cyQyKGFycmF5LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHJDUsXG4gICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgaWYgKGFyckxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIShpc1BhcnRpYWwgJiYgb3RoTGVuZ3RoID4gYXJyTGVuZ3RoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBDaGVjayB0aGF0IGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICB2YXIgYXJyU3RhY2tlZCA9IHN0YWNrLmdldChhcnJheSk7XG4gIHZhciBvdGhTdGFja2VkID0gc3RhY2suZ2V0KG90aGVyKTtcbiAgaWYgKGFyclN0YWNrZWQgJiYgb3RoU3RhY2tlZCkge1xuICAgIHJldHVybiBhcnJTdGFja2VkID09IG90aGVyICYmIG90aFN0YWNrZWQgPT0gYXJyYXk7XG4gIH1cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSB0cnVlLFxuICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRyQzKSA/IG5ldyBTZXRDYWNoZSA6IHVuZGVmaW5lZDtcblxuICBzdGFjay5zZXQoYXJyYXksIG90aGVyKTtcbiAgc3RhY2suc2V0KG90aGVyLCBhcnJheSk7XG5cbiAgLy8gSWdub3JlIG5vbi1pbmRleCBwcm9wZXJ0aWVzLlxuICB3aGlsZSAoKytpbmRleCA8IGFyckxlbmd0aCkge1xuICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltpbmRleF07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgYXJyVmFsdWUsIGluZGV4LCBvdGhlciwgYXJyYXksIHN0YWNrKVxuICAgICAgICA6IGN1c3RvbWl6ZXIoYXJyVmFsdWUsIG90aFZhbHVlLCBpbmRleCwgYXJyYXksIG90aGVyLCBzdGFjayk7XG4gICAgfVxuICAgIGlmIChjb21wYXJlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoY29tcGFyZWQpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGlmIChzZWVuKSB7XG4gICAgICBpZiAoIWFycmF5U29tZShvdGhlciwgZnVuY3Rpb24ob3RoVmFsdWUsIG90aEluZGV4KSB7XG4gICAgICAgICAgICBpZiAoIWNhY2hlSGFzKHNlZW4sIG90aEluZGV4KSAmJlxuICAgICAgICAgICAgICAgIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKSkge1xuICAgICAgICAgICAgICByZXR1cm4gc2Vlbi5wdXNoKG90aEluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSkge1xuICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghKFxuICAgICAgICAgIGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fFxuICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShhcnJheSk7XG4gIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbnZhciBfZXF1YWxBcnJheXMgPSBlcXVhbEFycmF5cyQyO1xuXG4vKipcbiAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gKi9cblxuZnVuY3Rpb24gbWFwVG9BcnJheSQxKG1hcCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICBtYXAuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIF9tYXBUb0FycmF5ID0gbWFwVG9BcnJheSQxO1xuXG4vKipcbiAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gKi9cblxudmFyIF9zZXRUb0FycmF5O1xudmFyIGhhc1JlcXVpcmVkX3NldFRvQXJyYXk7XG5cbmZ1bmN0aW9uIHJlcXVpcmVfc2V0VG9BcnJheSAoKSB7XG5cdGlmIChoYXNSZXF1aXJlZF9zZXRUb0FycmF5KSByZXR1cm4gX3NldFRvQXJyYXk7XG5cdGhhc1JlcXVpcmVkX3NldFRvQXJyYXkgPSAxO1xuXHRmdW5jdGlvbiBzZXRUb0FycmF5KHNldCkge1xuXHQgIHZhciBpbmRleCA9IC0xLFxuXHQgICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cblx0ICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuXHQgICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG5cdCAgfSk7XG5cdCAgcmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdF9zZXRUb0FycmF5ID0gc2V0VG9BcnJheTtcblx0cmV0dXJuIF9zZXRUb0FycmF5O1xufVxuXG52YXIgU3ltYm9sJDMgPSByZXF1aXJlX1N5bWJvbCgpLFxuICAgIFVpbnQ4QXJyYXkkMSA9IF9VaW50OEFycmF5LFxuICAgIGVxID0gZXFfMSxcbiAgICBlcXVhbEFycmF5cyQxID0gX2VxdWFsQXJyYXlzLFxuICAgIG1hcFRvQXJyYXkgPSBfbWFwVG9BcnJheSxcbiAgICBzZXRUb0FycmF5ID0gcmVxdWlyZV9zZXRUb0FycmF5KCk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHJDQgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUckMiA9IDI7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBib29sVGFnJDIgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyQyID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnJDIgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIG1hcFRhZyQ0ID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnJDIgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICByZWdleHBUYWckMiA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyQ0ID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnJDIgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWckMyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWckMiA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWckMyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvJDIgPSBTeW1ib2wkMyA/IFN5bWJvbCQzLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xWYWx1ZU9mJDEgPSBzeW1ib2xQcm90byQyID8gc3ltYm9sUHJvdG8kMi52YWx1ZU9mIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgY29tcGFyaW5nIG9iamVjdHMgb2ZcbiAqIHRoZSBzYW1lIGB0b1N0cmluZ1RhZ2AuXG4gKlxuICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjb21wYXJpbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdHMgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEJ5VGFnJDEob2JqZWN0LCBvdGhlciwgdGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBkYXRhVmlld1RhZyQzOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgIChvYmplY3QuYnl0ZU9mZnNldCAhPSBvdGhlci5ieXRlT2Zmc2V0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBvYmplY3QuYnVmZmVyO1xuICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICBjYXNlIGFycmF5QnVmZmVyVGFnJDI6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgIWVxdWFsRnVuYyhuZXcgVWludDhBcnJheSQxKG9iamVjdCksIG5ldyBVaW50OEFycmF5JDEob3RoZXIpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGNhc2UgYm9vbFRhZyQyOlxuICAgIGNhc2UgZGF0ZVRhZyQyOlxuICAgIGNhc2UgbnVtYmVyVGFnJDI6XG4gICAgICAvLyBDb2VyY2UgYm9vbGVhbnMgdG8gYDFgIG9yIGAwYCBhbmQgZGF0ZXMgdG8gbWlsbGlzZWNvbmRzLlxuICAgICAgLy8gSW52YWxpZCBkYXRlcyBhcmUgY29lcmNlZCB0byBgTmFOYC5cbiAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgY2FzZSBlcnJvclRhZyQyOlxuICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgIGNhc2UgcmVnZXhwVGFnJDI6XG4gICAgY2FzZSBzdHJpbmdUYWckMjpcbiAgICAgIC8vIENvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgYW5kIHRyZWF0IHN0cmluZ3MsIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMsXG4gICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG5cbiAgICBjYXNlIG1hcFRhZyQ0OlxuICAgICAgdmFyIGNvbnZlcnQgPSBtYXBUb0FycmF5O1xuXG4gICAgY2FzZSBzZXRUYWckNDpcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUckNDtcbiAgICAgIGNvbnZlcnQgfHwgKGNvbnZlcnQgPSBzZXRUb0FycmF5KTtcblxuICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICBiaXRtYXNrIHw9IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUckMjtcblxuICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICB2YXIgcmVzdWx0ID0gZXF1YWxBcnJheXMkMShjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIGNhc2Ugc3ltYm9sVGFnJDM6XG4gICAgICBpZiAoc3ltYm9sVmFsdWVPZiQxKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mJDEuY2FsbChvYmplY3QpID09IHN5bWJvbFZhbHVlT2YkMS5jYWxsKG90aGVyKTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbnZhciBfZXF1YWxCeVRhZyA9IGVxdWFsQnlUYWckMTtcblxuLyoqXG4gKiBBcHBlbmRzIHRoZSBlbGVtZW50cyBvZiBgdmFsdWVzYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cblxudmFyIF9hcnJheVB1c2g7XG52YXIgaGFzUmVxdWlyZWRfYXJyYXlQdXNoO1xuXG5mdW5jdGlvbiByZXF1aXJlX2FycmF5UHVzaCAoKSB7XG5cdGlmIChoYXNSZXF1aXJlZF9hcnJheVB1c2gpIHJldHVybiBfYXJyYXlQdXNoO1xuXHRoYXNSZXF1aXJlZF9hcnJheVB1c2ggPSAxO1xuXHRmdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuXHQgIHZhciBpbmRleCA9IC0xLFxuXHQgICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuXHQgICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cblx0ICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuXHQgICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcblx0ICB9XG5cdCAgcmV0dXJuIGFycmF5O1xuXHR9XG5cblx0X2FycmF5UHVzaCA9IGFycmF5UHVzaDtcblx0cmV0dXJuIF9hcnJheVB1c2g7XG59XG5cbnZhciBhcnJheVB1c2gkMSA9IHJlcXVpcmVfYXJyYXlQdXNoKCksXG4gICAgaXNBcnJheSQ5ID0gaXNBcnJheV8xO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzJDIob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IGtleXNGdW5jKG9iamVjdCk7XG4gIHJldHVybiBpc0FycmF5JDkob2JqZWN0KSA/IHJlc3VsdCA6IGFycmF5UHVzaCQxKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7XG59XG5cbnZhciBfYmFzZUdldEFsbEtleXMgPSBiYXNlR2V0QWxsS2V5cyQyO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAqL1xuXG5mdW5jdGlvbiBhcnJheUZpbHRlciQxKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG52YXIgX2FycmF5RmlsdGVyID0gYXJyYXlGaWx0ZXIkMTtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhcnJheXMgPSBfLnRpbWVzKDIsIF8uc3R1YkFycmF5KTtcbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICogLy8gPT4gW1tdLCBbXV1cbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5cbmZ1bmN0aW9uIHN0dWJBcnJheSQyKCkge1xuICByZXR1cm4gW107XG59XG5cbnZhciBzdHViQXJyYXlfMSA9IHN0dWJBcnJheSQyO1xuXG52YXIgYXJyYXlGaWx0ZXIgPSBfYXJyYXlGaWx0ZXIsXG4gICAgc3R1YkFycmF5JDEgPSBzdHViQXJyYXlfMTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvJDMgPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvJDMucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVHZXRTeW1ib2xzJDEgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHMkMyA9ICFuYXRpdmVHZXRTeW1ib2xzJDEgPyBzdHViQXJyYXkkMSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzJDEob2JqZWN0KSwgZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpO1xuICB9KTtcbn07XG5cbnZhciBfZ2V0U3ltYm9scyA9IGdldFN5bWJvbHMkMztcblxudmFyIGJhc2VHZXRBbGxLZXlzJDEgPSBfYmFzZUdldEFsbEtleXMsXG4gICAgZ2V0U3ltYm9scyQyID0gX2dldFN5bWJvbHMsXG4gICAga2V5cyQzID0ga2V5c18xO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGdldEFsbEtleXMkMihvYmplY3QpIHtcbiAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzJDEob2JqZWN0LCBrZXlzJDMsIGdldFN5bWJvbHMkMik7XG59XG5cbnZhciBfZ2V0QWxsS2V5cyA9IGdldEFsbEtleXMkMjtcblxudmFyIGdldEFsbEtleXMkMSA9IF9nZXRBbGxLZXlzO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyQzID0gMTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvJDIgPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSQyID0gb2JqZWN0UHJvdG8kMi5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIG9iamVjdHMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxPYmplY3RzJDEob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHJDMsXG4gICAgICBvYmpQcm9wcyA9IGdldEFsbEtleXMkMShvYmplY3QpLFxuICAgICAgb2JqTGVuZ3RoID0gb2JqUHJvcHMubGVuZ3RoLFxuICAgICAgb3RoUHJvcHMgPSBnZXRBbGxLZXlzJDEob3RoZXIpLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoUHJvcHMubGVuZ3RoO1xuXG4gIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogaGFzT3duUHJvcGVydHkkMi5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICAvLyBDaGVjayB0aGF0IGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICB2YXIgb2JqU3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICB2YXIgb3RoU3RhY2tlZCA9IHN0YWNrLmdldChvdGhlcik7XG4gIGlmIChvYmpTdGFja2VkICYmIG90aFN0YWNrZWQpIHtcbiAgICByZXR1cm4gb2JqU3RhY2tlZCA9PSBvdGhlciAmJiBvdGhTdGFja2VkID09IG9iamVjdDtcbiAgfVxuICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIG9iamVjdCk7XG5cbiAgdmFyIHNraXBDdG9yID0gaXNQYXJ0aWFsO1xuICB3aGlsZSAoKytpbmRleCA8IG9iakxlbmd0aCkge1xuICAgIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltrZXldO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIG9ialZhbHVlLCBrZXksIG90aGVyLCBvYmplY3QsIHN0YWNrKVxuICAgICAgICA6IGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlLCBrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKCEoY29tcGFyZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgID8gKG9ialZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpXG4gICAgICAgICAgOiBjb21wYXJlZFxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBza2lwQ3RvciB8fCAoc2tpcEN0b3IgPSBrZXkgPT0gJ2NvbnN0cnVjdG9yJyk7XG4gIH1cbiAgaWYgKHJlc3VsdCAmJiAhc2tpcEN0b3IpIHtcbiAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgb3RoQ3RvciA9IG90aGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgLy8gTm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwuXG4gICAgaWYgKG9iakN0b3IgIT0gb3RoQ3RvciAmJlxuICAgICAgICAoJ2NvbnN0cnVjdG9yJyBpbiBvYmplY3QgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvdGhlcikgJiZcbiAgICAgICAgISh0eXBlb2Ygb2JqQ3RvciA9PSAnZnVuY3Rpb24nICYmIG9iakN0b3IgaW5zdGFuY2VvZiBvYmpDdG9yICYmXG4gICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIF9lcXVhbE9iamVjdHMgPSBlcXVhbE9iamVjdHMkMTtcblxudmFyIGdldE5hdGl2ZSQyID0gX2dldE5hdGl2ZSxcbiAgICByb290JDYgPSBfcm9vdDtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIERhdGFWaWV3JDEgPSBnZXROYXRpdmUkMihyb290JDYsICdEYXRhVmlldycpO1xuXG52YXIgX0RhdGFWaWV3ID0gRGF0YVZpZXckMTtcblxudmFyIGdldE5hdGl2ZSQxID0gX2dldE5hdGl2ZSxcbiAgICByb290JDUgPSBfcm9vdDtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFByb21pc2UkMiA9IGdldE5hdGl2ZSQxKHJvb3QkNSwgJ1Byb21pc2UnKTtcblxudmFyIF9Qcm9taXNlID0gUHJvbWlzZSQyO1xuXG52YXIgX1NldDtcbnZhciBoYXNSZXF1aXJlZF9TZXQ7XG5cbmZ1bmN0aW9uIHJlcXVpcmVfU2V0ICgpIHtcblx0aWYgKGhhc1JlcXVpcmVkX1NldCkgcmV0dXJuIF9TZXQ7XG5cdGhhc1JlcXVpcmVkX1NldCA9IDE7XG5cdHZhciBnZXROYXRpdmUgPSBfZ2V0TmF0aXZlLFxuXHQgICAgcm9vdCA9IF9yb290O1xuXG5cdC8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cblx0dmFyIFNldCA9IGdldE5hdGl2ZShyb290LCAnU2V0Jyk7XG5cblx0X1NldCA9IFNldDtcblx0cmV0dXJuIF9TZXQ7XG59XG5cbnZhciBnZXROYXRpdmUgPSBfZ2V0TmF0aXZlLFxuICAgIHJvb3QkNCA9IF9yb290O1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgV2Vha01hcCQyID0gZ2V0TmF0aXZlKHJvb3QkNCwgJ1dlYWtNYXAnKTtcblxudmFyIF9XZWFrTWFwID0gV2Vha01hcCQyO1xuXG52YXIgRGF0YVZpZXcgPSBfRGF0YVZpZXcsXG4gICAgTWFwJDEgPSBfTWFwLFxuICAgIFByb21pc2UkMSA9IF9Qcm9taXNlLFxuICAgIFNldCA9IHJlcXVpcmVfU2V0KCksXG4gICAgV2Vha01hcCQxID0gX1dlYWtNYXAsXG4gICAgYmFzZUdldFRhZyQyID0gX2Jhc2VHZXRUYWcsXG4gICAgdG9Tb3VyY2UgPSBfdG9Tb3VyY2U7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBtYXBUYWckMyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG9iamVjdFRhZyQyID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICBzZXRUYWckMyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHdlYWtNYXBUYWckMiA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGRhdGFWaWV3VGFnJDIgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xudmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwJDEpLFxuICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSQxKSxcbiAgICBzZXRDdG9yU3RyaW5nID0gdG9Tb3VyY2UoU2V0KSxcbiAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXAkMSk7XG5cbi8qKlxuICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbnZhciBnZXRUYWckNSA9IGJhc2VHZXRUYWckMjtcblxuLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEgYW5kIHByb21pc2VzIGluIE5vZGUuanMgPCA2LlxuaWYgKChEYXRhVmlldyAmJiBnZXRUYWckNShuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWckMikgfHxcbiAgICAoTWFwJDEgJiYgZ2V0VGFnJDUobmV3IE1hcCQxKSAhPSBtYXBUYWckMykgfHxcbiAgICAoUHJvbWlzZSQxICYmIGdldFRhZyQ1KFByb21pc2UkMS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgKFNldCAmJiBnZXRUYWckNShuZXcgU2V0KSAhPSBzZXRUYWckMykgfHxcbiAgICAoV2Vha01hcCQxICYmIGdldFRhZyQ1KG5ldyBXZWFrTWFwJDEpICE9IHdlYWtNYXBUYWckMikpIHtcbiAgZ2V0VGFnJDUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnJDIodmFsdWUpLFxuICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyQyID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiAnJztcblxuICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZyQyO1xuICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWckMztcbiAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZyQzO1xuICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZyQyO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuXG52YXIgX2dldFRhZyA9IGdldFRhZyQ1O1xuXG52YXIgU3RhY2skMiA9IF9TdGFjayxcbiAgICBlcXVhbEFycmF5cyA9IF9lcXVhbEFycmF5cyxcbiAgICBlcXVhbEJ5VGFnID0gX2VxdWFsQnlUYWcsXG4gICAgZXF1YWxPYmplY3RzID0gX2VxdWFsT2JqZWN0cyxcbiAgICBnZXRUYWckNCA9IF9nZXRUYWcsXG4gICAgaXNBcnJheSQ4ID0gaXNBcnJheV8xLFxuICAgIGlzQnVmZmVyJDEgPSBpc0J1ZmZlciQ0LmV4cG9ydHMsXG4gICAgaXNUeXBlZEFycmF5ID0gaXNUeXBlZEFycmF5XzE7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHJDIgPSAxO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyQxID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWckMSA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgb2JqZWN0VGFnJDEgPSAnW29iamVjdCBPYmplY3RdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvJDEgPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSQxID0gb2JqZWN0UHJvdG8kMS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gKiBkZWVwIGNvbXBhcmlzb25zIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gKiByZWZlcmVuY2VzIHRvIGJlIGNvbXBhcmVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAkMShvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBvYmpJc0FyciA9IGlzQXJyYXkkOChvYmplY3QpLFxuICAgICAgb3RoSXNBcnIgPSBpc0FycmF5JDgob3RoZXIpLFxuICAgICAgb2JqVGFnID0gb2JqSXNBcnIgPyBhcnJheVRhZyQxIDogZ2V0VGFnJDQob2JqZWN0KSxcbiAgICAgIG90aFRhZyA9IG90aElzQXJyID8gYXJyYXlUYWckMSA6IGdldFRhZyQ0KG90aGVyKTtcblxuICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyQxID8gb2JqZWN0VGFnJDEgOiBvYmpUYWc7XG4gIG90aFRhZyA9IG90aFRhZyA9PSBhcmdzVGFnJDEgPyBvYmplY3RUYWckMSA6IG90aFRhZztcblxuICB2YXIgb2JqSXNPYmogPSBvYmpUYWcgPT0gb2JqZWN0VGFnJDEsXG4gICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWckMSxcbiAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlciQxKG9iamVjdCkpIHtcbiAgICBpZiAoIWlzQnVmZmVyJDEob3RoZXIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICBvYmpJc09iaiA9IGZhbHNlO1xuICB9XG4gIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrJDIpO1xuICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgfVxuICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUckMikpIHtcbiAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkkMS5jYWxsKG9iamVjdCwgJ19fd3JhcHBlZF9fJyksXG4gICAgICAgIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5JDEuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrJDIpO1xuICAgICAgcmV0dXJuIGVxdWFsRnVuYyhvYmpVbndyYXBwZWQsIG90aFVud3JhcHBlZCwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spO1xuICAgIH1cbiAgfVxuICBpZiAoIWlzU2FtZVRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2skMik7XG4gIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG59XG5cbnZhciBfYmFzZUlzRXF1YWxEZWVwID0gYmFzZUlzRXF1YWxEZWVwJDE7XG5cbnZhciBiYXNlSXNFcXVhbERlZXAgPSBfYmFzZUlzRXF1YWxEZWVwLFxuICAgIGlzT2JqZWN0TGlrZSQ1ID0gaXNPYmplY3RMaWtlXzE7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2hpY2ggc3VwcG9ydHMgcGFydGlhbCBjb21wYXJpc29uc1xuICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsJDIodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykge1xuICBpZiAodmFsdWUgPT09IG90aGVyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAoIWlzT2JqZWN0TGlrZSQ1KHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlJDUob3RoZXIpKSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICB9XG4gIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCQyLCBzdGFjayk7XG59XG5cbnZhciBfYmFzZUlzRXF1YWwgPSBiYXNlSXNFcXVhbCQyO1xuXG52YXIgU3RhY2skMSA9IF9TdGFjayxcbiAgICBiYXNlSXNFcXVhbCQxID0gX2Jhc2VJc0VxdWFsO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyQxID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHJDEgPSAyO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWF0Y2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICogQHBhcmFtIHtBcnJheX0gbWF0Y2hEYXRhIFRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyB0byBtYXRjaC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTWF0Y2gkMShvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhLCBjdXN0b21pemVyKSB7XG4gIHZhciBpbmRleCA9IG1hdGNoRGF0YS5sZW5ndGgsXG4gICAgICBsZW5ndGggPSBpbmRleCxcbiAgICAgIG5vQ3VzdG9taXplciA9ICFjdXN0b21pemVyO1xuXG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVybiAhbGVuZ3RoO1xuICB9XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICBpZiAoKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKVxuICAgICAgICAgID8gZGF0YVsxXSAhPT0gb2JqZWN0W2RhdGFbMF1dXG4gICAgICAgICAgOiAhKGRhdGFbMF0gaW4gb2JqZWN0KVxuICAgICAgICApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICB2YXIga2V5ID0gZGF0YVswXSxcbiAgICAgICAgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgc3JjVmFsdWUgPSBkYXRhWzFdO1xuXG4gICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7XG4gICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHN0YWNrID0gbmV3IFN0YWNrJDE7XG4gICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghKHJlc3VsdCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGJhc2VJc0VxdWFsJDEoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyQxIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRyQxLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgICAgIDogcmVzdWx0XG4gICAgICAgICAgKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG52YXIgX2Jhc2VJc01hdGNoID0gYmFzZUlzTWF0Y2gkMTtcblxudmFyIGlzT2JqZWN0JDQgPSBpc09iamVjdF8xO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaWYgc3VpdGFibGUgZm9yIHN0cmljdFxuICogIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaWN0Q29tcGFyYWJsZSQyKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgJiYgIWlzT2JqZWN0JDQodmFsdWUpO1xufVxuXG52YXIgX2lzU3RyaWN0Q29tcGFyYWJsZSA9IGlzU3RyaWN0Q29tcGFyYWJsZSQyO1xuXG52YXIgaXNTdHJpY3RDb21wYXJhYmxlJDEgPSBfaXNTdHJpY3RDb21wYXJhYmxlLFxuICAgIGtleXMkMiA9IGtleXNfMTtcblxuLyoqXG4gKiBHZXRzIHRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBtYXRjaCBkYXRhIG9mIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBnZXRNYXRjaERhdGEkMShvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IGtleXMkMihvYmplY3QpLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICB2YXIga2V5ID0gcmVzdWx0W2xlbmd0aF0sXG4gICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICByZXN1bHRbbGVuZ3RoXSA9IFtrZXksIHZhbHVlLCBpc1N0cmljdENvbXBhcmFibGUkMSh2YWx1ZSldO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbnZhciBfZ2V0TWF0Y2hEYXRhID0gZ2V0TWF0Y2hEYXRhJDE7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBtYXRjaGVzUHJvcGVydHlgIGZvciBzb3VyY2UgdmFsdWVzIHN1aXRhYmxlXG4gKiBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuXG5mdW5jdGlvbiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSQyKGtleSwgc3JjVmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0W2tleV0gPT09IHNyY1ZhbHVlICYmXG4gICAgICAoc3JjVmFsdWUgIT09IHVuZGVmaW5lZCB8fCAoa2V5IGluIE9iamVjdChvYmplY3QpKSk7XG4gIH07XG59XG5cbnZhciBfbWF0Y2hlc1N0cmljdENvbXBhcmFibGUgPSBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSQyO1xuXG52YXIgYmFzZUlzTWF0Y2ggPSBfYmFzZUlzTWF0Y2gsXG4gICAgZ2V0TWF0Y2hEYXRhID0gX2dldE1hdGNoRGF0YSxcbiAgICBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSQxID0gX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlTWF0Y2hlcyQxKHNvdXJjZSkge1xuICB2YXIgbWF0Y2hEYXRhID0gZ2V0TWF0Y2hEYXRhKHNvdXJjZSk7XG4gIGlmIChtYXRjaERhdGEubGVuZ3RoID09IDEgJiYgbWF0Y2hEYXRhWzBdWzJdKSB7XG4gICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlJDEobWF0Y2hEYXRhWzBdWzBdLCBtYXRjaERhdGFbMF1bMV0pO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSk7XG4gIH07XG59XG5cbnZhciBfYmFzZU1hdGNoZXMgPSBiYXNlTWF0Y2hlcyQxO1xuXG52YXIgYmFzZUdldFRhZyQxID0gX2Jhc2VHZXRUYWcsXG4gICAgaXNPYmplY3RMaWtlJDQgPSBpc09iamVjdExpa2VfMTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyQyID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wkNSh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSQ0KHZhbHVlKSAmJiBiYXNlR2V0VGFnJDEodmFsdWUpID09IHN5bWJvbFRhZyQyKTtcbn1cblxudmFyIGlzU3ltYm9sXzEgPSBpc1N5bWJvbCQ1O1xuXG52YXIgaXNBcnJheSQ3ID0gaXNBcnJheV8xLFxuICAgIGlzU3ltYm9sJDQgPSBpc1N5bWJvbF8xO1xuXG4vKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVJc0RlZXBQcm9wID0gL1xcLnxcXFsoPzpbXltcXF1dKnwoW1wiJ10pKD86KD8hXFwxKVteXFxcXF18XFxcXC4pKj9cXDEpXFxdLyxcbiAgICByZUlzUGxhaW5Qcm9wID0gL15cXHcqJC87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lIGFuZCBub3QgYSBwcm9wZXJ0eSBwYXRoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXkkMyh2YWx1ZSwgb2JqZWN0KSB7XG4gIGlmIChpc0FycmF5JDcodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBpZiAodHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nIHx8XG4gICAgICB2YWx1ZSA9PSBudWxsIHx8IGlzU3ltYm9sJDQodmFsdWUpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIHJlSXNQbGFpblByb3AudGVzdCh2YWx1ZSkgfHwgIXJlSXNEZWVwUHJvcC50ZXN0KHZhbHVlKSB8fFxuICAgIChvYmplY3QgIT0gbnVsbCAmJiB2YWx1ZSBpbiBPYmplY3Qob2JqZWN0KSk7XG59XG5cbnZhciBfaXNLZXkgPSBpc0tleSQzO1xuXG52YXIgTWFwQ2FjaGUgPSBfTWFwQ2FjaGU7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQkMSA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBtZW1vaXplcyB0aGUgcmVzdWx0IG9mIGBmdW5jYC4gSWYgYHJlc29sdmVyYCBpc1xuICogcHJvdmlkZWQsIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxuICogYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbi4gQnkgZGVmYXVsdCwgdGhlIGZpcnN0IGFyZ3VtZW50XG4gKiBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgbWFwIGNhY2hlIGtleS4gVGhlIGBmdW5jYFxuICogaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKlxuICogKipOb3RlOioqIFRoZSBjYWNoZSBpcyBleHBvc2VkIGFzIHRoZSBgY2FjaGVgIHByb3BlcnR5IG9uIHRoZSBtZW1vaXplZFxuICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gKiBjb25zdHJ1Y3RvciB3aXRoIG9uZSB3aG9zZSBpbnN0YW5jZXMgaW1wbGVtZW50IHRoZVxuICogW2BNYXBgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdClcbiAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGNsZWFyYCwgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jlc29sdmVyXSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSB0aGUgY2FjaGUga2V5LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdjJzogMywgJ2QnOiA0IH07XG4gKlxuICogdmFyIHZhbHVlcyA9IF8ubWVtb2l6ZShfLnZhbHVlcyk7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIHZhbHVlcyhvdGhlcik7XG4gKiAvLyA9PiBbMywgNF1cbiAqXG4gKiBvYmplY3QuYSA9IDI7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIC8vIE1vZGlmeSB0aGUgcmVzdWx0IGNhY2hlLlxuICogdmFsdWVzLmNhY2hlLnNldChvYmplY3QsIFsnYScsICdiJ10pO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddXG4gKlxuICogLy8gUmVwbGFjZSBgXy5tZW1vaXplLkNhY2hlYC5cbiAqIF8ubWVtb2l6ZS5DYWNoZSA9IFdlYWtNYXA7XG4gKi9cbmZ1bmN0aW9uIG1lbW9pemUkMShmdW5jLCByZXNvbHZlcikge1xuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJyB8fCAocmVzb2x2ZXIgIT0gbnVsbCAmJiB0eXBlb2YgcmVzb2x2ZXIgIT0gJ2Z1bmN0aW9uJykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCQxKTtcbiAgfVxuICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplJDEuQ2FjaGUgfHwgTWFwQ2FjaGUpO1xuICByZXR1cm4gbWVtb2l6ZWQ7XG59XG5cbi8vIEV4cG9zZSBgTWFwQ2FjaGVgLlxubWVtb2l6ZSQxLkNhY2hlID0gTWFwQ2FjaGU7XG5cbnZhciBtZW1vaXplXzEgPSBtZW1vaXplJDE7XG5cbnZhciBtZW1vaXplID0gbWVtb2l6ZV8xO1xuXG4vKiogVXNlZCBhcyB0aGUgbWF4aW11bSBtZW1vaXplIGNhY2hlIHNpemUuICovXG52YXIgTUFYX01FTU9JWkVfU0laRSA9IDUwMDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWVtb2l6ZWAgd2hpY2ggY2xlYXJzIHRoZSBtZW1vaXplZCBmdW5jdGlvbidzXG4gKiBjYWNoZSB3aGVuIGl0IGV4Y2VlZHMgYE1BWF9NRU1PSVpFX1NJWkVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZUNhcHBlZCQxKGZ1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IG1lbW9pemUoZnVuYywgZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKGNhY2hlLnNpemUgPT09IE1BWF9NRU1PSVpFX1NJWkUpIHtcbiAgICAgIGNhY2hlLmNsZWFyKCk7XG4gICAgfVxuICAgIHJldHVybiBrZXk7XG4gIH0pO1xuXG4gIHZhciBjYWNoZSA9IHJlc3VsdC5jYWNoZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIF9tZW1vaXplQ2FwcGVkID0gbWVtb2l6ZUNhcHBlZCQxO1xuXG52YXIgbWVtb2l6ZUNhcHBlZCA9IF9tZW1vaXplQ2FwcGVkO1xuXG4vKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVQcm9wTmFtZSA9IC9bXi5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwkKSkvZztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7XG5cbi8qKlxuICogQ29udmVydHMgYHN0cmluZ2AgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xudmFyIHN0cmluZ1RvUGF0aCQyID0gbWVtb2l6ZUNhcHBlZChmdW5jdGlvbihzdHJpbmcpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBpZiAoc3RyaW5nLmNoYXJDb2RlQXQoMCkgPT09IDQ2IC8qIC4gKi8pIHtcbiAgICByZXN1bHQucHVzaCgnJyk7XG4gIH1cbiAgc3RyaW5nLnJlcGxhY2UocmVQcm9wTmFtZSwgZnVuY3Rpb24obWF0Y2gsIG51bWJlciwgcXVvdGUsIHN1YlN0cmluZykge1xuICAgIHJlc3VsdC5wdXNoKHF1b3RlID8gc3ViU3RyaW5nLnJlcGxhY2UocmVFc2NhcGVDaGFyLCAnJDEnKSA6IChudW1iZXIgfHwgbWF0Y2gpKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59KTtcblxudmFyIF9zdHJpbmdUb1BhdGggPSBzdHJpbmdUb1BhdGgkMjtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWFwYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKi9cblxudmFyIF9hcnJheU1hcDtcbnZhciBoYXNSZXF1aXJlZF9hcnJheU1hcDtcblxuZnVuY3Rpb24gcmVxdWlyZV9hcnJheU1hcCAoKSB7XG5cdGlmIChoYXNSZXF1aXJlZF9hcnJheU1hcCkgcmV0dXJuIF9hcnJheU1hcDtcblx0aGFzUmVxdWlyZWRfYXJyYXlNYXAgPSAxO1xuXHRmdW5jdGlvbiBhcnJheU1hcChhcnJheSwgaXRlcmF0ZWUpIHtcblx0ICB2YXIgaW5kZXggPSAtMSxcblx0ICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG5cdCAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cblx0ICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuXHQgICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcblx0ICB9XG5cdCAgcmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdF9hcnJheU1hcCA9IGFycmF5TWFwO1xuXHRyZXR1cm4gX2FycmF5TWFwO1xufVxuXG52YXIgU3ltYm9sJDIgPSByZXF1aXJlX1N5bWJvbCgpLFxuICAgIGFycmF5TWFwJDEgPSByZXF1aXJlX2FycmF5TWFwKCksXG4gICAgaXNBcnJheSQ2ID0gaXNBcnJheV8xLFxuICAgIGlzU3ltYm9sJDMgPSBpc1N5bWJvbF8xO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSQyID0gMSAvIDA7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvJDEgPSBTeW1ib2wkMiA/IFN5bWJvbCQyLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvJDEgPyBzeW1ib2xQcm90byQxLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUb1N0cmluZyQxKHZhbHVlKSB7XG4gIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzQXJyYXkkNih2YWx1ZSkpIHtcbiAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIHJldHVybiBhcnJheU1hcCQxKHZhbHVlLCBiYXNlVG9TdHJpbmckMSkgKyAnJztcbiAgfVxuICBpZiAoaXNTeW1ib2wkMyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkkMikgPyAnLTAnIDogcmVzdWx0O1xufVxuXG52YXIgX2Jhc2VUb1N0cmluZyA9IGJhc2VUb1N0cmluZyQxO1xuXG52YXIgYmFzZVRvU3RyaW5nID0gX2Jhc2VUb1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvU3RyaW5nKG51bGwpO1xuICogLy8gPT4gJydcbiAqXG4gKiBfLnRvU3RyaW5nKC0wKTtcbiAqIC8vID0+ICctMCdcbiAqXG4gKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiAnMSwyLDMnXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nJDIodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG59XG5cbnZhciB0b1N0cmluZ18xID0gdG9TdHJpbmckMjtcblxudmFyIGlzQXJyYXkkNSA9IGlzQXJyYXlfMSxcbiAgICBpc0tleSQyID0gX2lzS2V5LFxuICAgIHN0cmluZ1RvUGF0aCQxID0gX3N0cmluZ1RvUGF0aCxcbiAgICB0b1N0cmluZyQxID0gdG9TdHJpbmdfMTtcblxuLyoqXG4gKiBDYXN0cyBgdmFsdWVgIHRvIGEgcGF0aCBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNhc3RQYXRoJDIodmFsdWUsIG9iamVjdCkge1xuICBpZiAoaXNBcnJheSQ1KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gaXNLZXkkMih2YWx1ZSwgb2JqZWN0KSA/IFt2YWx1ZV0gOiBzdHJpbmdUb1BhdGgkMSh0b1N0cmluZyQxKHZhbHVlKSk7XG59XG5cbnZhciBfY2FzdFBhdGggPSBjYXN0UGF0aCQyO1xuXG52YXIgaXNTeW1ib2wkMiA9IGlzU3ltYm9sXzE7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZJDEgPSAxIC8gMDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIGtleSBpZiBpdCdzIG5vdCBhIHN0cmluZyBvciBzeW1ib2wuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICovXG5mdW5jdGlvbiB0b0tleSQ1KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNTeW1ib2wkMih2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSQxKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbnZhciBfdG9LZXkgPSB0b0tleSQ1O1xuXG52YXIgX2Jhc2VHZXQ7XG52YXIgaGFzUmVxdWlyZWRfYmFzZUdldDtcblxuZnVuY3Rpb24gcmVxdWlyZV9iYXNlR2V0ICgpIHtcblx0aWYgKGhhc1JlcXVpcmVkX2Jhc2VHZXQpIHJldHVybiBfYmFzZUdldDtcblx0aGFzUmVxdWlyZWRfYmFzZUdldCA9IDE7XG5cdHZhciBjYXN0UGF0aCA9IF9jYXN0UGF0aCxcblx0ICAgIHRvS2V5ID0gX3RvS2V5O1xuXG5cdC8qKlxuXHQgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5nZXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVmYXVsdCB2YWx1ZXMuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cblx0ICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cblx0ICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuXHQgKi9cblx0ZnVuY3Rpb24gYmFzZUdldChvYmplY3QsIHBhdGgpIHtcblx0ICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuXHQgIHZhciBpbmRleCA9IDAsXG5cdCAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG5cdCAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG5cdCAgICBvYmplY3QgPSBvYmplY3RbdG9LZXkocGF0aFtpbmRleCsrXSldO1xuXHQgIH1cblx0ICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG5cdH1cblxuXHRfYmFzZUdldCA9IGJhc2VHZXQ7XG5cdHJldHVybiBfYmFzZUdldDtcbn1cblxudmFyIGJhc2VHZXQkMSA9IHJlcXVpcmVfYmFzZUdldCgpO1xuXG4vKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzXG4gKiBgdW5kZWZpbmVkYCwgdGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGluIGl0cyBwbGFjZS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuNy4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAqXG4gKiBfLmdldChvYmplY3QsICdhWzBdLmIuYycpO1xuICogLy8gPT4gM1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICogLy8gPT4gM1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgJ2EuYi5jJywgJ2RlZmF1bHQnKTtcbiAqIC8vID0+ICdkZWZhdWx0J1xuICovXG5mdW5jdGlvbiBnZXQkMShvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICB2YXIgcmVzdWx0ID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0JDEob2JqZWN0LCBwYXRoKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZhbHVlIDogcmVzdWx0O1xufVxuXG52YXIgZ2V0XzEgPSBnZXQkMTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNJbmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuXG5mdW5jdGlvbiBiYXNlSGFzSW4kMShvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYga2V5IGluIE9iamVjdChvYmplY3QpO1xufVxuXG52YXIgX2Jhc2VIYXNJbiA9IGJhc2VIYXNJbiQxO1xuXG52YXIgY2FzdFBhdGgkMSA9IF9jYXN0UGF0aCxcbiAgICBpc0FyZ3VtZW50cyA9IGlzQXJndW1lbnRzXzEsXG4gICAgaXNBcnJheSQ0ID0gaXNBcnJheV8xLFxuICAgIGlzSW5kZXgkMiA9IF9pc0luZGV4LFxuICAgIGlzTGVuZ3RoID0gaXNMZW5ndGhfMSxcbiAgICB0b0tleSQ0ID0gX3RvS2V5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgcGF0aGAgZXhpc3RzIG9uIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrIHByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNQYXRoJDEob2JqZWN0LCBwYXRoLCBoYXNGdW5jKSB7XG4gIHBhdGggPSBjYXN0UGF0aCQxKHBhdGgsIG9iamVjdCk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGtleSA9IHRvS2V5JDQocGF0aFtpbmRleF0pO1xuICAgIGlmICghKHJlc3VsdCA9IG9iamVjdCAhPSBudWxsICYmIGhhc0Z1bmMob2JqZWN0LCBrZXkpKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIG9iamVjdCA9IG9iamVjdFtrZXldO1xuICB9XG4gIGlmIChyZXN1bHQgfHwgKytpbmRleCAhPSBsZW5ndGgpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGxlbmd0aCA9IG9iamVjdCA9PSBudWxsID8gMCA6IG9iamVjdC5sZW5ndGg7XG4gIHJldHVybiAhIWxlbmd0aCAmJiBpc0xlbmd0aChsZW5ndGgpICYmIGlzSW5kZXgkMihrZXksIGxlbmd0aCkgJiZcbiAgICAoaXNBcnJheSQ0KG9iamVjdCkgfHwgaXNBcmd1bWVudHMob2JqZWN0KSk7XG59XG5cbnZhciBfaGFzUGF0aCA9IGhhc1BhdGgkMTtcblxudmFyIGJhc2VIYXNJbiA9IF9iYXNlSGFzSW4sXG4gICAgaGFzUGF0aCA9IF9oYXNQYXRoO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2EuYicpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2InKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGhhc0luJDEob2JqZWN0LCBwYXRoKSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhc0luKTtcbn1cblxudmFyIGhhc0luXzEgPSBoYXNJbiQxO1xuXG52YXIgYmFzZUlzRXF1YWwgPSBfYmFzZUlzRXF1YWwsXG4gICAgZ2V0ID0gZ2V0XzEsXG4gICAgaGFzSW4gPSBoYXNJbl8xLFxuICAgIGlzS2V5JDEgPSBfaXNLZXksXG4gICAgaXNTdHJpY3RDb21wYXJhYmxlID0gX2lzU3RyaWN0Q29tcGFyYWJsZSxcbiAgICBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSA9IF9tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSxcbiAgICB0b0tleSQzID0gX3RvS2V5O1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc1Byb3BlcnR5YCB3aGljaCBkb2Vzbid0IGNsb25lIGBzcmNWYWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXRjaGVzUHJvcGVydHkkMShwYXRoLCBzcmNWYWx1ZSkge1xuICBpZiAoaXNLZXkkMShwYXRoKSAmJiBpc1N0cmljdENvbXBhcmFibGUoc3JjVmFsdWUpKSB7XG4gICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKHRvS2V5JDMocGF0aCksIHNyY1ZhbHVlKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIG9ialZhbHVlID0gZ2V0KG9iamVjdCwgcGF0aCk7XG4gICAgcmV0dXJuIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmIG9ialZhbHVlID09PSBzcmNWYWx1ZSlcbiAgICAgID8gaGFzSW4ob2JqZWN0LCBwYXRoKVxuICAgICAgOiBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRyk7XG4gIH07XG59XG5cbnZhciBfYmFzZU1hdGNoZXNQcm9wZXJ0eSA9IGJhc2VNYXRjaGVzUHJvcGVydHkkMTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eWAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICovXG5cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eSQxKGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH07XG59XG5cbnZhciBfYmFzZVByb3BlcnR5ID0gYmFzZVByb3BlcnR5JDE7XG5cbnZhciBiYXNlR2V0ID0gcmVxdWlyZV9iYXNlR2V0KCk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUHJvcGVydHlgIHdoaWNoIHN1cHBvcnRzIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5RGVlcCQxKHBhdGgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gIH07XG59XG5cbnZhciBfYmFzZVByb3BlcnR5RGVlcCA9IGJhc2VQcm9wZXJ0eURlZXAkMTtcblxudmFyIGJhc2VQcm9wZXJ0eSA9IF9iYXNlUHJvcGVydHksXG4gICAgYmFzZVByb3BlcnR5RGVlcCA9IF9iYXNlUHJvcGVydHlEZWVwLFxuICAgIGlzS2V5ID0gX2lzS2V5LFxuICAgIHRvS2V5JDIgPSBfdG9LZXk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gW1xuICogICB7ICdhJzogeyAnYic6IDIgfSB9LFxuICogICB7ICdhJzogeyAnYic6IDEgfSB9XG4gKiBdO1xuICpcbiAqIF8ubWFwKG9iamVjdHMsIF8ucHJvcGVydHkoJ2EuYicpKTtcbiAqIC8vID0+IFsyLCAxXVxuICpcbiAqIF8ubWFwKF8uc29ydEJ5KG9iamVjdHMsIF8ucHJvcGVydHkoWydhJywgJ2InXSkpLCAnYS5iJyk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqL1xuZnVuY3Rpb24gcHJvcGVydHkkMShwYXRoKSB7XG4gIHJldHVybiBpc0tleShwYXRoKSA/IGJhc2VQcm9wZXJ0eSh0b0tleSQyKHBhdGgpKSA6IGJhc2VQcm9wZXJ0eURlZXAocGF0aCk7XG59XG5cbnZhciBwcm9wZXJ0eV8xID0gcHJvcGVydHkkMTtcblxudmFyIGJhc2VNYXRjaGVzID0gX2Jhc2VNYXRjaGVzLFxuICAgIGJhc2VNYXRjaGVzUHJvcGVydHkgPSBfYmFzZU1hdGNoZXNQcm9wZXJ0eSxcbiAgICBpZGVudGl0eSQyID0gaWRlbnRpdHlfMSxcbiAgICBpc0FycmF5JDMgPSBpc0FycmF5XzEsXG4gICAgcHJvcGVydHkgPSBwcm9wZXJ0eV8xO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLml0ZXJhdGVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSBbdmFsdWU9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGl0ZXJhdGVlLlxuICovXG5mdW5jdGlvbiBiYXNlSXRlcmF0ZWUkMyh2YWx1ZSkge1xuICAvLyBEb24ndCBzdG9yZSB0aGUgYHR5cGVvZmAgcmVzdWx0IGluIGEgdmFyaWFibGUgdG8gYXZvaWQgYSBKSVQgYnVnIGluIFNhZmFyaSA5LlxuICAvLyBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1NjAzNCBmb3IgbW9yZSBkZXRhaWxzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gaWRlbnRpdHkkMjtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGlzQXJyYXkkMyh2YWx1ZSlcbiAgICAgID8gYmFzZU1hdGNoZXNQcm9wZXJ0eSh2YWx1ZVswXSwgdmFsdWVbMV0pXG4gICAgICA6IGJhc2VNYXRjaGVzKHZhbHVlKTtcbiAgfVxuICByZXR1cm4gcHJvcGVydHkodmFsdWUpO1xufVxuXG52YXIgX2Jhc2VJdGVyYXRlZSA9IGJhc2VJdGVyYXRlZSQzO1xuXG52YXIgYmFzZUFzc2lnblZhbHVlJDEgPSBfYmFzZUFzc2lnblZhbHVlLFxuICAgIGJhc2VGb3JPd24kMiA9IF9iYXNlRm9yT3duLFxuICAgIGJhc2VJdGVyYXRlZSQyID0gX2Jhc2VJdGVyYXRlZTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYXMgYG9iamVjdGAgYW5kIHZhbHVlcyBnZW5lcmF0ZWRcbiAqIGJ5IHJ1bm5pbmcgZWFjaCBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAgdGhydVxuICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gKiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIG9iamVjdC5cbiAqIEBzZWUgXy5tYXBLZXlzXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciB1c2VycyA9IHtcbiAqICAgJ2ZyZWQnOiAgICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAgfSxcbiAqICAgJ3BlYmJsZXMnOiB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSB9XG4gKiB9O1xuICpcbiAqIF8ubWFwVmFsdWVzKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZTsgfSk7XG4gKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLm1hcFZhbHVlcyh1c2VycywgJ2FnZScpO1xuICogLy8gPT4geyAnZnJlZCc6IDQwLCAncGViYmxlcyc6IDEgfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICovXG5mdW5jdGlvbiBtYXBWYWx1ZXMob2JqZWN0LCBpdGVyYXRlZSkge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGl0ZXJhdGVlID0gYmFzZUl0ZXJhdGVlJDIoaXRlcmF0ZWUpO1xuXG4gIGJhc2VGb3JPd24kMihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgIGJhc2VBc3NpZ25WYWx1ZSQxKHJlc3VsdCwga2V5LCBpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmplY3QpKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbnZhciBtYXBWYWx1ZXNfMSA9IG1hcFZhbHVlcztcblxudmFyIHBEZWZlciQxID0gKCkgPT4ge1xuXHRjb25zdCByZXQgPSB7fTtcblxuXHRyZXQucHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRyZXQucmVzb2x2ZSA9IHJlc29sdmU7XG5cdFx0cmV0LnJlamVjdCA9IHJlamVjdDtcblx0fSk7XG5cblx0cmV0dXJuIHJldDtcbn07XG5cbmNvbnN0IHBEZWZlciA9IHBEZWZlciQxO1xuZnVuY3Rpb24gbWFwQWdlQ2xlYW5lciQxKG1hcCwgcHJvcGVydHkgPSAnbWF4QWdlJykge1xuICAgIGxldCBwcm9jZXNzaW5nS2V5O1xuICAgIGxldCBwcm9jZXNzaW5nVGltZXI7XG4gICAgbGV0IHByb2Nlc3NpbmdEZWZlcnJlZDtcbiAgICBjb25zdCBjbGVhbnVwID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZiAocHJvY2Vzc2luZ0tleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBhcmUgYWxyZWFkeSBwcm9jZXNzaW5nIGFuIGl0ZW0sIHdlIGNhbiBzYWZlbHkgZXhpdFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNldHVwVGltZXIgPSBhc3luYyAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgcHJvY2Vzc2luZ0RlZmVycmVkID0gcERlZmVyKCk7XG4gICAgICAgICAgICBjb25zdCBkZWxheSA9IGl0ZW1bMV1bcHJvcGVydHldIC0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIGlmIChkZWxheSA8PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBpdGVtIGltbWVkaWF0ZWx5IGlmIHRoZSBkZWxheSBpcyBlcXVhbCB0byBvciBiZWxvdyAwXG4gICAgICAgICAgICAgICAgbWFwLmRlbGV0ZShpdGVtWzBdKTtcbiAgICAgICAgICAgICAgICBwcm9jZXNzaW5nRGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEtlZXAgdHJhY2sgb2YgdGhlIGN1cnJlbnQgcHJvY2Vzc2VkIGtleVxuICAgICAgICAgICAgcHJvY2Vzc2luZ0tleSA9IGl0ZW1bMF07XG4gICAgICAgICAgICBwcm9jZXNzaW5nVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhlIGl0ZW0gd2hlbiB0aGUgdGltZW91dCBmaXJlc1xuICAgICAgICAgICAgICAgIG1hcC5kZWxldGUoaXRlbVswXSk7XG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3NpbmdEZWZlcnJlZCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzaW5nRGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGRlbGF5KTtcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpzdHJpY3QtdHlwZS1wcmVkaWNhdGVzXG4gICAgICAgICAgICBpZiAodHlwZW9mIHByb2Nlc3NpbmdUaW1lci51bnJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIC8vIERvbid0IGhvbGQgdXAgdGhlIHByb2Nlc3MgZnJvbSBleGl0aW5nXG4gICAgICAgICAgICAgICAgcHJvY2Vzc2luZ1RpbWVyLnVucmVmKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcHJvY2Vzc2luZ0RlZmVycmVkLnByb21pc2U7XG4gICAgICAgIH07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIG1hcCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHNldHVwVGltZXIoZW50cnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChfYSkge1xuICAgICAgICAgICAgLy8gRG8gbm90aGluZyBpZiBhbiBlcnJvciBvY2N1cnMsIHRoaXMgbWVhbnMgdGhlIHRpbWVyIHdhcyBjbGVhbmVkIHVwIGFuZCB3ZSBzaG91bGQgc3RvcCBwcm9jZXNzaW5nXG4gICAgICAgIH1cbiAgICAgICAgcHJvY2Vzc2luZ0tleSA9IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIGNvbnN0IHJlc2V0ID0gKCkgPT4ge1xuICAgICAgICBwcm9jZXNzaW5nS2V5ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAocHJvY2Vzc2luZ1RpbWVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChwcm9jZXNzaW5nVGltZXIpO1xuICAgICAgICAgICAgcHJvY2Vzc2luZ1RpbWVyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9jZXNzaW5nRGVmZXJyZWQgIT09IHVuZGVmaW5lZCkgeyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOmVhcmx5LWV4aXRcbiAgICAgICAgICAgIHByb2Nlc3NpbmdEZWZlcnJlZC5yZWplY3QodW5kZWZpbmVkKTtcbiAgICAgICAgICAgIHByb2Nlc3NpbmdEZWZlcnJlZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgb3JpZ2luYWxTZXQgPSBtYXAuc2V0LmJpbmQobWFwKTtcbiAgICBtYXAuc2V0ID0gKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgaWYgKG1hcC5oYXMoa2V5KSkge1xuICAgICAgICAgICAgLy8gSWYgdGhlIGtleSBhbHJlYWR5IGV4aXN0LCByZW1vdmUgaXQgc28gd2UgY2FuIGFkZCBpdCBiYWNrIGF0IHRoZSBlbmQgb2YgdGhlIG1hcC5cbiAgICAgICAgICAgIG1hcC5kZWxldGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDYWxsIHRoZSBvcmlnaW5hbCBgbWFwLnNldGBcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gb3JpZ2luYWxTZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIC8vIElmIHdlIGFyZSBhbHJlYWR5IHByb2Nlc3NpbmcgYSBrZXkgYW5kIHRoZSBrZXkgYWRkZWQgaXMgdGhlIGN1cnJlbnQgcHJvY2Vzc2VkIGtleSwgc3RvcCBwcm9jZXNzaW5nIGl0XG4gICAgICAgIGlmIChwcm9jZXNzaW5nS2V5ICYmIHByb2Nlc3NpbmdLZXkgPT09IGtleSkge1xuICAgICAgICAgICAgcmVzZXQoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBbHdheXMgcnVuIHRoZSBjbGVhbnVwIG1ldGhvZCBpbiBjYXNlIGl0IHdhc24ndCBzdGFydGVkIHlldFxuICAgICAgICBjbGVhbnVwKCk7IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIGNsZWFudXAoKTsgLy8gdHNsaW50OmRpc2FibGUtbGluZTpuby1mbG9hdGluZy1wcm9taXNlc1xuICAgIHJldHVybiBtYXA7XG59XG52YXIgZGlzdCQxID0gbWFwQWdlQ2xlYW5lciQxO1xuXG5jb25zdCBtYXBBZ2VDbGVhbmVyID0gZGlzdCQxO1xuY2xhc3MgRXhwaXJ5TWFwIHtcbiAgICBjb25zdHJ1Y3RvcihtYXhBZ2UsIGRhdGEpIHtcbiAgICAgICAgdGhpcy5tYXhBZ2UgPSBtYXhBZ2U7XG4gICAgICAgIHRoaXNbU3ltYm9sLnRvU3RyaW5nVGFnXSA9ICdNYXAnO1xuICAgICAgICB0aGlzLmRhdGEgPSBuZXcgTWFwKCk7XG4gICAgICAgIC8vIEJvb3RzdHJhcCB0aGUgY2xlYW51cCBwcm9jZXNzIHdoaWNoIGZyZWVzIHVwIG1lbW9yeSB3aGVuIGFuIGl0ZW0gZXhwaXJlc1xuICAgICAgICBtYXBBZ2VDbGVhbmVyKHRoaXMuZGF0YSk7XG4gICAgICAgIGlmIChkYXRhKSB7IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6ZWFybHktZXhpdFxuICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgZGF0YSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLnNpemU7XG4gICAgfVxuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLmRhdGEuY2xlYXIoKTtcbiAgICB9XG4gICAgZGVsZXRlKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmRlbGV0ZShrZXkpO1xuICAgIH1cbiAgICBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuaGFzKGtleSk7XG4gICAgfVxuICAgIGdldChrZXkpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmRhdGEuZ2V0KGtleSk7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLmRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLmRhdGEuc2V0KGtleSwge1xuICAgICAgICAgICAgbWF4QWdlOiBEYXRlLm5vdygpICsgdGhpcy5tYXhBZ2UsXG4gICAgICAgICAgICBkYXRhOiB2YWx1ZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHZhbHVlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlSXRlcmF0b3IoaXRlbSA9PiBpdGVtWzFdLmRhdGEpO1xuICAgIH1cbiAgICBrZXlzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmtleXMoKTtcbiAgICB9XG4gICAgZW50cmllcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlSXRlcmF0b3IoaXRlbSA9PiBbaXRlbVswXSwgaXRlbVsxXS5kYXRhXSk7XG4gICAgfVxuICAgIGZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZykge1xuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiB0aGlzLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgY2FsbGJhY2tmbi5hcHBseSh0aGlzQXJnLCBbdmFsdWUsIGtleSwgdGhpc10pO1xuICAgICAgICB9XG4gICAgfVxuICAgIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbnRyaWVzKCk7XG4gICAgfVxuICAgICpjcmVhdGVJdGVyYXRvcihwcm9qZWN0aW9uKSB7XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB0aGlzLmRhdGEuZW50cmllcygpKSB7XG4gICAgICAgICAgICB5aWVsZCBwcm9qZWN0aW9uKGl0ZW0pO1xuICAgICAgICB9XG4gICAgfVxufVxudmFyIGRpc3QgPSBFeHBpcnlNYXA7XG5cbmNvbnN0IGNvcHlQcm9wZXJ0eSA9ICh0bywgZnJvbSwgcHJvcGVydHksIGlnbm9yZU5vbkNvbmZpZ3VyYWJsZSkgPT4ge1xuXHQvLyBgRnVuY3Rpb24jbGVuZ3RoYCBzaG91bGQgcmVmbGVjdCB0aGUgcGFyYW1ldGVycyBvZiBgdG9gIG5vdCBgZnJvbWAgc2luY2Ugd2Uga2VlcCBpdHMgYm9keS5cblx0Ly8gYEZ1bmN0aW9uI3Byb3RvdHlwZWAgaXMgbm9uLXdyaXRhYmxlIGFuZCBub24tY29uZmlndXJhYmxlIHNvIGNhbiBuZXZlciBiZSBtb2RpZmllZC5cblx0aWYgKHByb3BlcnR5ID09PSAnbGVuZ3RoJyB8fCBwcm9wZXJ0eSA9PT0gJ3Byb3RvdHlwZScpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBgRnVuY3Rpb24jYXJndW1lbnRzYCBhbmQgYEZ1bmN0aW9uI2NhbGxlcmAgc2hvdWxkIG5vdCBiZSBjb3BpZWQuIFRoZXkgd2VyZSByZXBvcnRlZCB0byBiZSBwcmVzZW50IGluIGBSZWZsZWN0Lm93bktleXNgIGZvciBzb21lIGRldmljZXMgaW4gUmVhY3QgTmF0aXZlICgjNDEpLCBzbyB3ZSBleHBsaWNpdGx5IGlnbm9yZSB0aGVtIGhlcmUuXG5cdGlmIChwcm9wZXJ0eSA9PT0gJ2FyZ3VtZW50cycgfHwgcHJvcGVydHkgPT09ICdjYWxsZXInKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y29uc3QgdG9EZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0bywgcHJvcGVydHkpO1xuXHRjb25zdCBmcm9tRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZnJvbSwgcHJvcGVydHkpO1xuXG5cdGlmICghY2FuQ29weVByb3BlcnR5KHRvRGVzY3JpcHRvciwgZnJvbURlc2NyaXB0b3IpICYmIGlnbm9yZU5vbkNvbmZpZ3VyYWJsZSkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0bywgcHJvcGVydHksIGZyb21EZXNjcmlwdG9yKTtcbn07XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHkoKWAgdGhyb3dzIGlmIHRoZSBwcm9wZXJ0eSBleGlzdHMsIGlzIG5vdCBjb25maWd1cmFibGUgYW5kIGVpdGhlcjpcbi8vIC0gb25lIGl0cyBkZXNjcmlwdG9ycyBpcyBjaGFuZ2VkXG4vLyAtIGl0IGlzIG5vbi13cml0YWJsZSBhbmQgaXRzIHZhbHVlIGlzIGNoYW5nZWRcbmNvbnN0IGNhbkNvcHlQcm9wZXJ0eSA9IGZ1bmN0aW9uICh0b0Rlc2NyaXB0b3IsIGZyb21EZXNjcmlwdG9yKSB7XG5cdHJldHVybiB0b0Rlc2NyaXB0b3IgPT09IHVuZGVmaW5lZCB8fCB0b0Rlc2NyaXB0b3IuY29uZmlndXJhYmxlIHx8IChcblx0XHR0b0Rlc2NyaXB0b3Iud3JpdGFibGUgPT09IGZyb21EZXNjcmlwdG9yLndyaXRhYmxlICYmXG5cdFx0dG9EZXNjcmlwdG9yLmVudW1lcmFibGUgPT09IGZyb21EZXNjcmlwdG9yLmVudW1lcmFibGUgJiZcblx0XHR0b0Rlc2NyaXB0b3IuY29uZmlndXJhYmxlID09PSBmcm9tRGVzY3JpcHRvci5jb25maWd1cmFibGUgJiZcblx0XHQodG9EZXNjcmlwdG9yLndyaXRhYmxlIHx8IHRvRGVzY3JpcHRvci52YWx1ZSA9PT0gZnJvbURlc2NyaXB0b3IudmFsdWUpXG5cdCk7XG59O1xuXG5jb25zdCBjaGFuZ2VQcm90b3R5cGUgPSAodG8sIGZyb20pID0+IHtcblx0Y29uc3QgZnJvbVByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihmcm9tKTtcblx0aWYgKGZyb21Qcm90b3R5cGUgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0bykpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRPYmplY3Quc2V0UHJvdG90eXBlT2YodG8sIGZyb21Qcm90b3R5cGUpO1xufTtcblxuY29uc3Qgd3JhcHBlZFRvU3RyaW5nID0gKHdpdGhOYW1lLCBmcm9tQm9keSkgPT4gYC8qIFdyYXBwZWQgJHt3aXRoTmFtZX0qL1xcbiR7ZnJvbUJvZHl9YDtcblxuY29uc3QgdG9TdHJpbmdEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihGdW5jdGlvbi5wcm90b3R5cGUsICd0b1N0cmluZycpO1xuY29uc3QgdG9TdHJpbmdOYW1lID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmcsICduYW1lJyk7XG5cbi8vIFdlIGNhbGwgYGZyb20udG9TdHJpbmcoKWAgZWFybHkgKG5vdCBsYXppbHkpIHRvIGVuc3VyZSBgZnJvbWAgY2FuIGJlIGdhcmJhZ2UgY29sbGVjdGVkLlxuLy8gV2UgdXNlIGBiaW5kKClgIGluc3RlYWQgb2YgYSBjbG9zdXJlIGZvciB0aGUgc2FtZSByZWFzb24uXG4vLyBDYWxsaW5nIGBmcm9tLnRvU3RyaW5nKClgIGVhcmx5IGFsc28gYWxsb3dzIGNhY2hpbmcgaXQgaW4gY2FzZSBgdG8udG9TdHJpbmcoKWAgaXMgY2FsbGVkIHNldmVyYWwgdGltZXMuXG5jb25zdCBjaGFuZ2VUb1N0cmluZyA9ICh0bywgZnJvbSwgbmFtZSkgPT4ge1xuXHRjb25zdCB3aXRoTmFtZSA9IG5hbWUgPT09ICcnID8gJycgOiBgd2l0aCAke25hbWUudHJpbSgpfSgpIGA7XG5cdGNvbnN0IG5ld1RvU3RyaW5nID0gd3JhcHBlZFRvU3RyaW5nLmJpbmQobnVsbCwgd2l0aE5hbWUsIGZyb20udG9TdHJpbmcoKSk7XG5cdC8vIEVuc3VyZSBgdG8udG9TdHJpbmcudG9TdHJpbmdgIGlzIG5vbi1lbnVtZXJhYmxlIGFuZCBoYXMgdGhlIHNhbWUgYHNhbWVgXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdUb1N0cmluZywgJ25hbWUnLCB0b1N0cmluZ05hbWUpO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkodG8sICd0b1N0cmluZycsIHsuLi50b1N0cmluZ0Rlc2NyaXB0b3IsIHZhbHVlOiBuZXdUb1N0cmluZ30pO1xufTtcblxuZnVuY3Rpb24gbWltaWNGdW5jdGlvbih0bywgZnJvbSwge2lnbm9yZU5vbkNvbmZpZ3VyYWJsZSA9IGZhbHNlfSA9IHt9KSB7XG5cdGNvbnN0IHtuYW1lfSA9IHRvO1xuXG5cdGZvciAoY29uc3QgcHJvcGVydHkgb2YgUmVmbGVjdC5vd25LZXlzKGZyb20pKSB7XG5cdFx0Y29weVByb3BlcnR5KHRvLCBmcm9tLCBwcm9wZXJ0eSwgaWdub3JlTm9uQ29uZmlndXJhYmxlKTtcblx0fVxuXG5cdGNoYW5nZVByb3RvdHlwZSh0bywgZnJvbSk7XG5cdGNoYW5nZVRvU3RyaW5nKHRvLCBmcm9tLCBuYW1lKTtcblxuXHRyZXR1cm4gdG87XG59XG5cbmNvbnN0IGNhY2hlU3RvcmUgPSBuZXcgV2Vha01hcCgpO1xuLyoqXG5bTWVtb2l6ZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWVtb2l6YXRpb24pIGZ1bmN0aW9ucyAtIEFuIG9wdGltaXphdGlvbiB1c2VkIHRvIHNwZWVkIHVwIGNvbnNlY3V0aXZlIGZ1bmN0aW9uIGNhbGxzIGJ5IGNhY2hpbmcgdGhlIHJlc3VsdCBvZiBjYWxscyB3aXRoIGlkZW50aWNhbCBpbnB1dC5cblxuQHBhcmFtIGZuIC0gRnVuY3Rpb24gdG8gYmUgbWVtb2l6ZWQuXG5cbkBleGFtcGxlXG5gYGBcbmltcG9ydCB7c2V0VGltZW91dCBhcyBkZWxheX0gZnJvbSAnbm9kZTp0aW1lci9wcm9taXNlcyc7XG5pbXBvcnQgcE1lbW9pemUgZnJvbSAncC1tZW1vaXplJztcbmltcG9ydCBnb3QgZnJvbSAnZ290JztcblxuY29uc3QgbWVtb2l6ZWRHb3QgPSBwTWVtb2l6ZShnb3QpO1xuXG5hd2FpdCBtZW1vaXplZEdvdCgnaHR0cHM6Ly9zaW5kcmVzb3JodXMuY29tJyk7XG5cbi8vIFRoaXMgY2FsbCBpcyBjYWNoZWRcbmF3YWl0IG1lbW9pemVkR290KCdodHRwczovL3NpbmRyZXNvcmh1cy5jb20nKTtcblxuYXdhaXQgZGVsYXkoMjAwMCk7XG5cbi8vIFRoaXMgY2FsbCBpcyBub3QgY2FjaGVkIGFzIHRoZSBjYWNoZSBoYXMgZXhwaXJlZFxuYXdhaXQgbWVtb2l6ZWRHb3QoJ2h0dHBzOi8vc2luZHJlc29yaHVzLmNvbScpO1xuYGBgXG4qL1xuZnVuY3Rpb24gcE1lbW9pemUoZm4sIHsgY2FjaGVLZXkgPSAoW2ZpcnN0QXJndW1lbnRdKSA9PiBmaXJzdEFyZ3VtZW50LCBjYWNoZSA9IG5ldyBNYXAoKSwgfSA9IHt9KSB7XG4gICAgLy8gUHJvbWlzZSBvYmplY3RzIGNhbid0IGJlIHNlcmlhbGl6ZWQgc28gd2Uga2VlcCB0cmFjayBvZiB0aGVtIGludGVybmFsbHkgYW5kIG9ubHkgcHJvdmlkZSB0aGVpciByZXNvbHZlZCB2YWx1ZXMgdG8gYGNhY2hlYFxuICAgIC8vIGBQcm9taXNlPEFzeW5jUmV0dXJuVHlwZTxGdW5jdGlvblRvTWVtb2l6ZT4+YCBpcyB1c2VkIGluc3RlYWQgb2YgYFJldHVyblR5cGU8RnVuY3Rpb25Ub01lbW9pemU+YCBiZWNhdXNlIHByb21pc2UgcHJvcGVydGllcyBhcmUgbm90IGtlcHRcbiAgICBjb25zdCBwcm9taXNlQ2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgY29uc3QgbWVtb2l6ZWQgPSBmdW5jdGlvbiAoLi4uYXJndW1lbnRzXykge1xuICAgICAgICBjb25zdCBrZXkgPSBjYWNoZUtleShhcmd1bWVudHNfKTtcbiAgICAgICAgaWYgKHByb21pc2VDYWNoZS5oYXMoa2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHByb21pc2VDYWNoZS5nZXQoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcm9taXNlID0gKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlICYmIGF3YWl0IGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoYXdhaXQgY2FjaGUuZ2V0KGtleSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBwcm9taXNlID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzXyk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJvbWlzZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhY2hlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBjYWNoZS5zZXQoa2V5LCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZUNhY2hlLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSgpO1xuICAgICAgICBwcm9taXNlQ2FjaGUuc2V0KGtleSwgcHJvbWlzZSk7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH07XG4gICAgbWltaWNGdW5jdGlvbihtZW1vaXplZCwgZm4sIHtcbiAgICAgICAgaWdub3JlTm9uQ29uZmlndXJhYmxlOiB0cnVlLFxuICAgIH0pO1xuICAgIGNhY2hlU3RvcmUuc2V0KG1lbW9pemVkLCBjYWNoZSk7XG4gICAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vKipcbiAqIENvcHlyaWdodCAyMDIzIEFkb2JlXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIE5PVElDRTogQWRvYmUgcGVybWl0cyB5b3UgdG8gdXNlLCBtb2RpZnksIGFuZCBkaXN0cmlidXRlIHRoaXMgZmlsZSBpblxuICogYWNjb3JkYW5jZSB3aXRoIHRoZSB0ZXJtcyBvZiB0aGUgQWRvYmUgbGljZW5zZSBhZ3JlZW1lbnQgYWNjb21wYW55aW5nXG4gKiBpdC5cbiAqL1xuZnVuY3Rpb24gbGFiZWxBc1VybChsYWJlbCwgc2V0dGluZ3MpIHtcbiAgICBjb25zdCBob3N0ID0gc2V0dGluZ3MuZ2xvYmFsLm1hbmlmZXN0U3RvcmFnZT8uZ2V0Py5ob3N0O1xuICAgIGlmICghaG9zdCkge1xuICAgICAgICAvLyBUT0RPOiBTZWUgd2h5IGBJbnZhbGlkQ29uZmlnRXJyb3JgIGJyZWFrcyB0ZXN0cyBydW5uaW5nIGluIGB3dHJgXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbWFuaWZlc3Rfc3RvcmFnZV9nZXRfaG9zdCcpO1xuICAgIH1cbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGhvc3QpO1xuICAgIHVybC5wYXRobmFtZSA9IGAvbWFuaWZlc3RzYDtcbiAgICByZXR1cm4gW3VybC50b1N0cmluZygpLCBsYWJlbC5yZXBsYWNlQWxsKCc6JywgJy0nKV0uam9pbignLycpO1xufVxuYXN5bmMgZnVuY3Rpb24gdXBsb2FkU2lnbmVkTWFuaWZlc3QobWFuaWZlc3QsIHNldHRpbmdzKSB7XG4gICAgY29uc3Qgc2VydmljZUNvbmZpZyA9IHNldHRpbmdzLmdsb2JhbC5tYW5pZmVzdFN0b3JhZ2U/LnBvc3Q7XG4gICAgY29uc3QgeyBhdXRoVG9rZW4gfSA9IHNldHRpbmdzLnNpZ247XG4gICAgaWYgKCFzZXJ2aWNlQ29uZmlnPy5ob3N0IHx8ICFzZXJ2aWNlQ29uZmlnLmFwaUtleSB8fCAhYXV0aFRva2VuKSB7XG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlnRXJyb3IoYG1hbmlmZXN0X3N0b3JhZ2VgKTtcbiAgICB9XG4gICAgY29uc3QgeyBob3N0LCBhcGlLZXkgfSA9IHNlcnZpY2VDb25maWc7XG4gICAgY29uc3QgdXJsID0gYCR7aG9zdH0vbWFuaWZlc3RzL3YxYDtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCh1cmwsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHtcbiAgICAgICAgICAgICd4LWFwaS1rZXknOiBhcGlLZXksXG4gICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7YXV0aFRva2VufWAsXG4gICAgICAgIH0pLFxuICAgICAgICBib2R5OiBtYW5pZmVzdCxcbiAgICB9KTtcbiAgICBpZiAoIXJlcy5vaykge1xuICAgICAgICB0aHJvdyBuZXcgVXJsRmV0Y2hFcnJvcih1cmwsIHJlcyk7XG4gICAgfVxufVxuXG4vKipcbiAqIENvcHlyaWdodCAyMDIzIEFkb2JlXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIE5PVElDRTogQWRvYmUgcGVybWl0cyB5b3UgdG8gdXNlLCBtb2RpZnksIGFuZCBkaXN0cmlidXRlIHRoaXMgZmlsZSBpblxuICogYWNjb3JkYW5jZSB3aXRoIHRoZSB0ZXJtcyBvZiB0aGUgQWRvYmUgbGljZW5zZSBhZ3JlZW1lbnQgYWNjb21wYW55aW5nXG4gKiBpdC5cbiAqL1xuY29uc3QgZGJnJDMgPSBkZWJ1ZygnYzJwYTpzaWduOmltYWdlJyk7XG5mdW5jdGlvbiBnZXRDYW52YXMod2lkdGgsIGhlaWdodCwgd29ya2luZ0NhbnZhcyA9IG51bGwpIHtcbiAgICBpZiAod29ya2luZ0NhbnZhcykge1xuICAgICAgICB3b3JraW5nQ2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHdvcmtpbmdDYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICByZXR1cm4gd29ya2luZ0NhbnZhcztcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPZmZzY3JlZW5DYW52YXMod2lkdGgsIGhlaWdodCk7XG59XG5mdW5jdGlvbiBnZXRSZXNpemVEaW1lbnNpb25zKHNyY1dpZHRoLCBzcmNIZWlnaHQsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IG1heFNpemUgfSA9IG9wdGlvbnM7XG4gICAgaWYgKHNyY1dpZHRoID4gbWF4U2l6ZSB8fCBzcmNIZWlnaHQgPiBtYXhTaXplKSB7XG4gICAgICAgIGNvbnN0IHJhdGlvID0gc3JjV2lkdGggPj0gc3JjSGVpZ2h0ID8gbWF4U2l6ZSAvIHNyY1dpZHRoIDogbWF4U2l6ZSAvIHNyY0hlaWdodDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHdpZHRoOiBNYXRoLnJvdW5kKHNyY1dpZHRoICogcmF0aW8pLFxuICAgICAgICAgICAgaGVpZ2h0OiBNYXRoLnJvdW5kKHNyY0hlaWdodCAqIHJhdGlvKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGg6IHNyY1dpZHRoLFxuICAgICAgICBoZWlnaHQ6IHNyY0hlaWdodCxcbiAgICB9O1xufVxuZnVuY3Rpb24gaGFzQWxwaGEoaW1hZ2UpIHtcbiAgICBsZXQgYWxwaGFGb3VuZCA9IGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAzOyBpIDwgaW1hZ2UuZGF0YS5sZW5ndGg7IGkgKz0gNCkge1xuICAgICAgICBpZiAoaW1hZ2UuZGF0YVtpXSA8IDI1NSkge1xuICAgICAgICAgICAgYWxwaGFGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBkYmckMygnQWxwaGEgZm91bmQ/JywgYWxwaGFGb3VuZCk7XG4gICAgcmV0dXJuIGFscGhhRm91bmQ7XG59XG4vLyBUT0RPOiBSZXBsYWNlIHdpdGggYWxsIGBjcmVhdGVJbWFnZUJpdG1hcGAgY2FsbHMgb25jZSBpdCBoYXMgYmV0dGVyIHN1cHBvcnQgaW4gRmlyZWZveCBhbmQgU2FmYXJpXG5hc3luYyBmdW5jdGlvbiBleHBvcnRJbWFnZShkYXRhLCBvcHRpb25zLCB3b3JraW5nQ2FudmFzID0gbnVsbCkge1xuICAgIGxldCBpbWFnZSA9IHVuZGVmaW5lZDtcbiAgICB0cnkge1xuICAgICAgICBpbWFnZSA9IGF3YWl0IGNyZWF0ZUltYWdlQml0bWFwKGRhdGEpO1xuICAgICAgICBjb25zdCB7IHF1YWxpdHkgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gZ2V0UmVzaXplRGltZW5zaW9ucyhpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCBvcHRpb25zKTtcbiAgICAgICAgLy8gV2Ugc3RpbGwgd2FudCB0aGlzIHRvIHJ1biBldmVuIGlmIHRoZSBkaW1lbnNpb25zIGFyZSB0aGUgc2FtZSBzaXplIHNvIHRoYXQgaXQgY2FuIGNvbnZlcnQgUE5HXG4gICAgICAgIC8vIHRvIEpQRUcgdG8gc2F2ZSBzcGFjZSBpZiBuZWNlc3NhcnlcbiAgICAgICAgY29uc3QgY2FudmFzID0gZ2V0Q2FudmFzKHdpZHRoLCBoZWlnaHQsIHdvcmtpbmdDYW52YXMpO1xuICAgICAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgY3R4LmRyYXdJbWFnZShpbWFnZSwgMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgIGNvbnN0IGltYWdlRGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgIGNvbnN0IHR5cGUgPSBoYXNBbHBoYShpbWFnZURhdGEpID8gJ2ltYWdlL3BuZycgOiAnaW1hZ2UvanBlZyc7XG4gICAgICAgIGlmICgnT2Zmc2NyZWVuQ2FudmFzJyBpbiBnbG9iYWxUaGlzICYmIGNhbnZhcyBpbnN0YW5jZW9mIE9mZnNjcmVlbkNhbnZhcykge1xuICAgICAgICAgICAgZGJnJDMoJ1JlbmRlcmluZyB3aXRoIE9mZnNjcmVlbkNhbnZhcycpO1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgcmV0dXJuIGNhbnZhcy5jb252ZXJ0VG9CbG9iKHsgdHlwZSwgcXVhbGl0eSB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjYW52YXMgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCkge1xuICAgICAgICAgICAgZGJnJDMoJ09mZnNjcmVlbkNhbnZhcyBub3QgZm91bmQsIHJlbmRlcmluZyBpbiBtYWluIHRocmVhZCcpO1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FudmFzLnRvQmxvYigoZXhwb3J0ZWQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4cG9ydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGV4cG9ydGVkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIHR5cGUsIHF1YWxpdHkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVzaXplSW1hZ2VFcnJvcih7XG4gICAgICAgICAgICAgICAgY2F1c2U6IG5ldyBFcnJvcignQ2FudmFzIHR5cGUgbm90IHN1cHBvcnRlZCcpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICB0aHJvdyBuZXcgUmVzaXplSW1hZ2VFcnJvcih7IGNhdXNlOiBlcnIgfSk7XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBpbWFnZT8uY2xvc2UoKTtcbiAgICB9XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMjMgQWRvYmVcbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTk9USUNFOiBBZG9iZSBwZXJtaXRzIHlvdSB0byB1c2UsIG1vZGlmeSwgYW5kIGRpc3RyaWJ1dGUgdGhpcyBmaWxlIGluXG4gKiBhY2NvcmRhbmNlIHdpdGggdGhlIHRlcm1zIG9mIHRoZSBBZG9iZSBsaWNlbnNlIGFncmVlbWVudCBhY2NvbXBhbnlpbmdcbiAqIGl0LlxuICovXG5jb25zdCBhbGxvd2VkTWltZVR5cGVzID0gW1xuICAgICdpbWFnZS9qcGVnJyxcbiAgICAnaW1hZ2UvcG5nJyxcbiAgICAnaW1hZ2Uvd2VicCcsXG4gICAgJ2ltYWdlL3N2Zyt4bWwnLFxuXTtcbmNvbnN0IGJ5cGFzc1RodW1ibmFpbE1pbWVUeXBlcyA9IFsnaW1hZ2Uvc3ZnK3htbCddO1xuYXN5bmMgZnVuY3Rpb24gY3JlYXRlVGh1bWJuYWlsKGRhdGEsIHBvb2wsIG9wdGlvbnMpIHtcbiAgICBpZiAoIWFsbG93ZWRNaW1lVHlwZXMuaW5jbHVkZXMoZGF0YS50eXBlKSkge1xuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFRodW1ibmFpbFNvdXJjZUVycm9yKGRhdGEudHlwZSk7XG4gICAgfVxuICAgIGlmICgnT2Zmc2NyZWVuQ2FudmFzJyBpbiBzZWxmICYmXG4gICAgICAgICFieXBhc3NUaHVtYm5haWxNaW1lVHlwZXMuaW5jbHVkZXMoZGF0YS50eXBlKSkge1xuICAgICAgICByZXR1cm4gcG9vbC5leHBvcnRJbWFnZShkYXRhLCBvcHRpb25zKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoJ2RvY3VtZW50JyBpbiBzZWxmICYmXG4gICAgICAgICFieXBhc3NUaHVtYm5haWxNaW1lVHlwZXMuaW5jbHVkZXMoZGF0YS50eXBlKSkge1xuICAgICAgICAvLyBObyBPZmZzY3JlZW5DYW52YXMgZXhpc3RzLCB3ZSdsbCBuZWVkIHRvIHJ1biB0aGlzIG9uIHRoZSBtYWluIHRocmVhZCAoU2FmYXJpKVxuICAgICAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgcmV0dXJuIGV4cG9ydEltYWdlKGRhdGEsIG9wdGlvbnMsIGNhbnZhcyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMjMgQWRvYmVcbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTk9USUNFOiBBZG9iZSBwZXJtaXRzIHlvdSB0byB1c2UsIG1vZGlmeSwgYW5kIGRpc3RyaWJ1dGUgdGhpcyBmaWxlIGluXG4gKiBhY2NvcmRhbmNlIHdpdGggdGhlIHRlcm1zIG9mIHRoZSBBZG9iZSBsaWNlbnNlIGFncmVlbWVudCBhY2NvbXBhbnlpbmdcbiAqIGl0LlxuICovXG5jb25zdCBkYmckMiA9IGRlYnVnKCdjMnBhOnNpZ246c2lnbicpO1xuY29uc3QgZGVmYXVsdEdsb2JhbENvbmZpZyA9IHtcbiAgICBjb25uZWN0ZWRBY2NvdW50czoge1xuICAgICAgICBob3N0OiAnaHR0cHM6Ly9jYWktaWRlbnRpdHkuYWRvYmUuaW8nLFxuICAgICAgICBhcGlLZXk6ICdjYWktcHMtcGx1Z2luJyxcbiAgICB9LFxuICAgIGNsYWltc1NpZ25lcjoge1xuICAgICAgICBob3N0OiAnaHR0cHM6Ly9jYWkuYWRvYmUuaW8nLFxuICAgICAgICBhcGlLZXk6ICdjYWktZGVza3RvcC1oZWxwZXInLFxuICAgICAgICByZXNlcnZlU2l6ZUNhY2hlTXM6IDM2MDAgKiAxMDAwLFxuICAgIH0sXG4gICAgbWFuaWZlc3RTdG9yYWdlOiB7XG4gICAgICAgIHBvc3Q6IHtcbiAgICAgICAgICAgIGhvc3Q6ICdodHRwczovL2NhaS1tc2IuYWRvYmUuaW8nLFxuICAgICAgICAgICAgYXBpS2V5OiAnY2FpLWRlc2t0b3AtaGVscGVyJyxcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0OiB7XG4gICAgICAgICAgICBob3N0OiAnaHR0cHM6Ly9jYWktbWFuaWZlc3RzLmFkb2JlLmNvbScsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBzaWduVGltZW91dE1zOiAxMCAqIDEwMDAsXG4gICAgdGh1bWJuYWlsOiB7XG4gICAgICAgIG1heFNpemU6IDEwMjQsXG4gICAgICAgIHF1YWxpdHk6IDgwLFxuICAgIH0sXG59O1xuY29uc3QgZGVmYXVsdFNpZ25Db25maWcgPSB7XG4gICAgYXV0aFRva2VuOiAnJyxcbiAgICBzdG9yYWdlTG9jYXRpb25zOiBbJ2VtYmVkZGVkJ10sXG59O1xuYXN5bmMgZnVuY3Rpb24gZmV0Y2hSZXNlcnZlU2l6ZShnbG9iYWxDb25maWcsIHNpZ25Db25maWcpIHtcbiAgICBjb25zdCBzZXJ2aWNlQ29uZmlnID0gZ2xvYmFsQ29uZmlnLmNsYWltc1NpZ25lcjtcbiAgICBpZiAoIXNlcnZpY2VDb25maWc/Lmhvc3QgfHwgIXNlcnZpY2VDb25maWcuYXBpS2V5IHx8ICFzaWduQ29uZmlnLmF1dGhUb2tlbikge1xuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ0Vycm9yKGBjbGFpbXNfc2lnbmVyYCk7XG4gICAgfVxuICAgIGNvbnN0IHsgaG9zdCwgYXBpS2V5IH0gPSBzZXJ2aWNlQ29uZmlnO1xuICAgIGNvbnN0IHVybCA9IGAke2hvc3R9L3NpZ25hdHVyZS9ib3hfc2l6ZS92MWA7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2godXJsLCB7XG4gICAgICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHtcbiAgICAgICAgICAgICd4LWFwaS1rZXknOiBhcGlLZXksXG4gICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7c2lnbkNvbmZpZy5hdXRoVG9rZW59YCxcbiAgICAgICAgfSksXG4gICAgfSk7XG4gICAgaWYgKCFyZXMub2spIHtcbiAgICAgICAgdGhyb3cgbmV3IFVybEZldGNoRXJyb3IodXJsLCByZXMpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICByZXR1cm4gZGF0YS5ib3hfc2l6ZTtcbn1cbmZ1bmN0aW9uIGdldFJlc2VydmVTaXplRm4oZ2xvYmFsQ29uZmlnKSB7XG4gICAgY29uc3QgY2FjaGVNcyA9IGdsb2JhbENvbmZpZy5jbGFpbXNTaWduZXI/LnJlc2VydmVTaXplQ2FjaGVNcyA/P1xuICAgICAgICBkZWZhdWx0R2xvYmFsQ29uZmlnLmNsYWltc1NpZ25lci5yZXNlcnZlU2l6ZUNhY2hlTXM7XG4gICAgaWYgKGNhY2hlTXMgPT09IEluZmluaXR5KSB7XG4gICAgICAgIHJldHVybiBwTWVtb2l6ZShmZXRjaFJlc2VydmVTaXplKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIWNhY2hlTXMpIHtcbiAgICAgICAgcmV0dXJuIGZldGNoUmVzZXJ2ZVNpemU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBjYWNoZSA9IG5ldyBkaXN0KGNhY2hlTXMpO1xuICAgICAgICByZXR1cm4gcE1lbW9pemUoZmV0Y2hSZXNlcnZlU2l6ZSwgeyBjYWNoZSB9KTtcbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVTaWduKGMycGFDb25maWcsIGRlcGVuZGVuY2llcywgXG4vLyBQYXNzIGFuIGF1dGggdG9rZW4gdG8gcHJlLWZldGNoIGFuZCBjYWNoZSB0aGUgcmVzZXJ2ZSBzaXplXG5hdXRoVG9rZW4pIHtcbiAgICBjb25zdCBnbG9iYWxDb25maWcgPSBtZXJnZV8xKHt9LCBkZWZhdWx0R2xvYmFsQ29uZmlnLCBjMnBhQ29uZmlnKTtcbiAgICBjb25zdCB7IHBvb2wsIHdhc20gfSA9IGRlcGVuZGVuY2llcztcbiAgICBjb25zdCBnZXRSZXNlcnZlU2l6ZSA9IGdldFJlc2VydmVTaXplRm4oZ2xvYmFsQ29uZmlnKTtcbiAgICAvLyBUcnkgdG8gcHJlZmV0Y2ggYW5kIGNhY2hlIHRoZSBhdXRoIHRva2VuIHdoZW4gc2lnbmluZyBpcyBpbml0aWFsaXplZFxuICAgIGlmIChhdXRoVG9rZW4pIHtcbiAgICAgICAgZ2V0UmVzZXJ2ZVNpemUoZ2xvYmFsQ29uZmlnLCB7IGF1dGhUb2tlbiB9KTtcbiAgICB9XG4gICAgY29uc3Qgc2lnbkZuID0gYXN5bmMgKGFzc2V0LCBtYW5pZmVzdCwgc2lnbkNvbmZpZywgb3B0aW9ucykgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgeyBzdG9yYWdlTG9jYXRpb25zLCB3YWl0Rm9yVXBsb2FkLCBvblByb2dyZXNzLCBvblJlc3VsdCwgb25VcGxvYWRDb21wbGV0ZSwgb25VcGxvYWRFcnJvciwgfSA9IG1lcmdlXzEoe30sIGRlZmF1bHRTaWduQ29uZmlnLCBzaWduQ29uZmlnKTtcbiAgICAgICAgICAgIGRlbGV0ZSBzaWduQ29uZmlnLndhaXRGb3JVcGxvYWQ7XG4gICAgICAgICAgICBkZWxldGUgc2lnbkNvbmZpZy5vblByb2dyZXNzO1xuICAgICAgICAgICAgZGVsZXRlIHNpZ25Db25maWcub25SZXN1bHQ7XG4gICAgICAgICAgICBkZWxldGUgc2lnbkNvbmZpZy5vblVwbG9hZENvbXBsZXRlO1xuICAgICAgICAgICAgZGVsZXRlIHNpZ25Db25maWcub25VcGxvYWRFcnJvcjtcbiAgICAgICAgICAgIC8vIFdlIGNhbGwgdGhpcyBiZWZvcmUgcnVubmluZyBhbnkgY2FsbGJhY2tzIHRvIHNlZSBpZiBhbiBBYm9ydFNpZ25hbCB3YXNcbiAgICAgICAgICAgIC8vIHJlY2VpdmVkIGJlZm9yZSBtb3Zpbmcgb24gdG8gdGhlIG5leHQgc3RlcCBvZiB0aGUgcHJvY2Vzcy4gSXQncyBub3QgdGhlIG1vc3RcbiAgICAgICAgICAgIC8vIGVsZWdhbnQgc29sdXRpb24sIGJ1dCB0cnlpbmcgdG8gdGhyb3cgdXNpbmcgYG9uQWJvcnRgIHdpbGwgdGhyb3cgZnJvbSB0aGUgdG9wXG4gICAgICAgICAgICAvLyBsZXZlbCB3aGljaCByZXN1bHRzIGluIGFuIHVuaGFuZGxlZCBlcnJvci4gVGhpcyBpcyB0byBzdG9wIGFuIGVkZ2UgY2FzZSB3aGVyZVxuICAgICAgICAgICAgLy8gdGhlIGZ1bmN0aW9uIGNhbiB0aW1lIG91dCBhbmQgdGhlIHByb21pc2Uga2VlcHMgZXhlY3V0aW5nIGFuZCB1cGRhdGluZyBzdGF0dXMuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gVE9ETzogU2VlIGlmIHRoZXJlJ3MgYSBiZXR0ZXIgd2F5IGZvIGRvaW5nIHRoaXMuXG4gICAgICAgICAgICBjb25zdCB0aHJvd0lmQ2FuY2VsbGVkID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zPy5zaWduYWw/LmFib3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNpZ25pbmdDYW5jZWxsZWRFcnJvcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBoYW5kbGVQcm9ncmVzcyA9IChwcm9ncmVzcykgPT4ge1xuICAgICAgICAgICAgICAgIHRocm93SWZDYW5jZWxsZWQoKTtcbiAgICAgICAgICAgICAgICBvblByb2dyZXNzPy4ocHJvZ3Jlc3MpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZVJlc3VsdCA9IChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICB0aHJvd0lmQ2FuY2VsbGVkKCk7XG4gICAgICAgICAgICAgICAgb25SZXN1bHQ/LihyZXN1bHQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICghc3RvcmFnZUxvY2F0aW9ucy5pbmNsdWRlcygnZW1iZWRkZWQnKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBTaWduaW5nU3RvcmFnZU1pc3NpbmdFcnJvcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgICAgIGNvbnN0IGdldEVsYXBzZWQgPSAoKSA9PiBwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0O1xuICAgICAgICAgICAgaGFuZGxlUHJvZ3Jlc3Moe1xuICAgICAgICAgICAgICAgIHZhbHVlOiAwLFxuICAgICAgICAgICAgICAgIHN0YWdlOiAnaW5pdGlhbGl6ZWQnLFxuICAgICAgICAgICAgICAgIGVsYXBzZWQ6IGdldEVsYXBzZWQoKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgcmVzZXJ2ZVNpemUgPSBhd2FpdCBnZXRSZXNlcnZlU2l6ZShnbG9iYWxDb25maWcsIHNpZ25Db25maWcpO1xuICAgICAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSB7XG4gICAgICAgICAgICAgICAgZ2xvYmFsOiBnbG9iYWxDb25maWcsXG4gICAgICAgICAgICAgICAgc2lnbjogc2lnbkNvbmZpZyxcbiAgICAgICAgICAgICAgICByZXNlcnZlU2l6ZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCB0aHVtYm5haWxPcHRpb25zID0gdHlwZW9mIHNpZ25Db25maWc/LnRodW1ibmFpbCAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICA/IHNpZ25Db25maWcudGh1bWJuYWlsXG4gICAgICAgICAgICAgICAgOiBzZXR0aW5ncy5nbG9iYWwudGh1bWJuYWlsO1xuICAgICAgICAgICAgaGFuZGxlUHJvZ3Jlc3Moe1xuICAgICAgICAgICAgICAgIHZhbHVlOiAxMCxcbiAgICAgICAgICAgICAgICBzdGFnZTogJ2dvdF9yZXNlcnZlX3NpemUnLFxuICAgICAgICAgICAgICAgIGVsYXBzZWQ6IGdldEVsYXBzZWQoKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBkbyB0aGlzIGhlcmUgaW5zdGVhZCBvZiBpbiBgZW1iZWRBbmRTaWduYCBzaW5jZSBTYWZhcmkgY2Fubm90XG4gICAgICAgICAgICAvLyBydW4gdGhpcyBpbiBhIHdvcmtlciAoYXMgb2YgRmViIDIwMjMpXG4gICAgICAgICAgICBjb25zdCB0aHVtYm5haWwgPSB0aHVtYm5haWxPcHRpb25zXG4gICAgICAgICAgICAgICAgPyBhd2FpdCBjcmVhdGVUaHVtYm5haWwoYXNzZXQsIHBvb2wsIHRodW1ibmFpbE9wdGlvbnMpXG4gICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgICAgaGFuZGxlUHJvZ3Jlc3Moe1xuICAgICAgICAgICAgICAgIHZhbHVlOiAzNSxcbiAgICAgICAgICAgICAgICBzdGFnZTogJ2NyZWF0ZWRfdGh1bWJuYWlsJyxcbiAgICAgICAgICAgICAgICBlbGFwc2VkOiBnZXRFbGFwc2VkKCksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG1hbmlmZXN0LmNyZWF0ZUxhYmVsKHN0b3JhZ2VMb2NhdGlvbnMuaW5jbHVkZXMoJ2Nsb3VkJykgPyAnYWRvYmUnIDogbnVsbCk7XG4gICAgICAgICAgICBpZiAoc3RvcmFnZUxvY2F0aW9ucy5pbmNsdWRlcygnY2xvdWQnKSkge1xuICAgICAgICAgICAgICAgIHNldHRpbmdzLnJlbW90ZU1hbmlmZXN0VXJsID0gbGFiZWxBc1VybChtYW5pZmVzdC5kZWZpbml0aW9uLmxhYmVsLCBzZXR0aW5ncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkYmckMignQ2FsbGluZyBlbWJlZEFuZFNpZ24gb24gd29ya2VyIHBvb2wnLCB7XG4gICAgICAgICAgICAgICAgYXNzZXQsXG4gICAgICAgICAgICAgICAgbWFuaWZlc3QsXG4gICAgICAgICAgICAgICAgdGh1bWJuYWlsLFxuICAgICAgICAgICAgICAgIHNldHRpbmdzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBJbiBwYXJhbGxlbCwgd2UgY2FuIGNyZWF0ZSBhIHRodW1ibmFpbCBhbmQgZ2V0IGNvbm5lY3RlZCBhY2NvdW50cyBpbmZvXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwb29sLmVtYmVkQW5kU2lnbih3YXNtLCBhc3NldCwgbWFuaWZlc3QuZGVmaW5pdGlvbiwgbWFuaWZlc3QuaW5ncmVkaWVudHMsIHRodW1ibmFpbCwgc2V0dGluZ3MpO1xuICAgICAgICAgICAgaGFuZGxlUHJvZ3Jlc3Moe1xuICAgICAgICAgICAgICAgIHZhbHVlOiA3NSxcbiAgICAgICAgICAgICAgICBzdGFnZTogJ2VtYmVkX2FuZF9zaWduJyxcbiAgICAgICAgICAgICAgICBlbGFwc2VkOiBnZXRFbGFwc2VkKCksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGhhbmRsZVJlc3VsdChyZXN1bHQpO1xuICAgICAgICAgICAgaWYgKHN0b3JhZ2VMb2NhdGlvbnMuaW5jbHVkZXMoJ2Nsb3VkJykgJiYgd2FpdEZvclVwbG9hZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAvLyBEb24ndCB3YWl0IGZvciB0aGlzIHRvIGNvbXBsZXRlLCBhbmQgcnVuIG9uIG5leHQgdGlja1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB1cGxvYWRTaWduZWRNYW5pZmVzdChyZXN1bHQuc2lnbmVkTWFuaWZlc3QsIHNldHRpbmdzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlUHJvZ3Jlc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAxMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhZ2U6ICdjb21wbGV0ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxhcHNlZDogZ2V0RWxhcHNlZCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvblVwbG9hZENvbXBsZXRlPy4oKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob25VcGxvYWRFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uVXBsb2FkRXJyb3I/LihlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc3RvcmFnZUxvY2F0aW9ucy5pbmNsdWRlcygnY2xvdWQnKSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHVwbG9hZFNpZ25lZE1hbmlmZXN0KHJlc3VsdC5zaWduZWRNYW5pZmVzdCwgc2V0dGluZ3MpO1xuICAgICAgICAgICAgICAgICAgICBvblVwbG9hZENvbXBsZXRlPy4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBvblVwbG9hZEVycm9yPy4oZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhhbmRsZVByb2dyZXNzKHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogMTAwLFxuICAgICAgICAgICAgICAgIHN0YWdlOiAnY29tcGxldGUnLFxuICAgICAgICAgICAgICAgIGVsYXBzZWQ6IGdldEVsYXBzZWQoKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQzJwYVNpZ25pbmdFcnJvcih7IGNhdXNlOiBlcnIgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBhc3luYyAoYXNzZXQsIG1hbmlmZXN0LCBzaWduQ29uZmlnKSA9PiB7XG4gICAgICAgIGNvbnN0IHRpbWVvdXQgPSBnbG9iYWxDb25maWcuc2lnblRpbWVvdXRNcztcbiAgICAgICAgY29uc3QgdGltZW91dFN1cHBvcnRlZCA9ICdBYm9ydFNpZ25hbCcgaW4gc2VsZiAmJiB0eXBlb2YgQWJvcnRTaWduYWwudGltZW91dCA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgICAgaWYgKCF0aW1lb3V0U3VwcG9ydGVkKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0Fib3J0U2lnbmFsLnRpbWVvdXQoKSBub3Qgc3VwcG9ydGVkLCBkaXNhYmxpbmcgdGltZW91dCcpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNhZmFyaSA8IDE2IGRvZXNuJ3QgaGF2ZSBzdXBwb3J0IGZvciBgQWJvcnRTaWduYWwudGltZW91dGAsIGRpc2FibGUgaWYgdGhpcyBpcyB0aGUgY2FzZVxuICAgICAgICBjb25zdCBzaWduYWwgPSB0aW1lb3V0ICYmIHRpbWVvdXRTdXBwb3J0ZWQgPyBBYm9ydFNpZ25hbC50aW1lb3V0KHRpbWVvdXQpIDogdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gc2lnbkZuKGFzc2V0LCBtYW5pZmVzdCwgc2lnbkNvbmZpZywgeyBzaWduYWwgfSk7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSW5ncmVkaWVudE1hbmFnZXIoYzJwYUNvbmZpZywgZGVwZW5kZW5jaWVzKSB7XG4gICAgLy8gVE9ETzogTW92ZSBpbnRvIHNoYXJlZCBjb25maWcgZnVuY3Rpb25cbiAgICBjb25zdCBnbG9iYWxDb25maWcgPSBtZXJnZV8xKHt9LCBkZWZhdWx0R2xvYmFsQ29uZmlnLCBjMnBhQ29uZmlnKTtcbiAgICBjb25zdCB7IHBvb2wsIHdhc20gfSA9IGRlcGVuZGVuY2llcztcbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGFrZXMgYSBgRmlsZWAgb3IgYEJsb2JgIG9mIGFuIGFzc2V0IGFuZCByZXR1cm5zIGFuIGluZ3JlZGllbnQgdGhhdCBjYW4gYmUgc3RvcmVkIG9uIHRoZSBiYWNrZW5kLlxuICAgICAgICAgKlxuICAgICAgICAgKiBJZiBhIGBGaWxlYCBpcyBzdXBwbGllZCwgaXQgd2lsbCBzdHJlYW0gdGhlIGRhdGEgdG8gYXZvaWQgbG9hZGluZyB0aGUgZW50aXJlIGZpbGUgaW50byBtZW1vcnkuXG4gICAgICAgICAqIFRoaXMgaXMgcmVjb21tZW5kZWQgZm9yIGxhcmdlIGZpbGVzLlxuICAgICAgICAgKi9cbiAgICAgICAgYXN5bmMgY3JlYXRlSW5ncmVkaWVudCh7IGlucHV0LCB0aXRsZSwgdGh1bWJuYWlsLCBpZGVudGlmaWVyLCBnZW5lcmF0ZUlkZW50aWZpZXJJZk1pc3NpbmcgPSB0cnVlLCB9KSB7XG4gICAgICAgICAgICBsZXQgaW5ncmVkaWVudDtcbiAgICAgICAgICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIEZpbGUpIHtcbiAgICAgICAgICAgICAgICBpbmdyZWRpZW50ID0gYXdhaXQgcG9vbC5jcmVhdGVJbmdyZWRpZW50RnJvbUZpbGUod2FzbSwgaW5wdXQpO1xuICAgICAgICAgICAgICAgIGlmICghaWRlbnRpZmllciAmJiAhaW5ncmVkaWVudC5oYXNoICYmICFnZW5lcmF0ZUlkZW50aWZpZXJJZk1pc3NpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEluZ3JlZGllbnRJZGVudGlmaWVyTWlzc2luZygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBVVUlEIHY0IGlmIG5vIGlkZW50aWZpZXIgaXMgcHJvdmlkZWQgdG8gYXZvaWQgaGFzaGluZyB0aGUgZW50aXJlIGZpbGVcbiAgICAgICAgICAgICAgICBpbmdyZWRpZW50Lmhhc2ggPSBpZGVudGlmaWVyID8/IGluZ3JlZGllbnQuaGFzaCA/PyBjcnlwdG8ucmFuZG9tVVVJRCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYnVmZmVyID0gYXdhaXQgaW5wdXQuYXJyYXlCdWZmZXIoKTtcbiAgICAgICAgICAgICAgICBpbmdyZWRpZW50ID0gYXdhaXQgcG9vbC5jcmVhdGVJbmdyZWRpZW50RnJvbUFycmF5QnVmZmVyKHdhc20sIGJ1ZmZlciwgaW5wdXQudHlwZSk7XG4gICAgICAgICAgICAgICAgaWYgKCFpZGVudGlmaWVyICYmICFpbmdyZWRpZW50Lmhhc2ggJiYgIWdlbmVyYXRlSWRlbnRpZmllcklmTWlzc2luZykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW5ncmVkaWVudElkZW50aWZpZXJNaXNzaW5nKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEdlbmVyYXRlIGhhc2ggaWYgbm8gaWRlbnRpZmllciBpcyBwcm92aWRlZCBhbmQgbm8gaGFzaCBpcyByZXR1cm5lZCBmcm9tIFJ1c3RcbiAgICAgICAgICAgICAgICBpbmdyZWRpZW50Lmhhc2ggPVxuICAgICAgICAgICAgICAgICAgICBpZGVudGlmaWVyID8/IGluZ3JlZGllbnQuaGFzaCA/PyAoYXdhaXQgbGFiZWxlZFNoYShpbnB1dCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU2VwYXJhdGUgcmVzb3VyY2VzIG91dCBpbnRvIHRoZWlyIG93biBvYmplY3Qgc28gdGhleSBjYW4gYmUgc3RvcmVkIG1vcmUgZWFzaWx5XG4gICAgICAgICAgICBjb25zdCByZXNvdXJjZXMgPSBtYXBWYWx1ZXNfMShpbmdyZWRpZW50LnJlc291cmNlcy5yZXNvdXJjZXMgPz8ge30sIChyZXNvdXJjZSkgPT4gVWludDhBcnJheS5mcm9tKHJlc291cmNlKS5idWZmZXIpO1xuICAgICAgICAgICAgaW5ncmVkaWVudC5yZXNvdXJjZXMgPSB7fTtcbiAgICAgICAgICAgIGluZ3JlZGllbnQudGl0bGUgPSB0aXRsZTtcbiAgICAgICAgICAgIC8vIEdlbmVyYXRlIGEgdGh1bWJuYWlsIGlmIG9uZSBkb2Vzbid0IGV4aXN0IG9uIHRoZSBpbmdyZWRpZW50J3MgbWFuaWZlc3RcbiAgICAgICAgICAgIGlmICghaW5ncmVkaWVudC50aHVtYm5haWwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpc0ltYWdlID0gaW5wdXQudHlwZS5zdGFydHNXaXRoKCdpbWFnZS8nKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0aHVtYm5haWxCbG9iID0gXG4gICAgICAgICAgICAgICAgLy8gVXNlIHRodW1ibmFpbCBpZiBwcm92aWRlZFxuICAgICAgICAgICAgICAgIHRodW1ibmFpbCB8fFxuICAgICAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2UgZ2VuZXJhdGUgb25lIGlmIGNvbmZpZ3VyZWQgdG8gZG8gc29cbiAgICAgICAgICAgICAgICAgICAgKGdsb2JhbENvbmZpZy50aHVtYm5haWwgJiYgdGh1bWJuYWlsICE9PSBmYWxzZSAmJiBpc0ltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGF3YWl0IGNyZWF0ZVRodW1ibmFpbChpbnB1dCwgcG9vbCwgZ2xvYmFsQ29uZmlnLnRodW1ibmFpbClcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbCk7XG4gICAgICAgICAgICAgICAgaWYgKHRodW1ibmFpbEJsb2IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzb3VyY2VSZWYgPSBhd2FpdCBnZXRSZXNvdXJjZVJlZmVyZW5jZSh0aHVtYm5haWxCbG9iLCBpbmdyZWRpZW50Lmluc3RhbmNlX2lkKTtcbiAgICAgICAgICAgICAgICAgICAgaW5ncmVkaWVudC50aHVtYm5haWwgPSByZXNvdXJjZVJlZjtcbiAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VzW3Jlc291cmNlUmVmLmlkZW50aWZpZXJdID0gYXdhaXQgdGh1bWJuYWlsQmxvYi5hcnJheUJ1ZmZlcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaW5ncmVkaWVudCxcbiAgICAgICAgICAgICAgICByZXNvdXJjZXMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH07XG59XG5cbnZhciB2ZXJzaW9uID0gXCIwLjE2LjJcIjtcblxudmFyIF9NYW5pZmVzdEJ1aWxkZXJfZGVmaW5pdGlvbiwgX01hbmlmZXN0QnVpbGRlcl9jb25maWcsIF9NYW5pZmVzdEJ1aWxkZXJfaW5ncmVkaWVudHM7XG5jbGFzcyBNYW5pZmVzdEJ1aWxkZXIge1xuICAgIHN0YXRpYyBnZXQgZ2VuZXJhdG9yKCkge1xuICAgICAgICByZXR1cm4gYGMycGEtYWRvYmUtanMvJHt2ZXJzaW9ufWA7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGJhc2VEZWZpbml0aW9uLCBjb25maWcpIHtcbiAgICAgICAgLy8gRklYTUU6IGZpZ3VyZSBvdXQgd2h5IHRoaXMgY2F1c2VzIGFuIHVua25vd24gZXJyb3IgaW4gamFzbWluZVxuICAgICAgICBfTWFuaWZlc3RCdWlsZGVyX2RlZmluaXRpb24uc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9NYW5pZmVzdEJ1aWxkZXJfY29uZmlnLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfTWFuaWZlc3RCdWlsZGVyX2luZ3JlZGllbnRzLnNldCh0aGlzLCB7fSk7XG4gICAgICAgIC8vIGNvbnN0IG1pc3NpbmdGaWVsZHMgPSBkaWZmZXJlbmNlKFxuICAgICAgICAvLyAgIE1hbmlmZXN0QnVpbGRlci5yZXF1aXJlZEZpZWxkcyxcbiAgICAgICAgLy8gICBPYmplY3Qua2V5cyhiYXNlRGVmaW5pdGlvbiksXG4gICAgICAgIC8vICk7XG4gICAgICAgIC8vIGlmIChtaXNzaW5nRmllbGRzLmxlbmd0aCkge1xuICAgICAgICAvLyAgIGNvbnN0IGNhdXNlID0gbmV3IEVycm9yKFxuICAgICAgICAvLyAgICAgYE1pc3NpbmcgcmVxdWlyZWQgZmllbGRzOiAke21pc3NpbmdGaWVsZHMuam9pbignLCAnKX1gLFxuICAgICAgICAvLyAgICk7XG4gICAgICAgIC8vICAgdGhyb3cgbmV3IE1hbmlmZXN0QnVpbGRlckVycm9yKHsgY2F1c2UgfSk7XG4gICAgICAgIC8vIH1cbiAgICAgICAgLy8gQXBwZW5kIEpTIGxpYnJhcnkgdG8gY2xhaW0gZ2VuZXJhdG9yXG4gICAgICAgIGNvbnN0IGNsYWltR2VuZXJhdG9yID0gYmFzZURlZmluaXRpb24uY2xhaW1fZ2VuZXJhdG9yLnNwbGl0KC9cXHMrLyk7XG4gICAgICAgIGNsYWltR2VuZXJhdG9yLnB1c2goTWFuaWZlc3RCdWlsZGVyLmdlbmVyYXRvcik7XG4gICAgICAgIGJhc2VEZWZpbml0aW9uLmNsYWltX2dlbmVyYXRvciA9IGNsYWltR2VuZXJhdG9yLmpvaW4oJyAnKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfTWFuaWZlc3RCdWlsZGVyX2NvbmZpZywgY29uZmlnLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX01hbmlmZXN0QnVpbGRlcl9kZWZpbml0aW9uLCBiYXNlRGVmaW5pdGlvbiwgXCJmXCIpO1xuICAgIH1cbiAgICBjcmVhdGVMYWJlbCh2ZW5kb3IpIHtcbiAgICAgICAgY29uc3QgdXJuID0gY3J5cHRvLnJhbmRvbVVVSUQoKTtcbiAgICAgICAgaWYgKHR5cGVvZiB2ZW5kb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9NYW5pZmVzdEJ1aWxkZXJfZGVmaW5pdGlvbiwgXCJmXCIpLmxhYmVsID0gYCR7dmVuZG9yLnRvTG93ZXJDYXNlKCl9OiR7dXJufWA7XG4gICAgICAgIH1cbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTWFuaWZlc3RCdWlsZGVyX2RlZmluaXRpb24sIFwiZlwiKS5sYWJlbCA9IHVybjtcbiAgICB9XG4gICAgYXN5bmMgYWRkSW5ncmVkaWVudChpbnB1dCkge1xuICAgICAgICBjb25zdCB7IGluZ3JlZGllbnQgfSA9IGlucHV0O1xuICAgICAgICBpZiAoIWluZ3JlZGllbnQuaGFzaCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEluZ3JlZGllbnRIYXNoTWlzc2luZ0Vycm9yKGluZ3JlZGllbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTWFuaWZlc3RCdWlsZGVyX2luZ3JlZGllbnRzLCBcImZcIikuaGFzT3duUHJvcGVydHkoaW5ncmVkaWVudC5oYXNoKSkge1xuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTWFuaWZlc3RCdWlsZGVyX2luZ3JlZGllbnRzLCBcImZcIilbaW5ncmVkaWVudC5oYXNoXSA9IGlucHV0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBkZWZpbml0aW9uKCkge1xuICAgICAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTWFuaWZlc3RCdWlsZGVyX2RlZmluaXRpb24sIFwiZlwiKTtcbiAgICB9XG4gICAgZ2V0IGluZ3JlZGllbnRzKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9NYW5pZmVzdEJ1aWxkZXJfaW5ncmVkaWVudHMsIFwiZlwiKSk7XG4gICAgfVxufVxuX01hbmlmZXN0QnVpbGRlcl9kZWZpbml0aW9uID0gbmV3IFdlYWtNYXAoKSwgX01hbmlmZXN0QnVpbGRlcl9jb25maWcgPSBuZXcgV2Vha01hcCgpLCBfTWFuaWZlc3RCdWlsZGVyX2luZ3JlZGllbnRzID0gbmV3IFdlYWtNYXAoKTtcbk1hbmlmZXN0QnVpbGRlci5yZXF1aXJlZEZpZWxkcyA9IFsnY2xhaW1fZ2VuZXJhdG9yJywgJ2Zvcm1hdCddO1xuZnVuY3Rpb24gY3JlYXRlTWFuaWZlc3RCdWlsZGVyKGMycGFDb25maWcsIGRlcGVuZGVuY2llcykge1xuICAgIC8vIFRPRE86IE1vdmUgaW50byBzaGFyZWQgY29uZmlnIGZ1bmN0aW9uXG4gICAgY29uc3QgZ2xvYmFsQ29uZmlnID0gbWVyZ2VfMSh7fSwgZGVmYXVsdEdsb2JhbENvbmZpZywgYzJwYUNvbmZpZyk7XG4gICAgcmV0dXJuIChiYXNlRGVmaW5pdGlvbikgPT4ge1xuICAgICAgICByZXR1cm4gbmV3IE1hbmlmZXN0QnVpbGRlcihiYXNlRGVmaW5pdGlvbiwge1xuICAgICAgICAgICAgZGVwZW5kZW5jaWVzLFxuICAgICAgICAgICAgZ2xvYmFsQ29uZmlnLFxuICAgICAgICB9KTtcbiAgICB9O1xufVxuXG4vKipcbiAqIENvcHlyaWdodCAyMDIyIEFkb2JlXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIE5PVElDRTogQWRvYmUgcGVybWl0cyB5b3UgdG8gdXNlLCBtb2RpZnksIGFuZCBkaXN0cmlidXRlIHRoaXMgZmlsZSBpblxuICogYWNjb3JkYW5jZSB3aXRoIHRoZSB0ZXJtcyBvZiB0aGUgQWRvYmUgbGljZW5zZSBhZ3JlZW1lbnQgYWNjb21wYW55aW5nXG4gKiBpdC5cbiAqL1xuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgZm9yIHRoZSBpbWFnZSBwcm92aWRlZCB0byB0aGUgYzJwYSBvYmplY3QuXG4gKlxuICogQHBhcmFtIGRvd25sb2FkZXIgRG93bmxvYWRlciBpbnN0YW5jZSB1c2VkIHRvIGluc3BlY3QvZG93bmxvYWQgaW1hZ2VzIGZyb20gYSBVUkxcbiAqIEBwYXJhbSBpbnB1dCBJbnB1dCBwcm92aWRlZCB0byB0aGUgYzJwYSBvYmplY3RcbiAqIEBwYXJhbSBtZXRhZGF0YSBBbnkgYWRkaXRpb25hbCBtZXRhZGF0YSBmb3IgdGhlIHJlZmVyZW5jZWQgaW1hZ2VcbiAqL1xuYXN5bmMgZnVuY3Rpb24gY3JlYXRlU291cmNlKGRvd25sb2FkZXIsIGlucHV0LCBtZXRhZGF0YSkge1xuICAgIGNvbnN0IHsgYmxvYiwgbWV0YWRhdGE6IGlucHV0TWV0YWRhdGEgfSA9IGF3YWl0IGdldERhdGFGcm9tSW5wdXQoZG93bmxvYWRlciwgaW5wdXQsIG1ldGFkYXRhID8/IHt9KTtcbiAgICBpZiAoIWJsb2IpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRodW1ibmFpbDogY3JlYXRlVGh1bWJuYWlsRnJvbVVybChpbnB1dCksXG4gICAgICAgICAgICBtZXRhZGF0YTogeyAuLi5pbnB1dE1ldGFkYXRhLCAuLi5tZXRhZGF0YSB9LFxuICAgICAgICAgICAgdHlwZTogJycsXG4gICAgICAgICAgICBibG9iOiBudWxsLFxuICAgICAgICAgICAgYXJyYXlCdWZmZXI6IGFzeW5jICgpID0+IG5ldyBBcnJheUJ1ZmZlcigwKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKCFWYWxpZGF0b3IuaXNWYWxpZE1pbWVUeXBlKGJsb2IudHlwZSkpXG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkTWltZVR5cGVFcnJvcihibG9iLnR5cGUpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHRodW1ibmFpbDogY3JlYXRlVGh1bWJuYWlsRnJvbUJsb2IoYmxvYiwgYmxvYi50eXBlKSxcbiAgICAgICAgbWV0YWRhdGE6IHsgLi4uaW5wdXRNZXRhZGF0YSwgLi4ubWV0YWRhdGEgfSxcbiAgICAgICAgdHlwZTogYmxvYi50eXBlLFxuICAgICAgICBibG9iOiBibG9iLFxuICAgICAgICBhcnJheUJ1ZmZlcjogKCkgPT4gYmxvYi5hcnJheUJ1ZmZlcigpLFxuICAgIH07XG59XG5hc3luYyBmdW5jdGlvbiBnZXREYXRhRnJvbUlucHV0KGRvd25sb2FkZXIsIGlucHV0LCBtZXRhZGF0YSkge1xuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIEJsb2IpIHtcbiAgICAgICAgLy8gSGFuZGxlIGZpbGUvYmxvYiBpbnB1dHNcbiAgICAgICAgY29uc3QgZmluYWxNZXRhZGF0YSA9IHtcbiAgICAgICAgICAgIC4uLm1ldGFkYXRhLFxuICAgICAgICAgICAgZmlsZW5hbWU6IGlucHV0IGluc3RhbmNlb2YgRmlsZSA/IGlucHV0Lm5hbWUgOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBibG9iOiBpbnB1dCxcbiAgICAgICAgICAgIG1ldGFkYXRhOiBmaW5hbE1ldGFkYXRhLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gaGFuZGxlIHN0cmluZyAvIEhUTUxJbWFnZUVsZW1lbnQgaW5wdXRzXG4gICAgICAgIGNvbnN0IHVybCA9IHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgPyBpbnB1dCA6IGlucHV0LnNyYztcbiAgICAgICAgY29uc3QgYmxvYiA9IGF3YWl0IGRvd25sb2FkZXIuaW5zcGVjdCh1cmwpO1xuICAgICAgICBsZXQgcGF0aCA9IHVybDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHsgcGF0aG5hbWUgfSA9IG5ldyBVUkwodXJsKTtcbiAgICAgICAgICAgIHBhdGggPSBwYXRobmFtZTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7IH1cbiAgICAgICAgY29uc3QgZmlsZW5hbWUgPSBwYXRoLnNwbGl0KCcvJykucG9wKCkgPz8gJyc7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBibG9iLFxuICAgICAgICAgICAgbWV0YWRhdGE6IHsgLi4ubWV0YWRhdGEsIGZpbGVuYW1lIH0sXG4gICAgICAgIH07XG4gICAgfVxufVxuXG4vKipcbiAqIENvcHlyaWdodCAyMDIyIEFkb2JlXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIE5PVElDRTogQWRvYmUgcGVybWl0cyB5b3UgdG8gdXNlLCBtb2RpZnksIGFuZCBkaXN0cmlidXRlIHRoaXMgZmlsZSBpblxuICogYWNjb3JkYW5jZSB3aXRoIHRoZSB0ZXJtcyBvZiB0aGUgQWRvYmUgbGljZW5zZSBhZ3JlZW1lbnQgYWNjb21wYW55aW5nXG4gKiBpdC5cbiAqL1xuY29uc3QgZGJnJDEgPSBkZWJ1ZygnYzJwYScpO1xuY29uc3QgZGJnVGFzayA9IGRlYnVnKCdjMnBhOnRhc2snKTtcbi8qKlxuICogQ3JlYXRlcyBhIGMycGEgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVhZCBjMnBhIG1ldGFkYXRhIGZyb20gYW4gaW1hZ2UuXG4gKlxuICogQHBhcmFtIGNvbmZpZyAtIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIGNyZWF0ZWQgYzJwYSBvYmplY3RcbiAqL1xuYXN5bmMgZnVuY3Rpb24gY3JlYXRlQzJwYShjb25maWcpIHtcbiAgICBsZXQgam9iQ291bnRlciA9IDA7XG4gICAgZGJnJDEoJ0NyZWF0aW5nIGMycGEgd2l0aCBjb25maWcnLCBjb25maWcpO1xuICAgIGVuc3VyZUNvbXBhdGliaWxpdHkoKTtcbiAgICBjb25zdCBwb29sID0gYXdhaXQgY3JlYXRlUG9vbFdyYXBwZXIoe1xuICAgICAgICBzY3JpcHRTcmM6IGNvbmZpZy53b3JrZXJTcmMsXG4gICAgICAgIGZhbGxiYWNrU2NyaXB0U3JjOiBjb25maWcuZmFsbGJhY2tXb3JrZXJTcmMsXG4gICAgICAgIG1heFdvcmtlcnM6IG5hdmlnYXRvci5oYXJkd2FyZUNvbmN1cnJlbmN5IHx8IDQsXG4gICAgfSk7XG4gICAgY29uc3QgZG93bmxvYWRlciA9IG5ldyBEb3dubG9hZGVyKHBvb2wsIGNvbmZpZy5kb3dubG9hZGVyT3B0aW9ucyk7XG4gICAgY29uc3Qgd2FzbSA9IGNvbmZpZy53YXNtU3JjIGluc3RhbmNlb2YgV2ViQXNzZW1ibHkuTW9kdWxlXG4gICAgICAgID8gY29uZmlnLndhc21TcmNcbiAgICAgICAgOiBhd2FpdCBmZXRjaFdhc20ocG9vbCwgY29uZmlnLndhc21TcmMpO1xuICAgIGNvbnN0IHJlYWQgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICAgICAgY29uc3Qgam9iSWQgPSArK2pvYkNvdW50ZXI7XG4gICAgICAgIGRiZ1Rhc2soJ1slc10gUmVhZGluZyBmcm9tIGlucHV0Jywgam9iSWQsIGlucHV0KTtcbiAgICAgICAgY29uc3Qgc291cmNlID0gYXdhaXQgY3JlYXRlU291cmNlKGRvd25sb2FkZXIsIGlucHV0KTtcbiAgICAgICAgZGJnVGFzaygnWyVzXSBQcm9jZXNzaW5nIGlucHV0Jywgam9iSWQsIGlucHV0KTtcbiAgICAgICAgaWYgKCFzb3VyY2UuYmxvYikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtYW5pZmVzdFN0b3JlOiBudWxsLFxuICAgICAgICAgICAgICAgIHNvdXJjZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYnVmZmVyID0gYXdhaXQgc291cmNlLmFycmF5QnVmZmVyKCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwb29sLmdldFJlcG9ydCh3YXNtLCBidWZmZXIsIHNvdXJjZS50eXBlKTtcbiAgICAgICAgICAgIGRiZ1Rhc2soJ1slc10gUmVjZWl2ZWQgd29ya2VyIHJlc3VsdCcsIGpvYklkLCByZXN1bHQpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtYW5pZmVzdFN0b3JlOiBjcmVhdGVNYW5pZmVzdFN0b3JlKHJlc3VsdCksXG4gICAgICAgICAgICAgICAgc291cmNlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjb25zdCBtYW5pZmVzdFN0b3JlID0gYXdhaXQgaGFuZGxlRXJyb3JzKHNvdXJjZSwgZXJyLCBwb29sLCB3YXNtLCBjb25maWcuZmV0Y2hSZW1vdGVNYW5pZmVzdHMpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtYW5pZmVzdFN0b3JlLFxuICAgICAgICAgICAgICAgIHNvdXJjZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHJlYWRBbGwgPSBhc3luYyAoaW5wdXRzKSA9PiBQcm9taXNlLmFsbChpbnB1dHMubWFwKChpbnB1dCkgPT4gcmVhZChpbnB1dCkpKTtcbiAgICBjb25zdCByZWFkQW5kVmFsaWRhdGVNYW5pZmVzdERhdGEgPSBhc3luYyAobWFuaWZlc3RCdWZmZXIsIGlucHV0KSA9PiB7XG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IGF3YWl0IGNyZWF0ZVNvdXJjZShkb3dubG9hZGVyLCBpbnB1dCk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IGF3YWl0IHNvdXJjZS5hcnJheUJ1ZmZlcigpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcG9vbC5nZXRSZXBvcnRGcm9tQXNzZXRBbmRNYW5pZmVzdEJ1ZmZlcih3YXNtLCBtYW5pZmVzdEJ1ZmZlciwgYnVmZmVyLCBzb3VyY2UudHlwZSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1hbmlmZXN0U3RvcmU6IGNyZWF0ZU1hbmlmZXN0U3RvcmUocmVzdWx0KSxcbiAgICAgICAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnN0IG1hbmlmZXN0U3RvcmUgPSBhd2FpdCBoYW5kbGVFcnJvcnMoc291cmNlLCBlcnIsIHBvb2wsIHdhc20sIGNvbmZpZy5mZXRjaFJlbW90ZU1hbmlmZXN0cyk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1hbmlmZXN0U3RvcmUsXG4gICAgICAgICAgICAgICAgc291cmNlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc2NhbiA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgICAgICBjb25zdCBzb3VyY2UgPSBhd2FpdCBjcmVhdGVTb3VyY2UoZG93bmxvYWRlciwgaW5wdXQpO1xuICAgICAgICBjb25zdCBidWZmZXIgPSBhd2FpdCBzb3VyY2UuYXJyYXlCdWZmZXIoKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBwb29sLnNjYW5JbnB1dChidWZmZXIpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBDMnBhU2Nhbm5pbmdFcnJvcih7IGNhdXNlOiBlcnIgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHNjYW5VcmwgPSBhc3luYyAodXJsKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgcG9vbC5zY2FuSW5wdXRVcmwodXJsKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQzJwYVNjYW5uaW5nRXJyb3IoeyBjYXVzZTogZXJyIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBzaWduID0gY3JlYXRlU2lnbihjb25maWcsIHsgcG9vbCwgd2FzbSB9KTtcbiAgICBjb25zdCBjcmVhdGVNYW5pZmVzdCA9IGNyZWF0ZU1hbmlmZXN0QnVpbGRlcihjb25maWcsIHtcbiAgICAgICAgcG9vbCxcbiAgICAgICAgd2FzbSxcbiAgICB9KTtcbiAgICBjb25zdCBpbmdyZWRpZW50TWFuYWdlciA9IGNyZWF0ZUluZ3JlZGllbnRNYW5hZ2VyKGNvbmZpZywge1xuICAgICAgICBwb29sLFxuICAgICAgICB3YXNtLFxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIF9wb29sOiBwb29sLFxuICAgICAgICByZWFkLFxuICAgICAgICByZWFkQWxsLFxuICAgICAgICByZWFkQW5kVmFsaWRhdGVNYW5pZmVzdERhdGEsXG4gICAgICAgIHNjYW4sXG4gICAgICAgIHNjYW5VcmwsXG4gICAgICAgIHNpZ24sXG4gICAgICAgIGNyZWF0ZU1hbmlmZXN0LFxuICAgICAgICBjcmVhdGVJbmdyZWRpZW50OiBpbmdyZWRpZW50TWFuYWdlci5jcmVhdGVJbmdyZWRpZW50LFxuICAgICAgICBkaXNwb3NlOiAoKSA9PiBwb29sLmRpc3Bvc2UoKSxcbiAgICB9O1xufVxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBVUkwgdGhhdCBwcmUtbG9hZHMgdGhlIGBhc3NldFVybGAgaW50byB0aGUgQ29udGVudCBBdXRoZW50aWNpdHkgVmVyaWZ5IHNpdGVcbiAqIGZvciBkZWVwZXIgaW5zcGVjdGlvbiBieSB1c2Vycy5cbiAqXG4gKiBAcGFyYW0gYXNzZXRVcmwgLSBUaGUgVVJMIG9mIHRoZSBhc3NldCB5b3Ugd2FudCB0byB2aWV3IGluIFZlcmlmeVxuICovXG5mdW5jdGlvbiBnZW5lcmF0ZVZlcmlmeVVybChhc3NldFVybCkge1xuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwoJ2h0dHBzOi8vdmVyaWZ5LmNvbnRlbnRhdXRoZW50aWNpdHkub3JnL2luc3BlY3QnKTtcbiAgICB1cmwuc2VhcmNoUGFyYW1zLnNldCgnc291cmNlJywgYXNzZXRVcmwpO1xuICAgIHJldHVybiB1cmwudG9TdHJpbmcoKTtcbn1cbi8qKlxuICogSGFuZGxlcyBlcnJvcnMgZnJvbSB0aGUgdG9vbGtpdCBhbmQgZmV0Y2hlcy9wcm9jZXNzZXMgcmVtb3RlIG1hbmlmZXN0cywgaWYgYXBwbGljYWJsZS5cbiAqXG4gKiBAcGFyYW0gc291cmNlIC0gU291cmNlIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIGFzc2V0XG4gKiBAcGFyYW0gZXJyb3IgLSBFcnJvciBmcm9tIHRvb2xraXRcbiAqIEBwYXJhbSBwb29sIC0gV29ya2VyIHBvb2wgdG8gdXNlIHdoZW4gcHJvY2Vzc2luZyByZW1vdGUgbWFuaWZlc3RzICh0cmlnZ2VyZWQgYnkgVG9vbGtpdChSZW1vdGVNYW5pZmVzdFVybCkgZXJyb3IpXG4gKiBAcGFyYW0gd2FzbSAtIFdBU00gbW9kdWxlIHRvIHVzZSB3aGVuIHByb2Nlc3NpbmcgcmVtb3RlIG1hbmlmZXN0c1xuICogQHBhcmFtIGZldGNoUmVtb3RlIC0gQ29udHJvbHMgcmVtb3RlLWZldGNoaW5nIGJlaGF2aW9yXG4gKiBAcmV0dXJucyBBIG1hbmlmZXN0U3RvcmUsIGlmIGFwcGxpY2FibGUsIG51bGwgb3RoZXJ3aXNlIG9yIGEgcmUtdGhyb3duIGVycm9yLlxuICovXG5mdW5jdGlvbiBoYW5kbGVFcnJvcnMoc291cmNlLCBlcnJvciwgcG9vbCwgd2FzbSwgZmV0Y2hSZW1vdGUgPSB0cnVlKSB7XG4gICAgc3dpdGNoIChlcnJvci5uYW1lKSB7XG4gICAgICAgIGNhc2UgJ1Rvb2xraXQoUmVtb3RlTWFuaWZlc3RVcmwpJzpcbiAgICAgICAgICAgIGlmIChmZXRjaFJlbW90ZSAmJiBlcnJvci51cmwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmV0Y2hSZW1vdGVNYW5pZmVzdChzb3VyY2UsIGVycm9yLnVybCwgcG9vbCwgd2FzbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnQzJwYShQcm92ZW5hbmNlTWlzc2luZyknOlxuICAgICAgICBjYXNlICdDMnBhKEp1bWJmTm90Rm91bmQpJzpcbiAgICAgICAgICAgIGRiZyQxKCdObyBwcm92ZW5hbmNlIGRhdGEgZm91bmQnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hSZW1vdGVNYW5pZmVzdChzb3VyY2UsIG1hbmlmZXN0VXJsLCBwb29sLCB3YXNtKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTChtYW5pZmVzdFVybCk7XG4gICAgICAgIGRiZyQxKCdGZXRjaGluZyByZW1vdGUgbWFuaWZlc3QgZnJvbScsIHVybCk7XG4gICAgICAgIGNvbnN0IG1hbmlmZXN0Qnl0ZXMgPSBhd2FpdCBmZXRjaCh1cmwudG9TdHJpbmcoKSk7XG4gICAgICAgIGNvbnN0IG1hbmlmZXN0QmxvYiA9IGF3YWl0IG1hbmlmZXN0Qnl0ZXMuYmxvYigpO1xuICAgICAgICBjb25zdCBtYW5pZmVzdEJ1ZmZlciA9IGF3YWl0IG1hbmlmZXN0QmxvYi5hcnJheUJ1ZmZlcigpO1xuICAgICAgICBjb25zdCBzb3VyY2VCdWZmZXIgPSBhd2FpdCBzb3VyY2UuYXJyYXlCdWZmZXIoKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcG9vbC5nZXRSZXBvcnRGcm9tQXNzZXRBbmRNYW5pZmVzdEJ1ZmZlcih3YXNtLCBtYW5pZmVzdEJ1ZmZlciwgc291cmNlQnVmZmVyLCBzb3VyY2UudHlwZSk7XG4gICAgICAgIHJldHVybiBjcmVhdGVNYW5pZmVzdFN0b3JlKHJlc3VsdCk7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIFR5cGVFcnJvcikge1xuICAgICAgICAgICAgZGJnJDEoJ0ludmFsaWQgVVJMIGdpdmVuLCBza2lwcGluZyByZW1vdGUgbWFuaWZlc3QgbG9hZGluZycsIG1hbmlmZXN0VXJsKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGRiZyQxKCdFcnJvciBsb2FkaW5nIHJlbW90ZSBtYW5pZmVzdCBmcm9tJywgbWFuaWZlc3RVcmwsIGVycik7XG4gICAgICAgIHRocm93IGVycjtcbiAgICB9XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMjIgQWRvYmVcbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTk9USUNFOiBBZG9iZSBwZXJtaXRzIHlvdSB0byB1c2UsIG1vZGlmeSwgYW5kIGRpc3RyaWJ1dGUgdGhpcyBmaWxlIGluXG4gKiBhY2NvcmRhbmNlIHdpdGggdGhlIHRlcm1zIG9mIHRoZSBBZG9iZSBsaWNlbnNlIGFncmVlbWVudCBhY2NvbXBhbnlpbmdcbiAqIGl0LlxuICovXG5jb25zdCBPVEdQX0VSUk9SX0NPREUgPSAnYXNzZXJ0aW9uLmRhdGFIYXNoLm1pc21hdGNoJztcbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBhIHZhbGlkYXRpb24gc3RhdHVzIGxpc3QgY29udGFpbnMgYW4gT1RHUCAoYGFzc2VydGlvbi5kYXRhSGFzaC5taXNtYXRjaGApXG4gKiBzdGF0dXNcbiAqXG4gKiBAcGFyYW0gdmFsaWRhdGlvblN0YXR1c1xuICogQHJldHVybnMgYHRydWVgIGlmIHdlIGZpbmQgYW4gT1RHUCBzdGF0dXNcbiAqL1xuZnVuY3Rpb24gaGFzT3RncFN0YXR1cyh2YWxpZGF0aW9uU3RhdHVzID0gW10pIHtcbiAgICByZXR1cm4gdmFsaWRhdGlvblN0YXR1cy5zb21lKChlcnIpID0+IGVyci5jb2RlID09PSBPVEdQX0VSUk9SX0NPREUpO1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgdmFsaWRhdGlvbiBzdGF0dXMgbGlzdCBjb250YWlucyBhbiBlcnJvciAoYW55dGhpbmcgbm90IGluIHRoZSBjMnBhLXJzXG4gKiBgQzJQQV9TVEFUVVNfVkFMSURfU0VUYCBsaXN0IF9hbmRfIG5vdCBhbiBPVEdQIHN0YXR1cylcbiAqXG4gKiBAcGFyYW0gdmFsaWRhdGlvblN0YXR1c1xuICogQHJldHVybnMgYHRydWVgIGlmIHdlIGZpbmQgYW4gZXJyb3JcbiAqL1xuZnVuY3Rpb24gaGFzRXJyb3JTdGF0dXModmFsaWRhdGlvblN0YXR1cyA9IFtdKSB7XG4gICAgcmV0dXJuIHZhbGlkYXRpb25TdGF0dXMubGVuZ3RoID4gMCAmJiAhaGFzT3RncFN0YXR1cyh2YWxpZGF0aW9uU3RhdHVzKTtcbn1cblxudmFyIGVhY2gkMSA9IHtleHBvcnRzOiB7fX07XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5cbmZ1bmN0aW9uIGFycmF5RWFjaCQzKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbnZhciBfYXJyYXlFYWNoID0gYXJyYXlFYWNoJDM7XG5cbnZhciBpc0FycmF5TGlrZSA9IGlzQXJyYXlMaWtlXzE7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGBiYXNlRWFjaGAgb3IgYGJhc2VFYWNoUmlnaHRgIGZ1bmN0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGEgY29sbGVjdGlvbi5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQmFzZUVhY2gkMShlYWNoRnVuYywgZnJvbVJpZ2h0KSB7XG4gIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgIH1cbiAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICByZXR1cm4gZWFjaEZ1bmMoY29sbGVjdGlvbiwgaXRlcmF0ZWUpO1xuICAgIH1cbiAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGgsXG4gICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTEsXG4gICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuXG4gICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtpbmRleF0sIGluZGV4LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgfTtcbn1cblxudmFyIF9jcmVhdGVCYXNlRWFjaCA9IGNyZWF0ZUJhc2VFYWNoJDE7XG5cbnZhciBiYXNlRm9yT3duJDEgPSBfYmFzZUZvck93bixcbiAgICBjcmVhdGVCYXNlRWFjaCA9IF9jcmVhdGVCYXNlRWFjaDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAqL1xudmFyIGJhc2VFYWNoJDEgPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duJDEpO1xuXG52YXIgX2Jhc2VFYWNoID0gYmFzZUVhY2gkMTtcblxudmFyIGlkZW50aXR5JDEgPSBpZGVudGl0eV8xO1xuXG4vKipcbiAqIENhc3RzIGB2YWx1ZWAgdG8gYGlkZW50aXR5YCBpZiBpdCdzIG5vdCBhIGZ1bmN0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGNhc3QgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNhc3RGdW5jdGlvbiQxKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlIDogaWRlbnRpdHkkMTtcbn1cblxudmFyIF9jYXN0RnVuY3Rpb24gPSBjYXN0RnVuY3Rpb24kMTtcblxudmFyIGFycmF5RWFjaCQyID0gX2FycmF5RWFjaCxcbiAgICBiYXNlRWFjaCA9IF9iYXNlRWFjaCxcbiAgICBjYXN0RnVuY3Rpb24gPSBfY2FzdEZ1bmN0aW9uLFxuICAgIGlzQXJyYXkkMiA9IGlzQXJyYXlfMTtcblxuLyoqXG4gKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIGVsZW1lbnQuXG4gKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICpcbiAqICoqTm90ZToqKiBBcyB3aXRoIG90aGVyIFwiQ29sbGVjdGlvbnNcIiBtZXRob2RzLCBvYmplY3RzIHdpdGggYSBcImxlbmd0aFwiXG4gKiBwcm9wZXJ0eSBhcmUgaXRlcmF0ZWQgbGlrZSBhcnJheXMuIFRvIGF2b2lkIHRoaXMgYmVoYXZpb3IgdXNlIGBfLmZvckluYFxuICogb3IgYF8uZm9yT3duYCBmb3Igb2JqZWN0IGl0ZXJhdGlvbi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAYWxpYXMgZWFjaFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gKiBAc2VlIF8uZm9yRWFjaFJpZ2h0XG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZm9yRWFjaChbMSwgMl0sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAqIH0pO1xuICogLy8gPT4gTG9ncyBgMWAgdGhlbiBgMmAuXG4gKlxuICogXy5mb3JFYWNoKHsgJ2EnOiAxLCAnYic6IDIgfSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICogICBjb25zb2xlLmxvZyhrZXkpO1xuICogfSk7XG4gKiAvLyA9PiBMb2dzICdhJyB0aGVuICdiJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICB2YXIgZnVuYyA9IGlzQXJyYXkkMihjb2xsZWN0aW9uKSA/IGFycmF5RWFjaCQyIDogYmFzZUVhY2g7XG4gIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGNhc3RGdW5jdGlvbihpdGVyYXRlZSkpO1xufVxuXG52YXIgZm9yRWFjaF8xID0gZm9yRWFjaDtcblxuKGZ1bmN0aW9uIChtb2R1bGUpIHtcblx0bW9kdWxlLmV4cG9ydHMgPSBmb3JFYWNoXzE7XG59IChlYWNoJDEpKTtcblxudmFyIGVhY2ggPSAvKkBfX1BVUkVfXyovZ2V0RGVmYXVsdEV4cG9ydEZyb21DanMoZWFjaCQxLmV4cG9ydHMpO1xuXG52YXIgX21hcHBpbmcgPSB7fTtcblxuLyoqIFVzZWQgdG8gbWFwIGFsaWFzZXMgdG8gdGhlaXIgcmVhbCBuYW1lcy4gKi9cblxuKGZ1bmN0aW9uIChleHBvcnRzKSB7XG5cdGV4cG9ydHMuYWxpYXNUb1JlYWwgPSB7XG5cblx0ICAvLyBMb2Rhc2ggYWxpYXNlcy5cblx0ICAnZWFjaCc6ICdmb3JFYWNoJyxcblx0ICAnZWFjaFJpZ2h0JzogJ2ZvckVhY2hSaWdodCcsXG5cdCAgJ2VudHJpZXMnOiAndG9QYWlycycsXG5cdCAgJ2VudHJpZXNJbic6ICd0b1BhaXJzSW4nLFxuXHQgICdleHRlbmQnOiAnYXNzaWduSW4nLFxuXHQgICdleHRlbmRBbGwnOiAnYXNzaWduSW5BbGwnLFxuXHQgICdleHRlbmRBbGxXaXRoJzogJ2Fzc2lnbkluQWxsV2l0aCcsXG5cdCAgJ2V4dGVuZFdpdGgnOiAnYXNzaWduSW5XaXRoJyxcblx0ICAnZmlyc3QnOiAnaGVhZCcsXG5cblx0ICAvLyBNZXRob2RzIHRoYXQgYXJlIGN1cnJpZWQgdmFyaWFudHMgb2Ygb3RoZXJzLlxuXHQgICdjb25mb3Jtcyc6ICdjb25mb3Jtc1RvJyxcblx0ICAnbWF0Y2hlcyc6ICdpc01hdGNoJyxcblx0ICAncHJvcGVydHknOiAnZ2V0JyxcblxuXHQgIC8vIFJhbWRhIGFsaWFzZXMuXG5cdCAgJ19fJzogJ3BsYWNlaG9sZGVyJyxcblx0ICAnRic6ICdzdHViRmFsc2UnLFxuXHQgICdUJzogJ3N0dWJUcnVlJyxcblx0ICAnYWxsJzogJ2V2ZXJ5Jyxcblx0ICAnYWxsUGFzcyc6ICdvdmVyRXZlcnknLFxuXHQgICdhbHdheXMnOiAnY29uc3RhbnQnLFxuXHQgICdhbnknOiAnc29tZScsXG5cdCAgJ2FueVBhc3MnOiAnb3ZlclNvbWUnLFxuXHQgICdhcHBseSc6ICdzcHJlYWQnLFxuXHQgICdhc3NvYyc6ICdzZXQnLFxuXHQgICdhc3NvY1BhdGgnOiAnc2V0Jyxcblx0ICAnY29tcGxlbWVudCc6ICduZWdhdGUnLFxuXHQgICdjb21wb3NlJzogJ2Zsb3dSaWdodCcsXG5cdCAgJ2NvbnRhaW5zJzogJ2luY2x1ZGVzJyxcblx0ICAnZGlzc29jJzogJ3Vuc2V0Jyxcblx0ICAnZGlzc29jUGF0aCc6ICd1bnNldCcsXG5cdCAgJ2Ryb3BMYXN0JzogJ2Ryb3BSaWdodCcsXG5cdCAgJ2Ryb3BMYXN0V2hpbGUnOiAnZHJvcFJpZ2h0V2hpbGUnLFxuXHQgICdlcXVhbHMnOiAnaXNFcXVhbCcsXG5cdCAgJ2lkZW50aWNhbCc6ICdlcScsXG5cdCAgJ2luZGV4QnknOiAna2V5QnknLFxuXHQgICdpbml0JzogJ2luaXRpYWwnLFxuXHQgICdpbnZlcnRPYmonOiAnaW52ZXJ0Jyxcblx0ICAnanV4dCc6ICdvdmVyJyxcblx0ICAnb21pdEFsbCc6ICdvbWl0Jyxcblx0ICAnbkFyeSc6ICdhcnknLFxuXHQgICdwYXRoJzogJ2dldCcsXG5cdCAgJ3BhdGhFcSc6ICdtYXRjaGVzUHJvcGVydHknLFxuXHQgICdwYXRoT3InOiAnZ2V0T3InLFxuXHQgICdwYXRocyc6ICdhdCcsXG5cdCAgJ3BpY2tBbGwnOiAncGljaycsXG5cdCAgJ3BpcGUnOiAnZmxvdycsXG5cdCAgJ3BsdWNrJzogJ21hcCcsXG5cdCAgJ3Byb3AnOiAnZ2V0Jyxcblx0ICAncHJvcEVxJzogJ21hdGNoZXNQcm9wZXJ0eScsXG5cdCAgJ3Byb3BPcic6ICdnZXRPcicsXG5cdCAgJ3Byb3BzJzogJ2F0Jyxcblx0ICAnc3ltbWV0cmljRGlmZmVyZW5jZSc6ICd4b3InLFxuXHQgICdzeW1tZXRyaWNEaWZmZXJlbmNlQnknOiAneG9yQnknLFxuXHQgICdzeW1tZXRyaWNEaWZmZXJlbmNlV2l0aCc6ICd4b3JXaXRoJyxcblx0ICAndGFrZUxhc3QnOiAndGFrZVJpZ2h0Jyxcblx0ICAndGFrZUxhc3RXaGlsZSc6ICd0YWtlUmlnaHRXaGlsZScsXG5cdCAgJ3VuYXBwbHknOiAncmVzdCcsXG5cdCAgJ3VubmVzdCc6ICdmbGF0dGVuJyxcblx0ICAndXNlV2l0aCc6ICdvdmVyQXJncycsXG5cdCAgJ3doZXJlJzogJ2NvbmZvcm1zVG8nLFxuXHQgICd3aGVyZUVxJzogJ2lzTWF0Y2gnLFxuXHQgICd6aXBPYmonOiAnemlwT2JqZWN0J1xuXHR9O1xuXG5cdC8qKiBVc2VkIHRvIG1hcCBhcnkgdG8gbWV0aG9kIG5hbWVzLiAqL1xuXHRleHBvcnRzLmFyeU1ldGhvZCA9IHtcblx0ICAnMSc6IFtcblx0ICAgICdhc3NpZ25BbGwnLCAnYXNzaWduSW5BbGwnLCAnYXR0ZW1wdCcsICdjYXN0QXJyYXknLCAnY2VpbCcsICdjcmVhdGUnLFxuXHQgICAgJ2N1cnJ5JywgJ2N1cnJ5UmlnaHQnLCAnZGVmYXVsdHNBbGwnLCAnZGVmYXVsdHNEZWVwQWxsJywgJ2Zsb29yJywgJ2Zsb3cnLFxuXHQgICAgJ2Zsb3dSaWdodCcsICdmcm9tUGFpcnMnLCAnaW52ZXJ0JywgJ2l0ZXJhdGVlJywgJ21lbW9pemUnLCAnbWV0aG9kJywgJ21lcmdlQWxsJyxcblx0ICAgICdtZXRob2RPZicsICdtaXhpbicsICdudGhBcmcnLCAnb3ZlcicsICdvdmVyRXZlcnknLCAnb3ZlclNvbWUnLCdyZXN0JywgJ3JldmVyc2UnLFxuXHQgICAgJ3JvdW5kJywgJ3J1bkluQ29udGV4dCcsICdzcHJlYWQnLCAndGVtcGxhdGUnLCAndHJpbScsICd0cmltRW5kJywgJ3RyaW1TdGFydCcsXG5cdCAgICAndW5pcXVlSWQnLCAnd29yZHMnLCAnemlwQWxsJ1xuXHQgIF0sXG5cdCAgJzInOiBbXG5cdCAgICAnYWRkJywgJ2FmdGVyJywgJ2FyeScsICdhc3NpZ24nLCAnYXNzaWduQWxsV2l0aCcsICdhc3NpZ25JbicsICdhc3NpZ25JbkFsbFdpdGgnLFxuXHQgICAgJ2F0JywgJ2JlZm9yZScsICdiaW5kJywgJ2JpbmRBbGwnLCAnYmluZEtleScsICdjaHVuaycsICdjbG9uZURlZXBXaXRoJyxcblx0ICAgICdjbG9uZVdpdGgnLCAnY29uY2F0JywgJ2NvbmZvcm1zVG8nLCAnY291bnRCeScsICdjdXJyeU4nLCAnY3VycnlSaWdodE4nLFxuXHQgICAgJ2RlYm91bmNlJywgJ2RlZmF1bHRzJywgJ2RlZmF1bHRzRGVlcCcsICdkZWZhdWx0VG8nLCAnZGVsYXknLCAnZGlmZmVyZW5jZScsXG5cdCAgICAnZGl2aWRlJywgJ2Ryb3AnLCAnZHJvcFJpZ2h0JywgJ2Ryb3BSaWdodFdoaWxlJywgJ2Ryb3BXaGlsZScsICdlbmRzV2l0aCcsICdlcScsXG5cdCAgICAnZXZlcnknLCAnZmlsdGVyJywgJ2ZpbmQnLCAnZmluZEluZGV4JywgJ2ZpbmRLZXknLCAnZmluZExhc3QnLCAnZmluZExhc3RJbmRleCcsXG5cdCAgICAnZmluZExhc3RLZXknLCAnZmxhdE1hcCcsICdmbGF0TWFwRGVlcCcsICdmbGF0dGVuRGVwdGgnLCAnZm9yRWFjaCcsXG5cdCAgICAnZm9yRWFjaFJpZ2h0JywgJ2ZvckluJywgJ2ZvckluUmlnaHQnLCAnZm9yT3duJywgJ2Zvck93blJpZ2h0JywgJ2dldCcsXG5cdCAgICAnZ3JvdXBCeScsICdndCcsICdndGUnLCAnaGFzJywgJ2hhc0luJywgJ2luY2x1ZGVzJywgJ2luZGV4T2YnLCAnaW50ZXJzZWN0aW9uJyxcblx0ICAgICdpbnZlcnRCeScsICdpbnZva2UnLCAnaW52b2tlTWFwJywgJ2lzRXF1YWwnLCAnaXNNYXRjaCcsICdqb2luJywgJ2tleUJ5Jyxcblx0ICAgICdsYXN0SW5kZXhPZicsICdsdCcsICdsdGUnLCAnbWFwJywgJ21hcEtleXMnLCAnbWFwVmFsdWVzJywgJ21hdGNoZXNQcm9wZXJ0eScsXG5cdCAgICAnbWF4QnknLCAnbWVhbkJ5JywgJ21lcmdlJywgJ21lcmdlQWxsV2l0aCcsICdtaW5CeScsICdtdWx0aXBseScsICdudGgnLCAnb21pdCcsXG5cdCAgICAnb21pdEJ5JywgJ292ZXJBcmdzJywgJ3BhZCcsICdwYWRFbmQnLCAncGFkU3RhcnQnLCAncGFyc2VJbnQnLCAncGFydGlhbCcsXG5cdCAgICAncGFydGlhbFJpZ2h0JywgJ3BhcnRpdGlvbicsICdwaWNrJywgJ3BpY2tCeScsICdwcm9wZXJ0eU9mJywgJ3B1bGwnLCAncHVsbEFsbCcsXG5cdCAgICAncHVsbEF0JywgJ3JhbmRvbScsICdyYW5nZScsICdyYW5nZVJpZ2h0JywgJ3JlYXJnJywgJ3JlamVjdCcsICdyZW1vdmUnLFxuXHQgICAgJ3JlcGVhdCcsICdyZXN0RnJvbScsICdyZXN1bHQnLCAnc2FtcGxlU2l6ZScsICdzb21lJywgJ3NvcnRCeScsICdzb3J0ZWRJbmRleCcsXG5cdCAgICAnc29ydGVkSW5kZXhPZicsICdzb3J0ZWRMYXN0SW5kZXgnLCAnc29ydGVkTGFzdEluZGV4T2YnLCAnc29ydGVkVW5pcUJ5Jyxcblx0ICAgICdzcGxpdCcsICdzcHJlYWRGcm9tJywgJ3N0YXJ0c1dpdGgnLCAnc3VidHJhY3QnLCAnc3VtQnknLCAndGFrZScsICd0YWtlUmlnaHQnLFxuXHQgICAgJ3Rha2VSaWdodFdoaWxlJywgJ3Rha2VXaGlsZScsICd0YXAnLCAndGhyb3R0bGUnLCAndGhydScsICd0aW1lcycsICd0cmltQ2hhcnMnLFxuXHQgICAgJ3RyaW1DaGFyc0VuZCcsICd0cmltQ2hhcnNTdGFydCcsICd0cnVuY2F0ZScsICd1bmlvbicsICd1bmlxQnknLCAndW5pcVdpdGgnLFxuXHQgICAgJ3Vuc2V0JywgJ3VuemlwV2l0aCcsICd3aXRob3V0JywgJ3dyYXAnLCAneG9yJywgJ3ppcCcsICd6aXBPYmplY3QnLFxuXHQgICAgJ3ppcE9iamVjdERlZXAnXG5cdCAgXSxcblx0ICAnMyc6IFtcblx0ICAgICdhc3NpZ25JbldpdGgnLCAnYXNzaWduV2l0aCcsICdjbGFtcCcsICdkaWZmZXJlbmNlQnknLCAnZGlmZmVyZW5jZVdpdGgnLFxuXHQgICAgJ2ZpbmRGcm9tJywgJ2ZpbmRJbmRleEZyb20nLCAnZmluZExhc3RGcm9tJywgJ2ZpbmRMYXN0SW5kZXhGcm9tJywgJ2dldE9yJyxcblx0ICAgICdpbmNsdWRlc0Zyb20nLCAnaW5kZXhPZkZyb20nLCAnaW5SYW5nZScsICdpbnRlcnNlY3Rpb25CeScsICdpbnRlcnNlY3Rpb25XaXRoJyxcblx0ICAgICdpbnZva2VBcmdzJywgJ2ludm9rZUFyZ3NNYXAnLCAnaXNFcXVhbFdpdGgnLCAnaXNNYXRjaFdpdGgnLCAnZmxhdE1hcERlcHRoJyxcblx0ICAgICdsYXN0SW5kZXhPZkZyb20nLCAnbWVyZ2VXaXRoJywgJ29yZGVyQnknLCAncGFkQ2hhcnMnLCAncGFkQ2hhcnNFbmQnLFxuXHQgICAgJ3BhZENoYXJzU3RhcnQnLCAncHVsbEFsbEJ5JywgJ3B1bGxBbGxXaXRoJywgJ3JhbmdlU3RlcCcsICdyYW5nZVN0ZXBSaWdodCcsXG5cdCAgICAncmVkdWNlJywgJ3JlZHVjZVJpZ2h0JywgJ3JlcGxhY2UnLCAnc2V0JywgJ3NsaWNlJywgJ3NvcnRlZEluZGV4QnknLFxuXHQgICAgJ3NvcnRlZExhc3RJbmRleEJ5JywgJ3RyYW5zZm9ybScsICd1bmlvbkJ5JywgJ3VuaW9uV2l0aCcsICd1cGRhdGUnLCAneG9yQnknLFxuXHQgICAgJ3hvcldpdGgnLCAnemlwV2l0aCdcblx0ICBdLFxuXHQgICc0JzogW1xuXHQgICAgJ2ZpbGwnLCAnc2V0V2l0aCcsICd1cGRhdGVXaXRoJ1xuXHQgIF1cblx0fTtcblxuXHQvKiogVXNlZCB0byBtYXAgYXJ5IHRvIHJlYXJnIGNvbmZpZ3MuICovXG5cdGV4cG9ydHMuYXJ5UmVhcmcgPSB7XG5cdCAgJzInOiBbMSwgMF0sXG5cdCAgJzMnOiBbMiwgMCwgMV0sXG5cdCAgJzQnOiBbMywgMiwgMCwgMV1cblx0fTtcblxuXHQvKiogVXNlZCB0byBtYXAgbWV0aG9kIG5hbWVzIHRvIHRoZWlyIGl0ZXJhdGVlIGFyeS4gKi9cblx0ZXhwb3J0cy5pdGVyYXRlZUFyeSA9IHtcblx0ICAnZHJvcFJpZ2h0V2hpbGUnOiAxLFxuXHQgICdkcm9wV2hpbGUnOiAxLFxuXHQgICdldmVyeSc6IDEsXG5cdCAgJ2ZpbHRlcic6IDEsXG5cdCAgJ2ZpbmQnOiAxLFxuXHQgICdmaW5kRnJvbSc6IDEsXG5cdCAgJ2ZpbmRJbmRleCc6IDEsXG5cdCAgJ2ZpbmRJbmRleEZyb20nOiAxLFxuXHQgICdmaW5kS2V5JzogMSxcblx0ICAnZmluZExhc3QnOiAxLFxuXHQgICdmaW5kTGFzdEZyb20nOiAxLFxuXHQgICdmaW5kTGFzdEluZGV4JzogMSxcblx0ICAnZmluZExhc3RJbmRleEZyb20nOiAxLFxuXHQgICdmaW5kTGFzdEtleSc6IDEsXG5cdCAgJ2ZsYXRNYXAnOiAxLFxuXHQgICdmbGF0TWFwRGVlcCc6IDEsXG5cdCAgJ2ZsYXRNYXBEZXB0aCc6IDEsXG5cdCAgJ2ZvckVhY2gnOiAxLFxuXHQgICdmb3JFYWNoUmlnaHQnOiAxLFxuXHQgICdmb3JJbic6IDEsXG5cdCAgJ2ZvckluUmlnaHQnOiAxLFxuXHQgICdmb3JPd24nOiAxLFxuXHQgICdmb3JPd25SaWdodCc6IDEsXG5cdCAgJ21hcCc6IDEsXG5cdCAgJ21hcEtleXMnOiAxLFxuXHQgICdtYXBWYWx1ZXMnOiAxLFxuXHQgICdwYXJ0aXRpb24nOiAxLFxuXHQgICdyZWR1Y2UnOiAyLFxuXHQgICdyZWR1Y2VSaWdodCc6IDIsXG5cdCAgJ3JlamVjdCc6IDEsXG5cdCAgJ3JlbW92ZSc6IDEsXG5cdCAgJ3NvbWUnOiAxLFxuXHQgICd0YWtlUmlnaHRXaGlsZSc6IDEsXG5cdCAgJ3Rha2VXaGlsZSc6IDEsXG5cdCAgJ3RpbWVzJzogMSxcblx0ICAndHJhbnNmb3JtJzogMlxuXHR9O1xuXG5cdC8qKiBVc2VkIHRvIG1hcCBtZXRob2QgbmFtZXMgdG8gaXRlcmF0ZWUgcmVhcmcgY29uZmlncy4gKi9cblx0ZXhwb3J0cy5pdGVyYXRlZVJlYXJnID0ge1xuXHQgICdtYXBLZXlzJzogWzFdLFxuXHQgICdyZWR1Y2VSaWdodCc6IFsxLCAwXVxuXHR9O1xuXG5cdC8qKiBVc2VkIHRvIG1hcCBtZXRob2QgbmFtZXMgdG8gcmVhcmcgY29uZmlncy4gKi9cblx0ZXhwb3J0cy5tZXRob2RSZWFyZyA9IHtcblx0ICAnYXNzaWduSW5BbGxXaXRoJzogWzEsIDBdLFxuXHQgICdhc3NpZ25JbldpdGgnOiBbMSwgMiwgMF0sXG5cdCAgJ2Fzc2lnbkFsbFdpdGgnOiBbMSwgMF0sXG5cdCAgJ2Fzc2lnbldpdGgnOiBbMSwgMiwgMF0sXG5cdCAgJ2RpZmZlcmVuY2VCeSc6IFsxLCAyLCAwXSxcblx0ICAnZGlmZmVyZW5jZVdpdGgnOiBbMSwgMiwgMF0sXG5cdCAgJ2dldE9yJzogWzIsIDEsIDBdLFxuXHQgICdpbnRlcnNlY3Rpb25CeSc6IFsxLCAyLCAwXSxcblx0ICAnaW50ZXJzZWN0aW9uV2l0aCc6IFsxLCAyLCAwXSxcblx0ICAnaXNFcXVhbFdpdGgnOiBbMSwgMiwgMF0sXG5cdCAgJ2lzTWF0Y2hXaXRoJzogWzIsIDEsIDBdLFxuXHQgICdtZXJnZUFsbFdpdGgnOiBbMSwgMF0sXG5cdCAgJ21lcmdlV2l0aCc6IFsxLCAyLCAwXSxcblx0ICAncGFkQ2hhcnMnOiBbMiwgMSwgMF0sXG5cdCAgJ3BhZENoYXJzRW5kJzogWzIsIDEsIDBdLFxuXHQgICdwYWRDaGFyc1N0YXJ0JzogWzIsIDEsIDBdLFxuXHQgICdwdWxsQWxsQnknOiBbMiwgMSwgMF0sXG5cdCAgJ3B1bGxBbGxXaXRoJzogWzIsIDEsIDBdLFxuXHQgICdyYW5nZVN0ZXAnOiBbMSwgMiwgMF0sXG5cdCAgJ3JhbmdlU3RlcFJpZ2h0JzogWzEsIDIsIDBdLFxuXHQgICdzZXRXaXRoJzogWzMsIDEsIDIsIDBdLFxuXHQgICdzb3J0ZWRJbmRleEJ5JzogWzIsIDEsIDBdLFxuXHQgICdzb3J0ZWRMYXN0SW5kZXhCeSc6IFsyLCAxLCAwXSxcblx0ICAndW5pb25CeSc6IFsxLCAyLCAwXSxcblx0ICAndW5pb25XaXRoJzogWzEsIDIsIDBdLFxuXHQgICd1cGRhdGVXaXRoJzogWzMsIDEsIDIsIDBdLFxuXHQgICd4b3JCeSc6IFsxLCAyLCAwXSxcblx0ICAneG9yV2l0aCc6IFsxLCAyLCAwXSxcblx0ICAnemlwV2l0aCc6IFsxLCAyLCAwXVxuXHR9O1xuXG5cdC8qKiBVc2VkIHRvIG1hcCBtZXRob2QgbmFtZXMgdG8gc3ByZWFkIGNvbmZpZ3MuICovXG5cdGV4cG9ydHMubWV0aG9kU3ByZWFkID0ge1xuXHQgICdhc3NpZ25BbGwnOiB7ICdzdGFydCc6IDAgfSxcblx0ICAnYXNzaWduQWxsV2l0aCc6IHsgJ3N0YXJ0JzogMCB9LFxuXHQgICdhc3NpZ25JbkFsbCc6IHsgJ3N0YXJ0JzogMCB9LFxuXHQgICdhc3NpZ25JbkFsbFdpdGgnOiB7ICdzdGFydCc6IDAgfSxcblx0ICAnZGVmYXVsdHNBbGwnOiB7ICdzdGFydCc6IDAgfSxcblx0ICAnZGVmYXVsdHNEZWVwQWxsJzogeyAnc3RhcnQnOiAwIH0sXG5cdCAgJ2ludm9rZUFyZ3MnOiB7ICdzdGFydCc6IDIgfSxcblx0ICAnaW52b2tlQXJnc01hcCc6IHsgJ3N0YXJ0JzogMiB9LFxuXHQgICdtZXJnZUFsbCc6IHsgJ3N0YXJ0JzogMCB9LFxuXHQgICdtZXJnZUFsbFdpdGgnOiB7ICdzdGFydCc6IDAgfSxcblx0ICAncGFydGlhbCc6IHsgJ3N0YXJ0JzogMSB9LFxuXHQgICdwYXJ0aWFsUmlnaHQnOiB7ICdzdGFydCc6IDEgfSxcblx0ICAnd2l0aG91dCc6IHsgJ3N0YXJ0JzogMSB9LFxuXHQgICd6aXBBbGwnOiB7ICdzdGFydCc6IDAgfVxuXHR9O1xuXG5cdC8qKiBVc2VkIHRvIGlkZW50aWZ5IG1ldGhvZHMgd2hpY2ggbXV0YXRlIGFycmF5cyBvciBvYmplY3RzLiAqL1xuXHRleHBvcnRzLm11dGF0ZSA9IHtcblx0ICAnYXJyYXknOiB7XG5cdCAgICAnZmlsbCc6IHRydWUsXG5cdCAgICAncHVsbCc6IHRydWUsXG5cdCAgICAncHVsbEFsbCc6IHRydWUsXG5cdCAgICAncHVsbEFsbEJ5JzogdHJ1ZSxcblx0ICAgICdwdWxsQWxsV2l0aCc6IHRydWUsXG5cdCAgICAncHVsbEF0JzogdHJ1ZSxcblx0ICAgICdyZW1vdmUnOiB0cnVlLFxuXHQgICAgJ3JldmVyc2UnOiB0cnVlXG5cdCAgfSxcblx0ICAnb2JqZWN0Jzoge1xuXHQgICAgJ2Fzc2lnbic6IHRydWUsXG5cdCAgICAnYXNzaWduQWxsJzogdHJ1ZSxcblx0ICAgICdhc3NpZ25BbGxXaXRoJzogdHJ1ZSxcblx0ICAgICdhc3NpZ25Jbic6IHRydWUsXG5cdCAgICAnYXNzaWduSW5BbGwnOiB0cnVlLFxuXHQgICAgJ2Fzc2lnbkluQWxsV2l0aCc6IHRydWUsXG5cdCAgICAnYXNzaWduSW5XaXRoJzogdHJ1ZSxcblx0ICAgICdhc3NpZ25XaXRoJzogdHJ1ZSxcblx0ICAgICdkZWZhdWx0cyc6IHRydWUsXG5cdCAgICAnZGVmYXVsdHNBbGwnOiB0cnVlLFxuXHQgICAgJ2RlZmF1bHRzRGVlcCc6IHRydWUsXG5cdCAgICAnZGVmYXVsdHNEZWVwQWxsJzogdHJ1ZSxcblx0ICAgICdtZXJnZSc6IHRydWUsXG5cdCAgICAnbWVyZ2VBbGwnOiB0cnVlLFxuXHQgICAgJ21lcmdlQWxsV2l0aCc6IHRydWUsXG5cdCAgICAnbWVyZ2VXaXRoJzogdHJ1ZSxcblx0ICB9LFxuXHQgICdzZXQnOiB7XG5cdCAgICAnc2V0JzogdHJ1ZSxcblx0ICAgICdzZXRXaXRoJzogdHJ1ZSxcblx0ICAgICd1bnNldCc6IHRydWUsXG5cdCAgICAndXBkYXRlJzogdHJ1ZSxcblx0ICAgICd1cGRhdGVXaXRoJzogdHJ1ZVxuXHQgIH1cblx0fTtcblxuXHQvKiogVXNlZCB0byBtYXAgcmVhbCBuYW1lcyB0byB0aGVpciBhbGlhc2VzLiAqL1xuXHRleHBvcnRzLnJlYWxUb0FsaWFzID0gKGZ1bmN0aW9uKCkge1xuXHQgIHZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG5cdCAgICAgIG9iamVjdCA9IGV4cG9ydHMuYWxpYXNUb1JlYWwsXG5cdCAgICAgIHJlc3VsdCA9IHt9O1xuXG5cdCAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuXHQgICAgdmFyIHZhbHVlID0gb2JqZWN0W2tleV07XG5cdCAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIHZhbHVlKSkge1xuXHQgICAgICByZXN1bHRbdmFsdWVdLnB1c2goa2V5KTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJlc3VsdFt2YWx1ZV0gPSBba2V5XTtcblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIHJlc3VsdDtcblx0fSgpKTtcblxuXHQvKiogVXNlZCB0byBtYXAgbWV0aG9kIG5hbWVzIHRvIG90aGVyIG5hbWVzLiAqL1xuXHRleHBvcnRzLnJlbWFwID0ge1xuXHQgICdhc3NpZ25BbGwnOiAnYXNzaWduJyxcblx0ICAnYXNzaWduQWxsV2l0aCc6ICdhc3NpZ25XaXRoJyxcblx0ICAnYXNzaWduSW5BbGwnOiAnYXNzaWduSW4nLFxuXHQgICdhc3NpZ25JbkFsbFdpdGgnOiAnYXNzaWduSW5XaXRoJyxcblx0ICAnY3VycnlOJzogJ2N1cnJ5Jyxcblx0ICAnY3VycnlSaWdodE4nOiAnY3VycnlSaWdodCcsXG5cdCAgJ2RlZmF1bHRzQWxsJzogJ2RlZmF1bHRzJyxcblx0ICAnZGVmYXVsdHNEZWVwQWxsJzogJ2RlZmF1bHRzRGVlcCcsXG5cdCAgJ2ZpbmRGcm9tJzogJ2ZpbmQnLFxuXHQgICdmaW5kSW5kZXhGcm9tJzogJ2ZpbmRJbmRleCcsXG5cdCAgJ2ZpbmRMYXN0RnJvbSc6ICdmaW5kTGFzdCcsXG5cdCAgJ2ZpbmRMYXN0SW5kZXhGcm9tJzogJ2ZpbmRMYXN0SW5kZXgnLFxuXHQgICdnZXRPcic6ICdnZXQnLFxuXHQgICdpbmNsdWRlc0Zyb20nOiAnaW5jbHVkZXMnLFxuXHQgICdpbmRleE9mRnJvbSc6ICdpbmRleE9mJyxcblx0ICAnaW52b2tlQXJncyc6ICdpbnZva2UnLFxuXHQgICdpbnZva2VBcmdzTWFwJzogJ2ludm9rZU1hcCcsXG5cdCAgJ2xhc3RJbmRleE9mRnJvbSc6ICdsYXN0SW5kZXhPZicsXG5cdCAgJ21lcmdlQWxsJzogJ21lcmdlJyxcblx0ICAnbWVyZ2VBbGxXaXRoJzogJ21lcmdlV2l0aCcsXG5cdCAgJ3BhZENoYXJzJzogJ3BhZCcsXG5cdCAgJ3BhZENoYXJzRW5kJzogJ3BhZEVuZCcsXG5cdCAgJ3BhZENoYXJzU3RhcnQnOiAncGFkU3RhcnQnLFxuXHQgICdwcm9wZXJ0eU9mJzogJ2dldCcsXG5cdCAgJ3JhbmdlU3RlcCc6ICdyYW5nZScsXG5cdCAgJ3JhbmdlU3RlcFJpZ2h0JzogJ3JhbmdlUmlnaHQnLFxuXHQgICdyZXN0RnJvbSc6ICdyZXN0Jyxcblx0ICAnc3ByZWFkRnJvbSc6ICdzcHJlYWQnLFxuXHQgICd0cmltQ2hhcnMnOiAndHJpbScsXG5cdCAgJ3RyaW1DaGFyc0VuZCc6ICd0cmltRW5kJyxcblx0ICAndHJpbUNoYXJzU3RhcnQnOiAndHJpbVN0YXJ0Jyxcblx0ICAnemlwQWxsJzogJ3ppcCdcblx0fTtcblxuXHQvKiogVXNlZCB0byB0cmFjayBtZXRob2RzIHRoYXQgc2tpcCBmaXhpbmcgdGhlaXIgYXJpdHkuICovXG5cdGV4cG9ydHMuc2tpcEZpeGVkID0ge1xuXHQgICdjYXN0QXJyYXknOiB0cnVlLFxuXHQgICdmbG93JzogdHJ1ZSxcblx0ICAnZmxvd1JpZ2h0JzogdHJ1ZSxcblx0ICAnaXRlcmF0ZWUnOiB0cnVlLFxuXHQgICdtaXhpbic6IHRydWUsXG5cdCAgJ3JlYXJnJzogdHJ1ZSxcblx0ICAncnVuSW5Db250ZXh0JzogdHJ1ZVxuXHR9O1xuXG5cdC8qKiBVc2VkIHRvIHRyYWNrIG1ldGhvZHMgdGhhdCBza2lwIHJlYXJyYW5naW5nIGFyZ3VtZW50cy4gKi9cblx0ZXhwb3J0cy5za2lwUmVhcmcgPSB7XG5cdCAgJ2FkZCc6IHRydWUsXG5cdCAgJ2Fzc2lnbic6IHRydWUsXG5cdCAgJ2Fzc2lnbkluJzogdHJ1ZSxcblx0ICAnYmluZCc6IHRydWUsXG5cdCAgJ2JpbmRLZXknOiB0cnVlLFxuXHQgICdjb25jYXQnOiB0cnVlLFxuXHQgICdkaWZmZXJlbmNlJzogdHJ1ZSxcblx0ICAnZGl2aWRlJzogdHJ1ZSxcblx0ICAnZXEnOiB0cnVlLFxuXHQgICdndCc6IHRydWUsXG5cdCAgJ2d0ZSc6IHRydWUsXG5cdCAgJ2lzRXF1YWwnOiB0cnVlLFxuXHQgICdsdCc6IHRydWUsXG5cdCAgJ2x0ZSc6IHRydWUsXG5cdCAgJ21hdGNoZXNQcm9wZXJ0eSc6IHRydWUsXG5cdCAgJ21lcmdlJzogdHJ1ZSxcblx0ICAnbXVsdGlwbHknOiB0cnVlLFxuXHQgICdvdmVyQXJncyc6IHRydWUsXG5cdCAgJ3BhcnRpYWwnOiB0cnVlLFxuXHQgICdwYXJ0aWFsUmlnaHQnOiB0cnVlLFxuXHQgICdwcm9wZXJ0eU9mJzogdHJ1ZSxcblx0ICAncmFuZG9tJzogdHJ1ZSxcblx0ICAncmFuZ2UnOiB0cnVlLFxuXHQgICdyYW5nZVJpZ2h0JzogdHJ1ZSxcblx0ICAnc3VidHJhY3QnOiB0cnVlLFxuXHQgICd6aXAnOiB0cnVlLFxuXHQgICd6aXBPYmplY3QnOiB0cnVlLFxuXHQgICd6aXBPYmplY3REZWVwJzogdHJ1ZVxuXHR9O1xufSAoX21hcHBpbmcpKTtcblxuLyoqXG4gKiBUaGUgZGVmYXVsdCBhcmd1bWVudCBwbGFjZWhvbGRlciB2YWx1ZSBmb3IgbWV0aG9kcy5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5cbnZhciBwbGFjZWhvbGRlcjtcbnZhciBoYXNSZXF1aXJlZFBsYWNlaG9sZGVyO1xuXG5mdW5jdGlvbiByZXF1aXJlUGxhY2Vob2xkZXIgKCkge1xuXHRpZiAoaGFzUmVxdWlyZWRQbGFjZWhvbGRlcikgcmV0dXJuIHBsYWNlaG9sZGVyO1xuXHRoYXNSZXF1aXJlZFBsYWNlaG9sZGVyID0gMTtcblx0cGxhY2Vob2xkZXIgPSB7fTtcblx0cmV0dXJuIHBsYWNlaG9sZGVyO1xufVxuXG52YXIgbWFwcGluZyA9IF9tYXBwaW5nLFxuICAgIGZhbGxiYWNrSG9sZGVyID0gcmVxdWlyZVBsYWNlaG9sZGVyKCk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2UuICovXG52YXIgcHVzaCA9IEFycmF5LnByb3RvdHlwZS5wdXNoO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiwgd2l0aCBhbiBhcml0eSBvZiBgbmAsIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGVcbiAqIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBhcml0eSBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VBcml0eShmdW5jLCBuKSB7XG4gIHJldHVybiBuID09IDJcbiAgICA/IGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpOyB9XG4gICAgOiBmdW5jdGlvbihhKSB7IHJldHVybiBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTsgfTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCwgd2l0aCB1cCB0byBgbmAgYXJndW1lbnRzLCBpZ25vcmluZ1xuICogYW55IGFkZGl0aW9uYWwgYXJndW1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBhcml0eSBjYXAuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZUFyeShmdW5jLCBuKSB7XG4gIHJldHVybiBuID09IDJcbiAgICA/IGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIGZ1bmMoYSwgYik7IH1cbiAgICA6IGZ1bmN0aW9uKGEpIHsgcmV0dXJuIGZ1bmMoYSk7IH07XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2xvbmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBjbG9uZUFycmF5KGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDAsXG4gICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIHJlc3VsdFtsZW5ndGhdID0gYXJyYXlbbGVuZ3RoXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGNsb25lcyBhIGdpdmVuIG9iamVjdCB1c2luZyB0aGUgYXNzaWdubWVudCBgZnVuY2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGFzc2lnbm1lbnQgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjbG9uZXIgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNsb25lcihmdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gZnVuYyh7fSwgb2JqZWN0KTtcbiAgfTtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc3ByZWFkYCB3aGljaCBmbGF0dGVucyB0aGUgc3ByZWFkIGFycmF5IGludG9cbiAqIHRoZSBhcmd1bWVudHMgb2YgdGhlIGludm9rZWQgYGZ1bmNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBzcHJlYWQgYXJndW1lbnRzIG92ZXIuXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSBzcHJlYWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gZmxhdFNwcmVhZChmdW5jLCBzdGFydCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDEsXG4gICAgICAgIGFyZ3MgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBhcmdzW2xlbmd0aF0gPSBhcmd1bWVudHNbbGVuZ3RoXTtcbiAgICB9XG4gICAgdmFyIGFycmF5ID0gYXJnc1tzdGFydF0sXG4gICAgICAgIG90aGVyQXJncyA9IGFyZ3Muc2xpY2UoMCwgc3RhcnQpO1xuXG4gICAgaWYgKGFycmF5KSB7XG4gICAgICBwdXNoLmFwcGx5KG90aGVyQXJncywgYXJyYXkpO1xuICAgIH1cbiAgICBpZiAoc3RhcnQgIT0gbGFzdEluZGV4KSB7XG4gICAgICBwdXNoLmFwcGx5KG90aGVyQXJncywgYXJncy5zbGljZShzdGFydCArIDEpKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgb3RoZXJBcmdzKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgYW5kIHVzZXMgYGNsb25lcmAgdG8gY2xvbmUgdGhlIGZpcnN0XG4gKiBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNsb25lciBUaGUgZnVuY3Rpb24gdG8gY2xvbmUgYXJndW1lbnRzLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW1tdXRhYmxlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB3cmFwSW1tdXRhYmxlKGZ1bmMsIGNsb25lcikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGFyZ3MgPSBBcnJheShsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYXJnc1tsZW5ndGhdID0gYXJndW1lbnRzW2xlbmd0aF07XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBhcmdzWzBdID0gY2xvbmVyLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGNvbnZlcnRgIHdoaWNoIGFjY2VwdHMgYSBgdXRpbGAgb2JqZWN0IG9mIG1ldGhvZHNcbiAqIHJlcXVpcmVkIHRvIHBlcmZvcm0gY29udmVyc2lvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHV0aWwgVGhlIHV0aWwgb2JqZWN0LlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNhcD10cnVlXSBTcGVjaWZ5IGNhcHBpbmcgaXRlcmF0ZWUgYXJndW1lbnRzLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jdXJyeT10cnVlXSBTcGVjaWZ5IGN1cnJ5aW5nLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5maXhlZD10cnVlXSBTcGVjaWZ5IGZpeGVkIGFyaXR5LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5pbW11dGFibGU9dHJ1ZV0gU3BlY2lmeSBpbW11dGFibGUgb3BlcmF0aW9ucy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucmVhcmc9dHJ1ZV0gU3BlY2lmeSByZWFycmFuZ2luZyBhcmd1bWVudHMuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgZnVuY3Rpb24gb3Igb2JqZWN0LlxuICovXG5mdW5jdGlvbiBiYXNlQ29udmVydCQxKHV0aWwsIG5hbWUsIGZ1bmMsIG9wdGlvbnMpIHtcbiAgdmFyIGlzTGliID0gdHlwZW9mIG5hbWUgPT0gJ2Z1bmN0aW9uJyxcbiAgICAgIGlzT2JqID0gbmFtZSA9PT0gT2JqZWN0KG5hbWUpO1xuXG4gIGlmIChpc09iaikge1xuICAgIG9wdGlvbnMgPSBmdW5jO1xuICAgIGZ1bmMgPSBuYW1lO1xuICAgIG5hbWUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKGZ1bmMgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3I7XG4gIH1cbiAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcblxuICB2YXIgY29uZmlnID0ge1xuICAgICdjYXAnOiAnY2FwJyBpbiBvcHRpb25zID8gb3B0aW9ucy5jYXAgOiB0cnVlLFxuICAgICdjdXJyeSc6ICdjdXJyeScgaW4gb3B0aW9ucyA/IG9wdGlvbnMuY3VycnkgOiB0cnVlLFxuICAgICdmaXhlZCc6ICdmaXhlZCcgaW4gb3B0aW9ucyA/IG9wdGlvbnMuZml4ZWQgOiB0cnVlLFxuICAgICdpbW11dGFibGUnOiAnaW1tdXRhYmxlJyBpbiBvcHRpb25zID8gb3B0aW9ucy5pbW11dGFibGUgOiB0cnVlLFxuICAgICdyZWFyZyc6ICdyZWFyZycgaW4gb3B0aW9ucyA/IG9wdGlvbnMucmVhcmcgOiB0cnVlXG4gIH07XG5cbiAgdmFyIGRlZmF1bHRIb2xkZXIgPSBpc0xpYiA/IGZ1bmMgOiBmYWxsYmFja0hvbGRlcixcbiAgICAgIGZvcmNlQ3VycnkgPSAoJ2N1cnJ5JyBpbiBvcHRpb25zKSAmJiBvcHRpb25zLmN1cnJ5LFxuICAgICAgZm9yY2VGaXhlZCA9ICgnZml4ZWQnIGluIG9wdGlvbnMpICYmIG9wdGlvbnMuZml4ZWQsXG4gICAgICBmb3JjZVJlYXJnID0gKCdyZWFyZycgaW4gb3B0aW9ucykgJiYgb3B0aW9ucy5yZWFyZyxcbiAgICAgIHByaXN0aW5lID0gaXNMaWIgPyBmdW5jLnJ1bkluQ29udGV4dCgpIDogdW5kZWZpbmVkO1xuXG4gIHZhciBoZWxwZXJzID0gaXNMaWIgPyBmdW5jIDoge1xuICAgICdhcnknOiB1dGlsLmFyeSxcbiAgICAnYXNzaWduJzogdXRpbC5hc3NpZ24sXG4gICAgJ2Nsb25lJzogdXRpbC5jbG9uZSxcbiAgICAnY3VycnknOiB1dGlsLmN1cnJ5LFxuICAgICdmb3JFYWNoJzogdXRpbC5mb3JFYWNoLFxuICAgICdpc0FycmF5JzogdXRpbC5pc0FycmF5LFxuICAgICdpc0Vycm9yJzogdXRpbC5pc0Vycm9yLFxuICAgICdpc0Z1bmN0aW9uJzogdXRpbC5pc0Z1bmN0aW9uLFxuICAgICdpc1dlYWtNYXAnOiB1dGlsLmlzV2Vha01hcCxcbiAgICAnaXRlcmF0ZWUnOiB1dGlsLml0ZXJhdGVlLFxuICAgICdrZXlzJzogdXRpbC5rZXlzLFxuICAgICdyZWFyZyc6IHV0aWwucmVhcmcsXG4gICAgJ3RvSW50ZWdlcic6IHV0aWwudG9JbnRlZ2VyLFxuICAgICd0b1BhdGgnOiB1dGlsLnRvUGF0aFxuICB9O1xuXG4gIHZhciBhcnkgPSBoZWxwZXJzLmFyeSxcbiAgICAgIGFzc2lnbiA9IGhlbHBlcnMuYXNzaWduLFxuICAgICAgY2xvbmUgPSBoZWxwZXJzLmNsb25lLFxuICAgICAgY3VycnkgPSBoZWxwZXJzLmN1cnJ5LFxuICAgICAgZWFjaCA9IGhlbHBlcnMuZm9yRWFjaCxcbiAgICAgIGlzQXJyYXkgPSBoZWxwZXJzLmlzQXJyYXksXG4gICAgICBpc0Vycm9yID0gaGVscGVycy5pc0Vycm9yLFxuICAgICAgaXNGdW5jdGlvbiA9IGhlbHBlcnMuaXNGdW5jdGlvbixcbiAgICAgIGlzV2Vha01hcCA9IGhlbHBlcnMuaXNXZWFrTWFwLFxuICAgICAga2V5cyA9IGhlbHBlcnMua2V5cyxcbiAgICAgIHJlYXJnID0gaGVscGVycy5yZWFyZyxcbiAgICAgIHRvSW50ZWdlciA9IGhlbHBlcnMudG9JbnRlZ2VyLFxuICAgICAgdG9QYXRoID0gaGVscGVycy50b1BhdGg7XG5cbiAgdmFyIGFyeU1ldGhvZEtleXMgPSBrZXlzKG1hcHBpbmcuYXJ5TWV0aG9kKTtcblxuICB2YXIgd3JhcHBlcnMgPSB7XG4gICAgJ2Nhc3RBcnJheSc6IGZ1bmN0aW9uKGNhc3RBcnJheSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcmd1bWVudHNbMF07XG4gICAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKVxuICAgICAgICAgID8gY2FzdEFycmF5KGNsb25lQXJyYXkodmFsdWUpKVxuICAgICAgICAgIDogY2FzdEFycmF5LmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfSxcbiAgICAnaXRlcmF0ZWUnOiBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZnVuYyA9IGFyZ3VtZW50c1swXSxcbiAgICAgICAgICAgIGFyaXR5ID0gYXJndW1lbnRzWzFdLFxuICAgICAgICAgICAgcmVzdWx0ID0gaXRlcmF0ZWUoZnVuYywgYXJpdHkpLFxuICAgICAgICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICAgICAgICBpZiAoY29uZmlnLmNhcCAmJiB0eXBlb2YgYXJpdHkgPT0gJ251bWJlcicpIHtcbiAgICAgICAgICBhcml0eSA9IGFyaXR5ID4gMiA/IChhcml0eSAtIDIpIDogMTtcbiAgICAgICAgICByZXR1cm4gKGxlbmd0aCAmJiBsZW5ndGggPD0gYXJpdHkpID8gcmVzdWx0IDogYmFzZUFyeShyZXN1bHQsIGFyaXR5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9LFxuICAgICdtaXhpbic6IGZ1bmN0aW9uKG1peGluKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHZhciBmdW5jID0gdGhpcztcbiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKGZ1bmMpKSB7XG4gICAgICAgICAgcmV0dXJuIG1peGluKGZ1bmMsIE9iamVjdChzb3VyY2UpKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcGFpcnMgPSBbXTtcbiAgICAgICAgZWFjaChrZXlzKHNvdXJjZSksIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHNvdXJjZVtrZXldKSkge1xuICAgICAgICAgICAgcGFpcnMucHVzaChba2V5LCBmdW5jLnByb3RvdHlwZVtrZXldXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBtaXhpbihmdW5jLCBPYmplY3Qoc291cmNlKSk7XG5cbiAgICAgICAgZWFjaChwYWlycywgZnVuY3Rpb24ocGFpcikge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IHBhaXJbMV07XG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICAgICAgICBmdW5jLnByb3RvdHlwZVtwYWlyWzBdXSA9IHZhbHVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWxldGUgZnVuYy5wcm90b3R5cGVbcGFpclswXV07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgICB9O1xuICAgIH0sXG4gICAgJ250aEFyZyc6IGZ1bmN0aW9uKG50aEFyZykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgdmFyIGFyaXR5ID0gbiA8IDAgPyAxIDogKHRvSW50ZWdlcihuKSArIDEpO1xuICAgICAgICByZXR1cm4gY3VycnkobnRoQXJnKG4pLCBhcml0eSk7XG4gICAgICB9O1xuICAgIH0sXG4gICAgJ3JlYXJnJzogZnVuY3Rpb24ocmVhcmcpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihmdW5jLCBpbmRleGVzKSB7XG4gICAgICAgIHZhciBhcml0eSA9IGluZGV4ZXMgPyBpbmRleGVzLmxlbmd0aCA6IDA7XG4gICAgICAgIHJldHVybiBjdXJyeShyZWFyZyhmdW5jLCBpbmRleGVzKSwgYXJpdHkpO1xuICAgICAgfTtcbiAgICB9LFxuICAgICdydW5JbkNvbnRleHQnOiBmdW5jdGlvbihydW5JbkNvbnRleHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBiYXNlQ29udmVydCQxKHV0aWwsIHJ1bkluQ29udGV4dChjb250ZXh0KSwgb3B0aW9ucyk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvKipcbiAgICogQ2FzdHMgYGZ1bmNgIHRvIGEgZnVuY3Rpb24gd2l0aCBhbiBhcml0eSBjYXBwZWQgaXRlcmF0ZWUgaWYgbmVlZGVkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgZnVuY3Rpb24gdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjYXN0IGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gY2FzdENhcChuYW1lLCBmdW5jKSB7XG4gICAgaWYgKGNvbmZpZy5jYXApIHtcbiAgICAgIHZhciBpbmRleGVzID0gbWFwcGluZy5pdGVyYXRlZVJlYXJnW25hbWVdO1xuICAgICAgaWYgKGluZGV4ZXMpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdGVlUmVhcmcoZnVuYywgaW5kZXhlcyk7XG4gICAgICB9XG4gICAgICB2YXIgbiA9ICFpc0xpYiAmJiBtYXBwaW5nLml0ZXJhdGVlQXJ5W25hbWVdO1xuICAgICAgaWYgKG4pIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdGVlQXJ5KGZ1bmMsIG4pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZnVuYztcbiAgfVxuXG4gIC8qKlxuICAgKiBDYXN0cyBgZnVuY2AgdG8gYSBjdXJyaWVkIGZ1bmN0aW9uIGlmIG5lZWRlZC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGZ1bmN0aW9uIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY2FzdCBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGNhc3RDdXJyeShuYW1lLCBmdW5jLCBuKSB7XG4gICAgcmV0dXJuIChmb3JjZUN1cnJ5IHx8IChjb25maWcuY3VycnkgJiYgbiA+IDEpKVxuICAgICAgPyBjdXJyeShmdW5jLCBuKVxuICAgICAgOiBmdW5jO1xuICB9XG5cbiAgLyoqXG4gICAqIENhc3RzIGBmdW5jYCB0byBhIGZpeGVkIGFyaXR5IGZ1bmN0aW9uIGlmIG5lZWRlZC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGZ1bmN0aW9uIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBhcml0eSBjYXAuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY2FzdCBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGNhc3RGaXhlZChuYW1lLCBmdW5jLCBuKSB7XG4gICAgaWYgKGNvbmZpZy5maXhlZCAmJiAoZm9yY2VGaXhlZCB8fCAhbWFwcGluZy5za2lwRml4ZWRbbmFtZV0pKSB7XG4gICAgICB2YXIgZGF0YSA9IG1hcHBpbmcubWV0aG9kU3ByZWFkW25hbWVdLFxuICAgICAgICAgIHN0YXJ0ID0gZGF0YSAmJiBkYXRhLnN0YXJ0O1xuXG4gICAgICByZXR1cm4gc3RhcnQgID09PSB1bmRlZmluZWQgPyBhcnkoZnVuYywgbikgOiBmbGF0U3ByZWFkKGZ1bmMsIHN0YXJ0KTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH1cblxuICAvKipcbiAgICogQ2FzdHMgYGZ1bmNgIHRvIGFuIHJlYXJnZWQgZnVuY3Rpb24gaWYgbmVlZGVkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgZnVuY3Rpb24gdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjYXN0IGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gY2FzdFJlYXJnKG5hbWUsIGZ1bmMsIG4pIHtcbiAgICByZXR1cm4gKGNvbmZpZy5yZWFyZyAmJiBuID4gMSAmJiAoZm9yY2VSZWFyZyB8fCAhbWFwcGluZy5za2lwUmVhcmdbbmFtZV0pKVxuICAgICAgPyByZWFyZyhmdW5jLCBtYXBwaW5nLm1ldGhvZFJlYXJnW25hbWVdIHx8IG1hcHBpbmcuYXJ5UmVhcmdbbl0pXG4gICAgICA6IGZ1bmM7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGBvYmplY3RgIGJ5IGBwYXRoYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjbG9uZSBieS5cbiAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIG9iamVjdC5cbiAgICovXG4gIGZ1bmN0aW9uIGNsb25lQnlQYXRoKG9iamVjdCwgcGF0aCkge1xuICAgIHBhdGggPSB0b1BhdGgocGF0aCk7XG5cbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDEsXG4gICAgICAgIHJlc3VsdCA9IGNsb25lKE9iamVjdChvYmplY3QpKSxcbiAgICAgICAgbmVzdGVkID0gcmVzdWx0O1xuXG4gICAgd2hpbGUgKG5lc3RlZCAhPSBudWxsICYmICsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciBrZXkgPSBwYXRoW2luZGV4XSxcbiAgICAgICAgICB2YWx1ZSA9IG5lc3RlZFtrZXldO1xuXG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJlxuICAgICAgICAgICEoaXNGdW5jdGlvbih2YWx1ZSkgfHwgaXNFcnJvcih2YWx1ZSkgfHwgaXNXZWFrTWFwKHZhbHVlKSkpIHtcbiAgICAgICAgbmVzdGVkW2tleV0gPSBjbG9uZShpbmRleCA9PSBsYXN0SW5kZXggPyB2YWx1ZSA6IE9iamVjdCh2YWx1ZSkpO1xuICAgICAgfVxuICAgICAgbmVzdGVkID0gbmVzdGVkW2tleV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYGxvZGFzaGAgdG8gYW4gaW1tdXRhYmxlIGF1dG8tY3VycmllZCBpdGVyYXRlZS1maXJzdCBkYXRhLWxhc3RcbiAgICogdmVyc2lvbiB3aXRoIGNvbnZlcnNpb24gYG9wdGlvbnNgIGFwcGxpZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gVGhlIG9wdGlvbnMgb2JqZWN0LiBTZWUgYGJhc2VDb252ZXJ0YCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNvbnZlcnRlZCBgbG9kYXNoYC5cbiAgICovXG4gIGZ1bmN0aW9uIGNvbnZlcnRMaWIob3B0aW9ucykge1xuICAgIHJldHVybiBfLnJ1bkluQ29udGV4dC5jb252ZXJ0KG9wdGlvbnMpKHVuZGVmaW5lZCk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgY29udmVydGVyIGZ1bmN0aW9uIGZvciBgZnVuY2Agb2YgYG5hbWVgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29udmVydGVyIGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gY3JlYXRlQ29udmVydGVyKG5hbWUsIGZ1bmMpIHtcbiAgICB2YXIgcmVhbE5hbWUgPSBtYXBwaW5nLmFsaWFzVG9SZWFsW25hbWVdIHx8IG5hbWUsXG4gICAgICAgIG1ldGhvZE5hbWUgPSBtYXBwaW5nLnJlbWFwW3JlYWxOYW1lXSB8fCByZWFsTmFtZSxcbiAgICAgICAgb2xkT3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgdmFyIG5ld1V0aWwgPSBpc0xpYiA/IHByaXN0aW5lIDogaGVscGVycyxcbiAgICAgICAgICBuZXdGdW5jID0gaXNMaWIgPyBwcmlzdGluZVttZXRob2ROYW1lXSA6IGZ1bmMsXG4gICAgICAgICAgbmV3T3B0aW9ucyA9IGFzc2lnbihhc3NpZ24oe30sIG9sZE9wdGlvbnMpLCBvcHRpb25zKTtcblxuICAgICAgcmV0dXJuIGJhc2VDb252ZXJ0JDEobmV3VXRpbCwgcmVhbE5hbWUsIG5ld0Z1bmMsIG5ld09wdGlvbnMpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdHMgaXRlcmF0ZWUsIHdpdGggdXAgdG8gYG5gXG4gICAqIGFyZ3VtZW50cywgaWdub3JpbmcgYW55IGFkZGl0aW9uYWwgYXJndW1lbnRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgaXRlcmF0ZWUgYXJndW1lbnRzIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIGFyaXR5IGNhcC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBpdGVyYXRlZUFyeShmdW5jLCBuKSB7XG4gICAgcmV0dXJuIG92ZXJBcmcoZnVuYywgZnVuY3Rpb24oZnVuYykge1xuICAgICAgcmV0dXJuIHR5cGVvZiBmdW5jID09ICdmdW5jdGlvbicgPyBiYXNlQXJ5KGZ1bmMsIG4pIDogZnVuYztcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0cyBpdGVyYXRlZSB3aXRoIGFyZ3VtZW50c1xuICAgKiBhcnJhbmdlZCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCBgaW5kZXhlc2Agd2hlcmUgdGhlIGFyZ3VtZW50IHZhbHVlIGF0XG4gICAqIHRoZSBmaXJzdCBpbmRleCBpcyBwcm92aWRlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQsIHRoZSBhcmd1bWVudCB2YWx1ZSBhdFxuICAgKiB0aGUgc2Vjb25kIGluZGV4IGlzIHByb3ZpZGVkIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQsIGFuZCBzbyBvbi5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVhcnJhbmdlIGl0ZXJhdGVlIGFyZ3VtZW50cyBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyW119IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFyZ3VtZW50IGluZGV4ZXMuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gaXRlcmF0ZWVSZWFyZyhmdW5jLCBpbmRleGVzKSB7XG4gICAgcmV0dXJuIG92ZXJBcmcoZnVuYywgZnVuY3Rpb24oZnVuYykge1xuICAgICAgdmFyIG4gPSBpbmRleGVzLmxlbmd0aDtcbiAgICAgIHJldHVybiBiYXNlQXJpdHkocmVhcmcoYmFzZUFyeShmdW5jLCBuKSwgaW5kZXhlcyksIG4pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGZpcnN0IGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMoKTtcbiAgICAgIH1cbiAgICAgIHZhciBhcmdzID0gQXJyYXkobGVuZ3RoKTtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBhcmdzW2xlbmd0aF0gPSBhcmd1bWVudHNbbGVuZ3RoXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGNvbmZpZy5yZWFyZyA/IDAgOiAobGVuZ3RoIC0gMSk7XG4gICAgICBhcmdzW2luZGV4XSA9IHRyYW5zZm9ybShhcmdzW2luZGV4XSk7XG4gICAgICByZXR1cm4gZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIGFuZCBhcHBseXMgdGhlIGNvbnZlcnNpb25zXG4gICAqIHJ1bGVzIGJ5IGBuYW1lYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY29udmVydGVkIGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gd3JhcChuYW1lLCBmdW5jLCBwbGFjZWhvbGRlcikge1xuICAgIHZhciByZXN1bHQsXG4gICAgICAgIHJlYWxOYW1lID0gbWFwcGluZy5hbGlhc1RvUmVhbFtuYW1lXSB8fCBuYW1lLFxuICAgICAgICB3cmFwcGVkID0gZnVuYyxcbiAgICAgICAgd3JhcHBlciA9IHdyYXBwZXJzW3JlYWxOYW1lXTtcblxuICAgIGlmICh3cmFwcGVyKSB7XG4gICAgICB3cmFwcGVkID0gd3JhcHBlcihmdW5jKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY29uZmlnLmltbXV0YWJsZSkge1xuICAgICAgaWYgKG1hcHBpbmcubXV0YXRlLmFycmF5W3JlYWxOYW1lXSkge1xuICAgICAgICB3cmFwcGVkID0gd3JhcEltbXV0YWJsZShmdW5jLCBjbG9uZUFycmF5KTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKG1hcHBpbmcubXV0YXRlLm9iamVjdFtyZWFsTmFtZV0pIHtcbiAgICAgICAgd3JhcHBlZCA9IHdyYXBJbW11dGFibGUoZnVuYywgY3JlYXRlQ2xvbmVyKGZ1bmMpKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKG1hcHBpbmcubXV0YXRlLnNldFtyZWFsTmFtZV0pIHtcbiAgICAgICAgd3JhcHBlZCA9IHdyYXBJbW11dGFibGUoZnVuYywgY2xvbmVCeVBhdGgpO1xuICAgICAgfVxuICAgIH1cbiAgICBlYWNoKGFyeU1ldGhvZEtleXMsIGZ1bmN0aW9uKGFyeUtleSkge1xuICAgICAgZWFjaChtYXBwaW5nLmFyeU1ldGhvZFthcnlLZXldLCBmdW5jdGlvbihvdGhlck5hbWUpIHtcbiAgICAgICAgaWYgKHJlYWxOYW1lID09IG90aGVyTmFtZSkge1xuICAgICAgICAgIHZhciBkYXRhID0gbWFwcGluZy5tZXRob2RTcHJlYWRbcmVhbE5hbWVdLFxuICAgICAgICAgICAgICBhZnRlclJlYXJnID0gZGF0YSAmJiBkYXRhLmFmdGVyUmVhcmc7XG5cbiAgICAgICAgICByZXN1bHQgPSBhZnRlclJlYXJnXG4gICAgICAgICAgICA/IGNhc3RGaXhlZChyZWFsTmFtZSwgY2FzdFJlYXJnKHJlYWxOYW1lLCB3cmFwcGVkLCBhcnlLZXkpLCBhcnlLZXkpXG4gICAgICAgICAgICA6IGNhc3RSZWFyZyhyZWFsTmFtZSwgY2FzdEZpeGVkKHJlYWxOYW1lLCB3cmFwcGVkLCBhcnlLZXkpLCBhcnlLZXkpO1xuXG4gICAgICAgICAgcmVzdWx0ID0gY2FzdENhcChyZWFsTmFtZSwgcmVzdWx0KTtcbiAgICAgICAgICByZXN1bHQgPSBjYXN0Q3VycnkocmVhbE5hbWUsIHJlc3VsdCwgYXJ5S2V5KTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuICFyZXN1bHQ7XG4gICAgfSk7XG5cbiAgICByZXN1bHQgfHwgKHJlc3VsdCA9IHdyYXBwZWQpO1xuICAgIGlmIChyZXN1bHQgPT0gZnVuYykge1xuICAgICAgcmVzdWx0ID0gZm9yY2VDdXJyeSA/IGN1cnJ5KHJlc3VsdCwgMSkgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJlc3VsdC5jb252ZXJ0ID0gY3JlYXRlQ29udmVydGVyKHJlYWxOYW1lLCBmdW5jKTtcbiAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBmdW5jLnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXI7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgaWYgKCFpc09iaikge1xuICAgIHJldHVybiB3cmFwKG5hbWUsIGZ1bmMsIGRlZmF1bHRIb2xkZXIpO1xuICB9XG4gIHZhciBfID0gZnVuYztcblxuICAvLyBDb252ZXJ0IG1ldGhvZHMgYnkgYXJ5IGNhcC5cbiAgdmFyIHBhaXJzID0gW107XG4gIGVhY2goYXJ5TWV0aG9kS2V5cywgZnVuY3Rpb24oYXJ5S2V5KSB7XG4gICAgZWFjaChtYXBwaW5nLmFyeU1ldGhvZFthcnlLZXldLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHZhciBmdW5jID0gX1ttYXBwaW5nLnJlbWFwW2tleV0gfHwga2V5XTtcbiAgICAgIGlmIChmdW5jKSB7XG4gICAgICAgIHBhaXJzLnB1c2goW2tleSwgd3JhcChrZXksIGZ1bmMsIF8pXSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIENvbnZlcnQgcmVtYWluaW5nIG1ldGhvZHMuXG4gIGVhY2goa2V5cyhfKSwgZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIGZ1bmMgPSBfW2tleV07XG4gICAgaWYgKHR5cGVvZiBmdW5jID09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwYWlycy5sZW5ndGg7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgaWYgKHBhaXJzW2xlbmd0aF1bMF0gPT0ga2V5KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmdW5jLmNvbnZlcnQgPSBjcmVhdGVDb252ZXJ0ZXIoa2V5LCBmdW5jKTtcbiAgICAgIHBhaXJzLnB1c2goW2tleSwgZnVuY10pO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gQXNzaWduIHRvIGBfYCBsZWF2aW5nIGBfLnByb3RvdHlwZWAgdW5jaGFuZ2VkIHRvIGFsbG93IGNoYWluaW5nLlxuICBlYWNoKHBhaXJzLCBmdW5jdGlvbihwYWlyKSB7XG4gICAgX1twYWlyWzBdXSA9IHBhaXJbMV07XG4gIH0pO1xuXG4gIF8uY29udmVydCA9IGNvbnZlcnRMaWI7XG4gIF8ucGxhY2Vob2xkZXIgPSBfO1xuXG4gIC8vIEFzc2lnbiBhbGlhc2VzLlxuICBlYWNoKGtleXMoXyksIGZ1bmN0aW9uKGtleSkge1xuICAgIGVhY2gobWFwcGluZy5yZWFsVG9BbGlhc1trZXldIHx8IFtdLCBmdW5jdGlvbihhbGlhcykge1xuICAgICAgX1thbGlhc10gPSBfW2tleV07XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiBfO1xufVxuXG52YXIgX2Jhc2VDb252ZXJ0ID0gYmFzZUNvbnZlcnQkMTtcblxudmFyIF9tZXRhTWFwO1xudmFyIGhhc1JlcXVpcmVkX21ldGFNYXA7XG5cbmZ1bmN0aW9uIHJlcXVpcmVfbWV0YU1hcCAoKSB7XG5cdGlmIChoYXNSZXF1aXJlZF9tZXRhTWFwKSByZXR1cm4gX21ldGFNYXA7XG5cdGhhc1JlcXVpcmVkX21ldGFNYXAgPSAxO1xuXHR2YXIgV2Vha01hcCA9IF9XZWFrTWFwO1xuXG5cdC8qKiBVc2VkIHRvIHN0b3JlIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xuXHR2YXIgbWV0YU1hcCA9IFdlYWtNYXAgJiYgbmV3IFdlYWtNYXA7XG5cblx0X21ldGFNYXAgPSBtZXRhTWFwO1xuXHRyZXR1cm4gX21ldGFNYXA7XG59XG5cbnZhciBpZGVudGl0eSA9IGlkZW50aXR5XzEsXG4gICAgbWV0YU1hcCA9IHJlcXVpcmVfbWV0YU1hcCgpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXREYXRhYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NvY2lhdGUgbWV0YWRhdGEgd2l0aC5cbiAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWV0YWRhdGEuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICovXG52YXIgYmFzZVNldERhdGEkMiA9ICFtZXRhTWFwID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBkYXRhKSB7XG4gIG1ldGFNYXAuc2V0KGZ1bmMsIGRhdGEpO1xuICByZXR1cm4gZnVuYztcbn07XG5cbnZhciBfYmFzZVNldERhdGEgPSBiYXNlU2V0RGF0YSQyO1xuXG52YXIgYmFzZUNyZWF0ZSA9IF9iYXNlQ3JlYXRlLFxuICAgIGlzT2JqZWN0JDMgPSBpc09iamVjdF8xO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHByb2R1Y2VzIGFuIGluc3RhbmNlIG9mIGBDdG9yYCByZWdhcmRsZXNzIG9mXG4gKiB3aGV0aGVyIGl0IHdhcyBpbnZva2VkIGFzIHBhcnQgb2YgYSBgbmV3YCBleHByZXNzaW9uIG9yIGJ5IGBjYWxsYCBvciBgYXBwbHlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBDdG9yIFRoZSBjb25zdHJ1Y3RvciB0byB3cmFwLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ3RvciQ0KEN0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIC8vIFVzZSBhIGBzd2l0Y2hgIHN0YXRlbWVudCB0byB3b3JrIHdpdGggY2xhc3MgY29uc3RydWN0b3JzLiBTZWVcbiAgICAvLyBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWZ1bmN0aW9uLW9iamVjdHMtY2FsbC10aGlzYXJndW1lbnQtYXJndW1lbnRzbGlzdFxuICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEN0b3I7XG4gICAgICBjYXNlIDE6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdKTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICBjYXNlIDQ6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIGNhc2UgNTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0pO1xuICAgICAgY2FzZSA2OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSk7XG4gICAgICBjYXNlIDc6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdLCBhcmdzWzZdKTtcbiAgICB9XG4gICAgdmFyIHRoaXNCaW5kaW5nID0gYmFzZUNyZWF0ZShDdG9yLnByb3RvdHlwZSksXG4gICAgICAgIHJlc3VsdCA9IEN0b3IuYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuXG4gICAgLy8gTWltaWMgdGhlIGNvbnN0cnVjdG9yJ3MgYHJldHVybmAgYmVoYXZpb3IuXG4gICAgLy8gU2VlIGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDEzLjIuMiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgIHJldHVybiBpc09iamVjdCQzKHJlc3VsdCkgPyByZXN1bHQgOiB0aGlzQmluZGluZztcbiAgfTtcbn1cblxudmFyIF9jcmVhdGVDdG9yID0gY3JlYXRlQ3RvciQ0O1xuXG52YXIgY3JlYXRlQ3RvciQzID0gX2NyZWF0ZUN0b3IsXG4gICAgcm9vdCQzID0gX3Jvb3Q7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xudmFyIFdSQVBfQklORF9GTEFHJDYgPSAxO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCB0aGUgb3B0aW9uYWwgYHRoaXNgXG4gKiBiaW5kaW5nIG9mIGB0aGlzQXJnYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQmluZCQxKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcpIHtcbiAgdmFyIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyQ2LFxuICAgICAgQ3RvciA9IGNyZWF0ZUN0b3IkMyhmdW5jKTtcblxuICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgIHZhciBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QkMyAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcbiAgICByZXR1cm4gZm4uYXBwbHkoaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cbiAgcmV0dXJuIHdyYXBwZXI7XG59XG5cbnZhciBfY3JlYXRlQmluZCA9IGNyZWF0ZUJpbmQkMTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xuXG52YXIgbmF0aXZlTWF4JDIgPSBNYXRoLm1heDtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IHRoYXQgaXMgdGhlIGNvbXBvc2l0aW9uIG9mIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cyxcbiAqIHBsYWNlaG9sZGVycywgYW5kIHByb3ZpZGVkIGFyZ3VtZW50cyBpbnRvIGEgc2luZ2xlIGFycmF5IG9mIGFyZ3VtZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgcHJvdmlkZWQgYXJndW1lbnRzLlxuICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkLlxuICogQHBhcmFtIHtBcnJheX0gaG9sZGVycyBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICogQHBhcmFtcyB7Ym9vbGVhbn0gW2lzQ3VycmllZF0gU3BlY2lmeSBjb21wb3NpbmcgZm9yIGEgY3VycmllZCBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbXBvc2VkIGFyZ3VtZW50cy5cbiAqL1xuZnVuY3Rpb24gY29tcG9zZUFyZ3MkMihhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKSB7XG4gIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgIGhvbGRlcnNMZW5ndGggPSBob2xkZXJzLmxlbmd0aCxcbiAgICAgIGxlZnRJbmRleCA9IC0xLFxuICAgICAgbGVmdExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgIHJhbmdlTGVuZ3RoID0gbmF0aXZlTWF4JDIoYXJnc0xlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobGVmdExlbmd0aCArIHJhbmdlTGVuZ3RoKSxcbiAgICAgIGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZDtcblxuICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgcmVzdWx0W2xlZnRJbmRleF0gPSBwYXJ0aWFsc1tsZWZ0SW5kZXhdO1xuICB9XG4gIHdoaWxlICgrK2FyZ3NJbmRleCA8IGhvbGRlcnNMZW5ndGgpIHtcbiAgICBpZiAoaXNVbmN1cnJpZWQgfHwgYXJnc0luZGV4IDwgYXJnc0xlbmd0aCkge1xuICAgICAgcmVzdWx0W2hvbGRlcnNbYXJnc0luZGV4XV0gPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgfVxuICB9XG4gIHdoaWxlIChyYW5nZUxlbmd0aC0tKSB7XG4gICAgcmVzdWx0W2xlZnRJbmRleCsrXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbnZhciBfY29tcG9zZUFyZ3MgPSBjb21wb3NlQXJncyQyO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG5cbnZhciBuYXRpdmVNYXgkMSA9IE1hdGgubWF4O1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgY29tcG9zZUFyZ3NgIGV4Y2VwdCB0aGF0IHRoZSBhcmd1bWVudHMgY29tcG9zaXRpb25cbiAqIGlzIHRhaWxvcmVkIGZvciBgXy5wYXJ0aWFsUmlnaHRgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIGFwcGVuZCB0byB0aG9zZSBwcm92aWRlZC5cbiAqIEBwYXJhbSB7QXJyYXl9IGhvbGRlcnMgVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAqIEBwYXJhbXMge2Jvb2xlYW59IFtpc0N1cnJpZWRdIFNwZWNpZnkgY29tcG9zaW5nIGZvciBhIGN1cnJpZWQgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21wb3NlZCBhcmd1bWVudHMuXG4gKi9cbmZ1bmN0aW9uIGNvbXBvc2VBcmdzUmlnaHQkMihhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKSB7XG4gIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgIGhvbGRlcnNJbmRleCA9IC0xLFxuICAgICAgaG9sZGVyc0xlbmd0aCA9IGhvbGRlcnMubGVuZ3RoLFxuICAgICAgcmlnaHRJbmRleCA9IC0xLFxuICAgICAgcmlnaHRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICByYW5nZUxlbmd0aCA9IG5hdGl2ZU1heCQxKGFyZ3NMZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KHJhbmdlTGVuZ3RoICsgcmlnaHRMZW5ndGgpLFxuICAgICAgaXNVbmN1cnJpZWQgPSAhaXNDdXJyaWVkO1xuXG4gIHdoaWxlICgrK2FyZ3NJbmRleCA8IHJhbmdlTGVuZ3RoKSB7XG4gICAgcmVzdWx0W2FyZ3NJbmRleF0gPSBhcmdzW2FyZ3NJbmRleF07XG4gIH1cbiAgdmFyIG9mZnNldCA9IGFyZ3NJbmRleDtcbiAgd2hpbGUgKCsrcmlnaHRJbmRleCA8IHJpZ2h0TGVuZ3RoKSB7XG4gICAgcmVzdWx0W29mZnNldCArIHJpZ2h0SW5kZXhdID0gcGFydGlhbHNbcmlnaHRJbmRleF07XG4gIH1cbiAgd2hpbGUgKCsraG9sZGVyc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge1xuICAgIGlmIChpc1VuY3VycmllZCB8fCBhcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7XG4gICAgICByZXN1bHRbb2Zmc2V0ICsgaG9sZGVyc1tob2xkZXJzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG52YXIgX2NvbXBvc2VBcmdzUmlnaHQgPSBjb21wb3NlQXJnc1JpZ2h0JDI7XG5cbi8qKlxuICogR2V0cyB0aGUgbnVtYmVyIG9mIGBwbGFjZWhvbGRlcmAgb2NjdXJyZW5jZXMgaW4gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcGxhY2Vob2xkZXIgY291bnQuXG4gKi9cblxuZnVuY3Rpb24gY291bnRIb2xkZXJzJDEoYXJyYXksIHBsYWNlaG9sZGVyKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSAwO1xuXG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChhcnJheVtsZW5ndGhdID09PSBwbGFjZWhvbGRlcikge1xuICAgICAgKytyZXN1bHQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbnZhciBfY291bnRIb2xkZXJzID0gY291bnRIb2xkZXJzJDE7XG5cbi8qKlxuICogVGhlIGZ1bmN0aW9uIHdob3NlIHByb3RvdHlwZSBjaGFpbiBzZXF1ZW5jZSB3cmFwcGVycyBpbmhlcml0IGZyb20uXG4gKlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgX2Jhc2VMb2Rhc2g7XG52YXIgaGFzUmVxdWlyZWRfYmFzZUxvZGFzaDtcblxuZnVuY3Rpb24gcmVxdWlyZV9iYXNlTG9kYXNoICgpIHtcblx0aWYgKGhhc1JlcXVpcmVkX2Jhc2VMb2Rhc2gpIHJldHVybiBfYmFzZUxvZGFzaDtcblx0aGFzUmVxdWlyZWRfYmFzZUxvZGFzaCA9IDE7XG5cdGZ1bmN0aW9uIGJhc2VMb2Rhc2goKSB7XG5cdCAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cblx0fVxuXG5cdF9iYXNlTG9kYXNoID0gYmFzZUxvZGFzaDtcblx0cmV0dXJuIF9iYXNlTG9kYXNoO1xufVxuXG52YXIgX0xhenlXcmFwcGVyO1xudmFyIGhhc1JlcXVpcmVkX0xhenlXcmFwcGVyO1xuXG5mdW5jdGlvbiByZXF1aXJlX0xhenlXcmFwcGVyICgpIHtcblx0aWYgKGhhc1JlcXVpcmVkX0xhenlXcmFwcGVyKSByZXR1cm4gX0xhenlXcmFwcGVyO1xuXHRoYXNSZXF1aXJlZF9MYXp5V3JhcHBlciA9IDE7XG5cdHZhciBiYXNlQ3JlYXRlID0gX2Jhc2VDcmVhdGUsXG5cdCAgICBiYXNlTG9kYXNoID0gcmVxdWlyZV9iYXNlTG9kYXNoKCk7XG5cblx0LyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdGhlIG1heGltdW0gbGVuZ3RoIGFuZCBpbmRleCBvZiBhbiBhcnJheS4gKi9cblx0dmFyIE1BWF9BUlJBWV9MRU5HVEggPSA0Mjk0OTY3Mjk1O1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgbGF6eSB3cmFwcGVyIG9iamVjdCB3aGljaCB3cmFwcyBgdmFsdWVgIHRvIGVuYWJsZSBsYXp5IGV2YWx1YXRpb24uXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuXHQgKi9cblx0ZnVuY3Rpb24gTGF6eVdyYXBwZXIodmFsdWUpIHtcblx0ICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG5cdCAgdGhpcy5fX2FjdGlvbnNfXyA9IFtdO1xuXHQgIHRoaXMuX19kaXJfXyA9IDE7XG5cdCAgdGhpcy5fX2ZpbHRlcmVkX18gPSBmYWxzZTtcblx0ICB0aGlzLl9faXRlcmF0ZWVzX18gPSBbXTtcblx0ICB0aGlzLl9fdGFrZUNvdW50X18gPSBNQVhfQVJSQVlfTEVOR1RIO1xuXHQgIHRoaXMuX192aWV3c19fID0gW107XG5cdH1cblxuXHQvLyBFbnN1cmUgYExhenlXcmFwcGVyYCBpcyBhbiBpbnN0YW5jZSBvZiBgYmFzZUxvZGFzaGAuXG5cdExhenlXcmFwcGVyLnByb3RvdHlwZSA9IGJhc2VDcmVhdGUoYmFzZUxvZGFzaC5wcm90b3R5cGUpO1xuXHRMYXp5V3JhcHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMYXp5V3JhcHBlcjtcblxuXHRfTGF6eVdyYXBwZXIgPSBMYXp5V3JhcHBlcjtcblx0cmV0dXJuIF9MYXp5V3JhcHBlcjtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB1bmRlZmluZWRgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi4zLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5ub29wKTtcbiAqIC8vID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAqL1xuXG52YXIgbm9vcF8xO1xudmFyIGhhc1JlcXVpcmVkTm9vcDtcblxuZnVuY3Rpb24gcmVxdWlyZU5vb3AgKCkge1xuXHRpZiAoaGFzUmVxdWlyZWROb29wKSByZXR1cm4gbm9vcF8xO1xuXHRoYXNSZXF1aXJlZE5vb3AgPSAxO1xuXHRmdW5jdGlvbiBub29wKCkge1xuXHQgIC8vIE5vIG9wZXJhdGlvbiBwZXJmb3JtZWQuXG5cdH1cblxuXHRub29wXzEgPSBub29wO1xuXHRyZXR1cm4gbm9vcF8xO1xufVxuXG52YXIgX2dldERhdGE7XG52YXIgaGFzUmVxdWlyZWRfZ2V0RGF0YTtcblxuZnVuY3Rpb24gcmVxdWlyZV9nZXREYXRhICgpIHtcblx0aWYgKGhhc1JlcXVpcmVkX2dldERhdGEpIHJldHVybiBfZ2V0RGF0YTtcblx0aGFzUmVxdWlyZWRfZ2V0RGF0YSA9IDE7XG5cdHZhciBtZXRhTWFwID0gcmVxdWlyZV9tZXRhTWFwKCksXG5cdCAgICBub29wID0gcmVxdWlyZU5vb3AoKTtcblxuXHQvKipcblx0ICogR2V0cyBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBxdWVyeS5cblx0ICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1ldGFkYXRhIGZvciBgZnVuY2AuXG5cdCAqL1xuXHR2YXIgZ2V0RGF0YSA9ICFtZXRhTWFwID8gbm9vcCA6IGZ1bmN0aW9uKGZ1bmMpIHtcblx0ICByZXR1cm4gbWV0YU1hcC5nZXQoZnVuYyk7XG5cdH07XG5cblx0X2dldERhdGEgPSBnZXREYXRhO1xuXHRyZXR1cm4gX2dldERhdGE7XG59XG5cbi8qKiBVc2VkIHRvIGxvb2t1cCB1bm1pbmlmaWVkIGZ1bmN0aW9uIG5hbWVzLiAqL1xuXG52YXIgX3JlYWxOYW1lcztcbnZhciBoYXNSZXF1aXJlZF9yZWFsTmFtZXM7XG5cbmZ1bmN0aW9uIHJlcXVpcmVfcmVhbE5hbWVzICgpIHtcblx0aWYgKGhhc1JlcXVpcmVkX3JlYWxOYW1lcykgcmV0dXJuIF9yZWFsTmFtZXM7XG5cdGhhc1JlcXVpcmVkX3JlYWxOYW1lcyA9IDE7XG5cdHZhciByZWFsTmFtZXMgPSB7fTtcblxuXHRfcmVhbE5hbWVzID0gcmVhbE5hbWVzO1xuXHRyZXR1cm4gX3JlYWxOYW1lcztcbn1cblxudmFyIF9nZXRGdW5jTmFtZTtcbnZhciBoYXNSZXF1aXJlZF9nZXRGdW5jTmFtZTtcblxuZnVuY3Rpb24gcmVxdWlyZV9nZXRGdW5jTmFtZSAoKSB7XG5cdGlmIChoYXNSZXF1aXJlZF9nZXRGdW5jTmFtZSkgcmV0dXJuIF9nZXRGdW5jTmFtZTtcblx0aGFzUmVxdWlyZWRfZ2V0RnVuY05hbWUgPSAxO1xuXHR2YXIgcmVhbE5hbWVzID0gcmVxdWlyZV9yZWFsTmFtZXMoKTtcblxuXHQvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG5cdHZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cblx0LyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG5cdHZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBuYW1lIG9mIGBmdW5jYC5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcXVlcnkuXG5cdCAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWUuXG5cdCAqL1xuXHRmdW5jdGlvbiBnZXRGdW5jTmFtZShmdW5jKSB7XG5cdCAgdmFyIHJlc3VsdCA9IChmdW5jLm5hbWUgKyAnJyksXG5cdCAgICAgIGFycmF5ID0gcmVhbE5hbWVzW3Jlc3VsdF0sXG5cdCAgICAgIGxlbmd0aCA9IGhhc093blByb3BlcnR5LmNhbGwocmVhbE5hbWVzLCByZXN1bHQpID8gYXJyYXkubGVuZ3RoIDogMDtcblxuXHQgIHdoaWxlIChsZW5ndGgtLSkge1xuXHQgICAgdmFyIGRhdGEgPSBhcnJheVtsZW5ndGhdLFxuXHQgICAgICAgIG90aGVyRnVuYyA9IGRhdGEuZnVuYztcblx0ICAgIGlmIChvdGhlckZ1bmMgPT0gbnVsbCB8fCBvdGhlckZ1bmMgPT0gZnVuYykge1xuXHQgICAgICByZXR1cm4gZGF0YS5uYW1lO1xuXHQgICAgfVxuXHQgIH1cblx0ICByZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0X2dldEZ1bmNOYW1lID0gZ2V0RnVuY05hbWU7XG5cdHJldHVybiBfZ2V0RnVuY05hbWU7XG59XG5cbnZhciBfTG9kYXNoV3JhcHBlcjtcbnZhciBoYXNSZXF1aXJlZF9Mb2Rhc2hXcmFwcGVyO1xuXG5mdW5jdGlvbiByZXF1aXJlX0xvZGFzaFdyYXBwZXIgKCkge1xuXHRpZiAoaGFzUmVxdWlyZWRfTG9kYXNoV3JhcHBlcikgcmV0dXJuIF9Mb2Rhc2hXcmFwcGVyO1xuXHRoYXNSZXF1aXJlZF9Mb2Rhc2hXcmFwcGVyID0gMTtcblx0dmFyIGJhc2VDcmVhdGUgPSBfYmFzZUNyZWF0ZSxcblx0ICAgIGJhc2VMb2Rhc2ggPSByZXF1aXJlX2Jhc2VMb2Rhc2goKTtcblxuXHQvKipcblx0ICogVGhlIGJhc2UgY29uc3RydWN0b3IgZm9yIGNyZWF0aW5nIGBsb2Rhc2hgIHdyYXBwZXIgb2JqZWN0cy5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cblx0ICogQHBhcmFtIHtib29sZWFufSBbY2hhaW5BbGxdIEVuYWJsZSBleHBsaWNpdCBtZXRob2QgY2hhaW4gc2VxdWVuY2VzLlxuXHQgKi9cblx0ZnVuY3Rpb24gTG9kYXNoV3JhcHBlcih2YWx1ZSwgY2hhaW5BbGwpIHtcblx0ICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG5cdCAgdGhpcy5fX2FjdGlvbnNfXyA9IFtdO1xuXHQgIHRoaXMuX19jaGFpbl9fID0gISFjaGFpbkFsbDtcblx0ICB0aGlzLl9faW5kZXhfXyA9IDA7XG5cdCAgdGhpcy5fX3ZhbHVlc19fID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0TG9kYXNoV3JhcHBlci5wcm90b3R5cGUgPSBiYXNlQ3JlYXRlKGJhc2VMb2Rhc2gucHJvdG90eXBlKTtcblx0TG9kYXNoV3JhcHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMb2Rhc2hXcmFwcGVyO1xuXG5cdF9Mb2Rhc2hXcmFwcGVyID0gTG9kYXNoV3JhcHBlcjtcblx0cmV0dXJuIF9Mb2Rhc2hXcmFwcGVyO1xufVxuXG52YXIgX3dyYXBwZXJDbG9uZTtcbnZhciBoYXNSZXF1aXJlZF93cmFwcGVyQ2xvbmU7XG5cbmZ1bmN0aW9uIHJlcXVpcmVfd3JhcHBlckNsb25lICgpIHtcblx0aWYgKGhhc1JlcXVpcmVkX3dyYXBwZXJDbG9uZSkgcmV0dXJuIF93cmFwcGVyQ2xvbmU7XG5cdGhhc1JlcXVpcmVkX3dyYXBwZXJDbG9uZSA9IDE7XG5cdHZhciBMYXp5V3JhcHBlciA9IHJlcXVpcmVfTGF6eVdyYXBwZXIoKSxcblx0ICAgIExvZGFzaFdyYXBwZXIgPSByZXF1aXJlX0xvZGFzaFdyYXBwZXIoKSxcblx0ICAgIGNvcHlBcnJheSA9IF9jb3B5QXJyYXk7XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgd3JhcHBlcmAuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSB3cmFwcGVyIFRoZSB3cmFwcGVyIHRvIGNsb25lLlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgd3JhcHBlci5cblx0ICovXG5cdGZ1bmN0aW9uIHdyYXBwZXJDbG9uZSh3cmFwcGVyKSB7XG5cdCAgaWYgKHdyYXBwZXIgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuXHQgICAgcmV0dXJuIHdyYXBwZXIuY2xvbmUoKTtcblx0ICB9XG5cdCAgdmFyIHJlc3VsdCA9IG5ldyBMb2Rhc2hXcmFwcGVyKHdyYXBwZXIuX193cmFwcGVkX18sIHdyYXBwZXIuX19jaGFpbl9fKTtcblx0ICByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkod3JhcHBlci5fX2FjdGlvbnNfXyk7XG5cdCAgcmVzdWx0Ll9faW5kZXhfXyAgPSB3cmFwcGVyLl9faW5kZXhfXztcblx0ICByZXN1bHQuX192YWx1ZXNfXyA9IHdyYXBwZXIuX192YWx1ZXNfXztcblx0ICByZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0X3dyYXBwZXJDbG9uZSA9IHdyYXBwZXJDbG9uZTtcblx0cmV0dXJuIF93cmFwcGVyQ2xvbmU7XG59XG5cbnZhciB3cmFwcGVyTG9kYXNoO1xudmFyIGhhc1JlcXVpcmVkV3JhcHBlckxvZGFzaDtcblxuZnVuY3Rpb24gcmVxdWlyZVdyYXBwZXJMb2Rhc2ggKCkge1xuXHRpZiAoaGFzUmVxdWlyZWRXcmFwcGVyTG9kYXNoKSByZXR1cm4gd3JhcHBlckxvZGFzaDtcblx0aGFzUmVxdWlyZWRXcmFwcGVyTG9kYXNoID0gMTtcblx0dmFyIExhenlXcmFwcGVyID0gcmVxdWlyZV9MYXp5V3JhcHBlcigpLFxuXHQgICAgTG9kYXNoV3JhcHBlciA9IHJlcXVpcmVfTG9kYXNoV3JhcHBlcigpLFxuXHQgICAgYmFzZUxvZGFzaCA9IHJlcXVpcmVfYmFzZUxvZGFzaCgpLFxuXHQgICAgaXNBcnJheSA9IGlzQXJyYXlfMSxcblx0ICAgIGlzT2JqZWN0TGlrZSA9IGlzT2JqZWN0TGlrZV8xLFxuXHQgICAgd3JhcHBlckNsb25lID0gcmVxdWlyZV93cmFwcGVyQ2xvbmUoKTtcblxuXHQvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG5cdHZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cblx0LyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG5cdHZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgYGxvZGFzaGAgb2JqZWN0IHdoaWNoIHdyYXBzIGB2YWx1ZWAgdG8gZW5hYmxlIGltcGxpY2l0IG1ldGhvZFxuXHQgKiBjaGFpbiBzZXF1ZW5jZXMuIE1ldGhvZHMgdGhhdCBvcGVyYXRlIG9uIGFuZCByZXR1cm4gYXJyYXlzLCBjb2xsZWN0aW9ucyxcblx0ICogYW5kIGZ1bmN0aW9ucyBjYW4gYmUgY2hhaW5lZCB0b2dldGhlci4gTWV0aG9kcyB0aGF0IHJldHJpZXZlIGEgc2luZ2xlIHZhbHVlXG5cdCAqIG9yIG1heSByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUgd2lsbCBhdXRvbWF0aWNhbGx5IGVuZCB0aGUgY2hhaW4gc2VxdWVuY2Vcblx0ICogYW5kIHJldHVybiB0aGUgdW53cmFwcGVkIHZhbHVlLiBPdGhlcndpc2UsIHRoZSB2YWx1ZSBtdXN0IGJlIHVud3JhcHBlZFxuXHQgKiB3aXRoIGBfI3ZhbHVlYC5cblx0ICpcblx0ICogRXhwbGljaXQgY2hhaW4gc2VxdWVuY2VzLCB3aGljaCBtdXN0IGJlIHVud3JhcHBlZCB3aXRoIGBfI3ZhbHVlYCwgbWF5IGJlXG5cdCAqIGVuYWJsZWQgdXNpbmcgYF8uY2hhaW5gLlxuXHQgKlxuXHQgKiBUaGUgZXhlY3V0aW9uIG9mIGNoYWluZWQgbWV0aG9kcyBpcyBsYXp5LCB0aGF0IGlzLCBpdCdzIGRlZmVycmVkIHVudGlsXG5cdCAqIGBfI3ZhbHVlYCBpcyBpbXBsaWNpdGx5IG9yIGV4cGxpY2l0bHkgY2FsbGVkLlxuXHQgKlxuXHQgKiBMYXp5IGV2YWx1YXRpb24gYWxsb3dzIHNldmVyYWwgbWV0aG9kcyB0byBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbi5cblx0ICogU2hvcnRjdXQgZnVzaW9uIGlzIGFuIG9wdGltaXphdGlvbiB0byBtZXJnZSBpdGVyYXRlZSBjYWxsczsgdGhpcyBhdm9pZHNcblx0ICogdGhlIGNyZWF0aW9uIG9mIGludGVybWVkaWF0ZSBhcnJheXMgYW5kIGNhbiBncmVhdGx5IHJlZHVjZSB0aGUgbnVtYmVyIG9mXG5cdCAqIGl0ZXJhdGVlIGV4ZWN1dGlvbnMuIFNlY3Rpb25zIG9mIGEgY2hhaW4gc2VxdWVuY2UgcXVhbGlmeSBmb3Igc2hvcnRjdXRcblx0ICogZnVzaW9uIGlmIHRoZSBzZWN0aW9uIGlzIGFwcGxpZWQgdG8gYW4gYXJyYXkgYW5kIGl0ZXJhdGVlcyBhY2NlcHQgb25seVxuXHQgKiBvbmUgYXJndW1lbnQuIFRoZSBoZXVyaXN0aWMgZm9yIHdoZXRoZXIgYSBzZWN0aW9uIHF1YWxpZmllcyBmb3Igc2hvcnRjdXRcblx0ICogZnVzaW9uIGlzIHN1YmplY3QgdG8gY2hhbmdlLlxuXHQgKlxuXHQgKiBDaGFpbmluZyBpcyBzdXBwb3J0ZWQgaW4gY3VzdG9tIGJ1aWxkcyBhcyBsb25nIGFzIHRoZSBgXyN2YWx1ZWAgbWV0aG9kIGlzXG5cdCAqIGRpcmVjdGx5IG9yIGluZGlyZWN0bHkgaW5jbHVkZWQgaW4gdGhlIGJ1aWxkLlxuXHQgKlxuXHQgKiBJbiBhZGRpdGlvbiB0byBsb2Rhc2ggbWV0aG9kcywgd3JhcHBlcnMgaGF2ZSBgQXJyYXlgIGFuZCBgU3RyaW5nYCBtZXRob2RzLlxuXHQgKlxuXHQgKiBUaGUgd3JhcHBlciBgQXJyYXlgIG1ldGhvZHMgYXJlOlxuXHQgKiBgY29uY2F0YCwgYGpvaW5gLCBgcG9wYCwgYHB1c2hgLCBgc2hpZnRgLCBgc29ydGAsIGBzcGxpY2VgLCBhbmQgYHVuc2hpZnRgXG5cdCAqXG5cdCAqIFRoZSB3cmFwcGVyIGBTdHJpbmdgIG1ldGhvZHMgYXJlOlxuXHQgKiBgcmVwbGFjZWAgYW5kIGBzcGxpdGBcblx0ICpcblx0ICogVGhlIHdyYXBwZXIgbWV0aG9kcyB0aGF0IHN1cHBvcnQgc2hvcnRjdXQgZnVzaW9uIGFyZTpcblx0ICogYGF0YCwgYGNvbXBhY3RgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZHJvcFdoaWxlYCwgYGZpbHRlcmAsIGBmaW5kYCxcblx0ICogYGZpbmRMYXN0YCwgYGhlYWRgLCBgaW5pdGlhbGAsIGBsYXN0YCwgYG1hcGAsIGByZWplY3RgLCBgcmV2ZXJzZWAsIGBzbGljZWAsXG5cdCAqIGB0YWlsYCwgYHRha2VgLCBgdGFrZVJpZ2h0YCwgYHRha2VSaWdodFdoaWxlYCwgYHRha2VXaGlsZWAsIGFuZCBgdG9BcnJheWBcblx0ICpcblx0ICogVGhlIGNoYWluYWJsZSB3cmFwcGVyIG1ldGhvZHMgYXJlOlxuXHQgKiBgYWZ0ZXJgLCBgYXJ5YCwgYGFzc2lnbmAsIGBhc3NpZ25JbmAsIGBhc3NpZ25JbldpdGhgLCBgYXNzaWduV2l0aGAsIGBhdGAsXG5cdCAqIGBiZWZvcmVgLCBgYmluZGAsIGBiaW5kQWxsYCwgYGJpbmRLZXlgLCBgY2FzdEFycmF5YCwgYGNoYWluYCwgYGNodW5rYCxcblx0ICogYGNvbW1pdGAsIGBjb21wYWN0YCwgYGNvbmNhdGAsIGBjb25mb3Jtc2AsIGBjb25zdGFudGAsIGBjb3VudEJ5YCwgYGNyZWF0ZWAsXG5cdCAqIGBjdXJyeWAsIGBkZWJvdW5jZWAsIGBkZWZhdWx0c2AsIGBkZWZhdWx0c0RlZXBgLCBgZGVmZXJgLCBgZGVsYXlgLFxuXHQgKiBgZGlmZmVyZW5jZWAsIGBkaWZmZXJlbmNlQnlgLCBgZGlmZmVyZW5jZVdpdGhgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLFxuXHQgKiBgZHJvcFJpZ2h0V2hpbGVgLCBgZHJvcFdoaWxlYCwgYGV4dGVuZGAsIGBleHRlbmRXaXRoYCwgYGZpbGxgLCBgZmlsdGVyYCxcblx0ICogYGZsYXRNYXBgLCBgZmxhdE1hcERlZXBgLCBgZmxhdE1hcERlcHRoYCwgYGZsYXR0ZW5gLCBgZmxhdHRlbkRlZXBgLFxuXHQgKiBgZmxhdHRlbkRlcHRoYCwgYGZsaXBgLCBgZmxvd2AsIGBmbG93UmlnaHRgLCBgZnJvbVBhaXJzYCwgYGZ1bmN0aW9uc2AsXG5cdCAqIGBmdW5jdGlvbnNJbmAsIGBncm91cEJ5YCwgYGluaXRpYWxgLCBgaW50ZXJzZWN0aW9uYCwgYGludGVyc2VjdGlvbkJ5YCxcblx0ICogYGludGVyc2VjdGlvbldpdGhgLCBgaW52ZXJ0YCwgYGludmVydEJ5YCwgYGludm9rZU1hcGAsIGBpdGVyYXRlZWAsIGBrZXlCeWAsXG5cdCAqIGBrZXlzYCwgYGtleXNJbmAsIGBtYXBgLCBgbWFwS2V5c2AsIGBtYXBWYWx1ZXNgLCBgbWF0Y2hlc2AsIGBtYXRjaGVzUHJvcGVydHlgLFxuXHQgKiBgbWVtb2l6ZWAsIGBtZXJnZWAsIGBtZXJnZVdpdGhgLCBgbWV0aG9kYCwgYG1ldGhvZE9mYCwgYG1peGluYCwgYG5lZ2F0ZWAsXG5cdCAqIGBudGhBcmdgLCBgb21pdGAsIGBvbWl0QnlgLCBgb25jZWAsIGBvcmRlckJ5YCwgYG92ZXJgLCBgb3ZlckFyZ3NgLFxuXHQgKiBgb3ZlckV2ZXJ5YCwgYG92ZXJTb21lYCwgYHBhcnRpYWxgLCBgcGFydGlhbFJpZ2h0YCwgYHBhcnRpdGlvbmAsIGBwaWNrYCxcblx0ICogYHBpY2tCeWAsIGBwbGFudGAsIGBwcm9wZXJ0eWAsIGBwcm9wZXJ0eU9mYCwgYHB1bGxgLCBgcHVsbEFsbGAsIGBwdWxsQWxsQnlgLFxuXHQgKiBgcHVsbEFsbFdpdGhgLCBgcHVsbEF0YCwgYHB1c2hgLCBgcmFuZ2VgLCBgcmFuZ2VSaWdodGAsIGByZWFyZ2AsIGByZWplY3RgLFxuXHQgKiBgcmVtb3ZlYCwgYHJlc3RgLCBgcmV2ZXJzZWAsIGBzYW1wbGVTaXplYCwgYHNldGAsIGBzZXRXaXRoYCwgYHNodWZmbGVgLFxuXHQgKiBgc2xpY2VgLCBgc29ydGAsIGBzb3J0QnlgLCBgc3BsaWNlYCwgYHNwcmVhZGAsIGB0YWlsYCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcblx0ICogYHRha2VSaWdodFdoaWxlYCwgYHRha2VXaGlsZWAsIGB0YXBgLCBgdGhyb3R0bGVgLCBgdGhydWAsIGB0b0FycmF5YCxcblx0ICogYHRvUGFpcnNgLCBgdG9QYWlyc0luYCwgYHRvUGF0aGAsIGB0b1BsYWluT2JqZWN0YCwgYHRyYW5zZm9ybWAsIGB1bmFyeWAsXG5cdCAqIGB1bmlvbmAsIGB1bmlvbkJ5YCwgYHVuaW9uV2l0aGAsIGB1bmlxYCwgYHVuaXFCeWAsIGB1bmlxV2l0aGAsIGB1bnNldGAsXG5cdCAqIGB1bnNoaWZ0YCwgYHVuemlwYCwgYHVuemlwV2l0aGAsIGB1cGRhdGVgLCBgdXBkYXRlV2l0aGAsIGB2YWx1ZXNgLFxuXHQgKiBgdmFsdWVzSW5gLCBgd2l0aG91dGAsIGB3cmFwYCwgYHhvcmAsIGB4b3JCeWAsIGB4b3JXaXRoYCwgYHppcGAsXG5cdCAqIGB6aXBPYmplY3RgLCBgemlwT2JqZWN0RGVlcGAsIGFuZCBgemlwV2l0aGBcblx0ICpcblx0ICogVGhlIHdyYXBwZXIgbWV0aG9kcyB0aGF0IGFyZSAqKm5vdCoqIGNoYWluYWJsZSBieSBkZWZhdWx0IGFyZTpcblx0ICogYGFkZGAsIGBhdHRlbXB0YCwgYGNhbWVsQ2FzZWAsIGBjYXBpdGFsaXplYCwgYGNlaWxgLCBgY2xhbXBgLCBgY2xvbmVgLFxuXHQgKiBgY2xvbmVEZWVwYCwgYGNsb25lRGVlcFdpdGhgLCBgY2xvbmVXaXRoYCwgYGNvbmZvcm1zVG9gLCBgZGVidXJyYCxcblx0ICogYGRlZmF1bHRUb2AsIGBkaXZpZGVgLCBgZWFjaGAsIGBlYWNoUmlnaHRgLCBgZW5kc1dpdGhgLCBgZXFgLCBgZXNjYXBlYCxcblx0ICogYGVzY2FwZVJlZ0V4cGAsIGBldmVyeWAsIGBmaW5kYCwgYGZpbmRJbmRleGAsIGBmaW5kS2V5YCwgYGZpbmRMYXN0YCxcblx0ICogYGZpbmRMYXN0SW5kZXhgLCBgZmluZExhc3RLZXlgLCBgZmlyc3RgLCBgZmxvb3JgLCBgZm9yRWFjaGAsIGBmb3JFYWNoUmlnaHRgLFxuXHQgKiBgZm9ySW5gLCBgZm9ySW5SaWdodGAsIGBmb3JPd25gLCBgZm9yT3duUmlnaHRgLCBgZ2V0YCwgYGd0YCwgYGd0ZWAsIGBoYXNgLFxuXHQgKiBgaGFzSW5gLCBgaGVhZGAsIGBpZGVudGl0eWAsIGBpbmNsdWRlc2AsIGBpbmRleE9mYCwgYGluUmFuZ2VgLCBgaW52b2tlYCxcblx0ICogYGlzQXJndW1lbnRzYCwgYGlzQXJyYXlgLCBgaXNBcnJheUJ1ZmZlcmAsIGBpc0FycmF5TGlrZWAsIGBpc0FycmF5TGlrZU9iamVjdGAsXG5cdCAqIGBpc0Jvb2xlYW5gLCBgaXNCdWZmZXJgLCBgaXNEYXRlYCwgYGlzRWxlbWVudGAsIGBpc0VtcHR5YCwgYGlzRXF1YWxgLFxuXHQgKiBgaXNFcXVhbFdpdGhgLCBgaXNFcnJvcmAsIGBpc0Zpbml0ZWAsIGBpc0Z1bmN0aW9uYCwgYGlzSW50ZWdlcmAsIGBpc0xlbmd0aGAsXG5cdCAqIGBpc01hcGAsIGBpc01hdGNoYCwgYGlzTWF0Y2hXaXRoYCwgYGlzTmFOYCwgYGlzTmF0aXZlYCwgYGlzTmlsYCwgYGlzTnVsbGAsXG5cdCAqIGBpc051bWJlcmAsIGBpc09iamVjdGAsIGBpc09iamVjdExpa2VgLCBgaXNQbGFpbk9iamVjdGAsIGBpc1JlZ0V4cGAsXG5cdCAqIGBpc1NhZmVJbnRlZ2VyYCwgYGlzU2V0YCwgYGlzU3RyaW5nYCwgYGlzVW5kZWZpbmVkYCwgYGlzVHlwZWRBcnJheWAsXG5cdCAqIGBpc1dlYWtNYXBgLCBgaXNXZWFrU2V0YCwgYGpvaW5gLCBga2ViYWJDYXNlYCwgYGxhc3RgLCBgbGFzdEluZGV4T2ZgLFxuXHQgKiBgbG93ZXJDYXNlYCwgYGxvd2VyRmlyc3RgLCBgbHRgLCBgbHRlYCwgYG1heGAsIGBtYXhCeWAsIGBtZWFuYCwgYG1lYW5CeWAsXG5cdCAqIGBtaW5gLCBgbWluQnlgLCBgbXVsdGlwbHlgLCBgbm9Db25mbGljdGAsIGBub29wYCwgYG5vd2AsIGBudGhgLCBgcGFkYCxcblx0ICogYHBhZEVuZGAsIGBwYWRTdGFydGAsIGBwYXJzZUludGAsIGBwb3BgLCBgcmFuZG9tYCwgYHJlZHVjZWAsIGByZWR1Y2VSaWdodGAsXG5cdCAqIGByZXBlYXRgLCBgcmVzdWx0YCwgYHJvdW5kYCwgYHJ1bkluQ29udGV4dGAsIGBzYW1wbGVgLCBgc2hpZnRgLCBgc2l6ZWAsXG5cdCAqIGBzbmFrZUNhc2VgLCBgc29tZWAsIGBzb3J0ZWRJbmRleGAsIGBzb3J0ZWRJbmRleEJ5YCwgYHNvcnRlZExhc3RJbmRleGAsXG5cdCAqIGBzb3J0ZWRMYXN0SW5kZXhCeWAsIGBzdGFydENhc2VgLCBgc3RhcnRzV2l0aGAsIGBzdHViQXJyYXlgLCBgc3R1YkZhbHNlYCxcblx0ICogYHN0dWJPYmplY3RgLCBgc3R1YlN0cmluZ2AsIGBzdHViVHJ1ZWAsIGBzdWJ0cmFjdGAsIGBzdW1gLCBgc3VtQnlgLFxuXHQgKiBgdGVtcGxhdGVgLCBgdGltZXNgLCBgdG9GaW5pdGVgLCBgdG9JbnRlZ2VyYCwgYHRvSlNPTmAsIGB0b0xlbmd0aGAsXG5cdCAqIGB0b0xvd2VyYCwgYHRvTnVtYmVyYCwgYHRvU2FmZUludGVnZXJgLCBgdG9TdHJpbmdgLCBgdG9VcHBlcmAsIGB0cmltYCxcblx0ICogYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYHRydW5jYXRlYCwgYHVuZXNjYXBlYCwgYHVuaXF1ZUlkYCwgYHVwcGVyQ2FzZWAsXG5cdCAqIGB1cHBlckZpcnN0YCwgYHZhbHVlYCwgYW5kIGB3b3Jkc2Bcblx0ICpcblx0ICogQG5hbWUgX1xuXHQgKiBAY29uc3RydWN0b3Jcblx0ICogQGNhdGVnb3J5IFNlcVxuXHQgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwIGluIGEgYGxvZGFzaGAgaW5zdGFuY2UuXG5cdCAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuXHQgKiBAZXhhbXBsZVxuXHQgKlxuXHQgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuXHQgKiAgIHJldHVybiBuICogbjtcblx0ICogfVxuXHQgKlxuXHQgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDIsIDNdKTtcblx0ICpcblx0ICogLy8gUmV0dXJucyBhbiB1bndyYXBwZWQgdmFsdWUuXG5cdCAqIHdyYXBwZWQucmVkdWNlKF8uYWRkKTtcblx0ICogLy8gPT4gNlxuXHQgKlxuXHQgKiAvLyBSZXR1cm5zIGEgd3JhcHBlZCB2YWx1ZS5cblx0ICogdmFyIHNxdWFyZXMgPSB3cmFwcGVkLm1hcChzcXVhcmUpO1xuXHQgKlxuXHQgKiBfLmlzQXJyYXkoc3F1YXJlcyk7XG5cdCAqIC8vID0+IGZhbHNlXG5cdCAqXG5cdCAqIF8uaXNBcnJheShzcXVhcmVzLnZhbHVlKCkpO1xuXHQgKiAvLyA9PiB0cnVlXG5cdCAqL1xuXHRmdW5jdGlvbiBsb2Rhc2godmFsdWUpIHtcblx0ICBpZiAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNBcnJheSh2YWx1ZSkgJiYgISh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSkge1xuXHQgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTG9kYXNoV3JhcHBlcikge1xuXHQgICAgICByZXR1cm4gdmFsdWU7XG5cdCAgICB9XG5cdCAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ19fd3JhcHBlZF9fJykpIHtcblx0ICAgICAgcmV0dXJuIHdyYXBwZXJDbG9uZSh2YWx1ZSk7XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih2YWx1ZSk7XG5cdH1cblxuXHQvLyBFbnN1cmUgd3JhcHBlcnMgYXJlIGluc3RhbmNlcyBvZiBgYmFzZUxvZGFzaGAuXG5cdGxvZGFzaC5wcm90b3R5cGUgPSBiYXNlTG9kYXNoLnByb3RvdHlwZTtcblx0bG9kYXNoLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGxvZGFzaDtcblxuXHR3cmFwcGVyTG9kYXNoID0gbG9kYXNoO1xuXHRyZXR1cm4gd3JhcHBlckxvZGFzaDtcbn1cblxudmFyIF9pc0xhemlhYmxlO1xudmFyIGhhc1JlcXVpcmVkX2lzTGF6aWFibGU7XG5cbmZ1bmN0aW9uIHJlcXVpcmVfaXNMYXppYWJsZSAoKSB7XG5cdGlmIChoYXNSZXF1aXJlZF9pc0xhemlhYmxlKSByZXR1cm4gX2lzTGF6aWFibGU7XG5cdGhhc1JlcXVpcmVkX2lzTGF6aWFibGUgPSAxO1xuXHR2YXIgTGF6eVdyYXBwZXIgPSByZXF1aXJlX0xhenlXcmFwcGVyKCksXG5cdCAgICBnZXREYXRhID0gcmVxdWlyZV9nZXREYXRhKCksXG5cdCAgICBnZXRGdW5jTmFtZSA9IHJlcXVpcmVfZ2V0RnVuY05hbWUoKSxcblx0ICAgIGxvZGFzaCA9IHJlcXVpcmVXcmFwcGVyTG9kYXNoKCk7XG5cblx0LyoqXG5cdCAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGEgbGF6eSBjb3VudGVycGFydC5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaGFzIGEgbGF6eSBjb3VudGVycGFydCxcblx0ICogIGVsc2UgYGZhbHNlYC5cblx0ICovXG5cdGZ1bmN0aW9uIGlzTGF6aWFibGUoZnVuYykge1xuXHQgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLFxuXHQgICAgICBvdGhlciA9IGxvZGFzaFtmdW5jTmFtZV07XG5cblx0ICBpZiAodHlwZW9mIG90aGVyICE9ICdmdW5jdGlvbicgfHwgIShmdW5jTmFtZSBpbiBMYXp5V3JhcHBlci5wcm90b3R5cGUpKSB7XG5cdCAgICByZXR1cm4gZmFsc2U7XG5cdCAgfVxuXHQgIGlmIChmdW5jID09PSBvdGhlcikge1xuXHQgICAgcmV0dXJuIHRydWU7XG5cdCAgfVxuXHQgIHZhciBkYXRhID0gZ2V0RGF0YShvdGhlcik7XG5cdCAgcmV0dXJuICEhZGF0YSAmJiBmdW5jID09PSBkYXRhWzBdO1xuXHR9XG5cblx0X2lzTGF6aWFibGUgPSBpc0xhemlhYmxlO1xuXHRyZXR1cm4gX2lzTGF6aWFibGU7XG59XG5cbnZhciBiYXNlU2V0RGF0YSQxID0gX2Jhc2VTZXREYXRhLFxuICAgIHNob3J0T3V0ID0gX3Nob3J0T3V0O1xuXG4vKipcbiAqIFNldHMgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAqXG4gKiAqKk5vdGU6KiogSWYgdGhpcyBmdW5jdGlvbiBiZWNvbWVzIGhvdCwgaS5lLiBpcyBpbnZva2VkIGEgbG90IGluIGEgc2hvcnRcbiAqIHBlcmlvZCBvZiB0aW1lLCBpdCB3aWxsIHRyaXAgaXRzIGJyZWFrZXIgYW5kIHRyYW5zaXRpb24gdG8gYW4gaWRlbnRpdHlcbiAqIGZ1bmN0aW9uIHRvIGF2b2lkIGdhcmJhZ2UgY29sbGVjdGlvbiBwYXVzZXMgaW4gVjguIFNlZVxuICogW1Y4IGlzc3VlIDIwNzBdKGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTIwNzApXG4gKiBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NvY2lhdGUgbWV0YWRhdGEgd2l0aC5cbiAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWV0YWRhdGEuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICovXG52YXIgc2V0RGF0YSQyID0gc2hvcnRPdXQoYmFzZVNldERhdGEkMSk7XG5cbnZhciBfc2V0RGF0YSA9IHNldERhdGEkMjtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggd3JhcCBkZXRhaWwgY29tbWVudHMuICovXG5cbnZhciByZVdyYXBEZXRhaWxzID0gL1xce1xcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggKC4rKVxcXSBcXCovLFxuICAgIHJlU3BsaXREZXRhaWxzID0gLyw/ICYgLztcblxuLyoqXG4gKiBFeHRyYWN0cyB3cmFwcGVyIGRldGFpbHMgZnJvbSB0aGUgYHNvdXJjZWAgYm9keSBjb21tZW50LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFRoZSBzb3VyY2UgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd3JhcHBlciBkZXRhaWxzLlxuICovXG5mdW5jdGlvbiBnZXRXcmFwRGV0YWlscyQxKHNvdXJjZSkge1xuICB2YXIgbWF0Y2ggPSBzb3VyY2UubWF0Y2gocmVXcmFwRGV0YWlscyk7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdLnNwbGl0KHJlU3BsaXREZXRhaWxzKSA6IFtdO1xufVxuXG52YXIgX2dldFdyYXBEZXRhaWxzID0gZ2V0V3JhcERldGFpbHMkMTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggd3JhcCBkZXRhaWwgY29tbWVudHMuICovXG5cbnZhciByZVdyYXBDb21tZW50ID0gL1xceyg/OlxcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggLitcXF0gXFwqXFwvKT9cXG4/LztcblxuLyoqXG4gKiBJbnNlcnRzIHdyYXBwZXIgYGRldGFpbHNgIGluIGEgY29tbWVudCBhdCB0aGUgdG9wIG9mIHRoZSBgc291cmNlYCBib2R5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFRoZSBzb3VyY2UgdG8gbW9kaWZ5LlxuICogQHJldHVybnMge0FycmF5fSBkZXRhaWxzIFRoZSBkZXRhaWxzIHRvIGluc2VydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIG1vZGlmaWVkIHNvdXJjZS5cbiAqL1xuZnVuY3Rpb24gaW5zZXJ0V3JhcERldGFpbHMkMShzb3VyY2UsIGRldGFpbHMpIHtcbiAgdmFyIGxlbmd0aCA9IGRldGFpbHMubGVuZ3RoO1xuICBpZiAoIWxlbmd0aCkge1xuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG4gIGRldGFpbHNbbGFzdEluZGV4XSA9IChsZW5ndGggPiAxID8gJyYgJyA6ICcnKSArIGRldGFpbHNbbGFzdEluZGV4XTtcbiAgZGV0YWlscyA9IGRldGFpbHMuam9pbihsZW5ndGggPiAyID8gJywgJyA6ICcgJyk7XG4gIHJldHVybiBzb3VyY2UucmVwbGFjZShyZVdyYXBDb21tZW50LCAne1xcbi8qIFt3cmFwcGVkIHdpdGggJyArIGRldGFpbHMgKyAnXSAqL1xcbicpO1xufVxuXG52YXIgX2luc2VydFdyYXBEZXRhaWxzID0gaW5zZXJ0V3JhcERldGFpbHMkMTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maW5kSW5kZXhgIGFuZCBgXy5maW5kTGFzdEluZGV4YCB3aXRob3V0XG4gKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cblxudmFyIF9iYXNlRmluZEluZGV4O1xudmFyIGhhc1JlcXVpcmVkX2Jhc2VGaW5kSW5kZXg7XG5cbmZ1bmN0aW9uIHJlcXVpcmVfYmFzZUZpbmRJbmRleCAoKSB7XG5cdGlmIChoYXNSZXF1aXJlZF9iYXNlRmluZEluZGV4KSByZXR1cm4gX2Jhc2VGaW5kSW5kZXg7XG5cdGhhc1JlcXVpcmVkX2Jhc2VGaW5kSW5kZXggPSAxO1xuXHRmdW5jdGlvbiBiYXNlRmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCwgZnJvbVJpZ2h0KSB7XG5cdCAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcblx0ICAgICAgaW5kZXggPSBmcm9tSW5kZXggKyAoZnJvbVJpZ2h0ID8gMSA6IC0xKTtcblxuXHQgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG5cdCAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuXHQgICAgICByZXR1cm4gaW5kZXg7XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiAtMTtcblx0fVxuXG5cdF9iYXNlRmluZEluZGV4ID0gYmFzZUZpbmRJbmRleDtcblx0cmV0dXJuIF9iYXNlRmluZEluZGV4O1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmFOYCB3aXRob3V0IHN1cHBvcnQgZm9yIG51bWJlciBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBlbHNlIGBmYWxzZWAuXG4gKi9cblxudmFyIF9iYXNlSXNOYU47XG52YXIgaGFzUmVxdWlyZWRfYmFzZUlzTmFOO1xuXG5mdW5jdGlvbiByZXF1aXJlX2Jhc2VJc05hTiAoKSB7XG5cdGlmIChoYXNSZXF1aXJlZF9iYXNlSXNOYU4pIHJldHVybiBfYmFzZUlzTmFOO1xuXHRoYXNSZXF1aXJlZF9iYXNlSXNOYU4gPSAxO1xuXHRmdW5jdGlvbiBiYXNlSXNOYU4odmFsdWUpIHtcblx0ICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xuXHR9XG5cblx0X2Jhc2VJc05hTiA9IGJhc2VJc05hTjtcblx0cmV0dXJuIF9iYXNlSXNOYU47XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluZGV4T2ZgIHdoaWNoIHBlcmZvcm1zIHN0cmljdCBlcXVhbGl0eVxuICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cblxudmFyIF9zdHJpY3RJbmRleE9mO1xudmFyIGhhc1JlcXVpcmVkX3N0cmljdEluZGV4T2Y7XG5cbmZ1bmN0aW9uIHJlcXVpcmVfc3RyaWN0SW5kZXhPZiAoKSB7XG5cdGlmIChoYXNSZXF1aXJlZF9zdHJpY3RJbmRleE9mKSByZXR1cm4gX3N0cmljdEluZGV4T2Y7XG5cdGhhc1JlcXVpcmVkX3N0cmljdEluZGV4T2YgPSAxO1xuXHRmdW5jdGlvbiBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG5cdCAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcblx0ICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG5cdCAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcblx0ICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG5cdCAgICAgIHJldHVybiBpbmRleDtcblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIC0xO1xuXHR9XG5cblx0X3N0cmljdEluZGV4T2YgPSBzdHJpY3RJbmRleE9mO1xuXHRyZXR1cm4gX3N0cmljdEluZGV4T2Y7XG59XG5cbnZhciBfYmFzZUluZGV4T2Y7XG52YXIgaGFzUmVxdWlyZWRfYmFzZUluZGV4T2Y7XG5cbmZ1bmN0aW9uIHJlcXVpcmVfYmFzZUluZGV4T2YgKCkge1xuXHRpZiAoaGFzUmVxdWlyZWRfYmFzZUluZGV4T2YpIHJldHVybiBfYmFzZUluZGV4T2Y7XG5cdGhhc1JlcXVpcmVkX2Jhc2VJbmRleE9mID0gMTtcblx0dmFyIGJhc2VGaW5kSW5kZXggPSByZXF1aXJlX2Jhc2VGaW5kSW5kZXgoKSxcblx0ICAgIGJhc2VJc05hTiA9IHJlcXVpcmVfYmFzZUlzTmFOKCksXG5cdCAgICBzdHJpY3RJbmRleE9mID0gcmVxdWlyZV9zdHJpY3RJbmRleE9mKCk7XG5cblx0LyoqXG5cdCAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluZGV4T2ZgIHdpdGhvdXQgYGZyb21JbmRleGAgYm91bmRzIGNoZWNrcy5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG5cdCAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuXHQgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuXHQgKi9cblx0ZnVuY3Rpb24gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcblx0ICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG5cdCAgICA/IHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpXG5cdCAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgZnJvbUluZGV4KTtcblx0fVxuXG5cdF9iYXNlSW5kZXhPZiA9IGJhc2VJbmRleE9mO1xuXHRyZXR1cm4gX2Jhc2VJbmRleE9mO1xufVxuXG52YXIgX2FycmF5SW5jbHVkZXM7XG52YXIgaGFzUmVxdWlyZWRfYXJyYXlJbmNsdWRlcztcblxuZnVuY3Rpb24gcmVxdWlyZV9hcnJheUluY2x1ZGVzICgpIHtcblx0aWYgKGhhc1JlcXVpcmVkX2FycmF5SW5jbHVkZXMpIHJldHVybiBfYXJyYXlJbmNsdWRlcztcblx0aGFzUmVxdWlyZWRfYXJyYXlJbmNsdWRlcyA9IDE7XG5cdHZhciBiYXNlSW5kZXhPZiA9IHJlcXVpcmVfYmFzZUluZGV4T2YoKTtcblxuXHQvKipcblx0ICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluY2x1ZGVzYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3Jcblx0ICogc3BlY2lmeWluZyBhbiBpbmRleCB0byBzZWFyY2ggZnJvbS5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cblx0ICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuXHQgKi9cblx0ZnVuY3Rpb24gYXJyYXlJbmNsdWRlcyhhcnJheSwgdmFsdWUpIHtcblx0ICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cdCAgcmV0dXJuICEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgMCkgPiAtMTtcblx0fVxuXG5cdF9hcnJheUluY2x1ZGVzID0gYXJyYXlJbmNsdWRlcztcblx0cmV0dXJuIF9hcnJheUluY2x1ZGVzO1xufVxuXG52YXIgYXJyYXlFYWNoJDEgPSBfYXJyYXlFYWNoLFxuICAgIGFycmF5SW5jbHVkZXMgPSByZXF1aXJlX2FycmF5SW5jbHVkZXMoKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgZnVuY3Rpb24gbWV0YWRhdGEuICovXG52YXIgV1JBUF9CSU5EX0ZMQUckNSA9IDEsXG4gICAgV1JBUF9CSU5EX0tFWV9GTEFHJDQgPSAyLFxuICAgIFdSQVBfQ1VSUllfRkxBRyQ1ID0gOCxcbiAgICBXUkFQX0NVUlJZX1JJR0hUX0ZMQUckMiA9IDE2LFxuICAgIFdSQVBfUEFSVElBTF9GTEFHJDIgPSAzMixcbiAgICBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyQyID0gNjQsXG4gICAgV1JBUF9BUllfRkxBRyQzID0gMTI4LFxuICAgIFdSQVBfUkVBUkdfRkxBRyQyID0gMjU2LFxuICAgIFdSQVBfRkxJUF9GTEFHJDEgPSA1MTI7XG5cbi8qKiBVc2VkIHRvIGFzc29jaWF0ZSB3cmFwIG1ldGhvZHMgd2l0aCB0aGVpciBiaXQgZmxhZ3MuICovXG52YXIgd3JhcEZsYWdzID0gW1xuICBbJ2FyeScsIFdSQVBfQVJZX0ZMQUckM10sXG4gIFsnYmluZCcsIFdSQVBfQklORF9GTEFHJDVdLFxuICBbJ2JpbmRLZXknLCBXUkFQX0JJTkRfS0VZX0ZMQUckNF0sXG4gIFsnY3VycnknLCBXUkFQX0NVUlJZX0ZMQUckNV0sXG4gIFsnY3VycnlSaWdodCcsIFdSQVBfQ1VSUllfUklHSFRfRkxBRyQyXSxcbiAgWydmbGlwJywgV1JBUF9GTElQX0ZMQUckMV0sXG4gIFsncGFydGlhbCcsIFdSQVBfUEFSVElBTF9GTEFHJDJdLFxuICBbJ3BhcnRpYWxSaWdodCcsIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHJDJdLFxuICBbJ3JlYXJnJywgV1JBUF9SRUFSR19GTEFHJDJdXG5dO1xuXG4vKipcbiAqIFVwZGF0ZXMgd3JhcHBlciBgZGV0YWlsc2AgYmFzZWQgb24gYGJpdG1hc2tgIGZsYWdzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcmV0dXJucyB7QXJyYXl9IGRldGFpbHMgVGhlIGRldGFpbHMgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgZGV0YWlsc2AuXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZVdyYXBEZXRhaWxzJDEoZGV0YWlscywgYml0bWFzaykge1xuICBhcnJheUVhY2gkMSh3cmFwRmxhZ3MsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICB2YXIgdmFsdWUgPSAnXy4nICsgcGFpclswXTtcbiAgICBpZiAoKGJpdG1hc2sgJiBwYWlyWzFdKSAmJiAhYXJyYXlJbmNsdWRlcyhkZXRhaWxzLCB2YWx1ZSkpIHtcbiAgICAgIGRldGFpbHMucHVzaCh2YWx1ZSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRldGFpbHMuc29ydCgpO1xufVxuXG52YXIgX3VwZGF0ZVdyYXBEZXRhaWxzID0gdXBkYXRlV3JhcERldGFpbHMkMTtcblxudmFyIGdldFdyYXBEZXRhaWxzID0gX2dldFdyYXBEZXRhaWxzLFxuICAgIGluc2VydFdyYXBEZXRhaWxzID0gX2luc2VydFdyYXBEZXRhaWxzLFxuICAgIHNldFRvU3RyaW5nID0gX3NldFRvU3RyaW5nLFxuICAgIHVwZGF0ZVdyYXBEZXRhaWxzID0gX3VwZGF0ZVdyYXBEZXRhaWxzO1xuXG4vKipcbiAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGB3cmFwcGVyYCB0byBtaW1pYyB0aGUgc291cmNlIG9mIGByZWZlcmVuY2VgXG4gKiB3aXRoIHdyYXBwZXIgZGV0YWlscyBpbiBhIGNvbW1lbnQgYXQgdGhlIHRvcCBvZiB0aGUgc291cmNlIGJvZHkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHdyYXBwZXIgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZmVyZW5jZSBUaGUgcmVmZXJlbmNlIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgd3JhcHBlcmAuXG4gKi9cbmZ1bmN0aW9uIHNldFdyYXBUb1N0cmluZyQyKHdyYXBwZXIsIHJlZmVyZW5jZSwgYml0bWFzaykge1xuICB2YXIgc291cmNlID0gKHJlZmVyZW5jZSArICcnKTtcbiAgcmV0dXJuIHNldFRvU3RyaW5nKHdyYXBwZXIsIGluc2VydFdyYXBEZXRhaWxzKHNvdXJjZSwgdXBkYXRlV3JhcERldGFpbHMoZ2V0V3JhcERldGFpbHMoc291cmNlKSwgYml0bWFzaykpKTtcbn1cblxudmFyIF9zZXRXcmFwVG9TdHJpbmcgPSBzZXRXcmFwVG9TdHJpbmckMjtcblxudmFyIGlzTGF6aWFibGUgPSByZXF1aXJlX2lzTGF6aWFibGUoKSxcbiAgICBzZXREYXRhJDEgPSBfc2V0RGF0YSxcbiAgICBzZXRXcmFwVG9TdHJpbmckMSA9IF9zZXRXcmFwVG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xudmFyIFdSQVBfQklORF9GTEFHJDQgPSAxLFxuICAgIFdSQVBfQklORF9LRVlfRkxBRyQzID0gMixcbiAgICBXUkFQX0NVUlJZX0JPVU5EX0ZMQUckMSA9IDQsXG4gICAgV1JBUF9DVVJSWV9GTEFHJDQgPSA4LFxuICAgIFdSQVBfUEFSVElBTF9GTEFHJDEgPSAzMixcbiAgICBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyQxID0gNjQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGNvbnRpbnVlIGN1cnJ5aW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHdyYXBGdW5jIFRoZSBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIGBmdW5jYCB3cmFwcGVyLlxuICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdmFsdWUuXG4gKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUmVjdXJyeSQyKGZ1bmMsIGJpdG1hc2ssIHdyYXBGdW5jLCBwbGFjZWhvbGRlciwgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICB2YXIgaXNDdXJyeSA9IGJpdG1hc2sgJiBXUkFQX0NVUlJZX0ZMQUckNCxcbiAgICAgIG5ld0hvbGRlcnMgPSBpc0N1cnJ5ID8gaG9sZGVycyA6IHVuZGVmaW5lZCxcbiAgICAgIG5ld0hvbGRlcnNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQgOiBob2xkZXJzLFxuICAgICAgbmV3UGFydGlhbHMgPSBpc0N1cnJ5ID8gcGFydGlhbHMgOiB1bmRlZmluZWQsXG4gICAgICBuZXdQYXJ0aWFsc1JpZ2h0ID0gaXNDdXJyeSA/IHVuZGVmaW5lZCA6IHBhcnRpYWxzO1xuXG4gIGJpdG1hc2sgfD0gKGlzQ3VycnkgPyBXUkFQX1BBUlRJQUxfRkxBRyQxIDogV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUckMSk7XG4gIGJpdG1hc2sgJj0gfihpc0N1cnJ5ID8gV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUckMSA6IFdSQVBfUEFSVElBTF9GTEFHJDEpO1xuXG4gIGlmICghKGJpdG1hc2sgJiBXUkFQX0NVUlJZX0JPVU5EX0ZMQUckMSkpIHtcbiAgICBiaXRtYXNrICY9IH4oV1JBUF9CSU5EX0ZMQUckNCB8IFdSQVBfQklORF9LRVlfRkxBRyQzKTtcbiAgfVxuICB2YXIgbmV3RGF0YSA9IFtcbiAgICBmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBuZXdQYXJ0aWFscywgbmV3SG9sZGVycywgbmV3UGFydGlhbHNSaWdodCxcbiAgICBuZXdIb2xkZXJzUmlnaHQsIGFyZ1BvcywgYXJ5LCBhcml0eVxuICBdO1xuXG4gIHZhciByZXN1bHQgPSB3cmFwRnVuYy5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICBpZiAoaXNMYXppYWJsZShmdW5jKSkge1xuICAgIHNldERhdGEkMShyZXN1bHQsIG5ld0RhdGEpO1xuICB9XG4gIHJlc3VsdC5wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyO1xuICByZXR1cm4gc2V0V3JhcFRvU3RyaW5nJDEocmVzdWx0LCBmdW5jLCBiaXRtYXNrKTtcbn1cblxudmFyIF9jcmVhdGVSZWN1cnJ5ID0gY3JlYXRlUmVjdXJyeSQyO1xuXG4vKipcbiAqIEdldHMgdGhlIGFyZ3VtZW50IHBsYWNlaG9sZGVyIHZhbHVlIGZvciBgZnVuY2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcGxhY2Vob2xkZXIgdmFsdWUuXG4gKi9cblxuZnVuY3Rpb24gZ2V0SG9sZGVyJDIoZnVuYykge1xuICB2YXIgb2JqZWN0ID0gZnVuYztcbiAgcmV0dXJuIG9iamVjdC5wbGFjZWhvbGRlcjtcbn1cblxudmFyIF9nZXRIb2xkZXIgPSBnZXRIb2xkZXIkMjtcblxudmFyIGNvcHlBcnJheSQyID0gX2NvcHlBcnJheSxcbiAgICBpc0luZGV4JDEgPSBfaXNJbmRleDtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1pbiQxID0gTWF0aC5taW47XG5cbi8qKlxuICogUmVvcmRlciBgYXJyYXlgIGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIGluZGV4ZXMgd2hlcmUgdGhlIGVsZW1lbnQgYXRcbiAqIHRoZSBmaXJzdCBpbmRleCBpcyBhc3NpZ25lZCBhcyB0aGUgZmlyc3QgZWxlbWVudCwgdGhlIGVsZW1lbnQgYXRcbiAqIHRoZSBzZWNvbmQgaW5kZXggaXMgYXNzaWduZWQgYXMgdGhlIHNlY29uZCBlbGVtZW50LCBhbmQgc28gb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byByZW9yZGVyLlxuICogQHBhcmFtIHtBcnJheX0gaW5kZXhlcyBUaGUgYXJyYW5nZWQgYXJyYXkgaW5kZXhlcy5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiByZW9yZGVyJDEoYXJyYXksIGluZGV4ZXMpIHtcbiAgdmFyIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbiQxKGluZGV4ZXMubGVuZ3RoLCBhcnJMZW5ndGgpLFxuICAgICAgb2xkQXJyYXkgPSBjb3B5QXJyYXkkMihhcnJheSk7XG5cbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgdmFyIGluZGV4ID0gaW5kZXhlc1tsZW5ndGhdO1xuICAgIGFycmF5W2xlbmd0aF0gPSBpc0luZGV4JDEoaW5kZXgsIGFyckxlbmd0aCkgPyBvbGRBcnJheVtpbmRleF0gOiB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG52YXIgX3Jlb3JkZXIgPSByZW9yZGVyJDE7XG5cbi8qKiBVc2VkIGFzIHRoZSBpbnRlcm5hbCBhcmd1bWVudCBwbGFjZWhvbGRlci4gKi9cblxudmFyIFBMQUNFSE9MREVSJDEgPSAnX19sb2Rhc2hfcGxhY2Vob2xkZXJfXyc7XG5cbi8qKlxuICogUmVwbGFjZXMgYWxsIGBwbGFjZWhvbGRlcmAgZWxlbWVudHMgaW4gYGFycmF5YCB3aXRoIGFuIGludGVybmFsIHBsYWNlaG9sZGVyXG4gKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGVpciBpbmRleGVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdG8gcmVwbGFjZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gKi9cbmZ1bmN0aW9uIHJlcGxhY2VIb2xkZXJzJDMoYXJyYXksIHBsYWNlaG9sZGVyKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgaWYgKHZhbHVlID09PSBwbGFjZWhvbGRlciB8fCB2YWx1ZSA9PT0gUExBQ0VIT0xERVIkMSkge1xuICAgICAgYXJyYXlbaW5kZXhdID0gUExBQ0VIT0xERVIkMTtcbiAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IGluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG52YXIgX3JlcGxhY2VIb2xkZXJzID0gcmVwbGFjZUhvbGRlcnMkMztcblxudmFyIGNvbXBvc2VBcmdzJDEgPSBfY29tcG9zZUFyZ3MsXG4gICAgY29tcG9zZUFyZ3NSaWdodCQxID0gX2NvbXBvc2VBcmdzUmlnaHQsXG4gICAgY291bnRIb2xkZXJzID0gX2NvdW50SG9sZGVycyxcbiAgICBjcmVhdGVDdG9yJDIgPSBfY3JlYXRlQ3RvcixcbiAgICBjcmVhdGVSZWN1cnJ5JDEgPSBfY3JlYXRlUmVjdXJyeSxcbiAgICBnZXRIb2xkZXIkMSA9IF9nZXRIb2xkZXIsXG4gICAgcmVvcmRlciA9IF9yZW9yZGVyLFxuICAgIHJlcGxhY2VIb2xkZXJzJDIgPSBfcmVwbGFjZUhvbGRlcnMsXG4gICAgcm9vdCQyID0gX3Jvb3Q7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xudmFyIFdSQVBfQklORF9GTEFHJDMgPSAxLFxuICAgIFdSQVBfQklORF9LRVlfRkxBRyQyID0gMixcbiAgICBXUkFQX0NVUlJZX0ZMQUckMyA9IDgsXG4gICAgV1JBUF9DVVJSWV9SSUdIVF9GTEFHJDEgPSAxNixcbiAgICBXUkFQX0FSWV9GTEFHJDIgPSAxMjgsXG4gICAgV1JBUF9GTElQX0ZMQUcgPSA1MTI7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIG9wdGlvbmFsIGB0aGlzYFxuICogYmluZGluZyBvZiBgdGhpc0FyZ2AsIHBhcnRpYWwgYXBwbGljYXRpb24sIGFuZCBjdXJyeWluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGZ1bmMgVGhlIGZ1bmN0aW9uIG9yIG1ldGhvZCBuYW1lIHRvIHdyYXAuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzUmlnaHRdIFRoZSBhcmd1bWVudHMgdG8gYXBwZW5kIHRvIHRob3NlIHByb3ZpZGVkXG4gKiAgdG8gdGhlIG5ldyBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzUmlnaHRdIFRoZSBgcGFydGlhbHNSaWdodGAgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVIeWJyaWQkMihmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgdmFyIGlzQXJ5ID0gYml0bWFzayAmIFdSQVBfQVJZX0ZMQUckMixcbiAgICAgIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyQzLFxuICAgICAgaXNCaW5kS2V5ID0gYml0bWFzayAmIFdSQVBfQklORF9LRVlfRkxBRyQyLFxuICAgICAgaXNDdXJyaWVkID0gYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUckMyB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRyQxKSxcbiAgICAgIGlzRmxpcCA9IGJpdG1hc2sgJiBXUkFQX0ZMSVBfRkxBRyxcbiAgICAgIEN0b3IgPSBpc0JpbmRLZXkgPyB1bmRlZmluZWQgOiBjcmVhdGVDdG9yJDIoZnVuYyk7XG5cbiAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgYXJncyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuXG4gICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICB9XG4gICAgaWYgKGlzQ3VycmllZCkge1xuICAgICAgdmFyIHBsYWNlaG9sZGVyID0gZ2V0SG9sZGVyJDEod3JhcHBlciksXG4gICAgICAgICAgaG9sZGVyc0NvdW50ID0gY291bnRIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcbiAgICB9XG4gICAgaWYgKHBhcnRpYWxzKSB7XG4gICAgICBhcmdzID0gY29tcG9zZUFyZ3MkMShhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKTtcbiAgICB9XG4gICAgaWYgKHBhcnRpYWxzUmlnaHQpIHtcbiAgICAgIGFyZ3MgPSBjb21wb3NlQXJnc1JpZ2h0JDEoYXJncywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBpc0N1cnJpZWQpO1xuICAgIH1cbiAgICBsZW5ndGggLT0gaG9sZGVyc0NvdW50O1xuICAgIGlmIChpc0N1cnJpZWQgJiYgbGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgIHZhciBuZXdIb2xkZXJzID0gcmVwbGFjZUhvbGRlcnMkMihhcmdzLCBwbGFjZWhvbGRlcik7XG4gICAgICByZXR1cm4gY3JlYXRlUmVjdXJyeSQxKFxuICAgICAgICBmdW5jLCBiaXRtYXNrLCBjcmVhdGVIeWJyaWQkMiwgd3JhcHBlci5wbGFjZWhvbGRlciwgdGhpc0FyZyxcbiAgICAgICAgYXJncywgbmV3SG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5IC0gbGVuZ3RoXG4gICAgICApO1xuICAgIH1cbiAgICB2YXIgdGhpc0JpbmRpbmcgPSBpc0JpbmQgPyB0aGlzQXJnIDogdGhpcyxcbiAgICAgICAgZm4gPSBpc0JpbmRLZXkgPyB0aGlzQmluZGluZ1tmdW5jXSA6IGZ1bmM7XG5cbiAgICBsZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgICBpZiAoYXJnUG9zKSB7XG4gICAgICBhcmdzID0gcmVvcmRlcihhcmdzLCBhcmdQb3MpO1xuICAgIH0gZWxzZSBpZiAoaXNGbGlwICYmIGxlbmd0aCA+IDEpIHtcbiAgICAgIGFyZ3MucmV2ZXJzZSgpO1xuICAgIH1cbiAgICBpZiAoaXNBcnkgJiYgYXJ5IDwgbGVuZ3RoKSB7XG4gICAgICBhcmdzLmxlbmd0aCA9IGFyeTtcbiAgICB9XG4gICAgaWYgKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCQyICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSB7XG4gICAgICBmbiA9IEN0b3IgfHwgY3JlYXRlQ3RvciQyKGZuKTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzKTtcbiAgfVxuICByZXR1cm4gd3JhcHBlcjtcbn1cblxudmFyIF9jcmVhdGVIeWJyaWQgPSBjcmVhdGVIeWJyaWQkMjtcblxudmFyIGFwcGx5JDEgPSBfYXBwbHksXG4gICAgY3JlYXRlQ3RvciQxID0gX2NyZWF0ZUN0b3IsXG4gICAgY3JlYXRlSHlicmlkJDEgPSBfY3JlYXRlSHlicmlkLFxuICAgIGNyZWF0ZVJlY3VycnkgPSBfY3JlYXRlUmVjdXJyeSxcbiAgICBnZXRIb2xkZXIgPSBfZ2V0SG9sZGVyLFxuICAgIHJlcGxhY2VIb2xkZXJzJDEgPSBfcmVwbGFjZUhvbGRlcnMsXG4gICAgcm9vdCQxID0gX3Jvb3Q7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGVuYWJsZSBjdXJyeWluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge251bWJlcn0gYXJpdHkgVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUN1cnJ5JDEoZnVuYywgYml0bWFzaywgYXJpdHkpIHtcbiAgdmFyIEN0b3IgPSBjcmVhdGVDdG9yJDEoZnVuYyk7XG5cbiAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgYXJncyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgIGluZGV4ID0gbGVuZ3RoLFxuICAgICAgICBwbGFjZWhvbGRlciA9IGdldEhvbGRlcih3cmFwcGVyKTtcblxuICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgfVxuICAgIHZhciBob2xkZXJzID0gKGxlbmd0aCA8IDMgJiYgYXJnc1swXSAhPT0gcGxhY2Vob2xkZXIgJiYgYXJnc1tsZW5ndGggLSAxXSAhPT0gcGxhY2Vob2xkZXIpXG4gICAgICA/IFtdXG4gICAgICA6IHJlcGxhY2VIb2xkZXJzJDEoYXJncywgcGxhY2Vob2xkZXIpO1xuXG4gICAgbGVuZ3RoIC09IGhvbGRlcnMubGVuZ3RoO1xuICAgIGlmIChsZW5ndGggPCBhcml0eSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZVJlY3VycnkoXG4gICAgICAgIGZ1bmMsIGJpdG1hc2ssIGNyZWF0ZUh5YnJpZCQxLCB3cmFwcGVyLnBsYWNlaG9sZGVyLCB1bmRlZmluZWQsXG4gICAgICAgIGFyZ3MsIGhvbGRlcnMsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSAtIGxlbmd0aCk7XG4gICAgfVxuICAgIHZhciBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QkMSAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcbiAgICByZXR1cm4gYXBwbHkkMShmbiwgdGhpcywgYXJncyk7XG4gIH1cbiAgcmV0dXJuIHdyYXBwZXI7XG59XG5cbnZhciBfY3JlYXRlQ3VycnkgPSBjcmVhdGVDdXJyeSQxO1xuXG52YXIgYXBwbHkgPSBfYXBwbHksXG4gICAgY3JlYXRlQ3RvciA9IF9jcmVhdGVDdG9yLFxuICAgIHJvb3QgPSBfcm9vdDtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgZnVuY3Rpb24gbWV0YWRhdGEuICovXG52YXIgV1JBUF9CSU5EX0ZMQUckMiA9IDE7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZ1xuICogb2YgYHRoaXNBcmdgIGFuZCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBhcnRpYWwkMShmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscykge1xuICB2YXIgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHJDIsXG4gICAgICBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgIGxlZnRJbmRleCA9IC0xLFxuICAgICAgICBsZWZ0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICBhcmdzID0gQXJyYXkobGVmdExlbmd0aCArIGFyZ3NMZW5ndGgpLFxuICAgICAgICBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG5cbiAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICBhcmdzW2xlZnRJbmRleF0gPSBwYXJ0aWFsc1tsZWZ0SW5kZXhdO1xuICAgIH1cbiAgICB3aGlsZSAoYXJnc0xlbmd0aC0tKSB7XG4gICAgICBhcmdzW2xlZnRJbmRleCsrXSA9IGFyZ3VtZW50c1srK2FyZ3NJbmRleF07XG4gICAgfVxuICAgIHJldHVybiBhcHBseShmbiwgaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsIGFyZ3MpO1xuICB9XG4gIHJldHVybiB3cmFwcGVyO1xufVxuXG52YXIgX2NyZWF0ZVBhcnRpYWwgPSBjcmVhdGVQYXJ0aWFsJDE7XG5cbnZhciBjb21wb3NlQXJncyA9IF9jb21wb3NlQXJncyxcbiAgICBjb21wb3NlQXJnc1JpZ2h0ID0gX2NvbXBvc2VBcmdzUmlnaHQsXG4gICAgcmVwbGFjZUhvbGRlcnMgPSBfcmVwbGFjZUhvbGRlcnM7XG5cbi8qKiBVc2VkIGFzIHRoZSBpbnRlcm5hbCBhcmd1bWVudCBwbGFjZWhvbGRlci4gKi9cbnZhciBQTEFDRUhPTERFUiA9ICdfX2xvZGFzaF9wbGFjZWhvbGRlcl9fJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgZnVuY3Rpb24gbWV0YWRhdGEuICovXG52YXIgV1JBUF9CSU5EX0ZMQUckMSA9IDEsXG4gICAgV1JBUF9CSU5EX0tFWV9GTEFHJDEgPSAyLFxuICAgIFdSQVBfQ1VSUllfQk9VTkRfRkxBRyA9IDQsXG4gICAgV1JBUF9DVVJSWV9GTEFHJDIgPSA4LFxuICAgIFdSQVBfQVJZX0ZMQUckMSA9IDEyOCxcbiAgICBXUkFQX1JFQVJHX0ZMQUckMSA9IDI1NjtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1pbiA9IE1hdGgubWluO1xuXG4vKipcbiAqIE1lcmdlcyB0aGUgZnVuY3Rpb24gbWV0YWRhdGEgb2YgYHNvdXJjZWAgaW50byBgZGF0YWAuXG4gKlxuICogTWVyZ2luZyBtZXRhZGF0YSByZWR1Y2VzIHRoZSBudW1iZXIgb2Ygd3JhcHBlcnMgdXNlZCB0byBpbnZva2UgYSBmdW5jdGlvbi5cbiAqIFRoaXMgaXMgcG9zc2libGUgYmVjYXVzZSBtZXRob2RzIGxpa2UgYF8uYmluZGAsIGBfLmN1cnJ5YCwgYW5kIGBfLnBhcnRpYWxgXG4gKiBtYXkgYmUgYXBwbGllZCByZWdhcmRsZXNzIG9mIGV4ZWN1dGlvbiBvcmRlci4gTWV0aG9kcyBsaWtlIGBfLmFyeWAgYW5kXG4gKiBgXy5yZWFyZ2AgbW9kaWZ5IGZ1bmN0aW9uIGFyZ3VtZW50cywgbWFraW5nIHRoZSBvcmRlciBpbiB3aGljaCB0aGV5IGFyZVxuICogZXhlY3V0ZWQgaW1wb3J0YW50LCBwcmV2ZW50aW5nIHRoZSBtZXJnaW5nIG9mIG1ldGFkYXRhLiBIb3dldmVyLCB3ZSBtYWtlXG4gKiBhbiBleGNlcHRpb24gZm9yIGEgc2FmZSBjb21iaW5lZCBjYXNlIHdoZXJlIGN1cnJpZWQgZnVuY3Rpb25zIGhhdmUgYF8uYXJ5YFxuICogYW5kIG9yIGBfLnJlYXJnYCBhcHBsaWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBkYXRhIFRoZSBkZXN0aW5hdGlvbiBtZXRhZGF0YS5cbiAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgc291cmNlIG1ldGFkYXRhLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBkYXRhYC5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhJDEoZGF0YSwgc291cmNlKSB7XG4gIHZhciBiaXRtYXNrID0gZGF0YVsxXSxcbiAgICAgIHNyY0JpdG1hc2sgPSBzb3VyY2VbMV0sXG4gICAgICBuZXdCaXRtYXNrID0gYml0bWFzayB8IHNyY0JpdG1hc2ssXG4gICAgICBpc0NvbW1vbiA9IG5ld0JpdG1hc2sgPCAoV1JBUF9CSU5EX0ZMQUckMSB8IFdSQVBfQklORF9LRVlfRkxBRyQxIHwgV1JBUF9BUllfRkxBRyQxKTtcblxuICB2YXIgaXNDb21ibyA9XG4gICAgKChzcmNCaXRtYXNrID09IFdSQVBfQVJZX0ZMQUckMSkgJiYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHJDIpKSB8fFxuICAgICgoc3JjQml0bWFzayA9PSBXUkFQX0FSWV9GTEFHJDEpICYmIChiaXRtYXNrID09IFdSQVBfUkVBUkdfRkxBRyQxKSAmJiAoZGF0YVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSkgfHxcbiAgICAoKHNyY0JpdG1hc2sgPT0gKFdSQVBfQVJZX0ZMQUckMSB8IFdSQVBfUkVBUkdfRkxBRyQxKSkgJiYgKHNvdXJjZVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSAmJiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUckMikpO1xuXG4gIC8vIEV4aXQgZWFybHkgaWYgbWV0YWRhdGEgY2FuJ3QgYmUgbWVyZ2VkLlxuICBpZiAoIShpc0NvbW1vbiB8fCBpc0NvbWJvKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG4gIC8vIFVzZSBzb3VyY2UgYHRoaXNBcmdgIGlmIGF2YWlsYWJsZS5cbiAgaWYgKHNyY0JpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyQxKSB7XG4gICAgZGF0YVsyXSA9IHNvdXJjZVsyXTtcbiAgICAvLyBTZXQgd2hlbiBjdXJyeWluZyBhIGJvdW5kIGZ1bmN0aW9uLlxuICAgIG5ld0JpdG1hc2sgfD0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHJDEgPyAwIDogV1JBUF9DVVJSWV9CT1VORF9GTEFHO1xuICB9XG4gIC8vIENvbXBvc2UgcGFydGlhbCBhcmd1bWVudHMuXG4gIHZhciB2YWx1ZSA9IHNvdXJjZVszXTtcbiAgaWYgKHZhbHVlKSB7XG4gICAgdmFyIHBhcnRpYWxzID0gZGF0YVszXTtcbiAgICBkYXRhWzNdID0gcGFydGlhbHMgPyBjb21wb3NlQXJncyhwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs0XSkgOiB2YWx1ZTtcbiAgICBkYXRhWzRdID0gcGFydGlhbHMgPyByZXBsYWNlSG9sZGVycyhkYXRhWzNdLCBQTEFDRUhPTERFUikgOiBzb3VyY2VbNF07XG4gIH1cbiAgLy8gQ29tcG9zZSBwYXJ0aWFsIHJpZ2h0IGFyZ3VtZW50cy5cbiAgdmFsdWUgPSBzb3VyY2VbNV07XG4gIGlmICh2YWx1ZSkge1xuICAgIHBhcnRpYWxzID0gZGF0YVs1XTtcbiAgICBkYXRhWzVdID0gcGFydGlhbHMgPyBjb21wb3NlQXJnc1JpZ2h0KHBhcnRpYWxzLCB2YWx1ZSwgc291cmNlWzZdKSA6IHZhbHVlO1xuICAgIGRhdGFbNl0gPSBwYXJ0aWFscyA/IHJlcGxhY2VIb2xkZXJzKGRhdGFbNV0sIFBMQUNFSE9MREVSKSA6IHNvdXJjZVs2XTtcbiAgfVxuICAvLyBVc2Ugc291cmNlIGBhcmdQb3NgIGlmIGF2YWlsYWJsZS5cbiAgdmFsdWUgPSBzb3VyY2VbN107XG4gIGlmICh2YWx1ZSkge1xuICAgIGRhdGFbN10gPSB2YWx1ZTtcbiAgfVxuICAvLyBVc2Ugc291cmNlIGBhcnlgIGlmIGl0J3Mgc21hbGxlci5cbiAgaWYgKHNyY0JpdG1hc2sgJiBXUkFQX0FSWV9GTEFHJDEpIHtcbiAgICBkYXRhWzhdID0gZGF0YVs4XSA9PSBudWxsID8gc291cmNlWzhdIDogbmF0aXZlTWluKGRhdGFbOF0sIHNvdXJjZVs4XSk7XG4gIH1cbiAgLy8gVXNlIHNvdXJjZSBgYXJpdHlgIGlmIG9uZSBpcyBub3QgcHJvdmlkZWQuXG4gIGlmIChkYXRhWzldID09IG51bGwpIHtcbiAgICBkYXRhWzldID0gc291cmNlWzldO1xuICB9XG4gIC8vIFVzZSBzb3VyY2UgYGZ1bmNgIGFuZCBtZXJnZSBiaXRtYXNrcy5cbiAgZGF0YVswXSA9IHNvdXJjZVswXTtcbiAgZGF0YVsxXSA9IG5ld0JpdG1hc2s7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbnZhciBfbWVyZ2VEYXRhID0gbWVyZ2VEYXRhJDE7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGEgc2luZ2xlIHdoaXRlc3BhY2UgY2hhcmFjdGVyLiAqL1xuXG52YXIgcmVXaGl0ZXNwYWNlID0gL1xccy87XG5cbi8qKlxuICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbUVuZGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBub24td2hpdGVzcGFjZVxuICogY2hhcmFjdGVyIG9mIGBzdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBsYXN0IG5vbi13aGl0ZXNwYWNlIGNoYXJhY3Rlci5cbiAqL1xuZnVuY3Rpb24gdHJpbW1lZEVuZEluZGV4JDEoc3RyaW5nKSB7XG4gIHZhciBpbmRleCA9IHN0cmluZy5sZW5ndGg7XG5cbiAgd2hpbGUgKGluZGV4LS0gJiYgcmVXaGl0ZXNwYWNlLnRlc3Qoc3RyaW5nLmNoYXJBdChpbmRleCkpKSB7fVxuICByZXR1cm4gaW5kZXg7XG59XG5cbnZhciBfdHJpbW1lZEVuZEluZGV4ID0gdHJpbW1lZEVuZEluZGV4JDE7XG5cbnZhciB0cmltbWVkRW5kSW5kZXggPSBfdHJpbW1lZEVuZEluZGV4O1xuXG4vKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIHdoaXRlc3BhY2UuICovXG52YXIgcmVUcmltU3RhcnQgPSAvXlxccysvO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRyaW1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBiYXNlVHJpbSQxKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nXG4gICAgPyBzdHJpbmcuc2xpY2UoMCwgdHJpbW1lZEVuZEluZGV4KHN0cmluZykgKyAxKS5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJylcbiAgICA6IHN0cmluZztcbn1cblxudmFyIF9iYXNlVHJpbSA9IGJhc2VUcmltJDE7XG5cbnZhciBiYXNlVHJpbSA9IF9iYXNlVHJpbSxcbiAgICBpc09iamVjdCQyID0gaXNPYmplY3RfMSxcbiAgICBpc1N5bWJvbCQxID0gaXNTeW1ib2xfMTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTkFOID0gMCAvIDA7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbnZhciBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvTnVtYmVyKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiBJbmZpbml0eVxuICpcbiAqIF8udG9OdW1iZXIoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyJDEodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wkMSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gTkFOO1xuICB9XG4gIGlmIChpc09iamVjdCQyKHZhbHVlKSkge1xuICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICB2YWx1ZSA9IGlzT2JqZWN0JDIob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICB9XG4gIHZhbHVlID0gYmFzZVRyaW0odmFsdWUpO1xuICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbn1cblxudmFyIHRvTnVtYmVyXzEgPSB0b051bWJlciQxO1xuXG52YXIgdG9OdW1iZXIgPSB0b051bWJlcl8xO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwLFxuICAgIE1BWF9JTlRFR0VSID0gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDg7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIGZpbml0ZSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEyLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIG51bWJlci5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b0Zpbml0ZSgzLjIpO1xuICogLy8gPT4gMy4yXG4gKlxuICogXy50b0Zpbml0ZShOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IDVlLTMyNFxuICpcbiAqIF8udG9GaW5pdGUoSW5maW5pdHkpO1xuICogLy8gPT4gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDhcbiAqXG4gKiBfLnRvRmluaXRlKCczLjInKTtcbiAqIC8vID0+IDMuMlxuICovXG5mdW5jdGlvbiB0b0Zpbml0ZSQxKHZhbHVlKSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6IDA7XG4gIH1cbiAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gIGlmICh2YWx1ZSA9PT0gSU5GSU5JVFkgfHwgdmFsdWUgPT09IC1JTkZJTklUWSkge1xuICAgIHZhciBzaWduID0gKHZhbHVlIDwgMCA/IC0xIDogMSk7XG4gICAgcmV0dXJuIHNpZ24gKiBNQVhfSU5URUdFUjtcbiAgfVxuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gdmFsdWUgOiAwO1xufVxuXG52YXIgdG9GaW5pdGVfMSA9IHRvRmluaXRlJDE7XG5cbnZhciB0b0Zpbml0ZSA9IHRvRmluaXRlXzE7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvSW50ZWdlcmBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2ludGVnZXIpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9JbnRlZ2VyKDMuMik7XG4gKiAvLyA9PiAzXG4gKlxuICogXy50b0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiAwXG4gKlxuICogXy50b0ludGVnZXIoSW5maW5pdHkpO1xuICogLy8gPT4gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDhcbiAqXG4gKiBfLnRvSW50ZWdlcignMy4yJyk7XG4gKiAvLyA9PiAzXG4gKi9cbmZ1bmN0aW9uIHRvSW50ZWdlciQxKHZhbHVlKSB7XG4gIHZhciByZXN1bHQgPSB0b0Zpbml0ZSh2YWx1ZSksXG4gICAgICByZW1haW5kZXIgPSByZXN1bHQgJSAxO1xuXG4gIHJldHVybiByZXN1bHQgPT09IHJlc3VsdCA/IChyZW1haW5kZXIgPyByZXN1bHQgLSByZW1haW5kZXIgOiByZXN1bHQpIDogMDtcbn1cblxudmFyIHRvSW50ZWdlcl8xID0gdG9JbnRlZ2VyJDE7XG5cbnZhciBiYXNlU2V0RGF0YSA9IF9iYXNlU2V0RGF0YSxcbiAgICBjcmVhdGVCaW5kID0gX2NyZWF0ZUJpbmQsXG4gICAgY3JlYXRlQ3VycnkgPSBfY3JlYXRlQ3VycnksXG4gICAgY3JlYXRlSHlicmlkID0gX2NyZWF0ZUh5YnJpZCxcbiAgICBjcmVhdGVQYXJ0aWFsID0gX2NyZWF0ZVBhcnRpYWwsXG4gICAgZ2V0RGF0YSA9IHJlcXVpcmVfZ2V0RGF0YSgpLFxuICAgIG1lcmdlRGF0YSA9IF9tZXJnZURhdGEsXG4gICAgc2V0RGF0YSA9IF9zZXREYXRhLFxuICAgIHNldFdyYXBUb1N0cmluZyA9IF9zZXRXcmFwVG9TdHJpbmcsXG4gICAgdG9JbnRlZ2VyID0gdG9JbnRlZ2VyXzE7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xudmFyIFdSQVBfQklORF9GTEFHID0gMSxcbiAgICBXUkFQX0JJTkRfS0VZX0ZMQUcgPSAyLFxuICAgIFdSQVBfQ1VSUllfRkxBRyQxID0gOCxcbiAgICBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcgPSAxNixcbiAgICBXUkFQX1BBUlRJQUxfRkxBRyA9IDMyLFxuICAgIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHID0gNjQ7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBlaXRoZXIgY3VycmllcyBvciBpbnZva2VzIGBmdW5jYCB3aXRoIG9wdGlvbmFsXG4gKiBgdGhpc2AgYmluZGluZyBhbmQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICogICAgMSAtIGBfLmJpbmRgXG4gKiAgICAyIC0gYF8uYmluZEtleWBcbiAqICAgIDQgLSBgXy5jdXJyeWAgb3IgYF8uY3VycnlSaWdodGAgb2YgYSBib3VuZCBmdW5jdGlvblxuICogICAgOCAtIGBfLmN1cnJ5YFxuICogICAxNiAtIGBfLmN1cnJ5UmlnaHRgXG4gKiAgIDMyIC0gYF8ucGFydGlhbGBcbiAqICAgNjQgLSBgXy5wYXJ0aWFsUmlnaHRgXG4gKiAgMTI4IC0gYF8ucmVhcmdgXG4gKiAgMjU2IC0gYF8uYXJ5YFxuICogIDUxMiAtIGBfLmZsaXBgXG4gKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlV3JhcCQzKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgdmFyIGlzQmluZEtleSA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfS0VZX0ZMQUc7XG4gIGlmICghaXNCaW5kS2V5ICYmIHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgdmFyIGxlbmd0aCA9IHBhcnRpYWxzID8gcGFydGlhbHMubGVuZ3RoIDogMDtcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBiaXRtYXNrICY9IH4oV1JBUF9QQVJUSUFMX0ZMQUcgfCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyk7XG4gICAgcGFydGlhbHMgPSBob2xkZXJzID0gdW5kZWZpbmVkO1xuICB9XG4gIGFyeSA9IGFyeSA9PT0gdW5kZWZpbmVkID8gYXJ5IDogbmF0aXZlTWF4KHRvSW50ZWdlcihhcnkpLCAwKTtcbiAgYXJpdHkgPSBhcml0eSA9PT0gdW5kZWZpbmVkID8gYXJpdHkgOiB0b0ludGVnZXIoYXJpdHkpO1xuICBsZW5ndGggLT0gaG9sZGVycyA/IGhvbGRlcnMubGVuZ3RoIDogMDtcblxuICBpZiAoYml0bWFzayAmIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKSB7XG4gICAgdmFyIHBhcnRpYWxzUmlnaHQgPSBwYXJ0aWFscyxcbiAgICAgICAgaG9sZGVyc1JpZ2h0ID0gaG9sZGVycztcblxuICAgIHBhcnRpYWxzID0gaG9sZGVycyA9IHVuZGVmaW5lZDtcbiAgfVxuICB2YXIgZGF0YSA9IGlzQmluZEtleSA/IHVuZGVmaW5lZCA6IGdldERhdGEoZnVuYyk7XG5cbiAgdmFyIG5ld0RhdGEgPSBbXG4gICAgZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCxcbiAgICBhcmdQb3MsIGFyeSwgYXJpdHlcbiAgXTtcblxuICBpZiAoZGF0YSkge1xuICAgIG1lcmdlRGF0YShuZXdEYXRhLCBkYXRhKTtcbiAgfVxuICBmdW5jID0gbmV3RGF0YVswXTtcbiAgYml0bWFzayA9IG5ld0RhdGFbMV07XG4gIHRoaXNBcmcgPSBuZXdEYXRhWzJdO1xuICBwYXJ0aWFscyA9IG5ld0RhdGFbM107XG4gIGhvbGRlcnMgPSBuZXdEYXRhWzRdO1xuICBhcml0eSA9IG5ld0RhdGFbOV0gPSBuZXdEYXRhWzldID09PSB1bmRlZmluZWRcbiAgICA/IChpc0JpbmRLZXkgPyAwIDogZnVuYy5sZW5ndGgpXG4gICAgOiBuYXRpdmVNYXgobmV3RGF0YVs5XSAtIGxlbmd0aCwgMCk7XG5cbiAgaWYgKCFhcml0eSAmJiBiaXRtYXNrICYgKFdSQVBfQ1VSUllfRkxBRyQxIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSkge1xuICAgIGJpdG1hc2sgJj0gfihXUkFQX0NVUlJZX0ZMQUckMSB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRyk7XG4gIH1cbiAgaWYgKCFiaXRtYXNrIHx8IGJpdG1hc2sgPT0gV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICB2YXIgcmVzdWx0ID0gY3JlYXRlQmluZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnKTtcbiAgfSBlbHNlIGlmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRyQxIHx8IGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSB7XG4gICAgcmVzdWx0ID0gY3JlYXRlQ3VycnkoZnVuYywgYml0bWFzaywgYXJpdHkpO1xuICB9IGVsc2UgaWYgKChiaXRtYXNrID09IFdSQVBfUEFSVElBTF9GTEFHIHx8IGJpdG1hc2sgPT0gKFdSQVBfQklORF9GTEFHIHwgV1JBUF9QQVJUSUFMX0ZMQUcpKSAmJiAhaG9sZGVycy5sZW5ndGgpIHtcbiAgICByZXN1bHQgPSBjcmVhdGVQYXJ0aWFsKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSBjcmVhdGVIeWJyaWQuYXBwbHkodW5kZWZpbmVkLCBuZXdEYXRhKTtcbiAgfVxuICB2YXIgc2V0dGVyID0gZGF0YSA/IGJhc2VTZXREYXRhIDogc2V0RGF0YTtcbiAgcmV0dXJuIHNldFdyYXBUb1N0cmluZyhzZXR0ZXIocmVzdWx0LCBuZXdEYXRhKSwgZnVuYywgYml0bWFzayk7XG59XG5cbnZhciBfY3JlYXRlV3JhcCA9IGNyZWF0ZVdyYXAkMztcblxudmFyIGNyZWF0ZVdyYXAkMiA9IF9jcmVhdGVXcmFwO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBmdW5jdGlvbiBtZXRhZGF0YS4gKi9cbnZhciBXUkFQX0FSWV9GTEFHID0gMTI4O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgLCB3aXRoIHVwIHRvIGBuYCBhcmd1bWVudHMsXG4gKiBpZ25vcmluZyBhbnkgYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbj1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IGNhcC5cbiAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8uYXJ5KHBhcnNlSW50LCAxKSk7XG4gKiAvLyA9PiBbNiwgOCwgMTBdXG4gKi9cbmZ1bmN0aW9uIGFyeShmdW5jLCBuLCBndWFyZCkge1xuICBuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBuO1xuICBuID0gKGZ1bmMgJiYgbiA9PSBudWxsKSA/IGZ1bmMubGVuZ3RoIDogbjtcbiAgcmV0dXJuIGNyZWF0ZVdyYXAkMihmdW5jLCBXUkFQX0FSWV9GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIG4pO1xufVxuXG52YXIgYXJ5XzEgPSBhcnk7XG5cbnZhciBjb3B5T2JqZWN0JDMgPSBfY29weU9iamVjdCxcbiAgICBrZXlzJDEgPSBrZXlzXzE7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduJDEob2JqZWN0LCBzb3VyY2UpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0JDMoc291cmNlLCBrZXlzJDEoc291cmNlKSwgb2JqZWN0KTtcbn1cblxudmFyIF9iYXNlQXNzaWduID0gYmFzZUFzc2lnbiQxO1xuXG52YXIgY29weU9iamVjdCQyID0gX2NvcHlPYmplY3QsXG4gICAga2V5c0luJDIgPSBrZXlzSW5fMTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25JbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZUFzc2lnbkluJDEob2JqZWN0LCBzb3VyY2UpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0JDIoc291cmNlLCBrZXlzSW4kMihzb3VyY2UpLCBvYmplY3QpO1xufVxuXG52YXIgX2Jhc2VBc3NpZ25JbiA9IGJhc2VBc3NpZ25JbiQxO1xuXG52YXIgY29weU9iamVjdCQxID0gX2NvcHlPYmplY3QsXG4gICAgZ2V0U3ltYm9scyQxID0gX2dldFN5bWJvbHM7XG5cbi8qKlxuICogQ29waWVzIG93biBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb3B5U3ltYm9scyQxKHNvdXJjZSwgb2JqZWN0KSB7XG4gIHJldHVybiBjb3B5T2JqZWN0JDEoc291cmNlLCBnZXRTeW1ib2xzJDEoc291cmNlKSwgb2JqZWN0KTtcbn1cblxudmFyIF9jb3B5U3ltYm9scyA9IGNvcHlTeW1ib2xzJDE7XG5cbnZhciBhcnJheVB1c2ggPSByZXF1aXJlX2FycmF5UHVzaCgpLFxuICAgIGdldFByb3RvdHlwZSA9IF9nZXRQcm90b3R5cGUsXG4gICAgZ2V0U3ltYm9scyA9IF9nZXRTeW1ib2xzLFxuICAgIHN0dWJBcnJheSA9IHN0dWJBcnJheV8xO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gKi9cbnZhciBnZXRTeW1ib2xzSW4kMiA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgd2hpbGUgKG9iamVjdCkge1xuICAgIGFycmF5UHVzaChyZXN1bHQsIGdldFN5bWJvbHMob2JqZWN0KSk7XG4gICAgb2JqZWN0ID0gZ2V0UHJvdG90eXBlKG9iamVjdCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciBfZ2V0U3ltYm9sc0luID0gZ2V0U3ltYm9sc0luJDI7XG5cbnZhciBjb3B5T2JqZWN0ID0gX2NvcHlPYmplY3QsXG4gICAgZ2V0U3ltYm9sc0luJDEgPSBfZ2V0U3ltYm9sc0luO1xuXG4vKipcbiAqIENvcGllcyBvd24gYW5kIGluaGVyaXRlZCBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb3B5U3ltYm9sc0luJDEoc291cmNlLCBvYmplY3QpIHtcbiAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzSW4kMShzb3VyY2UpLCBvYmplY3QpO1xufVxuXG52YXIgX2NvcHlTeW1ib2xzSW4gPSBjb3B5U3ltYm9sc0luJDE7XG5cbnZhciBiYXNlR2V0QWxsS2V5cyA9IF9iYXNlR2V0QWxsS2V5cyxcbiAgICBnZXRTeW1ib2xzSW4gPSBfZ2V0U3ltYm9sc0luLFxuICAgIGtleXNJbiQxID0ga2V5c0luXzE7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gZ2V0QWxsS2V5c0luJDEob2JqZWN0KSB7XG4gIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNJbiQxLCBnZXRTeW1ib2xzSW4pO1xufVxuXG52YXIgX2dldEFsbEtleXNJbiA9IGdldEFsbEtleXNJbiQxO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG5cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZUFycmF5JDEoYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IG5ldyBhcnJheS5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gIC8vIEFkZCBwcm9wZXJ0aWVzIGFzc2lnbmVkIGJ5IGBSZWdFeHAjZXhlY2AuXG4gIGlmIChsZW5ndGggJiYgdHlwZW9mIGFycmF5WzBdID09ICdzdHJpbmcnICYmIGhhc093blByb3BlcnR5LmNhbGwoYXJyYXksICdpbmRleCcpKSB7XG4gICAgcmVzdWx0LmluZGV4ID0gYXJyYXkuaW5kZXg7XG4gICAgcmVzdWx0LmlucHV0ID0gYXJyYXkuaW5wdXQ7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIF9pbml0Q2xvbmVBcnJheSA9IGluaXRDbG9uZUFycmF5JDE7XG5cbnZhciBjbG9uZUFycmF5QnVmZmVyJDEgPSBfY2xvbmVBcnJheUJ1ZmZlcjtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGRhdGFWaWV3YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGRhdGFWaWV3IFRoZSBkYXRhIHZpZXcgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGRhdGEgdmlldy5cbiAqL1xuZnVuY3Rpb24gY2xvbmVEYXRhVmlldyQxKGRhdGFWaWV3LCBpc0RlZXApIHtcbiAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIkMShkYXRhVmlldy5idWZmZXIpIDogZGF0YVZpZXcuYnVmZmVyO1xuICByZXR1cm4gbmV3IGRhdGFWaWV3LmNvbnN0cnVjdG9yKGJ1ZmZlciwgZGF0YVZpZXcuYnl0ZU9mZnNldCwgZGF0YVZpZXcuYnl0ZUxlbmd0aCk7XG59XG5cbnZhciBfY2xvbmVEYXRhVmlldyA9IGNsb25lRGF0YVZpZXckMTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGAgZmxhZ3MgZnJvbSB0aGVpciBjb2VyY2VkIHN0cmluZyB2YWx1ZXMuICovXG5cbnZhciByZUZsYWdzID0gL1xcdyokLztcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHJlZ2V4cGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWdleHAgVGhlIHJlZ2V4cCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCByZWdleHAuXG4gKi9cbmZ1bmN0aW9uIGNsb25lUmVnRXhwJDEocmVnZXhwKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgcmVnZXhwLmNvbnN0cnVjdG9yKHJlZ2V4cC5zb3VyY2UsIHJlRmxhZ3MuZXhlYyhyZWdleHApKTtcbiAgcmVzdWx0Lmxhc3RJbmRleCA9IHJlZ2V4cC5sYXN0SW5kZXg7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbnZhciBfY2xvbmVSZWdFeHAgPSBjbG9uZVJlZ0V4cCQxO1xuXG52YXIgU3ltYm9sJDEgPSByZXF1aXJlX1N5bWJvbCgpO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCQxID8gU3ltYm9sJDEucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBgc3ltYm9sYCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzeW1ib2wgVGhlIHN5bWJvbCBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgc3ltYm9sIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gY2xvbmVTeW1ib2wkMShzeW1ib2wpIHtcbiAgcmV0dXJuIHN5bWJvbFZhbHVlT2YgPyBPYmplY3Qoc3ltYm9sVmFsdWVPZi5jYWxsKHN5bWJvbCkpIDoge307XG59XG5cbnZhciBfY2xvbmVTeW1ib2wgPSBjbG9uZVN5bWJvbCQxO1xuXG52YXIgY2xvbmVBcnJheUJ1ZmZlciA9IF9jbG9uZUFycmF5QnVmZmVyLFxuICAgIGNsb25lRGF0YVZpZXcgPSBfY2xvbmVEYXRhVmlldyxcbiAgICBjbG9uZVJlZ0V4cCA9IF9jbG9uZVJlZ0V4cCxcbiAgICBjbG9uZVN5bWJvbCA9IF9jbG9uZVN5bWJvbCxcbiAgICBjbG9uZVR5cGVkQXJyYXkgPSBfY2xvbmVUeXBlZEFycmF5O1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYm9vbFRhZyQxID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWckMSA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBtYXBUYWckMiA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyQxID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgcmVnZXhwVGFnJDEgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWckMiA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyQxID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnJDEgPSAnW29iamVjdCBTeW1ib2xdJztcblxudmFyIGFycmF5QnVmZmVyVGFnJDEgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnJDEgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWckMSA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWckMSA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWckMSA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnJDEgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWckMSA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyQxID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyQxID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWckMSA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnJDEgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZSBiYXNlZCBvbiBpdHMgYHRvU3RyaW5nVGFnYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNsb25pbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBNYXBgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIGBTZXRgLCBvciBgU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVCeVRhZyQxKG9iamVjdCwgdGFnLCBpc0RlZXApIHtcbiAgdmFyIEN0b3IgPSBvYmplY3QuY29uc3RydWN0b3I7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBhcnJheUJ1ZmZlclRhZyQxOlxuICAgICAgcmV0dXJuIGNsb25lQXJyYXlCdWZmZXIob2JqZWN0KTtcblxuICAgIGNhc2UgYm9vbFRhZyQxOlxuICAgIGNhc2UgZGF0ZVRhZyQxOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yKCtvYmplY3QpO1xuXG4gICAgY2FzZSBkYXRhVmlld1RhZyQxOlxuICAgICAgcmV0dXJuIGNsb25lRGF0YVZpZXcob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgY2FzZSBmbG9hdDMyVGFnJDE6IGNhc2UgZmxvYXQ2NFRhZyQxOlxuICAgIGNhc2UgaW50OFRhZyQxOiBjYXNlIGludDE2VGFnJDE6IGNhc2UgaW50MzJUYWckMTpcbiAgICBjYXNlIHVpbnQ4VGFnJDE6IGNhc2UgdWludDhDbGFtcGVkVGFnJDE6IGNhc2UgdWludDE2VGFnJDE6IGNhc2UgdWludDMyVGFnJDE6XG4gICAgICByZXR1cm4gY2xvbmVUeXBlZEFycmF5KG9iamVjdCwgaXNEZWVwKTtcblxuICAgIGNhc2UgbWFwVGFnJDI6XG4gICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICBjYXNlIG51bWJlclRhZyQxOlxuICAgIGNhc2Ugc3RyaW5nVGFnJDE6XG4gICAgICByZXR1cm4gbmV3IEN0b3Iob2JqZWN0KTtcblxuICAgIGNhc2UgcmVnZXhwVGFnJDE6XG4gICAgICByZXR1cm4gY2xvbmVSZWdFeHAob2JqZWN0KTtcblxuICAgIGNhc2Ugc2V0VGFnJDI6XG4gICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICBjYXNlIHN5bWJvbFRhZyQxOlxuICAgICAgcmV0dXJuIGNsb25lU3ltYm9sKG9iamVjdCk7XG4gIH1cbn1cblxudmFyIF9pbml0Q2xvbmVCeVRhZyA9IGluaXRDbG9uZUJ5VGFnJDE7XG5cbnZhciBnZXRUYWckMyA9IF9nZXRUYWcsXG4gICAgaXNPYmplY3RMaWtlJDMgPSBpc09iamVjdExpa2VfMTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyQxID0gJ1tvYmplY3QgTWFwXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXBgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc01hcCQxKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UkMyh2YWx1ZSkgJiYgZ2V0VGFnJDModmFsdWUpID09IG1hcFRhZyQxO1xufVxuXG52YXIgX2Jhc2VJc01hcCA9IGJhc2VJc01hcCQxO1xuXG52YXIgYmFzZUlzTWFwID0gX2Jhc2VJc01hcCxcbiAgICBiYXNlVW5hcnkkMSA9IHJlcXVpcmVfYmFzZVVuYXJ5KCksXG4gICAgbm9kZVV0aWwkMSA9IF9ub2RlVXRpbC5leHBvcnRzO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc01hcCA9IG5vZGVVdGlsJDEgJiYgbm9kZVV0aWwkMS5pc01hcDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE1hcGAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNNYXAobmV3IE1hcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc01hcChuZXcgV2Vha01hcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNNYXAkMSA9IG5vZGVJc01hcCA/IGJhc2VVbmFyeSQxKG5vZGVJc01hcCkgOiBiYXNlSXNNYXA7XG5cbnZhciBpc01hcF8xID0gaXNNYXAkMTtcblxudmFyIGdldFRhZyQyID0gX2dldFRhZyxcbiAgICBpc09iamVjdExpa2UkMiA9IGlzT2JqZWN0TGlrZV8xO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc2V0VGFnJDEgPSAnW29iamVjdCBTZXRdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1NldGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzU2V0JDEodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSQyKHZhbHVlKSAmJiBnZXRUYWckMih2YWx1ZSkgPT0gc2V0VGFnJDE7XG59XG5cbnZhciBfYmFzZUlzU2V0ID0gYmFzZUlzU2V0JDE7XG5cbnZhciBiYXNlSXNTZXQgPSBfYmFzZUlzU2V0LFxuICAgIGJhc2VVbmFyeSA9IHJlcXVpcmVfYmFzZVVuYXJ5KCksXG4gICAgbm9kZVV0aWwgPSBfbm9kZVV0aWwuZXhwb3J0cztcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNTZXQgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1NldDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFNldGAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTZXQobmV3IFNldCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1NldChuZXcgV2Vha1NldCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNTZXQkMSA9IG5vZGVJc1NldCA/IGJhc2VVbmFyeShub2RlSXNTZXQpIDogYmFzZUlzU2V0O1xuXG52YXIgaXNTZXRfMSA9IGlzU2V0JDE7XG5cbnZhciBTdGFjayA9IF9TdGFjayxcbiAgICBhcnJheUVhY2ggPSBfYXJyYXlFYWNoLFxuICAgIGFzc2lnblZhbHVlJDEgPSBfYXNzaWduVmFsdWUsXG4gICAgYmFzZUFzc2lnbiA9IF9iYXNlQXNzaWduLFxuICAgIGJhc2VBc3NpZ25JbiA9IF9iYXNlQXNzaWduSW4sXG4gICAgY2xvbmVCdWZmZXIgPSBfY2xvbmVCdWZmZXIuZXhwb3J0cyxcbiAgICBjb3B5QXJyYXkkMSA9IF9jb3B5QXJyYXksXG4gICAgY29weVN5bWJvbHMgPSBfY29weVN5bWJvbHMsXG4gICAgY29weVN5bWJvbHNJbiA9IF9jb3B5U3ltYm9sc0luLFxuICAgIGdldEFsbEtleXMgPSBfZ2V0QWxsS2V5cyxcbiAgICBnZXRBbGxLZXlzSW4gPSBfZ2V0QWxsS2V5c0luLFxuICAgIGdldFRhZyQxID0gX2dldFRhZyxcbiAgICBpbml0Q2xvbmVBcnJheSA9IF9pbml0Q2xvbmVBcnJheSxcbiAgICBpbml0Q2xvbmVCeVRhZyA9IF9pbml0Q2xvbmVCeVRhZyxcbiAgICBpbml0Q2xvbmVPYmplY3QgPSBfaW5pdENsb25lT2JqZWN0LFxuICAgIGlzQXJyYXkkMSA9IGlzQXJyYXlfMSxcbiAgICBpc0J1ZmZlciA9IGlzQnVmZmVyJDQuZXhwb3J0cyxcbiAgICBpc01hcCA9IGlzTWFwXzEsXG4gICAgaXNPYmplY3QkMSA9IGlzT2JqZWN0XzEsXG4gICAgaXNTZXQgPSBpc1NldF8xLFxuICAgIGtleXMgPSBrZXlzXzEsXG4gICAga2V5c0luID0ga2V5c0luXzE7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG52YXIgQ0xPTkVfREVFUF9GTEFHJDEgPSAxLFxuICAgIENMT05FX0ZMQVRfRkxBRyA9IDIsXG4gICAgQ0xPTkVfU1lNQk9MU19GTEFHJDEgPSA0O1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWckMSA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJyxcbiAgICB3ZWFrTWFwVGFnJDEgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBzdXBwb3J0ZWQgYnkgYF8uY2xvbmVgLiAqL1xudmFyIGNsb25lYWJsZVRhZ3MgPSB7fTtcbmNsb25lYWJsZVRhZ3NbYXJnc1RhZ10gPSBjbG9uZWFibGVUYWdzW2FycmF5VGFnXSA9XG5jbG9uZWFibGVUYWdzW2FycmF5QnVmZmVyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0YVZpZXdUYWddID1cbmNsb25lYWJsZVRhZ3NbYm9vbFRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGVUYWddID1cbmNsb25lYWJsZVRhZ3NbZmxvYXQzMlRhZ10gPSBjbG9uZWFibGVUYWdzW2Zsb2F0NjRUYWddID1cbmNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9XG5jbG9uZWFibGVUYWdzW2ludDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbbWFwVGFnXSA9XG5jbG9uZWFibGVUYWdzW251bWJlclRhZ10gPSBjbG9uZWFibGVUYWdzW29iamVjdFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzZXRUYWddID1cbmNsb25lYWJsZVRhZ3Nbc3RyaW5nVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc3ltYm9sVGFnXSA9XG5jbG9uZWFibGVUYWdzW3VpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9XG5jbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuY2xvbmVhYmxlVGFnc1tlcnJvclRhZyQxXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuY2xvbmVhYmxlVGFnc1t3ZWFrTWFwVGFnJDFdID0gZmFsc2U7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xvbmVgIGFuZCBgXy5jbG9uZURlZXBgIHdoaWNoIHRyYWNrc1xuICogdHJhdmVyc2VkIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICogIDEgLSBEZWVwIGNsb25lXG4gKiAgMiAtIEZsYXR0ZW4gaW5oZXJpdGVkIHByb3BlcnRpZXNcbiAqICA0IC0gQ2xvbmUgc3ltYm9sc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBba2V5XSBUaGUga2V5IG9mIGB2YWx1ZWAuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIHBhcmVudCBvYmplY3Qgb2YgYHZhbHVlYC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBhbmQgdGhlaXIgY2xvbmUgY291bnRlcnBhcnRzLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUNsb25lJDIodmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgb2JqZWN0LCBzdGFjaykge1xuICB2YXIgcmVzdWx0LFxuICAgICAgaXNEZWVwID0gYml0bWFzayAmIENMT05FX0RFRVBfRkxBRyQxLFxuICAgICAgaXNGbGF0ID0gYml0bWFzayAmIENMT05FX0ZMQVRfRkxBRyxcbiAgICAgIGlzRnVsbCA9IGJpdG1hc2sgJiBDTE9ORV9TWU1CT0xTX0ZMQUckMTtcblxuICBpZiAoY3VzdG9taXplcikge1xuICAgIHJlc3VsdCA9IG9iamVjdCA/IGN1c3RvbWl6ZXIodmFsdWUsIGtleSwgb2JqZWN0LCBzdGFjaykgOiBjdXN0b21pemVyKHZhbHVlKTtcbiAgfVxuICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmICghaXNPYmplY3QkMSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgdmFyIGlzQXJyID0gaXNBcnJheSQxKHZhbHVlKTtcbiAgaWYgKGlzQXJyKSB7XG4gICAgcmVzdWx0ID0gaW5pdENsb25lQXJyYXkodmFsdWUpO1xuICAgIGlmICghaXNEZWVwKSB7XG4gICAgICByZXR1cm4gY29weUFycmF5JDEodmFsdWUsIHJlc3VsdCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciB0YWcgPSBnZXRUYWckMSh2YWx1ZSksXG4gICAgICAgIGlzRnVuYyA9IHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG5cbiAgICBpZiAoaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY2xvbmVCdWZmZXIodmFsdWUsIGlzRGVlcCk7XG4gICAgfVxuICAgIGlmICh0YWcgPT0gb2JqZWN0VGFnIHx8IHRhZyA9PSBhcmdzVGFnIHx8IChpc0Z1bmMgJiYgIW9iamVjdCkpIHtcbiAgICAgIHJlc3VsdCA9IChpc0ZsYXQgfHwgaXNGdW5jKSA/IHt9IDogaW5pdENsb25lT2JqZWN0KHZhbHVlKTtcbiAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgIHJldHVybiBpc0ZsYXRcbiAgICAgICAgICA/IGNvcHlTeW1ib2xzSW4odmFsdWUsIGJhc2VBc3NpZ25JbihyZXN1bHQsIHZhbHVlKSlcbiAgICAgICAgICA6IGNvcHlTeW1ib2xzKHZhbHVlLCBiYXNlQXNzaWduKHJlc3VsdCwgdmFsdWUpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFjbG9uZWFibGVUYWdzW3RhZ10pIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdCA/IHZhbHVlIDoge307XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBpbml0Q2xvbmVCeVRhZyh2YWx1ZSwgdGFnLCBpc0RlZXApO1xuICAgIH1cbiAgfVxuICAvLyBDaGVjayBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcyBhbmQgcmV0dXJuIGl0cyBjb3JyZXNwb25kaW5nIGNsb25lLlxuICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldCh2YWx1ZSk7XG4gIGlmIChzdGFja2VkKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQ7XG4gIH1cbiAgc3RhY2suc2V0KHZhbHVlLCByZXN1bHQpO1xuXG4gIGlmIChpc1NldCh2YWx1ZSkpIHtcbiAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlKSB7XG4gICAgICByZXN1bHQuYWRkKGJhc2VDbG9uZSQyKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdWJWYWx1ZSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoaXNNYXAodmFsdWUpKSB7XG4gICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHQuc2V0KGtleSwgYmFzZUNsb25lJDIoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIga2V5c0Z1bmMgPSBpc0Z1bGxcbiAgICA/IChpc0ZsYXQgPyBnZXRBbGxLZXlzSW4gOiBnZXRBbGxLZXlzKVxuICAgIDogKGlzRmxhdCA/IGtleXNJbiA6IGtleXMpO1xuXG4gIHZhciBwcm9wcyA9IGlzQXJyID8gdW5kZWZpbmVkIDoga2V5c0Z1bmModmFsdWUpO1xuICBhcnJheUVhY2gocHJvcHMgfHwgdmFsdWUsIGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICBpZiAocHJvcHMpIHtcbiAgICAgIGtleSA9IHN1YlZhbHVlO1xuICAgICAgc3ViVmFsdWUgPSB2YWx1ZVtrZXldO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBwb3B1bGF0ZSBjbG9uZSAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGFzc2lnblZhbHVlJDEocmVzdWx0LCBrZXksIGJhc2VDbG9uZSQyKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIF9iYXNlQ2xvbmUgPSBiYXNlQ2xvbmUkMjtcblxudmFyIGJhc2VDbG9uZSQxID0gX2Jhc2VDbG9uZTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY2xvbmluZy4gKi9cbnZhciBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzaGFsbG93IGNsb25lIG9mIGB2YWx1ZWAuXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb24gdGhlXG4gKiBbc3RydWN0dXJlZCBjbG9uZSBhbGdvcml0aG1dKGh0dHBzOi8vbWRuLmlvL1N0cnVjdHVyZWRfY2xvbmVfYWxnb3JpdGhtKVxuICogYW5kIHN1cHBvcnRzIGNsb25pbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucywgZGF0ZSBvYmplY3RzLCBtYXBzLFxuICogbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcywgc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkXG4gKiBhcnJheXMuIFRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBhcmd1bWVudHNgIG9iamVjdHMgYXJlIGNsb25lZFxuICogYXMgcGxhaW4gb2JqZWN0cy4gQW4gZW1wdHkgb2JqZWN0IGlzIHJldHVybmVkIGZvciB1bmNsb25lYWJsZSB2YWx1ZXMgc3VjaFxuICogYXMgZXJyb3Igb2JqZWN0cywgZnVuY3Rpb25zLCBET00gbm9kZXMsIGFuZCBXZWFrTWFwcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICogQHNlZSBfLmNsb25lRGVlcFxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IFt7ICdhJzogMSB9LCB7ICdiJzogMiB9XTtcbiAqXG4gKiB2YXIgc2hhbGxvdyA9IF8uY2xvbmUob2JqZWN0cyk7XG4gKiBjb25zb2xlLmxvZyhzaGFsbG93WzBdID09PSBvYmplY3RzWzBdKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gY2xvbmUodmFsdWUpIHtcbiAgcmV0dXJuIGJhc2VDbG9uZSQxKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xufVxuXG52YXIgY2xvbmVfMSA9IGNsb25lO1xuXG52YXIgY3JlYXRlV3JhcCQxID0gX2NyZWF0ZVdyYXA7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xudmFyIFdSQVBfQ1VSUllfRkxBRyA9IDg7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhcmd1bWVudHMgb2YgYGZ1bmNgIGFuZCBlaXRoZXIgaW52b2tlc1xuICogYGZ1bmNgIHJldHVybmluZyBpdHMgcmVzdWx0LCBpZiBhdCBsZWFzdCBgYXJpdHlgIG51bWJlciBvZiBhcmd1bWVudHMgaGF2ZVxuICogYmVlbiBwcm92aWRlZCwgb3IgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB0aGUgcmVtYWluaW5nIGBmdW5jYFxuICogYXJndW1lbnRzLCBhbmQgc28gb24uIFRoZSBhcml0eSBvZiBgZnVuY2AgbWF5IGJlIHNwZWNpZmllZCBpZiBgZnVuYy5sZW5ndGhgXG4gKiBpcyBub3Qgc3VmZmljaWVudC5cbiAqXG4gKiBUaGUgYF8uY3VycnkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gKiBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwcm92aWRlZCBhcmd1bWVudHMuXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi4wLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5PWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gKiAgIHJldHVybiBbYSwgYiwgY107XG4gKiB9O1xuICpcbiAqIHZhciBjdXJyaWVkID0gXy5jdXJyeShhYmMpO1xuICpcbiAqIGN1cnJpZWQoMSkoMikoMyk7XG4gKiAvLyA9PiBbMSwgMiwgM11cbiAqXG4gKiBjdXJyaWVkKDEsIDIpKDMpO1xuICogLy8gPT4gWzEsIDIsIDNdXG4gKlxuICogY3VycmllZCgxLCAyLCAzKTtcbiAqIC8vID0+IFsxLCAyLCAzXVxuICpcbiAqIC8vIEN1cnJpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gKiBjdXJyaWVkKDEpKF8sIDMpKDIpO1xuICogLy8gPT4gWzEsIDIsIDNdXG4gKi9cbmZ1bmN0aW9uIGN1cnJ5KGZ1bmMsIGFyaXR5LCBndWFyZCkge1xuICBhcml0eSA9IGd1YXJkID8gdW5kZWZpbmVkIDogYXJpdHk7XG4gIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwJDEoZnVuYywgV1JBUF9DVVJSWV9GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYXJpdHkpO1xuICByZXN1bHQucGxhY2Vob2xkZXIgPSBjdXJyeS5wbGFjZWhvbGRlcjtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gQXNzaWduIGRlZmF1bHQgcGxhY2Vob2xkZXJzLlxuY3VycnkucGxhY2Vob2xkZXIgPSB7fTtcblxudmFyIGN1cnJ5XzEgPSBjdXJyeTtcblxudmFyIGJhc2VHZXRUYWcgPSBfYmFzZUdldFRhZyxcbiAgICBpc09iamVjdExpa2UkMSA9IGlzT2JqZWN0TGlrZV8xLFxuICAgIGlzUGxhaW5PYmplY3QgPSBpc1BsYWluT2JqZWN0XzE7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBkb21FeGNUYWcgPSAnW29iamVjdCBET01FeGNlcHRpb25dJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gYEVycm9yYCwgYEV2YWxFcnJvcmAsIGBSYW5nZUVycm9yYCwgYFJlZmVyZW5jZUVycm9yYCxcbiAqIGBTeW50YXhFcnJvcmAsIGBUeXBlRXJyb3JgLCBvciBgVVJJRXJyb3JgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBlcnJvciBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Vycm9yKG5ldyBFcnJvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Vycm9yKEVycm9yKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRXJyb3IodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdExpa2UkMSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGVycm9yVGFnIHx8IHRhZyA9PSBkb21FeGNUYWcgfHxcbiAgICAodHlwZW9mIHZhbHVlLm1lc3NhZ2UgPT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbHVlLm5hbWUgPT0gJ3N0cmluZycgJiYgIWlzUGxhaW5PYmplY3QodmFsdWUpKTtcbn1cblxudmFyIGlzRXJyb3JfMSA9IGlzRXJyb3I7XG5cbnZhciBnZXRUYWcgPSBfZ2V0VGFnLFxuICAgIGlzT2JqZWN0TGlrZSA9IGlzT2JqZWN0TGlrZV8xO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFdlYWtNYXBgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgbWFwLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNXZWFrTWFwKG5ldyBXZWFrTWFwKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzV2Vha01hcChuZXcgTWFwKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzV2Vha01hcCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IHdlYWtNYXBUYWc7XG59XG5cbnZhciBpc1dlYWtNYXBfMSA9IGlzV2Vha01hcDtcblxudmFyIGJhc2VDbG9uZSA9IF9iYXNlQ2xvbmUsXG4gICAgYmFzZUl0ZXJhdGVlJDEgPSBfYmFzZUl0ZXJhdGVlO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xudmFyIENMT05FX0RFRVBfRkxBRyA9IDE7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkXG4gKiBmdW5jdGlvbi4gSWYgYGZ1bmNgIGlzIGEgcHJvcGVydHkgbmFtZSwgdGhlIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJucyB0aGVcbiAqIHByb3BlcnR5IHZhbHVlIGZvciBhIGdpdmVuIGVsZW1lbnQuIElmIGBmdW5jYCBpcyBhbiBhcnJheSBvciBvYmplY3QsIHRoZVxuICogY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBjb250YWluIHRoZSBlcXVpdmFsZW50XG4gKiBzb3VyY2UgcHJvcGVydGllcywgb3RoZXJ3aXNlIGl0IHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSBbZnVuYz1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhIGNhbGxiYWNrLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjYWxsYmFjay5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIHVzZXJzID0gW1xuICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gKiBdO1xuICpcbiAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZSh7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0pKTtcbiAqIC8vID0+IFt7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfV1cbiAqXG4gKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZShbJ3VzZXInLCAnZnJlZCddKSk7XG4gKiAvLyA9PiBbeyAndXNlcic6ICdmcmVkJywgJ2FnZSc6IDQwIH1dXG4gKlxuICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLm1hcCh1c2VycywgXy5pdGVyYXRlZSgndXNlcicpKTtcbiAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICpcbiAqIC8vIENyZWF0ZSBjdXN0b20gaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqIF8uaXRlcmF0ZWUgPSBfLndyYXAoXy5pdGVyYXRlZSwgZnVuY3Rpb24oaXRlcmF0ZWUsIGZ1bmMpIHtcbiAqICAgcmV0dXJuICFfLmlzUmVnRXhwKGZ1bmMpID8gaXRlcmF0ZWUoZnVuYykgOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAqICAgICByZXR1cm4gZnVuYy50ZXN0KHN0cmluZyk7XG4gKiAgIH07XG4gKiB9KTtcbiAqXG4gKiBfLmZpbHRlcihbJ2FiYycsICdkZWYnXSwgL2VmLyk7XG4gKiAvLyA9PiBbJ2RlZiddXG4gKi9cbmZ1bmN0aW9uIGl0ZXJhdGVlKGZ1bmMpIHtcbiAgcmV0dXJuIGJhc2VJdGVyYXRlZSQxKHR5cGVvZiBmdW5jID09ICdmdW5jdGlvbicgPyBmdW5jIDogYmFzZUNsb25lKGZ1bmMsIENMT05FX0RFRVBfRkxBRykpO1xufVxuXG52YXIgaXRlcmF0ZWVfMSA9IGl0ZXJhdGVlO1xuXG52YXIgX2lzRmxhdHRlbmFibGU7XG52YXIgaGFzUmVxdWlyZWRfaXNGbGF0dGVuYWJsZTtcblxuZnVuY3Rpb24gcmVxdWlyZV9pc0ZsYXR0ZW5hYmxlICgpIHtcblx0aWYgKGhhc1JlcXVpcmVkX2lzRmxhdHRlbmFibGUpIHJldHVybiBfaXNGbGF0dGVuYWJsZTtcblx0aGFzUmVxdWlyZWRfaXNGbGF0dGVuYWJsZSA9IDE7XG5cdHZhciBTeW1ib2wgPSByZXF1aXJlX1N5bWJvbCgpLFxuXHQgICAgaXNBcmd1bWVudHMgPSBpc0FyZ3VtZW50c18xLFxuXHQgICAgaXNBcnJheSA9IGlzQXJyYXlfMTtcblxuXHQvKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cblx0dmFyIHNwcmVhZGFibGVTeW1ib2wgPSBTeW1ib2wgPyBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlIDogdW5kZWZpbmVkO1xuXG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGZsYXR0ZW5hYmxlIGBhcmd1bWVudHNgIG9iamVjdCBvciBhcnJheS5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZsYXR0ZW5hYmxlLCBlbHNlIGBmYWxzZWAuXG5cdCAqL1xuXHRmdW5jdGlvbiBpc0ZsYXR0ZW5hYmxlKHZhbHVlKSB7XG5cdCAgcmV0dXJuIGlzQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSB8fFxuXHQgICAgISEoc3ByZWFkYWJsZVN5bWJvbCAmJiB2YWx1ZSAmJiB2YWx1ZVtzcHJlYWRhYmxlU3ltYm9sXSk7XG5cdH1cblxuXHRfaXNGbGF0dGVuYWJsZSA9IGlzRmxhdHRlbmFibGU7XG5cdHJldHVybiBfaXNGbGF0dGVuYWJsZTtcbn1cblxudmFyIF9iYXNlRmxhdHRlbjtcbnZhciBoYXNSZXF1aXJlZF9iYXNlRmxhdHRlbjtcblxuZnVuY3Rpb24gcmVxdWlyZV9iYXNlRmxhdHRlbiAoKSB7XG5cdGlmIChoYXNSZXF1aXJlZF9iYXNlRmxhdHRlbikgcmV0dXJuIF9iYXNlRmxhdHRlbjtcblx0aGFzUmVxdWlyZWRfYmFzZUZsYXR0ZW4gPSAxO1xuXHR2YXIgYXJyYXlQdXNoID0gcmVxdWlyZV9hcnJheVB1c2goKSxcblx0ICAgIGlzRmxhdHRlbmFibGUgPSByZXF1aXJlX2lzRmxhdHRlbmFibGUoKTtcblxuXHQvKipcblx0ICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmxhdHRlbmAgd2l0aCBzdXBwb3J0IGZvciByZXN0cmljdGluZyBmbGF0dGVuaW5nLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGRlcHRoIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cblx0ICogQHBhcmFtIHtib29sZWFufSBbcHJlZGljYXRlPWlzRmxhdHRlbmFibGVdIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzU3RyaWN0XSBSZXN0cmljdCB0byB2YWx1ZXMgdGhhdCBwYXNzIGBwcmVkaWNhdGVgIGNoZWNrcy5cblx0ICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdD1bXV0gVGhlIGluaXRpYWwgcmVzdWx0IHZhbHVlLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG5cdCAqL1xuXHRmdW5jdGlvbiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCkge1xuXHQgIHZhciBpbmRleCA9IC0xLFxuXHQgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cblx0ICBwcmVkaWNhdGUgfHwgKHByZWRpY2F0ZSA9IGlzRmxhdHRlbmFibGUpO1xuXHQgIHJlc3VsdCB8fCAocmVzdWx0ID0gW10pO1xuXG5cdCAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcblx0ICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcblx0ICAgIGlmIChkZXB0aCA+IDAgJiYgcHJlZGljYXRlKHZhbHVlKSkge1xuXHQgICAgICBpZiAoZGVwdGggPiAxKSB7XG5cdCAgICAgICAgLy8gUmVjdXJzaXZlbHkgZmxhdHRlbiBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cblx0ICAgICAgICBiYXNlRmxhdHRlbih2YWx1ZSwgZGVwdGggLSAxLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGFycmF5UHVzaChyZXN1bHQsIHZhbHVlKTtcblx0ICAgICAgfVxuXHQgICAgfSBlbHNlIGlmICghaXNTdHJpY3QpIHtcblx0ICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gdmFsdWU7XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRfYmFzZUZsYXR0ZW4gPSBiYXNlRmxhdHRlbjtcblx0cmV0dXJuIF9iYXNlRmxhdHRlbjtcbn1cblxudmFyIGZsYXR0ZW5fMTtcbnZhciBoYXNSZXF1aXJlZEZsYXR0ZW47XG5cbmZ1bmN0aW9uIHJlcXVpcmVGbGF0dGVuICgpIHtcblx0aWYgKGhhc1JlcXVpcmVkRmxhdHRlbikgcmV0dXJuIGZsYXR0ZW5fMTtcblx0aGFzUmVxdWlyZWRGbGF0dGVuID0gMTtcblx0dmFyIGJhc2VGbGF0dGVuID0gcmVxdWlyZV9iYXNlRmxhdHRlbigpO1xuXG5cdC8qKlxuXHQgKiBGbGF0dGVucyBgYXJyYXlgIGEgc2luZ2xlIGxldmVsIGRlZXAuXG5cdCAqXG5cdCAqIEBzdGF0aWNcblx0ICogQG1lbWJlck9mIF9cblx0ICogQHNpbmNlIDAuMS4wXG5cdCAqIEBjYXRlZ29yeSBBcnJheVxuXHQgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cblx0ICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuXHQgKiBAZXhhbXBsZVxuXHQgKlxuXHQgKiBfLmZsYXR0ZW4oWzEsIFsyLCBbMywgWzRdXSwgNV1dKTtcblx0ICogLy8gPT4gWzEsIDIsIFszLCBbNF1dLCA1XVxuXHQgKi9cblx0ZnVuY3Rpb24gZmxhdHRlbihhcnJheSkge1xuXHQgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblx0ICByZXR1cm4gbGVuZ3RoID8gYmFzZUZsYXR0ZW4oYXJyYXksIDEpIDogW107XG5cdH1cblxuXHRmbGF0dGVuXzEgPSBmbGF0dGVuO1xuXHRyZXR1cm4gZmxhdHRlbl8xO1xufVxuXG52YXIgX2ZsYXRSZXN0O1xudmFyIGhhc1JlcXVpcmVkX2ZsYXRSZXN0O1xuXG5mdW5jdGlvbiByZXF1aXJlX2ZsYXRSZXN0ICgpIHtcblx0aWYgKGhhc1JlcXVpcmVkX2ZsYXRSZXN0KSByZXR1cm4gX2ZsYXRSZXN0O1xuXHRoYXNSZXF1aXJlZF9mbGF0UmVzdCA9IDE7XG5cdHZhciBmbGF0dGVuID0gcmVxdWlyZUZsYXR0ZW4oKSxcblx0ICAgIG92ZXJSZXN0ID0gX292ZXJSZXN0LFxuXHQgICAgc2V0VG9TdHJpbmcgPSBfc2V0VG9TdHJpbmc7XG5cblx0LyoqXG5cdCAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIGZsYXR0ZW5zIHRoZSByZXN0IGFycmF5LlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuXHQgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cblx0ICovXG5cdGZ1bmN0aW9uIGZsYXRSZXN0KGZ1bmMpIHtcblx0ICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgdW5kZWZpbmVkLCBmbGF0dGVuKSwgZnVuYyArICcnKTtcblx0fVxuXG5cdF9mbGF0UmVzdCA9IGZsYXRSZXN0O1xuXHRyZXR1cm4gX2ZsYXRSZXN0O1xufVxuXG52YXIgY3JlYXRlV3JhcCA9IF9jcmVhdGVXcmFwLFxuICAgIGZsYXRSZXN0ID0gcmVxdWlyZV9mbGF0UmVzdCgpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBmdW5jdGlvbiBtZXRhZGF0YS4gKi9cbnZhciBXUkFQX1JFQVJHX0ZMQUcgPSAyNTY7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBhcmd1bWVudHMgYXJyYW5nZWQgYWNjb3JkaW5nXG4gKiB0byB0aGUgc3BlY2lmaWVkIGBpbmRleGVzYCB3aGVyZSB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIGZpcnN0IGluZGV4IGlzXG4gKiBwcm92aWRlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQsIHRoZSBhcmd1bWVudCB2YWx1ZSBhdCB0aGUgc2Vjb25kIGluZGV4IGlzXG4gKiBwcm92aWRlZCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LCBhbmQgc28gb24uXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZWFycmFuZ2UgYXJndW1lbnRzIGZvci5cbiAqIEBwYXJhbSB7Li4uKG51bWJlcnxudW1iZXJbXSl9IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFyZ3VtZW50IGluZGV4ZXMuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIHJlYXJnZWQgPSBfLnJlYXJnKGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAqIH0sIFsyLCAwLCAxXSk7XG4gKlxuICogcmVhcmdlZCgnYicsICdjJywgJ2EnKVxuICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gKi9cbnZhciByZWFyZyA9IGZsYXRSZXN0KGZ1bmN0aW9uKGZ1bmMsIGluZGV4ZXMpIHtcbiAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9SRUFSR19GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBpbmRleGVzKTtcbn0pO1xuXG52YXIgcmVhcmdfMSA9IHJlYXJnO1xuXG52YXIgYXJyYXlNYXAgPSByZXF1aXJlX2FycmF5TWFwKCksXG4gICAgY29weUFycmF5ID0gX2NvcHlBcnJheSxcbiAgICBpc0FycmF5ID0gaXNBcnJheV8xLFxuICAgIGlzU3ltYm9sID0gaXNTeW1ib2xfMSxcbiAgICBzdHJpbmdUb1BhdGggPSBfc3RyaW5nVG9QYXRoLFxuICAgIHRvS2V5JDEgPSBfdG9LZXksXG4gICAgdG9TdHJpbmcgPSB0b1N0cmluZ18xO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b1BhdGgoJ2EuYi5jJyk7XG4gKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAqXG4gKiBfLnRvUGF0aCgnYVswXS5iLmMnKTtcbiAqIC8vID0+IFsnYScsICcwJywgJ2InLCAnYyddXG4gKi9cbmZ1bmN0aW9uIHRvUGF0aCh2YWx1ZSkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIHRvS2V5JDEpO1xuICB9XG4gIHJldHVybiBpc1N5bWJvbCh2YWx1ZSkgPyBbdmFsdWVdIDogY29weUFycmF5KHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpKTtcbn1cblxudmFyIHRvUGF0aF8xID0gdG9QYXRoO1xuXG52YXIgX3V0aWwgPSB7XG4gICdhcnknOiBhcnlfMSxcbiAgJ2Fzc2lnbic6IF9iYXNlQXNzaWduLFxuICAnY2xvbmUnOiBjbG9uZV8xLFxuICAnY3VycnknOiBjdXJyeV8xLFxuICAnZm9yRWFjaCc6IF9hcnJheUVhY2gsXG4gICdpc0FycmF5JzogaXNBcnJheV8xLFxuICAnaXNFcnJvcic6IGlzRXJyb3JfMSxcbiAgJ2lzRnVuY3Rpb24nOiBpc0Z1bmN0aW9uXzEsXG4gICdpc1dlYWtNYXAnOiBpc1dlYWtNYXBfMSxcbiAgJ2l0ZXJhdGVlJzogaXRlcmF0ZWVfMSxcbiAgJ2tleXMnOiBfYmFzZUtleXMsXG4gICdyZWFyZyc6IHJlYXJnXzEsXG4gICd0b0ludGVnZXInOiB0b0ludGVnZXJfMSxcbiAgJ3RvUGF0aCc6IHRvUGF0aF8xXG59O1xuXG52YXIgYmFzZUNvbnZlcnQgPSBfYmFzZUNvbnZlcnQsXG4gICAgdXRpbCA9IF91dGlsO1xuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCBvZiBgbmFtZWAgdG8gYW4gaW1tdXRhYmxlIGF1dG8tY3VycmllZCBpdGVyYXRlZS1maXJzdCBkYXRhLWxhc3RcbiAqIHZlcnNpb24gd2l0aCBjb252ZXJzaW9uIGBvcHRpb25zYCBhcHBsaWVkLiBJZiBgbmFtZWAgaXMgYW4gb2JqZWN0IGl0cyBtZXRob2RzXG4gKiB3aWxsIGJlIGNvbnZlcnRlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtmdW5jXSBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gVGhlIG9wdGlvbnMgb2JqZWN0LiBTZWUgYGJhc2VDb252ZXJ0YCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gUmV0dXJucyB0aGUgY29udmVydGVkIGZ1bmN0aW9uIG9yIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gY29udmVydCQ0KG5hbWUsIGZ1bmMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGJhc2VDb252ZXJ0KHV0aWwsIG5hbWUsIGZ1bmMsIG9wdGlvbnMpO1xufVxuXG52YXIgY29udmVydF8xID0gY29udmVydCQ0O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgZmFsc2V5IHZhbHVlcyByZW1vdmVkLiBUaGUgdmFsdWVzIGBmYWxzZWAsIGBudWxsYCxcbiAqIGAwYCwgYFwiXCJgLCBgdW5kZWZpbmVkYCwgYW5kIGBOYU5gIGFyZSBmYWxzZXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFjdC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5jb21wYWN0KFswLCAxLCBmYWxzZSwgMiwgJycsIDNdKTtcbiAqIC8vID0+IFsxLCAyLCAzXVxuICovXG5cbnZhciBjb21wYWN0XzE7XG52YXIgaGFzUmVxdWlyZWRDb21wYWN0O1xuXG5mdW5jdGlvbiByZXF1aXJlQ29tcGFjdCAoKSB7XG5cdGlmIChoYXNSZXF1aXJlZENvbXBhY3QpIHJldHVybiBjb21wYWN0XzE7XG5cdGhhc1JlcXVpcmVkQ29tcGFjdCA9IDE7XG5cdGZ1bmN0aW9uIGNvbXBhY3QoYXJyYXkpIHtcblx0ICB2YXIgaW5kZXggPSAtMSxcblx0ICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG5cdCAgICAgIHJlc0luZGV4ID0gMCxcblx0ICAgICAgcmVzdWx0ID0gW107XG5cblx0ICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuXHQgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXHQgICAgaWYgKHZhbHVlKSB7XG5cdCAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuXHQgICAgfVxuXHQgIH1cblx0ICByZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0Y29tcGFjdF8xID0gY29tcGFjdDtcblx0cmV0dXJuIGNvbXBhY3RfMTtcbn1cblxudmFyIF9mYWxzZU9wdGlvbnM7XG52YXIgaGFzUmVxdWlyZWRfZmFsc2VPcHRpb25zO1xuXG5mdW5jdGlvbiByZXF1aXJlX2ZhbHNlT3B0aW9ucyAoKSB7XG5cdGlmIChoYXNSZXF1aXJlZF9mYWxzZU9wdGlvbnMpIHJldHVybiBfZmFsc2VPcHRpb25zO1xuXHRoYXNSZXF1aXJlZF9mYWxzZU9wdGlvbnMgPSAxO1xuXHRfZmFsc2VPcHRpb25zID0ge1xuXHQgICdjYXAnOiBmYWxzZSxcblx0ICAnY3VycnknOiBmYWxzZSxcblx0ICAnZml4ZWQnOiBmYWxzZSxcblx0ICAnaW1tdXRhYmxlJzogZmFsc2UsXG5cdCAgJ3JlYXJnJzogZmFsc2Vcblx0fTtcblx0cmV0dXJuIF9mYWxzZU9wdGlvbnM7XG59XG5cbnZhciBjb252ZXJ0JDMgPSBjb252ZXJ0XzEsXG4gICAgZnVuYyQzID0gY29udmVydCQzKCdjb21wYWN0JywgcmVxdWlyZUNvbXBhY3QoKSwgcmVxdWlyZV9mYWxzZU9wdGlvbnMoKSk7XG5cbmZ1bmMkMy5wbGFjZWhvbGRlciA9IHJlcXVpcmVQbGFjZWhvbGRlcigpO1xudmFyIGNvbXBhY3QgPSBmdW5jJDM7XG5cbnZhciBfY3JlYXRlRmxvdztcbnZhciBoYXNSZXF1aXJlZF9jcmVhdGVGbG93O1xuXG5mdW5jdGlvbiByZXF1aXJlX2NyZWF0ZUZsb3cgKCkge1xuXHRpZiAoaGFzUmVxdWlyZWRfY3JlYXRlRmxvdykgcmV0dXJuIF9jcmVhdGVGbG93O1xuXHRoYXNSZXF1aXJlZF9jcmVhdGVGbG93ID0gMTtcblx0dmFyIExvZGFzaFdyYXBwZXIgPSByZXF1aXJlX0xvZGFzaFdyYXBwZXIoKSxcblx0ICAgIGZsYXRSZXN0ID0gcmVxdWlyZV9mbGF0UmVzdCgpLFxuXHQgICAgZ2V0RGF0YSA9IHJlcXVpcmVfZ2V0RGF0YSgpLFxuXHQgICAgZ2V0RnVuY05hbWUgPSByZXF1aXJlX2dldEZ1bmNOYW1lKCksXG5cdCAgICBpc0FycmF5ID0gaXNBcnJheV8xLFxuXHQgICAgaXNMYXppYWJsZSA9IHJlcXVpcmVfaXNMYXppYWJsZSgpO1xuXG5cdC8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cblx0dmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuXHQvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBmdW5jdGlvbiBtZXRhZGF0YS4gKi9cblx0dmFyIFdSQVBfQ1VSUllfRkxBRyA9IDgsXG5cdCAgICBXUkFQX1BBUlRJQUxfRkxBRyA9IDMyLFxuXHQgICAgV1JBUF9BUllfRkxBRyA9IDEyOCxcblx0ICAgIFdSQVBfUkVBUkdfRkxBRyA9IDI1NjtcblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIGBfLmZsb3dgIG9yIGBfLmZsb3dSaWdodGAgZnVuY3Rpb24uXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuXHQgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmbG93IGZ1bmN0aW9uLlxuXHQgKi9cblx0ZnVuY3Rpb24gY3JlYXRlRmxvdyhmcm9tUmlnaHQpIHtcblx0ICByZXR1cm4gZmxhdFJlc3QoZnVuY3Rpb24oZnVuY3MpIHtcblx0ICAgIHZhciBsZW5ndGggPSBmdW5jcy5sZW5ndGgsXG5cdCAgICAgICAgaW5kZXggPSBsZW5ndGgsXG5cdCAgICAgICAgcHJlcmVxID0gTG9kYXNoV3JhcHBlci5wcm90b3R5cGUudGhydTtcblxuXHQgICAgaWYgKGZyb21SaWdodCkge1xuXHQgICAgICBmdW5jcy5yZXZlcnNlKCk7XG5cdCAgICB9XG5cdCAgICB3aGlsZSAoaW5kZXgtLSkge1xuXHQgICAgICB2YXIgZnVuYyA9IGZ1bmNzW2luZGV4XTtcblx0ICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHByZXJlcSAmJiAhd3JhcHBlciAmJiBnZXRGdW5jTmFtZShmdW5jKSA9PSAnd3JhcHBlcicpIHtcblx0ICAgICAgICB2YXIgd3JhcHBlciA9IG5ldyBMb2Rhc2hXcmFwcGVyKFtdLCB0cnVlKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgaW5kZXggPSB3cmFwcGVyID8gaW5kZXggOiBsZW5ndGg7XG5cdCAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuXHQgICAgICBmdW5jID0gZnVuY3NbaW5kZXhdO1xuXG5cdCAgICAgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLFxuXHQgICAgICAgICAgZGF0YSA9IGZ1bmNOYW1lID09ICd3cmFwcGVyJyA/IGdldERhdGEoZnVuYykgOiB1bmRlZmluZWQ7XG5cblx0ICAgICAgaWYgKGRhdGEgJiYgaXNMYXppYWJsZShkYXRhWzBdKSAmJlxuXHQgICAgICAgICAgICBkYXRhWzFdID09IChXUkFQX0FSWV9GTEFHIHwgV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9QQVJUSUFMX0ZMQUcgfCBXUkFQX1JFQVJHX0ZMQUcpICYmXG5cdCAgICAgICAgICAgICFkYXRhWzRdLmxlbmd0aCAmJiBkYXRhWzldID09IDFcblx0ICAgICAgICAgICkge1xuXHQgICAgICAgIHdyYXBwZXIgPSB3cmFwcGVyW2dldEZ1bmNOYW1lKGRhdGFbMF0pXS5hcHBseSh3cmFwcGVyLCBkYXRhWzNdKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB3cmFwcGVyID0gKGZ1bmMubGVuZ3RoID09IDEgJiYgaXNMYXppYWJsZShmdW5jKSlcblx0ICAgICAgICAgID8gd3JhcHBlcltmdW5jTmFtZV0oKVxuXHQgICAgICAgICAgOiB3cmFwcGVyLnRocnUoZnVuYyk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG5cdCAgICAgICAgICB2YWx1ZSA9IGFyZ3NbMF07XG5cblx0ICAgICAgaWYgKHdyYXBwZXIgJiYgYXJncy5sZW5ndGggPT0gMSAmJiBpc0FycmF5KHZhbHVlKSkge1xuXHQgICAgICAgIHJldHVybiB3cmFwcGVyLnBsYW50KHZhbHVlKS52YWx1ZSgpO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBpbmRleCA9IDAsXG5cdCAgICAgICAgICByZXN1bHQgPSBsZW5ndGggPyBmdW5jc1tpbmRleF0uYXBwbHkodGhpcywgYXJncykgOiB2YWx1ZTtcblxuXHQgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuXHQgICAgICAgIHJlc3VsdCA9IGZ1bmNzW2luZGV4XS5jYWxsKHRoaXMsIHJlc3VsdCk7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHJlc3VsdDtcblx0ICAgIH07XG5cdCAgfSk7XG5cdH1cblxuXHRfY3JlYXRlRmxvdyA9IGNyZWF0ZUZsb3c7XG5cdHJldHVybiBfY3JlYXRlRmxvdztcbn1cblxudmFyIGZsb3dfMTtcbnZhciBoYXNSZXF1aXJlZEZsb3c7XG5cbmZ1bmN0aW9uIHJlcXVpcmVGbG93ICgpIHtcblx0aWYgKGhhc1JlcXVpcmVkRmxvdykgcmV0dXJuIGZsb3dfMTtcblx0aGFzUmVxdWlyZWRGbG93ID0gMTtcblx0dmFyIGNyZWF0ZUZsb3cgPSByZXF1aXJlX2NyZWF0ZUZsb3coKTtcblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGludm9raW5nIHRoZSBnaXZlbiBmdW5jdGlvbnNcblx0ICogd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24sIHdoZXJlIGVhY2ggc3VjY2Vzc2l2ZVxuXHQgKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuXHQgKlxuXHQgKiBAc3RhdGljXG5cdCAqIEBtZW1iZXJPZiBfXG5cdCAqIEBzaW5jZSAzLjAuMFxuXHQgKiBAY2F0ZWdvcnkgVXRpbFxuXHQgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2Z1bmNzXSBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cblx0ICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuXHQgKiBAc2VlIF8uZmxvd1JpZ2h0XG5cdCAqIEBleGFtcGxlXG5cdCAqXG5cdCAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG5cdCAqICAgcmV0dXJuIG4gKiBuO1xuXHQgKiB9XG5cdCAqXG5cdCAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3coW18uYWRkLCBzcXVhcmVdKTtcblx0ICogYWRkU3F1YXJlKDEsIDIpO1xuXHQgKiAvLyA9PiA5XG5cdCAqL1xuXHR2YXIgZmxvdyA9IGNyZWF0ZUZsb3coKTtcblxuXHRmbG93XzEgPSBmbG93O1xuXHRyZXR1cm4gZmxvd18xO1xufVxuXG52YXIgY29udmVydCQyID0gY29udmVydF8xLFxuICAgIGZ1bmMkMiA9IGNvbnZlcnQkMignZmxvdycsIHJlcXVpcmVGbG93KCkpO1xuXG5mdW5jJDIucGxhY2Vob2xkZXIgPSByZXF1aXJlUGxhY2Vob2xkZXIoKTtcbnZhciBmbG93ID0gZnVuYyQyO1xuXG52YXIgX2Jhc2VNYXA7XG52YXIgaGFzUmVxdWlyZWRfYmFzZU1hcDtcblxuZnVuY3Rpb24gcmVxdWlyZV9iYXNlTWFwICgpIHtcblx0aWYgKGhhc1JlcXVpcmVkX2Jhc2VNYXApIHJldHVybiBfYmFzZU1hcDtcblx0aGFzUmVxdWlyZWRfYmFzZU1hcCA9IDE7XG5cdHZhciBiYXNlRWFjaCA9IF9iYXNlRWFjaCxcblx0ICAgIGlzQXJyYXlMaWtlID0gaXNBcnJheUxpa2VfMTtcblxuXHQvKipcblx0ICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWFwYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cblx0ICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuXHQgKi9cblx0ZnVuY3Rpb24gYmFzZU1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuXHQgIHZhciBpbmRleCA9IC0xLFxuXHQgICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG5cdCAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuXHQgICAgcmVzdWx0WysraW5kZXhdID0gaXRlcmF0ZWUodmFsdWUsIGtleSwgY29sbGVjdGlvbik7XG5cdCAgfSk7XG5cdCAgcmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdF9iYXNlTWFwID0gYmFzZU1hcDtcblx0cmV0dXJuIF9iYXNlTWFwO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRCeWAgd2hpY2ggdXNlcyBgY29tcGFyZXJgIHRvIGRlZmluZSB0aGVcbiAqIHNvcnQgb3JkZXIgb2YgYGFycmF5YCBhbmQgcmVwbGFjZXMgY3JpdGVyaWEgb2JqZWN0cyB3aXRoIHRoZWlyIGNvcnJlc3BvbmRpbmdcbiAqIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNvcnQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJlciBUaGUgZnVuY3Rpb24gdG8gZGVmaW5lIHNvcnQgb3JkZXIuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuXG52YXIgX2Jhc2VTb3J0Qnk7XG52YXIgaGFzUmVxdWlyZWRfYmFzZVNvcnRCeTtcblxuZnVuY3Rpb24gcmVxdWlyZV9iYXNlU29ydEJ5ICgpIHtcblx0aWYgKGhhc1JlcXVpcmVkX2Jhc2VTb3J0QnkpIHJldHVybiBfYmFzZVNvcnRCeTtcblx0aGFzUmVxdWlyZWRfYmFzZVNvcnRCeSA9IDE7XG5cdGZ1bmN0aW9uIGJhc2VTb3J0QnkoYXJyYXksIGNvbXBhcmVyKSB7XG5cdCAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuXHQgIGFycmF5LnNvcnQoY29tcGFyZXIpO1xuXHQgIHdoaWxlIChsZW5ndGgtLSkge1xuXHQgICAgYXJyYXlbbGVuZ3RoXSA9IGFycmF5W2xlbmd0aF0udmFsdWU7XG5cdCAgfVxuXHQgIHJldHVybiBhcnJheTtcblx0fVxuXG5cdF9iYXNlU29ydEJ5ID0gYmFzZVNvcnRCeTtcblx0cmV0dXJuIF9iYXNlU29ydEJ5O1xufVxuXG52YXIgX2NvbXBhcmVBc2NlbmRpbmc7XG52YXIgaGFzUmVxdWlyZWRfY29tcGFyZUFzY2VuZGluZztcblxuZnVuY3Rpb24gcmVxdWlyZV9jb21wYXJlQXNjZW5kaW5nICgpIHtcblx0aWYgKGhhc1JlcXVpcmVkX2NvbXBhcmVBc2NlbmRpbmcpIHJldHVybiBfY29tcGFyZUFzY2VuZGluZztcblx0aGFzUmVxdWlyZWRfY29tcGFyZUFzY2VuZGluZyA9IDE7XG5cdHZhciBpc1N5bWJvbCA9IGlzU3ltYm9sXzE7XG5cblx0LyoqXG5cdCAqIENvbXBhcmVzIHZhbHVlcyB0byBzb3J0IHRoZW0gaW4gYXNjZW5kaW5nIG9yZGVyLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuXHQgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuXHQgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzb3J0IG9yZGVyIGluZGljYXRvciBmb3IgYHZhbHVlYC5cblx0ICovXG5cdGZ1bmN0aW9uIGNvbXBhcmVBc2NlbmRpbmcodmFsdWUsIG90aGVyKSB7XG5cdCAgaWYgKHZhbHVlICE9PSBvdGhlcikge1xuXHQgICAgdmFyIHZhbElzRGVmaW5lZCA9IHZhbHVlICE9PSB1bmRlZmluZWQsXG5cdCAgICAgICAgdmFsSXNOdWxsID0gdmFsdWUgPT09IG51bGwsXG5cdCAgICAgICAgdmFsSXNSZWZsZXhpdmUgPSB2YWx1ZSA9PT0gdmFsdWUsXG5cdCAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSk7XG5cblx0ICAgIHZhciBvdGhJc0RlZmluZWQgPSBvdGhlciAhPT0gdW5kZWZpbmVkLFxuXHQgICAgICAgIG90aElzTnVsbCA9IG90aGVyID09PSBudWxsLFxuXHQgICAgICAgIG90aElzUmVmbGV4aXZlID0gb3RoZXIgPT09IG90aGVyLFxuXHQgICAgICAgIG90aElzU3ltYm9sID0gaXNTeW1ib2wob3RoZXIpO1xuXG5cdCAgICBpZiAoKCFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sICYmICF2YWxJc1N5bWJvbCAmJiB2YWx1ZSA+IG90aGVyKSB8fFxuXHQgICAgICAgICh2YWxJc1N5bWJvbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUgJiYgIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wpIHx8XG5cdCAgICAgICAgKHZhbElzTnVsbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUpIHx8XG5cdCAgICAgICAgKCF2YWxJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUpIHx8XG5cdCAgICAgICAgIXZhbElzUmVmbGV4aXZlKSB7XG5cdCAgICAgIHJldHVybiAxO1xuXHQgICAgfVxuXHQgICAgaWYgKCghdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCAmJiAhb3RoSXNTeW1ib2wgJiYgdmFsdWUgPCBvdGhlcikgfHxcblx0ICAgICAgICAob3RoSXNTeW1ib2wgJiYgdmFsSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlICYmICF2YWxJc051bGwgJiYgIXZhbElzU3ltYm9sKSB8fFxuXHQgICAgICAgIChvdGhJc051bGwgJiYgdmFsSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuXHQgICAgICAgICghb3RoSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuXHQgICAgICAgICFvdGhJc1JlZmxleGl2ZSkge1xuXHQgICAgICByZXR1cm4gLTE7XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiAwO1xuXHR9XG5cblx0X2NvbXBhcmVBc2NlbmRpbmcgPSBjb21wYXJlQXNjZW5kaW5nO1xuXHRyZXR1cm4gX2NvbXBhcmVBc2NlbmRpbmc7XG59XG5cbnZhciBfY29tcGFyZU11bHRpcGxlO1xudmFyIGhhc1JlcXVpcmVkX2NvbXBhcmVNdWx0aXBsZTtcblxuZnVuY3Rpb24gcmVxdWlyZV9jb21wYXJlTXVsdGlwbGUgKCkge1xuXHRpZiAoaGFzUmVxdWlyZWRfY29tcGFyZU11bHRpcGxlKSByZXR1cm4gX2NvbXBhcmVNdWx0aXBsZTtcblx0aGFzUmVxdWlyZWRfY29tcGFyZU11bHRpcGxlID0gMTtcblx0dmFyIGNvbXBhcmVBc2NlbmRpbmcgPSByZXF1aXJlX2NvbXBhcmVBc2NlbmRpbmcoKTtcblxuXHQvKipcblx0ICogVXNlZCBieSBgXy5vcmRlckJ5YCB0byBjb21wYXJlIG11bHRpcGxlIHByb3BlcnRpZXMgb2YgYSB2YWx1ZSB0byBhbm90aGVyXG5cdCAqIGFuZCBzdGFibGUgc29ydCB0aGVtLlxuXHQgKlxuXHQgKiBJZiBgb3JkZXJzYCBpcyB1bnNwZWNpZmllZCwgYWxsIHZhbHVlcyBhcmUgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlci4gT3RoZXJ3aXNlLFxuXHQgKiBzcGVjaWZ5IGFuIG9yZGVyIG9mIFwiZGVzY1wiIGZvciBkZXNjZW5kaW5nIG9yIFwiYXNjXCIgZm9yIGFzY2VuZGluZyBzb3J0IG9yZGVyXG5cdCAqIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cblx0ICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cblx0ICogQHBhcmFtIHtib29sZWFuW118c3RyaW5nW119IG9yZGVycyBUaGUgb3JkZXIgdG8gc29ydCBieSBmb3IgZWFjaCBwcm9wZXJ0eS5cblx0ICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGBvYmplY3RgLlxuXHQgKi9cblx0ZnVuY3Rpb24gY29tcGFyZU11bHRpcGxlKG9iamVjdCwgb3RoZXIsIG9yZGVycykge1xuXHQgIHZhciBpbmRleCA9IC0xLFxuXHQgICAgICBvYmpDcml0ZXJpYSA9IG9iamVjdC5jcml0ZXJpYSxcblx0ICAgICAgb3RoQ3JpdGVyaWEgPSBvdGhlci5jcml0ZXJpYSxcblx0ICAgICAgbGVuZ3RoID0gb2JqQ3JpdGVyaWEubGVuZ3RoLFxuXHQgICAgICBvcmRlcnNMZW5ndGggPSBvcmRlcnMubGVuZ3RoO1xuXG5cdCAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcblx0ICAgIHZhciByZXN1bHQgPSBjb21wYXJlQXNjZW5kaW5nKG9iakNyaXRlcmlhW2luZGV4XSwgb3RoQ3JpdGVyaWFbaW5kZXhdKTtcblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgICAgaWYgKGluZGV4ID49IG9yZGVyc0xlbmd0aCkge1xuXHQgICAgICAgIHJldHVybiByZXN1bHQ7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIG9yZGVyID0gb3JkZXJzW2luZGV4XTtcblx0ICAgICAgcmV0dXJuIHJlc3VsdCAqIChvcmRlciA9PSAnZGVzYycgPyAtMSA6IDEpO1xuXHQgICAgfVxuXHQgIH1cblx0ICAvLyBGaXhlcyBhbiBgQXJyYXkjc29ydGAgYnVnIGluIHRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgYXBwbGljYXRpb25zXG5cdCAgLy8gdGhhdCBjYXVzZXMgaXQsIHVuZGVyIGNlcnRhaW4gY2lyY3Vtc3RhbmNlcywgdG8gcHJvdmlkZSB0aGUgc2FtZSB2YWx1ZSBmb3Jcblx0ICAvLyBgb2JqZWN0YCBhbmQgYG90aGVyYC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qYXNoa2VuYXMvdW5kZXJzY29yZS9wdWxsLzEyNDdcblx0ICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuXHQgIC8vXG5cdCAgLy8gVGhpcyBhbHNvIGVuc3VyZXMgYSBzdGFibGUgc29ydCBpbiBWOCBhbmQgb3RoZXIgZW5naW5lcy5cblx0ICAvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9OTAgZm9yIG1vcmUgZGV0YWlscy5cblx0ICByZXR1cm4gb2JqZWN0LmluZGV4IC0gb3RoZXIuaW5kZXg7XG5cdH1cblxuXHRfY29tcGFyZU11bHRpcGxlID0gY29tcGFyZU11bHRpcGxlO1xuXHRyZXR1cm4gX2NvbXBhcmVNdWx0aXBsZTtcbn1cblxudmFyIF9iYXNlT3JkZXJCeTtcbnZhciBoYXNSZXF1aXJlZF9iYXNlT3JkZXJCeTtcblxuZnVuY3Rpb24gcmVxdWlyZV9iYXNlT3JkZXJCeSAoKSB7XG5cdGlmIChoYXNSZXF1aXJlZF9iYXNlT3JkZXJCeSkgcmV0dXJuIF9iYXNlT3JkZXJCeTtcblx0aGFzUmVxdWlyZWRfYmFzZU9yZGVyQnkgPSAxO1xuXHR2YXIgYXJyYXlNYXAgPSByZXF1aXJlX2FycmF5TWFwKCksXG5cdCAgICBiYXNlR2V0ID0gcmVxdWlyZV9iYXNlR2V0KCksXG5cdCAgICBiYXNlSXRlcmF0ZWUgPSBfYmFzZUl0ZXJhdGVlLFxuXHQgICAgYmFzZU1hcCA9IHJlcXVpcmVfYmFzZU1hcCgpLFxuXHQgICAgYmFzZVNvcnRCeSA9IHJlcXVpcmVfYmFzZVNvcnRCeSgpLFxuXHQgICAgYmFzZVVuYXJ5ID0gcmVxdWlyZV9iYXNlVW5hcnkoKSxcblx0ICAgIGNvbXBhcmVNdWx0aXBsZSA9IHJlcXVpcmVfY29tcGFyZU11bHRpcGxlKCksXG5cdCAgICBpZGVudGl0eSA9IGlkZW50aXR5XzEsXG5cdCAgICBpc0FycmF5ID0gaXNBcnJheV8xO1xuXG5cdC8qKlxuXHQgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5vcmRlckJ5YCB3aXRob3V0IHBhcmFtIGd1YXJkcy5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IGl0ZXJhdGVlcyBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG5cdCAqIEBwYXJhbSB7c3RyaW5nW119IG9yZGVycyBUaGUgc29ydCBvcmRlcnMgb2YgYGl0ZXJhdGVlc2AuXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cblx0ICovXG5cdGZ1bmN0aW9uIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzKSB7XG5cdCAgaWYgKGl0ZXJhdGVlcy5sZW5ndGgpIHtcblx0ICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcblx0ICAgICAgaWYgKGlzQXJyYXkoaXRlcmF0ZWUpKSB7XG5cdCAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG5cdCAgICAgICAgICByZXR1cm4gYmFzZUdldCh2YWx1ZSwgaXRlcmF0ZWUubGVuZ3RoID09PSAxID8gaXRlcmF0ZWVbMF0gOiBpdGVyYXRlZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBpdGVyYXRlZTtcblx0ICAgIH0pO1xuXHQgIH0gZWxzZSB7XG5cdCAgICBpdGVyYXRlZXMgPSBbaWRlbnRpdHldO1xuXHQgIH1cblxuXHQgIHZhciBpbmRleCA9IC0xO1xuXHQgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgYmFzZVVuYXJ5KGJhc2VJdGVyYXRlZSkpO1xuXG5cdCAgdmFyIHJlc3VsdCA9IGJhc2VNYXAoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuXHQgICAgdmFyIGNyaXRlcmlhID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuXHQgICAgICByZXR1cm4gaXRlcmF0ZWUodmFsdWUpO1xuXHQgICAgfSk7XG5cdCAgICByZXR1cm4geyAnY3JpdGVyaWEnOiBjcml0ZXJpYSwgJ2luZGV4JzogKytpbmRleCwgJ3ZhbHVlJzogdmFsdWUgfTtcblx0ICB9KTtcblxuXHQgIHJldHVybiBiYXNlU29ydEJ5KHJlc3VsdCwgZnVuY3Rpb24ob2JqZWN0LCBvdGhlcikge1xuXHQgICAgcmV0dXJuIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpO1xuXHQgIH0pO1xuXHR9XG5cblx0X2Jhc2VPcmRlckJ5ID0gYmFzZU9yZGVyQnk7XG5cdHJldHVybiBfYmFzZU9yZGVyQnk7XG59XG5cbnZhciBzb3J0QnlfMTtcbnZhciBoYXNSZXF1aXJlZFNvcnRCeTtcblxuZnVuY3Rpb24gcmVxdWlyZVNvcnRCeSAoKSB7XG5cdGlmIChoYXNSZXF1aXJlZFNvcnRCeSkgcmV0dXJuIHNvcnRCeV8xO1xuXHRoYXNSZXF1aXJlZFNvcnRCeSA9IDE7XG5cdHZhciBiYXNlRmxhdHRlbiA9IHJlcXVpcmVfYmFzZUZsYXR0ZW4oKSxcblx0ICAgIGJhc2VPcmRlckJ5ID0gcmVxdWlyZV9iYXNlT3JkZXJCeSgpLFxuXHQgICAgYmFzZVJlc3QgPSBfYmFzZVJlc3QsXG5cdCAgICBpc0l0ZXJhdGVlQ2FsbCA9IF9pc0l0ZXJhdGVlQ2FsbDtcblxuXHQvKipcblx0ICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cywgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlciBieSB0aGUgcmVzdWx0cyBvZlxuXHQgKiBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBhIGNvbGxlY3Rpb24gdGhydSBlYWNoIGl0ZXJhdGVlLiBUaGlzIG1ldGhvZFxuXHQgKiBwZXJmb3JtcyBhIHN0YWJsZSBzb3J0LCB0aGF0IGlzLCBpdCBwcmVzZXJ2ZXMgdGhlIG9yaWdpbmFsIHNvcnQgb3JkZXIgb2Zcblx0ICogZXF1YWwgZWxlbWVudHMuIFRoZSBpdGVyYXRlZXMgYXJlIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG5cdCAqXG5cdCAqIEBzdGF0aWNcblx0ICogQG1lbWJlck9mIF9cblx0ICogQHNpbmNlIDAuMS4wXG5cdCAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG5cdCAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cblx0ICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuXHQgKiAgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG5cdCAqIEBleGFtcGxlXG5cdCAqXG5cdCAqIHZhciB1c2VycyA9IFtcblx0ICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuXHQgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG5cdCAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogMzAgfSxcblx0ICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNCB9XG5cdCAqIF07XG5cdCAqXG5cdCAqIF8uc29ydEJ5KHVzZXJzLCBbZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyOyB9XSk7XG5cdCAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM2XSwgWydiYXJuZXknLCAzNF0sIFsnZnJlZCcsIDQ4XSwgWydmcmVkJywgMzBdXVxuXHQgKlxuXHQgKiBfLnNvcnRCeSh1c2VycywgWyd1c2VyJywgJ2FnZSddKTtcblx0ICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzRdLCBbJ2Jhcm5leScsIDM2XSwgWydmcmVkJywgMzBdLCBbJ2ZyZWQnLCA0OF1dXG5cdCAqL1xuXHR2YXIgc29ydEJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWVzKSB7XG5cdCAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuXHQgICAgcmV0dXJuIFtdO1xuXHQgIH1cblx0ICB2YXIgbGVuZ3RoID0gaXRlcmF0ZWVzLmxlbmd0aDtcblx0ICBpZiAobGVuZ3RoID4gMSAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBpdGVyYXRlZXNbMF0sIGl0ZXJhdGVlc1sxXSkpIHtcblx0ICAgIGl0ZXJhdGVlcyA9IFtdO1xuXHQgIH0gZWxzZSBpZiAobGVuZ3RoID4gMiAmJiBpc0l0ZXJhdGVlQ2FsbChpdGVyYXRlZXNbMF0sIGl0ZXJhdGVlc1sxXSwgaXRlcmF0ZWVzWzJdKSkge1xuXHQgICAgaXRlcmF0ZWVzID0gW2l0ZXJhdGVlc1swXV07XG5cdCAgfVxuXHQgIHJldHVybiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBiYXNlRmxhdHRlbihpdGVyYXRlZXMsIDEpLCBbXSk7XG5cdH0pO1xuXG5cdHNvcnRCeV8xID0gc29ydEJ5O1xuXHRyZXR1cm4gc29ydEJ5XzE7XG59XG5cbnZhciBjb252ZXJ0JDEgPSBjb252ZXJ0XzEsXG4gICAgZnVuYyQxID0gY29udmVydCQxKCdzb3J0QnknLCByZXF1aXJlU29ydEJ5KCkpO1xuXG5mdW5jJDEucGxhY2Vob2xkZXIgPSByZXF1aXJlUGxhY2Vob2xkZXIoKTtcbnZhciBzb3J0QnkgPSBmdW5jJDE7XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBhcnJheUluY2x1ZGVzYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGEgY29tcGFyYXRvci5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gKi9cblxudmFyIF9hcnJheUluY2x1ZGVzV2l0aDtcbnZhciBoYXNSZXF1aXJlZF9hcnJheUluY2x1ZGVzV2l0aDtcblxuZnVuY3Rpb24gcmVxdWlyZV9hcnJheUluY2x1ZGVzV2l0aCAoKSB7XG5cdGlmIChoYXNSZXF1aXJlZF9hcnJheUluY2x1ZGVzV2l0aCkgcmV0dXJuIF9hcnJheUluY2x1ZGVzV2l0aDtcblx0aGFzUmVxdWlyZWRfYXJyYXlJbmNsdWRlc1dpdGggPSAxO1xuXHRmdW5jdGlvbiBhcnJheUluY2x1ZGVzV2l0aChhcnJheSwgdmFsdWUsIGNvbXBhcmF0b3IpIHtcblx0ICB2YXIgaW5kZXggPSAtMSxcblx0ICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cblx0ICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuXHQgICAgaWYgKGNvbXBhcmF0b3IodmFsdWUsIGFycmF5W2luZGV4XSkpIHtcblx0ICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICB9XG5cdCAgfVxuXHQgIHJldHVybiBmYWxzZTtcblx0fVxuXG5cdF9hcnJheUluY2x1ZGVzV2l0aCA9IGFycmF5SW5jbHVkZXNXaXRoO1xuXHRyZXR1cm4gX2FycmF5SW5jbHVkZXNXaXRoO1xufVxuXG52YXIgX2NyZWF0ZVNldDtcbnZhciBoYXNSZXF1aXJlZF9jcmVhdGVTZXQ7XG5cbmZ1bmN0aW9uIHJlcXVpcmVfY3JlYXRlU2V0ICgpIHtcblx0aWYgKGhhc1JlcXVpcmVkX2NyZWF0ZVNldCkgcmV0dXJuIF9jcmVhdGVTZXQ7XG5cdGhhc1JlcXVpcmVkX2NyZWF0ZVNldCA9IDE7XG5cdHZhciBTZXQgPSByZXF1aXJlX1NldCgpLFxuXHQgICAgbm9vcCA9IHJlcXVpcmVOb29wKCksXG5cdCAgICBzZXRUb0FycmF5ID0gcmVxdWlyZV9zZXRUb0FycmF5KCk7XG5cblx0LyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG5cdHZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgc2V0IG9iamVjdCBvZiBgdmFsdWVzYC5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYWRkIHRvIHRoZSBzZXQuXG5cdCAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBzZXQuXG5cdCAqL1xuXHR2YXIgY3JlYXRlU2V0ID0gIShTZXQgJiYgKDEgLyBzZXRUb0FycmF5KG5ldyBTZXQoWywtMF0pKVsxXSkgPT0gSU5GSU5JVFkpID8gbm9vcCA6IGZ1bmN0aW9uKHZhbHVlcykge1xuXHQgIHJldHVybiBuZXcgU2V0KHZhbHVlcyk7XG5cdH07XG5cblx0X2NyZWF0ZVNldCA9IGNyZWF0ZVNldDtcblx0cmV0dXJuIF9jcmVhdGVTZXQ7XG59XG5cbnZhciBfYmFzZVVuaXE7XG52YXIgaGFzUmVxdWlyZWRfYmFzZVVuaXE7XG5cbmZ1bmN0aW9uIHJlcXVpcmVfYmFzZVVuaXEgKCkge1xuXHRpZiAoaGFzUmVxdWlyZWRfYmFzZVVuaXEpIHJldHVybiBfYmFzZVVuaXE7XG5cdGhhc1JlcXVpcmVkX2Jhc2VVbmlxID0gMTtcblx0dmFyIFNldENhY2hlID0gcmVxdWlyZV9TZXRDYWNoZSgpLFxuXHQgICAgYXJyYXlJbmNsdWRlcyA9IHJlcXVpcmVfYXJyYXlJbmNsdWRlcygpLFxuXHQgICAgYXJyYXlJbmNsdWRlc1dpdGggPSByZXF1aXJlX2FycmF5SW5jbHVkZXNXaXRoKCksXG5cdCAgICBjYWNoZUhhcyA9IHJlcXVpcmVfY2FjaGVIYXMoKSxcblx0ICAgIGNyZWF0ZVNldCA9IHJlcXVpcmVfY3JlYXRlU2V0KCksXG5cdCAgICBzZXRUb0FycmF5ID0gcmVxdWlyZV9zZXRUb0FycmF5KCk7XG5cblx0LyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG5cdHZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG5cdC8qKlxuXHQgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmlxQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cblx0ICovXG5cdGZ1bmN0aW9uIGJhc2VVbmlxKGFycmF5LCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuXHQgIHZhciBpbmRleCA9IC0xLFxuXHQgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXMsXG5cdCAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcblx0ICAgICAgaXNDb21tb24gPSB0cnVlLFxuXHQgICAgICByZXN1bHQgPSBbXSxcblx0ICAgICAgc2VlbiA9IHJlc3VsdDtcblxuXHQgIGlmIChjb21wYXJhdG9yKSB7XG5cdCAgICBpc0NvbW1vbiA9IGZhbHNlO1xuXHQgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzV2l0aDtcblx0ICB9XG5cdCAgZWxzZSBpZiAobGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcblx0ICAgIHZhciBzZXQgPSBpdGVyYXRlZSA/IG51bGwgOiBjcmVhdGVTZXQoYXJyYXkpO1xuXHQgICAgaWYgKHNldCkge1xuXHQgICAgICByZXR1cm4gc2V0VG9BcnJheShzZXQpO1xuXHQgICAgfVxuXHQgICAgaXNDb21tb24gPSBmYWxzZTtcblx0ICAgIGluY2x1ZGVzID0gY2FjaGVIYXM7XG5cdCAgICBzZWVuID0gbmV3IFNldENhY2hlO1xuXHQgIH1cblx0ICBlbHNlIHtcblx0ICAgIHNlZW4gPSBpdGVyYXRlZSA/IFtdIDogcmVzdWx0O1xuXHQgIH1cblx0ICBvdXRlcjpcblx0ICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuXHQgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuXHQgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuXHQgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG5cdCAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG5cdCAgICAgIHZhciBzZWVuSW5kZXggPSBzZWVuLmxlbmd0aDtcblx0ICAgICAgd2hpbGUgKHNlZW5JbmRleC0tKSB7XG5cdCAgICAgICAgaWYgKHNlZW5bc2VlbkluZGV4XSA9PT0gY29tcHV0ZWQpIHtcblx0ICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICBpZiAoaXRlcmF0ZWUpIHtcblx0ICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuXHQgICAgICB9XG5cdCAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcblx0ICAgIH1cblx0ICAgIGVsc2UgaWYgKCFpbmNsdWRlcyhzZWVuLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcblx0ICAgICAgaWYgKHNlZW4gIT09IHJlc3VsdCkge1xuXHQgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG5cdCAgICAgIH1cblx0ICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuXHQgICAgfVxuXHQgIH1cblx0ICByZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0X2Jhc2VVbmlxID0gYmFzZVVuaXE7XG5cdHJldHVybiBfYmFzZVVuaXE7XG59XG5cbnZhciB1bmlxQnlfMTtcbnZhciBoYXNSZXF1aXJlZFVuaXFCeTtcblxuZnVuY3Rpb24gcmVxdWlyZVVuaXFCeSAoKSB7XG5cdGlmIChoYXNSZXF1aXJlZFVuaXFCeSkgcmV0dXJuIHVuaXFCeV8xO1xuXHRoYXNSZXF1aXJlZFVuaXFCeSA9IDE7XG5cdHZhciBiYXNlSXRlcmF0ZWUgPSBfYmFzZUl0ZXJhdGVlLFxuXHQgICAgYmFzZVVuaXEgPSByZXF1aXJlX2Jhc2VVbmlxKCk7XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG5cdCAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcblx0ICogdW5pcXVlbmVzcyBpcyBjb21wdXRlZC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGVcblx0ICogb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuXHQgKiAodmFsdWUpLlxuXHQgKlxuXHQgKiBAc3RhdGljXG5cdCAqIEBtZW1iZXJPZiBfXG5cdCAqIEBzaW5jZSA0LjAuMFxuXHQgKiBAY2F0ZWdvcnkgQXJyYXlcblx0ICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cblx0ICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG5cdCAqIEBleGFtcGxlXG5cdCAqXG5cdCAqIF8udW5pcUJ5KFsyLjEsIDEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG5cdCAqIC8vID0+IFsyLjEsIDEuMl1cblx0ICpcblx0ICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG5cdCAqIF8udW5pcUJ5KFt7ICd4JzogMSB9LCB7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcblx0ICogLy8gPT4gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH1dXG5cdCAqL1xuXHRmdW5jdGlvbiB1bmlxQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG5cdCAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXksIGJhc2VJdGVyYXRlZShpdGVyYXRlZSkpIDogW107XG5cdH1cblxuXHR1bmlxQnlfMSA9IHVuaXFCeTtcblx0cmV0dXJuIHVuaXFCeV8xO1xufVxuXG52YXIgY29udmVydCA9IGNvbnZlcnRfMSxcbiAgICBmdW5jID0gY29udmVydCgndW5pcUJ5JywgcmVxdWlyZVVuaXFCeSgpKTtcblxuZnVuYy5wbGFjZWhvbGRlciA9IHJlcXVpcmVQbGFjZWhvbGRlcigpO1xudmFyIHVuaXFCeSA9IGZ1bmM7XG5cbnZhciBiYXNlQXNzaWduVmFsdWUgPSBfYmFzZUFzc2lnblZhbHVlLFxuICAgIGJhc2VGb3JPd24gPSBfYmFzZUZvck93bixcbiAgICBiYXNlSXRlcmF0ZWUgPSBfYmFzZUl0ZXJhdGVlO1xuXG4vKipcbiAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tYXBWYWx1ZXNgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCB3aXRoIHRoZVxuICogc2FtZSB2YWx1ZXMgYXMgYG9iamVjdGAgYW5kIGtleXMgZ2VuZXJhdGVkIGJ5IHJ1bm5pbmcgZWFjaCBvd24gZW51bWVyYWJsZVxuICogc3RyaW5nIGtleWVkIHByb3BlcnR5IG9mIGBvYmplY3RgIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuOC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIG9iamVjdC5cbiAqIEBzZWUgXy5tYXBWYWx1ZXNcbiAqIEBleGFtcGxlXG4gKlxuICogXy5tYXBLZXlzKHsgJ2EnOiAxLCAnYic6IDIgfSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICogICByZXR1cm4ga2V5ICsgdmFsdWU7XG4gKiB9KTtcbiAqIC8vID0+IHsgJ2ExJzogMSwgJ2IyJzogMiB9XG4gKi9cbmZ1bmN0aW9uIG1hcEtleXMob2JqZWN0LCBpdGVyYXRlZSkge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGl0ZXJhdGVlID0gYmFzZUl0ZXJhdGVlKGl0ZXJhdGVlKTtcblxuICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwgaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqZWN0KSwgdmFsdWUpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIG1hcEtleXNfMSA9IG1hcEtleXM7XG5cbnZhciBhc3NpZ25WYWx1ZSA9IF9hc3NpZ25WYWx1ZSxcbiAgICBjYXN0UGF0aCA9IF9jYXN0UGF0aCxcbiAgICBpc0luZGV4ID0gX2lzSW5kZXgsXG4gICAgaXNPYmplY3QgPSBpc09iamVjdF8xLFxuICAgIHRvS2V5ID0gX3RvS2V5O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNldGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgcGF0aCBjcmVhdGlvbi5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VTZXQkMShvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKSB7XG4gIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgIHJldHVybiBvYmplY3Q7XG4gIH1cbiAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDEsXG4gICAgICBuZXN0ZWQgPSBvYmplY3Q7XG5cbiAgd2hpbGUgKG5lc3RlZCAhPSBudWxsICYmICsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pLFxuICAgICAgICBuZXdWYWx1ZSA9IHZhbHVlO1xuXG4gICAgaWYgKGtleSA9PT0gJ19fcHJvdG9fXycgfHwga2V5ID09PSAnY29uc3RydWN0b3InIHx8IGtleSA9PT0gJ3Byb3RvdHlwZScpIHtcbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgaWYgKGluZGV4ICE9IGxhc3RJbmRleCkge1xuICAgICAgdmFyIG9ialZhbHVlID0gbmVzdGVkW2tleV07XG4gICAgICBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKG9ialZhbHVlLCBrZXksIG5lc3RlZCkgOiB1bmRlZmluZWQ7XG4gICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBuZXdWYWx1ZSA9IGlzT2JqZWN0KG9ialZhbHVlKVxuICAgICAgICAgID8gb2JqVmFsdWVcbiAgICAgICAgICA6IChpc0luZGV4KHBhdGhbaW5kZXggKyAxXSkgPyBbXSA6IHt9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgYXNzaWduVmFsdWUobmVzdGVkLCBrZXksIG5ld1ZhbHVlKTtcbiAgICBuZXN0ZWQgPSBuZXN0ZWRba2V5XTtcbiAgfVxuICByZXR1cm4gb2JqZWN0O1xufVxuXG52YXIgX2Jhc2VTZXQgPSBiYXNlU2V0JDE7XG5cbnZhciBiYXNlU2V0ID0gX2Jhc2VTZXQ7XG5cbi8qKlxuICogU2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiBhIHBvcnRpb24gb2YgYHBhdGhgIGRvZXNuJ3QgZXhpc3QsXG4gKiBpdCdzIGNyZWF0ZWQuIEFycmF5cyBhcmUgY3JlYXRlZCBmb3IgbWlzc2luZyBpbmRleCBwcm9wZXJ0aWVzIHdoaWxlIG9iamVjdHNcbiAqIGFyZSBjcmVhdGVkIGZvciBhbGwgb3RoZXIgbWlzc2luZyBwcm9wZXJ0aWVzLiBVc2UgYF8uc2V0V2l0aGAgdG8gY3VzdG9taXplXG4gKiBgcGF0aGAgY3JlYXRpb24uXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjcuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICpcbiAqIF8uc2V0KG9iamVjdCwgJ2FbMF0uYi5jJywgNCk7XG4gKiBjb25zb2xlLmxvZyhvYmplY3QuYVswXS5iLmMpO1xuICogLy8gPT4gNFxuICpcbiAqIF8uc2V0KG9iamVjdCwgWyd4JywgJzAnLCAneScsICd6J10sIDUpO1xuICogY29uc29sZS5sb2cob2JqZWN0LnhbMF0ueS56KTtcbiAqIC8vID0+IDVcbiAqL1xuZnVuY3Rpb24gc2V0KG9iamVjdCwgcGF0aCwgdmFsdWUpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlKTtcbn1cblxudmFyIHNldF8xID0gc2V0O1xuXG52YXIgc2VsZWN0b3JzJGsgPSB7XG5cdGVkaXRzQW5kQWN0aXZpdHk6IHtcblx0XHRcImMycGEuY29sb3JfYWRqdXN0bWVudHNcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiQnlseSB1cHJhdmVueSB2bGFzdG5vc3RpLCBqYWtvIGplIHTDs24sIHN5dG9zdCwga8WZaXZreSwgc3TDrW55IG5lYm8gc3bEm3RsYVwiLFxuXHRcdFx0bGFiZWw6IFwiw5pwcmF2eSBiYXJldiBuZWJvIGV4cG96aWNlXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5jcmVhdGVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkJ5bCB2eXR2b8WZZW4gbm92w70gc291Ym9yIG5lYm8gb2JzYWhcIixcblx0XHRcdGxhYmVsOiBcIlZ5dHZvxZllbm9cIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmNyb3BwZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiQnlseSBwb3XFvml0eSBuw6FzdHJvamUgcHJvIG/FmcOtem51dMOtLCB6bWVuxaFlbsOtIG5lYm8gcm96xaHDrcWZZW7DrSB2aWRpdGVsbsOpIG9ibGFzdGkgb2JzYWh1XCIsXG5cdFx0XHRsYWJlbDogXCLDmnByYXZ5IG/FmcOtem51dMOtXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5kcmF3aW5nXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkJ5bHkgcG91xb5pdHkgbsOhc3Ryb2plLCBqYWtvIGpzb3UgdHXFvmt5LCDFoXTEm3RjZSwgZ3VteSBuZWJvIG7DoXN0cm9qZSB0dmFyLCBjZXN0YSBuZWJvIHBlcm9cIixcblx0XHRcdGxhYmVsOiBcIsOacHJhdnkga3Jlc2J5XCJcblx0XHR9LFxuXHRcdFwiYzJwYS5lZGl0ZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiQnlseSBwcm92ZWRlbnkgZGFsxaHDrSB6bcSbbnlcIixcblx0XHRcdGxhYmVsOiBcIkRhbMWhw60gw7pwcmF2eVwiXG5cdFx0fSxcblx0XHRcImMycGEuZmlsdGVyZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiQnlseSBwb3XFvml0eSBuw6FzdHJvamUsIGpha28ganNvdSBmaWx0cnksIHN0eWx5IG5lYm8gZWZla3R5LCBrZSB6bcSbbsSbIHZ6aGxlZHVcIixcblx0XHRcdGxhYmVsOiBcIsOacHJhdnkgZmlsdHLFryBuZWJvIHN0eWzFr1wiXG5cdFx0fSxcblx0XHRcImMycGEub3BlbmVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkJ5bCBvdGV2xZllbiBleGlzdHVqw61jw60gc291Ym9yXCIsXG5cdFx0XHRsYWJlbDogXCJPdGV2xZllbm9cIlxuXHRcdH0sXG5cdFx0XCJjMnBhLm9yaWVudGF0aW9uXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkJ5bGEgem3Em27Em25hIHBvbG9oYSBuZWJvIG9yaWVudGFjZSAob3RvxI1lbsOtLCBwxZlldnLDoWNlbsOtIGF0ZC4pXCIsXG5cdFx0XHRsYWJlbDogXCJPcmllbnRhY2Ugw7pwcmF2eVwiXG5cdFx0fSxcblx0XHRcImMycGEucGxhY2VkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkRvIHRvaG90byBzb3Vib3J1IGJ5bCBwxZlpZMOhbiBleGlzdHVqw61jw60gb2JzYWhcIixcblx0XHRcdGxhYmVsOiBcIkltcG9ydG92w6Fub1wiXG5cdFx0fSxcblx0XHRcImMycGEucmVzaXplZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJCeWx5IHptxJtuxJtueSByb3ptxJtyeSBuZWJvIHZlbGlrb3N0IHNvdWJvcnVcIixcblx0XHRcdGxhYmVsOiBcIlptxJtueSB2ZWxpa29zdGlcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLnVua25vd25cIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiQnlseSBwcm92ZWRlbnkgZGFsxaHDrSDDunByYXZ5IG5lYm8gYWt0aXZpdGEsIGt0ZXJvdSBuZWJ5bG8gbW/Fvm7DqSByb3pwb3puYXRcIixcblx0XHRcdGxhYmVsOiBcIk5lem7DoW3DqSDDunByYXZ5IG5lYm8gYWt0aXZpdGFcIlxuXHRcdH1cblx0fVxufTtcbnZhciBjc0NaID0ge1xuXHRzZWxlY3RvcnM6IHNlbGVjdG9ycyRrXG59O1xuXG52YXIgc2VsZWN0b3JzJGogPSB7XG5cdGVkaXRzQW5kQWN0aXZpdHk6IHtcblx0XHRcImMycGEuY29sb3JfYWRqdXN0bWVudHNcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiSnVzdGVyZWRlIGVnZW5za2FiZXIgc8Olc29tIHRvbmUsIG3DpnRuaW5nLCBrdXJ2ZXIsIHNreWdnZXIgZWxsZXIgZnJlbWjDpnZuaW5nZXJcIixcblx0XHRcdGxhYmVsOiBcIkZhcnZlLSBlbGxlciBla3Nwb25lcmluZ3NyZWRpZ2VyaW5nZXJcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmNyZWF0ZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiT3ByZXR0ZWRlIGVuIG55IGZpbCBlbGxlciBueXQgaW5kaG9sZFwiLFxuXHRcdFx0bGFiZWw6IFwiT3ByZXR0ZWRlXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5jcm9wcGVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkJydWd0ZSBiZXNrw6ZyaW5nc3bDpnJrdMO4amVyIHRpbCBhdCByZWR1Y2VyZSBlbGxlciB1ZHZpZGUgc3lubGlndCBpbmRob2xkc29tcsOlZGVcIixcblx0XHRcdGxhYmVsOiBcIkJlc2vDpnJpbmcgYWYgcmVkaWdlcmluZ2VyXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5kcmF3aW5nXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkJydWd0ZSB2w6Zya3TDuGplciBzw6Vzb20gYmx5YW50ZXIsIHBlbnNsZXIsIHZpc2tlbMOmZGVyZSBlbGxlciBmb3JtLSwgc3RpLSBlbGxlciBwZW5uZXbDpnJrdMO4amVyXCIsXG5cdFx0XHRsYWJlbDogXCJUZWduZXJlZGlnZXJpbmdlclwiXG5cdFx0fSxcblx0XHRcImMycGEuZWRpdGVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkZvcmV0b2cgYW5kcmUgw6ZuZHJpbmdlclwiLFxuXHRcdFx0bGFiZWw6IFwiQW5kcmUgcmVkaWdlcmluZ2VyXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5maWx0ZXJlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJCcnVndGUgdsOmcmt0w7hqZXIgc8Olc29tIGZpbHRyZSwgZm9ybWF0ZXIgZWxsZXIgZWZmZWt0ZXIgdGlsIGF0IMOmbmRyZSB1ZHNlZW5kZVwiLFxuXHRcdFx0bGFiZWw6IFwiRmlsdGVyLSBlbGxlciBmb3JtYXRyZWRpZ2VyaW5nZXJcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLm9wZW5lZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLDhWJuZWRlIGVuIGFsbGVyZWRlIGVrc2lzdGVyZW5kZSBmaWxcIixcblx0XHRcdGxhYmVsOiBcIsOFYm5lZGVcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLm9yaWVudGF0aW9uXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIsOGbmRyZWRlIHBsYWNlcmluZyBlbGxlciByZXRuaW5nIChyb3RlcmV0LCB2ZW5kdCBvc3YuKVwiLFxuXHRcdFx0bGFiZWw6IFwiUmV0bmluZyByZWRpZ2VyaW5nZXJcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLnBsYWNlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJGw7hqZWRlIGFsbGVyZWRlIGVrc2lzdGVyZW5kZSBpbmRob2xkIHRpbCBkZW5uZSBmaWxcIixcblx0XHRcdGxhYmVsOiBcIkltcG9ydGVyZWRlXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5yZXNpemVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIsOGbmRyZWRlIGRpbWVuc2lvbmVyIGVsbGVyIGZpbHN0w7hycmVsc2VcIixcblx0XHRcdGxhYmVsOiBcIsOGbmRyaW5nIGFmIHN0w7hycmVsc2UgcMOlIHJlZGlnZXJpbmdlclwiXG5cdFx0fSxcblx0XHRcImMycGEudW5rbm93blwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJGb3JldG9nIGFuZHJlIHJlZGlnZXJpbmdlciBlbGxlciBha3Rpdml0ZXRlciwgZGVyIGlra2Uga3VubmUgZ2Vua2VuZGVzXCIsXG5cdFx0XHRsYWJlbDogXCJVa2VuZHRlIHJlZGlnZXJpbmdlciBlbGxlciB1a2VuZHQgYWt0aXZpdGV0XCJcblx0XHR9XG5cdH1cbn07XG52YXIgZGFESyA9IHtcblx0c2VsZWN0b3JzOiBzZWxlY3RvcnMkalxufTtcblxudmFyIHNlbGVjdG9ycyRpID0ge1xuXHRlZGl0c0FuZEFjdGl2aXR5OiB7XG5cdFx0XCJjMnBhLmNvbG9yX2FkanVzdG1lbnRzXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkFuZ2VwYXNzdGUgRWlnZW5zY2hhZnRlbiB3aWUgRmFyYnRvbiwgU8OkdHRpZ3VuZywgS3VydmVuLCBTY2hhdHRlbiBvZGVyIEdsYW56bGljaHRlclwiLFxuXHRcdFx0bGFiZWw6IFwiw4RuZGVydW5nIHZvbiBGYXJiZSBvZGVyIEJlbGljaHR1bmdcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmNyZWF0ZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiTmV1ZSBEYXRlaSBvZGVyIG5ldWVuIEluaGFsdCBlcnN0ZWxsdFwiLFxuXHRcdFx0bGFiZWw6IFwiRXJzdGVsbHRcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmNyb3BwZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiVmVyd2VuZGV0ZSBadXNjaG5laWRld2Vya3pldWdlLCBWZXJrbGVpbmVydW5nIG9kZXIgRXJ3ZWl0ZXJ1bmcgZGVzIHNpY2h0YmFyZW4gSW5oYWx0c2JlcmVpY2hzXCIsXG5cdFx0XHRsYWJlbDogXCJadXNjaG5laWRlbiB2b24gw4RuZGVydW5nZW5cIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmRyYXdpbmdcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiVmVyd2VuZGV0ZSBXZXJremV1Z2Ugd2llIFN0aWZ0ZSwgUGluc2VsLCBSYWRpZXJlciBvZGVyIEZvcm0tLCBQZmFkLSBvZGVyIFplaWNoZW5zdGlmdC1XZXJremV1Z2VcIixcblx0XHRcdGxhYmVsOiBcIlplaWNobnVuZ3PDpG5kZXJ1bmdlblwiXG5cdFx0fSxcblx0XHRcImMycGEuZWRpdGVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIlZvcmdlbm9tbWVuZSBzb25zdGlnZSDDhG5kZXJ1bmdlblwiLFxuXHRcdFx0bGFiZWw6IFwiU29uc3RpZ2Ugw4RuZGVydW5nZW5cIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmZpbHRlcmVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIlZlcndlbmRldGUgVG9vbHMgd2llIEZpbHRlciwgU3RpbGUsIEZvcm1hdGUgb2RlciBFZmZla3RlLCBkaWUgZGFzIEVyc2NoZWludW5nc2JpbGQgw6RuZGVyblwiLFxuXHRcdFx0bGFiZWw6IFwiw4RuZGVydW5nZW4gZmlsdGVybiBvZGVyIGdlc3RhbHRlblwiXG5cdFx0fSxcblx0XHRcImMycGEub3BlbmVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIlZvcmhhbmRlbmUgRGF0ZWkgZ2XDtmZmbmV0XCIsXG5cdFx0XHRsYWJlbDogXCJHZcO2ZmZuZXRcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLm9yaWVudGF0aW9uXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIlBvc2l0aW9uIG9kZXIgQXVzcmljaHR1bmcgZ2XDpG5kZXJ0IChnZWRyZWh0LCBnZXNwaWVnZWx0IHVzdy4pXCIsXG5cdFx0XHRsYWJlbDogXCJBdXNyaWNodHVuZyDDhG5kZXJ1bmdlblwiXG5cdFx0fSxcblx0XHRcImMycGEucGxhY2VkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIlZvcmhhbmRlbmVuIEluaGFsdCB6dSBkaWVzZXIgRGF0ZWkgaGluenVnZWbDvGd0XCIsXG5cdFx0XHRsYWJlbDogXCJJbXBvcnRpZXJ0XCJcblx0XHR9LFxuXHRcdFwiYzJwYS5yZXNpemVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkdlw6RuZGVydGUgQWJtZXNzdW5nZW4gb2RlciBEYXRlaWdyw7bDn2VcIixcblx0XHRcdGxhYmVsOiBcIkdyw7bDn2Vuw6RuZGVydW5nZW5cIlxuXHRcdH0sXG5cdFx0XCJjMnBhLnVua25vd25cIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiQW5kZXJlIMOEbmRlcnVuZ2VuIG9kZXIgQWt0aXZpdMOkdGVuIGR1cmNoZ2Vmw7xocnQsIGRpZSBuaWNodCBlcmthbm50IHdlcmRlbiBrb25udGVuXCIsXG5cdFx0XHRsYWJlbDogXCJVbmJla2FubnRlIMOEbmRlcnVuZ2VuIG9kZXIgQWt0aXZpdMOkdGVuXCJcblx0XHR9XG5cdH1cbn07XG52YXIgZGVERSA9IHtcblx0c2VsZWN0b3JzOiBzZWxlY3RvcnMkaVxufTtcblxudmFyIHNlbGVjdG9ycyRoID0ge1xuXHRlZGl0c0FuZEFjdGl2aXR5OiB7XG5cdFx0XCJjMnBhLmNvbG9yX2FkanVzdG1lbnRzXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkFkanVzdGVkIHByb3BlcnRpZXMgbGlrZSB0b25lLCBzYXR1cmF0aW9uLCBjdXJ2ZXMsIHNoYWRvd3MsIG9yIGhpZ2hsaWdodHNcIixcblx0XHRcdGxhYmVsOiBcIkNvbG9yIG9yIGV4cG9zdXJlIGVkaXRzXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5jb252ZXJ0ZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiVGhlIGZvcm1hdCBvZiB0aGUgYXNzZXQgd2FzIGNoYW5nZWRcIixcblx0XHRcdGxhYmVsOiBcIkNvbnZlcnRlZCBhc3NldFwiXG5cdFx0fSxcblx0XHRcImMycGEuY3JlYXRlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJDcmVhdGVkIGEgbmV3IGZpbGUgb3IgY29udGVudFwiLFxuXHRcdFx0bGFiZWw6IFwiQ3JlYXRlZFwiXG5cdFx0fSxcblx0XHRcImMycGEuY3JvcHBlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJVc2VkIGNyb3BwaW5nIHRvb2xzLCByZWR1Y2luZyBvciBleHBhbmRpbmcgdmlzaWJsZSBjb250ZW50IGFyZWFcIixcblx0XHRcdGxhYmVsOiBcIkNyb3BwaW5nIGVkaXRzXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5kcmF3aW5nXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIlVzZWQgdG9vbHMgbGlrZSBwZW5jaWxzLCBicnVzaGVzLCBlcmFzZXJzLCBvciBzaGFwZSwgcGF0aCwgb3IgcGVuIHRvb2xzXCIsXG5cdFx0XHRsYWJlbDogXCJEcmF3aW5nIGVkaXRzXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5lZGl0ZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiTWFkZSBvdGhlciBjaGFuZ2VzXCIsXG5cdFx0XHRsYWJlbDogXCJPdGhlciBlZGl0c1wiXG5cdFx0fSxcblx0XHRcImMycGEuZmlsdGVyZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiVXNlZCB0b29scyBsaWtlIGZpbHRlcnMsIHN0eWxlcywgb3IgZWZmZWN0cyB0byBjaGFuZ2UgYXBwZWFyYW5jZVwiLFxuXHRcdFx0bGFiZWw6IFwiRmlsdGVyIG9yIHN0eWxlIGVkaXRzXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5vcGVuZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiT3BlbmVkIGEgcHJlLWV4aXN0aW5nIGZpbGVcIixcblx0XHRcdGxhYmVsOiBcIk9wZW5lZFwiXG5cdFx0fSxcblx0XHRcImMycGEub3JpZW50YXRpb25cIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiQ2hhbmdlZCBwb3NpdGlvbiBvciBvcmllbnRhdGlvbiAocm90YXRlZCwgZmxpcHBlZCwgZXRjLilcIixcblx0XHRcdGxhYmVsOiBcIk9yaWVudGF0aW9uIGVkaXRzXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5wbGFjZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiQWRkZWQgcHJlLWV4aXN0aW5nIGNvbnRlbnQgdG8gdGhpcyBmaWxlXCIsXG5cdFx0XHRsYWJlbDogXCJJbXBvcnRlZFwiXG5cdFx0fSxcblx0XHRcImMycGEucHVibGlzaGVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIlJlY2VpdmVkIGFuZCBkaXN0cmlidXRlZCBpbWFnZVwiLFxuXHRcdFx0bGFiZWw6IFwiUHVibGlzaGVkIGltYWdlXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5yZW1vdmVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIk9uZSBvciBtb3JlIGFzc2V0cyB3ZXJlIHJlbW92ZWQgZnJvbSB0aGUgZmlsZVwiLFxuXHRcdFx0bGFiZWw6IFwiQXNzZXQgcmVtb3ZlZFwiXG5cdFx0fSxcblx0XHRcImMycGEucmVwYWNrYWdlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJBc3NldCB3YXMgcmVwYWNrYWdlZCB3aXRob3V0IGJlaW5nIHByb2Nlc3NlZFwiLFxuXHRcdFx0bGFiZWw6IFwiUmVwYWNrYWdlZCBhc3NldFwiXG5cdFx0fSxcblx0XHRcImMycGEucmVzaXplZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJDaGFuZ2VkIGRpbWVuc2lvbnMgb3IgZmlsZSBzaXplXCIsXG5cdFx0XHRsYWJlbDogXCJSZXNpemluZyBlZGl0c1wiXG5cdFx0fSxcblx0XHRcImMycGEudHJhbnNjb2RlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJQcm9jZXNzZWQgb3IgY29tcHJlc3NlZCBhbiBhc3NldCB0byBvcHRpbWl6ZSBmb3IgZGlzcGxheVwiLFxuXHRcdFx0bGFiZWw6IFwiUHJvY2Vzc2VkIGFzc2V0XCJcblx0XHR9LFxuXHRcdFwiYzJwYS51bmtub3duXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIlBlcmZvcm1lZCBvdGhlciBlZGl0cyBvciBhY3Rpdml0eSB0aGF0IGNvdWxkbid0IGJlIHJlY29nbml6ZWRcIixcblx0XHRcdGxhYmVsOiBcIlVua25vd24gZWRpdHMgb3IgYWN0aXZpdHlcIlxuXHRcdH1cblx0fVxufTtcbnZhciBlblVTID0ge1xuXHRzZWxlY3RvcnM6IHNlbGVjdG9ycyRoXG59O1xuXG52YXIgc2VsZWN0b3JzJGcgPSB7XG5cdGVkaXRzQW5kQWN0aXZpdHk6IHtcblx0XHRcImMycGEuY29sb3JfYWRqdXN0bWVudHNcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiU2UgaGFuIGFqdXN0YWRvIHByb3BpZWRhZGVzIGNvbW8gZWwgdG9ubywgbGEgc2F0dXJhY2nDs24sIGxhcyBjdXJ2YXMsIGxhcyBzb21icmFzIG8gbGFzIGx1Y2VzXCIsXG5cdFx0XHRsYWJlbDogXCJFZGljaW9uZXMgZGUgY29sb3IgbyBleHBvc2ljacOzblwiXG5cdFx0fSxcblx0XHRcImMycGEuY3JlYXRlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJTZSBoYSBjcmVhZG8gdW4gbnVldm8gYXJjaGl2byBvIGNvbnRlbmlkb1wiLFxuXHRcdFx0bGFiZWw6IFwiRmVjaGEgZGUgY3JlYWNpw7NuXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5jcm9wcGVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIlNlIGhhbiB1c2FkbyBoZXJyYW1pZW50YXMgZGUgcmVjb3J0ZSwgbG8gcXVlIHJlZHVjZSBvIGV4cGFuZGUgZWwgw6FyZWEgZGUgY29udGVuaWRvIHZpc2libGVcIixcblx0XHRcdGxhYmVsOiBcIkVkaWNpb25lcyBkZSByZWNvcnRlXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5kcmF3aW5nXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIlNlIGhhbiB1c2FkbyBoZXJyYW1pZW50YXMgY29tbyBsw6FwaWNlcywgcGluY2VsZXMsIGJvcnJhZG9yZXMgbyBoZXJyYW1pZW50YXMgZGUgZm9ybWFzLCB0cmF6YWRvcyBvIGJvbMOtZ3JhZm9zXCIsXG5cdFx0XHRsYWJlbDogXCJFZGljaW9uZXMgZGUgZGlidWpvXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5lZGl0ZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiU2UgaGFuIGhlY2hvIG90cm9zIGNhbWJpb3NcIixcblx0XHRcdGxhYmVsOiBcIk90cmFzIGVkaWNpb25lc1wiXG5cdFx0fSxcblx0XHRcImMycGEuZmlsdGVyZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiU2UgaGFuIHVzYWRvIGhlcnJhbWllbnRhcyBjb21vIGZpbHRyb3MsIGVzdGlsb3MgbyBlZmVjdG9zIHBhcmEgY2FtYmlhciBsYSBhcGFyaWVuY2lhXCIsXG5cdFx0XHRsYWJlbDogXCJFZGljaW9uZXMgZGUgZmlsdHJvIG8gZXN0aWxvXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5vcGVuZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiU2UgaGEgYWJpZXJ0byB1biBhcmNoaXZvIHByZWV4aXN0ZW50ZVwiLFxuXHRcdFx0bGFiZWw6IFwiQWJpZXJ0b1wiXG5cdFx0fSxcblx0XHRcImMycGEub3JpZW50YXRpb25cIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiU2UgaGEgY2FtYmlhZG8gbGEgcG9zaWNpw7NuIHUgb3JpZW50YWNpw7NuIChnaXJhZG8sIHZvbHRlYWRvLCBldGMuKVwiLFxuXHRcdFx0bGFiZWw6IFwiRWRpY2lvbmVzIGRlIG9yaWVudGFjacOzblwiXG5cdFx0fSxcblx0XHRcImMycGEucGxhY2VkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIlNlIGhhIGHDsWFkaWRvIGNvbnRlbmlkbyBwcmVleGlzdGVudGUgYSBlc3RlIGFyY2hpdm9cIixcblx0XHRcdGxhYmVsOiBcIkltcG9ydGFkb1wiXG5cdFx0fSxcblx0XHRcImMycGEucmVzaXplZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJTZSBoYW4gbW9kaWZpY2FkbyBsYXMgZGltZW5zaW9uZXMgbyBlbCB0YW1hw7FvIGRlbCBhcmNoaXZvXCIsXG5cdFx0XHRsYWJlbDogXCJFZGljaW9uZXMgZGUgY2FtYmlvIGRlIHRhbWHDsW9cIlxuXHRcdH0sXG5cdFx0XCJjMnBhLnVua25vd25cIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiU2UgaGFuIHJlYWxpemFkbyBvdHJhcyBlZGljaW9uZXMgbyBhY3RpdmlkYWRlcyBxdWUgbm8gc2UgaGFuIHBvZGlkbyByZWNvbm9jZXJcIixcblx0XHRcdGxhYmVsOiBcIkVkaWNpb25lcyBvIGFjdGl2aWRhZCBkZXNjb25vY2lkYXNcIlxuXHRcdH1cblx0fVxufTtcbnZhciBlc0VTID0ge1xuXHRzZWxlY3RvcnM6IHNlbGVjdG9ycyRnXG59O1xuXG52YXIgc2VsZWN0b3JzJGYgPSB7XG5cdGVkaXRzQW5kQWN0aXZpdHk6IHtcblx0XHRcImMycGEuY29sb3JfYWRqdXN0bWVudHNcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiU8Okw6RkZXR0eSBvbWluYWlzdXVrc2lhLCBrdXRlbiBzw6R2ecOkLCBreWxsw6Rpc3l5dHTDpCwga8OkeXJpw6QsIHZhcmpvamEgdGFpIGtvaG9rb2h0aWFcIixcblx0XHRcdGxhYmVsOiBcIlbDpHJlaWhpbiB0YWkgdmFsb3R1a3NlZW4gbGlpdHR5dsOkdCBtdW9ra2F1a3NldFwiXG5cdFx0fSxcblx0XHRcImMycGEuY3JlYXRlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJMdW90dSB1dXNpIHRpZWRvc3RvIHRhaSB1dXR0YSBzaXPDpGx0w7bDpFwiLFxuXHRcdFx0bGFiZWw6IFwiTHVvdHVcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmNyb3BwZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiS8OkeXRldHR5IHJhamF1c3R5w7ZrYWx1amEsIHbDpGhlbm5ldHR5IHRhaSBsYWFqZW5uZXR0dSBuw6RreXbDpMOkIHNpc8OkbHTDtmFsdWV0dGFcIixcblx0XHRcdGxhYmVsOiBcIlJhamF1a3NlZW4gbGlpdHR5dsOkdCBtdW9ra2F1a3NldFwiXG5cdFx0fSxcblx0XHRcImMycGEuZHJhd2luZ1wiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJLw6R5dGV0dHkgdHnDtmthbHVqYSwga3V0ZW4ga3luacOkLCBzaXZlbHRpbWnDpCwgcHl5aGVrdW1lamEgdGFpIG11b3RvLSwgcmVpdHRpLSB0YWkga3luw6R0ecO2a2FsdWphXCIsXG5cdFx0XHRsYWJlbDogXCJQaWlydMOkbWlzZWVuIGxpaXR0eXbDpHQgbXVva2thdWtzZXRcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmVkaXRlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJUZWh0eSBtdWl0YSBtdXV0b2tzaWFcIixcblx0XHRcdGxhYmVsOiBcIk11dXQgbXVva2thdWtzZXRcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmZpbHRlcmVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkvDpHl0ZXR0eSB0ecO2a2FsdWphLCBrdXRlbiB1bGtvYXN1biBtdXV0dGFtaXNlZW4gdGFya29pdGV0dHVqYSBzdW9kYXR0aW1pYSwgdHl5bGVqw6QgdGFpIHRlaG9zdGVpdGFcIixcblx0XHRcdGxhYmVsOiBcIlN1b2RhdHRpbWVlbiB0YWkgdHl5bGlpbiBsaWl0dHl2w6R0IG11b2trYXVrc2V0XCJcblx0XHR9LFxuXHRcdFwiYzJwYS5vcGVuZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiQXZhdHR1IG9sZW1hc3NhIG9sZXZhIHRpZWRvc3RvXCIsXG5cdFx0XHRsYWJlbDogXCJBdmF0dHVcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLm9yaWVudGF0aW9uXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIk11dXRldHR1IHBhaWtrYWEgdGFpIHN1dW50YWEgKGtpZXJyZXR0eSwga8Okw6RubmV0dHkgam5lLilcIixcblx0XHRcdGxhYmVsOiBcIlN1dW50YWFuIGxpaXR0eXbDpHQgbXVva2thdWtzZXRcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLnBsYWNlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJMaXPDpHR0eSBvbGVtYXNzYSBvbGV2YWEgc2lzw6RsdMO2w6QgdMOkaMOkbiB0aWVkb3N0b29uXCIsXG5cdFx0XHRsYWJlbDogXCJUdW90dVwiXG5cdFx0fSxcblx0XHRcImMycGEucmVzaXplZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJNdXV0ZXR0dSBtaXR0YXN1aHRlaXRhIHRhaSB0aWVkb3N0b2tva29hXCIsXG5cdFx0XHRsYWJlbDogXCJLb29uIG11dXR0YW1pc2VlbiBsaWl0dHl2w6R0IG11b2trYXVrc2V0XCJcblx0XHR9LFxuXHRcdFwiYzJwYS51bmtub3duXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIlN1b3JpdGV0dHUgbXVpdGEgbXVva2thdWtzaWEgdGFpIHRvaW1pbnRvamEsIGpvaXRhIGVpIHR1bm5pc3RldHR1XCIsXG5cdFx0XHRsYWJlbDogXCJUdW50ZW1hdHRvbWF0IG11b2trYXVrc2V0IHRhaSB0dW50ZW1hdG9uIHRvaW1pbnRhXCJcblx0XHR9XG5cdH1cbn07XG52YXIgZmlGSSA9IHtcblx0c2VsZWN0b3JzOiBzZWxlY3RvcnMkZlxufTtcblxudmFyIHNlbGVjdG9ycyRlID0ge1xuXHRlZGl0c0FuZEFjdGl2aXR5OiB7XG5cdFx0XCJjMnBhLmNvbG9yX2FkanVzdG1lbnRzXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkFqdXN0ZW1lbnQgZGVzIHByb3ByacOpdMOpcywgY29tbWUgbGEgdG9uYWxpdMOpLCBsYSBzYXR1cmF0aW9uLCBsZXMgY291cmJlcywgbGVzIG9tYnJlcyBvdSBsZXMgdG9ucyBjbGFpcnNcIixcblx0XHRcdGxhYmVsOiBcIk1vZGlmaWNhdGlvbnMgZGUgbGEgY291bGV1ciBvdSBkZSBs4oCZZXhwb3NpdGlvblwiXG5cdFx0fSxcblx0XHRcImMycGEuY3JlYXRlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJDcsOpYXRpb24gZOKAmXVuIG5vdXZlYXUgZmljaGllciBvdSBjb250ZW51XCIsXG5cdFx0XHRsYWJlbDogXCJDcsOpw6lcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmNyb3BwZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiVXRpbGlzYXRpb24gZOKAmW91dGlscyBkZSByZWNhZHJhZ2UsIHLDqWR1aXNhbnQgb3Ugw6lsYXJnaXNzYW50IGxhIHpvbmUgZGUgY29udGVudSB2aXNpYmxlXCIsXG5cdFx0XHRsYWJlbDogXCJNb2RpZmljYXRpb25zIGRlIHJlY2FkcmFnZVwiXG5cdFx0fSxcblx0XHRcImMycGEuZHJhd2luZ1wiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJVdGlsaXNhdGlvbiBk4oCZb3V0aWxzLCBjb21tZSBkZXMgY3JheW9ucywgZGVzIHBpbmNlYXV4LCBkZXMgZ29tbWVzIG91IGRlcyBvdXRpbHMgZGUgZm9ybWUsIGRlIHRyYWPDqSBvdSBkZSBwbHVtZVwiLFxuXHRcdFx0bGFiZWw6IFwiTW9kaWZpY2F0aW9ucyBkdSBkZXNzaW5cIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmVkaXRlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJSw6lhbGlzYXRpb24gZOKAmWF1dHJlcyBtb2RpZmljYXRpb25zXCIsXG5cdFx0XHRsYWJlbDogXCJBdXRyZXMgbW9kaWZpY2F0aW9uc1wiXG5cdFx0fSxcblx0XHRcImMycGEuZmlsdGVyZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiVXRpbGlzYXRpb24gZOKAmW91dGlscyB0ZWxzIHF1ZSBkZXMgZmlsdHJlcywgZGVzIHN0eWxlcyBvdSBkZXMgZWZmZXRzIHBvdXIgbW9kaWZpZXIgbOKAmWFwcGFyZW5jZVwiLFxuXHRcdFx0bGFiZWw6IFwiTW9kaWZpY2F0aW9ucyBkdSBmaWx0cmUgb3UgZHUgc3R5bGVcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLm9wZW5lZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJPdXZlcnR1cmUgZOKAmXVuIGZpY2hpZXIgcHLDqWV4aXN0YW50XCIsXG5cdFx0XHRsYWJlbDogXCJPdXZlcnRcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLm9yaWVudGF0aW9uXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkNoYW5nZW1lbnQgZGUgcG9zaXRpb24gb3UgZOKAmW9yaWVudGF0aW9uIChyb3RhdGlvbiwgcmVudmVyc2VtZW50LCBldGMuKVwiLFxuXHRcdFx0bGFiZWw6IFwiT3JpZW50YXRpb24gTW9kaWZpY2F0aW9ucyBkZSBcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLnBsYWNlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJBam91dCBkdSBjb250ZW51IHByw6lleGlzdGFudCDDoCBjZSBmaWNoaWVyXCIsXG5cdFx0XHRsYWJlbDogXCJJbXBvcnTDqVwiXG5cdFx0fSxcblx0XHRcImMycGEucmVzaXplZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJNb2RpZmljYXRpb24gZGVzIGRpbWVuc2lvbnMgb3UgZGUgbGEgdGFpbGxlIGR1IGZpY2hpZXJcIixcblx0XHRcdGxhYmVsOiBcIk1vZGlmaWNhdGlvbnMgZHUgcmVkaW1lbnNpb25uZW1lbnRcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLnVua25vd25cIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiUsOpYWxpc2F0aW9uIGTigJlhdXRyZXMgbW9kaWZpY2F0aW9ucyBvdSBhY3Rpdml0w6lzIHF1aSBu4oCZb250IHBhcyBwdSDDqnRyZSByZWNvbm51ZXNcIixcblx0XHRcdGxhYmVsOiBcIk1vZGlmaWNhdGlvbnMgb3UgYWN0aXZpdMOpIGluY29ubnVlc1wiXG5cdFx0fVxuXHR9XG59O1xudmFyIGZyRlIgPSB7XG5cdHNlbGVjdG9yczogc2VsZWN0b3JzJGVcbn07XG5cbnZhciBzZWxlY3RvcnMkZCA9IHtcblx0ZWRpdHNBbmRBY3Rpdml0eToge1xuXHRcdFwiYzJwYS5jb2xvcl9hZGp1c3RtZW50c1wiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJCZcOhbGzDrXRvdHQgb2x5YW4gdHVsYWpkb25zw6Fnb2thdCBtaW50IMOhcm55YWxhdCwgdGVsw610ZXR0c8OpZywgZ8O2cmLDqWssIMOhcm55w6lrb2sgdmFneSBjc8O6Y3Nmw6lueWVrXCIsXG5cdFx0XHRsYWJlbDogXCJTesOtbiB2YWd5IGV4cG96w61jacOzIHN6ZXJrZXN6dMOpc2VcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmNyZWF0ZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiTMOpdHJlaG96b3R0IGVneSDDumogZsOhamx0IHZhZ3kgdGFydGFsbWF0XCIsXG5cdFx0XHRsYWJlbDogXCJMw6l0cmVob3p2YVwiXG5cdFx0fSxcblx0XHRcImMycGEuY3JvcHBlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJIYXN6bsOhbHQgdsOhZ8OzZXN6a8O2esO2a2V0LCBhbWVseWVrIGNzw7Zra2VudGlrIHZhZ3kgYsWRdsOtdGlrIGEgdGFydGFsb20gbMOhdGhhdMOzIHRlcsO8bGV0w6l0XCIsXG5cdFx0XHRsYWJlbDogXCJWw6Fnw6FzdCBoYXN6bsOhbMOzIHN6ZXJrZXN6dMOpc2VrXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5kcmF3aW5nXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkhhc3puw6FsdCBvbHlhbiBlc3prw7Z6w7ZrZXQgbWludCBjZXJ1esOhaywgZWNzZXRlaywgcmFkw61yb2sgdmFneSBhbGFremF0LSwgZ8O2cmJlLSB2YWd5IHRvbGxlc3prw7Z6w7ZrXCIsXG5cdFx0XHRsYWJlbDogXCJSYWp6b2zDoXN0IGhhc3puw6Fsw7Mgc3plcmtlc3p0w6lzZWtcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmVkaXRlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJFZ3nDqWIgbcOzZG9zw610w6Fzb2sgdsOpZ3JlaGFqdHZhXCIsXG5cdFx0XHRsYWJlbDogXCJFZ3nDqWIgc3plcmtlc3p0w6lzZWtcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmZpbHRlcmVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkhhc3puw6FsdCBvbHlhbiBlc3prw7Z6w7ZrZXQgbWludCBzesWxcsWRaywgc3TDrWx1c29rIHZhZ3kgZWZmZWt0dXNvayBhIG1lZ2plbGVuw6lzIG1lZ3bDoWx0b3p0YXTDoXPDoXJhXCIsXG5cdFx0XHRsYWJlbDogXCJTesWxcsWRdCB2YWd5IHN0w61sdXN0IGhhc3puw6Fsw7Mgc3plcmtlc3p0w6lzZWtcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLm9wZW5lZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJNZWdueWl0b3R0IGVneSBtw6FyIGzDqXRlesWRIGbDoWpsdFwiLFxuXHRcdFx0bGFiZWw6IFwiTWVnbnlpdHZhXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5vcmllbnRhdGlvblwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJNw7Nkb3PDrXRvdHRhIGEgcG96w61jacOzdCB2YWd5IHTDoWpvbMOhc3QgKGVsZm9yZ2F0dmEsIG1lZ2ZvcmTDrXR2YSBzdGIuKVwiLFxuXHRcdFx0bGFiZWw6IFwiVMOham9sw6FzIHN6ZXJrZXN6dMOpc2VrXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5wbGFjZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiTcOhciBsw6l0ZXrFkSB0YXJ0YWxtYXQgYWRvdHQgaG96esOhIGVoaGV6IGEgZsOhamxob3pcIixcblx0XHRcdGxhYmVsOiBcIkltcG9ydMOhbHZhXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5yZXNpemVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkEgbcOpcmV0ZWsgdmFneSBhIGbDoWpsIG3DqXJldGUgbcOzZG9zdWx0XCIsXG5cdFx0XHRsYWJlbDogXCJTemVya2VzenTDqXNlayDDoXRtw6lyZXRlesOpc2VcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLnVua25vd25cIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiTcOhcyBzemVya2VzenTDqXNla2V0IHZhZ3kgbcWxdmVsZXRla2V0IGhhanRvdHQgdsOpZ3JlLCBhbWVseWVrZXQgbmVtIGxlaGV0ZXR0IGZlbGlzbWVybmlcIixcblx0XHRcdGxhYmVsOiBcIklzbWVyZXRsZW4gc3plcmtlc3p0w6lzZWsgdmFneSB0ZXbDqWtlbnlzw6lnXCJcblx0XHR9XG5cdH1cbn07XG52YXIgaHVIVSA9IHtcblx0c2VsZWN0b3JzOiBzZWxlY3RvcnMkZFxufTtcblxudmFyIHNlbGVjdG9ycyRjID0ge1xuXHRlZGl0c0FuZEFjdGl2aXR5OiB7XG5cdFx0XCJjMnBhLmNvbG9yX2FkanVzdG1lbnRzXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIlByb3ByaWV0w6AgcmVnb2xhdGUgY29tZSB0b25vLCBzYXR1cmF6aW9uZSwgY3VydmUsIG9tYnJlIG8gbHVjaVwiLFxuXHRcdFx0bGFiZWw6IFwiTW9kaWZpY2hlIGRlbCBjb2xvcmUgbyBkZWxsJ2VzcG9zaXppb25lXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5jcmVhdGVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIsOIIHN0YXRvIGNyZWF0byB1biBudW92byBmaWxlIG8gY29udGVudXRvXCIsXG5cdFx0XHRsYWJlbDogXCJDcmVhdG9cIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmNyb3BwZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiU3RydW1lbnRpIGRpIHJpdGFnbGlvIHV0aWxpenphdGksIHJpZHVjZW5kbyBvIGVzcGFuZGVuZG8gbCdhcmVhIGRlbCBjb250ZW51dG8gdmlzaWJpbGVcIixcblx0XHRcdGxhYmVsOiBcIk1vZGlmaWNoZSBkaSByaXRhZ2xpb1wiXG5cdFx0fSxcblx0XHRcImMycGEuZHJhd2luZ1wiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJTdHJ1bWVudGkgdXNhdGkgY29tZSBtYXRpdGUsIHBlbm5lbGxpLCBnb21tZSBvIHN0cnVtZW50aSBmb3JtYSwgdHJhY2NpYXRvIG8gcGVubmFcIixcblx0XHRcdGxhYmVsOiBcIk1vZGlmaWNoZSBkZWwgZGlzZWdub1wiXG5cdFx0fSxcblx0XHRcImMycGEuZWRpdGVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIlNvbm8gc3RhdGUgYXBwb3J0YXRlIGFsdHJlIG1vZGlmaWNoZVwiLFxuXHRcdFx0bGFiZWw6IFwiQWx0cmUgbW9kaWZpY2hlXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5maWx0ZXJlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJTdHJ1bWVudGkgdXRpbGl6emF0aSBjb21lIGZpbHRyaSwgc3RpbGkgbyBlZmZldHRpIHBlciBtb2RpZmljYXJlIGwnYXNwZXR0b1wiLFxuXHRcdFx0bGFiZWw6IFwiTW9kaWZpY2hlIGRpIGZpbHRybyBvIHN0aWxlXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5vcGVuZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiw4ggc3RhdG8gYXBlcnRvIHVuIGZpbGUgcHJlZXNpc3RlbnRlXCIsXG5cdFx0XHRsYWJlbDogXCJBcGVydG9cIlxuXHRcdH0sXG5cdFx0XCJjMnBhLm9yaWVudGF0aW9uXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIlBvc2l6aW9uZSBvIG9yaWVudGFtZW50byBtb2RpZmljYXRpIChydW90YXRpLCBjYXBvdm9sdGkgZSBjb3PDrCB2aWEpXCIsXG5cdFx0XHRsYWJlbDogXCJPcmllbnRhbWVudG8gbW9kaWZpY2hlXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5wbGFjZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiQWdnaXVudG8gY29udGVudXRvIHByZWVzaXN0ZW50ZSBhIHF1ZXN0byBmaWxlXCIsXG5cdFx0XHRsYWJlbDogXCJJbXBvcnRhdG9cIlxuXHRcdH0sXG5cdFx0XCJjMnBhLnJlc2l6ZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiRGltZW5zaW9uaSBvIGdyYW5kZXp6YSBkZWwgZmlsZSBtb2RpZmljYXRlXCIsXG5cdFx0XHRsYWJlbDogXCJNb2RpZmljaGUgZGVsIHJpZGltZW5zaW9uYW1lbnRvXCJcblx0XHR9LFxuXHRcdFwiYzJwYS51bmtub3duXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIlNvbm8gc3RhdGUgZXNlZ3VpdGUgYWx0cmUgbW9kaWZpY2hlIG8gYXR0aXZpdMOgIGNoZSBub24gw6ggc3RhdG8gcG9zc2liaWxlIHJpY29ub3NjZXJlXCIsXG5cdFx0XHRsYWJlbDogXCJNb2RpZmljaGUgbyBhdHRpdml0w6Agc2Nvbm9zY2l1dGVcIlxuXHRcdH1cblx0fVxufTtcbnZhciBpdElUID0ge1xuXHRzZWxlY3RvcnM6IHNlbGVjdG9ycyRjXG59O1xuXG52YXIgc2VsZWN0b3JzJGIgPSB7XG5cdGVkaXRzQW5kQWN0aXZpdHk6IHtcblx0XHRcImMycGEuY29sb3JfYWRqdXN0bWVudHNcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwi44OI44O844Oz44CB5b2p5bqm44CB44Kr44O844OW44CB44K344Oj44OJ44Km44CB44OP44Kk44Op44Kk44OI44Gq44Gp44Gu44OX44Ot44OR44OG44Kj44KS6Kq/5pW0XCIsXG5cdFx0XHRsYWJlbDogXCLjgqvjg6njg7zjgb7jgZ/jga/pnLLlh7rjga7nt6jpm4ZcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmNyZWF0ZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwi5paw44GX44GE44OV44Kh44Kk44Or44G+44Gf44Gv44Kz44Oz44OG44Oz44OE44KS5L2c5oiQXCIsXG5cdFx0XHRsYWJlbDogXCLkvZzmiJDmuIjjgb9cIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmNyb3BwZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwi5YiH44KK5oqc44GN44OE44O844Or44KS5L2/55So44CB6KGo56S644GV44KM44Gm44GE44KL44Kz44Oz44OG44Oz44OE6aCY5Z+f44Gu57iu5bCP44G+44Gf44Gv5ouh5aSnXCIsXG5cdFx0XHRsYWJlbDogXCLliIfjgormipzjgY3jga7nt6jpm4ZcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmRyYXdpbmdcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwi6Ymb562G44CB44OW44Op44K344CB5raI44GX44K044Og44CB44K344Kn44Kk44OX44CB44OR44K544CB44Oa44Oz44OE44O844Or44Gq44Gp44Gu44OE44O844Or44KS5L2/55SoXCIsXG5cdFx0XHRsYWJlbDogXCLmj4/nlLvjga7nt6jpm4ZcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmVkaXRlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLjgZ3jga7ku5bjga7lpInmm7RcIixcblx0XHRcdGxhYmVsOiBcIuOBneOBruS7luOBrue3qOmbhlwiXG5cdFx0fSxcblx0XHRcImMycGEuZmlsdGVyZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwi44OV44Kj44Or44K/44O844CB44K544K/44Kk44Or44CB5Yq55p6c44Gq44Gp44Gu44OE44O844Or44KS5L2/55So44GX44Gm5aSW6Kaz44KS5aSJ5pu0XCIsXG5cdFx0XHRsYWJlbDogXCLjg5XjgqPjg6vjgr/jg7zjgb7jgZ/jga/jgrnjgr/jgqTjg6vjga7nt6jpm4ZcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLm9wZW5lZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLml6LlrZjjga7jg5XjgqHjgqTjg6vjgpLplovjgYTjgZ9cIixcblx0XHRcdGxhYmVsOiBcIumWi+OBhOOBn1wiXG5cdFx0fSxcblx0XHRcImMycGEub3JpZW50YXRpb25cIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwi5L2N572u44G+44Gf44Gv5pa55ZCR44KS5aSJ5pu0ICjlm57ou6LjgIHlj43ou6LjgarjgakpXCIsXG5cdFx0XHRsYWJlbDogXCLnlLvlg4/mlrnlkJHnt6jpm4ZcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLnBsYWNlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLjgZPjga7jg5XjgqHjgqTjg6vjgavml6LlrZjjga7jgrPjg7Pjg4bjg7Pjg4TjgpLov73liqBcIixcblx0XHRcdGxhYmVsOiBcIuiqreOBv+i+vOOBv+a4iOOBv1wiXG5cdFx0fSxcblx0XHRcImMycGEucmVzaXplZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLlr7jms5Xjgb7jgZ/jga/jg5XjgqHjgqTjg6vjgrXjgqTjgrrjgpLlpInmm7RcIixcblx0XHRcdGxhYmVsOiBcIuOCteOCpOOCuuWkieabtOOBrue3qOmbhlwiXG5cdFx0fSxcblx0XHRcImMycGEudW5rbm93blwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLoqo3orZjjgafjgY3jgarjgYTku5bjga7nt6jpm4bjgb7jgZ/jga/jgqLjgq/jg4bjgqPjg5Pjg4bjgqPjgpLlrp/ooYxcIixcblx0XHRcdGxhYmVsOiBcIuS4jeaYjuOBque3qOmbhuOBvuOBn+OBr+OCouOCr+ODhuOCo+ODk+ODhuOCo1wiXG5cdFx0fVxuXHR9XG59O1xudmFyIGphSlAgPSB7XG5cdHNlbGVjdG9yczogc2VsZWN0b3JzJGJcbn07XG5cbnZhciBzZWxlY3RvcnMkYSA9IHtcblx0ZWRpdHNBbmRBY3Rpdml0eToge1xuXHRcdFwiYzJwYS5jb2xvcl9hZGp1c3RtZW50c1wiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLthqQsIOyxhOuPhCwg6rOh7ISgLCDqt7jrprzsnpAg65iQ64qUIO2VmOydtOudvOydtO2KuOyZgCDqsJnsnYAg7KGw7KCV65CcIOyGjeyEsVwiLFxuXHRcdFx0bGFiZWw6IFwi7IOJ7IOBIOuYkOuKlCDrhbjstpwg7Y647KeRXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5jcmVhdGVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIuyDiCDtjIzsnbwg65iQ64qUIOy9mO2FkOy4oCDsg53shLHrkKhcIixcblx0XHRcdGxhYmVsOiBcIuyDneyEseuQqFwiXG5cdFx0fSxcblx0XHRcImMycGEuY3JvcHBlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLsgqzsmqnrkJwg7J6Q66W06riwIOuPhOq1rCwg67O07J2064qUIOy9mO2FkOy4oCDsmIHsl60g7LaV7IaMIOuYkOuKlCDtmZXsnqVcIixcblx0XHRcdGxhYmVsOiBcIuyekOultOq4sCDtjrjsp5FcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmRyYXdpbmdcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwi7Jew7ZWELCDruIzrn6zsi5wsIOyngOyasOqwnCDrmJDripQg66qo7JaRLCDqsr3roZwg65iQ64qUIO2OnCDrj4TqtazsmYAg6rCZ7J2AIOyCrOyaqeuQnCDrj4TqtaxcIixcblx0XHRcdGxhYmVsOiBcIuq3uOumrOq4sCDtjrjsp5FcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmVkaXRlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLquLDtg4Ag67OA6rK9IOyCrO2VrSDsoIHsmqnrkKhcIixcblx0XHRcdGxhYmVsOiBcIuq4sO2DgCDtjrjsp5FcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmZpbHRlcmVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIu2VhO2EsCwg7Iqk7YOA7J28IOuYkOuKlCDtmqjqs7zsmYAg6rCZ7J2AIOuqqOyWkSDrs4Dqsr3sl5Ag7IKs7Jqp65CcIOuPhOq1rFwiLFxuXHRcdFx0bGFiZWw6IFwi7ZWE7YSwIOuYkOuKlCDsiqTtg4Dsnbwg7Y647KeRXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5vcGVuZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwi6riw7KG0IO2MjOydvCDsl7TrprxcIixcblx0XHRcdGxhYmVsOiBcIuyXtOumvFwiXG5cdFx0fSxcblx0XHRcImMycGEub3JpZW50YXRpb25cIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwi67OA6rK965CcIOychOy5mCDrmJDripQg67Cp7ZalICjtmozsoIQsIOuwmOyghCDrk7EpXCIsXG5cdFx0XHRsYWJlbDogXCLrsKntlqUg7Y647KeRXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5wbGFjZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwi7J20IO2MjOydvOyXkCDquLDsobQg7L2Y7YWQ7LigIOy2lOqwgOuQqFwiLFxuXHRcdFx0bGFiZWw6IFwi6rCA7KC47Ji0XCJcblx0XHR9LFxuXHRcdFwiYzJwYS5yZXNpemVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIuuzgOqyveuQnCDsuZjsiJgg65iQ64qUIO2MjOydvCDtgazquLBcIixcblx0XHRcdGxhYmVsOiBcIu2BrOq4sCDsobDsoJUg7Y647KeRXCJcblx0XHR9LFxuXHRcdFwiYzJwYS51bmtub3duXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIuyImO2WieuQmOyXiOycvOuCmCDsnbjsi53tlaAg7IiYIOyXhuuKlCDquLDtg4Ag7Y647KeRIOuYkOuKlCDtmZzrj5lcIixcblx0XHRcdGxhYmVsOiBcIuyVjCDsiJgg7JeG64qUIO2OuOynkSDrmJDripQg7Zmc64+ZXCJcblx0XHR9XG5cdH1cbn07XG52YXIga29LUiA9IHtcblx0c2VsZWN0b3JzOiBzZWxlY3RvcnMkYVxufTtcblxudmFyIHNlbGVjdG9ycyQ5ID0ge1xuXHRlZGl0c0FuZEFjdGl2aXR5OiB7XG5cdFx0XCJjMnBhLmNvbG9yX2FkanVzdG1lbnRzXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkp1c3RlcnRlIGVnZW5za2FwZXIgc29tIHRvbmUsIG1ldG5pbmcsIGt1cnZlciwgc2t5Z2dlciBlbGxlciBow7h5bHlzXCIsXG5cdFx0XHRsYWJlbDogXCJGYXJnZS0gZWxsZXIgZWtzcG9uZXJpbmdzcmVkaWdlcmluZ2VyXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5jcmVhdGVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIk9wcHJldHRldCBlbiBueSBmaWwgZWxsZXIgbnl0dCBpbm5ob2xkXCIsXG5cdFx0XHRsYWJlbDogXCJPcHByZXR0ZXRcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmNyb3BwZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiQnJ1a3RlIGJlc2tqw6ZyaW5nc3Zlcmt0w7h5IGZvciDDpSByZWR1c2VyZSBlbGxlciB1dHZpZGUgc3lubGlnIGlubmhvbGRzb21yw6VkZVwiLFxuXHRcdFx0bGFiZWw6IFwiQmVza2rDpnJpbmdzcmVkaWdlcmluZ2VyXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5kcmF3aW5nXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkJydWt0ZSB2ZXJrdMO4eSBzb20gYmx5YW50ZXIsIHBlbnNsZXIsIHZpc2tlbMOmciBlbGxlciBmb3JtLSwgYmFuZS0gZWxsZXIgcGVubnZlcmt0w7h5XCIsXG5cdFx0XHRsYWJlbDogXCJUZWduZXJlZGlnZXJpbmdlclwiXG5cdFx0fSxcblx0XHRcImMycGEuZWRpdGVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkdqb3JkZSBhbmRyZSBlbmRyaW5nZXJcIixcblx0XHRcdGxhYmVsOiBcIkFuZHJlIHJlZGlnZXJpbmdlclwiXG5cdFx0fSxcblx0XHRcImMycGEuZmlsdGVyZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiQnJ1a3RlIHZlcmt0w7h5IHNvbSBmaWx0cmUsIHN0aWxlciBlbGxlciBlZmZla3RlciBmb3Igw6UgZW5kcmUgdXRzZWVuZGVcIixcblx0XHRcdGxhYmVsOiBcIkZpbHRlci0gZWxsZXIgc3RpbHJlZGlnZXJpbmdlclwiXG5cdFx0fSxcblx0XHRcImMycGEub3BlbmVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIsOFcG5ldCBlbiBla3Npc3RlcmVuZGUgZmlsXCIsXG5cdFx0XHRsYWJlbDogXCLDhXBuZXRcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLm9yaWVudGF0aW9uXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkVuZHJldCBwb3Npc2pvbiBlbGxlciByZXRuaW5nIChyb3RlcnQsIHNudWRkIG9zdi4pXCIsXG5cdFx0XHRsYWJlbDogXCJSZXRuaW5ncy0gcmVkaWdlcmluZ2VyXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5wbGFjZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiTGEgdGlsIGVrc2lzdGVyZW5kZSBpbm5ob2xkIGkgZGVubmUgZmlsZW5cIixcblx0XHRcdGxhYmVsOiBcIkltcG9ydGVydFwiXG5cdFx0fSxcblx0XHRcImMycGEucmVzaXplZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJFbmRyZXQgZGltZW5zam9uZXIgZWxsZXIgZmlsc3TDuHJyZWxzZVwiLFxuXHRcdFx0bGFiZWw6IFwiU3TDuHJyZWxzZXNlbmRyaW5nZXJcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLnVua25vd25cIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiVXRmw7hydGUgYW5kcmUgcmVkaWdlcmluZ2VyIGVsbGVyIGFrdGl2aXRldGVyIHNvbSBpa2tlIGdqZW5ramVubmVzXCIsXG5cdFx0XHRsYWJlbDogXCJVa2plbnQgZW5kcmluZyBlbGxlciBha3Rpdml0ZXRcIlxuXHRcdH1cblx0fVxufTtcbnZhciBuYk5PID0ge1xuXHRzZWxlY3RvcnM6IHNlbGVjdG9ycyQ5XG59O1xuXG52YXIgc2VsZWN0b3JzJDggPSB7XG5cdGVkaXRzQW5kQWN0aXZpdHk6IHtcblx0XHRcImMycGEuY29sb3JfYWRqdXN0bWVudHNcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiRWlnZW5zY2hhcHBlbiB6b2FscyB0aW50LCB2ZXJ6YWRpZ2luZywgY3VydmVuLCBzY2hhZHV3ZW4gb2YgaG9vZ2xpY2h0ZW4gYWFuZ2VwYXN0XCIsXG5cdFx0XHRsYWJlbDogXCJLbGV1ci0gb2YgYmVsaWNodGluZ3NiZXdlcmtpbmdlblwiXG5cdFx0fSxcblx0XHRcImMycGEuY3JlYXRlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJFZW4gbmlldXcgYmVzdGFuZCBvZiBjb250ZW50IGdlbWFha3RcIixcblx0XHRcdGxhYmVsOiBcIkdlbWFha3RcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmNyb3BwZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiVWl0c25lZGVnZXJlZWRzY2hhcHBlbiBnZWJydWlrdCBvbSBoZXQgemljaHRiYXJlIGRlZWwgdmFuIGRlIGNvbnRlbnQgdGUgYmVwZXJrZW4gb2YgdWl0IHRlIGJyZWlkZW5cIixcblx0XHRcdGxhYmVsOiBcIlVpdHNuZWRlYmV3ZXJraW5nZW5cIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmRyYXdpbmdcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiR2VyZWVkc2NoYXBwZW4gZ2VicnVpa3Qgem9hbHMgcG90bG9kZW4sIHBlbnNlbGVuLCBndW1tZXRqZXMsIHBlbm5lbiBvZiB2b3JtLSBvZiBwYWRnZXJlZWRzY2hhcHBlblwiLFxuXHRcdFx0bGFiZWw6IFwiVGVrZW5iZXdlcmtpbmdlblwiXG5cdFx0fSxcblx0XHRcImMycGEuZWRpdGVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkFuZGVyZSB3aWp6aWdpbmdlbiBhYW5nZWJyYWNodFwiLFxuXHRcdFx0bGFiZWw6IFwiQW5kZXJlIGJld2Vya2luZ2VuXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5maWx0ZXJlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJHZXJlZWRzY2hhcHBlbiB6b2FscyBmaWx0ZXJzLCBzdGlqbGVuIG9mIGVmZmVjdGVuIGdlYnJ1aWt0IG9tIGhldCB1aXRlcmxpamsgdGUgdmVyYW5kZXJlblwiLFxuXHRcdFx0bGFiZWw6IFwiRmlsdGVyLSBvZiBzdGlqbGJld2Vya2luZ2VuXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5vcGVuZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiRWVuIGJlc3RhYW5kIGJlc3RhbmQgZ2VvcGVuZFwiLFxuXHRcdFx0bGFiZWw6IFwiR2VvcGVuZFwiXG5cdFx0fSxcblx0XHRcImMycGEub3JpZW50YXRpb25cIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiUG9zaXRpZSBvZiBzdGFuZCBnZXdpanppZ2QgKGdlZHJhYWlkLCBnZXNwaWVnZWxkIGV0Yy4pXCIsXG5cdFx0XHRsYWJlbDogXCJBZmRydWtzdGFuZCBiZXdlcmtpbmdlblwiXG5cdFx0fSxcblx0XHRcImMycGEucGxhY2VkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkJlc3RhYW5kZSBjb250ZW50IGFhbiBkaXQgYmVzdGFuZCB0b2VnZXZvZWdkXCIsXG5cdFx0XHRsYWJlbDogXCJHZcOvbXBvcnRlZXJkXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5yZXNpemVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkFmbWV0aW5nZW4gb2YgYmVzdGFuZHNncm9vdHRlIGdld2lqemlnZFwiLFxuXHRcdFx0bGFiZWw6IFwiRm9ybWFhdGJld2Vya2luZ2VuXCJcblx0XHR9LFxuXHRcdFwiYzJwYS51bmtub3duXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkFuZGVyZSBiZXdlcmtpbmdlbiBvZiBhY3Rpdml0ZWl0ZW4gdWl0Z2V2b2VyZCBkaWUgbmlldCBrb25kZW4gd29yZGVuIGhlcmtlbmRcIixcblx0XHRcdGxhYmVsOiBcIk9uYmVrZW5kZSBiZXdlcmtpbmdlbiBvZiBhY3Rpdml0ZWl0ZW5cIlxuXHRcdH1cblx0fVxufTtcbnZhciBubE5MID0ge1xuXHRzZWxlY3RvcnM6IHNlbGVjdG9ycyQ4XG59O1xuXG52YXIgc2VsZWN0b3JzJDcgPSB7XG5cdGVkaXRzQW5kQWN0aXZpdHk6IHtcblx0XHRcImMycGEuY29sb3JfYWRqdXN0bWVudHNcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiWm1vZHlmaWtvd2FubyB3xYJhxZtjaXdvxZtjaSwgdGFraWUgamFrIHRvbmFjamEsIG5hc3ljZW5pZSwga3J6eXdlLCBjaWVuaWUgbHViIMWbd2lhdMWCYVwiLFxuXHRcdFx0bGFiZWw6IFwiV3Byb3dhZHpvbm8gem1pYW55IGtvbG9yw7N3IGx1YiBla3Nwb3p5Y2ppXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5jcmVhdGVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIlV0d29yem9ubyBub3d5IHBsaWsgbHViIHphd2FydG/Fm8SHXCIsXG5cdFx0XHRsYWJlbDogXCJVdHdvcnpvbm9cIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmNyb3BwZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiVcW8eXRvIG5hcnrEmWR6aSBkbyBrYWRyb3dhbmlhIHcgY2VsdSB6bW5pZWpzemVuaWEgbHViIHJvenN6ZXJ6ZW5pYSB3aWRvY3puZWdvIG9ic3phcnUgemF3YXJ0b8WbY2lcIixcblx0XHRcdGxhYmVsOiBcIk1vZHlmaWthY2plIHBvbGVnYWrEhWNlIG5hIGthZHJvd2FuaXVcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmRyYXdpbmdcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiVcW8eXRvIHRha2ljaCBuYXJ6xJlkemksIGphayBvxYLDs3draSwgcMSZZHpsZSBpIGd1bWtpIGFsYm8gbmFyesSZZHppIGtzenRhxYJ0w7N3LCDFm2NpZcW8ZWsgbHViIHBpw7NyYVwiLFxuXHRcdFx0bGFiZWw6IFwiTW9keWZpa2FjamUgcnlzdW5rb3dlXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5lZGl0ZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiV3Byb3dhZHpvbm8gaW5uZSB6bWlhbnlcIixcblx0XHRcdGxhYmVsOiBcIklubmUgbW9keWZpa2FjamVcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmZpbHRlcmVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIlXFvHl0byBuYXJ6xJlkemksIHRha2ljaCBqYWsgZmlsdHJ5LCBzdHlsZSBsdWIgZWZla3R5LCBhYnkgem1pZW5pxIcgd3lnbMSFZFwiLFxuXHRcdFx0bGFiZWw6IFwiRWR5Y2plIGZpbHRyw7N3IGx1YiBzdHlsw7N3XCJcblx0XHR9LFxuXHRcdFwiYzJwYS5vcGVuZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiT3R3YXJ0byB3Y3plxZtuaWVqIGlzdG5pZWrEhWN5IHBsaWtcIixcblx0XHRcdGxhYmVsOiBcIk90d2FydG9cIlxuXHRcdH0sXG5cdFx0XCJjMnBhLm9yaWVudGF0aW9uXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIlptaWVuaW9ubyBwb3p5Y2rEmSBsdWIgb3JpZW50YWNqxJkgKG9icsOzY29ubywgb2R3csOzY29ubyBpdHAuKVwiLFxuXHRcdFx0bGFiZWw6IFwiT3JpZW50YWNqYSBtb2R5ZmlrYWNqZVwiXG5cdFx0fSxcblx0XHRcImMycGEucGxhY2VkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkRvZGFubyB3Y3plxZtuaWVqIGlzdG5pZWrEhWPEhSB6YXdhcnRvxZvEhyBkbyB0ZWdvIHBsaWt1XCIsXG5cdFx0XHRsYWJlbDogXCJaYWltcG9ydG93YW5vXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5yZXNpemVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIlptaWVuaW9ubyB3eW1pYXJ5IGx1YiByb3ptaWFyIHBsaWt1XCIsXG5cdFx0XHRsYWJlbDogXCJNb2R5ZmlrYWNqZSBwb2xlZ2FqxIVjZSBuYSB6bWlhbmllIHJvem1pYXJ1XCJcblx0XHR9LFxuXHRcdFwiYzJwYS51bmtub3duXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkRva29uYW5vIGlubnljaCB6bWlhbiBsdWIgd3lrb25hbm8gb3BlcmFjamUsIGt0w7NyeWNoIG5pZSBtb8W8bmEgcm96cG96bmHEh1wiLFxuXHRcdFx0bGFiZWw6IFwiTmllem5hbmUgem1pYW55IGx1YiBvcGVyYWNqZVwiXG5cdFx0fVxuXHR9XG59O1xudmFyIHBsUEwgPSB7XG5cdHNlbGVjdG9yczogc2VsZWN0b3JzJDdcbn07XG5cbnZhciBzZWxlY3RvcnMkNiA9IHtcblx0ZWRpdHNBbmRBY3Rpdml0eToge1xuXHRcdFwiYzJwYS5jb2xvcl9hZGp1c3RtZW50c1wiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJQcm9wcmllZGFkZXMgY29tbyB0b20sIHNhdHVyYcOnw6NvLCBjdXJ2YXMsIHNvbWJyYXMgb3UgcmVhbGNlcyBhanVzdGFkYXNcIixcblx0XHRcdGxhYmVsOiBcIkVkacOnw7VlcyBkZSBjb3Igb3UgZXhwb3Npw6fDo29cIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmNyZWF0ZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiQXJxdWl2byBvdSBjb250ZcO6ZG8gY3JpYWRvXCIsXG5cdFx0XHRsYWJlbDogXCJDcmlhZG9cIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmNyb3BwZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiRmVycmFtZW50YXMgZGUgY29ydGUgdXNhZGFzLCByZWR1emluZG8gb3UgZXhwYW5kaW5kbyBhIMOhcmVhIGRlIGNvbnRlw7pkbyB2aXPDrXZlbFwiLFxuXHRcdFx0bGFiZWw6IFwiRWRpw6fDtWVzIGRlIGNvcnRlXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5kcmF3aW5nXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkZlcnJhbWVudGFzIGNvbW8gbMOhcGlzLCBwaW5jw6lpcywgYm9ycmFjaGFzIG91IGZlcnJhbWVudGFzIGRlIGZvcm1hLCBjYW1pbmhvIG91IGNhbmV0YSB1c2FkYXNcIixcblx0XHRcdGxhYmVsOiBcIkVkacOnw7VlcyBkZSBkZXNlbmhvXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5lZGl0ZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiT3V0cmFzIGFsdGVyYcOnw7VlcyBmZWl0YXNcIixcblx0XHRcdGxhYmVsOiBcIk91dHJhcyBlZGnDp8O1ZXNcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmZpbHRlcmVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkZlcnJhbWVudGFzIGNvbW8gZmlsdHJvcywgZXN0aWxvcyBvdSBlZmVpdG9zIHVzYWRhcyBwYXJhIGFsdGVyYXIgYSBhcGFyw6puY2lhXCIsXG5cdFx0XHRsYWJlbDogXCJFZGnDp8O1ZXMgZGUgZmlsdHJvIG91IGVzdGlsb1wiXG5cdFx0fSxcblx0XHRcImMycGEub3BlbmVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkFycXVpdm8gcHLDqS1leGlzdGVudGUgYWJlcnRvXCIsXG5cdFx0XHRsYWJlbDogXCJBYmVydG9cIlxuXHRcdH0sXG5cdFx0XCJjMnBhLm9yaWVudGF0aW9uXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIlBvc2nDp8OjbyBvdSBvcmllbnRhw6fDo28gYWx0ZXJhZGEgKGdpcmFkbywgaW52ZXJ0aWRvIGV0Yy4pXCIsXG5cdFx0XHRsYWJlbDogXCJFZGnDp8O1ZXMgZGUgb3JpZW50YcOnw6NvXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5wbGFjZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiQ29udGXDumRvIHByw6ktZXhpc3RlbnRlIGFkaWNpb25hZG8gYSBlc3RlIGFycXVpdm9cIixcblx0XHRcdGxhYmVsOiBcIkltcG9ydGFkb1wiXG5cdFx0fSxcblx0XHRcImMycGEucmVzaXplZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJEaW1lbnPDtWVzIG91IHRhbWFuaG8gZG8gYXJxdWl2byBhbHRlcmFkb3NcIixcblx0XHRcdGxhYmVsOiBcIkVkacOnw7VlcyBkZSByZWRpbWVuc2lvbmFtZW50b1wiXG5cdFx0fSxcblx0XHRcImMycGEudW5rbm93blwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJOw6NvIGZvaSBwb3Nzw612ZWwgcmVjb25oZWNlciBvdXRyYXMgZWRpw6fDtWVzIG91IGF0aXZpZGFkZXMgcmVhbGl6YWRhc1wiLFxuXHRcdFx0bGFiZWw6IFwiRWRpw6fDtWVzIG91IGF0aXZpZGFkZXMgZGVzY29uaGVjaWRhc1wiXG5cdFx0fVxuXHR9XG59O1xudmFyIHB0QlIgPSB7XG5cdHNlbGVjdG9yczogc2VsZWN0b3JzJDZcbn07XG5cbnZhciBzZWxlY3RvcnMkNSA9IHtcblx0ZWRpdHNBbmRBY3Rpdml0eToge1xuXHRcdFwiYzJwYS5jb2xvcl9hZGp1c3RtZW50c1wiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLQmNC30LzQtdC90LXQvdC90YvQtSDRgdCy0L7QudGB0YLQstCwLCDQvdCw0L/RgNC40LzQtdGAINGC0L7QvSwg0L3QsNGB0YvRidC10L3QvdC+0YHRgtGMLCDQutGA0LjQstGL0LUsINGC0LXQvdC4INC40LvQuCDQsdC70LjQutC4LlwiLFxuXHRcdFx0bGFiZWw6IFwi0KDQtdC00LDQutGC0LjRgNC+0LLQsNC90LjQtSDRhtCy0LXRgtCwINC40LvQuCDRjdC60YHQv9C+0LfQuNGG0LjQuFwiXG5cdFx0fSxcblx0XHRcImMycGEuY3JlYXRlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLQodC+0LfQtNCw0L0g0L3QvtCy0YvQuSDRhNCw0LnQuyDQuNC70Lgg0LrQvtC90YLQtdC90YJcIixcblx0XHRcdGxhYmVsOiBcItCh0L7Qt9C00LDQvdC+XCJcblx0XHR9LFxuXHRcdFwiYzJwYS5jcm9wcGVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcItCY0YHQv9C+0LvRjNC30YPQtdC80YvQtSDQuNC90YHRgtGA0YPQvNC10L3RgtGLINC+0LHRgNC10LfQutC4LCDRg9C80LXQvdGM0YjQtdC90LjQtSDQuNC70Lgg0YDQsNGB0YjQuNGA0LXQvdC40LUg0LLQuNC00LjQvNC+0Lkg0L7QsdC70LDRgdGC0Lgg0YHQvtC00LXRgNC20LjQvNC+0LPQvlwiLFxuXHRcdFx0bGFiZWw6IFwi0KDQtdC00LDQutGC0LjRgNC+0LLQsNC90LjQtSDQvtCx0YDQtdC30LrQuFwiXG5cdFx0fSxcblx0XHRcImMycGEuZHJhd2luZ1wiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLQmNGB0L/QvtC70YzQt9GD0LXQvNGL0LUg0LjQvdGB0YLRgNGD0LzQtdC90YLRiywg0L3QsNC/0YDQuNC80LXRgCDQutCw0YDQsNC90LTQsNGI0LgsINC60LjRgdGC0LgsINC70LDRgdGC0LjQutC4INC40LvQuCDQtNGA0YPQs9C40LUg0LjQvdGB0YLRgNGD0LzQtdC90YLRiyAo0YTQvtGA0LzQsCwg0LrQvtC90YLRg9GAINC40LvQuCDQv9C10YDQvilcIixcblx0XHRcdGxhYmVsOiBcItCg0LXQtNCw0LrRgtC40YDQvtCy0LDQvdC40LUg0YfQtdGA0YLQtdC20LBcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmVkaXRlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLQktC90LXRgdC10L3RiyDQtNGA0YPQs9C40LUg0LjQt9C80LXQvdC10L3QuNGPXCIsXG5cdFx0XHRsYWJlbDogXCLQlNGA0YPQs9C40LUg0LjQt9C80LXQvdC10L3QuNGPXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5maWx0ZXJlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLQmNGB0L/QvtC70YzQt9GD0LXQvNGL0LUg0LjQvdGB0YLRgNGD0LzQtdC90YLRiyDQtNC70Y8g0LjQt9C80LXQvdC10L3QuNGPINCy0L3QtdGI0L3QtdCz0L4g0LLQuNC00LAsINC90LDQv9GA0LjQvNC10YAg0YTQuNC70YzRgtGA0YssINGB0YLQuNC70Lgg0LjQu9C4INGN0YTRhNC10LrRgtGLXCIsXG5cdFx0XHRsYWJlbDogXCLQoNC10LTQsNC60YLQuNGA0L7QstCw0L3QuNC1INGE0LjQu9GM0YLRgNC+0LIg0LjQu9C4INGB0YLQuNC70LXQuVwiXG5cdFx0fSxcblx0XHRcImMycGEub3BlbmVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcItCe0YLQutGA0YvRgiDRgNCw0L3QtdC1INGB0L7Qt9C00LDQvdC90YvQuSDRhNCw0LnQu1wiLFxuXHRcdFx0bGFiZWw6IFwi0J7RgtC60YDRi9GC0L5cIlxuXHRcdH0sXG5cdFx0XCJjMnBhLm9yaWVudGF0aW9uXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcItCY0LfQvNC10L3QtdC90L4g0L/QvtC70L7QttC10L3QuNC1INC40LvQuCDQvtGA0LjQtdC90YLQsNGG0LjRjyAo0L/QvtCy0LXRgNC90YPRgtC+LCDQv9C10YDQtdCy0LXRgNC90YPRgtC+INC4INGCLsKg0LQuKVwiLFxuXHRcdFx0bGFiZWw6IFwi0J7RgNC40LXQvdGC0LDRhtC40Y8g0L/RgNCw0LLQutC4XCJcblx0XHR9LFxuXHRcdFwiYzJwYS5wbGFjZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwi0JIg0Y3RgtC+0YIg0YTQsNC50Lsg0LTQvtCx0LDQstC70LXQvSDRg9C20LUg0YHRg9GJ0LXRgdGC0LLRg9GO0YnQuNC5INC60L7QvdGC0LXQvdGCXCIsXG5cdFx0XHRsYWJlbDogXCLQmNC80L/QvtGA0YLQuNGA0L7QstCw0L3QvlwiXG5cdFx0fSxcblx0XHRcImMycGEucmVzaXplZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLQmNC30LzQtdC90LXQvdGLINGA0LDQt9C80LXRgNGLINC40LfQvtCx0YDQsNC20LXQvdC40Y8g0LjQu9C4INGA0LDQt9C80LXRgCDRhNCw0LnQu9CwXCIsXG5cdFx0XHRsYWJlbDogXCLQmNC30LzQtdC90LXQvdC40LUg0YDQsNC30LzQtdGA0L7QslwiXG5cdFx0fSxcblx0XHRcImMycGEudW5rbm93blwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLQktC90LXRgdC10L3RiyDQtNGA0YPQs9C40LUg0L/RgNCw0LLQutC4INC40LvQuCDQstGL0L/QvtC70L3QtdC90Ysg0LjQvdGL0LUg0LTQtdC50YHRgtCy0LjRjywg0LrQvtGC0L7RgNGL0LUg0L3QtSDRg9C00LDQu9C+0YHRjCDRgNCw0YHQv9C+0LfQvdCw0YLRjFwiLFxuXHRcdFx0bGFiZWw6IFwi0J3QtdC40LfQstC10YHRgtC90YvQtSDQuNC30LzQtdC90LXQvdC40Y8g0LjQu9C4INC00LXQudGB0YLQstC40Y9cIlxuXHRcdH1cblx0fVxufTtcbnZhciBydVJVID0ge1xuXHRzZWxlY3RvcnM6IHNlbGVjdG9ycyQ1XG59O1xuXG52YXIgc2VsZWN0b3JzJDQgPSB7XG5cdGVkaXRzQW5kQWN0aXZpdHk6IHtcblx0XHRcImMycGEuY29sb3JfYWRqdXN0bWVudHNcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiSnVzdGVyYWRlIGVnZW5za2FwZXIgc29tIHRvbiwgbcOkdHRuYWQsIGt1cnZvciwgc2t1Z2dvciBvY2ggaMO2Z2RhZ3JhclwiLFxuXHRcdFx0bGFiZWw6IFwiUmVkaWdlcmluZyBhdiBmw6RyZyBlbGxlciBleHBvbmVyaW5nXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5jcmVhdGVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIlNrYXBhZGUgZW4gbnkgZmlsIGVsbGVyIG55dHQgaW5uZWjDpWxsXCIsXG5cdFx0XHRsYWJlbDogXCJTa2FwYWRlXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5jcm9wcGVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkFudsOkbmRlIGJlc2vDpHJuaW5nc3Zlcmt0eWcsIG1pbnNrYWRlIGVsbGVyIHV0w7ZrYWRlIHN5bmxpZ3QgaW5uZWjDpWxsc29tcsOlZGVcIixcblx0XHRcdGxhYmVsOiBcIlJlZGlnZXJpbmcgYXYgYmVza8Okcm5pbmdcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmRyYXdpbmdcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiQW52w6RuZGUgdmVya3R5ZyBzb20gcGVubm9yLCBwZW5zbGFyLCBzdWRkZ3VtbWluIGVsbGVyIHZlcmt0eWdlbiBmb3JtLCBiYW5hIGVsbGVyIHBlbm5hXCIsXG5cdFx0XHRsYWJlbDogXCJSZWRpZ2VyaW5nIGF2IHRlY2tuaW5nXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5lZGl0ZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiR2pvcmRlIGFuZHJhIMOkbmRyaW5nYXJcIixcblx0XHRcdGxhYmVsOiBcIkFubmFuIHJlZGlnZXJpbmdcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmZpbHRlcmVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkFudsOkbmRlIHZlcmt0eWcgc29tIGZpbHRlciwgc3RpbGFyIGVsbGVyIGVmZmVrdGVyIGbDtnIgYXR0IMOkbmRyYSB1dHNlZW5kZVwiLFxuXHRcdFx0bGFiZWw6IFwiUmVkaWdlcmluZyBhdiBmaWx0ZXIgZWxsZXIgc3RpbFwiXG5cdFx0fSxcblx0XHRcImMycGEub3BlbmVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIsOWcHBuYWRlIGVuIGJlZmludGxpZyBmaWxcIixcblx0XHRcdGxhYmVsOiBcIsOWcHBuYWRlXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5vcmllbnRhdGlvblwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLDhG5kcmFkZSBwbGFjZXJpbmcgZWxsZXIgb3JpZW50ZXJpbmcgKHJvdGVyYWQsIHbDpG5kIG9zdi4pXCIsXG5cdFx0XHRsYWJlbDogXCJPcmllbnRlcmluZyByZWRpZ2VyaW5nXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5wbGFjZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiTGFkZSB0aWxsIGJlZmludGxpZ3QgaW5uZWjDpWxsIGkgZGVuIGjDpHIgZmlsZW5cIixcblx0XHRcdGxhYmVsOiBcIkltcG9ydGVyYWRlXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5yZXNpemVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIsOEbmRyYWRlIG3DpXR0IGVsbGVyIGZpbHN0b3JsZWtcIixcblx0XHRcdGxhYmVsOiBcIlJlZGlnZXJpbmcgYXYgc3Rvcmxla3PDpG5kcmluZ1wiXG5cdFx0fSxcblx0XHRcImMycGEudW5rbm93blwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJVdGbDtnJkZSBhbmRyYSByZWRpZ2VyaW5nYXIgZWxsZXIgYWt0aXZpdGV0ZXIgc29tIGludGUga3VuZGUgaWRlbnRpZmllcmFzXCIsXG5cdFx0XHRsYWJlbDogXCJPa8OkbmQgcmVkaWdlcmluZyBlbGxlciBha3Rpdml0ZXRcIlxuXHRcdH1cblx0fVxufTtcbnZhciBzdlNFID0ge1xuXHRzZWxlY3RvcnM6IHNlbGVjdG9ycyQ0XG59O1xuXG52YXIgc2VsZWN0b3JzJDMgPSB7XG5cdGVkaXRzQW5kQWN0aXZpdHk6IHtcblx0XHRcImMycGEuY29sb3JfYWRqdXN0bWVudHNcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiVG9uLCBkb3lndW5sdWssIGXEn3JpbGVyLCBnw7ZsZ2VsZXIgdmV5YSB2dXJndWxhciBnaWJpIGF5YXJsYW5txLHFnyDDtnplbGxpa2xlclwiLFxuXHRcdFx0bGFiZWw6IFwiUmVuayB2ZXlhIHBvemxhbWEgZMO8emVubGVtZWxlcmlcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmNyZWF0ZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiWWVuaSBiaXIgZG9zeWEgdmV5YSBpw6dlcmlrIG9sdcWfdHVydWxkdVwiLFxuXHRcdFx0bGFiZWw6IFwiT2x1xZ90dXJ1bGR1XCJcblx0XHR9LFxuXHRcdFwiYzJwYS5jcm9wcGVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkvEsXJwbWEgYXJhw6dsYXLEsSBrdWxsYW7EsWxhcmFrIGfDtnLDvG7DvHIgacOnZXJpayBhbGFuxLEga8O8w6fDvGx0w7xsZMO8IHZleWEgZ2VuacWfbGV0aWxkaVwiLFxuXHRcdFx0bGFiZWw6IFwiS8SxcnBtYSBkw7x6ZW5sZW1lbGVyaVwiXG5cdFx0fSxcblx0XHRcImMycGEuZHJhd2luZ1wiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJLdXLFn3VuIGthbGVtLCBmxLFyw6dhLCBzaWxnaSB2ZXlhIMWfZWtpbCwgeW9sIHlhIGRhIGthbGVtIGFyYcOnbGFyxLEgZ2liaSBhcmHDp2xhciBrdWxsYW7EsWxkxLFcIixcblx0XHRcdGxhYmVsOiBcIsOHaXppbSBkw7x6ZW5sZW1lbGVyaVwiXG5cdFx0fSxcblx0XHRcImMycGEuZWRpdGVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIkRpxJ9lciBkZcSfacWfaWtsaWtsZXIgeWFwxLFsZMSxXCIsXG5cdFx0XHRsYWJlbDogXCJEacSfZXIgZMO8emVubGVtZWxlclwiXG5cdFx0fSxcblx0XHRcImMycGEuZmlsdGVyZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiR8O2csO8bsO8bcO8IGRlxJ9pxZ90aXJtZWsgacOnaW4gZmlsdHJlLCBzdGlsIHZleWEgZWZla3QgZ2liaSBhcmHDp2xhciBrdWxsYW7EsWxkxLFcIixcblx0XHRcdGxhYmVsOiBcIkZpbHRyZSB2ZXlhIHN0aWwgZMO8emVubGVtZWxlcmlcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLm9wZW5lZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJNZXZjdXQgYmlyIGRvc3lhIGHDp8SxbGTEsVwiLFxuXHRcdFx0bGFiZWw6IFwiQcOnxLFsZMSxXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5vcmllbnRhdGlvblwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCJLb251bSB2ZXlhIHnDtm5sZW5kaXJtZSBkZcSfacWfdGlyaWxkaSAoZMO2bmTDvHLDvGxkw7wsIHRlcnMgw6dldnJpbGRpIHZiLilcIixcblx0XHRcdGxhYmVsOiBcIlnDtm5sZW5kaXJtZSBkw7x6ZW5sZW1lbGVyaVwiXG5cdFx0fSxcblx0XHRcImMycGEucGxhY2VkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIk1ldmN1dCBpw6dlcmlrIGJ1IGRvc3lheWEgZWtsZW5kaVwiLFxuXHRcdFx0bGFiZWw6IFwixLDDp2UgYWt0YXLEsWxkxLFcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLnJlc2l6ZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiQm95dXRsYXIgdmV5YSBkb3N5YSBib3l1dHUgZGXEn2nFn3RpcmlsZGlcIixcblx0XHRcdGxhYmVsOiBcIlllbmlkZW4gYm95dXRsYW5kxLFybWEgZMO8emVubGVtZWxlcmlcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLnVua25vd25cIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwiQWxnxLFsYW5hbWF5YW4gYmHFn2thIGTDvHplbmxlbWVsZXIgdmV5YSBldGtpbmxpa2xlciBnZXLDp2VrbGXFn3RpcmlsZGlcIixcblx0XHRcdGxhYmVsOiBcIkJpbGlubWV5ZW4gZMO8emVubGVtZWxlciB2ZXlhIGV0a2lubGlrbGVyXCJcblx0XHR9XG5cdH1cbn07XG52YXIgdHJUUiA9IHtcblx0c2VsZWN0b3JzOiBzZWxlY3RvcnMkM1xufTtcblxudmFyIHNlbGVjdG9ycyQyID0ge1xuXHRlZGl0c0FuZEFjdGl2aXR5OiB7XG5cdFx0XCJjMnBhLmNvbG9yX2FkanVzdG1lbnRzXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcItCh0LrQvtGA0LjQs9C+0LLQsNC90L4g0LLQu9Cw0YHRgtC40LLQvtGB0YLRliwg0Y/Qui3QvtGCINGC0L7QvSwg0L3QsNGB0LjRh9C10L3RltGB0YLRjCwg0LrRgNC40LLRliwg0YLRltC90ZYg0LDQsdC+INC/0ZbQtNGB0LLRltGH0YPQstCw0L3QvdGPXCIsXG5cdFx0XHRsYWJlbDogXCLQl9C80ZbQvdC4INC60L7Qu9GM0L7RgNGDINCw0LHQviDQtdC60YHQv9C+0LfQuNGG0ZbRl1wiXG5cdFx0fSxcblx0XHRcImMycGEuY3JlYXRlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLQodGC0LLQvtGA0LXQvdC+INC90L7QstC40Lkg0YTQsNC50Lsg0LDQsdC+INCy0LzRltGB0YJcIixcblx0XHRcdGxhYmVsOiBcItCh0YLQstC+0YDQtdC90L5cIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmNyb3BwZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwi0JLQuNC60L7RgNC40YHRgtCw0L3QviDRltC90YHRgtGA0YPQvNC10L3RgtC4INC60LDQtNGA0YPQstCw0L3QvdGPLCDQt9C80LXQvdGI0LXQvdC90Y8g0LDQsdC+INGA0L7Qt9GI0LjRgNC10L3QvdGPINC+0LHQu9Cw0YHRgtGWINCy0LjQtNC40LzQvtCz0L4g0LLQvNGW0YHRgtGDXCIsXG5cdFx0XHRsYWJlbDogXCLQl9C80ZbQvdC4INC60LDQtNGA0YPQstCw0L3QvdGPXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5kcmF3aW5nXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcItCS0LjQutC+0YDQuNGB0YLQsNC90L4g0ZbQvdGB0YLRgNGD0LzQtdC90YLQuCwg0Y/Qui3QvtGCINC+0LvRltCy0YbRliwg0L/QtdC90LfQu9GWLCDQs9GD0LzQutC4LCDQsNCx0L4g0ZbQvdGB0YLRgNGD0LzQtdC90YLQuCDQtNC70Y8g0YTQvtGA0LwsINC60L7QvdGC0YPRgNGW0LIg0LDQsdC+INC/0LXRgNCwXCIsXG5cdFx0XHRsYWJlbDogXCLQl9C80ZbQvdC4INC80LDQu9GO0LLQsNC90L3Rj1wiXG5cdFx0fSxcblx0XHRcImMycGEuZWRpdGVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcItCS0L3QtdGB0LXQvdC+INGW0L3RiNGWINC30LzRltC90LhcIixcblx0XHRcdGxhYmVsOiBcItCG0L3RiNGWINC30LzRltC90LhcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmZpbHRlcmVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcItCS0LjQutC+0YDQuNGB0YLQsNC90L4g0ZbQvdGB0YLRgNGD0LzQtdC90YLQuCwg0Y/Qui3QvtGCINGE0ZbQu9GM0YLRgNC4LCDRgdGC0LjQu9GWINGH0Lgg0LXRhNC10LrRgtC4INC00LvRjyDQt9C80ZbQvdC4INCy0LjQs9C70Y/QtNGDXCIsXG5cdFx0XHRsYWJlbDogXCLQl9C80ZbQvdC4INGE0ZbQu9GM0YLRgNGDINCw0LHQviDRgdGC0LjQu9GOXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5vcGVuZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwi0JLRltC00LrRgNC40YLQviDQstC20LUg0ZbRgdC90YPRjtGH0LjQuSDRhNCw0LnQu1wiLFxuXHRcdFx0bGFiZWw6IFwi0JLRltC00LrRgNC40YLQvlwiXG5cdFx0fSxcblx0XHRcImMycGEub3JpZW50YXRpb25cIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwi0JfQvNGW0L3QtdC90L4g0L/QvtC70L7QttC10L3QvdGPINCw0LHQviDQvtGA0ZbRlNC90YLQsNGG0ZbRjyAo0L/QvtCy0LXRgNC90YPRgtC+LCDQstGW0LTQtNC30LXRgNC60LDQu9C10L3QviDRgtC+0YnQvilcIixcblx0XHRcdGxhYmVsOiBcItCX0LzRltC90Lgg0L7RgNGW0ZTQvdGC0LDRhtGW0ZdcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLnBsYWNlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLQlNC+0LTQsNC90L4g0LLQttC1INGW0YHQvdGD0Y7Rh9C40Lkg0LLQvNGW0YHRgiDQtNC+INGG0YzQvtCz0L4g0YTQsNC50LvRg1wiLFxuXHRcdFx0bGFiZWw6IFwi0IbQvNC/0L7RgNGC0L7QstCw0L3QvlwiXG5cdFx0fSxcblx0XHRcImMycGEucmVzaXplZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLQl9C80ZbQvdC10L3QviDQs9C10L7QvNC10YLRgNC40YfQvdGWINGA0L7Qt9C80ZbRgNC4INCw0LHQviDRgNC+0LfQvNGW0YAg0YTQsNC50LvRg1wiLFxuXHRcdFx0bGFiZWw6IFwi0JfQvNGW0L3QuCDRgNC+0LfQvNGW0YDRg1wiXG5cdFx0fSxcblx0XHRcImMycGEudW5rbm93blwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLQktC40LrQvtC90LDQvdC+INGW0L3RiNGWINC30LzRltC90Lgg0LDQsdC+INC00ZbRlywg0Y/QutGWINC90LUg0LLQtNCw0LvQvtGB0Y8g0YDQvtC30L/RltC30L3QsNGC0LhcIixcblx0XHRcdGxhYmVsOiBcItCd0LXQstGW0LTQvtC80ZYg0LfQvNGW0L3QuCDRh9C4INC00ZbRl1wiXG5cdFx0fVxuXHR9XG59O1xudmFyIHVrVUEgPSB7XG5cdHNlbGVjdG9yczogc2VsZWN0b3JzJDJcbn07XG5cbnZhciBzZWxlY3RvcnMkMSA9IHtcblx0ZWRpdHNBbmRBY3Rpdml0eToge1xuXHRcdFwiYzJwYS5jb2xvcl9hZGp1c3RtZW50c1wiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLosIPmlbTlkI7nmoTlsZ7mgKfvvIzlpoLoibLosIPjgIHppbHlkozluqbjgIHmm7Lnur/jgIHpmLTlvbHmiJbpq5jlhYlcIixcblx0XHRcdGxhYmVsOiBcIuminOiJsuaIluabneWFieW6pue8lui+kVwiXG5cdFx0fSxcblx0XHRcImMycGEuY3JlYXRlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLlt7LliJvlu7rmlrDmlofku7bmiJblhoXlrrlcIixcblx0XHRcdGxhYmVsOiBcIuW3suWIm+W7ulwiXG5cdFx0fSxcblx0XHRcImMycGEuY3JvcHBlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLlt7Lkvb/nlKjnmoToo4HliIflt6XlhbfvvIjnlKjkuo7lh4/lsJHmiJbmianlpKflj6/op4HlhoXlrrnljLrln5/vvIlcIixcblx0XHRcdGxhYmVsOiBcIuijgeWIh+e8lui+kVwiXG5cdFx0fSxcblx0XHRcImMycGEuZHJhd2luZ1wiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLlt7Lkvb/nlKjnmoTlt6XlhbfvvIzlpoLpk4XnrJTjgIHnlLvnrJTjgIHmqaHnmq7mk6bjgIHlvaLnirbjgIHot6/lvoTmiJbpkqLnrJTlt6XlhbdcIixcblx0XHRcdGxhYmVsOiBcIue7mOWbvue8lui+kVwiXG5cdFx0fSxcblx0XHRcImMycGEuZWRpdGVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIuW3suaJp+ihjOWFtuS7luabtOaUuVwiLFxuXHRcdFx0bGFiZWw6IFwi5YW25LuW57yW6L6RXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5maWx0ZXJlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLlt7Lkvb/nlKjmu6TplZzjgIHmoLflvI/miJbmlYjmnpznrYnlt6XlhbfmnaXmm7TmlLnlpJbop4JcIixcblx0XHRcdGxhYmVsOiBcIua7pOmVnOaIluagt+W8j+e8lui+kVwiXG5cdFx0fSxcblx0XHRcImMycGEub3BlbmVkXCI6IHtcblx0XHRcdGRlc2NyaXB0aW9uOiBcIuW3suaJk+W8gOS4gOS4qumihOWFiOWtmOWcqOeahOaWh+S7tlwiLFxuXHRcdFx0bGFiZWw6IFwi5bey5omT5byAXCJcblx0XHR9LFxuXHRcdFwiYzJwYS5vcmllbnRhdGlvblwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLlt7LmlLnlj5jkvY3nva7miJbmlrnlkJHvvIjml4vovazjgIHnv7vovaznrYnvvIlcIixcblx0XHRcdGxhYmVsOiBcIuaWueWQkSDnvJbovpFcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLnBsYWNlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLlt7LlkJHmraTmlofku7bmt7vliqDpooTlhYjlrZjlnKjnmoTlhoXlrrlcIixcblx0XHRcdGxhYmVsOiBcIuW3suWvvOWFpVwiXG5cdFx0fSxcblx0XHRcImMycGEucmVzaXplZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLlt7Lmm7TmlLnlsLrlr7jmiJbmlofku7blpKflsI9cIixcblx0XHRcdGxhYmVsOiBcIuiwg+aVtOe8lui+keWkp+Wwj1wiXG5cdFx0fSxcblx0XHRcImMycGEudW5rbm93blwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLlt7LmiafooYzlhbbku5bml6Dms5Xor4bliKvnmoTnvJbovpHmiJbmtLvliqhcIixcblx0XHRcdGxhYmVsOiBcIuacquefpeeahOe8lui+keaIlua0u+WKqFwiXG5cdFx0fVxuXHR9XG59O1xudmFyIHpoQ04gPSB7XG5cdHNlbGVjdG9yczogc2VsZWN0b3JzJDFcbn07XG5cbnZhciBzZWxlY3RvcnMgPSB7XG5cdGVkaXRzQW5kQWN0aXZpdHk6IHtcblx0XHRcImMycGEuY29sb3JfYWRqdXN0bWVudHNcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwi6Kq/5pW05LqG5bGs5oCn77yM5aaC6Imy6Kq/44CB6aO95ZKM5bqm44CB5puy57ea44CB6Zmw5b2x5oiW5Lqu6YOoXCIsXG5cdFx0XHRsYWJlbDogXCLpoY/oibLmiJbmm53lhYnnt6jovK9cIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmNyZWF0ZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwi5bu656uL5LqG5paw5qqU5qGI5oiW5YWn5a65XCIsXG5cdFx0XHRsYWJlbDogXCLlt7Llu7rnq4tcIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmNyb3BwZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwi5L2/55So5LqG6KOB5YiH5bel5YW377yM57iu5rib5oiW5pO05aSn5Y+v6KaL5YWn5a655Y2A5Z+fXCIsXG5cdFx0XHRsYWJlbDogXCLoo4HliIfnt6jovK9cIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmRyYXdpbmdcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwi5L2/55So5LqG6Ymb562G44CB562G5Yi344CB5qmh55qu5pOm562J5bel5YW377yM5oiW5piv5b2i54uA44CB6Lev5b6R5oiW6Yu8562G5bel5YW3XCIsXG5cdFx0XHRsYWJlbDogXCLnuarlnJbnt6jovK9cIlxuXHRcdH0sXG5cdFx0XCJjMnBhLmVkaXRlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLpgLLooYzkuoblhbbku5borormm7RcIixcblx0XHRcdGxhYmVsOiBcIuWFtuS7lue3qOi8r1wiXG5cdFx0fSxcblx0XHRcImMycGEuZmlsdGVyZWRcIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwi5L2/55So5LqG5r++6Y+h44CB6aKo5qC85oiW5pWI5p6c562J5bel5YW35L6G6K6K5pu05aSW6KeAXCIsXG5cdFx0XHRsYWJlbDogXCLmv77pj6HmiJbpoqjmoLznt6jovK9cIlxuXHRcdH0sXG5cdFx0XCJjMnBhLm9wZW5lZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLplovllZ/kuoblt7LlrZjlnKjnmoTmqpTmoYhcIixcblx0XHRcdGxhYmVsOiBcIuW3sumWi+WVn1wiXG5cdFx0fSxcblx0XHRcImMycGEub3JpZW50YXRpb25cIjoge1xuXHRcdFx0ZGVzY3JpcHRpb246IFwi6K6K5pu05LqG5L2N572u5oiW5pa55ZCRICjml4vovYnjgIHnv7vovYnnrYkpXCIsXG5cdFx0XHRsYWJlbDogXCLmlrnlkJHnt6jovK9cIlxuXHRcdH0sXG5cdFx0XCJjMnBhLnBsYWNlZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLlsI3mraTmqpTmoYjmlrDlop7kuoblt7LlrZjlnKjnmoTlhaflrrlcIixcblx0XHRcdGxhYmVsOiBcIuW3suiugOWFpVwiXG5cdFx0fSxcblx0XHRcImMycGEucmVzaXplZFwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLorormm7TkuoblsLrlr7jmiJbmqpTmoYjlpKflsI9cIixcblx0XHRcdGxhYmVsOiBcIuiqv+aVtOWkp+Wwj+e3qOi8r1wiXG5cdFx0fSxcblx0XHRcImMycGEudW5rbm93blwiOiB7XG5cdFx0XHRkZXNjcmlwdGlvbjogXCLln7fooYzkuoblhbbku5bnhKHms5XovqjorZjnmoTnt6jovK/miJbmtLvli5VcIixcblx0XHRcdGxhYmVsOiBcIuacquefpeeahOe3qOi8r+aIlua0u+WLlVwiXG5cdFx0fVxuXHR9XG59O1xudmFyIHpoVFcgPSB7XG5cdHNlbGVjdG9yczogc2VsZWN0b3JzXG59O1xuXG52YXIgbG9jYWxlcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcblx0X19wcm90b19fOiBudWxsLFxuXHRjc19DWjogY3NDWixcblx0ZGFfREs6IGRhREssXG5cdGRlX0RFOiBkZURFLFxuXHRlbl9VUzogZW5VUyxcblx0ZXNfRVM6IGVzRVMsXG5cdGZpX0ZJOiBmaUZJLFxuXHRmcl9GUjogZnJGUixcblx0aHVfSFU6IGh1SFUsXG5cdGl0X0lUOiBpdElULFxuXHRqYV9KUDogamFKUCxcblx0a29fS1I6IGtvS1IsXG5cdG5iX05POiBuYk5PLFxuXHRubF9OTDogbmxOTCxcblx0cGxfUEw6IHBsUEwsXG5cdHB0X0JSOiBwdEJSLFxuXHRydV9SVTogcnVSVSxcblx0c3ZfU0U6IHN2U0UsXG5cdHRyX1RSOiB0clRSLFxuXHR1a19VQTogdWtVQSxcblx0emhfQ046IHpoQ04sXG5cdHpoX1RXOiB6aFRXXG59KTtcblxudmFyIHVua25vd24gPSBcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0NzdmclMjB4bWxucyUzRCUyMmh0dHAlM0ElMkYlMkZ3d3cudzMub3JnJTJGMjAwMCUyRnN2ZyUyMiUyMGhlaWdodCUzRCUyMjE4JTIyJTIwdmlld0JveCUzRCUyMjAlMjAwJTIwMTglMjAxOCUyMiUyMHdpZHRoJTNEJTIyMTglMjIlM0UlMjAlMjAlM0NkZWZzJTNFJTIwJTIwJTIwJTIwJTNDc3R5bGUlM0UlMjAlMjAlMjAlMjAlMjAlMjAuZmlsbCUyMCU3QiUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGZpbGwlM0ElMjAlMjM2RTZFNkUlM0IlMjAlMjAlMjAlMjAlMjAlMjAlN0QlMjAlMjAlMjAlMjAlM0MlMkZzdHlsZSUzRSUyMCUyMCUzQyUyRmRlZnMlM0UlMjAlMjAlM0N0aXRsZSUzRVMlMjBBbGVydENpcmNsZSUyMDE4JTIwTiUzQyUyRnRpdGxlJTNFJTIwJTIwJTNDcmVjdCUyMGlkJTNEJTIyQ2FudmFzJTIyJTIwZmlsbCUzRCUyMiUyM2ZmMTNkYyUyMiUyMG9wYWNpdHklM0QlMjIwJTIyJTIwd2lkdGglM0QlMjIxOCUyMiUyMGhlaWdodCUzRCUyMjE4JTIyJTIwJTJGJTNFJTNDcGF0aCUyMGNsYXNzJTNEJTIyZmlsbCUyMiUyMGQlM0QlMjJNNy44NDU1NSUyQzEyLjg4NjE4YTEuMTM0MTglMkMxLjEzNDE4JTJDMCUyQzAlMkMxJTJDMS4xMTYxLTEuMTUxOTVxLjA0Mi0uMDAwNjQuMDgzOTEuMDAxNzhhMS4xMTYlMkMxLjExNiUyQzAlMkMwJTJDMSUyQzEuMiUyQzEuMTUwMTclMkMxLjA5MDY1JTJDMS4wOTA2NSUyQzAlMkMwJTJDMS0xLjIlMkMxLjExNjYxJTJDMS4wOTA4JTJDMS4wOTA4JTJDMCUyQzAlMkMxLTEuMi0xLjExNjYxWk0xMC4wNjI1JTJDNC4zOTc3MWEuMjA3OTIuMjA3OTIlMkMwJTJDMCUyQzElMkMuMDk5NjYuMTgzVjUuNjIyMTJjMCUyQzEuNDAwMzQtLjI4MzIyJTJDMy45ODAzNC0uMzMzMDUlMkM0LjQ4MDY3JTJDMCUyQy4wNDk4NC0uMDE2NzguMDk5NjctLjExNjk1LjA5OTY3SDguMzc5YS4xMTA2OS4xMTA2OSUyQzAlMkMwJTJDMS0uMTE2OTUtLjA5OTY3Yy0uMDMzMDUtLjQ2Njc4LS4zLTMuMDMwNS0uMy00LjQzMDg0VjQuNjMwNmEuMTc3My4xNzczJTJDMCUyQzAlMkMxJTJDLjA4MzM5LS4xODMwNiUyQzIuODgyNjIlMkMyLjg4MjYyJTJDMCUyQzAlMkMxJTJDMS4wMDAxNy0uMjAwMzNBMy4yNzQzNSUyQzMuMjc0MzUlMkMwJTJDMCUyQzElMkMxMC4wNjI1JTJDNC4zOTc3MVpNMTcuNTAwMDUlMkM5QTguNTAwMDUlMkM4LjUwMDA1JTJDMCUyQzElMkMxJTJDOSUyQy41SDlBOC41MDAwOCUyQzguNTAwMDglMkMwJTJDMCUyQzElMkMxNy41MDAwNSUyQzlaTTE1LjY3NDg0JTJDOUE2LjY3NDg1JTJDNi42NzQ4NSUyQzAlMkMxJTJDMCUyQzklMkMxNS42NzQ4SDlBNi42NzQ3OSUyQzYuNjc0NzklMkMwJTJDMCUyQzAlMkMxNS42NzQ4NCUyQzlaJTIyJTIwJTJGJTNFJTNDJTJGc3ZnJTNFXCI7XG5cbnZhciBjb2xvckFkanVzdGVtZW50cyA9IFwiZGF0YTppbWFnZS9zdmcreG1sLCUzQ3N2ZyUyMHhtbG5zJTNEJTIyaHR0cCUzQSUyRiUyRnd3dy53My5vcmclMkYyMDAwJTJGc3ZnJTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjB2aWV3Qm94JTNEJTIyMCUyMDAlMjAxOCUyMDE4JTIyJTIwd2lkdGglM0QlMjIxOCUyMiUzRSUyMCUyMCUzQ2RlZnMlM0UlMjAlMjAlMjAlMjAlM0NzdHlsZSUzRSUyMCUyMCUyMCUyMCUyMCUyMC5hJTIwJTdCJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwZmlsbCUzQSUyMCUyMzZFNkU2RSUzQiUyMCUyMCUyMCUyMCUyMCUyMCU3RCUyMCUyMCUyMCUyMCUzQyUyRnN0eWxlJTNFJTIwJTIwJTNDJTJGZGVmcyUzRSUyMCUyMCUzQ3RpdGxlJTNFUyUyMENvbG9yUGFsZXR0ZSUyMDE4JTIwTiUzQyUyRnRpdGxlJTNFJTIwJTIwJTNDcmVjdCUyMGlkJTNEJTIyQ2FudmFzJTIyJTIwZmlsbCUzRCUyMiUyM2ZmMTNkYyUyMiUyMG9wYWNpdHklM0QlMjIwJTIyJTIwd2lkdGglM0QlMjIxOCUyMiUyMGhlaWdodCUzRCUyMjE4JTIyJTIwJTJGJTNFJTNDcGF0aCUyMGNsYXNzJTNEJTIyYSUyMiUyMGQlM0QlMjJNMTEuODA3JTJDMy4wNzI1Yy0yLjE4NTUtLjM1LTQuNTAzJTJDMC00LjgyNCUyQzEuMDQ2YTEuMTQ2JTJDMS4xNDYlMkMwJTJDMCUyQzAlMkMuNjQ3JTJDMS40NTRBMS41NDklMkMxLjU0OSUyQzAlMkMwJTJDMSUyQzguMTk5NSUyQzcuODQzYTEuNDE0NDklMkMxLjQxNDQ5JTJDMCUyQzAlMkMxLTEuNTYyNS41NjNDNC43NjMlMkM3LjkzMjUlMkMyLjY5MDUlMkM2Ljk2NS45OTQ1JTJDOC41Nzg1LS41NSUyQzEwLjA1LjA3OSUyQzEyLjIzMyUyQzEuNTc3JTJDMTMuNDIxYTExLjclMkMxMS43JTJDMCUyQzAlMkMwJTJDNy4yNTY1JTJDMi42MzdjNC43OTMlMkMwJTJDOS4wNjY1LTIuODI1NSUyQzkuMDY2NS02LjU1OEMxNy45JTJDNS43MjElMkMxNC4zMTYlMkMzLjQ3MTUlMkMxMS44MDclMkMzLjA3MjVabS03LjQ2JTJDMTAuNjU0YTEuOSUyQzEuOSUyQzAlMkMxJTJDMSUyQzEuOS0xLjlBMS45JTJDMS45JTJDMCUyQzAlMkMxJTJDNC4zNDclMkMxMy43MjY1Wm05LjY0My04LjAxN2ExLjI1JTJDMS4yNSUyQzAlMkMxJTJDMS0xLjI1JTJDMS4yNUExLjI1JTJDMS4yNSUyQzAlMkMwJTJDMSUyQzEzLjk5JTJDNS43MDk1Wm0tNS4zNTElMkM5LjA3YTEuNzgwNSUyQzEuNzgwNSUyQzAlMkMxJTJDMSUyQzEuNzc5NS0xLjc4MjVWMTNBMS43OCUyQzEuNzglMkMwJTJDMCUyQzElMkM4LjYzOSUyQzE0Ljc3OTVabTMuODk1LS43NDhhMS41MDM1JTJDMS41MDM1JTJDMCUyQzElMkMxJTJDMS41MDEtMS41MDd2LjAwNUExLjUwMjQ5JTJDMS41MDI0OSUyQzAlMkMwJTJDMSUyQzEyLjUzNCUyQzE0LjAzMTVaTTE1JTJDMTEuMjhhMS4zMzc1JTJDMS4zMzc1JTJDMCUyQzElMkMxJTJDMS4zMzctMS4zMzh2LjAwMDVBMS4zMzclMkMxLjMzNyUyQzAlMkMwJTJDMSUyQzE1LjAwMDUlMkMxMS4yOFolMjIlMjAlMkYlM0UlM0MlMkZzdmclM0VcIjtcblxudmFyIGNyb3BwZWQgPSBcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0NzdmclMjB4bWxucyUzRCUyMmh0dHAlM0ElMkYlMkZ3d3cudzMub3JnJTJGMjAwMCUyRnN2ZyUyMiUyMGhlaWdodCUzRCUyMjE4JTIyJTIwdmlld0JveCUzRCUyMjAlMjAwJTIwMTglMjAxOCUyMiUyMHdpZHRoJTNEJTIyMTglMjIlM0UlMjAlMjAlM0NkZWZzJTNFJTIwJTIwJTIwJTIwJTNDc3R5bGUlM0UlMjAlMjAlMjAlMjAlMjAlMjAuZmlsbCUyMCU3QiUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGZpbGwlM0ElMjAlMjM2RTZFNkUlM0IlMjAlMjAlMjAlMjAlMjAlMjAlN0QlMjAlMjAlMjAlMjAlM0MlMkZzdHlsZSUzRSUyMCUyMCUzQyUyRmRlZnMlM0UlMjAlMjAlM0N0aXRsZSUzRVMlMjBDcm9wJTIwMTglMjBOJTNDJTJGdGl0bGUlM0UlMjAlMjAlM0NyZWN0JTIwaWQlM0QlMjJDYW52YXMlMjIlMjBmaWxsJTNEJTIyJTIzZmYxM2RjJTIyJTIwb3BhY2l0eSUzRCUyMjAlMjIlMjB3aWR0aCUzRCUyMjE4JTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjAlMkYlM0UlM0NwYXRoJTIwY2xhc3MlM0QlMjJmaWxsJTIyJTIwZCUzRCUyMk0xMiUyQzExaDJWNC41YS41LjUlMkMwJTJDMCUyQzAtLjUtLjVIN1Y2aDVaJTIyJTIwJTJGJTNFJTIwJTIwJTNDcGF0aCUyMGNsYXNzJTNEJTIyZmlsbCUyMiUyMGQlM0QlMjJNNiUyQzEyVjEuNUEuNS41JTJDMCUyQzAlMkMwJTJDNS41JTJDMWgtMWEuNS41JTJDMCUyQzAlMkMwLS41LjVWNEgxLjVhLjUuNSUyQzAlMkMwJTJDMC0uNS41djFhLjUuNSUyQzAlMkMwJTJDMCUyQy41LjVINHY3LjVhLjUuNSUyQzAlMkMwJTJDMCUyQy41LjVIMTJ2Mi41YS41LjUlMkMwJTJDMCUyQzAlMkMuNS41aDFhLjUuNSUyQzAlMkMwJTJDMCUyQy41LS41VjE0aDIuNWEuNS41JTJDMCUyQzAlMkMwJTJDLjUtLjV2LTFhLjUuNSUyQzAlMkMwJTJDMC0uNS0uNVolMjIlMjAlMkYlM0UlM0MlMkZzdmclM0VcIjtcblxudmFyIGRyYXdpbmcgPSBcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0NzdmclMjB4bWxucyUzRCUyMmh0dHAlM0ElMkYlMkZ3d3cudzMub3JnJTJGMjAwMCUyRnN2ZyUyMiUyMGhlaWdodCUzRCUyMjE4JTIyJTIwdmlld0JveCUzRCUyMjAlMjAwJTIwMTglMjAxOCUyMiUyMHdpZHRoJTNEJTIyMTglMjIlM0UlMjAlMjAlM0NkZWZzJTNFJTIwJTIwJTIwJTIwJTNDc3R5bGUlM0UlMjAlMjAlMjAlMjAlMjAlMjAuZmlsbCUyMCU3QiUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGZpbGwlM0ElMjAlMjM2RTZFNkUlM0IlMjAlMjAlMjAlMjAlMjAlMjAlN0QlMjAlMjAlMjAlMjAlM0MlMkZzdHlsZSUzRSUyMCUyMCUzQyUyRmRlZnMlM0UlMjAlMjAlM0N0aXRsZSUzRVMlMjBEcmF3JTIwMTglMjBOJTNDJTJGdGl0bGUlM0UlMjAlMjAlM0NyZWN0JTIwaWQlM0QlMjJDYW52YXMlMjIlMjBmaWxsJTNEJTIyJTIzZmYxM2RjJTIyJTIwb3BhY2l0eSUzRCUyMjAlMjIlMjB3aWR0aCUzRCUyMjE4JTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjAlMkYlM0UlM0NwYXRoJTIwY2xhc3MlM0QlMjJmaWxsJTIyJTIwZCUzRCUyMk0xMC4yMjclMkM0JTJDMi41NDIlMkMxMS42ODZhLjQ5Ni40OTYlMkMwJTJDMCUyQzAtLjEyNTUuMjEwNUwxLjAyNzUlMkMxNi41NWMtLjA1Ny4xODguMjI5NS40MjUuMzkxNS40MjVhLjE1NTg3LjE1NTg3JTJDMCUyQzAlMkMwJTJDLjAzMS0uMDAzYy4xMzgtLjAzMiUyQzMuOTMzNS0xLjE3MiUyQzQuNjU1NS0xLjM4OWEuNDkyLjQ5MiUyQzAlMkMwJTJDMCUyQy4yMDc1LS4xMjVMMTQlMkM3Ljc3MlpNNS43JTJDMTQuNjU4Yy0xLjA4MDUuMzI0NS0yLjQzMS43MzI1LTMuMzY0NSUyQzEuMDExTDMuMzQlMkMxMi4zMDRaJTIyJTIwJTJGJTNFJTIwJTIwJTNDcGF0aCUyMGNsYXNzJTNEJTIyZmlsbCUyMiUyMGQlM0QlMjJNMTYuNzgzNSUyQzQuMSUyQzEzLjklMkMxLjIxNmEuNjA3NTEuNjA3NTElMkMwJTJDMCUyQzAtLjQzMy0uMTc2NUgxMy40NWEuNjg2LjY4NiUyQzAlMkMwJTJDMC0uNDYzNS4yMDM1bC0yLjA1JTJDMi4wNUwxNC43MDglMkM3LjA2NDVsMi4wNS0yLjA1YS42ODYuNjg2JTJDMCUyQzAlMkMwJTJDLjItLjQ0MTVBLjYxMi42MTIlMkMwJTJDMCUyQzAlMkMxNi43ODM1JTJDNC4xWiUyMiUyMCUyRiUzRSUzQyUyRnN2ZyUzRVwiO1xuXG52YXIgZWRpdGVkID0gXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNDc3ZnJTIweG1sbnMlM0QlMjJodHRwJTNBJTJGJTJGd3d3LnczLm9yZyUyRjIwMDAlMkZzdmclMjIlMjBoZWlnaHQlM0QlMjIxOCUyMiUyMHZpZXdCb3glM0QlMjIwJTIwMCUyMDE4JTIwMTglMjIlMjB3aWR0aCUzRCUyMjE4JTIyJTNFJTIwJTIwJTNDZGVmcyUzRSUyMCUyMCUyMCUyMCUzQ3N0eWxlJTNFJTIwJTIwJTIwJTIwJTIwJTIwLmZpbGwlMjAlN0IlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBmaWxsJTNBJTIwJTIzNkU2RTZFJTNCJTIwJTIwJTIwJTIwJTIwJTIwJTdEJTIwJTIwJTIwJTIwJTNDJTJGc3R5bGUlM0UlMjAlMjAlM0MlMkZkZWZzJTNFJTIwJTIwJTNDdGl0bGUlM0VTJTIwRWRpdEluTGlnaHQlMjAxOCUyME4lM0MlMkZ0aXRsZSUzRSUyMCUyMCUzQ3JlY3QlMjBpZCUzRCUyMkNhbnZhcyUyMiUyMGZpbGwlM0QlMjIlMjNmZjEzZGMlMjIlMjBvcGFjaXR5JTNEJTIyMCUyMiUyMHdpZHRoJTNEJTIyMTglMjIlMjBoZWlnaHQlM0QlMjIxOCUyMiUyMCUyRiUzRSUzQ3BhdGglMjBjbGFzcyUzRCUyMmZpbGwlMjIlMjBkJTNEJTIyTTE3LjgyMjUlMkM4LjM0MjUlMkMxNS42NjA1JTJDNi4xODFhLjQ1Ni40NTYlMkMwJTJDMCUyQzAtLjMyNS0uMTMyNWgtLjAxNGEuNTE3NDguNTE3NDglMkMwJTJDMCUyQzAtLjM1LjE1bC03LjYxNiUyQzcuNjIxYS4zNjguMzY4JTJDMCUyQzAlMkMwLS4wOTQuMTU3NWwtMS4yMjIlMkMzLjY3Yy0uMDQyNS4xNDEuMTcyNS4zMTkuMjk0LjMxOWwuMDIzLS4wMDI1Yy4xMDM1LS4wMjQlMkMzLjEzLTEuMDU5JTJDMy42NzItMS4yMjJhLjM2NjUzLjM2NjUzJTJDMCUyQzAlMkMwJTJDLjE1NS0uMDkzNUwxNy44JTJDOS4wMjk1YS41MTUuNTE1JTJDMCUyQzAlMkMwJTJDLjE1LS4zMzFBLjQ1OC40NTglMkMwJTJDMCUyQzAlMkMxNy44MjI1JTJDOC4zNDI1Wm0tMTAuODAzJTJDOC42NDQuOTg5LTIuNzU5NSUyQzEuNzclMkMxLjc2NTVDOC45NjglMkMxNi4yMzYlMkM3LjcxOTUlMkMxNi43Nzc1JTJDNy4wMTk1JTJDMTYuOTg2NVolMjIlMjAlMkYlM0UlMjAlMjAlM0NwYXRoJTIwY2xhc3MlM0QlMjJmaWxsJTIyJTIwZCUzRCUyMk0xMy41JTJDMUgxLjVhLjUuNSUyQzAlMkMwJTJDMC0uNS41djEyYS41LjUlMkMwJTJDMCUyQzAlMkMuNS41SDYuMDM4NWwuMTEyNS0uMzM5YTEuMzUlMkMxLjM1JTJDMCUyQzAlMkMxJTJDLjMzNi0uNTVMNi42JTJDMTNIMlYySDEzVjYuNTgzbDEtMVYxLjVBLjUuNSUyQzAlMkMwJTJDMCUyQzEzLjUlMkMxWiUyMiUyMCUyRiUzRSUzQyUyRnN2ZyUzRVwiO1xuXG52YXIgb3BlbmVkID0gXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNDc3ZnJTIweG1sbnMlM0QlMjJodHRwJTNBJTJGJTJGd3d3LnczLm9yZyUyRjIwMDAlMkZzdmclMjIlMjBoZWlnaHQlM0QlMjIxOCUyMiUyMHZpZXdCb3glM0QlMjIwJTIwMCUyMDE4JTIwMTglMjIlMjB3aWR0aCUzRCUyMjE4JTIyJTNFJTIwJTIwJTNDZGVmcyUzRSUyMCUyMCUyMCUyMCUzQ3N0eWxlJTNFJTIwJTIwJTIwJTIwJTIwJTIwLmElMjAlN0IlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBmaWxsJTNBJTIwJTIzNkU2RTZFJTNCJTIwJTIwJTIwJTIwJTIwJTIwJTdEJTIwJTIwJTIwJTIwJTNDJTJGc3R5bGUlM0UlMjAlMjAlM0MlMkZkZWZzJTNFJTIwJTIwJTNDdGl0bGUlM0VTJTIwSW1wb3J0JTIwMTglMjBOJTNDJTJGdGl0bGUlM0UlMjAlMjAlM0NyZWN0JTIwaWQlM0QlMjJDYW52YXMlMjIlMjBmaWxsJTNEJTIyJTIzZmYxM2RjJTIyJTIwb3BhY2l0eSUzRCUyMjAlMjIlMjB3aWR0aCUzRCUyMjE4JTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjAlMkYlM0UlM0NwYXRoJTIwY2xhc3MlM0QlMjJhJTIyJTIwZCUzRCUyMk0xNi41JTJDMUg1LjVhLjUuNSUyQzAlMkMwJTJDMC0uNS41djNhLjUuNSUyQzAlMkMwJTJDMCUyQy41LjVoMUEuNS41JTJDMCUyQzAlMkMwJTJDNyUyQzQuNVYzaDhWMTVIN1YxMy41YS41LjUlMkMwJTJDMCUyQzAtLjUtLjVoLTFhLjUuNSUyQzAlMkMwJTJDMC0uNS41djNhLjUuNSUyQzAlMkMwJTJDMCUyQy41LjVoMTFhLjUuNSUyQzAlMkMwJTJDMCUyQy41LS41VjEuNUEuNS41JTJDMCUyQzAlMkMwJTJDMTYuNSUyQzFaJTIyJTIwJTJGJTNFJTIwJTIwJTNDcGF0aCUyMGNsYXNzJTNEJTIyYSUyMiUyMGQlM0QlMjJNOCUyQzEyLjZhLjQuNCUyQzAlMkMwJTJDMCUyQy40LjQuMzkzNTIuMzkzNTIlMkMwJTJDMCUyQzAlMkMuMjYzNS0uMWwzLjc2Mi0zLjcyMjVhLjI1LjI1JTJDMCUyQzAlMkMwJTJDMC0uMzVMOC42NjYlMkM1LjFBLjM5MzUyLjM5MzUyJTJDMCUyQzAlMkMwJTJDOC40MDI1JTJDNWEuNC40JTJDMCUyQzAlMkMwLS40LjRWOEgxLjVhLjUuNSUyQzAlMkMwJTJDMC0uNS41djFhLjUuNSUyQzAlMkMwJTJDMCUyQy41LjVIOFolMjIlMjAlMkYlM0UlM0MlMkZzdmclM0VcIjtcblxudmFyIGNvbWJpbmVkQXNzZXRzID0gXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNDc3ZnJTIweG1sbnMlM0QlMjJodHRwJTNBJTJGJTJGd3d3LnczLm9yZyUyRjIwMDAlMkZzdmclMjIlMjBoZWlnaHQlM0QlMjIxOCUyMiUyMHZpZXdCb3glM0QlMjIwJTIwMCUyMDE4JTIwMTglMjIlMjB3aWR0aCUzRCUyMjE4JTIyJTNFJTIwJTIwJTNDZGVmcyUzRSUyMCUyMCUyMCUyMCUzQ3N0eWxlJTNFJTIwJTIwJTIwJTIwJTIwJTIwLmElMjAlN0IlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBmaWxsJTNBJTIwJTIzNkU2RTZFJTNCJTIwJTIwJTIwJTIwJTIwJTIwJTdEJTIwJTIwJTIwJTIwJTNDJTJGc3R5bGUlM0UlMjAlMjAlM0MlMkZkZWZzJTNFJTIwJTIwJTNDdGl0bGUlM0VTJTIwTGF5ZXJzJTIwMTglMjBOJTNDJTJGdGl0bGUlM0UlMjAlMjAlM0NyZWN0JTIwaWQlM0QlMjJDYW52YXMlMjIlMjBmaWxsJTNEJTIyJTIzZmYxM2RjJTIyJTIwb3BhY2l0eSUzRCUyMjAlMjIlMjB3aWR0aCUzRCUyMjE4JTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjAlMkYlM0UlM0NwYXRoJTIwY2xhc3MlM0QlMjJhJTIyJTIwZCUzRCUyMk0xNC4xNDQlMkM5Ljk2OSUyQzkuMjI0NSUyQzEzLjM4MjVhLjM5NDUuMzk0NSUyQzAlMkMwJTJDMS0uNDUlMkMwTDMuODU2JTJDOS45NjkuOTI5JTJDMTJhLjEyNTUuMTI1NSUyQzAlMkMwJTJDMCUyQzAlMkMuMjA1NWw3LjkyNSUyQzUuNWEuMjU3NS4yNTc1JTJDMCUyQzAlMkMwJTJDLjI5MiUyQzBsNy45MjUtNS41YS4xMjU1LjEyNTUlMkMwJTJDMCUyQzAlMkMwLS4yMDU1WiUyMiUyMCUyRiUzRSUyMCUyMCUzQ3BhdGglMjBjbGFzcyUzRCUyMmElMjIlMjBkJTNEJTIyTTguODUlMkMxMS40OTQuOTI5JTJDNmEuMTI0NS4xMjQ1JTJDMCUyQzAlMkMxJTJDMC0uMjA1TDguODUuMjk3YS4yNjUuMjY1JTJDMCUyQzAlMkMxJTJDLjMlMkMwbDcuOTIxJTJDNS40OTZhLjEyNDUuMTI0NSUyQzAlMkMwJTJDMSUyQzAlMkMuMjA1TDkuMTUlMkMxMS40OTRBLjI2NS4yNjUlMkMwJTJDMCUyQzElMkM4Ljg1JTJDMTEuNDk0WiUyMiUyMCUyRiUzRSUzQyUyRnN2ZyUzRVwiO1xuXG52YXIgY3JlYXRlZCA9IFwiZGF0YTppbWFnZS9zdmcreG1sLCUzQ3N2ZyUyMHhtbG5zJTNEJTIyaHR0cCUzQSUyRiUyRnd3dy53My5vcmclMkYyMDAwJTJGc3ZnJTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjB2aWV3Qm94JTNEJTIyMCUyMDAlMjAxOCUyMDE4JTIyJTIwd2lkdGglM0QlMjIxOCUyMiUzRSUyMCUyMCUzQ2RlZnMlM0UlMjAlMjAlMjAlMjAlM0NzdHlsZSUzRSUyMCUyMCUyMCUyMCUyMCUyMC5maWxsJTIwJTdCJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwZmlsbCUzQSUyMCUyMzZFNkU2RSUzQiUyMCUyMCUyMCUyMCUyMCUyMCU3RCUyMCUyMCUyMCUyMCUzQyUyRnN0eWxlJTNFJTIwJTIwJTNDJTJGZGVmcyUzRSUyMCUyMCUzQ3RpdGxlJTNFUyUyME5ld0l0ZW0lMjAxOCUyME4lM0MlMkZ0aXRsZSUzRSUyMCUyMCUzQ3JlY3QlMjBpZCUzRCUyMkNhbnZhcyUyMiUyMGZpbGwlM0QlMjIlMjNmZjEzZGMlMjIlMjBvcGFjaXR5JTNEJTIyMCUyMiUyMHdpZHRoJTNEJTIyMTglMjIlMjBoZWlnaHQlM0QlMjIxOCUyMiUyMCUyRiUzRSUzQ3BhdGglMjBjbGFzcyUzRCUyMmZpbGwlMjIlMjBkJTNEJTIyTTE1LjUlMkMySDIuNWEuNS41JTJDMCUyQzAlMkMwLS41LjVWOUg4LjVhLjUuNSUyQzAlMkMwJTJDMSUyQy41LjVWMTZoNi41YS41LjUlMkMwJTJDMCUyQzAlMkMuNS0uNVYyLjVBLjUuNSUyQzAlMkMwJTJDMCUyQzE1LjUlMkMyWiUyMiUyMCUyRiUzRSUyMCUyMCUzQ3BhdGglMjBjbGFzcyUzRCUyMmZpbGwlMjIlMjBkJTNEJTIyTTglMkMxNkg3Ljk1N2EuNS41JTJDMCUyQzAlMkMxLS4zNTM1LS4xNDY1bC01LjQ1Ny01LjQ1N0EuNS41JTJDMCUyQzAlMkMxJTJDMiUyQzEwLjA0M1YxMEg4WiUyMiUyMCUyRiUzRSUzQyUyRnN2ZyUzRVwiO1xuXG52YXIgdGhyZWVkID0gXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNDc3ZnJTIweG1sbnMlM0QlMjJodHRwJTNBJTJGJTJGd3d3LnczLm9yZyUyRjIwMDAlMkZzdmclMjIlMjBoZWlnaHQlM0QlMjIxOCUyMiUyMHZpZXdCb3glM0QlMjIwJTIwMCUyMDE4JTIwMTglMjIlMjB3aWR0aCUzRCUyMjE4JTIyJTNFJTIwJTIwJTNDZGVmcyUzRSUyMCUyMCUyMCUyMCUzQ3N0eWxlJTNFJTIwJTIwJTIwJTIwJTIwJTIwLmElMjAlN0IlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBmaWxsJTNBJTIwJTIzNkU2RTZFJTNCJTIwJTIwJTIwJTIwJTIwJTIwJTdEJTIwJTIwJTIwJTIwJTNDJTJGc3R5bGUlM0UlMjAlMjAlM0MlMkZkZWZzJTNFJTIwJTIwJTNDdGl0bGUlM0VTJTIwT3JiaXQlMjAxOCUyME4lM0MlMkZ0aXRsZSUzRSUyMCUyMCUzQ3JlY3QlMjBpZCUzRCUyMkNhbnZhcyUyMiUyMGZpbGwlM0QlMjIlMjNmZjEzZGMlMjIlMjBvcGFjaXR5JTNEJTIyMCUyMiUyMHdpZHRoJTNEJTIyMTglMjIlMjBoZWlnaHQlM0QlMjIxOCUyMiUyMCUyRiUzRSUzQ3BhdGglMjBjbGFzcyUzRCUyMmElMjIlMjBkJTNEJTIyTTEzLjg3ODUlMkM2LjkzNTVBMy45OTE1JTJDMy45OTE1JTJDMCUyQzAlMkMwJTJDNi4zNSUyQzQuMzc0Yy0uMzMxLS4wMjU1LS42NTktLjA0NS0uOTc0LS4wNDVDMi42NTI1JTJDNC4zMjkuNTc4NSUyQzUuMjc0NS4xJTJDN2MtLjUyJTJDMS44ODQ1JTJDMS4wMTklMkM0LjE4NiUyQzMuNjc4JTJDNS45NzNMMi4zNTQ1JTJDMTQuNjgwNUEuMTkwNS4xOTA1JTJDMCUyQzAlMkMwJTJDMi41JTJDMTQuOTkzSDguOTVMNi4wNDUlMkMxMC42MzVhLjE5MS4xOTElMkMwJTJDMCUyQzAtLjMwNS0uMDE2NUw0Ljc1NTUlMkMxMS44Yy0yLjI1LTEuNDcxLTMuNS0zLjI1LTMuMTg1NS00LjM5MzUuMjYxLS45NDQlMkMxLjc1Ni0xLjU1NCUyQzMuODA4NS0xLjU1NC4yMDU1JTJDMCUyQy40MjEuMDE4LjYzMy4wMzA1QzYuMDExNSUyQzUuOTIzJTJDNiUyQzUuOTYlMkM2JTJDNmEzLjk5MjUlMkMzLjk5MjUlMkMwJTJDMCUyQzAlMkM3LjIzODUlMkMyLjMzMmMyLjIlMkMxLjQ2MDUlMkMzLjQwNDUlMkMzLjIxNCUyQzMuMDkxJTJDNC4zNDUtLjI2MDUuOTQ0LTEuNzU1NSUyQzEuNTU0LTMuODA3JTJDMS41NTQtLjI4MyUyQzAtLjU3NDUtLjAxNTUtLjg3LS4wNDFhLjM4MDUuMzgwNSUyQzAlMkMwJTJDMC0uNDE1NzEuMzQxNjhsLS4wMDE3OS4wMzM4MnYuNzY2YS4zODYuMzg2JTJDMCUyQzAlMkMwJTJDLjM1My4zODM1Yy4zMTg1LjAyNS42MzEuMDM5NS45MzQ1LjAzOTUlMkMyLjcyNSUyQzAlMkM0LjgtLjk0NTUlMkM1LjI3Ni0yLjY3MUMxOC4zMzY1JTJDMTEuMTM5NSUyQzE2LjY5NCUyQzguNzQ0NSUyQzEzLjg3ODUlMkM2LjkzNTVaJTIyJTIwJTJGJTNFJTNDJTJGc3ZnJTNFXCI7XG5cbnZhciBmaWx0ZXJlZCA9IFwiZGF0YTppbWFnZS9zdmcreG1sLCUzQ3N2ZyUyMHhtbG5zJTNEJTIyaHR0cCUzQSUyRiUyRnd3dy53My5vcmclMkYyMDAwJTJGc3ZnJTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjB2aWV3Qm94JTNEJTIyMCUyMDAlMjAxOCUyMDE4JTIyJTIwd2lkdGglM0QlMjIxOCUyMiUzRSUyMCUyMCUzQ2RlZnMlM0UlMjAlMjAlMjAlMjAlM0NzdHlsZSUzRSUyMCUyMCUyMCUyMCUyMCUyMC5maWxsJTIwJTdCJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwZmlsbCUzQSUyMCUyMzZFNkU2RSUzQiUyMCUyMCUyMCUyMCUyMCUyMCU3RCUyMCUyMCUyMCUyMCUzQyUyRnN0eWxlJTNFJTIwJTIwJTNDJTJGZGVmcyUzRSUyMCUyMCUzQ3RpdGxlJTNFUyUyMFByb3BlcnRpZXMlMjAxOCUyME4lM0MlMkZ0aXRsZSUzRSUyMCUyMCUzQ3JlY3QlMjBpZCUzRCUyMkNhbnZhcyUyMiUyMGZpbGwlM0QlMjIlMjNmZjEzZGMlMjIlMjBvcGFjaXR5JTNEJTIyMCUyMiUyMHdpZHRoJTNEJTIyMTglMjIlMjBoZWlnaHQlM0QlMjIxOCUyMiUyMCUyRiUzRSUzQ3BhdGglMjBjbGFzcyUzRCUyMmZpbGwlMjIlMjBkJTNEJTIyTTE2Ljc1JTJDM0g3Ljk1YTIuNSUyQzIuNSUyQzAlMkMwJTJDMC00LjklMkMwSDEuMjVBLjI1LjI1JTJDMCUyQzAlMkMwJTJDMSUyQzMuMjV2LjVBLjI1LjI1JTJDMCUyQzAlMkMwJTJDMS4yNSUyQzRoMS44YTIuNSUyQzIuNSUyQzAlMkMwJTJDMCUyQzQuOSUyQzBoOC44QS4yNS4yNSUyQzAlMkMwJTJDMCUyQzE3JTJDMy43NXYtLjVBLjI1LjI1JTJDMCUyQzAlMkMwJTJDMTYuNzUlMkMzWk01LjUlMkM1QTEuNSUyQzEuNSUyQzAlMkMxJTJDMSUyQzclMkMzLjUlMkMxLjUlMkMxLjUlMkMwJTJDMCUyQzElMkM1LjUlMkM1WiUyMiUyMCUyRiUzRSUyMCUyMCUzQ3BhdGglMjBjbGFzcyUzRCUyMmZpbGwlMjIlMjBkJTNEJTIyTTE2Ljc1JTJDMTNIOS45NWEyLjUlMkMyLjUlMkMwJTJDMCUyQzAtNC45JTJDMEgxLjI1YS4yNS4yNSUyQzAlMkMwJTJDMC0uMjUuMjV2LjVhLjI1LjI1JTJDMCUyQzAlMkMwJTJDLjI1LjI1aDMuOGEyLjUlMkMyLjUlMkMwJTJDMCUyQzAlMkM0LjklMkMwaDYuOGEuMjUuMjUlMkMwJTJDMCUyQzAlMkMuMjUtLjI1di0uNUEuMjUuMjUlMkMwJTJDMCUyQzAlMkMxNi43NSUyQzEzWk03LjUlMkMxNUExLjUlMkMxLjUlMkMwJTJDMSUyQzElMkM5JTJDMTMuNSUyQzEuNSUyQzEuNSUyQzAlMkMwJTJDMSUyQzcuNSUyQzE1WiUyMiUyMCUyRiUzRSUyMCUyMCUzQ3BhdGglMjBjbGFzcyUzRCUyMmZpbGwlMjIlMjBkJTNEJTIyTTElMkM4LjI1di41QS4yNS4yNSUyQzAlMkMwJTJDMCUyQzEuMjUlMkM5aDguOGEyLjUlMkMyLjUlMkMwJTJDMCUyQzAlMkM0LjklMkMwaDEuOEEuMjUuMjUlMkMwJTJDMCUyQzAlMkMxNyUyQzguNzV2LS41QS4yNS4yNSUyQzAlMkMwJTJDMCUyQzE2Ljc1JTJDOGgtMS44YTIuNSUyQzIuNSUyQzAlMkMwJTJDMC00LjklMkMwSDEuMjVBLjI1LjI1JTJDMCUyQzAlMkMwJTJDMSUyQzguMjVaTTExJTJDOC41QTEuNSUyQzEuNSUyQzAlMkMxJTJDMSUyQzEyLjUlMkMxMCUyQzEuNSUyQzEuNSUyQzAlMkMwJTJDMSUyQzExJTJDOC41WiUyMiUyMCUyRiUzRSUzQyUyRnN2ZyUzRVwiO1xuXG52YXIgcmVzaXplZCA9IFwiZGF0YTppbWFnZS9zdmcreG1sLCUzQ3N2ZyUyMHhtbG5zJTNEJTIyaHR0cCUzQSUyRiUyRnd3dy53My5vcmclMkYyMDAwJTJGc3ZnJTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjB2aWV3Qm94JTNEJTIyMCUyMDAlMjAxOCUyMDE4JTIyJTIwd2lkdGglM0QlMjIxOCUyMiUzRSUyMCUyMCUzQ2RlZnMlM0UlMjAlMjAlMjAlMjAlM0NzdHlsZSUzRSUyMCUyMCUyMCUyMCUyMCUyMC5maWxsJTIwJTdCJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwZmlsbCUzQSUyMCUyMzZFNkU2RSUzQiUyMCUyMCUyMCUyMCUyMCUyMCU3RCUyMCUyMCUyMCUyMCUzQyUyRnN0eWxlJTNFJTIwJTIwJTNDJTJGZGVmcyUzRSUyMCUyMCUzQ3RpdGxlJTNFUyUyMFJlc2l6ZSUyMDE4JTIwTiUzQyUyRnRpdGxlJTNFJTIwJTIwJTNDcmVjdCUyMGlkJTNEJTIyQ2FudmFzJTIyJTIwZmlsbCUzRCUyMiUyM2ZmMTNkYyUyMiUyMG9wYWNpdHklM0QlMjIwJTIyJTIwd2lkdGglM0QlMjIxOCUyMiUyMGhlaWdodCUzRCUyMjE4JTIyJTIwJTJGJTNFJTNDcGF0aCUyMGNsYXNzJTNEJTIyZmlsbCUyMiUyMGQlM0QlMjJNMTUuNSUyQzJIMi41YS41LjUlMkMwJTJDMCUyQzAtLjUuNXYxM2EuNS41JTJDMCUyQzAlMkMwJTJDLjUuNWgxM2EuNS41JTJDMCUyQzAlMkMwJTJDLjUtLjVWMi41QS41LjUlMkMwJTJDMCUyQzAlMkMxNS41JTJDMlpNOSUyQzEwLjQxNGwyLjIwNy0yLjIwNyUyQzEuMzY2JTJDMS4zNjZBLjI1LjI1JTJDMCUyQzAlMkMwJTJDMTMlMkM5LjM5NjVWNUg4LjYwMzVhLjI1LjI1JTJDMCUyQzAlMkMwLS4xNzcuNDI3bDEuMzY2JTJDMS4zNjZMNy41ODYlMkM5SDRWNEgxNFYxNEg5WiUyMiUyMCUyRiUzRSUzQyUyRnN2ZyUzRVwiO1xuXG52YXIgb3JpZW50YXRpb24gPSBcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0NzdmclMjB4bWxucyUzRCUyMmh0dHAlM0ElMkYlMkZ3d3cudzMub3JnJTJGMjAwMCUyRnN2ZyUyMiUyMGhlaWdodCUzRCUyMjE4JTIyJTIwdmlld0JveCUzRCUyMjAlMjAwJTIwMTglMjAxOCUyMiUyMHdpZHRoJTNEJTIyMTglMjIlM0UlMjAlMjAlM0NkZWZzJTNFJTIwJTIwJTIwJTIwJTNDc3R5bGUlM0UlMjAlMjAlMjAlMjAlMjAlMjAuZmlsbCUyMCU3QiUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGZpbGwlM0ElMjAlMjM2RTZFNkUlM0IlMjAlMjAlMjAlMjAlMjAlMjAlN0QlMjAlMjAlMjAlMjAlM0MlMkZzdHlsZSUzRSUyMCUyMCUzQyUyRmRlZnMlM0UlMjAlMjAlM0N0aXRsZSUzRVMlMjBSb3RhdGVMZWZ0T3V0bGluZSUyMDE4JTIwTiUzQyUyRnRpdGxlJTNFJTIwJTIwJTNDcmVjdCUyMGlkJTNEJTIyQ2FudmFzJTIyJTIwZmlsbCUzRCUyMiUyM2ZmMTNkYyUyMiUyMG9wYWNpdHklM0QlMjIwJTIyJTIwd2lkdGglM0QlMjIxOCUyMiUyMGhlaWdodCUzRCUyMjE4JTIyJTIwJTJGJTNFJTNDcGF0aCUyMGNsYXNzJTNEJTIyZmlsbCUyMiUyMGQlM0QlMjJNMTYuNSUyQzVINS41YS41LjUlMkMwJTJDMCUyQzAtLjUuNXYxMWEuNS41JTJDMCUyQzAlMkMwJTJDLjUuNWgxMWEuNS41JTJDMCUyQzAlMkMwJTJDLjUtLjVWNS41QS41LjUlMkMwJTJDMCUyQzAlMkMxNi41JTJDNVpNMTYlMkMxNkg2VjZIMTZaJTIyJTIwJTJGJTNFJTIwJTIwJTNDcGF0aCUyMGNsYXNzJTNEJTIyZmlsbCUyMiUyMGQlM0QlMjJNMy43NSUyQzcuNWgtMVY2YTMlMkMzJTJDMCUyQzAlMkMxJTJDMy0zaDFhLjUuNSUyQzAlMkMwJTJDMCUyQy41LS41VjJhLjUuNSUyQzAlMkMwJTJDMC0uNS0uNWgtMUE0LjUlMkM0LjUlMkMwJTJDMCUyQzAlMkMxLjI1JTJDNlY3LjVoLTFBLjI1LjI1JTJDMCUyQzAlMkMwJTJDMCUyQzcuNzVhLjI0NS4yNDUlMkMwJTJDMCUyQzAlMkMuMDczNS4xNzVMMS44NDIlMkM5Ljk0MTVhLjI1LjI1JTJDMCUyQzAlMkMwJTJDLjMxNiUyQzBMMy45MjY1JTJDNy45MjVBLjI0NS4yNDUlMkMwJTJDMCUyQzAlMkM0JTJDNy43NS4yNS4yNSUyQzAlMkMwJTJDMCUyQzMuNzUlMkM3LjVaJTIyJTIwJTJGJTNFJTNDJTJGc3ZnJTNFXCI7XG5cbnZhciBwbGFjZWQgPSBcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0NzdmclMjB4bWxucyUzRCUyMmh0dHAlM0ElMkYlMkZ3d3cudzMub3JnJTJGMjAwMCUyRnN2ZyUyMiUyMGhlaWdodCUzRCUyMjE4JTIyJTIwdmlld0JveCUzRCUyMjAlMjAwJTIwMTglMjAxOCUyMiUyMHdpZHRoJTNEJTIyMTglMjIlM0UlMjAlMjAlM0NkZWZzJTNFJTIwJTIwJTIwJTIwJTNDc3R5bGUlM0UlMjAlMjAlMjAlMjAlMjAlMjAuZmlsbCUyMCU3QiUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGZpbGwlM0ElMjAlMjM2RTZFNkUlM0IlMjAlMjAlMjAlMjAlMjAlMjAlN0QlMjAlMjAlMjAlMjAlM0MlMkZzdHlsZSUzRSUyMCUyMCUzQyUyRmRlZnMlM0UlMjAlMjAlM0N0aXRsZSUzRVMlMjBTYXZlVG9MaWdodCUyMDE4JTIwTiUzQyUyRnRpdGxlJTNFJTIwJTIwJTNDcmVjdCUyMGlkJTNEJTIyQ2FudmFzJTIyJTIwZmlsbCUzRCUyMiUyM2ZmMTNkYyUyMiUyMG9wYWNpdHklM0QlMjIwJTIyJTIwd2lkdGglM0QlMjIxOCUyMiUyMGhlaWdodCUzRCUyMjE4JTIyJTIwJTJGJTNFJTNDcGF0aCUyMGNsYXNzJTNEJTIyZmlsbCUyMiUyMGQlM0QlMjJNMTYuNSUyQzRIMTNWNWgzVjE1SDJWNUg1VjRIMS41YS41LjUlMkMwJTJDMCUyQzAtLjUuNXYxMWEuNS41JTJDMCUyQzAlMkMwJTJDLjUuNWgxNWEuNS41JTJDMCUyQzAlMkMwJTJDLjUtLjVWNC41QS41LjUlMkMwJTJDMCUyQzAlMkMxNi41JTJDNFolMjIlMjAlMkYlM0UlMjAlMjAlM0NwYXRoJTIwY2xhc3MlM0QlMjJmaWxsJTIyJTIwZCUzRCUyMk0xMi4zOTY1JTJDN0gxMFYuMjVBLjI1LjI1JTJDMCUyQzAlMkMwJTJDOS43NSUyQzBIOC4yNUEuMjUuMjUlMkMwJTJDMCUyQzAlMkM4JTJDLjI1VjdINS42MDM1YS4yNS4yNSUyQzAlMkMwJTJDMC0uMTc2NS40MjdMOSUyQzExbDMuNTczLTMuNTczQS4yNS4yNSUyQzAlMkMwJTJDMCUyQzEyLjM5NjUlMkM3WiUyMiUyMCUyRiUzRSUzQyUyRnN2ZyUzRVwiO1xuXG52YXIgdGV4dCA9IFwiZGF0YTppbWFnZS9zdmcreG1sLCUzQ3N2ZyUyMHhtbG5zJTNEJTIyaHR0cCUzQSUyRiUyRnd3dy53My5vcmclMkYyMDAwJTJGc3ZnJTIyJTIwaGVpZ2h0JTNEJTIyMTglMjIlMjB2aWV3Qm94JTNEJTIyMCUyMDAlMjAxOCUyMDE4JTIyJTIwd2lkdGglM0QlMjIxOCUyMiUzRSUyMCUyMCUzQ2RlZnMlM0UlMjAlMjAlMjAlMjAlM0NzdHlsZSUzRSUyMCUyMCUyMCUyMCUyMCUyMC5hJTIwJTdCJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwZmlsbCUzQSUyMCUyMzZFNkU2RSUzQiUyMCUyMCUyMCUyMCUyMCUyMCU3RCUyMCUyMCUyMCUyMCUzQyUyRnN0eWxlJTNFJTIwJTIwJTNDJTJGZGVmcyUzRSUyMCUyMCUzQ3RpdGxlJTNFUyUyMFRleHQlMjAxOCUyME4lM0MlMkZ0aXRsZSUzRSUyMCUyMCUzQ3JlY3QlMjBpZCUzRCUyMkNhbnZhcyUyMiUyMGZpbGwlM0QlMjIlMjNmZjEzZGMlMjIlMjBvcGFjaXR5JTNEJTIyMCUyMiUyMHdpZHRoJTNEJTIyMTglMjIlMjBoZWlnaHQlM0QlMjIxOCUyMiUyMCUyRiUzRSUzQ3BhdGglMjBjbGFzcyUzRCUyMmElMjIlMjBkJTNEJTIyTTIuNSUyQzJhLjUuNSUyQzAlMkMwJTJDMC0uNS41djNhLjUuNSUyQzAlMkMwJTJDMCUyQy41LjVoMUEuNS41JTJDMCUyQzAlMkMwJTJDNCUyQzUuNVY0SDhWMTRINi41YS41LjUlMkMwJTJDMCUyQzAtLjUuNXYxYS41LjUlMkMwJTJDMCUyQzAlMkMuNS41aDVhLjUuNSUyQzAlMkMwJTJDMCUyQy41LS41di0xYS41LjUlMkMwJTJDMCUyQzAtLjUtLjVIMTBWNGg0VjUuNWEuNS41JTJDMCUyQzAlMkMwJTJDLjUuNWgxYS41LjUlMkMwJTJDMCUyQzAlMkMuNS0uNXYtM2EuNS41JTJDMCUyQzAlMkMwLS41LS41WiUyMiUyMCUyRiUzRSUzQyUyRnN2ZyUzRVwiO1xuXG52YXIgYW5pbWF0aW9uVmlkZW8gPSBcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0NzdmclMjB4bWxucyUzRCUyMmh0dHAlM0ElMkYlMkZ3d3cudzMub3JnJTJGMjAwMCUyRnN2ZyUyMiUyMGhlaWdodCUzRCUyMjE4JTIyJTIwdmlld0JveCUzRCUyMjAlMjAwJTIwMTglMjAxOCUyMiUyMHdpZHRoJTNEJTIyMTglMjIlM0UlMjAlMjAlM0NkZWZzJTNFJTIwJTIwJTIwJTIwJTNDc3R5bGUlM0UlMjAlMjAlMjAlMjAlMjAlMjAuYSUyMCU3QiUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGZpbGwlM0ElMjAlMjM2RTZFNkUlM0IlMjAlMjAlMjAlMjAlMjAlMjAlN0QlMjAlMjAlMjAlMjAlM0MlMkZzdHlsZSUzRSUyMCUyMCUzQyUyRmRlZnMlM0UlMjAlMjAlM0N0aXRsZSUzRVMlMjBWaWRlb091dGxpbmUlMjAxOCUyME4lM0MlMkZ0aXRsZSUzRSUyMCUyMCUzQ3JlY3QlMjBpZCUzRCUyMkNhbnZhcyUyMiUyMGZpbGwlM0QlMjIlMjNmZjEzZGMlMjIlMjBvcGFjaXR5JTNEJTIyMCUyMiUyMHdpZHRoJTNEJTIyMTglMjIlMjBoZWlnaHQlM0QlMjIxOCUyMiUyMCUyRiUzRSUzQ3BhdGglMjBjbGFzcyUzRCUyMmElMjIlMjBkJTNEJTIyTTE1LjUlMkMySDIuNWEuNS41JTJDMCUyQzAlMkMwLS41LjV2MTNhLjUuNSUyQzAlMkMwJTJDMCUyQy41LjVoMTNhLjUuNSUyQzAlMkMwJTJDMCUyQy41LS41VjIuNUEuNS41JTJDMCUyQzAlMkMwJTJDMTUuNSUyQzJaTTUlMkMxNC43NWEuMjUuMjUlMkMwJTJDMCUyQzEtLjI1LjI1SDMuMjVBLjI1LjI1JTJDMCUyQzAlMkMxJTJDMyUyQzE0Ljc1di0xLjVBLjI1LjI1JTJDMCUyQzAlMkMxJTJDMy4yNSUyQzEzaDEuNWEuMjUuMjUlMkMwJTJDMCUyQzElMkMuMjUuMjVabTAtMy4zNTNhLjI1LjI1JTJDMCUyQzAlMkMxLS4yNS4yNUgzLjI1YS4yNS4yNSUyQzAlMkMwJTJDMS0uMjUtLjI1di0xLjVhLjI1LjI1JTJDMCUyQzAlMkMxJTJDLjI1LS4yNWgxLjVhLjI1LjI1JTJDMCUyQzAlMkMxJTJDLjI1LjI1Wk01JTJDOC4xMDNhLjI1LjI1JTJDMCUyQzAlMkMxLS4yNS4yNUgzLjI1QS4yNS4yNSUyQzAlMkMwJTJDMSUyQzMlMkM4LjEwM3YtMS41YS4yNS4yNSUyQzAlMkMwJTJDMSUyQy4yNS0uMjVoMS41YS4yNS4yNSUyQzAlMkMwJTJDMSUyQy4yNS4yNVpNNSUyQzQuNzVBLjI1LjI1JTJDMCUyQzAlMkMxJTJDNC43NSUyQzVIMy4yNUEuMjUuMjUlMkMwJTJDMCUyQzElMkMzJTJDNC43NVYzLjI1QS4yNS4yNSUyQzAlMkMwJTJDMSUyQzMuMjUlMkMzaDEuNUEuMjUuMjUlMkMwJTJDMCUyQzElMkM1JTJDMy4yNVpNMTIlMkMxNUg2VjEwaDZabTAtN0g2VjNoNlptMyUyQzYuNzVhLjI1LjI1JTJDMCUyQzAlMkMxLS4yNS4yNWgtMS41YS4yNS4yNSUyQzAlMkMwJTJDMS0uMjUtLjI1di0xLjVhLjI1LjI1JTJDMCUyQzAlMkMxJTJDLjI1LS4yNWgxLjVhLjI1LjI1JTJDMCUyQzAlMkMxJTJDLjI1LjI1Wm0wLTMuMzUzYS4yNS4yNSUyQzAlMkMwJTJDMS0uMjUuMjVoLTEuNWEuMjUuMjUlMkMwJTJDMCUyQzEtLjI1LS4yNXYtMS41YS4yNS4yNSUyQzAlMkMwJTJDMSUyQy4yNS0uMjVoMS41YS4yNS4yNSUyQzAlMkMwJTJDMSUyQy4yNS4yNVptMC0zLjI5NGEuMjUuMjUlMkMwJTJDMCUyQzEtLjI1LjI1aC0xLjVhLjI1LjI1JTJDMCUyQzAlMkMxLS4yNS0uMjV2LTEuNWEuMjUuMjUlMkMwJTJDMCUyQzElMkMuMjUtLjI1aDEuNWEuMjUuMjUlMkMwJTJDMCUyQzElMkMuMjUuMjVaTTE1JTJDNC43NWEuMjUuMjUlMkMwJTJDMCUyQzEtLjI1LjI1aC0xLjVBLjI1LjI1JTJDMCUyQzAlMkMxJTJDMTMlMkM0Ljc1VjMuMjVBLjI1LjI1JTJDMCUyQzAlMkMxJTJDMTMuMjUlMkMzaDEuNWEuMjUuMjUlMkMwJTJDMCUyQzElMkMuMjUuMjVaJTIyJTIwJTJGJTNFJTNDJTJGc3ZnJTNFXCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMjMgQWRvYmVcbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTk9USUNFOiBBZG9iZSBwZXJtaXRzIHlvdSB0byB1c2UsIG1vZGlmeSwgYW5kIGRpc3RyaWJ1dGUgdGhpcyBmaWxlIGluXG4gKiBhY2NvcmRhbmNlIHdpdGggdGhlIHRlcm1zIG9mIHRoZSBBZG9iZSBsaWNlbnNlIGFncmVlbWVudCBhY2NvbXBhbnlpbmdcbiAqIGl0LlxuICovXG5jb25zdCBpY29ucyA9IHtcbiAgICAnYzJwYS5jb2xvcl9hZGp1c3RtZW50cyc6IGNvbG9yQWRqdXN0ZW1lbnRzLFxuICAgICdjMnBhLmNyZWF0ZWQnOiBjcmVhdGVkLFxuICAgICdjMnBhLmNyb3BwZWQnOiBjcm9wcGVkLFxuICAgICdjMnBhLmRyYXdpbmcnOiBkcmF3aW5nLFxuICAgICdjMnBhLmVkaXRlZCc6IGVkaXRlZCxcbiAgICAnYzJwYS5maWx0ZXJlZCc6IGZpbHRlcmVkLFxuICAgICdjMnBhLm9wZW5lZCc6IG9wZW5lZCxcbiAgICAnYzJwYS5vcmllbnRhdGlvbic6IG9yaWVudGF0aW9uLFxuICAgICdjMnBhLnBsYWNlZCc6IHBsYWNlZCxcbiAgICAnYzJwYS5yZXNpemVkJzogcmVzaXplZCxcbiAgICAnYzJwYS51bmtub3duJzogdW5rbm93bixcbiAgICAnY29tLmFkb2JlLjNkJzogdGhyZWVkLFxuICAgICdjb20uYWRvYmUuYW5pbWF0aW9uX3ZpZGVvJzogYW5pbWF0aW9uVmlkZW8sXG4gICAgJ2NvbS5hZG9iZS5jb21iaW5lZF9hc3NzZXRzJzogY29tYmluZWRBc3NldHMsXG4gICAgJ2NvbS5hZG9iZS50ZXh0JzogdGV4dCxcbn07XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMjIgQWRvYmVcbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTk9USUNFOiBBZG9iZSBwZXJtaXRzIHlvdSB0byB1c2UsIG1vZGlmeSwgYW5kIGRpc3RyaWJ1dGUgdGhpcyBmaWxlIGluXG4gKiBhY2NvcmRhbmNlIHdpdGggdGhlIHRlcm1zIG9mIHRoZSBBZG9iZSBsaWNlbnNlIGFncmVlbWVudCBhY2NvbXBhbnlpbmdcbiAqIGl0LlxuICovXG5jb25zdCBkYmcgPSBkZWJ1ZygnYzJwYTpzZWxlY3RvcjplZGl0c0FuZEFjdGl2aXR5Jyk7XG4vLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSBrZXlzIHRvIGNvbmZvcm0gdG8gQkNQIDQ3IHRhZ3NcbmNvbnN0IGJjcDQ3TWFwcGluZyA9IG1hcEtleXNfMShsb2NhbGVzLCAoXywga2V5KSA9PiBrZXkucmVwbGFjZSgnXycsICctJykpO1xuY29uc3QgREVGQVVMVF9MT0NBTEUgPSAnZW4tVVMnO1xuY29uc3QgVU5DQVRFR09SSVpFRF9JRCA9ICdVTkNBVEVHT1JJWkVEJztcbi8qKlxuICogR2V0cyBhIGxpc3Qgb2YgdHJhbnNsYXRpb25zIGZvciB0aGUgcmVxdWVzdGVkIGxvY2FsZS4gQW55IG1pc3NpbmcgdHJhbnNsYXRpb25zIGluIG90aGVyIGxvY2FsZXNcbiAqIHdpbGwgYmUgZmlsbGVkIGluIHdpdGggZW50cmllcyBmcm9tIHRoZSBERUZBVUxUX0xPQ0FMRS5cbiAqXG4gKiBAcGFyYW0gbG9jYWxlIC0gQkNQLTQ3IGxvY2FsZSBjb2RlIChlLmcuIGBlbi1VU2AsIGBmci1GUmApIHRvIHJlcXVlc3QgbG9jYWxpemVkIHN0cmluZ3MsIGlmIGF2YWlsYWJsZVxuICovXG5mdW5jdGlvbiBnZXRUcmFuc2xhdGlvbnNGb3JMb2NhbGUobG9jYWxlID0gREVGQVVMVF9MT0NBTEUpIHtcbiAgICBjb25zdCBkZWZhdWx0U2V0ID0gKGJjcDQ3TWFwcGluZ1tERUZBVUxUX0xPQ0FMRV0/LnNlbGVjdG9yc1xuICAgICAgICA/LmVkaXRzQW5kQWN0aXZpdHkgPz8ge30pO1xuICAgIGNvbnN0IHJlcXVlc3RlZFNldCA9IChiY3A0N01hcHBpbmdbbG9jYWxlXT8uc2VsZWN0b3JzPy5lZGl0c0FuZEFjdGl2aXR5ID8/XG4gICAgICAgIHt9KTtcbiAgICBpZiAobG9jYWxlID09PSBERUZBVUxUX0xPQ0FMRSkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFNldDtcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlXzEoe30sIGRlZmF1bHRTZXQsIHJlcXVlc3RlZFNldCk7XG59XG4vKipcbiAqIEdldHMgYSBsaXN0IG9mIGNhdGVnb3JpemVkIGFjdGlvbnMsIGRlcml2ZWQgZnJvbSB0aGUgcHJvdmlkZWQgbWFuaWZlc3QncyBgYzJwYS5hY3Rpb25gIGFzc2VydGlvblxuICogYW5kIGEgZGljdGlvbmFyeSBhc3NlcnRpb24sIGlmIGF2YWlsYWJsZS4gSWYgYSBkaWN0aW9uYXJ5IGlzIGluY3VkZWQsIHRoaXMgZnVuY3Rpb24gd2lsbCBpbml0aWF0ZVxuICogYW4gSFRUUCByZXF1ZXN0IHRvIGZldGNoIHRoZSBkaWN0aW9uYXJ5IGRhdGEuXG4gKlxuICogQHBhcmFtIG1hbmlmZXN0IC0gTWFuaWZlc3QgdG8gZGVyaXZlIGRhdGEgZnJvbVxuICogQHBhcmFtIGxvY2FsZSAtIEJDUC00NyBsb2NhbGUgY29kZSAoZS5nLiBgZW4tVVNgLCBgZnItRlJgKSB0byByZXF1ZXN0IGxvY2FsaXplZCBzdHJpbmdzLCBpZiBhdmFpbGFibGVcbiAqIEBwYXJhbSBpY29uVmFyaWFudCAtIFJlcXVlc3RzIGljb24gdmFyaWFudCAoZS5nLiBgbGlnaHRgLCBgZGFya2ApLCBpZiBhdmFpbGFibGVcbiAqIEByZXR1cm5zIExpc3Qgb2YgdHJhbnNsYXRlZCBhY3Rpb24gY2F0ZWdvcmllc1xuICovXG5hc3luYyBmdW5jdGlvbiBzZWxlY3RFZGl0c0FuZEFjdGl2aXR5KG1hbmlmZXN0LCBsb2NhbGUgPSBERUZBVUxUX0xPQ0FMRSwgaWNvblZhcmlhbnQgPSAnZGFyaycpIHtcbiAgICBjb25zdCBkaWN0aW9uYXJ5QXNzZXJ0aW9uID0gbWFuaWZlc3QuYXNzZXJ0aW9ucy5nZXQoJ2NvbS5hZG9iZS5kaWN0aW9uYXJ5JylbMF0gPz9cbiAgICAgICAgbWFuaWZlc3QuYXNzZXJ0aW9ucy5nZXQoJ2Fkb2JlLmRpY3Rpb25hcnknKVswXTtcbiAgICBjb25zdCBbYWN0aW9uQXNzZXJ0aW9uXSA9IG1hbmlmZXN0LmFzc2VydGlvbnMuZ2V0KCdjMnBhLmFjdGlvbnMnKTtcbiAgICBpZiAoIWFjdGlvbkFzc2VydGlvbikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKGRpY3Rpb25hcnlBc3NlcnRpb24pIHtcbiAgICAgICAgcmV0dXJuIGdldFBob3Rvc2hvcENhdGVnb3JpemVkQWN0aW9ucyhhY3Rpb25Bc3NlcnRpb24uZGF0YS5hY3Rpb25zLCBkaWN0aW9uYXJ5QXNzZXJ0aW9uLmRhdGEudXJsLCBsb2NhbGUsIGljb25WYXJpYW50KTtcbiAgICB9XG4gICAgcmV0dXJuIGdldEMycGFDYXRlZ29yaXplZEFjdGlvbnMoYWN0aW9uQXNzZXJ0aW9uLCBsb2NhbGUpO1xufVxuYXN5bmMgZnVuY3Rpb24gZ2V0UGhvdG9zaG9wQ2F0ZWdvcml6ZWRBY3Rpb25zKGFjdGlvbnMsIGRpY3Rpb25hcnlVcmwsIGxvY2FsZSA9IERFRkFVTFRfTE9DQUxFLCBpY29uVmFyaWFudCA9ICdkYXJrJykge1xuICAgIGNvbnN0IGRpY3Rpb25hcnkgPSBhd2FpdCBEb3dubG9hZGVyLmNhY2hlZEdldEpzb24oZGljdGlvbmFyeVVybCk7XG4gICAgY29uc3QgY2F0ZWdvcmllcyA9IHByb2Nlc3NDYXRlZ29yaWVzKGFjdGlvbnMubWFwKChhY3Rpb24pID0+IHRyYW5zbGF0ZUFjdGlvbk5hbWUoZGljdGlvbmFyeSwgXG4gICAgLy8gVE9ETzogVGhpcyBzaG91bGQgYmUgcmVzb2x2ZWQgb25jZSB3ZSByZWNvbmNpbGUgZGljdGlvbmFyeSBkZWZpbml0aW9uc1xuICAgIGFjdGlvbi5wYXJhbWV0ZXJzPy5uYW1lID8/IGFjdGlvbi5hY3Rpb24sIGxvY2FsZSwgaWNvblZhcmlhbnQpKSk7XG4gICAgcmV0dXJuIGNhdGVnb3JpZXM7XG59XG4vKipcbiAqIEdldHMgYSBsaXN0IG9mIGFjdGlvbiBjYXRlZ29yaWVzLCBkZXJpdmVkIGZyb20gdGhlIHByb3ZpZGVkIG1hbmlmZXN0J3MgYGMycGEuYWN0aW9uYCBhc3NlcnRpb24uXG4gKiBUaGlzIHdpbGwgYWxzbyBoYW5kbGUgdHJhbnNsYXRpb25zIGJ5IHByb3ZpZGluZyBhIGxvY2FsZS4gVGhpcyB3b3JrcyBmb3Igc3RhbmRhcmQgQzJQQSBhY3Rpb24gYXNzZXJ0aW9uXG4gKiBkYXRhIG9ubHkuXG4gKlxuICogQHBhcmFtIGFjdGlvbnNBc3NlcnRpb24gLSBBY3Rpb24gYXNzZXJ0aW9uIGRhdGFcbiAqIEBwYXJhbSBsb2NhbGUgLSBCQ1AtNDcgbG9jYWxlIGNvZGUgKGUuZy4gYGVuLVVTYCwgYGZyLUZSYCkgdG8gcmVxdWVzdCBsb2NhbGl6ZWQgc3RyaW5ncywgaWYgYXZhaWxhYmxlXG4gKiBAcmV0dXJucyBMaXN0IG9mIHRyYW5zbGF0ZWQgYWN0aW9uIGNhdGVnb3JpZXNcbiAqL1xuZnVuY3Rpb24gZ2V0QzJwYUNhdGVnb3JpemVkQWN0aW9ucyhhY3Rpb25zQXNzZXJ0aW9uLCBsb2NhbGUgPSBERUZBVUxUX0xPQ0FMRSkge1xuICAgIGNvbnN0IGFjdGlvbnMgPSBhY3Rpb25zQXNzZXJ0aW9uLmRhdGEuYWN0aW9ucztcbiAgICBjb25zdCB0cmFuc2xhdGlvbnMgPSBnZXRUcmFuc2xhdGlvbnNGb3JMb2NhbGUobG9jYWxlKTtcbiAgICBjb25zdCBvdmVycmlkZXMgPSAoYWN0aW9uc0Fzc2VydGlvbi5kYXRhLm1ldGFkYXRhPy5sb2NhbGl6YXRpb25zID8/XG4gICAgICAgIFtdKTtcbiAgICBjb25zdCBvdmVycmlkZU9iaiA9IHsgYWN0aW9uczogW10gfTtcbiAgICAvLyBUaGUgc3BlYyBoYXMgYW4gYXJyYXkgb2Ygb2JqZWN0cywgYW5kIGVhY2ggb2JqZWN0IGNhbiBoYXZlIG11bHRpcGxlIGVudHJpZXNcbiAgICAvLyBvZiBwYXRoIGtleXMgdG8gb3ZlcnJpZGVzLCB3aGljaCBpcyB3aHkgd2UgaGF2ZSB0byBoYXZlIGEgbmVzdGVkIGVhY2guXG4gICAgZWFjaChvdmVycmlkZXMsIChvdmVycmlkZSkgPT4ge1xuICAgICAgICBlYWNoKG92ZXJyaWRlLCAodHJhbnNsYXRpb25NYXAsIHBhdGgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbCA9IHRyYW5zbGF0aW9uTWFwW2xvY2FsZV07XG4gICAgICAgICAgICBpZiAodmFsKSB7XG4gICAgICAgICAgICAgICAgc2V0XzEob3ZlcnJpZGVPYmosIHBhdGgsIHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGNvbnN0IHRyYW5zbGF0ZWRBY3Rpb25zID0gYWN0aW9ucy5tYXAoKGFjdGlvbiwgaWR4KSA9PiB7XG4gICAgICAgIGNvbnN0IGFjdGlvbk92ZXJyaWRlcyA9IG92ZXJyaWRlT2JqLmFjdGlvbnNbaWR4XSA/PyB7fTtcbiAgICAgICAgY29uc3QgYWN0aW9uVHJhbnNsYXRpb25zID0gdHJhbnNsYXRpb25zW2FjdGlvbi5hY3Rpb25dO1xuICAgICAgICBjb25zdCBpY29uSWQgPSBhY3Rpb24uYWN0aW9uO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLy8gSW5jbHVkZSBvcmlnaW5hbCBJRFxuICAgICAgICAgICAgaWQ6IGFjdGlvbi5hY3Rpb24sXG4gICAgICAgICAgICAvLyBHZXQgaWNvbiBmcm9tIHBhcmFtZXRlcnMgaWYgdGhleSBleGlzdFxuICAgICAgICAgICAgaWNvbjogYWN0aW9uLnBhcmFtZXRlcnM/LlsnY29tLmFkb2JlLmljb24nXSA/P1xuICAgICAgICAgICAgICAgIGljb25zW2ljb25JZF0sXG4gICAgICAgICAgICAvLyBVc2Ugb3ZlcnJpZGUgaWYgYXZhaWxhYmxlLCBpZiBub3QsIHRoZW4gZmFsbCBiYWNrIHRvIHRyYW5zbGF0aW9uXG4gICAgICAgICAgICBsYWJlbDogYWN0aW9uT3ZlcnJpZGVzLmFjdGlvbiA/PyBhY3Rpb25UcmFuc2xhdGlvbnMubGFiZWwsXG4gICAgICAgICAgICAvLyBVc2Ugb3ZlcnJpZGUgaWYgYXZhaWxhYmxlLCBpZiBub3QsIHRoZW4gZmFsbCBiYWNrIHRvIHRyYW5zbGF0aW9uXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogYWN0aW9uT3ZlcnJpZGVzPy5wYXJhbWV0ZXJzPy5kZXNjcmlwdGlvbiA/P1xuICAgICAgICAgICAgICAgIGFjdGlvblRyYW5zbGF0aW9ucy5kZXNjcmlwdGlvbixcbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gcHJvY2Vzc0NhdGVnb3JpZXModHJhbnNsYXRlZEFjdGlvbnMpO1xufVxuLyoqXG4gKiBQaXBlbGluZSB0byBjb252ZXJ0IGNhdGVnb3JpZXMgZnJvbSB0aGUgZGljdGlvbmFyeSBpbnRvIGEgc3RydWN0dXJlIHN1aXRhYmxlIGZvciB0aGVcbiAqIGVkaXRzIGFuZCBhY3Rpdml0eSB3ZWIgY29tcG9uZW50LiBUaGlzIGFsc28gbWFrZXMgc3VyZSB0aGUgY2F0ZWdvcmllcyBhcmUgdW5pcXVlIGFuZCBzb3J0ZWQuXG4gKi9cbmNvbnN0IHByb2Nlc3NDYXRlZ29yaWVzID0gZmxvdyhjb21wYWN0LCB1bmlxQnkoKGNhdGVnb3J5KSA9PiBjYXRlZ29yeS5pZCksIHNvcnRCeSgoY2F0ZWdvcnkpID0+IGNhdGVnb3J5LmxhYmVsKSk7XG4vKipcbiAqIFVzZXMgdGhlIGRpY3Rpb25hcnkgdG8gdHJhbnNsYXRlIGFuIGFjdGlvbiBuYW1lIGludG8gY2F0ZWdvcnkgaW5mb3JtYXRpb25cbiAqL1xuZnVuY3Rpb24gdHJhbnNsYXRlQWN0aW9uTmFtZShkaWN0aW9uYXJ5LCBhY3Rpb25JZCwgbG9jYWxlLCBpY29uVmFyaWFudCkge1xuICAgIGNvbnN0IGNhdGVnb3J5SWQgPSBkaWN0aW9uYXJ5LmFjdGlvbnNbYWN0aW9uSWRdPy5jYXRlZ29yeSA/PyBVTkNBVEVHT1JJWkVEX0lEO1xuICAgIGlmIChjYXRlZ29yeUlkID09PSBVTkNBVEVHT1JJWkVEX0lEKSB7XG4gICAgICAgIGRiZygnQ291bGQgbm90IGZpbmQgY2F0ZWdvcnkgZm9yIGFjdGlvbklkJywgYWN0aW9uSWQpO1xuICAgIH1cbiAgICBjb25zdCBjYXRlZ29yeSA9IGRpY3Rpb25hcnkuY2F0ZWdvcmllc1tjYXRlZ29yeUlkXTtcbiAgICBpZiAoY2F0ZWdvcnkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkOiBjYXRlZ29yeUlkLFxuICAgICAgICAgICAgaWNvbjogY2F0ZWdvcnkuaWNvbj8ucmVwbGFjZSgne3ZhcmlhbnR9JywgaWNvblZhcmlhbnQpID8/IG51bGwsXG4gICAgICAgICAgICBsYWJlbDogY2F0ZWdvcnkubGFiZWxzW2xvY2FsZV0sXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogY2F0ZWdvcnkuZGVzY3JpcHRpb25zW2xvY2FsZV0sXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIENvcHlyaWdodCAyMDIzIEFkb2JlXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIE5PVElDRTogQWRvYmUgcGVybWl0cyB5b3UgdG8gdXNlLCBtb2RpZnksIGFuZCBkaXN0cmlidXRlIHRoaXMgZmlsZSBpblxuICogYWNjb3JkYW5jZSB3aXRoIHRoZSB0ZXJtcyBvZiB0aGUgQWRvYmUgbGljZW5zZSBhZ3JlZW1lbnQgYWNjb21wYW55aW5nXG4gKiBpdC5cbiAqL1xuZnVuY3Rpb24gc2VsZWN0Rm9ybWF0dGVkR2VuZXJhdG9yKG1hbmlmZXN0KSB7XG4gICAgY29uc3QgdmFsdWUgPSBtYW5pZmVzdC5jbGFpbUdlbmVyYXRvcjtcbiAgICAvLyBXZSBhcmUgc3RyaXBwaW5nIHBhcmVudGhlc2lzIHNvIHRoYXQgYW55IHZlcnNpb24gbWF0Y2hlcyBpbiB0aGVyZSBkb24ndCBpbmZsdWVuY2UgdGhlIHRlc3RcbiAgICBjb25zdCB3aXRob3V0UGFyZW5zID0gdmFsdWUucmVwbGFjZSgvXFwoW14pXSpcXCkvZywgJycpO1xuICAgIGlmICgvXFxzK1xcZCtcXC5cXGQoXFwuXFxkKSpcXHMrLy50ZXN0KHdpdGhvdXRQYXJlbnMpKSB7XG4gICAgICAgIC8vIE9sZC1zdHlsZSAoWE1QIEFnZW50KSBzdHJpbmcgKG1hdGNoIHNwYWNlICsgdmVyc2lvbilcbiAgICAgICAgcmV0dXJuIHZhbHVlLnNwbGl0KCcoJylbMF0/LnRyaW0oKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIFVzZXItQWdlbnQgc3RyaW5nXG4gICAgICAgIC8vIFNwbGl0IGJ5IHNwYWNlICh0aGUgUkZDIHVzZXMgdGhlIHNwYWNlIGFzIGEgc2VwYXJhdG9yKVxuICAgICAgICBjb25zdCBmaXJzdEl0ZW0gPSB3aXRob3V0UGFyZW5zLnNwbGl0KC9cXHMrLyk/LlswXSA/PyAnJztcbiAgICAgICAgLy8gUGFyc2UgcHJvZHVjdCBuYW1lIGZyb20gdmVyc2lvblxuICAgICAgICAvLyBBZG9iZV9QaG90b3Nob3AvMjMuMy4xIC0+IFtBZG9iZV9QaG90b3Nob3AsIDIzLjMuMV1cbiAgICAgICAgY29uc3QgW3Byb2R1Y3QsIHZlcnNpb25dID0gZmlyc3RJdGVtLnNwbGl0KCcvJyk7XG4gICAgICAgIC8vIFJlcGxhY2UgdW5kZXJzY29yZXMgd2l0aCBzcGFjZXNcbiAgICAgICAgLy8gQWRvYmVfUGhvdG9zaG9wIC0+IEFkb2JlIFBob3Rvc2hvcFxuICAgICAgICBjb25zdCBmb3JtYXR0ZWRQcm9kdWN0ID0gcHJvZHVjdC5yZXBsYWNlKC9fL2csICcgJyk7XG4gICAgICAgIGlmICh2ZXJzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7Zm9ybWF0dGVkUHJvZHVjdH0gJHt2ZXJzaW9ufWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZvcm1hdHRlZFByb2R1Y3Q7XG4gICAgfVxufVxuXG4vKipcbiAqIENvcHlyaWdodCAyMDIzIEFkb2JlXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIE5PVElDRTogQWRvYmUgcGVybWl0cyB5b3UgdG8gdXNlLCBtb2RpZnksIGFuZCBkaXN0cmlidXRlIHRoaXMgZmlsZSBpblxuICogYWNjb3JkYW5jZSB3aXRoIHRoZSB0ZXJtcyBvZiB0aGUgQWRvYmUgbGljZW5zZSBhZ3JlZW1lbnQgYWNjb21wYW55aW5nXG4gKiBpdC5cbiAqL1xuY29uc3QgZ2VuQWlEaWdpdGFsU291cmNlVHlwZXMgPSBbXG4gICAgJ2h0dHA6Ly9jdi5pcHRjLm9yZy9uZXdzY29kZXMvZGlnaXRhbHNvdXJjZXR5cGUvdHJhaW5lZEFsZ29yaXRobWljTWVkaWEnLFxuICAgICdodHRwczovL2N2LmlwdGMub3JnL25ld3Njb2Rlcy9kaWdpdGFsc291cmNldHlwZS90cmFpbmVkQWxnb3JpdGhtaWNNZWRpYScsXG4gICAgJ2h0dHA6Ly9jdi5pcHRjLm9yZy9uZXdzY29kZXMvZGlnaXRhbHNvdXJjZXR5cGUvY29tcG9zaXRlV2l0aFRyYWluZWRBbGdvcml0aG1pY01lZGlhJyxcbiAgICAnaHR0cHM6Ly9jdi5pcHRjLm9yZy9uZXdzY29kZXMvZGlnaXRhbHNvdXJjZXR5cGUvY29tcG9zaXRlV2l0aFRyYWluZWRBbGdvcml0aG1pY01lZGlhJyxcbl07XG5mdW5jdGlvbiBmb3JtYXRHZW5BaURpZ2l0YWxTb3VyY2VUeXBlcyh0eXBlKSB7XG4gICAgcmV0dXJuIHR5cGUuc3Vic3RyaW5nKHR5cGUubGFzdEluZGV4T2YoJy8nKSArIDEpO1xufVxuLyoqXG4gKiBHZXRzIGFueSBnZW5lcmF0aXZlIEFJIGluZm9ybWF0aW9uIGZyb20gdGhlIG1hbmlmZXN0LlxuICpcbiAqIEBwYXJhbSBtYW5pZmVzdCAtIE1hbmlmZXN0IHRvIGRlcml2ZSBkYXRhIGZyb21cbiAqL1xuZnVuY3Rpb24gc2VsZWN0R2VuZXJhdGl2ZUluZm8obWFuaWZlc3QpIHtcbiAgICBjb25zdCBkYXRhID0gbWFuaWZlc3QuYXNzZXJ0aW9ucy5kYXRhLnJlZHVjZSgoYWNjLCBhc3NlcnRpb24pID0+IHtcbiAgICAgICAgLy8gQ2hlY2sgZm9yIGxlZ2FjeSBhc3NlcnRpb25cbiAgICAgICAgaWYgKGFzc2VydGlvbi5sYWJlbCA9PT0gJ2NvbS5hZG9iZS5nZW5lcmF0aXZlLWFpJykge1xuICAgICAgICAgICAgY29uc3QgeyBkZXNjcmlwdGlvbiwgdmVyc2lvbiB9ID0gYXNzZXJ0aW9uLmRhdGE7XG4gICAgICAgICAgICBjb25zdCBzb2Z0d2FyZUFnZW50ID0gW2Rlc2NyaXB0aW9uLCB2ZXJzaW9uXVxuICAgICAgICAgICAgICAgIC5tYXAoKHgpID0+IHg/LnRyaW0oKSA/PyAnJylcbiAgICAgICAgICAgICAgICAuam9pbignICcpO1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAuLi5hY2MsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnRpb24sXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdsZWdhY3knLFxuICAgICAgICAgICAgICAgICAgICBzb2Z0d2FyZUFnZW50OiBzb2Z0d2FyZUFnZW50LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIC8vIENoZWNrIGZvciBhY3Rpb25zIHYxIGFzc2VydGlvblxuICAgICAgICBpZiAoYXNzZXJ0aW9uLmxhYmVsID09PSAnYzJwYS5hY3Rpb25zJykge1xuICAgICAgICAgICAgY29uc3QgeyBhY3Rpb25zIH0gPSBhc3NlcnRpb24uZGF0YTtcbiAgICAgICAgICAgIGNvbnN0IGdlbkFpQWN0aW9ucyA9IGFjdGlvbnMucmVkdWNlKChhY3Rpb25BY2MsIGFjdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZGlnaXRhbFNvdXJjZVR5cGUgfSA9IGFjdGlvbjtcbiAgICAgICAgICAgICAgICBpZiAoZGlnaXRhbFNvdXJjZVR5cGUgJiZcbiAgICAgICAgICAgICAgICAgICAgZ2VuQWlEaWdpdGFsU291cmNlVHlwZXMuaW5jbHVkZXMoZGlnaXRhbFNvdXJjZVR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbkFjYy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VydGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogZm9ybWF0R2VuQWlEaWdpdGFsU291cmNlVHlwZXMoZGlnaXRhbFNvdXJjZVR5cGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc29mdHdhcmVBZ2VudDogYWN0aW9uLnNvZnR3YXJlQWdlbnQsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYWN0aW9uQWNjO1xuICAgICAgICAgICAgfSwgW10pO1xuICAgICAgICAgICAgcmV0dXJuIFsuLi5hY2MsIC4uLmdlbkFpQWN0aW9uc107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBbXSk7XG4gICAgcmV0dXJuIGRhdGEubGVuZ3RoID8gZGF0YSA6IG51bGw7XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMjIgQWRvYmVcbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTk9USUNFOiBBZG9iZSBwZXJtaXRzIHlvdSB0byB1c2UsIG1vZGlmeSwgYW5kIGRpc3RyaWJ1dGUgdGhpcyBmaWxlIGluXG4gKiBhY2NvcmRhbmNlIHdpdGggdGhlIHRlcm1zIG9mIHRoZSBBZG9iZSBsaWNlbnNlIGFncmVlbWVudCBhY2NvbXBhbnlpbmdcbiAqIGl0LlxuICovXG4vKipcbiAqIEdldHMgdGhlIHByb2R1Y2VyIG9mIHRoaXMgbWFuaWZlc3QsIGRlcml2ZWQgZnJvbSBpdHMgYHN0ZHMuc2NoZW1hLW9yZy5DcmVhdGl2ZVdvcmtgIGFzc2VydGlvbiwgaWYgYXZhaWxhYmxlXG4gKlxuICogQHBhcmFtIG1hbmlmZXN0IC0gTWFuaWZlc3QgdG8gZGVyaXZlIGRhdGEgZnJvbVxuICovXG5mdW5jdGlvbiBzZWxlY3RQcm9kdWNlcihtYW5pZmVzdCkge1xuICAgIGNvbnN0IFtjd0Fzc2VydGlvbl0gPSBtYW5pZmVzdC5hc3NlcnRpb25zLmdldCgnc3Rkcy5zY2hlbWEtb3JnLkNyZWF0aXZlV29yaycpO1xuICAgIGlmICghY3dBc3NlcnRpb24pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHByb2R1Y2VyID0gY3dBc3NlcnRpb24uZGF0YS5hdXRob3I/LmZpbmQoKHgpID0+ICF4Lmhhc093blByb3BlcnR5KCdAaWQnKSk7XG4gICAgcmV0dXJuIHByb2R1Y2VyID8/IG51bGw7XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMjIgQWRvYmVcbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTk9USUNFOiBBZG9iZSBwZXJtaXRzIHlvdSB0byB1c2UsIG1vZGlmeSwgYW5kIGRpc3RyaWJ1dGUgdGhpcyBmaWxlIGluXG4gKiBhY2NvcmRhbmNlIHdpdGggdGhlIHRlcm1zIG9mIHRoZSBBZG9iZSBsaWNlbnNlIGFncmVlbWVudCBhY2NvbXBhbnlpbmdcbiAqIGl0LlxuICovXG4vKipcbiAqIEdldHMgYW55IHNvY2lhbCBhY2NvdW50cyBhc3NvY2lhdGVkIHdpdGggdGhlIHByb2R1Y2VyIG9mIHRoaXMgbWFuaWZlc3QsIGRlcml2ZWQgZnJvbSBpdHNcbiAqIGBzdGRzLnNjaGVtYS1vcmcuQ3JlYXRpdmVXb3JrYCBhc3NlcnRpb24sIGlmIGF2YWlsYWJsZVxuICpcbiAqIEBwYXJhbSBtYW5pZmVzdCAtIE1hbmlmZXN0IHRvIGRlcml2ZSBkYXRhIGZyb21cbiAqL1xuZnVuY3Rpb24gc2VsZWN0U29jaWFsQWNjb3VudHMobWFuaWZlc3QpIHtcbiAgICBjb25zdCBbY3dBc3NlcnRpb25dID0gbWFuaWZlc3QuYXNzZXJ0aW9ucy5nZXQoJ3N0ZHMuc2NoZW1hLW9yZy5DcmVhdGl2ZVdvcmsnKTtcbiAgICBpZiAoIWN3QXNzZXJ0aW9uKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBzb2NpYWxBY2NvdW50cyA9IGN3QXNzZXJ0aW9uLmRhdGEuYXV0aG9yPy5maWx0ZXIoKHgpID0+IHguaGFzT3duUHJvcGVydHkoJ0BpZCcpKTtcbiAgICByZXR1cm4gc29jaWFsQWNjb3VudHM7XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMjIgQWRvYmVcbiAqIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTk9USUNFOiBBZG9iZSBwZXJtaXRzIHlvdSB0byB1c2UsIG1vZGlmeSwgYW5kIGRpc3RyaWJ1dGUgdGhpcyBmaWxlIGluXG4gKiBhY2NvcmRhbmNlIHdpdGggdGhlIHRlcm1zIG9mIHRoZSBBZG9iZSBsaWNlbnNlIGFncmVlbWVudCBhY2NvbXBhbnlpbmdcbiAqIGl0LlxuICovXG4vKipcbiAqIENyZWF0ZXMgYSBtYW5pZmVzdCBzdG9yZSByZXByZXNlbnRhdGlvbiBzdWl0YWJsZSBmb3IgdXNlIHdpdGggYzJwYS13Yy5cbiAqXG4gKiBAcGFyYW0gbWFuaWZlc3RTdG9yZSAtIGMycGEgbWFuaWZlc3Qgc3RvcmUgb2JqZWN0XG4gKiBAcGFyYW0gbG9jYWxlIC0gQkNQIDQ3IGxvY2FsZSBzdHJpbmcgZm9yIHRyYW5zbGF0aW5nIGVkaXRzICYgYWN0aXZpdHkgYWN0aW9uc1xuICovXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVMMk1hbmlmZXN0U3RvcmUobWFuaWZlc3RTdG9yZSwgbG9jYWxlKSB7XG4gICAgY29uc3QgZGlzcG9zZXJzID0gW107XG4gICAgY29uc3QgYWN0aXZlTWFuaWZlc3QgPSBtYW5pZmVzdFN0b3JlLmFjdGl2ZU1hbmlmZXN0O1xuICAgIGNvbnN0IGluZ3JlZGllbnRzID0gYWN0aXZlTWFuaWZlc3QuaW5ncmVkaWVudHMubWFwKChpbmdyZWRpZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRodW1ibmFpbCA9IGluZ3JlZGllbnQudGh1bWJuYWlsPy5nZXRVcmwoKTtcbiAgICAgICAgaWYgKHRodW1ibmFpbCkge1xuICAgICAgICAgICAgZGlzcG9zZXJzLnB1c2godGh1bWJuYWlsLmRpc3Bvc2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0aXRsZTogaW5ncmVkaWVudC50aXRsZSxcbiAgICAgICAgICAgIGZvcm1hdDogaW5ncmVkaWVudC5mb3JtYXQsXG4gICAgICAgICAgICB0aHVtYm5haWw6IHRodW1ibmFpbD8udXJsID8/IG51bGwsXG4gICAgICAgICAgICBoYXNNYW5pZmVzdDogISFpbmdyZWRpZW50Lm1hbmlmZXN0LFxuICAgICAgICAgICAgZXJyb3I6IGdldEVycm9yU3RhdHVzKGluZ3JlZGllbnQudmFsaWRhdGlvblN0YXR1cyksXG4gICAgICAgICAgICB2YWxpZGF0aW9uU3RhdHVzOiBpbmdyZWRpZW50LnZhbGlkYXRpb25TdGF0dXMsXG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgY29uc3QgcHJvZHVjZXIgPSBzZWxlY3RQcm9kdWNlcihhY3RpdmVNYW5pZmVzdCk7XG4gICAgY29uc3QgZWRpdHNBbmRBY3Rpdml0eSA9IGF3YWl0IHNlbGVjdEVkaXRzQW5kQWN0aXZpdHkoYWN0aXZlTWFuaWZlc3QsIGxvY2FsZSk7XG4gICAgY29uc3Qgc29jaWFsQWNjb3VudHMgPSBzZWxlY3RTb2NpYWxBY2NvdW50cyhhY3RpdmVNYW5pZmVzdCk/Lm1hcCgoc29jaWFsQWNjb3VudCkgPT4gKHtcbiAgICAgICAgJ0B0eXBlJzogc29jaWFsQWNjb3VudFsnQHR5cGUnXSxcbiAgICAgICAgJ0BpZCc6IHNvY2lhbEFjY291bnRbJ0BpZCddLFxuICAgICAgICBuYW1lOiBzb2NpYWxBY2NvdW50Lm5hbWUsXG4gICAgICAgIGlkZW50aWZpZXI6IHNvY2lhbEFjY291bnQuaWRlbnRpZmllcixcbiAgICB9KSkgPz8gbnVsbDtcbiAgICBjb25zdCB0aHVtYm5haWwgPSBhY3RpdmVNYW5pZmVzdC50aHVtYm5haWw/LmdldFVybCgpO1xuICAgIGlmICh0aHVtYm5haWwpIHtcbiAgICAgICAgZGlzcG9zZXJzLnB1c2godGh1bWJuYWlsLmRpc3Bvc2UpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBtYW5pZmVzdFN0b3JlOiB7XG4gICAgICAgICAgICBpbmdyZWRpZW50cyxcbiAgICAgICAgICAgIGZvcm1hdDogYWN0aXZlTWFuaWZlc3QuZm9ybWF0LFxuICAgICAgICAgICAgdGl0bGU6IGFjdGl2ZU1hbmlmZXN0LnRpdGxlLFxuICAgICAgICAgICAgc2lnbmF0dXJlOiBhY3RpdmVNYW5pZmVzdC5zaWduYXR1cmVJbmZvXG4gICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgIGlzc3VlcjogYWN0aXZlTWFuaWZlc3Quc2lnbmF0dXJlSW5mby5pc3N1ZXIgPz8gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgaXNvRGF0ZVN0cmluZzogYWN0aXZlTWFuaWZlc3Quc2lnbmF0dXJlSW5mby50aW1lID8/IG51bGwsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDogbnVsbCxcbiAgICAgICAgICAgIGNsYWltR2VuZXJhdG9yOiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGFjdGl2ZU1hbmlmZXN0LmNsYWltR2VuZXJhdG9yLFxuICAgICAgICAgICAgICAgIHByb2R1Y3Q6IHNlbGVjdEZvcm1hdHRlZEdlbmVyYXRvcihhY3RpdmVNYW5pZmVzdCksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJvZHVjZXI6IHByb2R1Y2VyXG4gICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICdAdHlwZSc6IHByb2R1Y2VyWydAdHlwZSddLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBwcm9kdWNlci5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBpZGVudGlmaWVyOiBwcm9kdWNlci5pZGVudGlmaWVyLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IG51bGwsXG4gICAgICAgICAgICBzb2NpYWxBY2NvdW50cyxcbiAgICAgICAgICAgIGVkaXRzQW5kQWN0aXZpdHksXG4gICAgICAgICAgICBnZW5lcmF0aXZlSW5mbzogc2VsZWN0R2VuZXJhdGl2ZUluZm8oYWN0aXZlTWFuaWZlc3QpLFxuICAgICAgICAgICAgdGh1bWJuYWlsOiB0aHVtYm5haWw/LnVybCA/PyBudWxsLFxuICAgICAgICAgICAgaXNCZXRhOiAhIWFjdGl2ZU1hbmlmZXN0LmFzc2VydGlvbnMuZ2V0KCdhZG9iZS5iZXRhJyk/LlswXT8uZGF0YS52ZXJzaW9uLFxuICAgICAgICAgICAgZXJyb3I6IGdldEVycm9yU3RhdHVzKG1hbmlmZXN0U3RvcmUudmFsaWRhdGlvblN0YXR1cyksXG4gICAgICAgICAgICB2YWxpZGF0aW9uU3RhdHVzOiBtYW5pZmVzdFN0b3JlLnZhbGlkYXRpb25TdGF0dXMsXG4gICAgICAgIH0sXG4gICAgICAgIGRpc3Bvc2U6ICgpID0+IHtcbiAgICAgICAgICAgIGRpc3Bvc2Vycy5mb3JFYWNoKChkaXNwb3NlKSA9PiBkaXNwb3NlKCkpO1xuICAgICAgICB9LFxuICAgIH07XG59XG5mdW5jdGlvbiBnZXRFcnJvclN0YXR1cyh2YWxpZGF0aW9uU3RhdHVzKSB7XG4gICAgcmV0dXJuIGhhc090Z3BTdGF0dXModmFsaWRhdGlvblN0YXR1cylcbiAgICAgICAgPyAnb3RncCdcbiAgICAgICAgOiBoYXNFcnJvclN0YXR1cyh2YWxpZGF0aW9uU3RhdHVzKVxuICAgICAgICAgICAgPyAnZXJyb3InXG4gICAgICAgICAgICA6IG51bGw7XG59XG5cbmV4cG9ydCB7IE1hbmlmZXN0QnVpbGRlciwgY3JlYXRlQzJwYSwgY3JlYXRlTDJNYW5pZmVzdFN0b3JlLCBnZW5lcmF0ZVZlcmlmeVVybCwgZ2V0QzJwYUNhdGVnb3JpemVkQWN0aW9ucywgc2VsZWN0RWRpdHNBbmRBY3Rpdml0eSwgc2VsZWN0Rm9ybWF0dGVkR2VuZXJhdG9yLCBzZWxlY3RHZW5lcmF0aXZlSW5mbywgc2VsZWN0UHJvZHVjZXIsIHNlbGVjdFNvY2lhbEFjY291bnRzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVl6SndZUzVsYzIwdWFuTWlMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1TDJOdmJXMXZiaTkwWlcxd0wyNXZaR1ZmYlc5a2RXeGxjeTh1Y0c1d2JTOXRjMEF5TGpFdU1pOXViMlJsWDIxdlpIVnNaWE12YlhNdmFXNWtaWGd1YW5NaUxDSXVMaTh1TGk4dUxpOWpiMjF0YjI0dmRHVnRjQzl1YjJSbFgyMXZaSFZzWlhNdkxuQnVjRzB2WkdWaWRXZEFOQzR6TGpRdmJtOWtaVjl0YjJSMWJHVnpMMlJsWW5WbkwzTnlZeTlqYjIxdGIyNHVhbk1pTENJdUxpOHVMaTh1TGk5amIyMXRiMjR2ZEdWdGNDOXViMlJsWDIxdlpIVnNaWE12TG5CdWNHMHZaR1ZpZFdkQU5DNHpMalF2Ym05a1pWOXRiMlIxYkdWekwyUmxZblZuTDNOeVl5OWljbTkzYzJWeUxtcHpJaXdpTGk0dkxpNHZjM0pqTDJ4cFlpOWxjbkp2Y2k1MGN5SXNJaTR1THk0dUwzTnlZeTlzYVdJdlluSnZkM05sY2k1MGN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5MGMyeHBZa0F5TGpVdU1DOXViMlJsWDIxdlpIVnNaWE12ZEhOc2FXSXZkSE5zYVdJdVpYTTJMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZYMnhwYzNSRFlXTm9aVU5zWldGeUxtcHpJaXdpTGk0dkxpNHZMaTR2WTI5dGJXOXVMM1JsYlhBdmJtOWtaVjl0YjJSMWJHVnpMeTV3Ym5CdEwyeHZaR0Z6YUVBMExqRTNMakl4TDI1dlpHVmZiVzlrZFd4bGN5OXNiMlJoYzJndlpYRXVhbk1pTENJdUxpOHVMaTh1TGk5amIyMXRiMjR2ZEdWdGNDOXViMlJsWDIxdlpIVnNaWE12TG5CdWNHMHZiRzlrWVhOb1FEUXVNVGN1TWpFdmJtOWtaVjl0YjJSMWJHVnpMMnh2WkdGemFDOWZZWE56YjJOSmJtUmxlRTltTG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2WDJ4cGMzUkRZV05vWlVSbGJHVjBaUzVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MMTlzYVhOMFEyRmphR1ZIWlhRdWFuTWlMQ0l1TGk4dUxpOHVMaTlqYjIxdGIyNHZkR1Z0Y0M5dWIyUmxYMjF2WkhWc1pYTXZMbkJ1Y0cwdmJHOWtZWE5vUURRdU1UY3VNakV2Ym05a1pWOXRiMlIxYkdWekwyeHZaR0Z6YUM5ZmJHbHpkRU5oWTJobFNHRnpMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZYMnhwYzNSRFlXTm9aVk5sZEM1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5TWFYTjBRMkZqYUdVdWFuTWlMQ0l1TGk4dUxpOHVMaTlqYjIxdGIyNHZkR1Z0Y0M5dWIyUmxYMjF2WkhWc1pYTXZMbkJ1Y0cwdmJHOWtZWE5vUURRdU1UY3VNakV2Ym05a1pWOXRiMlIxYkdWekwyeHZaR0Z6YUM5ZmMzUmhZMnREYkdWaGNpNXFjeUlzSWk0dUx5NHVMeTR1TDJOdmJXMXZiaTkwWlcxd0wyNXZaR1ZmYlc5a2RXeGxjeTh1Y0c1d2JTOXNiMlJoYzJoQU5DNHhOeTR5TVM5dWIyUmxYMjF2WkhWc1pYTXZiRzlrWVhOb0wxOXpkR0ZqYTBSbGJHVjBaUzVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MMTl6ZEdGamEwZGxkQzVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MMTl6ZEdGamEwaGhjeTVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MMTltY21WbFIyeHZZbUZzTG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2WDNKdmIzUXVhbk1pTENJdUxpOHVMaTh1TGk5amIyMXRiMjR2ZEdWdGNDOXViMlJsWDIxdlpIVnNaWE12TG5CdWNHMHZiRzlrWVhOb1FEUXVNVGN1TWpFdmJtOWtaVjl0YjJSMWJHVnpMMnh2WkdGemFDOWZVM2x0WW05c0xtcHpJaXdpTGk0dkxpNHZMaTR2WTI5dGJXOXVMM1JsYlhBdmJtOWtaVjl0YjJSMWJHVnpMeTV3Ym5CdEwyeHZaR0Z6YUVBMExqRTNMakl4TDI1dlpHVmZiVzlrZFd4bGN5OXNiMlJoYzJndlgyZGxkRkpoZDFSaFp5NXFjeUlzSWk0dUx5NHVMeTR1TDJOdmJXMXZiaTkwWlcxd0wyNXZaR1ZmYlc5a2RXeGxjeTh1Y0c1d2JTOXNiMlJoYzJoQU5DNHhOeTR5TVM5dWIyUmxYMjF2WkhWc1pYTXZiRzlrWVhOb0wxOXZZbXBsWTNSVWIxTjBjbWx1Wnk1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5aVlYTmxSMlYwVkdGbkxtcHpJaXdpTGk0dkxpNHZMaTR2WTI5dGJXOXVMM1JsYlhBdmJtOWtaVjl0YjJSMWJHVnpMeTV3Ym5CdEwyeHZaR0Z6YUVBMExqRTNMakl4TDI1dlpHVmZiVzlrZFd4bGN5OXNiMlJoYzJndmFYTlBZbXBsWTNRdWFuTWlMQ0l1TGk4dUxpOHVMaTlqYjIxdGIyNHZkR1Z0Y0M5dWIyUmxYMjF2WkhWc1pYTXZMbkJ1Y0cwdmJHOWtZWE5vUURRdU1UY3VNakV2Ym05a1pWOXRiMlIxYkdWekwyeHZaR0Z6YUM5cGMwWjFibU4wYVc5dUxtcHpJaXdpTGk0dkxpNHZMaTR2WTI5dGJXOXVMM1JsYlhBdmJtOWtaVjl0YjJSMWJHVnpMeTV3Ym5CdEwyeHZaR0Z6YUVBMExqRTNMakl4TDI1dlpHVmZiVzlrZFd4bGN5OXNiMlJoYzJndlgyTnZjbVZLYzBSaGRHRXVhbk1pTENJdUxpOHVMaTh1TGk5amIyMXRiMjR2ZEdWdGNDOXViMlJsWDIxdlpIVnNaWE12TG5CdWNHMHZiRzlrWVhOb1FEUXVNVGN1TWpFdmJtOWtaVjl0YjJSMWJHVnpMMnh2WkdGemFDOWZhWE5OWVhOclpXUXVhbk1pTENJdUxpOHVMaTh1TGk5amIyMXRiMjR2ZEdWdGNDOXViMlJsWDIxdlpIVnNaWE12TG5CdWNHMHZiRzlrWVhOb1FEUXVNVGN1TWpFdmJtOWtaVjl0YjJSMWJHVnpMMnh2WkdGemFDOWZkRzlUYjNWeVkyVXVhbk1pTENJdUxpOHVMaTh1TGk5amIyMXRiMjR2ZEdWdGNDOXViMlJsWDIxdlpIVnNaWE12TG5CdWNHMHZiRzlrWVhOb1FEUXVNVGN1TWpFdmJtOWtaVjl0YjJSMWJHVnpMMnh2WkdGemFDOWZZbUZ6WlVselRtRjBhWFpsTG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2WDJkbGRGWmhiSFZsTG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2WDJkbGRFNWhkR2wyWlM1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5TllYQXVhbk1pTENJdUxpOHVMaTh1TGk5amIyMXRiMjR2ZEdWdGNDOXViMlJsWDIxdlpIVnNaWE12TG5CdWNHMHZiRzlrWVhOb1FEUXVNVGN1TWpFdmJtOWtaVjl0YjJSMWJHVnpMMnh2WkdGemFDOWZibUYwYVhabFEzSmxZWFJsTG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2WDJoaGMyaERiR1ZoY2k1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5b1lYTm9SR1ZzWlhSbExtcHpJaXdpTGk0dkxpNHZMaTR2WTI5dGJXOXVMM1JsYlhBdmJtOWtaVjl0YjJSMWJHVnpMeTV3Ym5CdEwyeHZaR0Z6YUVBMExqRTNMakl4TDI1dlpHVmZiVzlrZFd4bGN5OXNiMlJoYzJndlgyaGhjMmhIWlhRdWFuTWlMQ0l1TGk4dUxpOHVMaTlqYjIxdGIyNHZkR1Z0Y0M5dWIyUmxYMjF2WkhWc1pYTXZMbkJ1Y0cwdmJHOWtZWE5vUURRdU1UY3VNakV2Ym05a1pWOXRiMlIxYkdWekwyeHZaR0Z6YUM5ZmFHRnphRWhoY3k1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5b1lYTm9VMlYwTG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2WDBoaGMyZ3Vhbk1pTENJdUxpOHVMaTh1TGk5amIyMXRiMjR2ZEdWdGNDOXViMlJsWDIxdlpIVnNaWE12TG5CdWNHMHZiRzlrWVhOb1FEUXVNVGN1TWpFdmJtOWtaVjl0YjJSMWJHVnpMMnh2WkdGemFDOWZiV0Z3UTJGamFHVkRiR1ZoY2k1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5cGMwdGxlV0ZpYkdVdWFuTWlMQ0l1TGk4dUxpOHVMaTlqYjIxdGIyNHZkR1Z0Y0M5dWIyUmxYMjF2WkhWc1pYTXZMbkJ1Y0cwdmJHOWtZWE5vUURRdU1UY3VNakV2Ym05a1pWOXRiMlIxYkdWekwyeHZaR0Z6YUM5ZloyVjBUV0Z3UkdGMFlTNXFjeUlzSWk0dUx5NHVMeTR1TDJOdmJXMXZiaTkwWlcxd0wyNXZaR1ZmYlc5a2RXeGxjeTh1Y0c1d2JTOXNiMlJoYzJoQU5DNHhOeTR5TVM5dWIyUmxYMjF2WkhWc1pYTXZiRzlrWVhOb0wxOXRZWEJEWVdOb1pVUmxiR1YwWlM1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5dFlYQkRZV05vWlVkbGRDNXFjeUlzSWk0dUx5NHVMeTR1TDJOdmJXMXZiaTkwWlcxd0wyNXZaR1ZmYlc5a2RXeGxjeTh1Y0c1d2JTOXNiMlJoYzJoQU5DNHhOeTR5TVM5dWIyUmxYMjF2WkhWc1pYTXZiRzlrWVhOb0wxOXRZWEJEWVdOb1pVaGhjeTVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MMTl0WVhCRFlXTm9aVk5sZEM1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5TllYQkRZV05vWlM1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5emRHRmphMU5sZEM1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5VGRHRmpheTVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MMTlrWldacGJtVlFjbTl3WlhKMGVTNXFjeUlzSWk0dUx5NHVMeTR1TDJOdmJXMXZiaTkwWlcxd0wyNXZaR1ZmYlc5a2RXeGxjeTh1Y0c1d2JTOXNiMlJoYzJoQU5DNHhOeTR5TVM5dWIyUmxYMjF2WkhWc1pYTXZiRzlrWVhOb0wxOWlZWE5sUVhOemFXZHVWbUZzZFdVdWFuTWlMQ0l1TGk4dUxpOHVMaTlqYjIxdGIyNHZkR1Z0Y0M5dWIyUmxYMjF2WkhWc1pYTXZMbkJ1Y0cwdmJHOWtZWE5vUURRdU1UY3VNakV2Ym05a1pWOXRiMlIxYkdWekwyeHZaR0Z6YUM5ZllYTnphV2R1VFdWeVoyVldZV3gxWlM1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5amNtVmhkR1ZDWVhObFJtOXlMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZYMkpoYzJWR2IzSXVhbk1pTENJdUxpOHVMaTh1TGk5amIyMXRiMjR2ZEdWdGNDOXViMlJsWDIxdlpIVnNaWE12TG5CdWNHMHZiRzlrWVhOb1FEUXVNVGN1TWpFdmJtOWtaVjl0YjJSMWJHVnpMMnh2WkdGemFDOWZZMnh2Ym1WQ2RXWm1aWEl1YW5NaUxDSXVMaTh1TGk4dUxpOWpiMjF0YjI0dmRHVnRjQzl1YjJSbFgyMXZaSFZzWlhNdkxuQnVjRzB2Ykc5a1lYTm9RRFF1TVRjdU1qRXZibTlrWlY5dGIyUjFiR1Z6TDJ4dlpHRnphQzlmVldsdWREaEJjbkpoZVM1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5amJHOXVaVUZ5Y21GNVFuVm1abVZ5TG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2WDJOc2IyNWxWSGx3WldSQmNuSmhlUzVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MMTlqYjNCNVFYSnlZWGt1YW5NaUxDSXVMaTh1TGk4dUxpOWpiMjF0YjI0dmRHVnRjQzl1YjJSbFgyMXZaSFZzWlhNdkxuQnVjRzB2Ykc5a1lYTm9RRFF1TVRjdU1qRXZibTlrWlY5dGIyUjFiR1Z6TDJ4dlpHRnphQzlmWW1GelpVTnlaV0YwWlM1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5dmRtVnlRWEpuTG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2WDJkbGRGQnliM1J2ZEhsd1pTNXFjeUlzSWk0dUx5NHVMeTR1TDJOdmJXMXZiaTkwWlcxd0wyNXZaR1ZmYlc5a2RXeGxjeTh1Y0c1d2JTOXNiMlJoYzJoQU5DNHhOeTR5TVM5dWIyUmxYMjF2WkhWc1pYTXZiRzlrWVhOb0wxOXBjMUJ5YjNSdmRIbHdaUzVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MMTlwYm1sMFEyeHZibVZQWW1wbFkzUXVhbk1pTENJdUxpOHVMaTh1TGk5amIyMXRiMjR2ZEdWdGNDOXViMlJsWDIxdlpIVnNaWE12TG5CdWNHMHZiRzlrWVhOb1FEUXVNVGN1TWpFdmJtOWtaVjl0YjJSMWJHVnpMMnh2WkdGemFDOXBjMDlpYW1WamRFeHBhMlV1YW5NaUxDSXVMaTh1TGk4dUxpOWpiMjF0YjI0dmRHVnRjQzl1YjJSbFgyMXZaSFZzWlhNdkxuQnVjRzB2Ykc5a1lYTm9RRFF1TVRjdU1qRXZibTlrWlY5dGIyUjFiR1Z6TDJ4dlpHRnphQzlmWW1GelpVbHpRWEpuZFcxbGJuUnpMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZhWE5CY21kMWJXVnVkSE11YW5NaUxDSXVMaTh1TGk4dUxpOWpiMjF0YjI0dmRHVnRjQzl1YjJSbFgyMXZaSFZzWlhNdkxuQnVjRzB2Ykc5a1lYTm9RRFF1TVRjdU1qRXZibTlrWlY5dGIyUjFiR1Z6TDJ4dlpHRnphQzlwYzBGeWNtRjVMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZhWE5NWlc1bmRHZ3Vhbk1pTENJdUxpOHVMaTh1TGk5amIyMXRiMjR2ZEdWdGNDOXViMlJsWDIxdlpIVnNaWE12TG5CdWNHMHZiRzlrWVhOb1FEUXVNVGN1TWpFdmJtOWtaVjl0YjJSMWJHVnpMMnh2WkdGemFDOXBjMEZ5Y21GNVRHbHJaUzVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MMmx6UVhKeVlYbE1hV3RsVDJKcVpXTjBMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZjM1IxWWtaaGJITmxMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZhWE5DZFdabVpYSXVhbk1pTENJdUxpOHVMaTh1TGk5amIyMXRiMjR2ZEdWdGNDOXViMlJsWDIxdlpIVnNaWE12TG5CdWNHMHZiRzlrWVhOb1FEUXVNVGN1TWpFdmJtOWtaVjl0YjJSMWJHVnpMMnh2WkdGemFDOXBjMUJzWVdsdVQySnFaV04wTG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2WDJKaGMyVkpjMVI1Y0dWa1FYSnlZWGt1YW5NaUxDSXVMaTh1TGk4dUxpOWpiMjF0YjI0dmRHVnRjQzl1YjJSbFgyMXZaSFZzWlhNdkxuQnVjRzB2Ykc5a1lYTm9RRFF1TVRjdU1qRXZibTlrWlY5dGIyUjFiR1Z6TDJ4dlpHRnphQzlmWW1GelpWVnVZWEo1TG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2WDI1dlpHVlZkR2xzTG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2YVhOVWVYQmxaRUZ5Y21GNUxtcHpJaXdpTGk0dkxpNHZMaTR2WTI5dGJXOXVMM1JsYlhBdmJtOWtaVjl0YjJSMWJHVnpMeTV3Ym5CdEwyeHZaR0Z6YUVBMExqRTNMakl4TDI1dlpHVmZiVzlrZFd4bGN5OXNiMlJoYzJndlgzTmhabVZIWlhRdWFuTWlMQ0l1TGk4dUxpOHVMaTlqYjIxdGIyNHZkR1Z0Y0M5dWIyUmxYMjF2WkhWc1pYTXZMbkJ1Y0cwdmJHOWtZWE5vUURRdU1UY3VNakV2Ym05a1pWOXRiMlIxYkdWekwyeHZaR0Z6YUM5ZllYTnphV2R1Vm1Gc2RXVXVhbk1pTENJdUxpOHVMaTh1TGk5amIyMXRiMjR2ZEdWdGNDOXViMlJsWDIxdlpIVnNaWE12TG5CdWNHMHZiRzlrWVhOb1FEUXVNVGN1TWpFdmJtOWtaVjl0YjJSMWJHVnpMMnh2WkdGemFDOWZZMjl3ZVU5aWFtVmpkQzVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MMTlpWVhObFZHbHRaWE11YW5NaUxDSXVMaTh1TGk4dUxpOWpiMjF0YjI0dmRHVnRjQzl1YjJSbFgyMXZaSFZzWlhNdkxuQnVjRzB2Ykc5a1lYTm9RRFF1TVRjdU1qRXZibTlrWlY5dGIyUjFiR1Z6TDJ4dlpHRnphQzlmYVhOSmJtUmxlQzVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MMTloY25KaGVVeHBhMlZMWlhsekxtcHpJaXdpTGk0dkxpNHZMaTR2WTI5dGJXOXVMM1JsYlhBdmJtOWtaVjl0YjJSMWJHVnpMeTV3Ym5CdEwyeHZaR0Z6YUVBMExqRTNMakl4TDI1dlpHVmZiVzlrZFd4bGN5OXNiMlJoYzJndlgyNWhkR2wyWlV0bGVYTkpiaTVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MMTlpWVhObFMyVjVjMGx1TG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2YTJWNWMwbHVMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZkRzlRYkdGcGJrOWlhbVZqZEM1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5aVlYTmxUV1Z5WjJWRVpXVndMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZYMkpoYzJWTlpYSm5aUzVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MMmxrWlc1MGFYUjVMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZYMkZ3Y0d4NUxtcHpJaXdpTGk0dkxpNHZMaTR2WTI5dGJXOXVMM1JsYlhBdmJtOWtaVjl0YjJSMWJHVnpMeTV3Ym5CdEwyeHZaR0Z6YUVBMExqRTNMakl4TDI1dlpHVmZiVzlrZFd4bGN5OXNiMlJoYzJndlgyOTJaWEpTWlhOMExtcHpJaXdpTGk0dkxpNHZMaTR2WTI5dGJXOXVMM1JsYlhBdmJtOWtaVjl0YjJSMWJHVnpMeTV3Ym5CdEwyeHZaR0Z6YUVBMExqRTNMakl4TDI1dlpHVmZiVzlrZFd4bGN5OXNiMlJoYzJndlkyOXVjM1JoYm5RdWFuTWlMQ0l1TGk4dUxpOHVMaTlqYjIxdGIyNHZkR1Z0Y0M5dWIyUmxYMjF2WkhWc1pYTXZMbkJ1Y0cwdmJHOWtZWE5vUURRdU1UY3VNakV2Ym05a1pWOXRiMlIxYkdWekwyeHZaR0Z6YUM5ZlltRnpaVk5sZEZSdlUzUnlhVzVuTG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2WDNOb2IzSjBUM1YwTG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2WDNObGRGUnZVM1J5YVc1bkxtcHpJaXdpTGk0dkxpNHZMaTR2WTI5dGJXOXVMM1JsYlhBdmJtOWtaVjl0YjJSMWJHVnpMeTV3Ym5CdEwyeHZaR0Z6YUVBMExqRTNMakl4TDI1dlpHVmZiVzlrZFd4bGN5OXNiMlJoYzJndlgySmhjMlZTWlhOMExtcHpJaXdpTGk0dkxpNHZMaTR2WTI5dGJXOXVMM1JsYlhBdmJtOWtaVjl0YjJSMWJHVnpMeTV3Ym5CdEwyeHZaR0Z6YUVBMExqRTNMakl4TDI1dlpHVmZiVzlrZFd4bGN5OXNiMlJoYzJndlgybHpTWFJsY21GMFpXVkRZV3hzTG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2WDJOeVpXRjBaVUZ6YzJsbmJtVnlMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZiV1Z5WjJVdWFuTWlMQ0l1TGk4dUxpOXpjbU12YkdsaUwzWmhiR2xrWVhSdmNpNTBjeUlzSWk0dUx5NHVMM055WXk5c2FXSXZaRzkzYm14dllXUmxjaTUwY3lJc0lpNHVMeTR1TDNOeVl5OXNhV0l2Y0c5dmJDOTBZWE5yTG5Seklpd2lMaTR2TGk0dmMzSmpMMnhwWWk5d2IyOXNMMlZ5Y205eUxuUnpJaXdpTGk0dkxpNHZjM0pqTDJ4cFlpOXdiMjlzTDNkdmNtdGxjazFoYm1GblpYSXVkSE1pTENJdUxpOHVMaTl6Y21NdmJHbGlMM0J2YjJ3dmQyOXlhMlZ5VUc5dmJDNTBjeUlzSWk0dUx5NHVMM055WXk5c2FXSXZjRzl2YkZkeVlYQndaWEl1ZEhNaUxDSXVMaTh1TGk5emNtTXZiR2xpTDNkaGMyMHVkSE1pTENJdUxpOHVMaTl6Y21NdllYTnpaWEowYVc5dWN5NTBjeUlzSWk0dUx5NHVMM055WXk5c2FXSXZhR0Z6YUM1MGN5SXNJaTR1THk0dUwzTnlZeTl5WlhOdmRYSmpaWE11ZEhNaUxDSXVMaTh1TGk5emNtTXZkR2gxYldKdVlXbHNMblJ6SWl3aUxpNHZMaTR2YzNKakwybHVaM0psWkdsbGJuUXVkSE1pTENJdUxpOHVMaTl6Y21NdmJXRnVhV1psYzNRdWRITWlMQ0l1TGk4dUxpOXpjbU12YldGdWFXWmxjM1JUZEc5eVpTNTBjeUlzSWk0dUx5NHVMeTR1TDJOdmJXMXZiaTkwWlcxd0wyNXZaR1ZmYlc5a2RXeGxjeTh1Y0c1d2JTOXNiMlJoYzJoQU5DNHhOeTR5TVM5dWIyUmxYMjF2WkhWc1pYTXZiRzlrWVhOb0wxOXVZWFJwZG1WTFpYbHpMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZYMkpoYzJWTFpYbHpMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZhMlY1Y3k1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5aVlYTmxSbTl5VDNkdUxtcHpJaXdpTGk0dkxpNHZMaTR2WTI5dGJXOXVMM1JsYlhBdmJtOWtaVjl0YjJSMWJHVnpMeTV3Ym5CdEwyeHZaR0Z6YUVBMExqRTNMakl4TDI1dlpHVmZiVzlrZFd4bGN5OXNiMlJoYzJndlgzTmxkRU5oWTJobFFXUmtMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZYM05sZEVOaFkyaGxTR0Z6TG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2WDFObGRFTmhZMmhsTG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2WDJGeWNtRjVVMjl0WlM1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5allXTm9aVWhoY3k1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5bGNYVmhiRUZ5Y21GNWN5NXFjeUlzSWk0dUx5NHVMeTR1TDJOdmJXMXZiaTkwWlcxd0wyNXZaR1ZmYlc5a2RXeGxjeTh1Y0c1d2JTOXNiMlJoYzJoQU5DNHhOeTR5TVM5dWIyUmxYMjF2WkhWc1pYTXZiRzlrWVhOb0wxOXRZWEJVYjBGeWNtRjVMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZYM05sZEZSdlFYSnlZWGt1YW5NaUxDSXVMaTh1TGk4dUxpOWpiMjF0YjI0dmRHVnRjQzl1YjJSbFgyMXZaSFZzWlhNdkxuQnVjRzB2Ykc5a1lYTm9RRFF1TVRjdU1qRXZibTlrWlY5dGIyUjFiR1Z6TDJ4dlpHRnphQzlmWlhGMVlXeENlVlJoWnk1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5aGNuSmhlVkIxYzJndWFuTWlMQ0l1TGk4dUxpOHVMaTlqYjIxdGIyNHZkR1Z0Y0M5dWIyUmxYMjF2WkhWc1pYTXZMbkJ1Y0cwdmJHOWtZWE5vUURRdU1UY3VNakV2Ym05a1pWOXRiMlIxYkdWekwyeHZaR0Z6YUM5ZlltRnpaVWRsZEVGc2JFdGxlWE11YW5NaUxDSXVMaTh1TGk4dUxpOWpiMjF0YjI0dmRHVnRjQzl1YjJSbFgyMXZaSFZzWlhNdkxuQnVjRzB2Ykc5a1lYTm9RRFF1TVRjdU1qRXZibTlrWlY5dGIyUjFiR1Z6TDJ4dlpHRnphQzlmWVhKeVlYbEdhV3gwWlhJdWFuTWlMQ0l1TGk4dUxpOHVMaTlqYjIxdGIyNHZkR1Z0Y0M5dWIyUmxYMjF2WkhWc1pYTXZMbkJ1Y0cwdmJHOWtZWE5vUURRdU1UY3VNakV2Ym05a1pWOXRiMlIxYkdWekwyeHZaR0Z6YUM5emRIVmlRWEp5WVhrdWFuTWlMQ0l1TGk4dUxpOHVMaTlqYjIxdGIyNHZkR1Z0Y0M5dWIyUmxYMjF2WkhWc1pYTXZMbkJ1Y0cwdmJHOWtZWE5vUURRdU1UY3VNakV2Ym05a1pWOXRiMlIxYkdWekwyeHZaR0Z6YUM5ZloyVjBVM2x0WW05c2N5NXFjeUlzSWk0dUx5NHVMeTR1TDJOdmJXMXZiaTkwWlcxd0wyNXZaR1ZmYlc5a2RXeGxjeTh1Y0c1d2JTOXNiMlJoYzJoQU5DNHhOeTR5TVM5dWIyUmxYMjF2WkhWc1pYTXZiRzlrWVhOb0wxOW5aWFJCYkd4TFpYbHpMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZYMlZ4ZFdGc1QySnFaV04wY3k1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5RVlYUmhWbWxsZHk1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5UWNtOXRhWE5sTG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2WDFObGRDNXFjeUlzSWk0dUx5NHVMeTR1TDJOdmJXMXZiaTkwWlcxd0wyNXZaR1ZmYlc5a2RXeGxjeTh1Y0c1d2JTOXNiMlJoYzJoQU5DNHhOeTR5TVM5dWIyUmxYMjF2WkhWc1pYTXZiRzlrWVhOb0wxOVhaV0ZyVFdGd0xtcHpJaXdpTGk0dkxpNHZMaTR2WTI5dGJXOXVMM1JsYlhBdmJtOWtaVjl0YjJSMWJHVnpMeTV3Ym5CdEwyeHZaR0Z6YUVBMExqRTNMakl4TDI1dlpHVmZiVzlrZFd4bGN5OXNiMlJoYzJndlgyZGxkRlJoWnk1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5aVlYTmxTWE5GY1hWaGJFUmxaWEF1YW5NaUxDSXVMaTh1TGk4dUxpOWpiMjF0YjI0dmRHVnRjQzl1YjJSbFgyMXZaSFZzWlhNdkxuQnVjRzB2Ykc5a1lYTm9RRFF1TVRjdU1qRXZibTlrWlY5dGIyUjFiR1Z6TDJ4dlpHRnphQzlmWW1GelpVbHpSWEYxWVd3dWFuTWlMQ0l1TGk4dUxpOHVMaTlqYjIxdGIyNHZkR1Z0Y0M5dWIyUmxYMjF2WkhWc1pYTXZMbkJ1Y0cwdmJHOWtZWE5vUURRdU1UY3VNakV2Ym05a1pWOXRiMlIxYkdWekwyeHZaR0Z6YUM5ZlltRnpaVWx6VFdGMFkyZ3Vhbk1pTENJdUxpOHVMaTh1TGk5amIyMXRiMjR2ZEdWdGNDOXViMlJsWDIxdlpIVnNaWE12TG5CdWNHMHZiRzlrWVhOb1FEUXVNVGN1TWpFdmJtOWtaVjl0YjJSMWJHVnpMMnh2WkdGemFDOWZhWE5UZEhKcFkzUkRiMjF3WVhKaFlteGxMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZYMmRsZEUxaGRHTm9SR0YwWVM1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5dFlYUmphR1Z6VTNSeWFXTjBRMjl0Y0dGeVlXSnNaUzVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MMTlpWVhObFRXRjBZMmhsY3k1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDJselUzbHRZbTlzTG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2WDJselMyVjVMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZiV1Z0YjJsNlpTNXFjeUlzSWk0dUx5NHVMeTR1TDJOdmJXMXZiaTkwWlcxd0wyNXZaR1ZmYlc5a2RXeGxjeTh1Y0c1d2JTOXNiMlJoYzJoQU5DNHhOeTR5TVM5dWIyUmxYMjF2WkhWc1pYTXZiRzlrWVhOb0wxOXRaVzF2YVhwbFEyRndjR1ZrTG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2WDNOMGNtbHVaMVJ2VUdGMGFDNXFjeUlzSWk0dUx5NHVMeTR1TDJOdmJXMXZiaTkwWlcxd0wyNXZaR1ZmYlc5a2RXeGxjeTh1Y0c1d2JTOXNiMlJoYzJoQU5DNHhOeTR5TVM5dWIyUmxYMjF2WkhWc1pYTXZiRzlrWVhOb0wxOWhjbkpoZVUxaGNDNXFjeUlzSWk0dUx5NHVMeTR1TDJOdmJXMXZiaTkwWlcxd0wyNXZaR1ZmYlc5a2RXeGxjeTh1Y0c1d2JTOXNiMlJoYzJoQU5DNHhOeTR5TVM5dWIyUmxYMjF2WkhWc1pYTXZiRzlrWVhOb0wxOWlZWE5sVkc5VGRISnBibWN1YW5NaUxDSXVMaTh1TGk4dUxpOWpiMjF0YjI0dmRHVnRjQzl1YjJSbFgyMXZaSFZzWlhNdkxuQnVjRzB2Ykc5a1lYTm9RRFF1TVRjdU1qRXZibTlrWlY5dGIyUjFiR1Z6TDJ4dlpHRnphQzkwYjFOMGNtbHVaeTVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MMTlqWVhOMFVHRjBhQzVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MMTkwYjB0bGVTNXFjeUlzSWk0dUx5NHVMeTR1TDJOdmJXMXZiaTkwWlcxd0wyNXZaR1ZmYlc5a2RXeGxjeTh1Y0c1d2JTOXNiMlJoYzJoQU5DNHhOeTR5TVM5dWIyUmxYMjF2WkhWc1pYTXZiRzlrWVhOb0wxOWlZWE5sUjJWMExtcHpJaXdpTGk0dkxpNHZMaTR2WTI5dGJXOXVMM1JsYlhBdmJtOWtaVjl0YjJSMWJHVnpMeTV3Ym5CdEwyeHZaR0Z6YUVBMExqRTNMakl4TDI1dlpHVmZiVzlrZFd4bGN5OXNiMlJoYzJndloyVjBMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZYMkpoYzJWSVlYTkpiaTVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MMTlvWVhOUVlYUm9MbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZhR0Z6U1c0dWFuTWlMQ0l1TGk4dUxpOHVMaTlqYjIxdGIyNHZkR1Z0Y0M5dWIyUmxYMjF2WkhWc1pYTXZMbkJ1Y0cwdmJHOWtZWE5vUURRdU1UY3VNakV2Ym05a1pWOXRiMlIxYkdWekwyeHZaR0Z6YUM5ZlltRnpaVTFoZEdOb1pYTlFjbTl3WlhKMGVTNXFjeUlzSWk0dUx5NHVMeTR1TDJOdmJXMXZiaTkwWlcxd0wyNXZaR1ZmYlc5a2RXeGxjeTh1Y0c1d2JTOXNiMlJoYzJoQU5DNHhOeTR5TVM5dWIyUmxYMjF2WkhWc1pYTXZiRzlrWVhOb0wxOWlZWE5sVUhKdmNHVnlkSGt1YW5NaUxDSXVMaTh1TGk4dUxpOWpiMjF0YjI0dmRHVnRjQzl1YjJSbFgyMXZaSFZzWlhNdkxuQnVjRzB2Ykc5a1lYTm9RRFF1TVRjdU1qRXZibTlrWlY5dGIyUjFiR1Z6TDJ4dlpHRnphQzlmWW1GelpWQnliM0JsY25SNVJHVmxjQzVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MM0J5YjNCbGNuUjVMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZYMkpoYzJWSmRHVnlZWFJsWlM1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDIxaGNGWmhiSFZsY3k1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5d0xXUmxabVZ5UURFdU1DNHdMMjV2WkdWZmJXOWtkV3hsY3k5d0xXUmxabVZ5TDJsdVpHVjRMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMjFoY0MxaFoyVXRZMnhsWVc1bGNrQXdMakl1TUM5dWIyUmxYMjF2WkhWc1pYTXZiV0Z3TFdGblpTMWpiR1ZoYm1WeUwyUnBjM1F2YVc1a1pYZ3Vhbk1pTENJdUxpOHVMaTh1TGk5amIyMXRiMjR2ZEdWdGNDOXViMlJsWDIxdlpIVnNaWE12TG5CdWNHMHZaWGh3YVhKNUxXMWhjRUF5TGpBdU1DOXViMlJsWDIxdlpIVnNaWE12Wlhod2FYSjVMVzFoY0M5a2FYTjBMMmx1WkdWNExtcHpJaXdpTGk0dkxpNHZMaTR2WTI5dGJXOXVMM1JsYlhBdmJtOWtaVjl0YjJSMWJHVnpMeTV3Ym5CdEwyMXBiV2xqTFdadVFEUXVNQzR3TDI1dlpHVmZiVzlrZFd4bGN5OXRhVzFwWXkxbWJpOXBibVJsZUM1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5d0xXMWxiVzlwZW1WQU55NHhMakV2Ym05a1pWOXRiMlIxYkdWekwzQXRiV1Z0YjJsNlpTOWthWE4wTDJsdVpHVjRMbXB6SWl3aUxpNHZMaTR2YzNKakwzTnBaMjR2YzNSdmNtRm5aUzUwY3lJc0lpNHVMeTR1TDNOeVl5OXphV2R1TDJsdFlXZGxMblJ6SWl3aUxpNHZMaTR2YzNKakwzTnBaMjR2ZEdoMWJXSnVZV2xzTG5Seklpd2lMaTR2TGk0dmMzSmpMM05wWjI0dmMybG5iaTUwY3lJc0lpNHVMeTR1TDNOeVl5OXphV2R1TDJsdVozSmxaR2xsYm5RdWRITWlMQ0l1TGk4dUxpOXpjbU12YzJsbmJpOXRZVzVwWm1WemRFSjFhV3hrWlhJdWRITWlMQ0l1TGk4dUxpOXpjbU12YzI5MWNtTmxMblJ6SWl3aUxpNHZMaTR2YzNKakwyTXljR0V1ZEhNaUxDSXVMaTh1TGk5emNtTXZiR2xpTDNaaGJHbGtZWFJwYjI1VGRHRjBkWE11ZEhNaUxDSXVMaTh1TGk4dUxpOWpiMjF0YjI0dmRHVnRjQzl1YjJSbFgyMXZaSFZzWlhNdkxuQnVjRzB2Ykc5a1lYTm9RRFF1TVRjdU1qRXZibTlrWlY5dGIyUjFiR1Z6TDJ4dlpHRnphQzlmWVhKeVlYbEZZV05vTG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2WDJOeVpXRjBaVUpoYzJWRllXTm9MbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZYMkpoYzJWRllXTm9MbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZYMk5oYzNSR2RXNWpkR2x2Ymk1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDJadmNrVmhZMmd1YW5NaUxDSXVMaTh1TGk4dUxpOWpiMjF0YjI0dmRHVnRjQzl1YjJSbFgyMXZaSFZzWlhNdkxuQnVjRzB2Ykc5a1lYTm9RRFF1TVRjdU1qRXZibTlrWlY5dGIyUjFiR1Z6TDJ4dlpHRnphQzlsWVdOb0xtcHpJaXdpTGk0dkxpNHZMaTR2WTI5dGJXOXVMM1JsYlhBdmJtOWtaVjl0YjJSMWJHVnpMeTV3Ym5CdEwyeHZaR0Z6YUVBMExqRTNMakl4TDI1dlpHVmZiVzlrZFd4bGN5OXNiMlJoYzJndlpuQXZYMjFoY0hCcGJtY3Vhbk1pTENJdUxpOHVMaTh1TGk5amIyMXRiMjR2ZEdWdGNDOXViMlJsWDIxdlpIVnNaWE12TG5CdWNHMHZiRzlrWVhOb1FEUXVNVGN1TWpFdmJtOWtaVjl0YjJSMWJHVnpMMnh2WkdGemFDOW1jQzl3YkdGalpXaHZiR1JsY2k1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDJad0wxOWlZWE5sUTI5dWRtVnlkQzVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MMTl0WlhSaFRXRndMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZYMkpoYzJWVFpYUkVZWFJoTG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2WDJOeVpXRjBaVU4wYjNJdWFuTWlMQ0l1TGk4dUxpOHVMaTlqYjIxdGIyNHZkR1Z0Y0M5dWIyUmxYMjF2WkhWc1pYTXZMbkJ1Y0cwdmJHOWtZWE5vUURRdU1UY3VNakV2Ym05a1pWOXRiMlIxYkdWekwyeHZaR0Z6YUM5ZlkzSmxZWFJsUW1sdVpDNXFjeUlzSWk0dUx5NHVMeTR1TDJOdmJXMXZiaTkwWlcxd0wyNXZaR1ZmYlc5a2RXeGxjeTh1Y0c1d2JTOXNiMlJoYzJoQU5DNHhOeTR5TVM5dWIyUmxYMjF2WkhWc1pYTXZiRzlrWVhOb0wxOWpiMjF3YjNObFFYSm5jeTVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MMTlqYjIxd2IzTmxRWEpuYzFKcFoyaDBMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZYMk52ZFc1MFNHOXNaR1Z5Y3k1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5aVlYTmxURzlrWVhOb0xtcHpJaXdpTGk0dkxpNHZMaTR2WTI5dGJXOXVMM1JsYlhBdmJtOWtaVjl0YjJSMWJHVnpMeTV3Ym5CdEwyeHZaR0Z6YUVBMExqRTNMakl4TDI1dlpHVmZiVzlrZFd4bGN5OXNiMlJoYzJndlgweGhlbmxYY21Gd2NHVnlMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZibTl2Y0M1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5blpYUkVZWFJoTG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2WDNKbFlXeE9ZVzFsY3k1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5blpYUkdkVzVqVG1GdFpTNXFjeUlzSWk0dUx5NHVMeTR1TDJOdmJXMXZiaTkwWlcxd0wyNXZaR1ZmYlc5a2RXeGxjeTh1Y0c1d2JTOXNiMlJoYzJoQU5DNHhOeTR5TVM5dWIyUmxYMjF2WkhWc1pYTXZiRzlrWVhOb0wxOU1iMlJoYzJoWGNtRndjR1Z5TG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2WDNkeVlYQndaWEpEYkc5dVpTNXFjeUlzSWk0dUx5NHVMeTR1TDJOdmJXMXZiaTkwWlcxd0wyNXZaR1ZmYlc5a2RXeGxjeTh1Y0c1d2JTOXNiMlJoYzJoQU5DNHhOeTR5TVM5dWIyUmxYMjF2WkhWc1pYTXZiRzlrWVhOb0wzZHlZWEJ3WlhKTWIyUmhjMmd1YW5NaUxDSXVMaTh1TGk4dUxpOWpiMjF0YjI0dmRHVnRjQzl1YjJSbFgyMXZaSFZzWlhNdkxuQnVjRzB2Ykc5a1lYTm9RRFF1TVRjdU1qRXZibTlrWlY5dGIyUjFiR1Z6TDJ4dlpHRnphQzlmYVhOTVlYcHBZV0pzWlM1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5elpYUkVZWFJoTG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2WDJkbGRGZHlZWEJFWlhSaGFXeHpMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZYMmx1YzJWeWRGZHlZWEJFWlhSaGFXeHpMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZYMkpoYzJWR2FXNWtTVzVrWlhndWFuTWlMQ0l1TGk4dUxpOHVMaTlqYjIxdGIyNHZkR1Z0Y0M5dWIyUmxYMjF2WkhWc1pYTXZMbkJ1Y0cwdmJHOWtZWE5vUURRdU1UY3VNakV2Ym05a1pWOXRiMlIxYkdWekwyeHZaR0Z6YUM5ZlltRnpaVWx6VG1GT0xtcHpJaXdpTGk0dkxpNHZMaTR2WTI5dGJXOXVMM1JsYlhBdmJtOWtaVjl0YjJSMWJHVnpMeTV3Ym5CdEwyeHZaR0Z6YUVBMExqRTNMakl4TDI1dlpHVmZiVzlrZFd4bGN5OXNiMlJoYzJndlgzTjBjbWxqZEVsdVpHVjRUMll1YW5NaUxDSXVMaTh1TGk4dUxpOWpiMjF0YjI0dmRHVnRjQzl1YjJSbFgyMXZaSFZzWlhNdkxuQnVjRzB2Ykc5a1lYTm9RRFF1TVRjdU1qRXZibTlrWlY5dGIyUjFiR1Z6TDJ4dlpHRnphQzlmWW1GelpVbHVaR1Y0VDJZdWFuTWlMQ0l1TGk4dUxpOHVMaTlqYjIxdGIyNHZkR1Z0Y0M5dWIyUmxYMjF2WkhWc1pYTXZMbkJ1Y0cwdmJHOWtZWE5vUURRdU1UY3VNakV2Ym05a1pWOXRiMlIxYkdWekwyeHZaR0Z6YUM5ZllYSnlZWGxKYm1Oc2RXUmxjeTVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MMTkxY0dSaGRHVlhjbUZ3UkdWMFlXbHNjeTVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MMTl6WlhSWGNtRndWRzlUZEhKcGJtY3Vhbk1pTENJdUxpOHVMaTh1TGk5amIyMXRiMjR2ZEdWdGNDOXViMlJsWDIxdlpIVnNaWE12TG5CdWNHMHZiRzlrWVhOb1FEUXVNVGN1TWpFdmJtOWtaVjl0YjJSMWJHVnpMMnh2WkdGemFDOWZZM0psWVhSbFVtVmpkWEp5ZVM1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5blpYUkliMnhrWlhJdWFuTWlMQ0l1TGk4dUxpOHVMaTlqYjIxdGIyNHZkR1Z0Y0M5dWIyUmxYMjF2WkhWc1pYTXZMbkJ1Y0cwdmJHOWtZWE5vUURRdU1UY3VNakV2Ym05a1pWOXRiMlIxYkdWekwyeHZaR0Z6YUM5ZmNtVnZjbVJsY2k1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5eVpYQnNZV05sU0c5c1pHVnljeTVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MMTlqY21WaGRHVkllV0p5YVdRdWFuTWlMQ0l1TGk4dUxpOHVMaTlqYjIxdGIyNHZkR1Z0Y0M5dWIyUmxYMjF2WkhWc1pYTXZMbkJ1Y0cwdmJHOWtZWE5vUURRdU1UY3VNakV2Ym05a1pWOXRiMlIxYkdWekwyeHZaR0Z6YUM5ZlkzSmxZWFJsUTNWeWNua3Vhbk1pTENJdUxpOHVMaTh1TGk5amIyMXRiMjR2ZEdWdGNDOXViMlJsWDIxdlpIVnNaWE12TG5CdWNHMHZiRzlrWVhOb1FEUXVNVGN1TWpFdmJtOWtaVjl0YjJSMWJHVnpMMnh2WkdGemFDOWZZM0psWVhSbFVHRnlkR2xoYkM1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5dFpYSm5aVVJoZEdFdWFuTWlMQ0l1TGk4dUxpOHVMaTlqYjIxdGIyNHZkR1Z0Y0M5dWIyUmxYMjF2WkhWc1pYTXZMbkJ1Y0cwdmJHOWtZWE5vUURRdU1UY3VNakV2Ym05a1pWOXRiMlIxYkdWekwyeHZaR0Z6YUM5ZmRISnBiVzFsWkVWdVpFbHVaR1Y0TG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2WDJKaGMyVlVjbWx0TG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2ZEc5T2RXMWlaWEl1YW5NaUxDSXVMaTh1TGk4dUxpOWpiMjF0YjI0dmRHVnRjQzl1YjJSbFgyMXZaSFZzWlhNdkxuQnVjRzB2Ykc5a1lYTm9RRFF1TVRjdU1qRXZibTlrWlY5dGIyUjFiR1Z6TDJ4dlpHRnphQzkwYjBacGJtbDBaUzVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MM1J2U1c1MFpXZGxjaTVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MMTlqY21WaGRHVlhjbUZ3TG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2WVhKNUxtcHpJaXdpTGk0dkxpNHZMaTR2WTI5dGJXOXVMM1JsYlhBdmJtOWtaVjl0YjJSMWJHVnpMeTV3Ym5CdEwyeHZaR0Z6YUVBMExqRTNMakl4TDI1dlpHVmZiVzlrZFd4bGN5OXNiMlJoYzJndlgySmhjMlZCYzNOcFoyNHVhbk1pTENJdUxpOHVMaTh1TGk5amIyMXRiMjR2ZEdWdGNDOXViMlJsWDIxdlpIVnNaWE12TG5CdWNHMHZiRzlrWVhOb1FEUXVNVGN1TWpFdmJtOWtaVjl0YjJSMWJHVnpMMnh2WkdGemFDOWZZbUZ6WlVGemMybG5ia2x1TG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2WDJOdmNIbFRlVzFpYjJ4ekxtcHpJaXdpTGk0dkxpNHZMaTR2WTI5dGJXOXVMM1JsYlhBdmJtOWtaVjl0YjJSMWJHVnpMeTV3Ym5CdEwyeHZaR0Z6YUVBMExqRTNMakl4TDI1dlpHVmZiVzlrZFd4bGN5OXNiMlJoYzJndlgyZGxkRk41YldKdmJITkpiaTVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MMTlqYjNCNVUzbHRZbTlzYzBsdUxtcHpJaXdpTGk0dkxpNHZMaTR2WTI5dGJXOXVMM1JsYlhBdmJtOWtaVjl0YjJSMWJHVnpMeTV3Ym5CdEwyeHZaR0Z6YUVBMExqRTNMakl4TDI1dlpHVmZiVzlrZFd4bGN5OXNiMlJoYzJndlgyZGxkRUZzYkV0bGVYTkpiaTVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MMTlwYm1sMFEyeHZibVZCY25KaGVTNXFjeUlzSWk0dUx5NHVMeTR1TDJOdmJXMXZiaTkwWlcxd0wyNXZaR1ZmYlc5a2RXeGxjeTh1Y0c1d2JTOXNiMlJoYzJoQU5DNHhOeTR5TVM5dWIyUmxYMjF2WkhWc1pYTXZiRzlrWVhOb0wxOWpiRzl1WlVSaGRHRldhV1YzTG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2WDJOc2IyNWxVbVZuUlhod0xtcHpJaXdpTGk0dkxpNHZMaTR2WTI5dGJXOXVMM1JsYlhBdmJtOWtaVjl0YjJSMWJHVnpMeTV3Ym5CdEwyeHZaR0Z6YUVBMExqRTNMakl4TDI1dlpHVmZiVzlrZFd4bGN5OXNiMlJoYzJndlgyTnNiMjVsVTNsdFltOXNMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZYMmx1YVhSRGJHOXVaVUo1VkdGbkxtcHpJaXdpTGk0dkxpNHZMaTR2WTI5dGJXOXVMM1JsYlhBdmJtOWtaVjl0YjJSMWJHVnpMeTV3Ym5CdEwyeHZaR0Z6YUVBMExqRTNMakl4TDI1dlpHVmZiVzlrZFd4bGN5OXNiMlJoYzJndlgySmhjMlZKYzAxaGNDNXFjeUlzSWk0dUx5NHVMeTR1TDJOdmJXMXZiaTkwWlcxd0wyNXZaR1ZmYlc5a2RXeGxjeTh1Y0c1d2JTOXNiMlJoYzJoQU5DNHhOeTR5TVM5dWIyUmxYMjF2WkhWc1pYTXZiRzlrWVhOb0wybHpUV0Z3TG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2WDJKaGMyVkpjMU5sZEM1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDJselUyVjBMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZYMkpoYzJWRGJHOXVaUzVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MMk5zYjI1bExtcHpJaXdpTGk0dkxpNHZMaTR2WTI5dGJXOXVMM1JsYlhBdmJtOWtaVjl0YjJSMWJHVnpMeTV3Ym5CdEwyeHZaR0Z6YUVBMExqRTNMakl4TDI1dlpHVmZiVzlrZFd4bGN5OXNiMlJoYzJndlkzVnljbmt1YW5NaUxDSXVMaTh1TGk4dUxpOWpiMjF0YjI0dmRHVnRjQzl1YjJSbFgyMXZaSFZzWlhNdkxuQnVjRzB2Ykc5a1lYTm9RRFF1TVRjdU1qRXZibTlrWlY5dGIyUjFiR1Z6TDJ4dlpHRnphQzlwYzBWeWNtOXlMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZhWE5YWldGclRXRndMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZhWFJsY21GMFpXVXVhbk1pTENJdUxpOHVMaTh1TGk5amIyMXRiMjR2ZEdWdGNDOXViMlJsWDIxdlpIVnNaWE12TG5CdWNHMHZiRzlrWVhOb1FEUXVNVGN1TWpFdmJtOWtaVjl0YjJSMWJHVnpMMnh2WkdGemFDOWZhWE5HYkdGMGRHVnVZV0pzWlM1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5aVlYTmxSbXhoZEhSbGJpNXFjeUlzSWk0dUx5NHVMeTR1TDJOdmJXMXZiaTkwWlcxd0wyNXZaR1ZmYlc5a2RXeGxjeTh1Y0c1d2JTOXNiMlJoYzJoQU5DNHhOeTR5TVM5dWIyUmxYMjF2WkhWc1pYTXZiRzlrWVhOb0wyWnNZWFIwWlc0dWFuTWlMQ0l1TGk4dUxpOHVMaTlqYjIxdGIyNHZkR1Z0Y0M5dWIyUmxYMjF2WkhWc1pYTXZMbkJ1Y0cwdmJHOWtZWE5vUURRdU1UY3VNakV2Ym05a1pWOXRiMlIxYkdWekwyeHZaR0Z6YUM5ZlpteGhkRkpsYzNRdWFuTWlMQ0l1TGk4dUxpOHVMaTlqYjIxdGIyNHZkR1Z0Y0M5dWIyUmxYMjF2WkhWc1pYTXZMbkJ1Y0cwdmJHOWtZWE5vUURRdU1UY3VNakV2Ym05a1pWOXRiMlIxYkdWekwyeHZaR0Z6YUM5eVpXRnlaeTVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MM1J2VUdGMGFDNXFjeUlzSWk0dUx5NHVMeTR1TDJOdmJXMXZiaTkwWlcxd0wyNXZaR1ZmYlc5a2RXeGxjeTh1Y0c1d2JTOXNiMlJoYzJoQU5DNHhOeTR5TVM5dWIyUmxYMjF2WkhWc1pYTXZiRzlrWVhOb0wyWndMMTkxZEdsc0xtcHpJaXdpTGk0dkxpNHZMaTR2WTI5dGJXOXVMM1JsYlhBdmJtOWtaVjl0YjJSMWJHVnpMeTV3Ym5CdEwyeHZaR0Z6YUVBMExqRTNMakl4TDI1dlpHVmZiVzlrZFd4bGN5OXNiMlJoYzJndlpuQXZZMjl1ZG1WeWRDNXFjeUlzSWk0dUx5NHVMeTR1TDJOdmJXMXZiaTkwWlcxd0wyNXZaR1ZmYlc5a2RXeGxjeTh1Y0c1d2JTOXNiMlJoYzJoQU5DNHhOeTR5TVM5dWIyUmxYMjF2WkhWc1pYTXZiRzlrWVhOb0wyTnZiWEJoWTNRdWFuTWlMQ0l1TGk4dUxpOHVMaTlqYjIxdGIyNHZkR1Z0Y0M5dWIyUmxYMjF2WkhWc1pYTXZMbkJ1Y0cwdmJHOWtZWE5vUURRdU1UY3VNakV2Ym05a1pWOXRiMlIxYkdWekwyeHZaR0Z6YUM5bWNDOWZabUZzYzJWUGNIUnBiMjV6TG1weklpd2lMaTR2TGk0dkxpNHZZMjl0Ylc5dUwzUmxiWEF2Ym05a1pWOXRiMlIxYkdWekx5NXdibkJ0TDJ4dlpHRnphRUEwTGpFM0xqSXhMMjV2WkdWZmJXOWtkV3hsY3k5c2IyUmhjMmd2Wm5BdlkyOXRjR0ZqZEM1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDE5amNtVmhkR1ZHYkc5M0xtcHpJaXdpTGk0dkxpNHZMaTR2WTI5dGJXOXVMM1JsYlhBdmJtOWtaVjl0YjJSMWJHVnpMeTV3Ym5CdEwyeHZaR0Z6YUVBMExqRTNMakl4TDI1dlpHVmZiVzlrZFd4bGN5OXNiMlJoYzJndlpteHZkeTVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MMlp3TDJac2IzY3Vhbk1pTENJdUxpOHVMaTh1TGk5amIyMXRiMjR2ZEdWdGNDOXViMlJsWDIxdlpIVnNaWE12TG5CdWNHMHZiRzlrWVhOb1FEUXVNVGN1TWpFdmJtOWtaVjl0YjJSMWJHVnpMMnh2WkdGemFDOWZZbUZ6WlUxaGNDNXFjeUlzSWk0dUx5NHVMeTR1TDJOdmJXMXZiaTkwWlcxd0wyNXZaR1ZmYlc5a2RXeGxjeTh1Y0c1d2JTOXNiMlJoYzJoQU5DNHhOeTR5TVM5dWIyUmxYMjF2WkhWc1pYTXZiRzlrWVhOb0wxOWlZWE5sVTI5eWRFSjVMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZYMk52YlhCaGNtVkJjMk5sYm1ScGJtY3Vhbk1pTENJdUxpOHVMaTh1TGk5amIyMXRiMjR2ZEdWdGNDOXViMlJsWDIxdlpIVnNaWE12TG5CdWNHMHZiRzlrWVhOb1FEUXVNVGN1TWpFdmJtOWtaVjl0YjJSMWJHVnpMMnh2WkdGemFDOWZZMjl0Y0dGeVpVMTFiSFJwY0d4bExtcHpJaXdpTGk0dkxpNHZMaTR2WTI5dGJXOXVMM1JsYlhBdmJtOWtaVjl0YjJSMWJHVnpMeTV3Ym5CdEwyeHZaR0Z6YUVBMExqRTNMakl4TDI1dlpHVmZiVzlrZFd4bGN5OXNiMlJoYzJndlgySmhjMlZQY21SbGNrSjVMbXB6SWl3aUxpNHZMaTR2TGk0dlkyOXRiVzl1TDNSbGJYQXZibTlrWlY5dGIyUjFiR1Z6THk1d2JuQnRMMnh2WkdGemFFQTBMakUzTGpJeEwyNXZaR1ZmYlc5a2RXeGxjeTlzYjJSaGMyZ3ZjMjl5ZEVKNUxtcHpJaXdpTGk0dkxpNHZMaTR2WTI5dGJXOXVMM1JsYlhBdmJtOWtaVjl0YjJSMWJHVnpMeTV3Ym5CdEwyeHZaR0Z6YUVBMExqRTNMakl4TDI1dlpHVmZiVzlrZFd4bGN5OXNiMlJoYzJndlpuQXZjMjl5ZEVKNUxtcHpJaXdpTGk0dkxpNHZMaTR2WTI5dGJXOXVMM1JsYlhBdmJtOWtaVjl0YjJSMWJHVnpMeTV3Ym5CdEwyeHZaR0Z6YUVBMExqRTNMakl4TDI1dlpHVmZiVzlrZFd4bGN5OXNiMlJoYzJndlgyRnljbUY1U1c1amJIVmtaWE5YYVhSb0xtcHpJaXdpTGk0dkxpNHZMaTR2WTI5dGJXOXVMM1JsYlhBdmJtOWtaVjl0YjJSMWJHVnpMeTV3Ym5CdEwyeHZaR0Z6YUVBMExqRTNMakl4TDI1dlpHVmZiVzlrZFd4bGN5OXNiMlJoYzJndlgyTnlaV0YwWlZObGRDNXFjeUlzSWk0dUx5NHVMeTR1TDJOdmJXMXZiaTkwWlcxd0wyNXZaR1ZmYlc5a2RXeGxjeTh1Y0c1d2JTOXNiMlJoYzJoQU5DNHhOeTR5TVM5dWIyUmxYMjF2WkhWc1pYTXZiRzlrWVhOb0wxOWlZWE5sVlc1cGNTNXFjeUlzSWk0dUx5NHVMeTR1TDJOdmJXMXZiaTkwWlcxd0wyNXZaR1ZmYlc5a2RXeGxjeTh1Y0c1d2JTOXNiMlJoYzJoQU5DNHhOeTR5TVM5dWIyUmxYMjF2WkhWc1pYTXZiRzlrWVhOb0wzVnVhWEZDZVM1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDJad0wzVnVhWEZDZVM1cWN5SXNJaTR1THk0dUx5NHVMMk52YlcxdmJpOTBaVzF3TDI1dlpHVmZiVzlrZFd4bGN5OHVjRzV3YlM5c2IyUmhjMmhBTkM0eE55NHlNUzl1YjJSbFgyMXZaSFZzWlhNdmJHOWtZWE5vTDIxaGNFdGxlWE11YW5NaUxDSXVMaTh1TGk4dUxpOWpiMjF0YjI0dmRHVnRjQzl1YjJSbFgyMXZaSFZzWlhNdkxuQnVjRzB2Ykc5a1lYTm9RRFF1TVRjdU1qRXZibTlrWlY5dGIyUjFiR1Z6TDJ4dlpHRnphQzlmWW1GelpWTmxkQzVxY3lJc0lpNHVMeTR1THk0dUwyTnZiVzF2Ymk5MFpXMXdMMjV2WkdWZmJXOWtkV3hsY3k4dWNHNXdiUzlzYjJSaGMyaEFOQzR4Tnk0eU1TOXViMlJsWDIxdlpIVnNaWE12Ykc5a1lYTm9MM05sZEM1cWN5SXNJaTR1TDJGemMyVjBjeTl6ZG1jdllXeGxjblF0WTJseVkyeGxMV1JoY21zdWMzWm5JaXdpTGk0dllYTnpaWFJ6TDNOMlp5OWpiMnh2Y2kxd1lXeGxkSFJsTFdSaGNtc3VjM1puSWl3aUxpNHZZWE56WlhSekwzTjJaeTlqY205d0xXUmhjbXN1YzNabklpd2lMaTR2WVhOelpYUnpMM04yWnk5a2NtRjNMV1JoY21zdWMzWm5JaXdpTGk0dllYTnpaWFJ6TDNOMlp5OWxaR2wwTFdsdUxXeHBaMmgwTFdSaGNtc3VjM1puSWl3aUxpNHZZWE56WlhSekwzTjJaeTlwYlhCdmNuUXRaR0Z5YXk1emRtY2lMQ0l1TGk5aGMzTmxkSE12YzNabkwyeGhlV1Z5Y3kxa1lYSnJMbk4yWnlJc0lpNHVMMkZ6YzJWMGN5OXpkbWN2Ym1WM0xXbDBaVzB0WkdGeWF5NXpkbWNpTENJdUxpOWhjM05sZEhNdmMzWm5MMjl5WW1sMExXUmhjbXN1YzNabklpd2lMaTR2WVhOelpYUnpMM04yWnk5d2NtOXdaWEowYVdWekxXUmhjbXN1YzNabklpd2lMaTR2WVhOelpYUnpMM04yWnk5eVpYTnBlbVV0WkdGeWF5NXpkbWNpTENJdUxpOWhjM05sZEhNdmMzWm5MM0p2ZEdGMFpTMXNaV1owTFc5MWRHeHBibVV0WkdGeWF5NXpkbWNpTENJdUxpOWhjM05sZEhNdmMzWm5MM05oZG1VdGRHOHRiR2xuYUhRdFpHRnlheTV6ZG1jaUxDSXVMaTloYzNObGRITXZjM1puTDNSbGVIUXRaR0Z5YXk1emRtY2lMQ0l1TGk5aGMzTmxkSE12YzNabkwzWnBaR1Z2TFc5MWRHeHBibVV0WkdGeWF5NXpkbWNpTENJdUxpOHVMaTl6Y21NdmJHbGlMMmxqYjI0dWRITWlMQ0l1TGk4dUxpOXpjbU12YzJWc1pXTjBiM0p6TDNObGJHVmpkRVZrYVhSelFXNWtRV04wYVhacGRIa3VkSE1pTENJdUxpOHVMaTl6Y21NdmMyVnNaV04wYjNKekwzTmxiR1ZqZEVadmNtMWhkSFJsWkVkbGJtVnlZWFJ2Y2k1MGN5SXNJaTR1THk0dUwzTnlZeTl6Wld4bFkzUnZjbk12YzJWc1pXTjBSMlZ1WlhKaGRHbDJaVWx1Wm04dWRITWlMQ0l1TGk4dUxpOXpjbU12YzJWc1pXTjBiM0p6TDNObGJHVmpkRkJ5YjJSMVkyVnlMblJ6SWl3aUxpNHZMaTR2YzNKakwzTmxiR1ZqZEc5eWN5OXpaV3hsWTNSVGIyTnBZV3hCWTJOdmRXNTBjeTUwY3lJc0lpNHVMeTR1TDNOeVl5OWpjbVZoZEdWTU1rMWhibWxtWlhOMFUzUnZjbVV1ZEhNaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQklaV3h3WlhKekxseHVJQ292WEc1Y2JuWmhjaUJ6SUQwZ01UQXdNRHRjYm5aaGNpQnRJRDBnY3lBcUlEWXdPMXh1ZG1GeUlHZ2dQU0J0SUNvZ05qQTdYRzUyWVhJZ1pDQTlJR2dnS2lBeU5EdGNiblpoY2lCM0lEMGdaQ0FxSURjN1hHNTJZWElnZVNBOUlHUWdLaUF6TmpVdU1qVTdYRzVjYmk4cUtseHVJQ29nVUdGeWMyVWdiM0lnWm05eWJXRjBJSFJvWlNCbmFYWmxiaUJnZG1Gc1lDNWNiaUFxWEc0Z0tpQlBjSFJwYjI1ek9seHVJQ3BjYmlBcUlDQXRJR0JzYjI1bllDQjJaWEppYjNObElHWnZjbTFoZEhScGJtY2dXMlpoYkhObFhWeHVJQ3BjYmlBcUlFQndZWEpoYlNCN1UzUnlhVzVuZkU1MWJXSmxjbjBnZG1Gc1hHNGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdXMjl3ZEdsdmJuTmRYRzRnS2lCQWRHaHliM2R6SUh0RmNuSnZjbjBnZEdoeWIzY2dZVzRnWlhKeWIzSWdhV1lnZG1Gc0lHbHpJRzV2ZENCaElHNXZiaTFsYlhCMGVTQnpkSEpwYm1jZ2IzSWdZU0J1ZFcxaVpYSmNiaUFxSUVCeVpYUjFjbTRnZTFOMGNtbHVaM3hPZFcxaVpYSjlYRzRnS2lCQVlYQnBJSEIxWW14cFkxeHVJQ292WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2RtRnNMQ0J2Y0hScGIyNXpLU0I3WEc0Z0lHOXdkR2x2Ym5NZ1BTQnZjSFJwYjI1eklIeDhJSHQ5TzF4dUlDQjJZWElnZEhsd1pTQTlJSFI1Y0dWdlppQjJZV3c3WEc0Z0lHbG1JQ2gwZVhCbElEMDlQU0FuYzNSeWFXNW5KeUFtSmlCMllXd3ViR1Z1WjNSb0lENGdNQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQndZWEp6WlNoMllXd3BPMXh1SUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1VnUFQwOUlDZHVkVzFpWlhJbklDWW1JR2x6Um1sdWFYUmxLSFpoYkNrcElIdGNiaUFnSUNCeVpYUjFjbTRnYjNCMGFXOXVjeTVzYjI1bklEOGdabTEwVEc5dVp5aDJZV3dwSURvZ1ptMTBVMmh2Y25Rb2RtRnNLVHRjYmlBZ2ZWeHVJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YRzRnSUNBZ0ozWmhiQ0JwY3lCdWIzUWdZU0J1YjI0dFpXMXdkSGtnYzNSeWFXNW5JRzl5SUdFZ2RtRnNhV1FnYm5WdFltVnlMaUIyWVd3OUp5QXJYRzRnSUNBZ0lDQktVMDlPTG5OMGNtbHVaMmxtZVNoMllXd3BYRzRnSUNrN1hHNTlPMXh1WEc0dktpcGNiaUFxSUZCaGNuTmxJSFJvWlNCbmFYWmxiaUJnYzNSeVlDQmhibVFnY21WMGRYSnVJRzFwYkd4cGMyVmpiMjVrY3k1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnYzNSeVhHNGdLaUJBY21WMGRYSnVJSHRPZFcxaVpYSjlYRzRnS2lCQVlYQnBJSEJ5YVhaaGRHVmNiaUFxTDF4dVhHNW1kVzVqZEdsdmJpQndZWEp6WlNoemRISXBJSHRjYmlBZ2MzUnlJRDBnVTNSeWFXNW5LSE4wY2lrN1hHNGdJR2xtSUNoemRISXViR1Z1WjNSb0lENGdNVEF3S1NCN1hHNGdJQ0FnY21WMGRYSnVPMXh1SUNCOVhHNGdJSFpoY2lCdFlYUmphQ0E5SUM5ZUtDMC9LRDg2WEZ4a0t5ay9YRnd1UDF4Y1pDc3BJQ29vYldsc2JHbHpaV052Ym1SelAzeHRjMlZqY3o5OGJYTjhjMlZqYjI1a2N6OThjMlZqY3o5OGMzeHRhVzUxZEdWelAzeHRhVzV6UDN4dGZHaHZkWEp6UDN4b2NuTS9mR2g4WkdGNWN6OThaSHgzWldWcmN6OThkM3g1WldGeWN6OThlWEp6UDN4NUtUOGtMMmt1WlhobFl5aGNiaUFnSUNCemRISmNiaUFnS1R0Y2JpQWdhV1lnS0NGdFlYUmphQ2tnZTF4dUlDQWdJSEpsZEhWeWJqdGNiaUFnZlZ4dUlDQjJZWElnYmlBOUlIQmhjbk5sUm14dllYUW9iV0YwWTJoYk1WMHBPMXh1SUNCMllYSWdkSGx3WlNBOUlDaHRZWFJqYUZzeVhTQjhmQ0FuYlhNbktTNTBiMHh2ZDJWeVEyRnpaU2dwTzF4dUlDQnpkMmwwWTJnZ0tIUjVjR1VwSUh0Y2JpQWdJQ0JqWVhObElDZDVaV0Z5Y3ljNlhHNGdJQ0FnWTJGelpTQW5lV1ZoY2ljNlhHNGdJQ0FnWTJGelpTQW5lWEp6SnpwY2JpQWdJQ0JqWVhObElDZDVjaWM2WEc0Z0lDQWdZMkZ6WlNBbmVTYzZYRzRnSUNBZ0lDQnlaWFIxY200Z2JpQXFJSGs3WEc0Z0lDQWdZMkZ6WlNBbmQyVmxhM01uT2x4dUlDQWdJR05oYzJVZ0ozZGxaV3NuT2x4dUlDQWdJR05oYzJVZ0ozY25PbHh1SUNBZ0lDQWdjbVYwZFhKdUlHNGdLaUIzTzF4dUlDQWdJR05oYzJVZ0oyUmhlWE1uT2x4dUlDQWdJR05oYzJVZ0oyUmhlU2M2WEc0Z0lDQWdZMkZ6WlNBblpDYzZYRzRnSUNBZ0lDQnlaWFIxY200Z2JpQXFJR1E3WEc0Z0lDQWdZMkZ6WlNBbmFHOTFjbk1uT2x4dUlDQWdJR05oYzJVZ0oyaHZkWEluT2x4dUlDQWdJR05oYzJVZ0oyaHljeWM2WEc0Z0lDQWdZMkZ6WlNBbmFISW5PbHh1SUNBZ0lHTmhjMlVnSjJnbk9seHVJQ0FnSUNBZ2NtVjBkWEp1SUc0Z0tpQm9PMXh1SUNBZ0lHTmhjMlVnSjIxcGJuVjBaWE1uT2x4dUlDQWdJR05oYzJVZ0oyMXBiblYwWlNjNlhHNGdJQ0FnWTJGelpTQW5iV2x1Y3ljNlhHNGdJQ0FnWTJGelpTQW5iV2x1SnpwY2JpQWdJQ0JqWVhObElDZHRKenBjYmlBZ0lDQWdJSEpsZEhWeWJpQnVJQ29nYlR0Y2JpQWdJQ0JqWVhObElDZHpaV052Ym1Sekp6cGNiaUFnSUNCallYTmxJQ2R6WldOdmJtUW5PbHh1SUNBZ0lHTmhjMlVnSjNObFkzTW5PbHh1SUNBZ0lHTmhjMlVnSjNObFl5YzZYRzRnSUNBZ1kyRnpaU0FuY3ljNlhHNGdJQ0FnSUNCeVpYUjFjbTRnYmlBcUlITTdYRzRnSUNBZ1kyRnpaU0FuYldsc2JHbHpaV052Ym1Sekp6cGNiaUFnSUNCallYTmxJQ2R0YVd4c2FYTmxZMjl1WkNjNlhHNGdJQ0FnWTJGelpTQW5iWE5sWTNNbk9seHVJQ0FnSUdOaGMyVWdKMjF6WldNbk9seHVJQ0FnSUdOaGMyVWdKMjF6SnpwY2JpQWdJQ0FnSUhKbGRIVnliaUJ1TzF4dUlDQWdJR1JsWm1GMWJIUTZYRzRnSUNBZ0lDQnlaWFIxY200Z2RXNWtaV1pwYm1Wa08xeHVJQ0I5WEc1OVhHNWNiaThxS2x4dUlDb2dVMmh2Y25RZ1ptOXliV0YwSUdadmNpQmdiWE5nTGx4dUlDcGNiaUFxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0J0YzF4dUlDb2dRSEpsZEhWeWJpQjdVM1J5YVc1bmZWeHVJQ29nUUdGd2FTQndjbWwyWVhSbFhHNGdLaTljYmx4dVpuVnVZM1JwYjI0Z1ptMTBVMmh2Y25Rb2JYTXBJSHRjYmlBZ2RtRnlJRzF6UVdKeklEMGdUV0YwYUM1aFluTW9iWE1wTzF4dUlDQnBaaUFvYlhOQlluTWdQajBnWkNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJOWVhSb0xuSnZkVzVrS0cxeklDOGdaQ2tnS3lBblpDYzdYRzRnSUgxY2JpQWdhV1lnS0cxelFXSnpJRDQ5SUdncElIdGNiaUFnSUNCeVpYUjFjbTRnVFdGMGFDNXliM1Z1WkNodGN5QXZJR2dwSUNzZ0oyZ25PMXh1SUNCOVhHNGdJR2xtSUNodGMwRmljeUErUFNCdEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUUxaGRHZ3VjbTkxYm1Rb2JYTWdMeUJ0S1NBcklDZHRKenRjYmlBZ2ZWeHVJQ0JwWmlBb2JYTkJZbk1nUGowZ2N5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCTllYUm9Mbkp2ZFc1a0tHMXpJQzhnY3lrZ0t5QW5jeWM3WEc0Z0lIMWNiaUFnY21WMGRYSnVJRzF6SUNzZ0oyMXpKenRjYm4xY2JseHVMeW9xWEc0Z0tpQk1iMjVuSUdadmNtMWhkQ0JtYjNJZ1lHMXpZQzVjYmlBcVhHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdiWE5jYmlBcUlFQnlaWFIxY200Z2UxTjBjbWx1WjMxY2JpQXFJRUJoY0drZ2NISnBkbUYwWlZ4dUlDb3ZYRzVjYm1aMWJtTjBhVzl1SUdadGRFeHZibWNvYlhNcElIdGNiaUFnZG1GeUlHMXpRV0p6SUQwZ1RXRjBhQzVoWW5Nb2JYTXBPMXh1SUNCcFppQW9iWE5CWW5NZ1BqMGdaQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQndiSFZ5WVd3b2JYTXNJRzF6UVdKekxDQmtMQ0FuWkdGNUp5azdYRzRnSUgxY2JpQWdhV1lnS0cxelFXSnpJRDQ5SUdncElIdGNiaUFnSUNCeVpYUjFjbTRnY0d4MWNtRnNLRzF6TENCdGMwRmljeXdnYUN3Z0oyaHZkWEluS1R0Y2JpQWdmVnh1SUNCcFppQW9iWE5CWW5NZ1BqMGdiU2tnZTF4dUlDQWdJSEpsZEhWeWJpQndiSFZ5WVd3b2JYTXNJRzF6UVdKekxDQnRMQ0FuYldsdWRYUmxKeWs3WEc0Z0lIMWNiaUFnYVdZZ0tHMXpRV0p6SUQ0OUlITXBJSHRjYmlBZ0lDQnlaWFIxY200Z2NHeDFjbUZzS0cxekxDQnRjMEZpY3l3Z2N5d2dKM05sWTI5dVpDY3BPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQnRjeUFySUNjZ2JYTW5PMXh1ZlZ4dVhHNHZLaXBjYmlBcUlGQnNkWEpoYkdsNllYUnBiMjRnYUdWc2NHVnlMbHh1SUNvdlhHNWNibVoxYm1OMGFXOXVJSEJzZFhKaGJDaHRjeXdnYlhOQlluTXNJRzRzSUc1aGJXVXBJSHRjYmlBZ2RtRnlJR2x6VUd4MWNtRnNJRDBnYlhOQlluTWdQajBnYmlBcUlERXVOVHRjYmlBZ2NtVjBkWEp1SUUxaGRHZ3VjbTkxYm1Rb2JYTWdMeUJ1S1NBcklDY2dKeUFySUc1aGJXVWdLeUFvYVhOUWJIVnlZV3dnUHlBbmN5Y2dPaUFuSnlrN1hHNTlYRzRpTENKY2JpOHFLbHh1SUNvZ1ZHaHBjeUJwY3lCMGFHVWdZMjl0Ylc5dUlHeHZaMmxqSUdadmNpQmliM1JvSUhSb1pTQk9iMlJsTG1weklHRnVaQ0IzWldJZ1luSnZkM05sY2x4dUlDb2dhVzF3YkdWdFpXNTBZWFJwYjI1eklHOW1JR0JrWldKMVp5Z3BZQzVjYmlBcUwxeHVYRzVtZFc1amRHbHZiaUJ6WlhSMWNDaGxibllwSUh0Y2JseDBZM0psWVhSbFJHVmlkV2N1WkdWaWRXY2dQU0JqY21WaGRHVkVaV0oxWnp0Y2JseDBZM0psWVhSbFJHVmlkV2N1WkdWbVlYVnNkQ0E5SUdOeVpXRjBaVVJsWW5Wbk8xeHVYSFJqY21WaGRHVkVaV0oxWnk1amIyVnlZMlVnUFNCamIyVnlZMlU3WEc1Y2RHTnlaV0YwWlVSbFluVm5MbVJwYzJGaWJHVWdQU0JrYVhOaFlteGxPMXh1WEhSamNtVmhkR1ZFWldKMVp5NWxibUZpYkdVZ1BTQmxibUZpYkdVN1hHNWNkR055WldGMFpVUmxZblZuTG1WdVlXSnNaV1FnUFNCbGJtRmliR1ZrTzF4dVhIUmpjbVZoZEdWRVpXSjFaeTVvZFcxaGJtbDZaU0E5SUhKbGNYVnBjbVVvSjIxekp5azdYRzVjZEdOeVpXRjBaVVJsWW5WbkxtUmxjM1J5YjNrZ1BTQmtaWE4wY205NU8xeHVYRzVjZEU5aWFtVmpkQzVyWlhsektHVnVkaWt1Wm05eVJXRmphQ2hyWlhrZ1BUNGdlMXh1WEhSY2RHTnlaV0YwWlVSbFluVm5XMnRsZVYwZ1BTQmxiblpiYTJWNVhUdGNibHgwZlNrN1hHNWNibHgwTHlvcVhHNWNkQ29nVkdobElHTjFjbkpsYm5Sc2VTQmhZM1JwZG1VZ1pHVmlkV2NnYlc5a1pTQnVZVzFsY3l3Z1lXNWtJRzVoYldWeklIUnZJSE5yYVhBdVhHNWNkQ292WEc1Y2JseDBZM0psWVhSbFJHVmlkV2N1Ym1GdFpYTWdQU0JiWFR0Y2JseDBZM0psWVhSbFJHVmlkV2N1YzJ0cGNITWdQU0JiWFR0Y2JseHVYSFF2S2lwY2JseDBLaUJOWVhBZ2IyWWdjM0JsWTJsaGJDQmNJaVZ1WENJZ2FHRnVaR3hwYm1jZ1puVnVZM1JwYjI1ekxDQm1iM0lnZEdobElHUmxZblZuSUZ3aVptOXliV0YwWENJZ1lYSm5kVzFsYm5RdVhHNWNkQ3BjYmx4MEtpQldZV3hwWkNCclpYa2dibUZ0WlhNZ1lYSmxJR0VnYzJsdVoyeGxMQ0JzYjNkbGNpQnZjaUIxY0hCbGNpMWpZWE5sSUd4bGRIUmxjaXdnYVM1bExpQmNJbTVjSWlCaGJtUWdYQ0pPWENJdVhHNWNkQ292WEc1Y2RHTnlaV0YwWlVSbFluVm5MbVp2Y20xaGRIUmxjbk1nUFNCN2ZUdGNibHh1WEhRdktpcGNibHgwS2lCVFpXeGxZM1J6SUdFZ1kyOXNiM0lnWm05eUlHRWdaR1ZpZFdjZ2JtRnRaWE53WVdObFhHNWNkQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJRzVoYldWemNHRmpaU0JVYUdVZ2JtRnRaWE53WVdObElITjBjbWx1WnlCbWIzSWdkR2hsSUdSbFluVm5JR2x1YzNSaGJtTmxJSFJ2SUdKbElHTnZiRzl5WldSY2JseDBLaUJBY21WMGRYSnVJSHRPZFcxaVpYSjhVM1J5YVc1bmZTQkJiaUJCVGxOSklHTnZiRzl5SUdOdlpHVWdabTl5SUhSb1pTQm5hWFpsYmlCdVlXMWxjM0JoWTJWY2JseDBLaUJBWVhCcElIQnlhWFpoZEdWY2JseDBLaTljYmx4MFpuVnVZM1JwYjI0Z2MyVnNaV04wUTI5c2IzSW9ibUZ0WlhOd1lXTmxLU0I3WEc1Y2RGeDBiR1YwSUdoaGMyZ2dQU0F3TzF4dVhHNWNkRngwWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCdVlXMWxjM0JoWTJVdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmx4MFhIUmNkR2hoYzJnZ1BTQW9LR2hoYzJnZ1BEd2dOU2tnTFNCb1lYTm9LU0FySUc1aGJXVnpjR0ZqWlM1amFHRnlRMjlrWlVGMEtHa3BPMXh1WEhSY2RGeDBhR0Z6YUNCOFBTQXdPeUF2THlCRGIyNTJaWEowSUhSdklETXlZbWwwSUdsdWRHVm5aWEpjYmx4MFhIUjlYRzVjYmx4MFhIUnlaWFIxY200Z1kzSmxZWFJsUkdWaWRXY3VZMjlzYjNKelcwMWhkR2d1WVdKektHaGhjMmdwSUNVZ1kzSmxZWFJsUkdWaWRXY3VZMjlzYjNKekxteGxibWQwYUYwN1hHNWNkSDFjYmx4MFkzSmxZWFJsUkdWaWRXY3VjMlZzWldOMFEyOXNiM0lnUFNCelpXeGxZM1JEYjJ4dmNqdGNibHh1WEhRdktpcGNibHgwS2lCRGNtVmhkR1VnWVNCa1pXSjFaMmRsY2lCM2FYUm9JSFJvWlNCbmFYWmxiaUJnYm1GdFpYTndZV05sWUM1Y2JseDBLbHh1WEhRcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCdVlXMWxjM0JoWTJWY2JseDBLaUJBY21WMGRYSnVJSHRHZFc1amRHbHZibjFjYmx4MEtpQkFZWEJwSUhCMVlteHBZMXh1WEhRcUwxeHVYSFJtZFc1amRHbHZiaUJqY21WaGRHVkVaV0oxWnlodVlXMWxjM0JoWTJVcElIdGNibHgwWEhSc1pYUWdjSEpsZGxScGJXVTdYRzVjZEZ4MGJHVjBJR1Z1WVdKc1pVOTJaWEp5YVdSbElEMGdiblZzYkR0Y2JseDBYSFJzWlhRZ2JtRnRaWE53WVdObGMwTmhZMmhsTzF4dVhIUmNkR3hsZENCbGJtRmliR1ZrUTJGamFHVTdYRzVjYmx4MFhIUm1kVzVqZEdsdmJpQmtaV0oxWnlndUxpNWhjbWR6S1NCN1hHNWNkRngwWEhRdkx5QkVhWE5oWW14bFpEOWNibHgwWEhSY2RHbG1JQ2doWkdWaWRXY3VaVzVoWW14bFpDa2dlMXh1WEhSY2RGeDBYSFJ5WlhSMWNtNDdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkR052Ym5OMElITmxiR1lnUFNCa1pXSjFaenRjYmx4dVhIUmNkRngwTHk4Z1UyVjBJR0JrYVdabVlDQjBhVzFsYzNSaGJYQmNibHgwWEhSY2RHTnZibk4wSUdOMWNuSWdQU0JPZFcxaVpYSW9ibVYzSUVSaGRHVW9LU2s3WEc1Y2RGeDBYSFJqYjI1emRDQnRjeUE5SUdOMWNuSWdMU0FvY0hKbGRsUnBiV1VnZkh3Z1kzVnljaWs3WEc1Y2RGeDBYSFJ6Wld4bUxtUnBabVlnUFNCdGN6dGNibHgwWEhSY2RITmxiR1l1Y0hKbGRpQTlJSEJ5WlhaVWFXMWxPMXh1WEhSY2RGeDBjMlZzWmk1amRYSnlJRDBnWTNWeWNqdGNibHgwWEhSY2RIQnlaWFpVYVcxbElEMGdZM1Z5Y2p0Y2JseHVYSFJjZEZ4MFlYSm5jMXN3WFNBOUlHTnlaV0YwWlVSbFluVm5MbU52WlhKalpTaGhjbWR6V3pCZEtUdGNibHh1WEhSY2RGeDBhV1lnS0hSNWNHVnZaaUJoY21keld6QmRJQ0U5UFNBbmMzUnlhVzVuSnlrZ2UxeHVYSFJjZEZ4MFhIUXZMeUJCYm5sMGFHbHVaeUJsYkhObElHeGxkQ2R6SUdsdWMzQmxZM1FnZDJsMGFDQWxUMXh1WEhSY2RGeDBYSFJoY21kekxuVnVjMmhwWm5Rb0p5VlBKeWs3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEM4dklFRndjR3g1SUdGdWVTQmdabTl5YldGMGRHVnljMkFnZEhKaGJuTm1iM0p0WVhScGIyNXpYRzVjZEZ4MFhIUnNaWFFnYVc1a1pYZ2dQU0F3TzF4dVhIUmNkRngwWVhKbmMxc3dYU0E5SUdGeVozTmJNRjB1Y21Wd2JHRmpaU2d2SlNoYllTMTZRUzFhSlYwcEwyY3NJQ2h0WVhSamFDd2dabTl5YldGMEtTQTlQaUI3WEc1Y2RGeDBYSFJjZEM4dklFbG1JSGRsSUdWdVkyOTFiblJsY2lCaGJpQmxjMk5oY0dWa0lDVWdkR2hsYmlCa2IyNG5kQ0JwYm1OeVpXRnpaU0IwYUdVZ1lYSnlZWGtnYVc1a1pYaGNibHgwWEhSY2RGeDBhV1lnS0cxaGRHTm9JRDA5UFNBbkpTVW5LU0I3WEc1Y2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUNjbEp6dGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBYSFJwYm1SbGVDc3JPMXh1WEhSY2RGeDBYSFJqYjI1emRDQm1iM0p0WVhSMFpYSWdQU0JqY21WaGRHVkVaV0oxWnk1bWIzSnRZWFIwWlhKelcyWnZjbTFoZEYwN1hHNWNkRngwWEhSY2RHbG1JQ2gwZVhCbGIyWWdabTl5YldGMGRHVnlJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzVjZEZ4MFhIUmNkRngwWTI5dWMzUWdkbUZzSUQwZ1lYSm5jMXRwYm1SbGVGMDdYRzVjZEZ4MFhIUmNkRngwYldGMFkyZ2dQU0JtYjNKdFlYUjBaWEl1WTJGc2JDaHpaV3htTENCMllXd3BPMXh1WEc1Y2RGeDBYSFJjZEZ4MEx5OGdUbTkzSUhkbElHNWxaV1FnZEc4Z2NtVnRiM1psSUdCaGNtZHpXMmx1WkdWNFhXQWdjMmx1WTJVZ2FYUW5jeUJwYm14cGJtVmtJR2x1SUhSb1pTQmdabTl5YldGMFlGeHVYSFJjZEZ4MFhIUmNkR0Z5WjNNdWMzQnNhV05sS0dsdVpHVjRMQ0F4S1R0Y2JseDBYSFJjZEZ4MFhIUnBibVJsZUMwdE8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkSEpsZEhWeWJpQnRZWFJqYUR0Y2JseDBYSFJjZEgwcE8xeHVYRzVjZEZ4MFhIUXZMeUJCY0hCc2VTQmxibll0YzNCbFkybG1hV01nWm05eWJXRjBkR2x1WnlBb1kyOXNiM0p6TENCbGRHTXVLVnh1WEhSY2RGeDBZM0psWVhSbFJHVmlkV2N1Wm05eWJXRjBRWEpuY3k1allXeHNLSE5sYkdZc0lHRnlaM01wTzF4dVhHNWNkRngwWEhSamIyNXpkQ0JzYjJkR2JpQTlJSE5sYkdZdWJHOW5JSHg4SUdOeVpXRjBaVVJsWW5WbkxteHZaenRjYmx4MFhIUmNkR3h2WjBadUxtRndjR3g1S0hObGJHWXNJR0Z5WjNNcE8xeHVYSFJjZEgxY2JseHVYSFJjZEdSbFluVm5MbTVoYldWemNHRmpaU0E5SUc1aGJXVnpjR0ZqWlR0Y2JseDBYSFJrWldKMVp5NTFjMlZEYjJ4dmNuTWdQU0JqY21WaGRHVkVaV0oxWnk1MWMyVkRiMnh2Y25Nb0tUdGNibHgwWEhSa1pXSjFaeTVqYjJ4dmNpQTlJR055WldGMFpVUmxZblZuTG5ObGJHVmpkRU52Ykc5eUtHNWhiV1Z6Y0dGalpTazdYRzVjZEZ4MFpHVmlkV2N1WlhoMFpXNWtJRDBnWlhoMFpXNWtPMXh1WEhSY2RHUmxZblZuTG1SbGMzUnliM2tnUFNCamNtVmhkR1ZFWldKMVp5NWtaWE4wY205NU95QXZMeUJZV0ZnZ1ZHVnRjRzl5WVhKNUxpQlhhV3hzSUdKbElISmxiVzkyWldRZ2FXNGdkR2hsSUc1bGVIUWdiV0ZxYjNJZ2NtVnNaV0Z6WlM1Y2JseHVYSFJjZEU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGtaV0oxWnl3Z0oyVnVZV0pzWldRbkxDQjdYRzVjZEZ4MFhIUmxiblZ0WlhKaFlteGxPaUIwY25WbExGeHVYSFJjZEZ4MFkyOXVabWxuZFhKaFlteGxPaUJtWVd4elpTeGNibHgwWEhSY2RHZGxkRG9nS0NrZ1BUNGdlMXh1WEhSY2RGeDBYSFJwWmlBb1pXNWhZbXhsVDNabGNuSnBaR1VnSVQwOUlHNTFiR3dwSUh0Y2JseDBYSFJjZEZ4MFhIUnlaWFIxY200Z1pXNWhZbXhsVDNabGNuSnBaR1U3WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MGFXWWdLRzVoYldWemNHRmpaWE5EWVdOb1pTQWhQVDBnWTNKbFlYUmxSR1ZpZFdjdWJtRnRaWE53WVdObGN5a2dlMXh1WEhSY2RGeDBYSFJjZEc1aGJXVnpjR0ZqWlhORFlXTm9aU0E5SUdOeVpXRjBaVVJsWW5WbkxtNWhiV1Z6Y0dGalpYTTdYRzVjZEZ4MFhIUmNkRngwWlc1aFlteGxaRU5oWTJobElEMGdZM0psWVhSbFJHVmlkV2N1Wlc1aFlteGxaQ2h1WVcxbGMzQmhZMlVwTzF4dVhIUmNkRngwWEhSOVhHNWNibHgwWEhSY2RGeDBjbVYwZFhKdUlHVnVZV0pzWldSRFlXTm9aVHRjYmx4MFhIUmNkSDBzWEc1Y2RGeDBYSFJ6WlhRNklIWWdQVDRnZTF4dVhIUmNkRngwWEhSbGJtRmliR1ZQZG1WeWNtbGtaU0E5SUhZN1hHNWNkRngwWEhSOVhHNWNkRngwZlNrN1hHNWNibHgwWEhRdkx5QkZibll0YzNCbFkybG1hV01nYVc1cGRHbGhiR2w2WVhScGIyNGdiRzluYVdNZ1ptOXlJR1JsWW5WbklHbHVjM1JoYm1ObGMxeHVYSFJjZEdsbUlDaDBlWEJsYjJZZ1kzSmxZWFJsUkdWaWRXY3VhVzVwZENBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dVhIUmNkRngwWTNKbFlYUmxSR1ZpZFdjdWFXNXBkQ2hrWldKMVp5azdYRzVjZEZ4MGZWeHVYRzVjZEZ4MGNtVjBkWEp1SUdSbFluVm5PMXh1WEhSOVhHNWNibHgwWm5WdVkzUnBiMjRnWlhoMFpXNWtLRzVoYldWemNHRmpaU3dnWkdWc2FXMXBkR1Z5S1NCN1hHNWNkRngwWTI5dWMzUWdibVYzUkdWaWRXY2dQU0JqY21WaGRHVkVaV0oxWnloMGFHbHpMbTVoYldWemNHRmpaU0FySUNoMGVYQmxiMllnWkdWc2FXMXBkR1Z5SUQwOVBTQW5kVzVrWldacGJtVmtKeUEvSUNjNkp5QTZJR1JsYkdsdGFYUmxjaWtnS3lCdVlXMWxjM0JoWTJVcE8xeHVYSFJjZEc1bGQwUmxZblZuTG14dlp5QTlJSFJvYVhNdWJHOW5PMXh1WEhSY2RISmxkSFZ5YmlCdVpYZEVaV0oxWnp0Y2JseDBmVnh1WEc1Y2RDOHFLbHh1WEhRcUlFVnVZV0pzWlhNZ1lTQmtaV0oxWnlCdGIyUmxJR0o1SUc1aGJXVnpjR0ZqWlhNdUlGUm9hWE1nWTJGdUlHbHVZMngxWkdVZ2JXOWtaWE5jYmx4MEtpQnpaWEJoY21GMFpXUWdZbmtnWVNCamIyeHZiaUJoYm1RZ2QybHNaR05oY21SekxseHVYSFFxWEc1Y2RDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlHNWhiV1Z6Y0dGalpYTmNibHgwS2lCQVlYQnBJSEIxWW14cFkxeHVYSFFxTDF4dVhIUm1kVzVqZEdsdmJpQmxibUZpYkdVb2JtRnRaWE53WVdObGN5a2dlMXh1WEhSY2RHTnlaV0YwWlVSbFluVm5Mbk5oZG1Vb2JtRnRaWE53WVdObGN5azdYRzVjZEZ4MFkzSmxZWFJsUkdWaWRXY3VibUZ0WlhOd1lXTmxjeUE5SUc1aGJXVnpjR0ZqWlhNN1hHNWNibHgwWEhSamNtVmhkR1ZFWldKMVp5NXVZVzFsY3lBOUlGdGRPMXh1WEhSY2RHTnlaV0YwWlVSbFluVm5Mbk5yYVhCeklEMGdXMTA3WEc1Y2JseDBYSFJzWlhRZ2FUdGNibHgwWEhSamIyNXpkQ0J6Y0d4cGRDQTlJQ2gwZVhCbGIyWWdibUZ0WlhOd1lXTmxjeUE5UFQwZ0ozTjBjbWx1WnljZ1B5QnVZVzFsYzNCaFkyVnpJRG9nSnljcExuTndiR2wwS0M5YlhGeHpMRjByTHlrN1hHNWNkRngwWTI5dWMzUWdiR1Z1SUQwZ2MzQnNhWFF1YkdWdVozUm9PMXh1WEc1Y2RGeDBabTl5SUNocElEMGdNRHNnYVNBOElHeGxianNnYVNzcktTQjdYRzVjZEZ4MFhIUnBaaUFvSVhOd2JHbDBXMmxkS1NCN1hHNWNkRngwWEhSY2RDOHZJR2xuYm05eVpTQmxiWEIwZVNCemRISnBibWR6WEc1Y2RGeDBYSFJjZEdOdmJuUnBiblZsTzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhSdVlXMWxjM0JoWTJWeklEMGdjM0JzYVhSYmFWMHVjbVZ3YkdGalpTZ3ZYRndxTDJjc0lDY3VLajhuS1R0Y2JseHVYSFJjZEZ4MGFXWWdLRzVoYldWemNHRmpaWE5iTUYwZ1BUMDlJQ2N0SnlrZ2UxeHVYSFJjZEZ4MFhIUmpjbVZoZEdWRVpXSjFaeTV6YTJsd2N5NXdkWE5vS0c1bGR5QlNaV2RGZUhBb0oxNG5JQ3NnYm1GdFpYTndZV05sY3k1emJHbGpaU2d4S1NBcklDY2tKeWtwTzF4dVhIUmNkRngwZlNCbGJITmxJSHRjYmx4MFhIUmNkRngwWTNKbFlYUmxSR1ZpZFdjdWJtRnRaWE11Y0hWemFDaHVaWGNnVW1WblJYaHdLQ2RlSnlBcklHNWhiV1Z6Y0dGalpYTWdLeUFuSkNjcEtUdGNibHgwWEhSY2RIMWNibHgwWEhSOVhHNWNkSDFjYmx4dVhIUXZLaXBjYmx4MEtpQkVhWE5oWW14bElHUmxZblZuSUc5MWRIQjFkQzVjYmx4MEtseHVYSFFxSUVCeVpYUjFjbTRnZTFOMGNtbHVaMzBnYm1GdFpYTndZV05sYzF4dVhIUXFJRUJoY0drZ2NIVmliR2xqWEc1Y2RDb3ZYRzVjZEdaMWJtTjBhVzl1SUdScGMyRmliR1VvS1NCN1hHNWNkRngwWTI5dWMzUWdibUZ0WlhOd1lXTmxjeUE5SUZ0Y2JseDBYSFJjZEM0dUxtTnlaV0YwWlVSbFluVm5MbTVoYldWekxtMWhjQ2gwYjA1aGJXVnpjR0ZqWlNrc1hHNWNkRngwWEhRdUxpNWpjbVZoZEdWRVpXSjFaeTV6YTJsd2N5NXRZWEFvZEc5T1lXMWxjM0JoWTJVcExtMWhjQ2h1WVcxbGMzQmhZMlVnUFQ0Z0p5MG5JQ3NnYm1GdFpYTndZV05sS1Z4dVhIUmNkRjB1YW05cGJpZ25MQ2NwTzF4dVhIUmNkR055WldGMFpVUmxZblZuTG1WdVlXSnNaU2duSnlrN1hHNWNkRngwY21WMGRYSnVJRzVoYldWemNHRmpaWE03WEc1Y2RIMWNibHh1WEhRdktpcGNibHgwS2lCU1pYUjFjbTV6SUhSeWRXVWdhV1lnZEdobElHZHBkbVZ1SUcxdlpHVWdibUZ0WlNCcGN5QmxibUZpYkdWa0xDQm1ZV3h6WlNCdmRHaGxjbmRwYzJVdVhHNWNkQ3BjYmx4MEtpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ2JtRnRaVnh1WEhRcUlFQnlaWFIxY200Z2UwSnZiMnhsWVc1OVhHNWNkQ29nUUdGd2FTQndkV0pzYVdOY2JseDBLaTljYmx4MFpuVnVZM1JwYjI0Z1pXNWhZbXhsWkNodVlXMWxLU0I3WEc1Y2RGeDBhV1lnS0c1aGJXVmJibUZ0WlM1c1pXNW5kR2dnTFNBeFhTQTlQVDBnSnlvbktTQjdYRzVjZEZ4MFhIUnlaWFIxY200Z2RISjFaVHRjYmx4MFhIUjlYRzVjYmx4MFhIUnNaWFFnYVR0Y2JseDBYSFJzWlhRZ2JHVnVPMXh1WEc1Y2RGeDBabTl5SUNocElEMGdNQ3dnYkdWdUlEMGdZM0psWVhSbFJHVmlkV2N1YzJ0cGNITXViR1Z1WjNSb095QnBJRHdnYkdWdU95QnBLeXNwSUh0Y2JseDBYSFJjZEdsbUlDaGpjbVZoZEdWRVpXSjFaeTV6YTJsd2MxdHBYUzUwWlhOMEtHNWhiV1VwS1NCN1hHNWNkRngwWEhSY2RISmxkSFZ5YmlCbVlXeHpaVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjYmx4MFhIUm1iM0lnS0drZ1BTQXdMQ0JzWlc0Z1BTQmpjbVZoZEdWRVpXSjFaeTV1WVcxbGN5NXNaVzVuZEdnN0lHa2dQQ0JzWlc0N0lHa3JLeWtnZTF4dVhIUmNkRngwYVdZZ0tHTnlaV0YwWlVSbFluVm5MbTVoYldWelcybGRMblJsYzNRb2JtRnRaU2twSUh0Y2JseDBYSFJjZEZ4MGNtVjBkWEp1SUhSeWRXVTdYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZWeHVYRzVjZEZ4MGNtVjBkWEp1SUdaaGJITmxPMXh1WEhSOVhHNWNibHgwTHlvcVhHNWNkQ29nUTI5dWRtVnlkQ0J5WldkbGVIQWdkRzhnYm1GdFpYTndZV05sWEc1Y2RDcGNibHgwS2lCQWNHRnlZVzBnZTFKbFowVjRjSDBnY21WbmVHVndYRzVjZENvZ1FISmxkSFZ5YmlCN1UzUnlhVzVuZlNCdVlXMWxjM0JoWTJWY2JseDBLaUJBWVhCcElIQnlhWFpoZEdWY2JseDBLaTljYmx4MFpuVnVZM1JwYjI0Z2RHOU9ZVzFsYzNCaFkyVW9jbVZuWlhod0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUhKbFoyVjRjQzUwYjFOMGNtbHVaeWdwWEc1Y2RGeDBYSFF1YzNWaWMzUnlhVzVuS0RJc0lISmxaMlY0Y0M1MGIxTjBjbWx1WnlncExteGxibWQwYUNBdElESXBYRzVjZEZ4MFhIUXVjbVZ3YkdGalpTZ3ZYRnd1WEZ3cVhGdy9KQzhzSUNjcUp5azdYRzVjZEgxY2JseHVYSFF2S2lwY2JseDBLaUJEYjJWeVkyVWdZSFpoYkdBdVhHNWNkQ3BjYmx4MEtpQkFjR0Z5WVcwZ2UwMXBlR1ZrZlNCMllXeGNibHgwS2lCQWNtVjBkWEp1SUh0TmFYaGxaSDFjYmx4MEtpQkFZWEJwSUhCeWFYWmhkR1ZjYmx4MEtpOWNibHgwWm5WdVkzUnBiMjRnWTI5bGNtTmxLSFpoYkNrZ2UxeHVYSFJjZEdsbUlDaDJZV3dnYVc1emRHRnVZMlZ2WmlCRmNuSnZjaWtnZTF4dVhIUmNkRngwY21WMGRYSnVJSFpoYkM1emRHRmpheUI4ZkNCMllXd3ViV1Z6YzJGblpUdGNibHgwWEhSOVhHNWNkRngwY21WMGRYSnVJSFpoYkR0Y2JseDBmVnh1WEc1Y2RDOHFLbHh1WEhRcUlGaFlXQ0JFVHlCT1QxUWdWVk5GTGlCVWFHbHpJR2x6SUdFZ2RHVnRjRzl5WVhKNUlITjBkV0lnWm5WdVkzUnBiMjR1WEc1Y2RDb2dXRmhZSUVsMElGZEpURXdnWW1VZ2NtVnRiM1psWkNCcGJpQjBhR1VnYm1WNGRDQnRZV3B2Y2lCeVpXeGxZWE5sTGx4dVhIUXFMMXh1WEhSbWRXNWpkR2x2YmlCa1pYTjBjbTk1S0NrZ2UxeHVYSFJjZEdOdmJuTnZiR1V1ZDJGeWJpZ25TVzV6ZEdGdVkyVWdiV1YwYUc5a0lHQmtaV0oxWnk1a1pYTjBjbTk1S0NsZ0lHbHpJR1JsY0hKbFkyRjBaV1FnWVc1a0lHNXZJR3h2Ym1kbGNpQmtiMlZ6SUdGdWVYUm9hVzVuTGlCSmRDQjNhV3hzSUdKbElISmxiVzkyWldRZ2FXNGdkR2hsSUc1bGVIUWdiV0ZxYjNJZ2RtVnljMmx2YmlCdlppQmdaR1ZpZFdkZ0xpY3BPMXh1WEhSOVhHNWNibHgwWTNKbFlYUmxSR1ZpZFdjdVpXNWhZbXhsS0dOeVpXRjBaVVJsWW5WbkxteHZZV1FvS1NrN1hHNWNibHgwY21WMGRYSnVJR055WldGMFpVUmxZblZuTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSE5sZEhWd08xeHVJaXdpTHlvZ1pYTnNhVzUwTFdWdWRpQmljbTkzYzJWeUlDb3ZYRzVjYmk4cUtseHVJQ29nVkdocGN5QnBjeUIwYUdVZ2QyVmlJR0p5YjNkelpYSWdhVzF3YkdWdFpXNTBZWFJwYjI0Z2IyWWdZR1JsWW5WbktDbGdMbHh1SUNvdlhHNWNibVY0Y0c5eWRITXVabTl5YldGMFFYSm5jeUE5SUdadmNtMWhkRUZ5WjNNN1hHNWxlSEJ2Y25SekxuTmhkbVVnUFNCellYWmxPMXh1Wlhod2IzSjBjeTVzYjJGa0lEMGdiRzloWkR0Y2JtVjRjRzl5ZEhNdWRYTmxRMjlzYjNKeklEMGdkWE5sUTI5c2IzSnpPMXh1Wlhod2IzSjBjeTV6ZEc5eVlXZGxJRDBnYkc5allXeHpkRzl5WVdkbEtDazdYRzVsZUhCdmNuUnpMbVJsYzNSeWIza2dQU0FvS0NrZ1BUNGdlMXh1WEhSc1pYUWdkMkZ5Ym1Wa0lEMGdabUZzYzJVN1hHNWNibHgwY21WMGRYSnVJQ2dwSUQwK0lIdGNibHgwWEhScFppQW9JWGRoY201bFpDa2dlMXh1WEhSY2RGeDBkMkZ5Ym1Wa0lEMGdkSEoxWlR0Y2JseDBYSFJjZEdOdmJuTnZiR1V1ZDJGeWJpZ25TVzV6ZEdGdVkyVWdiV1YwYUc5a0lHQmtaV0oxWnk1a1pYTjBjbTk1S0NsZ0lHbHpJR1JsY0hKbFkyRjBaV1FnWVc1a0lHNXZJR3h2Ym1kbGNpQmtiMlZ6SUdGdWVYUm9hVzVuTGlCSmRDQjNhV3hzSUdKbElISmxiVzkyWldRZ2FXNGdkR2hsSUc1bGVIUWdiV0ZxYjNJZ2RtVnljMmx2YmlCdlppQmdaR1ZpZFdkZ0xpY3BPMXh1WEhSY2RIMWNibHgwZlR0Y2JuMHBLQ2s3WEc1Y2JpOHFLbHh1SUNvZ1EyOXNiM0p6TGx4dUlDb3ZYRzVjYm1WNGNHOXlkSE11WTI5c2IzSnpJRDBnVzF4dVhIUW5JekF3TURCRFF5Y3NYRzVjZENjak1EQXdNRVpHSnl4Y2JseDBKeU13TURNelEwTW5MRnh1WEhRbkl6QXdNek5HUmljc1hHNWNkQ2NqTURBMk5rTkRKeXhjYmx4MEp5TXdNRFkyUmtZbkxGeHVYSFFuSXpBd09UbERReWNzWEc1Y2RDY2pNREE1T1VaR0p5eGNibHgwSnlNd01FTkRNREFuTEZ4dVhIUW5JekF3UTBNek15Y3NYRzVjZENjak1EQkRRelkySnl4Y2JseDBKeU13TUVORE9Ua25MRnh1WEhRbkl6QXdRME5EUXljc1hHNWNkQ2NqTURCRFEwWkdKeXhjYmx4MEp5TXpNekF3UTBNbkxGeHVYSFFuSXpNek1EQkdSaWNzWEc1Y2RDY2pNek16TTBOREp5eGNibHgwSnlNek16TXpSa1luTEZ4dVhIUW5Jek16TmpaRFF5Y3NYRzVjZENjak16TTJOa1pHSnl4Y2JseDBKeU16TXprNVEwTW5MRnh1WEhRbkl6TXpPVGxHUmljc1hHNWNkQ2NqTXpORFF6QXdKeXhjYmx4MEp5TXpNME5ETXpNbkxGeHVYSFFuSXpNelEwTTJOaWNzWEc1Y2RDY2pNek5EUXprNUp5eGNibHgwSnlNek0wTkRRME1uTEZ4dVhIUW5Jek16UTBOR1JpY3NYRzVjZENjak5qWXdNRU5ESnl4Y2JseDBKeU0yTmpBd1JrWW5MRnh1WEhRbkl6WTJNek5EUXljc1hHNWNkQ2NqTmpZek0wWkdKeXhjYmx4MEp5TTJOa05ETURBbkxGeHVYSFFuSXpZMlEwTXpNeWNzWEc1Y2RDY2pPVGt3TUVOREp5eGNibHgwSnlNNU9UQXdSa1luTEZ4dVhIUW5Jems1TXpORFF5Y3NYRzVjZENjak9Ua3pNMFpHSnl4Y2JseDBKeU01T1VORE1EQW5MRnh1WEhRbkl6azVRME16TXljc1hHNWNkQ2NqUTBNd01EQXdKeXhjYmx4MEp5TkRRekF3TXpNbkxGeHVYSFFuSTBORE1EQTJOaWNzWEc1Y2RDY2pRME13TURrNUp5eGNibHgwSnlORFF6QXdRME1uTEZ4dVhIUW5JME5ETURCR1JpY3NYRzVjZENjalEwTXpNekF3Snl4Y2JseDBKeU5EUXpNek16TW5MRnh1WEhRbkkwTkRNek0yTmljc1hHNWNkQ2NqUTBNek16azVKeXhjYmx4MEp5TkRRek16UTBNbkxGeHVYSFFuSTBORE16TkdSaWNzWEc1Y2RDY2pRME0yTmpBd0p5eGNibHgwSnlORFF6WTJNek1uTEZ4dVhIUW5JME5ET1Rrd01DY3NYRzVjZENjalEwTTVPVE16Snl4Y2JseDBKeU5EUTBORE1EQW5MRnh1WEhRbkkwTkRRME16TXljc1hHNWNkQ2NqUmtZd01EQXdKeXhjYmx4MEp5TkdSakF3TXpNbkxGeHVYSFFuSTBaR01EQTJOaWNzWEc1Y2RDY2pSa1l3TURrNUp5eGNibHgwSnlOR1JqQXdRME1uTEZ4dVhIUW5JMFpHTURCR1JpY3NYRzVjZENjalJrWXpNekF3Snl4Y2JseDBKeU5HUmpNek16TW5MRnh1WEhRbkkwWkdNek0yTmljc1hHNWNkQ2NqUmtZek16azVKeXhjYmx4MEp5TkdSak16UTBNbkxGeHVYSFFuSTBaR016TkdSaWNzWEc1Y2RDY2pSa1kyTmpBd0p5eGNibHgwSnlOR1JqWTJNek1uTEZ4dVhIUW5JMFpHT1Rrd01DY3NYRzVjZENjalJrWTVPVE16Snl4Y2JseDBKeU5HUmtORE1EQW5MRnh1WEhRbkkwWkdRME16TXlkY2JsMDdYRzVjYmk4cUtseHVJQ29nUTNWeWNtVnVkR3g1SUc5dWJIa2dWMlZpUzJsMExXSmhjMlZrSUZkbFlpQkpibk53WldOMGIzSnpMQ0JHYVhKbFptOTRJRDQ5SUhZek1TeGNiaUFxSUdGdVpDQjBhR1VnUm1seVpXSjFaeUJsZUhSbGJuTnBiMjRnS0dGdWVTQkdhWEpsWm05NElIWmxjbk5wYjI0cElHRnlaU0JyYm05M2JseHVJQ29nZEc4Z2MzVndjRzl5ZENCY0lpVmpYQ0lnUTFOVElHTjFjM1J2YldsNllYUnBiMjV6TGx4dUlDcGNiaUFxSUZSUFJFODZJR0ZrWkNCaElHQnNiMk5oYkZOMGIzSmhaMlZnSUhaaGNtbGhZbXhsSUhSdklHVjRjR3hwWTJsMGJIa2daVzVoWW14bEwyUnBjMkZpYkdVZ1kyOXNiM0p6WEc0Z0tpOWNibHh1THk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUdOdmJYQnNaWGhwZEhsY2JtWjFibU4wYVc5dUlIVnpaVU52Ykc5eWN5Z3BJSHRjYmx4MEx5OGdUa0k2SUVsdUlHRnVJRVZzWldOMGNtOXVJSEJ5Wld4dllXUWdjMk55YVhCMExDQmtiMk4xYldWdWRDQjNhV3hzSUdKbElHUmxabWx1WldRZ1luVjBJRzV2ZENCbWRXeHNlVnh1WEhRdkx5QnBibWwwYVdGc2FYcGxaQzRnVTJsdVkyVWdkMlVnYTI1dmR5QjNaU2R5WlNCcGJpQkRhSEp2YldVc0lIZGxKMnhzSUdwMWMzUWdaR1YwWldOMElIUm9hWE1nWTJGelpWeHVYSFF2THlCbGVIQnNhV05wZEd4NVhHNWNkR2xtSUNoMGVYQmxiMllnZDJsdVpHOTNJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QW1KaUIzYVc1a2IzY3VjSEp2WTJWemN5QW1KaUFvZDJsdVpHOTNMbkJ5YjJObGMzTXVkSGx3WlNBOVBUMGdKM0psYm1SbGNtVnlKeUI4ZkNCM2FXNWtiM2N1Y0hKdlkyVnpjeTVmWDI1M2FuTXBLU0I3WEc1Y2RGeDBjbVYwZFhKdUlIUnlkV1U3WEc1Y2RIMWNibHh1WEhRdkx5QkpiblJsY201bGRDQkZlSEJzYjNKbGNpQmhibVFnUldSblpTQmtieUJ1YjNRZ2MzVndjRzl5ZENCamIyeHZjbk11WEc1Y2RHbG1JQ2gwZVhCbGIyWWdibUYyYVdkaGRHOXlJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QW1KaUJ1WVhacFoyRjBiM0l1ZFhObGNrRm5aVzUwSUNZbUlHNWhkbWxuWVhSdmNpNTFjMlZ5UVdkbGJuUXVkRzlNYjNkbGNrTmhjMlVvS1M1dFlYUmphQ2d2S0dWa1oyVjhkSEpwWkdWdWRDbGNYQzhvWEZ4a0t5a3ZLU2tnZTF4dVhIUmNkSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseDBmVnh1WEc1Y2RDOHZJRWx6SUhkbFltdHBkRDhnYUhSMGNEb3ZMM04wWVdOcmIzWmxjbVpzYjNjdVkyOXRMMkV2TVRZME5UazJNRFl2TXpjMk56Y3pYRzVjZEM4dklHUnZZM1Z0Wlc1MElHbHpJSFZ1WkdWbWFXNWxaQ0JwYmlCeVpXRmpkQzF1WVhScGRtVTZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzltWVdObFltOXZheTl5WldGamRDMXVZWFJwZG1VdmNIVnNiQzh4TmpNeVhHNWNkSEpsZEhWeWJpQW9kSGx3Wlc5bUlHUnZZM1Z0Wlc1MElDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUppQmtiMk4xYldWdWRDNWtiMk4xYldWdWRFVnNaVzFsYm5RZ0ppWWdaRzlqZFcxbGJuUXVaRzlqZFcxbGJuUkZiR1Z0Wlc1MExuTjBlV3hsSUNZbUlHUnZZM1Z0Wlc1MExtUnZZM1Z0Wlc1MFJXeGxiV1Z1ZEM1emRIbHNaUzVYWldKcmFYUkJjSEJsWVhKaGJtTmxLU0I4ZkZ4dVhIUmNkQzh2SUVseklHWnBjbVZpZFdjL0lHaDBkSEE2THk5emRHRmphMjkyWlhKbWJHOTNMbU52YlM5aEx6TTVPREV5TUM4ek56WTNOek5jYmx4MFhIUW9kSGx3Wlc5bUlIZHBibVJ2ZHlBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ2QybHVaRzkzTG1OdmJuTnZiR1VnSmlZZ0tIZHBibVJ2ZHk1amIyNXpiMnhsTG1acGNtVmlkV2NnZkh3Z0tIZHBibVJ2ZHk1amIyNXpiMnhsTG1WNFkyVndkR2x2YmlBbUppQjNhVzVrYjNjdVkyOXVjMjlzWlM1MFlXSnNaU2twS1NCOGZGeHVYSFJjZEM4dklFbHpJR1pwY21WbWIzZ2dQajBnZGpNeFAxeHVYSFJjZEM4dklHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtMXZlbWxzYkdFdWIzSm5MMlZ1TFZWVEwyUnZZM012Vkc5dmJITXZWMlZpWDBOdmJuTnZiR1VqVTNSNWJHbHVaMTl0WlhOellXZGxjMXh1WEhSY2RDaDBlWEJsYjJZZ2JtRjJhV2RoZEc5eUlDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUppQnVZWFpwWjJGMGIzSXVkWE5sY2tGblpXNTBJQ1ltSUc1aGRtbG5ZWFJ2Y2k1MWMyVnlRV2RsYm5RdWRHOU1iM2RsY2tOaGMyVW9LUzV0WVhSamFDZ3ZabWx5WldadmVGeGNMeWhjWEdRcktTOHBJQ1ltSUhCaGNuTmxTVzUwS0ZKbFowVjRjQzRrTVN3Z01UQXBJRDQ5SURNeEtTQjhmRnh1WEhSY2RDOHZJRVJ2ZFdKc1pTQmphR1ZqYXlCM1pXSnJhWFFnYVc0Z2RYTmxja0ZuWlc1MElHcDFjM1FnYVc0Z1kyRnpaU0IzWlNCaGNtVWdhVzRnWVNCM2IzSnJaWEpjYmx4MFhIUW9kSGx3Wlc5bUlHNWhkbWxuWVhSdmNpQWhQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdibUYyYVdkaGRHOXlMblZ6WlhKQloyVnVkQ0FtSmlCdVlYWnBaMkYwYjNJdWRYTmxja0ZuWlc1MExuUnZURzkzWlhKRFlYTmxLQ2t1YldGMFkyZ29MMkZ3Y0d4bGQyVmlhMmwwWEZ3dktGeGNaQ3NwTHlrcE8xeHVmVnh1WEc0dktpcGNiaUFxSUVOdmJHOXlhWHBsSUd4dlp5QmhjbWQxYldWdWRITWdhV1lnWlc1aFlteGxaQzVjYmlBcVhHNGdLaUJBWVhCcElIQjFZbXhwWTF4dUlDb3ZYRzVjYm1aMWJtTjBhVzl1SUdadmNtMWhkRUZ5WjNNb1lYSm5jeWtnZTF4dVhIUmhjbWR6V3pCZElEMGdLSFJvYVhNdWRYTmxRMjlzYjNKeklEOGdKeVZqSnlBNklDY25LU0FyWEc1Y2RGeDBkR2hwY3k1dVlXMWxjM0JoWTJVZ0sxeHVYSFJjZENoMGFHbHpMblZ6WlVOdmJHOXljeUEvSUNjZ0pXTW5JRG9nSnlBbktTQXJYRzVjZEZ4MFlYSm5jMXN3WFNBclhHNWNkRngwS0hSb2FYTXVkWE5sUTI5c2IzSnpJRDhnSnlWaklDY2dPaUFuSUNjcElDdGNibHgwWEhRbkt5Y2dLeUJ0YjJSMWJHVXVaWGh3YjNKMGN5NW9kVzFoYm1sNlpTaDBhR2x6TG1ScFptWXBPMXh1WEc1Y2RHbG1JQ2doZEdocGN5NTFjMlZEYjJ4dmNuTXBJSHRjYmx4MFhIUnlaWFIxY200N1hHNWNkSDFjYmx4dVhIUmpiMjV6ZENCaklEMGdKMk52Ykc5eU9pQW5JQ3NnZEdocGN5NWpiMnh2Y2p0Y2JseDBZWEpuY3k1emNHeHBZMlVvTVN3Z01Dd2dZeXdnSjJOdmJHOXlPaUJwYm1obGNtbDBKeWs3WEc1Y2JseDBMeThnVkdobElHWnBibUZzSUZ3aUpXTmNJaUJwY3lCemIyMWxkMmhoZENCMGNtbGphM2tzSUdKbFkyRjFjMlVnZEdobGNtVWdZMjkxYkdRZ1ltVWdiM1JvWlhKY2JseDBMeThnWVhKbmRXMWxiblJ6SUhCaGMzTmxaQ0JsYVhSb1pYSWdZbVZtYjNKbElHOXlJR0ZtZEdWeUlIUm9aU0FsWXl3Z2MyOGdkMlVnYm1WbFpDQjBiMXh1WEhRdkx5Qm1hV2QxY21VZ2IzVjBJSFJvWlNCamIzSnlaV04wSUdsdVpHVjRJSFJ2SUdsdWMyVnlkQ0IwYUdVZ1ExTlRJR2x1ZEc5Y2JseDBiR1YwSUdsdVpHVjRJRDBnTUR0Y2JseDBiR1YwSUd4aGMzUkRJRDBnTUR0Y2JseDBZWEpuYzFzd1hTNXlaWEJzWVdObEtDOGxXMkV0ZWtFdFdpVmRMMmNzSUcxaGRHTm9JRDArSUh0Y2JseDBYSFJwWmlBb2JXRjBZMmdnUFQwOUlDY2xKU2NwSUh0Y2JseDBYSFJjZEhKbGRIVnlianRjYmx4MFhIUjlYRzVjZEZ4MGFXNWtaWGdyS3p0Y2JseDBYSFJwWmlBb2JXRjBZMmdnUFQwOUlDY2xZeWNwSUh0Y2JseDBYSFJjZEM4dklGZGxJRzl1YkhrZ1lYSmxJR2x1ZEdWeVpYTjBaV1FnYVc0Z2RHaGxJQ3BzWVhOMEtpQWxZMXh1WEhSY2RGeDBMeThnS0hSb1pTQjFjMlZ5SUcxaGVTQm9ZWFpsSUhCeWIzWnBaR1ZrSUhSb1pXbHlJRzkzYmlsY2JseDBYSFJjZEd4aGMzUkRJRDBnYVc1a1pYZzdYRzVjZEZ4MGZWeHVYSFI5S1R0Y2JseHVYSFJoY21kekxuTndiR2xqWlNoc1lYTjBReXdnTUN3Z1l5azdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1NXNTJiMnRsY3lCZ1kyOXVjMjlzWlM1a1pXSjFaeWdwWUNCM2FHVnVJR0YyWVdsc1lXSnNaUzVjYmlBcUlFNXZMVzl3SUhkb1pXNGdZR052Ym5OdmJHVXVaR1ZpZFdkZ0lHbHpJRzV2ZENCaElGd2lablZ1WTNScGIyNWNJaTVjYmlBcUlFbG1JR0JqYjI1emIyeGxMbVJsWW5WbllDQnBjeUJ1YjNRZ1lYWmhhV3hoWW14bExDQm1ZV3hzY3lCaVlXTnJYRzRnS2lCMGJ5QmdZMjl1YzI5c1pTNXNiMmRnTGx4dUlDcGNiaUFxSUVCaGNHa2djSFZpYkdsalhHNGdLaTljYm1WNGNHOXlkSE11Ykc5bklEMGdZMjl1YzI5c1pTNWtaV0oxWnlCOGZDQmpiMjV6YjJ4bExteHZaeUI4ZkNBb0tDa2dQVDRnZTMwcE8xeHVYRzR2S2lwY2JpQXFJRk5oZG1VZ1lHNWhiV1Z6Y0dGalpYTmdMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdVM1J5YVc1bmZTQnVZVzFsYzNCaFkyVnpYRzRnS2lCQVlYQnBJSEJ5YVhaaGRHVmNiaUFxTDF4dVpuVnVZM1JwYjI0Z2MyRjJaU2h1WVcxbGMzQmhZMlZ6S1NCN1hHNWNkSFJ5ZVNCN1hHNWNkRngwYVdZZ0tHNWhiV1Z6Y0dGalpYTXBJSHRjYmx4MFhIUmNkR1Y0Y0c5eWRITXVjM1J2Y21GblpTNXpaWFJKZEdWdEtDZGtaV0oxWnljc0lHNWhiV1Z6Y0dGalpYTXBPMXh1WEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSbGVIQnZjblJ6TG5OMGIzSmhaMlV1Y21WdGIzWmxTWFJsYlNnblpHVmlkV2NuS1R0Y2JseDBYSFI5WEc1Y2RIMGdZMkYwWTJnZ0tHVnljbTl5S1NCN1hHNWNkRngwTHk4Z1UzZGhiR3h2ZDF4dVhIUmNkQzh2SUZoWVdDQW9RRkZwZUMwcElITm9iM1ZzWkNCM1pTQmlaU0JzYjJkbmFXNW5JSFJvWlhObFAxeHVYSFI5WEc1OVhHNWNiaThxS2x4dUlDb2dURzloWkNCZ2JtRnRaWE53WVdObGMyQXVYRzRnS2x4dUlDb2dRSEpsZEhWeWJpQjdVM1J5YVc1bmZTQnlaWFIxY201eklIUm9aU0J3Y21WMmFXOTFjMng1SUhCbGNuTnBjM1JsWkNCa1pXSjFaeUJ0YjJSbGMxeHVJQ29nUUdGd2FTQndjbWwyWVhSbFhHNGdLaTljYm1aMWJtTjBhVzl1SUd4dllXUW9LU0I3WEc1Y2RHeGxkQ0J5TzF4dVhIUjBjbmtnZTF4dVhIUmNkSElnUFNCbGVIQnZjblJ6TG5OMGIzSmhaMlV1WjJWMFNYUmxiU2duWkdWaWRXY25LVHRjYmx4MGZTQmpZWFJqYUNBb1pYSnliM0lwSUh0Y2JseDBYSFF2THlCVGQyRnNiRzkzWEc1Y2RGeDBMeThnV0ZoWUlDaEFVV2w0TFNrZ2MyaHZkV3hrSUhkbElHSmxJR3h2WjJkcGJtY2dkR2hsYzJVL1hHNWNkSDFjYmx4dVhIUXZMeUJKWmlCa1pXSjFaeUJwYzI0bmRDQnpaWFFnYVc0Z1RGTXNJR0Z1WkNCM1pTZHlaU0JwYmlCRmJHVmpkSEp2Yml3Z2RISjVJSFJ2SUd4dllXUWdKRVJGUWxWSFhHNWNkR2xtSUNnaGNpQW1KaUIwZVhCbGIyWWdjSEp2WTJWemN5QWhQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdKMlZ1ZGljZ2FXNGdjSEp2WTJWemN5a2dlMXh1WEhSY2RISWdQU0J3Y205alpYTnpMbVZ1ZGk1RVJVSlZSenRjYmx4MGZWeHVYRzVjZEhKbGRIVnliaUJ5TzF4dWZWeHVYRzR2S2lwY2JpQXFJRXh2WTJGc2MzUnZjbUZuWlNCaGRIUmxiWEIwY3lCMGJ5QnlaWFIxY200Z2RHaGxJR3h2WTJGc2MzUnZjbUZuWlM1Y2JpQXFYRzRnS2lCVWFHbHpJR2x6SUc1bFkyVnpjMkZ5ZVNCaVpXTmhkWE5sSUhOaFptRnlhU0IwYUhKdmQzTmNiaUFxSUhkb1pXNGdZU0IxYzJWeUlHUnBjMkZpYkdWeklHTnZiMnRwWlhNdmJHOWpZV3h6ZEc5eVlXZGxYRzRnS2lCaGJtUWdlVzkxSUdGMGRHVnRjSFFnZEc4Z1lXTmpaWE56SUdsMExseHVJQ3BjYmlBcUlFQnlaWFIxY200Z2UweHZZMkZzVTNSdmNtRm5aWDFjYmlBcUlFQmhjR2tnY0hKcGRtRjBaVnh1SUNvdlhHNWNibVoxYm1OMGFXOXVJR3h2WTJGc2MzUnZjbUZuWlNncElIdGNibHgwZEhKNUlIdGNibHgwWEhRdkx5QlVWazFNUzJsMElDaEJjSEJzWlNCVVZpQktVeUJTZFc1MGFXMWxLU0JrYjJWeklHNXZkQ0JvWVhabElHRWdkMmx1Wkc5M0lHOWlhbVZqZEN3Z2FuVnpkQ0JzYjJOaGJGTjBiM0poWjJVZ2FXNGdkR2hsSUdkc2IySmhiQ0JqYjI1MFpYaDBYRzVjZEZ4MEx5OGdWR2hsSUVKeWIzZHpaWElnWVd4emJ5Qm9ZWE1nYkc5allXeFRkRzl5WVdkbElHbHVJSFJvWlNCbmJHOWlZV3dnWTI5dWRHVjRkQzVjYmx4MFhIUnlaWFIxY200Z2JHOWpZV3hUZEc5eVlXZGxPMXh1WEhSOUlHTmhkR05vSUNobGNuSnZjaWtnZTF4dVhIUmNkQzh2SUZOM1lXeHNiM2RjYmx4MFhIUXZMeUJZV0ZnZ0tFQlJhWGd0S1NCemFHOTFiR1FnZDJVZ1ltVWdiRzluWjJsdVp5QjBhR1Z6WlQ5Y2JseDBmVnh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlISmxjWFZwY21Vb0p5NHZZMjl0Ylc5dUp5a29aWGh3YjNKMGN5azdYRzVjYm1OdmJuTjBJSHRtYjNKdFlYUjBaWEp6ZlNBOUlHMXZaSFZzWlM1bGVIQnZjblJ6TzF4dVhHNHZLaXBjYmlBcUlFMWhjQ0FsYWlCMGJ5QmdTbE5QVGk1emRISnBibWRwWm5rb0tXQXNJSE5wYm1ObElHNXZJRmRsWWlCSmJuTndaV04wYjNKeklHUnZJSFJvWVhRZ1lua2daR1ZtWVhWc2RDNWNiaUFxTDF4dVhHNW1iM0p0WVhSMFpYSnpMbW9nUFNCbWRXNWpkR2x2YmlBb2Rpa2dlMXh1WEhSMGNua2dlMXh1WEhSY2RISmxkSFZ5YmlCS1UwOU9Mbk4wY21sdVoybG1lU2gyS1R0Y2JseDBmU0JqWVhSamFDQW9aWEp5YjNJcElIdGNibHgwWEhSeVpYUjFjbTRnSjF0VmJtVjRjR1ZqZEdWa1NsTlBUbEJoY25ObFJYSnliM0pkT2lBbklDc2daWEp5YjNJdWJXVnpjMkZuWlR0Y2JseDBmVnh1ZlR0Y2JpSXNJaThxS2x4dUlDb2dRMjl3ZVhKcFoyaDBJREl3TWpFZ1FXUnZZbVZjYmlBcUlFRnNiQ0JTYVdkb2RITWdVbVZ6WlhKMlpXUXVYRzRnS2x4dUlDb2dUazlVU1VORk9pQkJaRzlpWlNCd1pYSnRhWFJ6SUhsdmRTQjBieUIxYzJVc0lHMXZaR2xtZVN3Z1lXNWtJR1JwYzNSeWFXSjFkR1VnZEdocGN5Qm1hV3hsSUdsdVhHNGdLaUJoWTJOdmNtUmhibU5sSUhkcGRHZ2dkR2hsSUhSbGNtMXpJRzltSUhSb1pTQkJaRzlpWlNCc2FXTmxibk5sSUdGbmNtVmxiV1Z1ZENCaFkyTnZiWEJoYm5scGJtZGNiaUFxSUdsMExseHVJQ292WEc1Y2JtbHRjRzl5ZENCN0lFbHVaM0psWkdsbGJuUWdmU0JtY205dElDZEFZekp3WVM5aFpHOWlaUzEwYjI5c2EybDBKenRjYmx4dVpYaHdiM0owSUdOc1lYTnpJRWx1WTI5dGNHRjBhV0pzWlVKeWIzZHpaWEpGY25KdmNpQmxlSFJsYm1SeklFVnljbTl5SUh0Y2JpQWdZMjl1YzNSeWRXTjBiM0lvS1NCN1hHNGdJQ0FnYzNWd1pYSW9YRzRnSUNBZ0lDQmNJbFJvWlNCaWNtOTNjMlZ5SUhsdmRTQmhjbVVnZFhOcGJtY2dhWE51SjNRZ1kyOXRjR0YwYVdKc1pTQjNhWFJvSUhSb2FYTWdZWEJ3YkdsallYUnBiMjRzSUc5eUlFaFVWRkJUSUdseklHNXZkQ0JpWldsdVp5QjFjMlZrSUc5dUlHRWdibTl1TFd4dlkyRnNhRzl6ZENCa2IyMWhhVzR1WENJc1hHNGdJQ0FnS1R0Y2JpQWdJQ0IwYUdsekxtNWhiV1VnUFNCMGFHbHpMbU52Ym5OMGNuVmpkRzl5TG01aGJXVTdYRzRnSUgxY2JuMWNibHh1Wlhod2IzSjBJR05zWVhOeklFMXBjM05wYm1kWFlYTnRVMjkxY21ObFJYSnliM0lnWlhoMFpXNWtjeUJGY25KdmNpQjdYRzRnSUdOdmJuTjBjblZqZEc5eUtDa2dlMXh1SUNBZ0lITjFjR1Z5S0NkT2J5QlhaV0pCYzNObGJXSnNlU0J6YjNWeVkyVWdWVkpNSUhkaGN5QndZWE56WldRbktUdGNiaUFnSUNCMGFHbHpMbTVoYldVZ1BTQjBhR2x6TG1OdmJuTjBjblZqZEc5eUxtNWhiV1U3WEc0Z0lIMWNibjFjYmx4dVpYaHdiM0owSUdOc1lYTnpJRTFwYzNOcGJtZFhiM0pyWlhKVGIzVnlZMlZGY25KdmNpQmxlSFJsYm1SeklFVnljbTl5SUh0Y2JpQWdZMjl1YzNSeWRXTjBiM0lvS1NCN1hHNGdJQ0FnYzNWd1pYSW9KMDV2SUhkbFlpQjNiM0pyWlhJZ2MyOTFjbU5sSUZWU1RDQjNZWE1nY0dGemMyVmtKeWs3WEc0Z0lDQWdkR2hwY3k1dVlXMWxJRDBnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaTV1WVcxbE8xeHVJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCSmJuWmhiR2xrVjI5eWEyVnlVMjkxY21ObFJYSnliM0lnWlhoMFpXNWtjeUJGY25KdmNpQjdYRzRnSUhCMVlteHBZeUIxY213NklITjBjbWx1Wnp0Y2JseHVJQ0J3ZFdKc2FXTWdjbVZ6Y0c5dWMyVTZJRkpsYzNCdmJuTmxJSHdnYm5Wc2JEdGNibHh1SUNCamIyNXpkSEoxWTNSdmNpaDFjbXc2SUhOMGNtbHVaeXdnY21Wek9pQlNaWE53YjI1elpTQjhJRzUxYkd3c0lHOXdkR2x2Ym5NL09pQkZjbkp2Y2s5d2RHbHZibk1wSUh0Y2JpQWdJQ0J6ZFhCbGNpaGdRMjkxYkdRZ2JtOTBJR1psZEdOb0lIZGxZaUIzYjNKclpYSWdabkp2YlNBa2UzVnliSDFnTENCdmNIUnBiMjV6S1R0Y2JpQWdJQ0IwYUdsekxtNWhiV1VnUFNCMGFHbHpMbU52Ym5OMGNuVmpkRzl5TG01aGJXVTdYRzRnSUNBZ2RHaHBjeTUxY213Z1BTQjFjbXc3WEc0Z0lDQWdkR2hwY3k1eVpYTndiMjV6WlNBOUlISmxjenRjYmlBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWTJ4aGMzTWdTVzUyWVd4cFpFbHVjSFYwUlhKeWIzSWdaWGgwWlc1a2N5QkZjbkp2Y2lCN1hHNGdJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHVJQ0FnSUhOMWNHVnlLR0JKYm5aaGJHbGtJR2x1Y0hWMElIQmhjM05sWkdBcE8xeHVJQ0FnSUhSb2FYTXVibUZ0WlNBOUlIUm9hWE11WTI5dWMzUnlkV04wYjNJdWJtRnRaVHRjYmlBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWTJ4aGMzTWdTVzUyWVd4cFpFMXBiV1ZVZVhCbFJYSnliM0lnWlhoMFpXNWtjeUJGY25KdmNpQjdYRzRnSUhCMVlteHBZeUJ0YVcxbFZIbHdaVG9nYzNSeWFXNW5PMXh1WEc0Z0lHTnZibk4wY25WamRHOXlLRzFwYldWVWVYQmxPaUJ6ZEhKcGJtY3BJSHRjYmlBZ0lDQnpkWEJsY2loZ1NXNTJZV3hwWkNCdGFXMWxJSFI1Y0dVZ1ptOTFibVFnYjI0Z1lYTnpaWFJnS1R0Y2JpQWdJQ0IwYUdsekxtNWhiV1VnUFNCMGFHbHpMbU52Ym5OMGNuVmpkRzl5TG01aGJXVTdYRzRnSUNBZ2RHaHBjeTV0YVcxbFZIbHdaU0E5SUcxcGJXVlVlWEJsTzF4dUlDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJWY214R1pYUmphRVZ5Y205eUlHVjRkR1Z1WkhNZ1JYSnliM0lnZTF4dUlDQndkV0pzYVdNZ2RYSnNPaUJ6ZEhKcGJtYzdYRzVjYmlBZ2NIVmliR2xqSUhKbGMzQnZibk5sT2lCU1pYTndiMjV6WlNCOElHNTFiR3c3WEc1Y2JpQWdZMjl1YzNSeWRXTjBiM0lvZFhKc09pQnpkSEpwYm1jc0lISmxjem9nVW1WemNHOXVjMlVnZkNCdWRXeHNMQ0J2Y0hScGIyNXpQem9nUlhKeWIzSlBjSFJwYjI1ektTQjdYRzRnSUNBZ2MzVndaWElvWUVOdmRXeGtJRzV2ZENCbVpYUmphQ0J5WlhOdmRYSmpaU0JtY205dElDUjdkWEpzZldBc0lHOXdkR2x2Ym5NcE8xeHVJQ0FnSUhSb2FYTXVibUZ0WlNBOUlIUm9hWE11WTI5dWMzUnlkV04wYjNJdWJtRnRaVHRjYmlBZ0lDQjBhR2x6TG5WeWJDQTlJSFZ5YkR0Y2JpQWdJQ0IwYUdsekxuSmxjM0J2Ym5ObElEMGdjbVZ6TzF4dUlDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJFYVdOMGFXOXVZWEo1VlhKc1RtOTBSbTkxYm1SRmNuSnZjaUJsZUhSbGJtUnpJRVZ5Y205eUlIdGNiaUFnWTI5dWMzUnlkV04wYjNJb0tTQjdYRzRnSUNBZ2MzVndaWElvWEc0Z0lDQWdJQ0JnUkdsamRHbHZibUZ5ZVNCVlVrd2dibTkwSUdadmRXNWtMaUJRYkdWaGMyVWdZMmhsWTJzZ2VXOTFJR2hoZG1VZ1lXNGdKMkZrYjJKbExtUnBZM1JwYjI1aGNua25JR0Z6YzJWeWRHbHZiaUIzYVhSb0lHRWdKM1Z5YkNjZ2EyVjVMbUFzWEc0Z0lDQWdLVHRjYmlBZ0lDQjBhR2x6TG01aGJXVWdQU0IwYUdsekxtTnZibk4wY25WamRHOXlMbTVoYldVN1hHNGdJSDFjYm4xY2JseHVaWGh3YjNKMElHTnNZWE56SUZOcFoyNXBibWRUZEc5eVlXZGxUV2x6YzJsdVowVnljbTl5SUdWNGRHVnVaSE1nUlhKeWIzSWdlMXh1SUNCamIyNXpkSEoxWTNSdmNpZ3BJSHRjYmlBZ0lDQnpkWEJsY2loZ1FYUWdiR1ZoYzNRZ2IyNWxJR1ZzWlcxbGJuUWdiWFZ6ZENCaVpTQndjbTkyYVdSbFpDQjBieUJ6ZEc5eVlXZGxURzlqWVhScGIyNXpMbUFwTzF4dUlDQWdJSFJvYVhNdWJtRnRaU0E5SUhSb2FYTXVZMjl1YzNSeWRXTjBiM0l1Ym1GdFpUdGNiaUFnZlZ4dWZWeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1NXNTJZV3hwWkVOdmJtWnBaMFZ5Y205eUlHVjRkR1Z1WkhNZ1JYSnliM0lnZTF4dUlDQndkV0pzYVdNZ2FXUmxiblJwWm1sbGNqb2djM1J5YVc1bklId2diblZzYkR0Y2JseHVJQ0J6ZEdGMGFXTWdZbUZ6WlUxbGMzTmhaMlVnUFNCZ1NXNTJZV3hwWkNCdmNpQnRhWE56YVc1bklHTnZibVpwWnlCdmNIUnBiMjV6SUhCaGMzTmxaR0E3WEc1Y2JpQWdZMjl1YzNSeWRXTjBiM0lvYVdSbGJuUnBabWxsY2pvZ2MzUnlhVzVuSUh3Z2JuVnNiQ0E5SUc1MWJHd3BJSHRjYmlBZ0lDQnBaaUFvYVdSbGJuUnBabWxsY2lrZ2UxeHVJQ0FnSUNBZ2MzVndaWElvWUNSN1NXNTJZV3hwWkVOdmJtWnBaMFZ5Y205eUxtSmhjMlZOWlhOellXZGxmU0JtYjNJZ0pIdHBaR1Z1ZEdsbWFXVnlmV0FwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnpkWEJsY2loSmJuWmhiR2xrUTI5dVptbG5SWEp5YjNJdVltRnpaVTFsYzNOaFoyVXBPMXh1SUNBZ0lIMWNiaUFnSUNCMGFHbHpMbTVoYldVZ1BTQjBhR2x6TG1OdmJuTjBjblZqZEc5eUxtNWhiV1U3WEc0Z0lDQWdkR2hwY3k1cFpHVnVkR2xtYVdWeUlEMGdhV1JsYm5ScFptbGxjanRjYmlBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWTJ4aGMzTWdTVzUyWVd4cFpGUm9kVzFpYm1GcGJGTnZkWEpqWlVWeWNtOXlJR1Y0ZEdWdVpITWdSWEp5YjNJZ2UxeHVJQ0J3ZFdKc2FXTWdjbVZqWldsMlpXUk5hVzFsVkhsd1pUb2djM1J5YVc1bk8xeHVYRzRnSUdOdmJuTjBjblZqZEc5eUtISmxZMlZwZG1Wa1RXbHRaVlI1Y0dVNklITjBjbWx1WnlrZ2UxeHVJQ0FnSUhOMWNHVnlLR0JKYm5aaGJHbGtJSFJvZFcxaWJtRnBiQ0J6YjNWeVkyVWdUVWxOUlNCMGVYQmxMaUJTWldObGFYWmxaQ0FrZTNKbFkyVnBkbVZrVFdsdFpWUjVjR1Y5WUNrN1hHNGdJQ0FnZEdocGN5NXVZVzFsSUQwZ2RHaHBjeTVqYjI1emRISjFZM1J2Y2k1dVlXMWxPMXh1SUNBZ0lIUm9hWE11Y21WalpXbDJaV1JOYVcxbFZIbHdaU0E5SUhKbFkyVnBkbVZrVFdsdFpWUjVjR1U3WEc0Z0lIMWNibjFjYmx4dVpYaHdiM0owSUdOc1lYTnpJRkpsYzJsNlpVbHRZV2RsUlhKeWIzSWdaWGgwWlc1a2N5QkZjbkp2Y2lCN1hHNGdJR052Ym5OMGNuVmpkRzl5S0c5d2RHbHZibk0vT2lCRmNuSnZjazl3ZEdsdmJuTXBJSHRjYmlBZ0lDQnpkWEJsY2loZ1JYSnliM0lnY21WemFYcHBibWNnYVcxaFoyVmdMQ0J2Y0hScGIyNXpLVHRjYmlBZ0lDQjBhR2x6TG01aGJXVWdQU0IwYUdsekxtTnZibk4wY25WamRHOXlMbTVoYldVN1hHNGdJSDFjYm4xY2JseHVaWGh3YjNKMElHTnNZWE56SUUxaGJtbG1aWE4wUW5WcGJHUmxja1Z5Y205eUlHVjRkR1Z1WkhNZ1JYSnliM0lnZTF4dUlDQmpiMjV6ZEhKMVkzUnZjaWh2Y0hScGIyNXpQem9nUlhKeWIzSlBjSFJwYjI1ektTQjdYRzRnSUNBZ2MzVndaWElvWUVWeWNtOXlJR055WldGMGFXNW5JRzFoYm1sbVpYTjBJR1JsWm1sdWFYUnBiMjVnTENCdmNIUnBiMjV6S1R0Y2JpQWdJQ0IwYUdsekxtNWhiV1VnUFNCMGFHbHpMbU52Ym5OMGNuVmpkRzl5TG01aGJXVTdYRzRnSUgxY2JuMWNibHh1Wlhod2IzSjBJR05zWVhOeklGZGhjMjFUYVdkdWFXNW5SWEp5YjNJZ1pYaDBaVzVrY3lCRmNuSnZjaUI3WEc0Z0lHTnZibk4wY25WamRHOXlLRzl3ZEdsdmJuTS9PaUJGY25KdmNrOXdkR2x2Ym5NcElIdGNiaUFnSUNCemRYQmxjaWhnUlhKeWIzSWdhVzRnVjJWaVFYTnpaVzFpYkhrZ2MybG5ibWx1WnlCbWJHOTNZQ3dnYjNCMGFXOXVjeWs3WEc0Z0lDQWdkR2hwY3k1dVlXMWxJRDBnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaTV1WVcxbE8xeHVJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCRE1uQmhVMmxuYm1sdVowVnljbTl5SUdWNGRHVnVaSE1nUlhKeWIzSWdlMXh1SUNCamIyNXpkSEoxWTNSdmNpaHZjSFJwYjI1elB6b2dSWEp5YjNKUGNIUnBiMjV6S1NCN1hHNGdJQ0FnYzNWd1pYSW9ZRVZ5Y205eUlITnBaMjVwYm1jZ2FXMWhaMlVnZDJsMGFDQkRNbEJCWUN3Z2IzQjBhVzl1Y3lrN1hHNGdJQ0FnZEdocGN5NXVZVzFsSUQwZ2RHaHBjeTVqYjI1emRISjFZM1J2Y2k1dVlXMWxPMXh1SUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JqYkdGemN5QkRNbkJoVTJOaGJtNXBibWRGY25KdmNpQmxlSFJsYm1SeklFVnljbTl5SUh0Y2JpQWdZMjl1YzNSeWRXTjBiM0lvYjNCMGFXOXVjejg2SUVWeWNtOXlUM0IwYVc5dWN5a2dlMXh1SUNBZ0lITjFjR1Z5S0dCRmNuSnZjaUJ6WTJGdWJtbHVaeUJwYldGblpTQm1iM0lnUXpKUVFXQXNJRzl3ZEdsdmJuTXBPMXh1SUNBZ0lIUm9hWE11Ym1GdFpTQTlJSFJvYVhNdVkyOXVjM1J5ZFdOMGIzSXVibUZ0WlR0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nVTJsbmJtbHVaME5oYm1ObGJHeGxaRVZ5Y205eUlHVjRkR1Z1WkhNZ1JYSnliM0lnZTF4dUlDQmpiMjV6ZEhKMVkzUnZjaWh2Y0hScGIyNXpQem9nUlhKeWIzSlBjSFJwYjI1ektTQjdYRzRnSUNBZ2MzVndaWElvWUZOcFoyNXBibWNnYjNCbGNtRjBhVzl1SUdoaGN5QmlaV1Z1SUdOaGJtTmxiR3hsWkdBc0lHOXdkR2x2Ym5NcE8xeHVJQ0FnSUhSb2FYTXVibUZ0WlNBOUlIUm9hWE11WTI5dWMzUnlkV04wYjNJdWJtRnRaVHRjYmlBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWTJ4aGMzTWdTVzVuY21Wa2FXVnVkRWxrWlc1MGFXWnBaWEpOYVhOemFXNW5JR1Y0ZEdWdVpITWdSWEp5YjNJZ2UxeHVJQ0JqYjI1emRISjFZM1J2Y2lodmNIUnBiMjV6UHpvZ1JYSnliM0pQY0hScGIyNXpLU0I3WEc0Z0lDQWdjM1Z3WlhJb1hHNGdJQ0FnSUNCZ1FXNGdhV1JsYm5ScFptbGxjaUJ0ZFhOMElHSmxJSEJ5YjNacFpHVmtJSGRvWlc0Z1kzSmxZWFJwYm1jZ2FXNW5jbVZrYVdWdWRITWdZVzVrSUdkbGJtVnlZWFJsU1dSbGJuUnBabWxsY2tsbVRXbHpjMmx1WnlCcGN5QnpaWFFnZEc4Z1ptRnNjMlV1WUN4Y2JpQWdJQ0FnSUc5d2RHbHZibk1zWEc0Z0lDQWdLVHRjYmlBZ0lDQjBhR2x6TG01aGJXVWdQU0IwYUdsekxtTnZibk4wY25WamRHOXlMbTVoYldVN1hHNGdJSDFjYm4xY2JseHVaWGh3YjNKMElHTnNZWE56SUVsdVozSmxaR2xsYm5SSVlYTm9UV2x6YzJsdVowVnljbTl5SUdWNGRHVnVaSE1nUlhKeWIzSWdlMXh1SUNCd2RXSnNhV01nYVc1bmNtVmthV1Z1ZERvZ1NXNW5jbVZrYVdWdWREdGNibHh1SUNCamIyNXpkSEoxWTNSdmNpaHBibWR5WldScFpXNTBPaUJKYm1keVpXUnBaVzUwTENCdmNIUnBiMjV6UHpvZ1JYSnliM0pQY0hScGIyNXpLU0I3WEc0Z0lDQWdjM1Z3WlhJb1lGUm9aU0J6ZFhCd2JHbGxaQ0JwYm1keVpXUnBaVzUwSUdseklHMXBjM05wYm1jZ1lTQm9ZWE5vSUhaaGJIVmxZQ3dnYjNCMGFXOXVjeWs3WEc0Z0lDQWdkR2hwY3k1dVlXMWxJRDBnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaTV1WVcxbE8xeHVJQ0FnSUhSb2FYTXVhVzVuY21Wa2FXVnVkQ0E5SUdsdVozSmxaR2xsYm5RN1hHNGdJSDFjYm4xY2JpSXNJaThxS2x4dUlDb2dRMjl3ZVhKcFoyaDBJREl3TWpFZ1FXUnZZbVZjYmlBcUlFRnNiQ0JTYVdkb2RITWdVbVZ6WlhKMlpXUXVYRzRnS2x4dUlDb2dUazlVU1VORk9pQkJaRzlpWlNCd1pYSnRhWFJ6SUhsdmRTQjBieUIxYzJVc0lHMXZaR2xtZVN3Z1lXNWtJR1JwYzNSeWFXSjFkR1VnZEdocGN5Qm1hV3hsSUdsdVhHNGdLaUJoWTJOdmNtUmhibU5sSUhkcGRHZ2dkR2hsSUhSbGNtMXpJRzltSUhSb1pTQkJaRzlpWlNCc2FXTmxibk5sSUdGbmNtVmxiV1Z1ZENCaFkyTnZiWEJoYm5scGJtZGNiaUFxSUdsMExseHVJQ292WEc1Y2JtbHRjRzl5ZENCN0lFbHVZMjl0Y0dGMGFXSnNaVUp5YjNkelpYSkZjbkp2Y2lCOUlHWnliMjBnSnk0dlpYSnliM0luTzF4dVhHNWpiMjV6ZENCWFNVNUVUMWRmUmtWQlZGVlNSVk1nUFNCYlhHNGdJQ2RCY25KaGVVSjFabVpsY2ljc1hHNGdJQ2RHYVd4bEp5eGNiaUFnSjBacGJHVlNaV0ZrWlhJbkxGeHVJQ0FuVTNWaWRHeGxRM0o1Y0hSdkp5eGNiaUFnSjFWcGJuUTRRWEp5WVhrbkxGeHVJQ0FuVjJWaVFYTnpaVzFpYkhrbkxGeHVJQ0FuWm1WMFkyZ25MRnh1WFR0Y2JseHVMeW9xWEc0Z0tpQkRhR1ZqYTNNZ2FXWWdkR2hsSUdOMWNuSmxiblFnWW5KdmQzTmxjaUJwY3lCamIyMXdZWFJwWW14bElIZHBkR2dnZEdobElHWmxZWFIxY21WeklHNWxaV1JsWkNCbWIzSmNiaUFxSUhSb2FYTWdiR2xpY21GeWVTNWNiaUFxWEc0Z0tpQkFjbVYwZFhKdUlIdGliMjlzWldGdWZWeHVJQ292WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYVhORGIyMXdZWFJwWW14bEtDazZJR0p2YjJ4bFlXNGdlMXh1SUNCeVpYUjFjbTRnVjBsT1JFOVhYMFpGUVZSVlVrVlRMbVYyWlhKNUtDaDRLU0E5UGlCNElHbHVJSE5sYkdZcE8xeHVmVnh1WEc0dktpcGNiaUFxSUZSb2NtOTNjeUJoYmlCbGNuSnZjaUJwWmlCMGFHVWdZM1Z5Y21WdWRDQmljbTkzYzJWeUlHbHpJR2x1WTI5dGNHRjBhV0pzWlNCM2FYUm9JSFJvYVhNZ2JHbGljbUZ5ZVM1Y2JpQXFMMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR1Z1YzNWeVpVTnZiWEJoZEdsaWFXeHBkSGtvS1RvZ2RtOXBaQ0I3WEc0Z0lHbG1JQ2doYVhORGIyMXdZWFJwWW14bEtDa3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dTVzVqYjIxd1lYUnBZbXhsUW5KdmQzTmxja1Z5Y205eUtDazdYRzRnSUgxY2JuMWNiaUlzSWk4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaXBjY2x4dVEyOXdlWEpwWjJoMElDaGpLU0JOYVdOeWIzTnZablFnUTI5eWNHOXlZWFJwYjI0dVhISmNibHh5WEc1UVpYSnRhWE56YVc5dUlIUnZJSFZ6WlN3Z1kyOXdlU3dnYlc5a2FXWjVMQ0JoYm1RdmIzSWdaR2x6ZEhKcFluVjBaU0IwYUdseklITnZablIzWVhKbElHWnZjaUJoYm5sY2NseHVjSFZ5Y0c5elpTQjNhWFJvSUc5eUlIZHBkR2h2ZFhRZ1ptVmxJR2x6SUdobGNtVmllU0JuY21GdWRHVmtMbHh5WEc1Y2NseHVWRWhGSUZOUFJsUlhRVkpGSUVsVElGQlNUMVpKUkVWRUlGd2lRVk1nU1ZOY0lpQkJUa1FnVkVoRklFRlZWRWhQVWlCRVNWTkRURUZKVFZNZ1FVeE1JRmRCVWxKQlRsUkpSVk1nVjBsVVNGeHlYRzVTUlVkQlVrUWdWRThnVkVoSlV5QlRUMFpVVjBGU1JTQkpUa05NVlVSSlRrY2dRVXhNSUVsTlVFeEpSVVFnVjBGU1VrRk9WRWxGVXlCUFJpQk5SVkpEU0VGT1ZFRkNTVXhKVkZsY2NseHVRVTVFSUVaSlZFNUZVMU11SUVsT0lFNVBJRVZXUlU1VUlGTklRVXhNSUZSSVJTQkJWVlJJVDFJZ1FrVWdURWxCUWt4RklFWlBVaUJCVGxrZ1UxQkZRMGxCVEN3Z1JFbFNSVU5VTEZ4eVhHNUpUa1JKVWtWRFZDd2dUMUlnUTA5T1UwVlJWVVZPVkVsQlRDQkVRVTFCUjBWVElFOVNJRUZPV1NCRVFVMUJSMFZUSUZkSVFWUlRUMFZXUlZJZ1VrVlRWVXhVU1U1SElFWlNUMDFjY2x4dVRFOVRVeUJQUmlCVlUwVXNJRVJCVkVFZ1QxSWdVRkpQUmtsVVV5d2dWMGhGVkVoRlVpQkpUaUJCVGlCQlExUkpUMDRnVDBZZ1EwOU9WRkpCUTFRc0lFNUZSMHhKUjBWT1EwVWdUMUpjY2x4dVQxUklSVklnVkU5U1ZFbFBWVk1nUVVOVVNVOU9MQ0JCVWtsVFNVNUhJRTlWVkNCUFJpQlBVaUJKVGlCRFQwNU9SVU5VU1U5T0lGZEpWRWdnVkVoRklGVlRSU0JQVWx4eVhHNVFSVkpHVDFKTlFVNURSU0JQUmlCVVNFbFRJRk5QUmxSWFFWSkZMbHh5WEc0cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaUFxTDF4eVhHNHZLaUJuYkc5aVlXd2dVbVZtYkdWamRDd2dVSEp2YldselpTQXFMMXh5WEc1Y2NseHVkbUZ5SUdWNGRHVnVaRk4wWVhScFkzTWdQU0JtZFc1amRHbHZiaWhrTENCaUtTQjdYSEpjYmlBZ0lDQmxlSFJsYm1SVGRHRjBhV056SUQwZ1QySnFaV04wTG5ObGRGQnliM1J2ZEhsd1pVOW1JSHg4WEhKY2JpQWdJQ0FnSUNBZ0tIc2dYMTl3Y205MGIxOWZPaUJiWFNCOUlHbHVjM1JoYm1ObGIyWWdRWEp5WVhrZ0ppWWdablZ1WTNScGIyNGdLR1FzSUdJcElIc2daQzVmWDNCeWIzUnZYMThnUFNCaU95QjlLU0I4ZkZ4eVhHNGdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlDaGtMQ0JpS1NCN0lHWnZjaUFvZG1GeUlIQWdhVzRnWWlrZ2FXWWdLRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2hpTENCd0tTa2daRnR3WFNBOUlHSmJjRjA3SUgwN1hISmNiaUFnSUNCeVpYUjFjbTRnWlhoMFpXNWtVM1JoZEdsamN5aGtMQ0JpS1R0Y2NseHVmVHRjY2x4dVhISmNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmZYMlY0ZEdWdVpITW9aQ3dnWWlrZ2UxeHlYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQmlJQ0U5UFNCY0ltWjFibU4wYVc5dVhDSWdKaVlnWWlBaFBUMGdiblZzYkNsY2NseHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLRndpUTJ4aGMzTWdaWGgwWlc1a2N5QjJZV3gxWlNCY0lpQXJJRk4wY21sdVp5aGlLU0FySUZ3aUlHbHpJRzV2ZENCaElHTnZibk4wY25WamRHOXlJRzl5SUc1MWJHeGNJaWs3WEhKY2JpQWdJQ0JsZUhSbGJtUlRkR0YwYVdOektHUXNJR0lwTzF4eVhHNGdJQ0FnWm5WdVkzUnBiMjRnWDE4b0tTQjdJSFJvYVhNdVkyOXVjM1J5ZFdOMGIzSWdQU0JrT3lCOVhISmNiaUFnSUNCa0xuQnliM1J2ZEhsd1pTQTlJR0lnUFQwOUlHNTFiR3dnUHlCUFltcGxZM1F1WTNKbFlYUmxLR0lwSURvZ0tGOWZMbkJ5YjNSdmRIbHdaU0E5SUdJdWNISnZkRzkwZVhCbExDQnVaWGNnWDE4b0tTazdYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0IyWVhJZ1gxOWhjM05wWjI0Z1BTQm1kVzVqZEdsdmJpZ3BJSHRjY2x4dUlDQWdJRjlmWVhOemFXZHVJRDBnVDJKcVpXTjBMbUZ6YzJsbmJpQjhmQ0JtZFc1amRHbHZiaUJmWDJGemMybG5iaWgwS1NCN1hISmNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdjeXdnYVNBOUlERXNJRzRnUFNCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvT3lCcElEd2dianNnYVNzcktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lITWdQU0JoY21kMWJXVnVkSE5iYVYwN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUhBZ2FXNGdjeWtnYVdZZ0tFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaHpMQ0J3S1NrZ2RGdHdYU0E5SUhOYmNGMDdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCME8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2NtVjBkWEp1SUY5ZllYTnphV2R1TG1Gd2NHeDVLSFJvYVhNc0lHRnlaM1Z0Wlc1MGN5azdYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDNKbGMzUW9jeXdnWlNrZ2UxeHlYRzRnSUNBZ2RtRnlJSFFnUFNCN2ZUdGNjbHh1SUNBZ0lHWnZjaUFvZG1GeUlIQWdhVzRnY3lrZ2FXWWdLRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2h6TENCd0tTQW1KaUJsTG1sdVpHVjRUMllvY0NrZ1BDQXdLVnh5WEc0Z0lDQWdJQ0FnSUhSYmNGMGdQU0J6VzNCZE8xeHlYRzRnSUNBZ2FXWWdLSE1nSVQwZ2JuVnNiQ0FtSmlCMGVYQmxiMllnVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVUzbHRZbTlzY3lBOVBUMGdYQ0ptZFc1amRHbHZibHdpS1Z4eVhHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3TENCd0lEMGdUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1VTNsdFltOXNjeWh6S1RzZ2FTQThJSEF1YkdWdVozUm9PeUJwS3lzcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1V1YVc1a1pYaFBaaWh3VzJsZEtTQThJREFnSmlZZ1QySnFaV04wTG5CeWIzUnZkSGx3WlM1d2NtOXdaWEowZVVselJXNTFiV1Z5WVdKc1pTNWpZV3hzS0hNc0lIQmJhVjBwS1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RGdHdXMmxkWFNBOUlITmJjRnRwWFYwN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdjbVYwZFhKdUlIUTdYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDJSbFkyOXlZWFJsS0dSbFkyOXlZWFJ2Y25Nc0lIUmhjbWRsZEN3Z2EyVjVMQ0JrWlhOaktTQjdYSEpjYmlBZ0lDQjJZWElnWXlBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnc0lISWdQU0JqSUR3Z015QS9JSFJoY21kbGRDQTZJR1JsYzJNZ1BUMDlJRzUxYkd3Z1B5QmtaWE5qSUQwZ1QySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjaWgwWVhKblpYUXNJR3RsZVNrZ09pQmtaWE5qTENCa08xeHlYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQlNaV1pzWldOMElEMDlQU0JjSW05aWFtVmpkRndpSUNZbUlIUjVjR1Z2WmlCU1pXWnNaV04wTG1SbFkyOXlZWFJsSUQwOVBTQmNJbVoxYm1OMGFXOXVYQ0lwSUhJZ1BTQlNaV1pzWldOMExtUmxZMjl5WVhSbEtHUmxZMjl5WVhSdmNuTXNJSFJoY21kbGRDd2dhMlY1TENCa1pYTmpLVHRjY2x4dUlDQWdJR1ZzYzJVZ1ptOXlJQ2gyWVhJZ2FTQTlJR1JsWTI5eVlYUnZjbk11YkdWdVozUm9JQzBnTVRzZ2FTQStQU0F3T3lCcExTMHBJR2xtSUNoa0lEMGdaR1ZqYjNKaGRHOXljMXRwWFNrZ2NpQTlJQ2hqSUR3Z015QS9JR1FvY2lrZ09pQmpJRDRnTXlBL0lHUW9kR0Z5WjJWMExDQnJaWGtzSUhJcElEb2daQ2gwWVhKblpYUXNJR3RsZVNrcElIeDhJSEk3WEhKY2JpQWdJQ0J5WlhSMWNtNGdZeUErSURNZ0ppWWdjaUFtSmlCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29kR0Z5WjJWMExDQnJaWGtzSUhJcExDQnlPMXh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWDE5d1lYSmhiU2h3WVhKaGJVbHVaR1Y0TENCa1pXTnZjbUYwYjNJcElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlBb2RHRnlaMlYwTENCclpYa3BJSHNnWkdWamIzSmhkRzl5S0hSaGNtZGxkQ3dnYTJWNUxDQndZWEpoYlVsdVpHVjRLVHNnZlZ4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1gxOWxjMFJsWTI5eVlYUmxLR04wYjNJc0lHUmxjMk55YVhCMGIzSkpiaXdnWkdWamIzSmhkRzl5Y3l3Z1kyOXVkR1Y0ZEVsdUxDQnBibWwwYVdGc2FYcGxjbk1zSUdWNGRISmhTVzVwZEdsaGJHbDZaWEp6S1NCN1hISmNiaUFnSUNCbWRXNWpkR2x2YmlCaFkyTmxjSFFvWmlrZ2V5QnBaaUFvWmlBaFBUMGdkbTlwWkNBd0lDWW1JSFI1Y0dWdlppQm1JQ0U5UFNCY0ltWjFibU4wYVc5dVhDSXBJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWENKR2RXNWpkR2x2YmlCbGVIQmxZM1JsWkZ3aUtUc2djbVYwZFhKdUlHWTdJSDFjY2x4dUlDQWdJSFpoY2lCcmFXNWtJRDBnWTI5dWRHVjRkRWx1TG10cGJtUXNJR3RsZVNBOUlHdHBibVFnUFQwOUlGd2laMlYwZEdWeVhDSWdQeUJjSW1kbGRGd2lJRG9nYTJsdVpDQTlQVDBnWENKelpYUjBaWEpjSWlBL0lGd2ljMlYwWENJZ09pQmNJblpoYkhWbFhDSTdYSEpjYmlBZ0lDQjJZWElnZEdGeVoyVjBJRDBnSVdSbGMyTnlhWEIwYjNKSmJpQW1KaUJqZEc5eUlEOGdZMjl1ZEdWNGRFbHVXMXdpYzNSaGRHbGpYQ0pkSUQ4Z1kzUnZjaUE2SUdOMGIzSXVjSEp2ZEc5MGVYQmxJRG9nYm5Wc2JEdGNjbHh1SUNBZ0lIWmhjaUJrWlhOamNtbHdkRzl5SUQwZ1pHVnpZM0pwY0hSdmNrbHVJSHg4SUNoMFlYSm5aWFFnUHlCUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlLSFJoY21kbGRDd2dZMjl1ZEdWNGRFbHVMbTVoYldVcElEb2dlMzBwTzF4eVhHNGdJQ0FnZG1GeUlGOHNJR1J2Ym1VZ1BTQm1ZV3h6WlR0Y2NseHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQmtaV052Y21GMGIzSnpMbXhsYm1kMGFDQXRJREU3SUdrZ1BqMGdNRHNnYVMwdEtTQjdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHTnZiblJsZUhRZ1BTQjdmVHRjY2x4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCd0lHbHVJR052Ym5SbGVIUkpiaWtnWTI5dWRHVjRkRnR3WFNBOUlIQWdQVDA5SUZ3aVlXTmpaWE56WENJZ1B5QjdmU0E2SUdOdmJuUmxlSFJKYmx0d1hUdGNjbHh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJ3SUdsdUlHTnZiblJsZUhSSmJpNWhZMk5sYzNNcElHTnZiblJsZUhRdVlXTmpaWE56VzNCZElEMGdZMjl1ZEdWNGRFbHVMbUZqWTJWemMxdHdYVHRjY2x4dUlDQWdJQ0FnSUNCamIyNTBaWGgwTG1Ga1pFbHVhWFJwWVd4cGVtVnlJRDBnWm5WdVkzUnBiMjRnS0dZcElIc2dhV1lnS0dSdmJtVXBJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWENKRFlXNXViM1FnWVdSa0lHbHVhWFJwWVd4cGVtVnljeUJoWm5SbGNpQmtaV052Y21GMGFXOXVJR2hoY3lCamIyMXdiR1YwWldSY0lpazdJR1Y0ZEhKaFNXNXBkR2xoYkdsNlpYSnpMbkIxYzJnb1lXTmpaWEIwS0dZZ2ZId2diblZzYkNrcE95QjlPMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnlaWE4xYkhRZ1BTQW9NQ3dnWkdWamIzSmhkRzl5YzF0cFhTa29hMmx1WkNBOVBUMGdYQ0poWTJObGMzTnZjbHdpSUQ4Z2V5Qm5aWFE2SUdSbGMyTnlhWEIwYjNJdVoyVjBMQ0J6WlhRNklHUmxjMk55YVhCMGIzSXVjMlYwSUgwZ09pQmtaWE5qY21sd2RHOXlXMnRsZVYwc0lHTnZiblJsZUhRcE8xeHlYRzRnSUNBZ0lDQWdJR2xtSUNocmFXNWtJRDA5UFNCY0ltRmpZMlZ6YzI5eVhDSXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hKbGMzVnNkQ0E5UFQwZ2RtOXBaQ0F3S1NCamIyNTBhVzUxWlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISmxjM1ZzZENBOVBUMGdiblZzYkNCOGZDQjBlWEJsYjJZZ2NtVnpkV3gwSUNFOVBTQmNJbTlpYW1WamRGd2lLU0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0Z3aVQySnFaV04wSUdWNGNHVmpkR1ZrWENJcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9YeUE5SUdGalkyVndkQ2h5WlhOMWJIUXVaMlYwS1NrZ1pHVnpZM0pwY0hSdmNpNW5aWFFnUFNCZk8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9YeUE5SUdGalkyVndkQ2h5WlhOMWJIUXVjMlYwS1NrZ1pHVnpZM0pwY0hSdmNpNXpaWFFnUFNCZk8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9YeUE5SUdGalkyVndkQ2h5WlhOMWJIUXVhVzVwZENrcElHbHVhWFJwWVd4cGVtVnljeTV3ZFhOb0tGOHBPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaGZJRDBnWVdOalpYQjBLSEpsYzNWc2RDa3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0d0cGJtUWdQVDA5SUZ3aVptbGxiR1JjSWlrZ2FXNXBkR2xoYkdsNlpYSnpMbkIxYzJnb1h5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnWkdWelkzSnBjSFJ2Y2x0clpYbGRJRDBnWHp0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQnBaaUFvZEdGeVoyVjBLU0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2RHRnlaMlYwTENCamIyNTBaWGgwU1c0dWJtRnRaU3dnWkdWelkzSnBjSFJ2Y2lrN1hISmNiaUFnSUNCa2IyNWxJRDBnZEhKMVpUdGNjbHh1ZlR0Y2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDNKMWJrbHVhWFJwWVd4cGVtVnljeWgwYUdselFYSm5MQ0JwYm1sMGFXRnNhWHBsY25Nc0lIWmhiSFZsS1NCN1hISmNiaUFnSUNCMllYSWdkWE5sVm1Gc2RXVWdQU0JoY21kMWJXVnVkSE11YkdWdVozUm9JRDRnTWp0Y2NseHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2FXNXBkR2xoYkdsNlpYSnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hISmNiaUFnSUNBZ0lDQWdkbUZzZFdVZ1BTQjFjMlZXWVd4MVpTQS9JR2x1YVhScFlXeHBlbVZ5YzF0cFhTNWpZV3hzS0hSb2FYTkJjbWNzSUhaaGJIVmxLU0E2SUdsdWFYUnBZV3hwZW1WeWMxdHBYUzVqWVd4c0tIUm9hWE5CY21jcE8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2NtVjBkWEp1SUhWelpWWmhiSFZsSUQ4Z2RtRnNkV1VnT2lCMmIybGtJREE3WEhKY2JuMDdYSEpjYmx4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1gxOXdjbTl3UzJWNUtIZ3BJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQjBlWEJsYjJZZ2VDQTlQVDBnWENKemVXMWliMnhjSWlBL0lIZ2dPaUJjSWx3aUxtTnZibU5oZENoNEtUdGNjbHh1ZlR0Y2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDNObGRFWjFibU4wYVc5dVRtRnRaU2htTENCdVlXMWxMQ0J3Y21WbWFYZ3BJSHRjY2x4dUlDQWdJR2xtSUNoMGVYQmxiMllnYm1GdFpTQTlQVDBnWENKemVXMWliMnhjSWlrZ2JtRnRaU0E5SUc1aGJXVXVaR1Z6WTNKcGNIUnBiMjRnUHlCY0lsdGNJaTVqYjI1allYUW9ibUZ0WlM1a1pYTmpjbWx3ZEdsdmJpd2dYQ0pkWENJcElEb2dYQ0pjSWp0Y2NseHVJQ0FnSUhKbGRIVnliaUJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1ppd2dYQ0p1WVcxbFhDSXNJSHNnWTI5dVptbG5kWEpoWW14bE9pQjBjblZsTENCMllXeDFaVG9nY0hKbFptbDRJRDhnWENKY0lpNWpiMjVqWVhRb2NISmxabWw0TENCY0lpQmNJaXdnYm1GdFpTa2dPaUJ1WVcxbElIMHBPMXh5WEc1OU8xeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZmJXVjBZV1JoZEdFb2JXVjBZV1JoZEdGTFpYa3NJRzFsZEdGa1lYUmhWbUZzZFdVcElIdGNjbHh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdVbVZtYkdWamRDQTlQVDBnWENKdlltcGxZM1JjSWlBbUppQjBlWEJsYjJZZ1VtVm1iR1ZqZEM1dFpYUmhaR0YwWVNBOVBUMGdYQ0ptZFc1amRHbHZibHdpS1NCeVpYUjFjbTRnVW1WbWJHVmpkQzV0WlhSaFpHRjBZU2h0WlhSaFpHRjBZVXRsZVN3Z2JXVjBZV1JoZEdGV1lXeDFaU2s3WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgyRjNZV2wwWlhJb2RHaHBjMEZ5Wnl3Z1gyRnlaM1Z0Wlc1MGN5d2dVQ3dnWjJWdVpYSmhkRzl5S1NCN1hISmNiaUFnSUNCbWRXNWpkR2x2YmlCaFpHOXdkQ2gyWVd4MVpTa2dleUJ5WlhSMWNtNGdkbUZzZFdVZ2FXNXpkR0Z1WTJWdlppQlFJRDhnZG1Gc2RXVWdPaUJ1WlhjZ1VDaG1kVzVqZEdsdmJpQW9jbVZ6YjJ4MlpTa2dleUJ5WlhOdmJIWmxLSFpoYkhWbEtUc2dmU2s3SUgxY2NseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ0tGQWdmSHdnS0ZBZ1BTQlFjbTl0YVhObEtTa29ablZ1WTNScGIyNGdLSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dlMXh5WEc0Z0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUdaMWJHWnBiR3hsWkNoMllXeDFaU2tnZXlCMGNua2dleUJ6ZEdWd0tHZGxibVZ5WVhSdmNpNXVaWGgwS0haaGJIVmxLU2s3SUgwZ1kyRjBZMmdnS0dVcElIc2djbVZxWldOMEtHVXBPeUI5SUgxY2NseHVJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQnlaV3BsWTNSbFpDaDJZV3gxWlNrZ2V5QjBjbmtnZXlCemRHVndLR2RsYm1WeVlYUnZjbHRjSW5Sb2NtOTNYQ0pkS0haaGJIVmxLU2s3SUgwZ1kyRjBZMmdnS0dVcElIc2djbVZxWldOMEtHVXBPeUI5SUgxY2NseHVJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQnpkR1Z3S0hKbGMzVnNkQ2tnZXlCeVpYTjFiSFF1Wkc5dVpTQS9JSEpsYzI5c2RtVW9jbVZ6ZFd4MExuWmhiSFZsS1NBNklHRmtiM0IwS0hKbGMzVnNkQzUyWVd4MVpTa3VkR2hsYmlobWRXeG1hV3hzWldRc0lISmxhbVZqZEdWa0tUc2dmVnh5WEc0Z0lDQWdJQ0FnSUhOMFpYQW9LR2RsYm1WeVlYUnZjaUE5SUdkbGJtVnlZWFJ2Y2k1aGNIQnNlU2gwYUdselFYSm5MQ0JmWVhKbmRXMWxiblJ6SUh4OElGdGRLU2t1Ym1WNGRDZ3BLVHRjY2x4dUlDQWdJSDBwTzF4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1gxOW5aVzVsY21GMGIzSW9kR2hwYzBGeVp5d2dZbTlrZVNrZ2UxeHlYRzRnSUNBZ2RtRnlJRjhnUFNCN0lHeGhZbVZzT2lBd0xDQnpaVzUwT2lCbWRXNWpkR2x2YmlncElIc2dhV1lnS0hSYk1GMGdKaUF4S1NCMGFISnZkeUIwV3pGZE95QnlaWFIxY200Z2RGc3hYVHNnZlN3Z2RISjVjem9nVzEwc0lHOXdjem9nVzEwZ2ZTd2daaXdnZVN3Z2RDd2daenRjY2x4dUlDQWdJSEpsZEhWeWJpQm5JRDBnZXlCdVpYaDBPaUIyWlhKaUtEQXBMQ0JjSW5Sb2NtOTNYQ0k2SUhabGNtSW9NU2tzSUZ3aWNtVjBkWEp1WENJNklIWmxjbUlvTWlrZ2ZTd2dkSGx3Wlc5bUlGTjViV0p2YkNBOVBUMGdYQ0ptZFc1amRHbHZibHdpSUNZbUlDaG5XMU41YldKdmJDNXBkR1Z5WVhSdmNsMGdQU0JtZFc1amRHbHZiaWdwSUhzZ2NtVjBkWEp1SUhSb2FYTTdJSDBwTENCbk8xeHlYRzRnSUNBZ1puVnVZM1JwYjI0Z2RtVnlZaWh1S1NCN0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlBb2Rpa2dleUJ5WlhSMWNtNGdjM1JsY0NoYmJpd2dkbDBwT3lCOU95QjlYSEpjYmlBZ0lDQm1kVzVqZEdsdmJpQnpkR1Z3S0c5d0tTQjdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHWXBJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWENKSFpXNWxjbUYwYjNJZ2FYTWdZV3h5WldGa2VTQmxlR1ZqZFhScGJtY3VYQ0lwTzF4eVhHNGdJQ0FnSUNBZ0lIZG9hV3hsSUNobklDWW1JQ2huSUQwZ01Dd2diM0JiTUYwZ0ppWWdLRjhnUFNBd0tTa3NJRjhwSUhSeWVTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2htSUQwZ01Td2dlU0FtSmlBb2RDQTlJRzl3V3pCZElDWWdNaUEvSUhsYlhDSnlaWFIxY201Y0lsMGdPaUJ2Y0Zzd1hTQS9JSGxiWENKMGFISnZkMXdpWFNCOGZDQW9LSFFnUFNCNVcxd2ljbVYwZFhKdVhDSmRLU0FtSmlCMExtTmhiR3dvZVNrc0lEQXBJRG9nZVM1dVpYaDBLU0FtSmlBaEtIUWdQU0IwTG1OaGJHd29lU3dnYjNCYk1WMHBLUzVrYjI1bEtTQnlaWFIxY200Z2REdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSGtnUFNBd0xDQjBLU0J2Y0NBOUlGdHZjRnN3WFNBbUlESXNJSFF1ZG1Gc2RXVmRPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkMmwwWTJnZ0tHOXdXekJkS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSURBNklHTmhjMlVnTVRvZ2RDQTlJRzl3T3lCaWNtVmhhenRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdORG9nWHk1c1lXSmxiQ3NyT3lCeVpYUjFjbTRnZXlCMllXeDFaVG9nYjNCYk1WMHNJR1J2Ym1VNklHWmhiSE5sSUgwN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSURVNklGOHViR0ZpWld3ckt6c2dlU0E5SUc5d1d6RmRPeUJ2Y0NBOUlGc3dYVHNnWTI5dWRHbHVkV1U3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRGM2SUc5d0lEMGdYeTV2Y0hNdWNHOXdLQ2s3SUY4dWRISjVjeTV3YjNBb0tUc2dZMjl1ZEdsdWRXVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWldaaGRXeDBPbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doS0hRZ1BTQmZMblJ5ZVhNc0lIUWdQU0IwTG14bGJtZDBhQ0ErSURBZ0ppWWdkRnQwTG14bGJtZDBhQ0F0SURGZEtTQW1KaUFvYjNCYk1GMGdQVDA5SURZZ2ZId2diM0JiTUYwZ1BUMDlJRElwS1NCN0lGOGdQU0F3T3lCamIyNTBhVzUxWlRzZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHZjRnN3WFNBOVBUMGdNeUFtSmlBb0lYUWdmSHdnS0c5d1d6RmRJRDRnZEZzd1hTQW1KaUJ2Y0ZzeFhTQThJSFJiTTEwcEtTa2dleUJmTG14aFltVnNJRDBnYjNCYk1WMDdJR0p5WldGck95QjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzl3V3pCZElEMDlQU0EySUNZbUlGOHViR0ZpWld3Z1BDQjBXekZkS1NCN0lGOHViR0ZpWld3Z1BTQjBXekZkT3lCMElEMGdiM0E3SUdKeVpXRnJPeUI5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hRZ0ppWWdYeTVzWVdKbGJDQThJSFJiTWwwcElIc2dYeTVzWVdKbGJDQTlJSFJiTWwwN0lGOHViM0J6TG5CMWMyZ29iM0FwT3lCaWNtVmhhenNnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMFd6SmRLU0JmTG05d2N5NXdiM0FvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmTG5SeWVYTXVjRzl3S0NrN0lHTnZiblJwYm5WbE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUc5d0lEMGdZbTlrZVM1allXeHNLSFJvYVhOQmNtY3NJRjhwTzF4eVhHNGdJQ0FnSUNBZ0lIMGdZMkYwWTJnZ0tHVXBJSHNnYjNBZ1BTQmJOaXdnWlYwN0lIa2dQU0F3T3lCOUlHWnBibUZzYkhrZ2V5Qm1JRDBnZENBOUlEQTdJSDFjY2x4dUlDQWdJQ0FnSUNCcFppQW9iM0JiTUYwZ0ppQTFLU0IwYUhKdmR5QnZjRnN4WFRzZ2NtVjBkWEp1SUhzZ2RtRnNkV1U2SUc5d1d6QmRJRDhnYjNCYk1WMGdPaUIyYjJsa0lEQXNJR1J2Ym1VNklIUnlkV1VnZlR0Y2NseHVJQ0FnSUgxY2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElIWmhjaUJmWDJOeVpXRjBaVUpwYm1ScGJtY2dQU0JQWW1wbFkzUXVZM0psWVhSbElEOGdLR1oxYm1OMGFXOXVLRzhzSUcwc0lHc3NJR3N5S1NCN1hISmNiaUFnSUNCcFppQW9heklnUFQwOUlIVnVaR1ZtYVc1bFpDa2dheklnUFNCck8xeHlYRzRnSUNBZ2RtRnlJR1JsYzJNZ1BTQlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxFWlhOamNtbHdkRzl5S0cwc0lHc3BPMXh5WEc0Z0lDQWdhV1lnS0NGa1pYTmpJSHg4SUNoY0ltZGxkRndpSUdsdUlHUmxjMk1nUHlBaGJTNWZYMlZ6VFc5a2RXeGxJRG9nWkdWell5NTNjbWwwWVdKc1pTQjhmQ0JrWlhOakxtTnZibVpwWjNWeVlXSnNaU2twSUh0Y2NseHVJQ0FnSUNBZ0lDQmtaWE5qSUQwZ2V5QmxiblZ0WlhKaFlteGxPaUIwY25WbExDQm5aWFE2SUdaMWJtTjBhVzl1S0NrZ2V5QnlaWFIxY200Z2JWdHJYVHNnZlNCOU8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLRzhzSUdzeUxDQmtaWE5qS1R0Y2NseHVmU2tnT2lBb1puVnVZM1JwYjI0b2J5d2diU3dnYXl3Z2F6SXBJSHRjY2x4dUlDQWdJR2xtSUNock1pQTlQVDBnZFc1a1pXWnBibVZrS1NCck1pQTlJR3M3WEhKY2JpQWdJQ0J2VzJzeVhTQTlJRzFiYTEwN1hISmNibjBwTzF4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmWlhod2IzSjBVM1JoY2lodExDQnZLU0I3WEhKY2JpQWdJQ0JtYjNJZ0tIWmhjaUJ3SUdsdUlHMHBJR2xtSUNod0lDRTlQU0JjSW1SbFptRjFiSFJjSWlBbUppQWhUMkpxWldOMExuQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVM1allXeHNLRzhzSUhBcEtTQmZYMk55WldGMFpVSnBibVJwYm1jb2J5d2diU3dnY0NrN1hISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmZYM1poYkhWbGN5aHZLU0I3WEhKY2JpQWdJQ0IyWVhJZ2N5QTlJSFI1Y0dWdlppQlRlVzFpYjJ3Z1BUMDlJRndpWm5WdVkzUnBiMjVjSWlBbUppQlRlVzFpYjJ3dWFYUmxjbUYwYjNJc0lHMGdQU0J6SUNZbUlHOWJjMTBzSUdrZ1BTQXdPMXh5WEc0Z0lDQWdhV1lnS0cwcElISmxkSFZ5YmlCdExtTmhiR3dvYnlrN1hISmNiaUFnSUNCcFppQW9ieUFtSmlCMGVYQmxiMllnYnk1c1pXNW5kR2dnUFQwOUlGd2liblZ0WW1WeVhDSXBJSEpsZEhWeWJpQjdYSEpjYmlBZ0lDQWdJQ0FnYm1WNGREb2dablZ1WTNScGIyNGdLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2J5QW1KaUJwSUQ0OUlHOHViR1Z1WjNSb0tTQnZJRDBnZG05cFpDQXdPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2V5QjJZV3gxWlRvZ2J5QW1KaUJ2VzJrcksxMHNJR1J2Ym1VNklDRnZJSDA3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZUdGNjbHh1SUNBZ0lIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9jeUEvSUZ3aVQySnFaV04wSUdseklHNXZkQ0JwZEdWeVlXSnNaUzVjSWlBNklGd2lVM2x0WW05c0xtbDBaWEpoZEc5eUlHbHpJRzV2ZENCa1pXWnBibVZrTGx3aUtUdGNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmY21WaFpDaHZMQ0J1S1NCN1hISmNiaUFnSUNCMllYSWdiU0E5SUhSNWNHVnZaaUJUZVcxaWIyd2dQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpQW1KaUJ2VzFONWJXSnZiQzVwZEdWeVlYUnZjbDA3WEhKY2JpQWdJQ0JwWmlBb0lXMHBJSEpsZEhWeWJpQnZPMXh5WEc0Z0lDQWdkbUZ5SUdrZ1BTQnRMbU5oYkd3b2J5a3NJSElzSUdGeUlEMGdXMTBzSUdVN1hISmNiaUFnSUNCMGNua2dlMXh5WEc0Z0lDQWdJQ0FnSUhkb2FXeGxJQ2dvYmlBOVBUMGdkbTlwWkNBd0lIeDhJRzR0TFNBK0lEQXBJQ1ltSUNFb2NpQTlJR2t1Ym1WNGRDZ3BLUzVrYjI1bEtTQmhjaTV3ZFhOb0tISXVkbUZzZFdVcE8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ1kyRjBZMmdnS0dWeWNtOXlLU0I3SUdVZ1BTQjdJR1Z5Y205eU9pQmxjbkp2Y2lCOU95QjlYSEpjYmlBZ0lDQm1hVzVoYkd4NUlIdGNjbHh1SUNBZ0lDQWdJQ0IwY25rZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jaUFtSmlBaGNpNWtiMjVsSUNZbUlDaHRJRDBnYVZ0Y0luSmxkSFZ5Ymx3aVhTa3BJRzB1WTJGc2JDaHBLVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdabWx1WVd4c2VTQjdJR2xtSUNobEtTQjBhSEp2ZHlCbExtVnljbTl5T3lCOVhISmNiaUFnSUNCOVhISmNiaUFnSUNCeVpYUjFjbTRnWVhJN1hISmNibjFjY2x4dVhISmNiaThxS2lCQVpHVndjbVZqWVhSbFpDQXFMMXh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWDE5emNISmxZV1FvS1NCN1hISmNiaUFnSUNCbWIzSWdLSFpoY2lCaGNpQTlJRnRkTENCcElEMGdNRHNnYVNBOElHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnN0lHa3JLeWxjY2x4dUlDQWdJQ0FnSUNCaGNpQTlJR0Z5TG1OdmJtTmhkQ2hmWDNKbFlXUW9ZWEpuZFcxbGJuUnpXMmxkS1NrN1hISmNiaUFnSUNCeVpYUjFjbTRnWVhJN1hISmNibjFjY2x4dVhISmNiaThxS2lCQVpHVndjbVZqWVhSbFpDQXFMMXh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWDE5emNISmxZV1JCY25KaGVYTW9LU0I3WEhKY2JpQWdJQ0JtYjNJZ0tIWmhjaUJ6SUQwZ01Dd2dhU0E5SURBc0lHbHNJRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhRHNnYVNBOElHbHNPeUJwS3lzcElITWdLejBnWVhKbmRXMWxiblJ6VzJsZExteGxibWQwYUR0Y2NseHVJQ0FnSUdadmNpQW9kbUZ5SUhJZ1BTQkJjbkpoZVNoektTd2dheUE5SURBc0lHa2dQU0F3T3lCcElEd2dhV3c3SUdrckt5bGNjbHh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJoSUQwZ1lYSm5kVzFsYm5SelcybGRMQ0JxSUQwZ01Dd2dhbXdnUFNCaExteGxibWQwYURzZ2FpQThJR3BzT3lCcUt5c3NJR3NyS3lsY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY2x0clhTQTlJR0ZiYWwwN1hISmNiaUFnSUNCeVpYUjFjbTRnY2p0Y2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHWjFibU4wYVc5dUlGOWZjM0J5WldGa1FYSnlZWGtvZEc4c0lHWnliMjBzSUhCaFkyc3BJSHRjY2x4dUlDQWdJR2xtSUNod1lXTnJJSHg4SUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnUFQwOUlESXBJR1p2Y2lBb2RtRnlJR2tnUFNBd0xDQnNJRDBnWm5KdmJTNXNaVzVuZEdnc0lHRnlPeUJwSUR3Z2JEc2dhU3NyS1NCN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0dGeUlIeDhJQ0VvYVNCcGJpQm1jbTl0S1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JV0Z5S1NCaGNpQTlJRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNXpiR2xqWlM1allXeHNLR1p5YjIwc0lEQXNJR2twTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JoY2x0cFhTQTlJR1p5YjIxYmFWMDdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnY21WMGRYSnVJSFJ2TG1OdmJtTmhkQ2hoY2lCOGZDQkJjbkpoZVM1d2NtOTBiM1I1Y0dVdWMyeHBZMlV1WTJGc2JDaG1jbTl0S1NrN1hISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmZYMkYzWVdsMEtIWXBJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQjBhR2x6SUdsdWMzUmhibU5sYjJZZ1gxOWhkMkZwZENBL0lDaDBhR2x6TG5ZZ1BTQjJMQ0IwYUdsektTQTZJRzVsZHlCZlgyRjNZV2wwS0hZcE8xeHlYRzU5WEhKY2JseHlYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdYMTloYzNsdVkwZGxibVZ5WVhSdmNpaDBhR2x6UVhKbkxDQmZZWEpuZFcxbGJuUnpMQ0JuWlc1bGNtRjBiM0lwSUh0Y2NseHVJQ0FnSUdsbUlDZ2hVM2x0WW05c0xtRnplVzVqU1hSbGNtRjBiM0lwSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSlRlVzFpYjJ3dVlYTjVibU5KZEdWeVlYUnZjaUJwY3lCdWIzUWdaR1ZtYVc1bFpDNWNJaWs3WEhKY2JpQWdJQ0IyWVhJZ1p5QTlJR2RsYm1WeVlYUnZjaTVoY0hCc2VTaDBhR2x6UVhKbkxDQmZZWEpuZFcxbGJuUnpJSHg4SUZ0ZEtTd2dhU3dnY1NBOUlGdGRPMXh5WEc0Z0lDQWdjbVYwZFhKdUlHa2dQU0I3ZlN3Z2RtVnlZaWhjSW01bGVIUmNJaWtzSUhabGNtSW9YQ0owYUhKdmQxd2lLU3dnZG1WeVlpaGNJbkpsZEhWeWJsd2lLU3dnYVZ0VGVXMWliMnd1WVhONWJtTkpkR1Z5WVhSdmNsMGdQU0JtZFc1amRHbHZiaUFvS1NCN0lISmxkSFZ5YmlCMGFHbHpPeUI5TENCcE8xeHlYRzRnSUNBZ1puVnVZM1JwYjI0Z2RtVnlZaWh1S1NCN0lHbG1JQ2huVzI1ZEtTQnBXMjVkSUQwZ1puVnVZM1JwYjI0Z0tIWXBJSHNnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1SUNoaExDQmlLU0I3SUhFdWNIVnphQ2hiYml3Z2Rpd2dZU3dnWWwwcElENGdNU0I4ZkNCeVpYTjFiV1VvYml3Z2RpazdJSDBwT3lCOU95QjlYSEpjYmlBZ0lDQm1kVzVqZEdsdmJpQnlaWE4xYldVb2Jpd2dkaWtnZXlCMGNua2dleUJ6ZEdWd0tHZGJibDBvZGlrcE95QjlJR05oZEdOb0lDaGxLU0I3SUhObGRIUnNaU2h4V3pCZFd6TmRMQ0JsS1RzZ2ZTQjlYSEpjYmlBZ0lDQm1kVzVqZEdsdmJpQnpkR1Z3S0hJcElIc2djaTUyWVd4MVpTQnBibk4wWVc1alpXOW1JRjlmWVhkaGFYUWdQeUJRY205dGFYTmxMbkpsYzI5c2RtVW9jaTUyWVd4MVpTNTJLUzUwYUdWdUtHWjFiR1pwYkd3c0lISmxhbVZqZENrZ09pQnpaWFIwYkdVb2NWc3dYVnN5WFN3Z2NpazdJSDFjY2x4dUlDQWdJR1oxYm1OMGFXOXVJR1oxYkdacGJHd29kbUZzZFdVcElIc2djbVZ6ZFcxbEtGd2libVY0ZEZ3aUxDQjJZV3gxWlNrN0lIMWNjbHh1SUNBZ0lHWjFibU4wYVc5dUlISmxhbVZqZENoMllXeDFaU2tnZXlCeVpYTjFiV1VvWENKMGFISnZkMXdpTENCMllXeDFaU2s3SUgxY2NseHVJQ0FnSUdaMWJtTjBhVzl1SUhObGRIUnNaU2htTENCMktTQjdJR2xtSUNobUtIWXBMQ0J4TG5Ob2FXWjBLQ2tzSUhFdWJHVnVaM1JvS1NCeVpYTjFiV1VvY1Zzd1hWc3dYU3dnY1Zzd1hWc3hYU2s3SUgxY2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHWjFibU4wYVc5dUlGOWZZWE41Ym1ORVpXeGxaMkYwYjNJb2J5a2dlMXh5WEc0Z0lDQWdkbUZ5SUdrc0lIQTdYSEpjYmlBZ0lDQnlaWFIxY200Z2FTQTlJSHQ5TENCMlpYSmlLRndpYm1WNGRGd2lLU3dnZG1WeVlpaGNJblJvY205M1hDSXNJR1oxYm1OMGFXOXVJQ2hsS1NCN0lIUm9jbTkzSUdVN0lIMHBMQ0IyWlhKaUtGd2ljbVYwZFhKdVhDSXBMQ0JwVzFONWJXSnZiQzVwZEdWeVlYUnZjbDBnUFNCbWRXNWpkR2x2YmlBb0tTQjdJSEpsZEhWeWJpQjBhR2x6T3lCOUxDQnBPMXh5WEc0Z0lDQWdablZ1WTNScGIyNGdkbVZ5WWlodUxDQm1LU0I3SUdsYmJsMGdQU0J2VzI1ZElEOGdablZ1WTNScGIyNGdLSFlwSUhzZ2NtVjBkWEp1SUNod0lEMGdJWEFwSUQ4Z2V5QjJZV3gxWlRvZ1gxOWhkMkZwZENodlcyNWRLSFlwS1N3Z1pHOXVaVG9nWm1Gc2MyVWdmU0E2SUdZZ1B5Qm1LSFlwSURvZ2Rqc2dmU0E2SUdZN0lIMWNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmWVhONWJtTldZV3gxWlhNb2J5a2dlMXh5WEc0Z0lDQWdhV1lnS0NGVGVXMWliMnd1WVhONWJtTkpkR1Z5WVhSdmNpa2dkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWhjSWxONWJXSnZiQzVoYzNsdVkwbDBaWEpoZEc5eUlHbHpJRzV2ZENCa1pXWnBibVZrTGx3aUtUdGNjbHh1SUNBZ0lIWmhjaUJ0SUQwZ2IxdFRlVzFpYjJ3dVlYTjVibU5KZEdWeVlYUnZjbDBzSUdrN1hISmNiaUFnSUNCeVpYUjFjbTRnYlNBL0lHMHVZMkZzYkNodktTQTZJQ2h2SUQwZ2RIbHdaVzltSUY5ZmRtRnNkV1Z6SUQwOVBTQmNJbVoxYm1OMGFXOXVYQ0lnUHlCZlgzWmhiSFZsY3lodktTQTZJRzliVTNsdFltOXNMbWwwWlhKaGRHOXlYU2dwTENCcElEMGdlMzBzSUhabGNtSW9YQ0p1WlhoMFhDSXBMQ0IyWlhKaUtGd2lkR2h5YjNkY0lpa3NJSFpsY21Jb1hDSnlaWFIxY201Y0lpa3NJR2xiVTNsdFltOXNMbUZ6ZVc1alNYUmxjbUYwYjNKZElEMGdablZ1WTNScGIyNGdLQ2tnZXlCeVpYUjFjbTRnZEdocGN6c2dmU3dnYVNrN1hISmNiaUFnSUNCbWRXNWpkR2x2YmlCMlpYSmlLRzRwSUhzZ2FWdHVYU0E5SUc5YmJsMGdKaVlnWm5WdVkzUnBiMjRnS0hZcElIc2djbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVJQ2h5WlhOdmJIWmxMQ0J5WldwbFkzUXBJSHNnZGlBOUlHOWJibDBvZGlrc0lITmxkSFJzWlNoeVpYTnZiSFpsTENCeVpXcGxZM1FzSUhZdVpHOXVaU3dnZGk1MllXeDFaU2s3SUgwcE95QjlPeUI5WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJ6WlhSMGJHVW9jbVZ6YjJ4MlpTd2djbVZxWldOMExDQmtMQ0IyS1NCN0lGQnliMjFwYzJVdWNtVnpiMngyWlNoMktTNTBhR1Z1S0daMWJtTjBhVzl1S0hZcElIc2djbVZ6YjJ4MlpTaDdJSFpoYkhWbE9pQjJMQ0JrYjI1bE9pQmtJSDBwT3lCOUxDQnlaV3BsWTNRcE95QjlYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDIxaGEyVlVaVzF3YkdGMFpVOWlhbVZqZENoamIyOXJaV1FzSUhKaGR5a2dlMXh5WEc0Z0lDQWdhV1lnS0U5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTa2dleUJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1kyOXZhMlZrTENCY0luSmhkMXdpTENCN0lIWmhiSFZsT2lCeVlYY2dmU2s3SUgwZ1pXeHpaU0I3SUdOdmIydGxaQzV5WVhjZ1BTQnlZWGM3SUgxY2NseHVJQ0FnSUhKbGRIVnliaUJqYjI5clpXUTdYSEpjYm4wN1hISmNibHh5WEc1MllYSWdYMTl6WlhSTmIyUjFiR1ZFWldaaGRXeDBJRDBnVDJKcVpXTjBMbU55WldGMFpTQS9JQ2htZFc1amRHbHZiaWh2TENCMktTQjdYSEpjYmlBZ0lDQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvYnl3Z1hDSmtaV1poZFd4MFhDSXNJSHNnWlc1MWJXVnlZV0pzWlRvZ2RISjFaU3dnZG1Gc2RXVTZJSFlnZlNrN1hISmNibjBwSURvZ1puVnVZM1JwYjI0b2J5d2dkaWtnZTF4eVhHNGdJQ0FnYjF0Y0ltUmxabUYxYkhSY0lsMGdQU0IyTzF4eVhHNTlPMXh5WEc1Y2NseHVaWGh3YjNKMElHWjFibU4wYVc5dUlGOWZhVzF3YjNKMFUzUmhjaWh0YjJRcElIdGNjbHh1SUNBZ0lHbG1JQ2h0YjJRZ0ppWWdiVzlrTGw5ZlpYTk5iMlIxYkdVcElISmxkSFZ5YmlCdGIyUTdYSEpjYmlBZ0lDQjJZWElnY21WemRXeDBJRDBnZTMwN1hISmNiaUFnSUNCcFppQW9iVzlrSUNFOUlHNTFiR3dwSUdadmNpQW9kbUZ5SUdzZ2FXNGdiVzlrS1NCcFppQW9heUFoUFQwZ1hDSmtaV1poZFd4MFhDSWdKaVlnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0cxdlpDd2dheWtwSUY5ZlkzSmxZWFJsUW1sdVpHbHVaeWh5WlhOMWJIUXNJRzF2WkN3Z2F5azdYSEpjYmlBZ0lDQmZYM05sZEUxdlpIVnNaVVJsWm1GMWJIUW9jbVZ6ZFd4MExDQnRiMlFwTzF4eVhHNGdJQ0FnY21WMGRYSnVJSEpsYzNWc2REdGNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmYVcxd2IzSjBSR1ZtWVhWc2RDaHRiMlFwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUFvYlc5a0lDWW1JRzF2WkM1ZlgyVnpUVzlrZFd4bEtTQS9JRzF2WkNBNklIc2daR1ZtWVhWc2REb2diVzlrSUgwN1hISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmZYMk5zWVhOelVISnBkbUYwWlVacFpXeGtSMlYwS0hKbFkyVnBkbVZ5TENCemRHRjBaU3dnYTJsdVpDd2daaWtnZTF4eVhHNGdJQ0FnYVdZZ0tHdHBibVFnUFQwOUlGd2lZVndpSUNZbUlDRm1LU0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0Z3aVVISnBkbUYwWlNCaFkyTmxjM052Y2lCM1lYTWdaR1ZtYVc1bFpDQjNhWFJvYjNWMElHRWdaMlYwZEdWeVhDSXBPMXh5WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJ6ZEdGMFpTQTlQVDBnWENKbWRXNWpkR2x2Ymx3aUlEOGdjbVZqWldsMlpYSWdJVDA5SUhOMFlYUmxJSHg4SUNGbUlEb2dJWE4wWVhSbExtaGhjeWh5WldObGFYWmxjaWtwSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSkRZVzV1YjNRZ2NtVmhaQ0J3Y21sMllYUmxJRzFsYldKbGNpQm1jbTl0SUdGdUlHOWlhbVZqZENCM2FHOXpaU0JqYkdGemN5QmthV1FnYm05MElHUmxZMnhoY21VZ2FYUmNJaWs3WEhKY2JpQWdJQ0J5WlhSMWNtNGdhMmx1WkNBOVBUMGdYQ0p0WENJZ1B5Qm1JRG9nYTJsdVpDQTlQVDBnWENKaFhDSWdQeUJtTG1OaGJHd29jbVZqWldsMlpYSXBJRG9nWmlBL0lHWXVkbUZzZFdVZ09pQnpkR0YwWlM1blpYUW9jbVZqWldsMlpYSXBPMXh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWDE5amJHRnpjMUJ5YVhaaGRHVkdhV1ZzWkZObGRDaHlaV05sYVhabGNpd2djM1JoZEdVc0lIWmhiSFZsTENCcmFXNWtMQ0JtS1NCN1hISmNiaUFnSUNCcFppQW9hMmx1WkNBOVBUMGdYQ0p0WENJcElIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9YQ0pRY21sMllYUmxJRzFsZEdodlpDQnBjeUJ1YjNRZ2QzSnBkR0ZpYkdWY0lpazdYSEpjYmlBZ0lDQnBaaUFvYTJsdVpDQTlQVDBnWENKaFhDSWdKaVlnSVdZcElIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9YQ0pRY21sMllYUmxJR0ZqWTJWemMyOXlJSGRoY3lCa1pXWnBibVZrSUhkcGRHaHZkWFFnWVNCelpYUjBaWEpjSWlrN1hISmNiaUFnSUNCcFppQW9kSGx3Wlc5bUlITjBZWFJsSUQwOVBTQmNJbVoxYm1OMGFXOXVYQ0lnUHlCeVpXTmxhWFpsY2lBaFBUMGdjM1JoZEdVZ2ZId2dJV1lnT2lBaGMzUmhkR1V1YUdGektISmxZMlZwZG1WeUtTa2dkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWhjSWtOaGJtNXZkQ0IzY21sMFpTQndjbWwyWVhSbElHMWxiV0psY2lCMGJ5QmhiaUJ2WW1wbFkzUWdkMmh2YzJVZ1kyeGhjM01nWkdsa0lHNXZkQ0JrWldOc1lYSmxJR2wwWENJcE8xeHlYRzRnSUNBZ2NtVjBkWEp1SUNocmFXNWtJRDA5UFNCY0ltRmNJaUEvSUdZdVkyRnNiQ2h5WldObGFYWmxjaXdnZG1Gc2RXVXBJRG9nWmlBL0lHWXVkbUZzZFdVZ1BTQjJZV3gxWlNBNklITjBZWFJsTG5ObGRDaHlaV05sYVhabGNpd2dkbUZzZFdVcEtTd2dkbUZzZFdVN1hISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmZYMk5zWVhOelVISnBkbUYwWlVacFpXeGtTVzRvYzNSaGRHVXNJSEpsWTJWcGRtVnlLU0I3WEhKY2JpQWdJQ0JwWmlBb2NtVmpaV2wyWlhJZ1BUMDlJRzUxYkd3Z2ZId2dLSFI1Y0dWdlppQnlaV05sYVhabGNpQWhQVDBnWENKdlltcGxZM1JjSWlBbUppQjBlWEJsYjJZZ2NtVmpaV2wyWlhJZ0lUMDlJRndpWm5WdVkzUnBiMjVjSWlrcElIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9YQ0pEWVc1dWIzUWdkWE5sSUNkcGJpY2diM0JsY21GMGIzSWdiMjRnYm05dUxXOWlhbVZqZEZ3aUtUdGNjbHh1SUNBZ0lISmxkSFZ5YmlCMGVYQmxiMllnYzNSaGRHVWdQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpQS9JSEpsWTJWcGRtVnlJRDA5UFNCemRHRjBaU0E2SUhOMFlYUmxMbWhoY3loeVpXTmxhWFpsY2lrN1hISmNibjFjY2x4dUlpd2lMeW9xWEc0Z0tpQlNaVzF2ZG1WeklHRnNiQ0JyWlhrdGRtRnNkV1VnWlc1MGNtbGxjeUJtY205dElIUm9aU0JzYVhOMElHTmhZMmhsTGx4dUlDcGNiaUFxSUVCd2NtbDJZWFJsWEc0Z0tpQkFibUZ0WlNCamJHVmhjbHh1SUNvZ1FHMWxiV0psY2s5bUlFeHBjM1JEWVdOb1pWeHVJQ292WEc1bWRXNWpkR2x2YmlCc2FYTjBRMkZqYUdWRGJHVmhjaWdwSUh0Y2JpQWdkR2hwY3k1ZlgyUmhkR0ZmWHlBOUlGdGRPMXh1SUNCMGFHbHpMbk5wZW1VZ1BTQXdPMXh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHeHBjM1JEWVdOb1pVTnNaV0Z5TzF4dUlpd2lMeW9xWEc0Z0tpQlFaWEptYjNKdGN5QmhYRzRnS2lCYllGTmhiV1ZXWVd4MVpWcGxjbTlnWFNob2RIUndPaTh2WldOdFlTMXBiblJsY201aGRHbHZibUZzTG05eVp5OWxZMjFoTFRJMk1pODNMakF2STNObFl5MXpZVzFsZG1Gc2RXVjZaWEp2S1Z4dUlDb2dZMjl0Y0dGeWFYTnZiaUJpWlhSM1pXVnVJSFIzYnlCMllXeDFaWE1nZEc4Z1pHVjBaWEp0YVc1bElHbG1JSFJvWlhrZ1lYSmxJR1Z4ZFdsMllXeGxiblF1WEc0Z0tseHVJQ29nUUhOMFlYUnBZMXh1SUNvZ1FHMWxiV0psY2s5bUlGOWNiaUFxSUVCemFXNWpaU0EwTGpBdU1GeHVJQ29nUUdOaGRHVm5iM0o1SUV4aGJtZGNiaUFxSUVCd1lYSmhiU0I3S24wZ2RtRnNkV1VnVkdobElIWmhiSFZsSUhSdklHTnZiWEJoY21VdVhHNGdLaUJBY0dGeVlXMGdleXA5SUc5MGFHVnlJRlJvWlNCdmRHaGxjaUIyWVd4MVpTQjBieUJqYjIxd1lYSmxMbHh1SUNvZ1FISmxkSFZ5Ym5NZ2UySnZiMnhsWVc1OUlGSmxkSFZ5Ym5NZ1lIUnlkV1ZnSUdsbUlIUm9aU0IyWVd4MVpYTWdZWEpsSUdWeGRXbDJZV3hsYm5Rc0lHVnNjMlVnWUdaaGJITmxZQzVjYmlBcUlFQmxlR0Z0Y0d4bFhHNGdLbHh1SUNvZ2RtRnlJRzlpYW1WamRDQTlJSHNnSjJFbk9pQXhJSDA3WEc0Z0tpQjJZWElnYjNSb1pYSWdQU0I3SUNkaEp6b2dNU0I5TzF4dUlDcGNiaUFxSUY4dVpYRW9iMkpxWldOMExDQnZZbXBsWTNRcE8xeHVJQ29nTHk4Z1BUNGdkSEoxWlZ4dUlDcGNiaUFxSUY4dVpYRW9iMkpxWldOMExDQnZkR2hsY2lrN1hHNGdLaUF2THlBOVBpQm1ZV3h6WlZ4dUlDcGNiaUFxSUY4dVpYRW9KMkVuTENBbllTY3BPMXh1SUNvZ0x5OGdQVDRnZEhKMVpWeHVJQ3BjYmlBcUlGOHVaWEVvSjJFbkxDQlBZbXBsWTNRb0oyRW5LU2s3WEc0Z0tpQXZMeUE5UGlCbVlXeHpaVnh1SUNwY2JpQXFJRjh1WlhFb1RtRk9MQ0JPWVU0cE8xeHVJQ29nTHk4Z1BUNGdkSEoxWlZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJsY1NoMllXeDFaU3dnYjNSb1pYSXBJSHRjYmlBZ2NtVjBkWEp1SUhaaGJIVmxJRDA5UFNCdmRHaGxjaUI4ZkNBb2RtRnNkV1VnSVQwOUlIWmhiSFZsSUNZbUlHOTBhR1Z5SUNFOVBTQnZkR2hsY2lrN1hHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWlhFN1hHNGlMQ0oyWVhJZ1pYRWdQU0J5WlhGMWFYSmxLQ2N1TDJWeEp5azdYRzVjYmk4cUtseHVJQ29nUjJWMGN5QjBhR1VnYVc1a1pYZ2dZWFFnZDJocFkyZ2dkR2hsSUdCclpYbGdJR2x6SUdadmRXNWtJR2x1SUdCaGNuSmhlV0FnYjJZZ2EyVjVMWFpoYkhWbElIQmhhWEp6TGx4dUlDcGNiaUFxSUVCd2NtbDJZWFJsWEc0Z0tpQkFjR0Z5WVcwZ2UwRnljbUY1ZlNCaGNuSmhlU0JVYUdVZ1lYSnlZWGtnZEc4Z2FXNXpjR1ZqZEM1Y2JpQXFJRUJ3WVhKaGJTQjdLbjBnYTJWNUlGUm9aU0JyWlhrZ2RHOGdjMlZoY21Ob0lHWnZjaTVjYmlBcUlFQnlaWFIxY201eklIdHVkVzFpWlhKOUlGSmxkSFZ5Ym5NZ2RHaGxJR2x1WkdWNElHOW1JSFJvWlNCdFlYUmphR1ZrSUhaaGJIVmxMQ0JsYkhObElHQXRNV0F1WEc0Z0tpOWNibVoxYm1OMGFXOXVJR0Z6YzI5alNXNWtaWGhQWmloaGNuSmhlU3dnYTJWNUtTQjdYRzRnSUhaaGNpQnNaVzVuZEdnZ1BTQmhjbkpoZVM1c1pXNW5kR2c3WEc0Z0lIZG9hV3hsSUNoc1pXNW5kR2d0TFNrZ2UxeHVJQ0FnSUdsbUlDaGxjU2hoY25KaGVWdHNaVzVuZEdoZFd6QmRMQ0JyWlhrcEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2JHVnVaM1JvTzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdMVEU3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdZWE56YjJOSmJtUmxlRTltTzF4dUlpd2lkbUZ5SUdGemMyOWpTVzVrWlhoUFppQTlJSEpsY1hWcGNtVW9KeTR2WDJGemMyOWpTVzVrWlhoUFppY3BPMXh1WEc0dktpb2dWWE5sWkNCbWIzSWdZblZwYkhRdGFXNGdiV1YwYUc5a0lISmxabVZ5Wlc1alpYTXVJQ292WEc1MllYSWdZWEp5WVhsUWNtOTBieUE5SUVGeWNtRjVMbkJ5YjNSdmRIbHdaVHRjYmx4dUx5b3FJRUoxYVd4MExXbHVJSFpoYkhWbElISmxabVZ5Wlc1alpYTXVJQ292WEc1MllYSWdjM0JzYVdObElEMGdZWEp5WVhsUWNtOTBieTV6Y0d4cFkyVTdYRzVjYmk4cUtseHVJQ29nVW1WdGIzWmxjeUJnYTJWNVlDQmhibVFnYVhSeklIWmhiSFZsSUdaeWIyMGdkR2hsSUd4cGMzUWdZMkZqYUdVdVhHNGdLbHh1SUNvZ1FIQnlhWFpoZEdWY2JpQXFJRUJ1WVcxbElHUmxiR1YwWlZ4dUlDb2dRRzFsYldKbGNrOW1JRXhwYzNSRFlXTm9aVnh1SUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUd0bGVTQlVhR1VnYTJWNUlHOW1JSFJvWlNCMllXeDFaU0IwYnlCeVpXMXZkbVV1WEc0Z0tpQkFjbVYwZFhKdWN5QjdZbTl2YkdWaGJuMGdVbVYwZFhKdWN5QmdkSEoxWldBZ2FXWWdkR2hsSUdWdWRISjVJSGRoY3lCeVpXMXZkbVZrTENCbGJITmxJR0JtWVd4elpXQXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHeHBjM1JEWVdOb1pVUmxiR1YwWlNoclpYa3BJSHRjYmlBZ2RtRnlJR1JoZEdFZ1BTQjBhR2x6TGw5ZlpHRjBZVjlmTEZ4dUlDQWdJQ0FnYVc1a1pYZ2dQU0JoYzNOdlkwbHVaR1Y0VDJZb1pHRjBZU3dnYTJWNUtUdGNibHh1SUNCcFppQW9hVzVrWlhnZ1BDQXdLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQjlYRzRnSUhaaGNpQnNZWE4wU1c1a1pYZ2dQU0JrWVhSaExteGxibWQwYUNBdElERTdYRzRnSUdsbUlDaHBibVJsZUNBOVBTQnNZWE4wU1c1a1pYZ3BJSHRjYmlBZ0lDQmtZWFJoTG5CdmNDZ3BPMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSE53YkdsalpTNWpZV3hzS0dSaGRHRXNJR2x1WkdWNExDQXhLVHRjYmlBZ2ZWeHVJQ0F0TFhSb2FYTXVjMmw2WlR0Y2JpQWdjbVYwZFhKdUlIUnlkV1U3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdiR2x6ZEVOaFkyaGxSR1ZzWlhSbE8xeHVJaXdpZG1GeUlHRnpjMjlqU1c1a1pYaFBaaUE5SUhKbGNYVnBjbVVvSnk0dlgyRnpjMjlqU1c1a1pYaFBaaWNwTzF4dVhHNHZLaXBjYmlBcUlFZGxkSE1nZEdobElHeHBjM1FnWTJGamFHVWdkbUZzZFdVZ1ptOXlJR0JyWlhsZ0xseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaUJBYm1GdFpTQm5aWFJjYmlBcUlFQnRaVzFpWlhKUFppQk1hWE4wUTJGamFHVmNiaUFxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JyWlhrZ1ZHaGxJR3RsZVNCdlppQjBhR1VnZG1Gc2RXVWdkRzhnWjJWMExseHVJQ29nUUhKbGRIVnlibk1nZXlwOUlGSmxkSFZ5Ym5NZ2RHaGxJR1Z1ZEhKNUlIWmhiSFZsTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJzYVhOMFEyRmphR1ZIWlhRb2EyVjVLU0I3WEc0Z0lIWmhjaUJrWVhSaElEMGdkR2hwY3k1ZlgyUmhkR0ZmWHl4Y2JpQWdJQ0FnSUdsdVpHVjRJRDBnWVhOemIyTkpibVJsZUU5bUtHUmhkR0VzSUd0bGVTazdYRzVjYmlBZ2NtVjBkWEp1SUdsdVpHVjRJRHdnTUNBL0lIVnVaR1ZtYVc1bFpDQTZJR1JoZEdGYmFXNWtaWGhkV3pGZE8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUd4cGMzUkRZV05vWlVkbGREdGNiaUlzSW5aaGNpQmhjM052WTBsdVpHVjRUMllnUFNCeVpYRjFhWEpsS0NjdUwxOWhjM052WTBsdVpHVjRUMlluS1R0Y2JseHVMeW9xWEc0Z0tpQkRhR1ZqYTNNZ2FXWWdZU0JzYVhOMElHTmhZMmhsSUhaaGJIVmxJR1p2Y2lCZ2EyVjVZQ0JsZUdsemRITXVYRzRnS2x4dUlDb2dRSEJ5YVhaaGRHVmNiaUFxSUVCdVlXMWxJR2hoYzF4dUlDb2dRRzFsYldKbGNrOW1JRXhwYzNSRFlXTm9aVnh1SUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUd0bGVTQlVhR1VnYTJWNUlHOW1JSFJvWlNCbGJuUnllU0IwYnlCamFHVmpheTVjYmlBcUlFQnlaWFIxY201eklIdGliMjlzWldGdWZTQlNaWFIxY201eklHQjBjblZsWUNCcFppQmhiaUJsYm5SeWVTQm1iM0lnWUd0bGVXQWdaWGhwYzNSekxDQmxiSE5sSUdCbVlXeHpaV0F1WEc0Z0tpOWNibVoxYm1OMGFXOXVJR3hwYzNSRFlXTm9aVWhoY3loclpYa3BJSHRjYmlBZ2NtVjBkWEp1SUdGemMyOWpTVzVrWlhoUFppaDBhR2x6TGw5ZlpHRjBZVjlmTENCclpYa3BJRDRnTFRFN1hHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnYkdsemRFTmhZMmhsU0dGek8xeHVJaXdpZG1GeUlHRnpjMjlqU1c1a1pYaFBaaUE5SUhKbGNYVnBjbVVvSnk0dlgyRnpjMjlqU1c1a1pYaFBaaWNwTzF4dVhHNHZLaXBjYmlBcUlGTmxkSE1nZEdobElHeHBjM1FnWTJGamFHVWdZR3RsZVdBZ2RHOGdZSFpoYkhWbFlDNWNiaUFxWEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ29nUUc1aGJXVWdjMlYwWEc0Z0tpQkFiV1Z0WW1WeVQyWWdUR2x6ZEVOaFkyaGxYRzRnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYTJWNUlGUm9aU0JyWlhrZ2IyWWdkR2hsSUhaaGJIVmxJSFJ2SUhObGRDNWNiaUFxSUVCd1lYSmhiU0I3S24wZ2RtRnNkV1VnVkdobElIWmhiSFZsSUhSdklITmxkQzVjYmlBcUlFQnlaWFIxY201eklIdFBZbXBsWTNSOUlGSmxkSFZ5Ym5NZ2RHaGxJR3hwYzNRZ1kyRmphR1VnYVc1emRHRnVZMlV1WEc0Z0tpOWNibVoxYm1OMGFXOXVJR3hwYzNSRFlXTm9aVk5sZENoclpYa3NJSFpoYkhWbEtTQjdYRzRnSUhaaGNpQmtZWFJoSUQwZ2RHaHBjeTVmWDJSaGRHRmZYeXhjYmlBZ0lDQWdJR2x1WkdWNElEMGdZWE56YjJOSmJtUmxlRTltS0dSaGRHRXNJR3RsZVNrN1hHNWNiaUFnYVdZZ0tHbHVaR1Y0SUR3Z01Da2dlMXh1SUNBZ0lDc3JkR2hwY3k1emFYcGxPMXh1SUNBZ0lHUmhkR0V1Y0hWemFDaGJhMlY1TENCMllXeDFaVjBwTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUdSaGRHRmJhVzVrWlhoZFd6RmRJRDBnZG1Gc2RXVTdYRzRnSUgxY2JpQWdjbVYwZFhKdUlIUm9hWE03WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdiR2x6ZEVOaFkyaGxVMlYwTzF4dUlpd2lkbUZ5SUd4cGMzUkRZV05vWlVOc1pXRnlJRDBnY21WeGRXbHlaU2duTGk5ZmJHbHpkRU5oWTJobFEyeGxZWEluS1N4Y2JpQWdJQ0JzYVhOMFEyRmphR1ZFWld4bGRHVWdQU0J5WlhGMWFYSmxLQ2N1TDE5c2FYTjBRMkZqYUdWRVpXeGxkR1VuS1N4Y2JpQWdJQ0JzYVhOMFEyRmphR1ZIWlhRZ1BTQnlaWEYxYVhKbEtDY3VMMTlzYVhOMFEyRmphR1ZIWlhRbktTeGNiaUFnSUNCc2FYTjBRMkZqYUdWSVlYTWdQU0J5WlhGMWFYSmxLQ2N1TDE5c2FYTjBRMkZqYUdWSVlYTW5LU3hjYmlBZ0lDQnNhWE4wUTJGamFHVlRaWFFnUFNCeVpYRjFhWEpsS0NjdUwxOXNhWE4wUTJGamFHVlRaWFFuS1R0Y2JseHVMeW9xWEc0Z0tpQkRjbVZoZEdWeklHRnVJR3hwYzNRZ1kyRmphR1VnYjJKcVpXTjBMbHh1SUNwY2JpQXFJRUJ3Y21sMllYUmxYRzRnS2lCQVkyOXVjM1J5ZFdOMGIzSmNiaUFxSUVCd1lYSmhiU0I3UVhKeVlYbDlJRnRsYm5SeWFXVnpYU0JVYUdVZ2EyVjVMWFpoYkhWbElIQmhhWEp6SUhSdklHTmhZMmhsTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJNYVhOMFEyRmphR1VvWlc1MGNtbGxjeWtnZTF4dUlDQjJZWElnYVc1a1pYZ2dQU0F0TVN4Y2JpQWdJQ0FnSUd4bGJtZDBhQ0E5SUdWdWRISnBaWE1nUFQwZ2JuVnNiQ0EvSURBZ09pQmxiblJ5YVdWekxteGxibWQwYUR0Y2JseHVJQ0IwYUdsekxtTnNaV0Z5S0NrN1hHNGdJSGRvYVd4bElDZ3JLMmx1WkdWNElEd2diR1Z1WjNSb0tTQjdYRzRnSUNBZ2RtRnlJR1Z1ZEhKNUlEMGdaVzUwY21sbGMxdHBibVJsZUYwN1hHNGdJQ0FnZEdocGN5NXpaWFFvWlc1MGNubGJNRjBzSUdWdWRISjVXekZkS1R0Y2JpQWdmVnh1ZlZ4dVhHNHZMeUJCWkdRZ2JXVjBhRzlrY3lCMGJ5QmdUR2x6ZEVOaFkyaGxZQzVjYmt4cGMzUkRZV05vWlM1d2NtOTBiM1I1Y0dVdVkyeGxZWElnUFNCc2FYTjBRMkZqYUdWRGJHVmhjanRjYmt4cGMzUkRZV05vWlM1d2NtOTBiM1I1Y0dWYkoyUmxiR1YwWlNkZElEMGdiR2x6ZEVOaFkyaGxSR1ZzWlhSbE8xeHVUR2x6ZEVOaFkyaGxMbkJ5YjNSdmRIbHdaUzVuWlhRZ1BTQnNhWE4wUTJGamFHVkhaWFE3WEc1TWFYTjBRMkZqYUdVdWNISnZkRzkwZVhCbExtaGhjeUE5SUd4cGMzUkRZV05vWlVoaGN6dGNia3hwYzNSRFlXTm9aUzV3Y205MGIzUjVjR1V1YzJWMElEMGdiR2x6ZEVOaFkyaGxVMlYwTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlFeHBjM1JEWVdOb1pUdGNiaUlzSW5aaGNpQk1hWE4wUTJGamFHVWdQU0J5WlhGMWFYSmxLQ2N1TDE5TWFYTjBRMkZqYUdVbktUdGNibHh1THlvcVhHNGdLaUJTWlcxdmRtVnpJR0ZzYkNCclpYa3RkbUZzZFdVZ1pXNTBjbWxsY3lCbWNtOXRJSFJvWlNCemRHRmpheTVjYmlBcVhHNGdLaUJBY0hKcGRtRjBaVnh1SUNvZ1FHNWhiV1VnWTJ4bFlYSmNiaUFxSUVCdFpXMWlaWEpQWmlCVGRHRmphMXh1SUNvdlhHNW1kVzVqZEdsdmJpQnpkR0ZqYTBOc1pXRnlLQ2tnZTF4dUlDQjBhR2x6TGw5ZlpHRjBZVjlmSUQwZ2JtVjNJRXhwYzNSRFlXTm9aVHRjYmlBZ2RHaHBjeTV6YVhwbElEMGdNRHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnpkR0ZqYTBOc1pXRnlPMXh1SWl3aUx5b3FYRzRnS2lCU1pXMXZkbVZ6SUdCclpYbGdJR0Z1WkNCcGRITWdkbUZzZFdVZ1puSnZiU0IwYUdVZ2MzUmhZMnN1WEc0Z0tseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUlFQnVZVzFsSUdSbGJHVjBaVnh1SUNvZ1FHMWxiV0psY2s5bUlGTjBZV05yWEc0Z0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2EyVjVJRlJvWlNCclpYa2diMllnZEdobElIWmhiSFZsSUhSdklISmxiVzkyWlM1Y2JpQXFJRUJ5WlhSMWNtNXpJSHRpYjI5c1pXRnVmU0JTWlhSMWNtNXpJR0IwY25WbFlDQnBaaUIwYUdVZ1pXNTBjbmtnZDJGeklISmxiVzkyWldRc0lHVnNjMlVnWUdaaGJITmxZQzVjYmlBcUwxeHVablZ1WTNScGIyNGdjM1JoWTJ0RVpXeGxkR1VvYTJWNUtTQjdYRzRnSUhaaGNpQmtZWFJoSUQwZ2RHaHBjeTVmWDJSaGRHRmZYeXhjYmlBZ0lDQWdJSEpsYzNWc2RDQTlJR1JoZEdGYkoyUmxiR1YwWlNkZEtHdGxlU2s3WEc1Y2JpQWdkR2hwY3k1emFYcGxJRDBnWkdGMFlTNXphWHBsTzF4dUlDQnlaWFIxY200Z2NtVnpkV3gwTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSE4wWVdOclJHVnNaWFJsTzF4dUlpd2lMeW9xWEc0Z0tpQkhaWFJ6SUhSb1pTQnpkR0ZqYXlCMllXeDFaU0JtYjNJZ1lHdGxlV0F1WEc0Z0tseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUlFQnVZVzFsSUdkbGRGeHVJQ29nUUcxbGJXSmxjazltSUZOMFlXTnJYRzRnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYTJWNUlGUm9aU0JyWlhrZ2IyWWdkR2hsSUhaaGJIVmxJSFJ2SUdkbGRDNWNiaUFxSUVCeVpYUjFjbTV6SUhzcWZTQlNaWFIxY201eklIUm9aU0JsYm5SeWVTQjJZV3gxWlM1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnYzNSaFkydEhaWFFvYTJWNUtTQjdYRzRnSUhKbGRIVnliaUIwYUdsekxsOWZaR0YwWVY5ZkxtZGxkQ2hyWlhrcE8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhOMFlXTnJSMlYwTzF4dUlpd2lMeW9xWEc0Z0tpQkRhR1ZqYTNNZ2FXWWdZU0J6ZEdGamF5QjJZV3gxWlNCbWIzSWdZR3RsZVdBZ1pYaHBjM1J6TGx4dUlDcGNiaUFxSUVCd2NtbDJZWFJsWEc0Z0tpQkFibUZ0WlNCb1lYTmNiaUFxSUVCdFpXMWlaWEpQWmlCVGRHRmphMXh1SUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUd0bGVTQlVhR1VnYTJWNUlHOW1JSFJvWlNCbGJuUnllU0IwYnlCamFHVmpheTVjYmlBcUlFQnlaWFIxY201eklIdGliMjlzWldGdWZTQlNaWFIxY201eklHQjBjblZsWUNCcFppQmhiaUJsYm5SeWVTQm1iM0lnWUd0bGVXQWdaWGhwYzNSekxDQmxiSE5sSUdCbVlXeHpaV0F1WEc0Z0tpOWNibVoxYm1OMGFXOXVJSE4wWVdOclNHRnpLR3RsZVNrZ2UxeHVJQ0J5WlhSMWNtNGdkR2hwY3k1ZlgyUmhkR0ZmWHk1b1lYTW9hMlY1S1R0Y2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0J6ZEdGamEwaGhjenRjYmlJc0lpOHFLaUJFWlhSbFkzUWdabkpsWlNCMllYSnBZV0pzWlNCZ1oyeHZZbUZzWUNCbWNtOXRJRTV2WkdVdWFuTXVJQ292WEc1MllYSWdabkpsWlVkc2IySmhiQ0E5SUhSNWNHVnZaaUJuYkc5aVlXd2dQVDBnSjI5aWFtVmpkQ2NnSmlZZ1oyeHZZbUZzSUNZbUlHZHNiMkpoYkM1UFltcGxZM1FnUFQwOUlFOWlhbVZqZENBbUppQm5iRzlpWVd3N1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdabkpsWlVkc2IySmhiRHRjYmlJc0luWmhjaUJtY21WbFIyeHZZbUZzSUQwZ2NtVnhkV2x5WlNnbkxpOWZabkpsWlVkc2IySmhiQ2NwTzF4dVhHNHZLaW9nUkdWMFpXTjBJR1p5WldVZ2RtRnlhV0ZpYkdVZ1lITmxiR1pnTGlBcUwxeHVkbUZ5SUdaeVpXVlRaV3htSUQwZ2RIbHdaVzltSUhObGJHWWdQVDBnSjI5aWFtVmpkQ2NnSmlZZ2MyVnNaaUFtSmlCelpXeG1MazlpYW1WamRDQTlQVDBnVDJKcVpXTjBJQ1ltSUhObGJHWTdYRzVjYmk4cUtpQlZjMlZrSUdGeklHRWdjbVZtWlhKbGJtTmxJSFJ2SUhSb1pTQm5iRzlpWVd3Z2IySnFaV04wTGlBcUwxeHVkbUZ5SUhKdmIzUWdQU0JtY21WbFIyeHZZbUZzSUh4OElHWnlaV1ZUWld4bUlIeDhJRVoxYm1OMGFXOXVLQ2R5WlhSMWNtNGdkR2hwY3ljcEtDazdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnY205dmREdGNiaUlzSW5aaGNpQnliMjkwSUQwZ2NtVnhkV2x5WlNnbkxpOWZjbTl2ZENjcE8xeHVYRzR2S2lvZ1FuVnBiSFF0YVc0Z2RtRnNkV1VnY21WbVpYSmxibU5sY3k0Z0tpOWNiblpoY2lCVGVXMWliMndnUFNCeWIyOTBMbE41YldKdmJEdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JUZVcxaWIydzdYRzRpTENKMllYSWdVM2x0WW05c0lEMGdjbVZ4ZFdseVpTZ25MaTlmVTNsdFltOXNKeWs3WEc1Y2JpOHFLaUJWYzJWa0lHWnZjaUJpZFdsc2RDMXBiaUJ0WlhSb2IyUWdjbVZtWlhKbGJtTmxjeTRnS2k5Y2JuWmhjaUJ2WW1wbFkzUlFjbTkwYnlBOUlFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVN1hHNWNiaThxS2lCVmMyVmtJSFJ2SUdOb1pXTnJJRzlpYW1WamRITWdabTl5SUc5M2JpQndjbTl3WlhKMGFXVnpMaUFxTDF4dWRtRnlJR2hoYzA5M2JsQnliM0JsY25SNUlEMGdiMkpxWldOMFVISnZkRzh1YUdGelQzZHVVSEp2Y0dWeWRIazdYRzVjYmk4cUtseHVJQ29nVlhObFpDQjBieUJ5WlhOdmJIWmxJSFJvWlZ4dUlDb2dXMkIwYjFOMGNtbHVaMVJoWjJCZEtHaDBkSEE2THk5bFkyMWhMV2x1ZEdWeWJtRjBhVzl1WVd3dWIzSm5MMlZqYldFdE1qWXlMemN1TUM4amMyVmpMVzlpYW1WamRDNXdjbTkwYjNSNWNHVXVkRzl6ZEhKcGJtY3BYRzRnS2lCdlppQjJZV3gxWlhNdVhHNGdLaTljYm5aaGNpQnVZWFJwZG1WUFltcGxZM1JVYjFOMGNtbHVaeUE5SUc5aWFtVmpkRkJ5YjNSdkxuUnZVM1J5YVc1bk8xeHVYRzR2S2lvZ1FuVnBiSFF0YVc0Z2RtRnNkV1VnY21WbVpYSmxibU5sY3k0Z0tpOWNiblpoY2lCemVXMVViMU4wY21sdVoxUmhaeUE5SUZONWJXSnZiQ0EvSUZONWJXSnZiQzUwYjFOMGNtbHVaMVJoWnlBNklIVnVaR1ZtYVc1bFpEdGNibHh1THlvcVhHNGdLaUJCSUhOd1pXTnBZV3hwZW1Wa0lIWmxjbk5wYjI0Z2IyWWdZR0poYzJWSFpYUlVZV2RnSUhkb2FXTm9JR2xuYm05eVpYTWdZRk41YldKdmJDNTBiMU4wY21sdVoxUmhaMkFnZG1Gc2RXVnpMbHh1SUNwY2JpQXFJRUJ3Y21sMllYUmxYRzRnS2lCQWNHRnlZVzBnZXlwOUlIWmhiSFZsSUZSb1pTQjJZV3gxWlNCMGJ5QnhkV1Z5ZVM1Y2JpQXFJRUJ5WlhSMWNtNXpJSHR6ZEhKcGJtZDlJRkpsZEhWeWJuTWdkR2hsSUhKaGR5QmdkRzlUZEhKcGJtZFVZV2RnTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJuWlhSU1lYZFVZV2NvZG1Gc2RXVXBJSHRjYmlBZ2RtRnlJR2x6VDNkdUlEMGdhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2gyWVd4MVpTd2djM2x0Vkc5VGRISnBibWRVWVdjcExGeHVJQ0FnSUNBZ2RHRm5JRDBnZG1Gc2RXVmJjM2x0Vkc5VGRISnBibWRVWVdkZE8xeHVYRzRnSUhSeWVTQjdYRzRnSUNBZ2RtRnNkV1ZiYzNsdFZHOVRkSEpwYm1kVVlXZGRJRDBnZFc1a1pXWnBibVZrTzF4dUlDQWdJSFpoY2lCMWJtMWhjMnRsWkNBOUlIUnlkV1U3WEc0Z0lIMGdZMkYwWTJnZ0tHVXBJSHQ5WEc1Y2JpQWdkbUZ5SUhKbGMzVnNkQ0E5SUc1aGRHbDJaVTlpYW1WamRGUnZVM1J5YVc1bkxtTmhiR3dvZG1Gc2RXVXBPMXh1SUNCcFppQW9kVzV0WVhOclpXUXBJSHRjYmlBZ0lDQnBaaUFvYVhOUGQyNHBJSHRjYmlBZ0lDQWdJSFpoYkhWbFczTjViVlJ2VTNSeWFXNW5WR0ZuWFNBOUlIUmhaenRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ1pHVnNaWFJsSUhaaGJIVmxXM041YlZSdlUzUnlhVzVuVkdGblhUdGNiaUFnSUNCOVhHNGdJSDFjYmlBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm5aWFJTWVhkVVlXYzdYRzRpTENJdktpb2dWWE5sWkNCbWIzSWdZblZwYkhRdGFXNGdiV1YwYUc5a0lISmxabVZ5Wlc1alpYTXVJQ292WEc1MllYSWdiMkpxWldOMFVISnZkRzhnUFNCUFltcGxZM1F1Y0hKdmRHOTBlWEJsTzF4dVhHNHZLaXBjYmlBcUlGVnpaV1FnZEc4Z2NtVnpiMngyWlNCMGFHVmNiaUFxSUZ0Z2RHOVRkSEpwYm1kVVlXZGdYU2hvZEhSd09pOHZaV050WVMxcGJuUmxjbTVoZEdsdmJtRnNMbTl5Wnk5bFkyMWhMVEkyTWk4M0xqQXZJM05sWXkxdlltcGxZM1F1Y0hKdmRHOTBlWEJsTG5SdmMzUnlhVzVuS1Z4dUlDb2diMllnZG1Gc2RXVnpMbHh1SUNvdlhHNTJZWElnYm1GMGFYWmxUMkpxWldOMFZHOVRkSEpwYm1jZ1BTQnZZbXBsWTNSUWNtOTBieTUwYjFOMGNtbHVaenRjYmx4dUx5b3FYRzRnS2lCRGIyNTJaWEowY3lCZ2RtRnNkV1ZnSUhSdklHRWdjM1J5YVc1bklIVnphVzVuSUdCUFltcGxZM1F1Y0hKdmRHOTBlWEJsTG5SdlUzUnlhVzVuWUM1Y2JpQXFYRzRnS2lCQWNISnBkbUYwWlZ4dUlDb2dRSEJoY21GdElIc3FmU0IyWVd4MVpTQlVhR1VnZG1Gc2RXVWdkRzhnWTI5dWRtVnlkQzVjYmlBcUlFQnlaWFIxY201eklIdHpkSEpwYm1kOUlGSmxkSFZ5Ym5NZ2RHaGxJR052Ym5abGNuUmxaQ0J6ZEhKcGJtY3VYRzRnS2k5Y2JtWjFibU4wYVc5dUlHOWlhbVZqZEZSdlUzUnlhVzVuS0haaGJIVmxLU0I3WEc0Z0lISmxkSFZ5YmlCdVlYUnBkbVZQWW1wbFkzUlViMU4wY21sdVp5NWpZV3hzS0haaGJIVmxLVHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnZZbXBsWTNSVWIxTjBjbWx1Wnp0Y2JpSXNJblpoY2lCVGVXMWliMndnUFNCeVpYRjFhWEpsS0NjdUwxOVRlVzFpYjJ3bktTeGNiaUFnSUNCblpYUlNZWGRVWVdjZ1BTQnlaWEYxYVhKbEtDY3VMMTluWlhSU1lYZFVZV2NuS1N4Y2JpQWdJQ0J2WW1wbFkzUlViMU4wY21sdVp5QTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkRlJ2VTNSeWFXNW5KeWs3WEc1Y2JpOHFLaUJnVDJKcVpXTjBJM1J2VTNSeWFXNW5ZQ0J5WlhOMWJIUWdjbVZtWlhKbGJtTmxjeTRnS2k5Y2JuWmhjaUJ1ZFd4c1ZHRm5JRDBnSjF0dlltcGxZM1FnVG5Wc2JGMG5MRnh1SUNBZ0lIVnVaR1ZtYVc1bFpGUmhaeUE5SUNkYmIySnFaV04wSUZWdVpHVm1hVzVsWkYwbk8xeHVYRzR2S2lvZ1FuVnBiSFF0YVc0Z2RtRnNkV1VnY21WbVpYSmxibU5sY3k0Z0tpOWNiblpoY2lCemVXMVViMU4wY21sdVoxUmhaeUE5SUZONWJXSnZiQ0EvSUZONWJXSnZiQzUwYjFOMGNtbHVaMVJoWnlBNklIVnVaR1ZtYVc1bFpEdGNibHh1THlvcVhHNGdLaUJVYUdVZ1ltRnpaU0JwYlhCc1pXMWxiblJoZEdsdmJpQnZaaUJnWjJWMFZHRm5ZQ0IzYVhSb2IzVjBJR1poYkd4aVlXTnJjeUJtYjNJZ1luVm5aM2tnWlc1MmFYSnZibTFsYm5SekxseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaUJBY0dGeVlXMGdleXA5SUhaaGJIVmxJRlJvWlNCMllXeDFaU0IwYnlCeGRXVnllUzVjYmlBcUlFQnlaWFIxY201eklIdHpkSEpwYm1kOUlGSmxkSFZ5Ym5NZ2RHaGxJR0IwYjFOMGNtbHVaMVJoWjJBdVhHNGdLaTljYm1aMWJtTjBhVzl1SUdKaGMyVkhaWFJVWVdjb2RtRnNkV1VwSUh0Y2JpQWdhV1lnS0haaGJIVmxJRDA5SUc1MWJHd3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RtRnNkV1VnUFQwOUlIVnVaR1ZtYVc1bFpDQS9JSFZ1WkdWbWFXNWxaRlJoWnlBNklHNTFiR3hVWVdjN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUNoemVXMVViMU4wY21sdVoxUmhaeUFtSmlCemVXMVViMU4wY21sdVoxUmhaeUJwYmlCUFltcGxZM1FvZG1Gc2RXVXBLVnh1SUNBZ0lEOGdaMlYwVW1GM1ZHRm5LSFpoYkhWbEtWeHVJQ0FnSURvZ2IySnFaV04wVkc5VGRISnBibWNvZG1Gc2RXVXBPMXh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHSmhjMlZIWlhSVVlXYzdYRzRpTENJdktpcGNiaUFxSUVOb1pXTnJjeUJwWmlCZ2RtRnNkV1ZnSUdseklIUm9aVnh1SUNvZ1cyeGhibWQxWVdkbElIUjVjR1ZkS0doMGRIQTZMeTkzZDNjdVpXTnRZUzFwYm5SbGNtNWhkR2x2Ym1Gc0xtOXlaeTlsWTIxaExUSTJNaTgzTGpBdkkzTmxZeTFsWTIxaGMyTnlhWEIwTFd4aGJtZDFZV2RsTFhSNWNHVnpLVnh1SUNvZ2IyWWdZRTlpYW1WamRHQXVJQ2hsTG1jdUlHRnljbUY1Y3l3Z1puVnVZM1JwYjI1ekxDQnZZbXBsWTNSekxDQnlaV2RsZUdWekxDQmdibVYzSUU1MWJXSmxjaWd3S1dBc0lHRnVaQ0JnYm1WM0lGTjBjbWx1Wnlnbkp5bGdLVnh1SUNwY2JpQXFJRUJ6ZEdGMGFXTmNiaUFxSUVCdFpXMWlaWEpQWmlCZlhHNGdLaUJBYzJsdVkyVWdNQzR4TGpCY2JpQXFJRUJqWVhSbFoyOXllU0JNWVc1blhHNGdLaUJBY0dGeVlXMGdleXA5SUhaaGJIVmxJRlJvWlNCMllXeDFaU0IwYnlCamFHVmpheTVjYmlBcUlFQnlaWFIxY201eklIdGliMjlzWldGdWZTQlNaWFIxY201eklHQjBjblZsWUNCcFppQmdkbUZzZFdWZ0lHbHpJR0Z1SUc5aWFtVmpkQ3dnWld4elpTQmdabUZzYzJWZ0xseHVJQ29nUUdWNFlXMXdiR1ZjYmlBcVhHNGdLaUJmTG1selQySnFaV04wS0h0OUtUdGNiaUFxSUM4dklEMCtJSFJ5ZFdWY2JpQXFYRzRnS2lCZkxtbHpUMkpxWldOMEtGc3hMQ0F5TENBelhTazdYRzRnS2lBdkx5QTlQaUIwY25WbFhHNGdLbHh1SUNvZ1h5NXBjMDlpYW1WamRDaGZMbTV2YjNBcE8xeHVJQ29nTHk4Z1BUNGdkSEoxWlZ4dUlDcGNiaUFxSUY4dWFYTlBZbXBsWTNRb2JuVnNiQ2s3WEc0Z0tpQXZMeUE5UGlCbVlXeHpaVnh1SUNvdlhHNW1kVzVqZEdsdmJpQnBjMDlpYW1WamRDaDJZV3gxWlNrZ2UxeHVJQ0IyWVhJZ2RIbHdaU0E5SUhSNWNHVnZaaUIyWVd4MVpUdGNiaUFnY21WMGRYSnVJSFpoYkhWbElDRTlJRzUxYkd3Z0ppWWdLSFI1Y0dVZ1BUMGdKMjlpYW1WamRDY2dmSHdnZEhsd1pTQTlQU0FuWm5WdVkzUnBiMjRuS1R0Y2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JwYzA5aWFtVmpkRHRjYmlJc0luWmhjaUJpWVhObFIyVjBWR0ZuSUQwZ2NtVnhkV2x5WlNnbkxpOWZZbUZ6WlVkbGRGUmhaeWNwTEZ4dUlDQWdJR2x6VDJKcVpXTjBJRDBnY21WeGRXbHlaU2duTGk5cGMwOWlhbVZqZENjcE8xeHVYRzR2S2lvZ1lFOWlhbVZqZENOMGIxTjBjbWx1WjJBZ2NtVnpkV3gwSUhKbFptVnlaVzVqWlhNdUlDb3ZYRzUyWVhJZ1lYTjVibU5VWVdjZ1BTQW5XMjlpYW1WamRDQkJjM2x1WTBaMWJtTjBhVzl1WFNjc1hHNGdJQ0FnWm5WdVkxUmhaeUE5SUNkYmIySnFaV04wSUVaMWJtTjBhVzl1WFNjc1hHNGdJQ0FnWjJWdVZHRm5JRDBnSjF0dlltcGxZM1FnUjJWdVpYSmhkRzl5Um5WdVkzUnBiMjVkSnl4Y2JpQWdJQ0J3Y205NGVWUmhaeUE5SUNkYmIySnFaV04wSUZCeWIzaDVYU2M3WEc1Y2JpOHFLbHh1SUNvZ1EyaGxZMnR6SUdsbUlHQjJZV3gxWldBZ2FYTWdZMnhoYzNOcFptbGxaQ0JoY3lCaElHQkdkVzVqZEdsdmJtQWdiMkpxWldOMExseHVJQ3BjYmlBcUlFQnpkR0YwYVdOY2JpQXFJRUJ0WlcxaVpYSlBaaUJmWEc0Z0tpQkFjMmx1WTJVZ01DNHhMakJjYmlBcUlFQmpZWFJsWjI5eWVTQk1ZVzVuWEc0Z0tpQkFjR0Z5WVcwZ2V5cDlJSFpoYkhWbElGUm9aU0IyWVd4MVpTQjBieUJqYUdWamF5NWNiaUFxSUVCeVpYUjFjbTV6SUh0aWIyOXNaV0Z1ZlNCU1pYUjFjbTV6SUdCMGNuVmxZQ0JwWmlCZ2RtRnNkV1ZnSUdseklHRWdablZ1WTNScGIyNHNJR1ZzYzJVZ1lHWmhiSE5sWUM1Y2JpQXFJRUJsZUdGdGNHeGxYRzRnS2x4dUlDb2dYeTVwYzBaMWJtTjBhVzl1S0Y4cE8xeHVJQ29nTHk4Z1BUNGdkSEoxWlZ4dUlDcGNiaUFxSUY4dWFYTkdkVzVqZEdsdmJpZ3ZZV0pqTHlrN1hHNGdLaUF2THlBOVBpQm1ZV3h6WlZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJwYzBaMWJtTjBhVzl1S0haaGJIVmxLU0I3WEc0Z0lHbG1JQ2doYVhOUFltcGxZM1FvZG1Gc2RXVXBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQjlYRzRnSUM4dklGUm9aU0IxYzJVZ2IyWWdZRTlpYW1WamRDTjBiMU4wY21sdVoyQWdZWFp2YVdSeklHbHpjM1ZsY3lCM2FYUm9JSFJvWlNCZ2RIbHdaVzltWUNCdmNHVnlZWFJ2Y2x4dUlDQXZMeUJwYmlCVFlXWmhjbWtnT1NCM2FHbGphQ0J5WlhSMWNtNXpJQ2R2WW1wbFkzUW5JR1p2Y2lCMGVYQmxaQ0JoY25KaGVYTWdZVzVrSUc5MGFHVnlJR052Ym5OMGNuVmpkRzl5Y3k1Y2JpQWdkbUZ5SUhSaFp5QTlJR0poYzJWSFpYUlVZV2NvZG1Gc2RXVXBPMXh1SUNCeVpYUjFjbTRnZEdGbklEMDlJR1oxYm1OVVlXY2dmSHdnZEdGbklEMDlJR2RsYmxSaFp5QjhmQ0IwWVdjZ1BUMGdZWE41Ym1OVVlXY2dmSHdnZEdGbklEMDlJSEJ5YjNoNVZHRm5PMXh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHbHpSblZ1WTNScGIyNDdYRzRpTENKMllYSWdjbTl2ZENBOUlISmxjWFZwY21Vb0p5NHZYM0p2YjNRbktUdGNibHh1THlvcUlGVnpaV1FnZEc4Z1pHVjBaV04wSUc5MlpYSnlaV0ZqYUdsdVp5QmpiM0psTFdweklITm9hVzF6TGlBcUwxeHVkbUZ5SUdOdmNtVktjMFJoZEdFZ1BTQnliMjkwV3lkZlgyTnZjbVV0YW5OZmMyaGhjbVZrWDE4blhUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JqYjNKbFNuTkVZWFJoTzF4dUlpd2lkbUZ5SUdOdmNtVktjMFJoZEdFZ1BTQnlaWEYxYVhKbEtDY3VMMTlqYjNKbFNuTkVZWFJoSnlrN1hHNWNiaThxS2lCVmMyVmtJSFJ2SUdSbGRHVmpkQ0J0WlhSb2IyUnpJRzFoYzNGMVpYSmhaR2x1WnlCaGN5QnVZWFJwZG1VdUlDb3ZYRzUyWVhJZ2JXRnphMU55WTB0bGVTQTlJQ2htZFc1amRHbHZiaWdwSUh0Y2JpQWdkbUZ5SUhWcFpDQTlJQzliWGk1ZEt5UXZMbVY0WldNb1kyOXlaVXB6UkdGMFlTQW1KaUJqYjNKbFNuTkVZWFJoTG10bGVYTWdKaVlnWTI5eVpVcHpSR0YwWVM1clpYbHpMa2xGWDFCU1QxUlBJSHg4SUNjbktUdGNiaUFnY21WMGRYSnVJSFZwWkNBL0lDZ25VM2x0WW05c0tITnlZeWxmTVM0bklDc2dkV2xrS1NBNklDY25PMXh1ZlNncEtUdGNibHh1THlvcVhHNGdLaUJEYUdWamEzTWdhV1lnWUdaMWJtTmdJR2hoY3lCcGRITWdjMjkxY21ObElHMWhjMnRsWkM1Y2JpQXFYRzRnS2lCQWNISnBkbUYwWlZ4dUlDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdablZ1WXlCVWFHVWdablZ1WTNScGIyNGdkRzhnWTJobFkyc3VYRzRnS2lCQWNtVjBkWEp1Y3lCN1ltOXZiR1ZoYm4wZ1VtVjBkWEp1Y3lCZ2RISjFaV0FnYVdZZ1lHWjFibU5nSUdseklHMWhjMnRsWkN3Z1pXeHpaU0JnWm1Gc2MyVmdMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQnBjMDFoYzJ0bFpDaG1kVzVqS1NCN1hHNGdJSEpsZEhWeWJpQWhJVzFoYzJ0VGNtTkxaWGtnSmlZZ0tHMWhjMnRUY21OTFpYa2dhVzRnWm5WdVl5azdYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2FYTk5ZWE5yWldRN1hHNGlMQ0l2S2lvZ1ZYTmxaQ0JtYjNJZ1luVnBiSFF0YVc0Z2JXVjBhRzlrSUhKbFptVnlaVzVqWlhNdUlDb3ZYRzUyWVhJZ1puVnVZMUJ5YjNSdklEMGdSblZ1WTNScGIyNHVjSEp2ZEc5MGVYQmxPMXh1WEc0dktpb2dWWE5sWkNCMGJ5QnlaWE52YkhabElIUm9aU0JrWldOdmJYQnBiR1ZrSUhOdmRYSmpaU0J2WmlCbWRXNWpkR2x2Ym5NdUlDb3ZYRzUyWVhJZ1puVnVZMVJ2VTNSeWFXNW5JRDBnWm5WdVkxQnliM1J2TG5SdlUzUnlhVzVuTzF4dVhHNHZLaXBjYmlBcUlFTnZiblpsY25SeklHQm1kVzVqWUNCMGJ5QnBkSE1nYzI5MWNtTmxJR052WkdVdVhHNGdLbHh1SUNvZ1FIQnlhWFpoZEdWY2JpQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJR1oxYm1NZ1ZHaGxJR1oxYm1OMGFXOXVJSFJ2SUdOdmJuWmxjblF1WEc0Z0tpQkFjbVYwZFhKdWN5QjdjM1J5YVc1bmZTQlNaWFIxY201eklIUm9aU0J6YjNWeVkyVWdZMjlrWlM1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnZEc5VGIzVnlZMlVvWm5WdVl5a2dlMXh1SUNCcFppQW9ablZ1WXlBaFBTQnVkV3hzS1NCN1hHNGdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCbWRXNWpWRzlUZEhKcGJtY3VZMkZzYkNobWRXNWpLVHRjYmlBZ0lDQjlJR05oZEdOb0lDaGxLU0I3ZlZ4dUlDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnS0daMWJtTWdLeUFuSnlrN1hHNGdJQ0FnZlNCallYUmphQ0FvWlNrZ2UzMWNiaUFnZlZ4dUlDQnlaWFIxY200Z0p5YzdYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2RHOVRiM1Z5WTJVN1hHNGlMQ0oyWVhJZ2FYTkdkVzVqZEdsdmJpQTlJSEpsY1hWcGNtVW9KeTR2YVhOR2RXNWpkR2x2YmljcExGeHVJQ0FnSUdselRXRnphMlZrSUQwZ2NtVnhkV2x5WlNnbkxpOWZhWE5OWVhOclpXUW5LU3hjYmlBZ0lDQnBjMDlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR2YVhOUFltcGxZM1FuS1N4Y2JpQWdJQ0IwYjFOdmRYSmpaU0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZVMjkxY21ObEp5azdYRzVjYmk4cUtseHVJQ29nVlhObFpDQjBieUJ0WVhSamFDQmdVbVZuUlhod1lGeHVJQ29nVzNONWJuUmhlQ0JqYUdGeVlXTjBaWEp6WFNob2RIUndPaTh2WldOdFlTMXBiblJsY201aGRHbHZibUZzTG05eVp5OWxZMjFoTFRJMk1pODNMakF2STNObFl5MXdZWFIwWlhKdWN5a3VYRzRnS2k5Y2JuWmhjaUJ5WlZKbFowVjRjRU5vWVhJZ1BTQXZXMXhjWEZ4ZUpDNHFLejhvS1Z0Y1hGMTdmWHhkTDJjN1hHNWNiaThxS2lCVmMyVmtJSFJ2SUdSbGRHVmpkQ0JvYjNOMElHTnZibk4wY25WamRHOXljeUFvVTJGbVlYSnBLUzRnS2k5Y2JuWmhjaUJ5WlVselNHOXpkRU4wYjNJZ1BTQXZYbHhjVzI5aWFtVmpkQ0F1S3o5RGIyNXpkSEoxWTNSdmNseGNYU1F2TzF4dVhHNHZLaW9nVlhObFpDQm1iM0lnWW5WcGJIUXRhVzRnYldWMGFHOWtJSEpsWm1WeVpXNWpaWE11SUNvdlhHNTJZWElnWm5WdVkxQnliM1J2SUQwZ1JuVnVZM1JwYjI0dWNISnZkRzkwZVhCbExGeHVJQ0FnSUc5aWFtVmpkRkJ5YjNSdklEMGdUMkpxWldOMExuQnliM1J2ZEhsd1pUdGNibHh1THlvcUlGVnpaV1FnZEc4Z2NtVnpiMngyWlNCMGFHVWdaR1ZqYjIxd2FXeGxaQ0J6YjNWeVkyVWdiMllnWm5WdVkzUnBiMjV6TGlBcUwxeHVkbUZ5SUdaMWJtTlViMU4wY21sdVp5QTlJR1oxYm1OUWNtOTBieTUwYjFOMGNtbHVaenRjYmx4dUx5b3FJRlZ6WldRZ2RHOGdZMmhsWTJzZ2IySnFaV04wY3lCbWIzSWdiM2R1SUhCeWIzQmxjblJwWlhNdUlDb3ZYRzUyWVhJZ2FHRnpUM2R1VUhKdmNHVnlkSGtnUFNCdlltcGxZM1JRY205MGJ5NW9ZWE5QZDI1UWNtOXdaWEowZVR0Y2JseHVMeW9xSUZWelpXUWdkRzhnWkdWMFpXTjBJR2xtSUdFZ2JXVjBhRzlrSUdseklHNWhkR2wyWlM0Z0tpOWNiblpoY2lCeVpVbHpUbUYwYVhabElEMGdVbVZuUlhod0tDZGVKeUFyWEc0Z0lHWjFibU5VYjFOMGNtbHVaeTVqWVd4c0tHaGhjMDkzYmxCeWIzQmxjblI1S1M1eVpYQnNZV05sS0hKbFVtVm5SWGh3UTJoaGNpd2dKMXhjWEZ3a0ppY3BYRzRnSUM1eVpYQnNZV05sS0M5b1lYTlBkMjVRY205d1pYSjBlWHdvWm5WdVkzUnBiMjRwTGlvL0tEODlYRnhjWEZ4Y0tDbDhJR1p2Y2lBdUt6OG9QejFjWEZ4Y1hGeGRLUzluTENBbkpERXVLajhuS1NBcklDY2tKMXh1S1R0Y2JseHVMeW9xWEc0Z0tpQlVhR1VnWW1GelpTQnBiWEJzWlcxbGJuUmhkR2x2YmlCdlppQmdYeTVwYzA1aGRHbDJaV0FnZDJsMGFHOTFkQ0JpWVdRZ2MyaHBiU0JqYUdWamEzTXVYRzRnS2x4dUlDb2dRSEJ5YVhaaGRHVmNiaUFxSUVCd1lYSmhiU0I3S24wZ2RtRnNkV1VnVkdobElIWmhiSFZsSUhSdklHTm9aV05yTGx4dUlDb2dRSEpsZEhWeWJuTWdlMkp2YjJ4bFlXNTlJRkpsZEhWeWJuTWdZSFJ5ZFdWZ0lHbG1JR0IyWVd4MVpXQWdhWE1nWVNCdVlYUnBkbVVnWm5WdVkzUnBiMjRzWEc0Z0tpQWdaV3h6WlNCZ1ptRnNjMlZnTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJpWVhObFNYTk9ZWFJwZG1Vb2RtRnNkV1VwSUh0Y2JpQWdhV1lnS0NGcGMwOWlhbVZqZENoMllXeDFaU2tnZkh3Z2FYTk5ZWE5yWldRb2RtRnNkV1VwS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0I5WEc0Z0lIWmhjaUJ3WVhSMFpYSnVJRDBnYVhOR2RXNWpkR2x2YmloMllXeDFaU2tnUHlCeVpVbHpUbUYwYVhabElEb2djbVZKYzBodmMzUkRkRzl5TzF4dUlDQnlaWFIxY200Z2NHRjBkR1Z5Ymk1MFpYTjBLSFJ2VTI5MWNtTmxLSFpoYkhWbEtTazdYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1ltRnpaVWx6VG1GMGFYWmxPMXh1SWl3aUx5b3FYRzRnS2lCSFpYUnpJSFJvWlNCMllXeDFaU0JoZENCZ2EyVjVZQ0J2WmlCZ2IySnFaV04wWUM1Y2JpQXFYRzRnS2lCQWNISnBkbUYwWlZ4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlGdHZZbXBsWTNSZElGUm9aU0J2WW1wbFkzUWdkRzhnY1hWbGNua3VYRzRnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYTJWNUlGUm9aU0JyWlhrZ2IyWWdkR2hsSUhCeWIzQmxjblI1SUhSdklHZGxkQzVjYmlBcUlFQnlaWFIxY201eklIc3FmU0JTWlhSMWNtNXpJSFJvWlNCd2NtOXdaWEowZVNCMllXeDFaUzVjYmlBcUwxeHVablZ1WTNScGIyNGdaMlYwVm1Gc2RXVW9iMkpxWldOMExDQnJaWGtwSUh0Y2JpQWdjbVYwZFhKdUlHOWlhbVZqZENBOVBTQnVkV3hzSUQ4Z2RXNWtaV1pwYm1Wa0lEb2diMkpxWldOMFcydGxlVjA3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdaMlYwVm1Gc2RXVTdYRzRpTENKMllYSWdZbUZ6WlVselRtRjBhWFpsSUQwZ2NtVnhkV2x5WlNnbkxpOWZZbUZ6WlVselRtRjBhWFpsSnlrc1hHNGdJQ0FnWjJWMFZtRnNkV1VnUFNCeVpYRjFhWEpsS0NjdUwxOW5aWFJXWVd4MVpTY3BPMXh1WEc0dktpcGNiaUFxSUVkbGRITWdkR2hsSUc1aGRHbDJaU0JtZFc1amRHbHZiaUJoZENCZ2EyVjVZQ0J2WmlCZ2IySnFaV04wWUM1Y2JpQXFYRzRnS2lCQWNISnBkbUYwWlZ4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHOWlhbVZqZENCVWFHVWdiMkpxWldOMElIUnZJSEYxWlhKNUxseHVJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR3RsZVNCVWFHVWdhMlY1SUc5bUlIUm9aU0J0WlhSb2IyUWdkRzhnWjJWMExseHVJQ29nUUhKbGRIVnlibk1nZXlwOUlGSmxkSFZ5Ym5NZ2RHaGxJR1oxYm1OMGFXOXVJR2xtSUdsMEozTWdibUYwYVhabExDQmxiSE5sSUdCMWJtUmxabWx1WldSZ0xseHVJQ292WEc1bWRXNWpkR2x2YmlCblpYUk9ZWFJwZG1Vb2IySnFaV04wTENCclpYa3BJSHRjYmlBZ2RtRnlJSFpoYkhWbElEMGdaMlYwVm1Gc2RXVW9iMkpxWldOMExDQnJaWGtwTzF4dUlDQnlaWFIxY200Z1ltRnpaVWx6VG1GMGFYWmxLSFpoYkhWbEtTQS9JSFpoYkhWbElEb2dkVzVrWldacGJtVmtPMXh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHZGxkRTVoZEdsMlpUdGNiaUlzSW5aaGNpQm5aWFJPWVhScGRtVWdQU0J5WlhGMWFYSmxLQ2N1TDE5blpYUk9ZWFJwZG1VbktTeGNiaUFnSUNCeWIyOTBJRDBnY21WeGRXbHlaU2duTGk5ZmNtOXZkQ2NwTzF4dVhHNHZLaUJDZFdsc2RDMXBiaUJ0WlhSb2IyUWdjbVZtWlhKbGJtTmxjeUIwYUdGMElHRnlaU0IyWlhKcFptbGxaQ0IwYnlCaVpTQnVZWFJwZG1VdUlDb3ZYRzUyWVhJZ1RXRndJRDBnWjJWMFRtRjBhWFpsS0hKdmIzUXNJQ2ROWVhBbktUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JOWVhBN1hHNGlMQ0oyWVhJZ1oyVjBUbUYwYVhabElEMGdjbVZ4ZFdseVpTZ25MaTlmWjJWMFRtRjBhWFpsSnlrN1hHNWNiaThxSUVKMWFXeDBMV2x1SUcxbGRHaHZaQ0J5WldabGNtVnVZMlZ6SUhSb1lYUWdZWEpsSUhabGNtbG1hV1ZrSUhSdklHSmxJRzVoZEdsMlpTNGdLaTljYm5aaGNpQnVZWFJwZG1WRGNtVmhkR1VnUFNCblpYUk9ZWFJwZG1Vb1QySnFaV04wTENBblkzSmxZWFJsSnlrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdibUYwYVhabFEzSmxZWFJsTzF4dUlpd2lkbUZ5SUc1aGRHbDJaVU55WldGMFpTQTlJSEpsY1hWcGNtVW9KeTR2WDI1aGRHbDJaVU55WldGMFpTY3BPMXh1WEc0dktpcGNiaUFxSUZKbGJXOTJaWE1nWVd4c0lHdGxlUzEyWVd4MVpTQmxiblJ5YVdWeklHWnliMjBnZEdobElHaGhjMmd1WEc0Z0tseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUlFQnVZVzFsSUdOc1pXRnlYRzRnS2lCQWJXVnRZbVZ5VDJZZ1NHRnphRnh1SUNvdlhHNW1kVzVqZEdsdmJpQm9ZWE5vUTJ4bFlYSW9LU0I3WEc0Z0lIUm9hWE11WDE5a1lYUmhYMThnUFNCdVlYUnBkbVZEY21WaGRHVWdQeUJ1WVhScGRtVkRjbVZoZEdVb2JuVnNiQ2tnT2lCN2ZUdGNiaUFnZEdocGN5NXphWHBsSUQwZ01EdGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCb1lYTm9RMnhsWVhJN1hHNGlMQ0l2S2lwY2JpQXFJRkpsYlc5MlpYTWdZR3RsZVdBZ1lXNWtJR2wwY3lCMllXeDFaU0JtY205dElIUm9aU0JvWVhOb0xseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaUJBYm1GdFpTQmtaV3hsZEdWY2JpQXFJRUJ0WlcxaVpYSlBaaUJJWVhOb1hHNGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdhR0Z6YUNCVWFHVWdhR0Z6YUNCMGJ5QnRiMlJwWm5rdVhHNGdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdhMlY1SUZSb1pTQnJaWGtnYjJZZ2RHaGxJSFpoYkhWbElIUnZJSEpsYlc5MlpTNWNiaUFxSUVCeVpYUjFjbTV6SUh0aWIyOXNaV0Z1ZlNCU1pYUjFjbTV6SUdCMGNuVmxZQ0JwWmlCMGFHVWdaVzUwY25rZ2QyRnpJSEpsYlc5MlpXUXNJR1ZzYzJVZ1lHWmhiSE5sWUM1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnYUdGemFFUmxiR1YwWlNoclpYa3BJSHRjYmlBZ2RtRnlJSEpsYzNWc2RDQTlJSFJvYVhNdWFHRnpLR3RsZVNrZ0ppWWdaR1ZzWlhSbElIUm9hWE11WDE5a1lYUmhYMTliYTJWNVhUdGNiaUFnZEdocGN5NXphWHBsSUMwOUlISmxjM1ZzZENBL0lERWdPaUF3TzF4dUlDQnlaWFIxY200Z2NtVnpkV3gwTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR2hoYzJoRVpXeGxkR1U3WEc0aUxDSjJZWElnYm1GMGFYWmxRM0psWVhSbElEMGdjbVZ4ZFdseVpTZ25MaTlmYm1GMGFYWmxRM0psWVhSbEp5azdYRzVjYmk4cUtpQlZjMlZrSUhSdklITjBZVzVrTFdsdUlHWnZjaUJnZFc1a1pXWnBibVZrWUNCb1lYTm9JSFpoYkhWbGN5NGdLaTljYm5aaGNpQklRVk5JWDFWT1JFVkdTVTVGUkNBOUlDZGZYMnh2WkdGemFGOW9ZWE5vWDNWdVpHVm1hVzVsWkY5Zkp6dGNibHh1THlvcUlGVnpaV1FnWm05eUlHSjFhV3gwTFdsdUlHMWxkR2h2WkNCeVpXWmxjbVZ1WTJWekxpQXFMMXh1ZG1GeUlHOWlhbVZqZEZCeWIzUnZJRDBnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaVHRjYmx4dUx5b3FJRlZ6WldRZ2RHOGdZMmhsWTJzZ2IySnFaV04wY3lCbWIzSWdiM2R1SUhCeWIzQmxjblJwWlhNdUlDb3ZYRzUyWVhJZ2FHRnpUM2R1VUhKdmNHVnlkSGtnUFNCdlltcGxZM1JRY205MGJ5NW9ZWE5QZDI1UWNtOXdaWEowZVR0Y2JseHVMeW9xWEc0Z0tpQkhaWFJ6SUhSb1pTQm9ZWE5vSUhaaGJIVmxJR1p2Y2lCZ2EyVjVZQzVjYmlBcVhHNGdLaUJBY0hKcGRtRjBaVnh1SUNvZ1FHNWhiV1VnWjJWMFhHNGdLaUJBYldWdFltVnlUMllnU0dGemFGeHVJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR3RsZVNCVWFHVWdhMlY1SUc5bUlIUm9aU0IyWVd4MVpTQjBieUJuWlhRdVhHNGdLaUJBY21WMGRYSnVjeUI3S24wZ1VtVjBkWEp1Y3lCMGFHVWdaVzUwY25rZ2RtRnNkV1V1WEc0Z0tpOWNibVoxYm1OMGFXOXVJR2hoYzJoSFpYUW9hMlY1S1NCN1hHNGdJSFpoY2lCa1lYUmhJRDBnZEdocGN5NWZYMlJoZEdGZlh6dGNiaUFnYVdZZ0tHNWhkR2wyWlVOeVpXRjBaU2tnZTF4dUlDQWdJSFpoY2lCeVpYTjFiSFFnUFNCa1lYUmhXMnRsZVYwN1hHNGdJQ0FnY21WMGRYSnVJSEpsYzNWc2RDQTlQVDBnU0VGVFNGOVZUa1JGUmtsT1JVUWdQeUIxYm1SbFptbHVaV1FnT2lCeVpYTjFiSFE3WEc0Z0lIMWNiaUFnY21WMGRYSnVJR2hoYzA5M2JsQnliM0JsY25SNUxtTmhiR3dvWkdGMFlTd2dhMlY1S1NBL0lHUmhkR0ZiYTJWNVhTQTZJSFZ1WkdWbWFXNWxaRHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm9ZWE5vUjJWME8xeHVJaXdpZG1GeUlHNWhkR2wyWlVOeVpXRjBaU0E5SUhKbGNYVnBjbVVvSnk0dlgyNWhkR2wyWlVOeVpXRjBaU2NwTzF4dVhHNHZLaW9nVlhObFpDQm1iM0lnWW5WcGJIUXRhVzRnYldWMGFHOWtJSEpsWm1WeVpXNWpaWE11SUNvdlhHNTJZWElnYjJKcVpXTjBVSEp2ZEc4Z1BTQlBZbXBsWTNRdWNISnZkRzkwZVhCbE8xeHVYRzR2S2lvZ1ZYTmxaQ0IwYnlCamFHVmpheUJ2WW1wbFkzUnpJR1p2Y2lCdmQyNGdjSEp2Y0dWeWRHbGxjeTRnS2k5Y2JuWmhjaUJvWVhOUGQyNVFjbTl3WlhKMGVTQTlJRzlpYW1WamRGQnliM1J2TG1oaGMwOTNibEJ5YjNCbGNuUjVPMXh1WEc0dktpcGNiaUFxSUVOb1pXTnJjeUJwWmlCaElHaGhjMmdnZG1Gc2RXVWdabTl5SUdCclpYbGdJR1Y0YVhOMGN5NWNiaUFxWEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ29nUUc1aGJXVWdhR0Z6WEc0Z0tpQkFiV1Z0WW1WeVQyWWdTR0Z6YUZ4dUlDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHdGxlU0JVYUdVZ2EyVjVJRzltSUhSb1pTQmxiblJ5ZVNCMGJ5QmphR1ZqYXk1Y2JpQXFJRUJ5WlhSMWNtNXpJSHRpYjI5c1pXRnVmU0JTWlhSMWNtNXpJR0IwY25WbFlDQnBaaUJoYmlCbGJuUnllU0JtYjNJZ1lHdGxlV0FnWlhocGMzUnpMQ0JsYkhObElHQm1ZV3h6WldBdVhHNGdLaTljYm1aMWJtTjBhVzl1SUdoaGMyaElZWE1vYTJWNUtTQjdYRzRnSUhaaGNpQmtZWFJoSUQwZ2RHaHBjeTVmWDJSaGRHRmZYenRjYmlBZ2NtVjBkWEp1SUc1aGRHbDJaVU55WldGMFpTQS9JQ2hrWVhSaFcydGxlVjBnSVQwOUlIVnVaR1ZtYVc1bFpDa2dPaUJvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0dSaGRHRXNJR3RsZVNrN1hHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnYUdGemFFaGhjenRjYmlJc0luWmhjaUJ1WVhScGRtVkRjbVZoZEdVZ1BTQnlaWEYxYVhKbEtDY3VMMTl1WVhScGRtVkRjbVZoZEdVbktUdGNibHh1THlvcUlGVnpaV1FnZEc4Z2MzUmhibVF0YVc0Z1ptOXlJR0IxYm1SbFptbHVaV1JnSUdoaGMyZ2dkbUZzZFdWekxpQXFMMXh1ZG1GeUlFaEJVMGhmVlU1RVJVWkpUa1ZFSUQwZ0oxOWZiRzlrWVhOb1gyaGhjMmhmZFc1a1pXWnBibVZrWDE4bk8xeHVYRzR2S2lwY2JpQXFJRk5sZEhNZ2RHaGxJR2hoYzJnZ1lHdGxlV0FnZEc4Z1lIWmhiSFZsWUM1Y2JpQXFYRzRnS2lCQWNISnBkbUYwWlZ4dUlDb2dRRzVoYldVZ2MyVjBYRzRnS2lCQWJXVnRZbVZ5VDJZZ1NHRnphRnh1SUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUd0bGVTQlVhR1VnYTJWNUlHOW1JSFJvWlNCMllXeDFaU0IwYnlCelpYUXVYRzRnS2lCQWNHRnlZVzBnZXlwOUlIWmhiSFZsSUZSb1pTQjJZV3gxWlNCMGJ5QnpaWFF1WEc0Z0tpQkFjbVYwZFhKdWN5QjdUMkpxWldOMGZTQlNaWFIxY201eklIUm9aU0JvWVhOb0lHbHVjM1JoYm1ObExseHVJQ292WEc1bWRXNWpkR2x2YmlCb1lYTm9VMlYwS0d0bGVTd2dkbUZzZFdVcElIdGNiaUFnZG1GeUlHUmhkR0VnUFNCMGFHbHpMbDlmWkdGMFlWOWZPMXh1SUNCMGFHbHpMbk5wZW1VZ0t6MGdkR2hwY3k1b1lYTW9hMlY1S1NBL0lEQWdPaUF4TzF4dUlDQmtZWFJoVzJ0bGVWMGdQU0FvYm1GMGFYWmxRM0psWVhSbElDWW1JSFpoYkhWbElEMDlQU0IxYm1SbFptbHVaV1FwSUQ4Z1NFRlRTRjlWVGtSRlJrbE9SVVFnT2lCMllXeDFaVHRjYmlBZ2NtVjBkWEp1SUhSb2FYTTdYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2FHRnphRk5sZER0Y2JpSXNJblpoY2lCb1lYTm9RMnhsWVhJZ1BTQnlaWEYxYVhKbEtDY3VMMTlvWVhOb1EyeGxZWEluS1N4Y2JpQWdJQ0JvWVhOb1JHVnNaWFJsSUQwZ2NtVnhkV2x5WlNnbkxpOWZhR0Z6YUVSbGJHVjBaU2NwTEZ4dUlDQWdJR2hoYzJoSFpYUWdQU0J5WlhGMWFYSmxLQ2N1TDE5b1lYTm9SMlYwSnlrc1hHNGdJQ0FnYUdGemFFaGhjeUE5SUhKbGNYVnBjbVVvSnk0dlgyaGhjMmhJWVhNbktTeGNiaUFnSUNCb1lYTm9VMlYwSUQwZ2NtVnhkV2x5WlNnbkxpOWZhR0Z6YUZObGRDY3BPMXh1WEc0dktpcGNiaUFxSUVOeVpXRjBaWE1nWVNCb1lYTm9JRzlpYW1WamRDNWNiaUFxWEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ29nUUdOdmJuTjBjblZqZEc5eVhHNGdLaUJBY0dGeVlXMGdlMEZ5Y21GNWZTQmJaVzUwY21sbGMxMGdWR2hsSUd0bGVTMTJZV3gxWlNCd1lXbHljeUIwYnlCallXTm9aUzVjYmlBcUwxeHVablZ1WTNScGIyNGdTR0Z6YUNobGJuUnlhV1Z6S1NCN1hHNGdJSFpoY2lCcGJtUmxlQ0E5SUMweExGeHVJQ0FnSUNBZ2JHVnVaM1JvSUQwZ1pXNTBjbWxsY3lBOVBTQnVkV3hzSUQ4Z01DQTZJR1Z1ZEhKcFpYTXViR1Z1WjNSb08xeHVYRzRnSUhSb2FYTXVZMnhsWVhJb0tUdGNiaUFnZDJocGJHVWdLQ3NyYVc1a1pYZ2dQQ0JzWlc1bmRHZ3BJSHRjYmlBZ0lDQjJZWElnWlc1MGNua2dQU0JsYm5SeWFXVnpXMmx1WkdWNFhUdGNiaUFnSUNCMGFHbHpMbk5sZENobGJuUnllVnN3WFN3Z1pXNTBjbmxiTVYwcE8xeHVJQ0I5WEc1OVhHNWNiaTh2SUVGa1pDQnRaWFJvYjJSeklIUnZJR0JJWVhOb1lDNWNia2hoYzJndWNISnZkRzkwZVhCbExtTnNaV0Z5SUQwZ2FHRnphRU5zWldGeU8xeHVTR0Z6YUM1d2NtOTBiM1I1Y0dWYkoyUmxiR1YwWlNkZElEMGdhR0Z6YUVSbGJHVjBaVHRjYmtoaGMyZ3VjSEp2ZEc5MGVYQmxMbWRsZENBOUlHaGhjMmhIWlhRN1hHNUlZWE5vTG5CeWIzUnZkSGx3WlM1b1lYTWdQU0JvWVhOb1NHRnpPMXh1U0dGemFDNXdjbTkwYjNSNWNHVXVjMlYwSUQwZ2FHRnphRk5sZER0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQklZWE5vTzF4dUlpd2lkbUZ5SUVoaGMyZ2dQU0J5WlhGMWFYSmxLQ2N1TDE5SVlYTm9KeWtzWEc0Z0lDQWdUR2x6ZEVOaFkyaGxJRDBnY21WeGRXbHlaU2duTGk5ZlRHbHpkRU5oWTJobEp5a3NYRzRnSUNBZ1RXRndJRDBnY21WeGRXbHlaU2duTGk5ZlRXRndKeWs3WEc1Y2JpOHFLbHh1SUNvZ1VtVnRiM1psY3lCaGJHd2dhMlY1TFhaaGJIVmxJR1Z1ZEhKcFpYTWdabkp2YlNCMGFHVWdiV0Z3TGx4dUlDcGNiaUFxSUVCd2NtbDJZWFJsWEc0Z0tpQkFibUZ0WlNCamJHVmhjbHh1SUNvZ1FHMWxiV0psY2s5bUlFMWhjRU5oWTJobFhHNGdLaTljYm1aMWJtTjBhVzl1SUcxaGNFTmhZMmhsUTJ4bFlYSW9LU0I3WEc0Z0lIUm9hWE11YzJsNlpTQTlJREE3WEc0Z0lIUm9hWE11WDE5a1lYUmhYMThnUFNCN1hHNGdJQ0FnSjJoaGMyZ25PaUJ1WlhjZ1NHRnphQ3hjYmlBZ0lDQW5iV0Z3SnpvZ2JtVjNJQ2hOWVhBZ2ZId2dUR2x6ZEVOaFkyaGxLU3hjYmlBZ0lDQW5jM1J5YVc1bkp6b2dibVYzSUVoaGMyaGNiaUFnZlR0Y2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0J0WVhCRFlXTm9aVU5zWldGeU8xeHVJaXdpTHlvcVhHNGdLaUJEYUdWamEzTWdhV1lnWUhaaGJIVmxZQ0JwY3lCemRXbDBZV0pzWlNCbWIzSWdkWE5sSUdGeklIVnVhWEYxWlNCdlltcGxZM1FnYTJWNUxseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaUJBY0dGeVlXMGdleXA5SUhaaGJIVmxJRlJvWlNCMllXeDFaU0IwYnlCamFHVmpheTVjYmlBcUlFQnlaWFIxY201eklIdGliMjlzWldGdWZTQlNaWFIxY201eklHQjBjblZsWUNCcFppQmdkbUZzZFdWZ0lHbHpJSE4xYVhSaFlteGxMQ0JsYkhObElHQm1ZV3h6WldBdVhHNGdLaTljYm1aMWJtTjBhVzl1SUdselMyVjVZV0pzWlNoMllXeDFaU2tnZTF4dUlDQjJZWElnZEhsd1pTQTlJSFI1Y0dWdlppQjJZV3gxWlR0Y2JpQWdjbVYwZFhKdUlDaDBlWEJsSUQwOUlDZHpkSEpwYm1jbklIeDhJSFI1Y0dVZ1BUMGdKMjUxYldKbGNpY2dmSHdnZEhsd1pTQTlQU0FuYzNsdFltOXNKeUI4ZkNCMGVYQmxJRDA5SUNkaWIyOXNaV0Z1SnlsY2JpQWdJQ0EvSUNoMllXeDFaU0FoUFQwZ0oxOWZjSEp2ZEc5Zlh5Y3BYRzRnSUNBZ09pQW9kbUZzZFdVZ1BUMDlJRzUxYkd3cE8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdselMyVjVZV0pzWlR0Y2JpSXNJblpoY2lCcGMwdGxlV0ZpYkdVZ1BTQnlaWEYxYVhKbEtDY3VMMTlwYzB0bGVXRmliR1VuS1R0Y2JseHVMeW9xWEc0Z0tpQkhaWFJ6SUhSb1pTQmtZWFJoSUdadmNpQmdiV0Z3WUM1Y2JpQXFYRzRnS2lCQWNISnBkbUYwWlZ4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHMWhjQ0JVYUdVZ2JXRndJSFJ2SUhGMVpYSjVMbHh1SUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUd0bGVTQlVhR1VnY21WbVpYSmxibU5sSUd0bGVTNWNiaUFxSUVCeVpYUjFjbTV6SUhzcWZTQlNaWFIxY201eklIUm9aU0J0WVhBZ1pHRjBZUzVjYmlBcUwxeHVablZ1WTNScGIyNGdaMlYwVFdGd1JHRjBZU2h0WVhBc0lHdGxlU2tnZTF4dUlDQjJZWElnWkdGMFlTQTlJRzFoY0M1ZlgyUmhkR0ZmWHp0Y2JpQWdjbVYwZFhKdUlHbHpTMlY1WVdKc1pTaHJaWGtwWEc0Z0lDQWdQeUJrWVhSaFczUjVjR1Z2WmlCclpYa2dQVDBnSjNOMGNtbHVaeWNnUHlBbmMzUnlhVzVuSnlBNklDZG9ZWE5vSjExY2JpQWdJQ0E2SUdSaGRHRXViV0Z3TzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR2RsZEUxaGNFUmhkR0U3WEc0aUxDSjJZWElnWjJWMFRXRndSR0YwWVNBOUlISmxjWFZwY21Vb0p5NHZYMmRsZEUxaGNFUmhkR0VuS1R0Y2JseHVMeW9xWEc0Z0tpQlNaVzF2ZG1WeklHQnJaWGxnSUdGdVpDQnBkSE1nZG1Gc2RXVWdabkp2YlNCMGFHVWdiV0Z3TGx4dUlDcGNiaUFxSUVCd2NtbDJZWFJsWEc0Z0tpQkFibUZ0WlNCa1pXeGxkR1ZjYmlBcUlFQnRaVzFpWlhKUFppQk5ZWEJEWVdOb1pWeHVJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR3RsZVNCVWFHVWdhMlY1SUc5bUlIUm9aU0IyWVd4MVpTQjBieUJ5WlcxdmRtVXVYRzRnS2lCQWNtVjBkWEp1Y3lCN1ltOXZiR1ZoYm4wZ1VtVjBkWEp1Y3lCZ2RISjFaV0FnYVdZZ2RHaGxJR1Z1ZEhKNUlIZGhjeUJ5WlcxdmRtVmtMQ0JsYkhObElHQm1ZV3h6WldBdVhHNGdLaTljYm1aMWJtTjBhVzl1SUcxaGNFTmhZMmhsUkdWc1pYUmxLR3RsZVNrZ2UxeHVJQ0IyWVhJZ2NtVnpkV3gwSUQwZ1oyVjBUV0Z3UkdGMFlTaDBhR2x6TENCclpYa3BXeWRrWld4bGRHVW5YU2hyWlhrcE8xeHVJQ0IwYUdsekxuTnBlbVVnTFQwZ2NtVnpkV3gwSUQ4Z01TQTZJREE3WEc0Z0lISmxkSFZ5YmlCeVpYTjFiSFE3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdiV0Z3UTJGamFHVkVaV3hsZEdVN1hHNGlMQ0oyWVhJZ1oyVjBUV0Z3UkdGMFlTQTlJSEpsY1hWcGNtVW9KeTR2WDJkbGRFMWhjRVJoZEdFbktUdGNibHh1THlvcVhHNGdLaUJIWlhSeklIUm9aU0J0WVhBZ2RtRnNkV1VnWm05eUlHQnJaWGxnTGx4dUlDcGNiaUFxSUVCd2NtbDJZWFJsWEc0Z0tpQkFibUZ0WlNCblpYUmNiaUFxSUVCdFpXMWlaWEpQWmlCTllYQkRZV05vWlZ4dUlDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHdGxlU0JVYUdVZ2EyVjVJRzltSUhSb1pTQjJZV3gxWlNCMGJ5Qm5aWFF1WEc0Z0tpQkFjbVYwZFhKdWN5QjdLbjBnVW1WMGRYSnVjeUIwYUdVZ1pXNTBjbmtnZG1Gc2RXVXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHMWhjRU5oWTJobFIyVjBLR3RsZVNrZ2UxeHVJQ0J5WlhSMWNtNGdaMlYwVFdGd1JHRjBZU2gwYUdsekxDQnJaWGtwTG1kbGRDaHJaWGtwTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRzFoY0VOaFkyaGxSMlYwTzF4dUlpd2lkbUZ5SUdkbGRFMWhjRVJoZEdFZ1BTQnlaWEYxYVhKbEtDY3VMMTluWlhSTllYQkVZWFJoSnlrN1hHNWNiaThxS2x4dUlDb2dRMmhsWTJ0eklHbG1JR0VnYldGd0lIWmhiSFZsSUdadmNpQmdhMlY1WUNCbGVHbHpkSE11WEc0Z0tseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUlFQnVZVzFsSUdoaGMxeHVJQ29nUUcxbGJXSmxjazltSUUxaGNFTmhZMmhsWEc0Z0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2EyVjVJRlJvWlNCclpYa2diMllnZEdobElHVnVkSEo1SUhSdklHTm9aV05yTGx4dUlDb2dRSEpsZEhWeWJuTWdlMkp2YjJ4bFlXNTlJRkpsZEhWeWJuTWdZSFJ5ZFdWZ0lHbG1JR0Z1SUdWdWRISjVJR1p2Y2lCZ2EyVjVZQ0JsZUdsemRITXNJR1ZzYzJVZ1lHWmhiSE5sWUM1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnYldGd1EyRmphR1ZJWVhNb2EyVjVLU0I3WEc0Z0lISmxkSFZ5YmlCblpYUk5ZWEJFWVhSaEtIUm9hWE1zSUd0bGVTa3VhR0Z6S0d0bGVTazdYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2JXRndRMkZqYUdWSVlYTTdYRzRpTENKMllYSWdaMlYwVFdGd1JHRjBZU0E5SUhKbGNYVnBjbVVvSnk0dlgyZGxkRTFoY0VSaGRHRW5LVHRjYmx4dUx5b3FYRzRnS2lCVFpYUnpJSFJvWlNCdFlYQWdZR3RsZVdBZ2RHOGdZSFpoYkhWbFlDNWNiaUFxWEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ29nUUc1aGJXVWdjMlYwWEc0Z0tpQkFiV1Z0WW1WeVQyWWdUV0Z3UTJGamFHVmNiaUFxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JyWlhrZ1ZHaGxJR3RsZVNCdlppQjBhR1VnZG1Gc2RXVWdkRzhnYzJWMExseHVJQ29nUUhCaGNtRnRJSHNxZlNCMllXeDFaU0JVYUdVZ2RtRnNkV1VnZEc4Z2MyVjBMbHh1SUNvZ1FISmxkSFZ5Ym5NZ2UwOWlhbVZqZEgwZ1VtVjBkWEp1Y3lCMGFHVWdiV0Z3SUdOaFkyaGxJR2x1YzNSaGJtTmxMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQnRZWEJEWVdOb1pWTmxkQ2hyWlhrc0lIWmhiSFZsS1NCN1hHNGdJSFpoY2lCa1lYUmhJRDBnWjJWMFRXRndSR0YwWVNoMGFHbHpMQ0JyWlhrcExGeHVJQ0FnSUNBZ2MybDZaU0E5SUdSaGRHRXVjMmw2WlR0Y2JseHVJQ0JrWVhSaExuTmxkQ2hyWlhrc0lIWmhiSFZsS1R0Y2JpQWdkR2hwY3k1emFYcGxJQ3M5SUdSaGRHRXVjMmw2WlNBOVBTQnphWHBsSUQ4Z01DQTZJREU3WEc0Z0lISmxkSFZ5YmlCMGFHbHpPMXh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHMWhjRU5oWTJobFUyVjBPMXh1SWl3aWRtRnlJRzFoY0VOaFkyaGxRMnhsWVhJZ1BTQnlaWEYxYVhKbEtDY3VMMTl0WVhCRFlXTm9aVU5zWldGeUp5a3NYRzRnSUNBZ2JXRndRMkZqYUdWRVpXeGxkR1VnUFNCeVpYRjFhWEpsS0NjdUwxOXRZWEJEWVdOb1pVUmxiR1YwWlNjcExGeHVJQ0FnSUcxaGNFTmhZMmhsUjJWMElEMGdjbVZ4ZFdseVpTZ25MaTlmYldGd1EyRmphR1ZIWlhRbktTeGNiaUFnSUNCdFlYQkRZV05vWlVoaGN5QTlJSEpsY1hWcGNtVW9KeTR2WDIxaGNFTmhZMmhsU0dGekp5a3NYRzRnSUNBZ2JXRndRMkZqYUdWVFpYUWdQU0J5WlhGMWFYSmxLQ2N1TDE5dFlYQkRZV05vWlZObGRDY3BPMXh1WEc0dktpcGNiaUFxSUVOeVpXRjBaWE1nWVNCdFlYQWdZMkZqYUdVZ2IySnFaV04wSUhSdklITjBiM0psSUd0bGVTMTJZV3gxWlNCd1lXbHljeTVjYmlBcVhHNGdLaUJBY0hKcGRtRjBaVnh1SUNvZ1FHTnZibk4wY25WamRHOXlYRzRnS2lCQWNHRnlZVzBnZTBGeWNtRjVmU0JiWlc1MGNtbGxjMTBnVkdobElHdGxlUzEyWVd4MVpTQndZV2x5Y3lCMGJ5QmpZV05vWlM1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnVFdGd1EyRmphR1VvWlc1MGNtbGxjeWtnZTF4dUlDQjJZWElnYVc1a1pYZ2dQU0F0TVN4Y2JpQWdJQ0FnSUd4bGJtZDBhQ0E5SUdWdWRISnBaWE1nUFQwZ2JuVnNiQ0EvSURBZ09pQmxiblJ5YVdWekxteGxibWQwYUR0Y2JseHVJQ0IwYUdsekxtTnNaV0Z5S0NrN1hHNGdJSGRvYVd4bElDZ3JLMmx1WkdWNElEd2diR1Z1WjNSb0tTQjdYRzRnSUNBZ2RtRnlJR1Z1ZEhKNUlEMGdaVzUwY21sbGMxdHBibVJsZUYwN1hHNGdJQ0FnZEdocGN5NXpaWFFvWlc1MGNubGJNRjBzSUdWdWRISjVXekZkS1R0Y2JpQWdmVnh1ZlZ4dVhHNHZMeUJCWkdRZ2JXVjBhRzlrY3lCMGJ5QmdUV0Z3UTJGamFHVmdMbHh1VFdGd1EyRmphR1V1Y0hKdmRHOTBlWEJsTG1Oc1pXRnlJRDBnYldGd1EyRmphR1ZEYkdWaGNqdGNiazFoY0VOaFkyaGxMbkJ5YjNSdmRIbHdaVnNuWkdWc1pYUmxKMTBnUFNCdFlYQkRZV05vWlVSbGJHVjBaVHRjYmsxaGNFTmhZMmhsTG5CeWIzUnZkSGx3WlM1blpYUWdQU0J0WVhCRFlXTm9aVWRsZER0Y2JrMWhjRU5oWTJobExuQnliM1J2ZEhsd1pTNW9ZWE1nUFNCdFlYQkRZV05vWlVoaGN6dGNiazFoY0VOaFkyaGxMbkJ5YjNSdmRIbHdaUzV6WlhRZ1BTQnRZWEJEWVdOb1pWTmxkRHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCTllYQkRZV05vWlR0Y2JpSXNJblpoY2lCTWFYTjBRMkZqYUdVZ1BTQnlaWEYxYVhKbEtDY3VMMTlNYVhOMFEyRmphR1VuS1N4Y2JpQWdJQ0JOWVhBZ1BTQnlaWEYxYVhKbEtDY3VMMTlOWVhBbktTeGNiaUFnSUNCTllYQkRZV05vWlNBOUlISmxjWFZwY21Vb0p5NHZYMDFoY0VOaFkyaGxKeWs3WEc1Y2JpOHFLaUJWYzJWa0lHRnpJSFJvWlNCemFYcGxJSFJ2SUdWdVlXSnNaU0JzWVhKblpTQmhjbkpoZVNCdmNIUnBiV2w2WVhScGIyNXpMaUFxTDF4dWRtRnlJRXhCVWtkRlgwRlNVa0ZaWDFOSldrVWdQU0F5TURBN1hHNWNiaThxS2x4dUlDb2dVMlYwY3lCMGFHVWdjM1JoWTJzZ1lHdGxlV0FnZEc4Z1lIWmhiSFZsWUM1Y2JpQXFYRzRnS2lCQWNISnBkbUYwWlZ4dUlDb2dRRzVoYldVZ2MyVjBYRzRnS2lCQWJXVnRZbVZ5VDJZZ1UzUmhZMnRjYmlBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCclpYa2dWR2hsSUd0bGVTQnZaaUIwYUdVZ2RtRnNkV1VnZEc4Z2MyVjBMbHh1SUNvZ1FIQmhjbUZ0SUhzcWZTQjJZV3gxWlNCVWFHVWdkbUZzZFdVZ2RHOGdjMlYwTGx4dUlDb2dRSEpsZEhWeWJuTWdlMDlpYW1WamRIMGdVbVYwZFhKdWN5QjBhR1VnYzNSaFkyc2dZMkZqYUdVZ2FXNXpkR0Z1WTJVdVhHNGdLaTljYm1aMWJtTjBhVzl1SUhOMFlXTnJVMlYwS0d0bGVTd2dkbUZzZFdVcElIdGNiaUFnZG1GeUlHUmhkR0VnUFNCMGFHbHpMbDlmWkdGMFlWOWZPMXh1SUNCcFppQW9aR0YwWVNCcGJuTjBZVzVqWlc5bUlFeHBjM1JEWVdOb1pTa2dlMXh1SUNBZ0lIWmhjaUJ3WVdseWN5QTlJR1JoZEdFdVgxOWtZWFJoWDE4N1hHNGdJQ0FnYVdZZ0tDRk5ZWEFnZkh3Z0tIQmhhWEp6TG14bGJtZDBhQ0E4SUV4QlVrZEZYMEZTVWtGWlgxTkpXa1VnTFNBeEtTa2dlMXh1SUNBZ0lDQWdjR0ZwY25NdWNIVnphQ2hiYTJWNUxDQjJZV3gxWlYwcE8xeHVJQ0FnSUNBZ2RHaHBjeTV6YVhwbElEMGdLeXRrWVhSaExuTnBlbVU3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5WEc0Z0lDQWdaR0YwWVNBOUlIUm9hWE11WDE5a1lYUmhYMThnUFNCdVpYY2dUV0Z3UTJGamFHVW9jR0ZwY25NcE8xeHVJQ0I5WEc0Z0lHUmhkR0V1YzJWMEtHdGxlU3dnZG1Gc2RXVXBPMXh1SUNCMGFHbHpMbk5wZW1VZ1BTQmtZWFJoTG5OcGVtVTdYRzRnSUhKbGRIVnliaUIwYUdsek8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhOMFlXTnJVMlYwTzF4dUlpd2lkbUZ5SUV4cGMzUkRZV05vWlNBOUlISmxjWFZwY21Vb0p5NHZYMHhwYzNSRFlXTm9aU2NwTEZ4dUlDQWdJSE4wWVdOclEyeGxZWElnUFNCeVpYRjFhWEpsS0NjdUwxOXpkR0ZqYTBOc1pXRnlKeWtzWEc0Z0lDQWdjM1JoWTJ0RVpXeGxkR1VnUFNCeVpYRjFhWEpsS0NjdUwxOXpkR0ZqYTBSbGJHVjBaU2NwTEZ4dUlDQWdJSE4wWVdOclIyVjBJRDBnY21WeGRXbHlaU2duTGk5ZmMzUmhZMnRIWlhRbktTeGNiaUFnSUNCemRHRmphMGhoY3lBOUlISmxjWFZwY21Vb0p5NHZYM04wWVdOclNHRnpKeWtzWEc0Z0lDQWdjM1JoWTJ0VFpYUWdQU0J5WlhGMWFYSmxLQ2N1TDE5emRHRmphMU5sZENjcE8xeHVYRzR2S2lwY2JpQXFJRU55WldGMFpYTWdZU0J6ZEdGamF5QmpZV05vWlNCdlltcGxZM1FnZEc4Z2MzUnZjbVVnYTJWNUxYWmhiSFZsSUhCaGFYSnpMbHh1SUNwY2JpQXFJRUJ3Y21sMllYUmxYRzRnS2lCQVkyOXVjM1J5ZFdOMGIzSmNiaUFxSUVCd1lYSmhiU0I3UVhKeVlYbDlJRnRsYm5SeWFXVnpYU0JVYUdVZ2EyVjVMWFpoYkhWbElIQmhhWEp6SUhSdklHTmhZMmhsTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJUZEdGamF5aGxiblJ5YVdWektTQjdYRzRnSUhaaGNpQmtZWFJoSUQwZ2RHaHBjeTVmWDJSaGRHRmZYeUE5SUc1bGR5Qk1hWE4wUTJGamFHVW9aVzUwY21sbGN5azdYRzRnSUhSb2FYTXVjMmw2WlNBOUlHUmhkR0V1YzJsNlpUdGNibjFjYmx4dUx5OGdRV1JrSUcxbGRHaHZaSE1nZEc4Z1lGTjBZV05yWUM1Y2JsTjBZV05yTG5CeWIzUnZkSGx3WlM1amJHVmhjaUE5SUhOMFlXTnJRMnhsWVhJN1hHNVRkR0ZqYXk1d2NtOTBiM1I1Y0dWYkoyUmxiR1YwWlNkZElEMGdjM1JoWTJ0RVpXeGxkR1U3WEc1VGRHRmpheTV3Y205MGIzUjVjR1V1WjJWMElEMGdjM1JoWTJ0SFpYUTdYRzVUZEdGamF5NXdjbTkwYjNSNWNHVXVhR0Z6SUQwZ2MzUmhZMnRJWVhNN1hHNVRkR0ZqYXk1d2NtOTBiM1I1Y0dVdWMyVjBJRDBnYzNSaFkydFRaWFE3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1UzUmhZMnM3WEc0aUxDSjJZWElnWjJWMFRtRjBhWFpsSUQwZ2NtVnhkV2x5WlNnbkxpOWZaMlYwVG1GMGFYWmxKeWs3WEc1Y2JuWmhjaUJrWldacGJtVlFjbTl3WlhKMGVTQTlJQ2htZFc1amRHbHZiaWdwSUh0Y2JpQWdkSEo1SUh0Y2JpQWdJQ0IyWVhJZ1puVnVZeUE5SUdkbGRFNWhkR2wyWlNoUFltcGxZM1FzSUNka1pXWnBibVZRY205d1pYSjBlU2NwTzF4dUlDQWdJR1oxYm1Nb2UzMHNJQ2NuTENCN2ZTazdYRzRnSUNBZ2NtVjBkWEp1SUdaMWJtTTdYRzRnSUgwZ1kyRjBZMmdnS0dVcElIdDlYRzU5S0NrcE8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1JsWm1sdVpWQnliM0JsY25SNU8xeHVJaXdpZG1GeUlHUmxabWx1WlZCeWIzQmxjblI1SUQwZ2NtVnhkV2x5WlNnbkxpOWZaR1ZtYVc1bFVISnZjR1Z5ZEhrbktUdGNibHh1THlvcVhHNGdLaUJVYUdVZ1ltRnpaU0JwYlhCc1pXMWxiblJoZEdsdmJpQnZaaUJnWVhOemFXZHVWbUZzZFdWZ0lHRnVaQ0JnWVhOemFXZHVUV1Z5WjJWV1lXeDFaV0FnZDJsMGFHOTFkRnh1SUNvZ2RtRnNkV1VnWTJobFkydHpMbHh1SUNwY2JpQXFJRUJ3Y21sMllYUmxYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnYjJKcVpXTjBJRlJvWlNCdlltcGxZM1FnZEc4Z2JXOWthV1o1TGx4dUlDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHdGxlU0JVYUdVZ2EyVjVJRzltSUhSb1pTQndjbTl3WlhKMGVTQjBieUJoYzNOcFoyNHVYRzRnS2lCQWNHRnlZVzBnZXlwOUlIWmhiSFZsSUZSb1pTQjJZV3gxWlNCMGJ5QmhjM05wWjI0dVhHNGdLaTljYm1aMWJtTjBhVzl1SUdKaGMyVkJjM05wWjI1V1lXeDFaU2h2WW1wbFkzUXNJR3RsZVN3Z2RtRnNkV1VwSUh0Y2JpQWdhV1lnS0d0bGVTQTlQU0FuWDE5d2NtOTBiMTlmSnlBbUppQmtaV1pwYm1WUWNtOXdaWEowZVNrZ2UxeHVJQ0FnSUdSbFptbHVaVkJ5YjNCbGNuUjVLRzlpYW1WamRDd2dhMlY1TENCN1hHNGdJQ0FnSUNBblkyOXVabWxuZFhKaFlteGxKem9nZEhKMVpTeGNiaUFnSUNBZ0lDZGxiblZ0WlhKaFlteGxKem9nZEhKMVpTeGNiaUFnSUNBZ0lDZDJZV3gxWlNjNklIWmhiSFZsTEZ4dUlDQWdJQ0FnSjNkeWFYUmhZbXhsSnpvZ2RISjFaVnh1SUNBZ0lIMHBPMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJRzlpYW1WamRGdHJaWGxkSUQwZ2RtRnNkV1U3WEc0Z0lIMWNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCaVlYTmxRWE56YVdkdVZtRnNkV1U3WEc0aUxDSjJZWElnWW1GelpVRnpjMmxuYmxaaGJIVmxJRDBnY21WeGRXbHlaU2duTGk5ZlltRnpaVUZ6YzJsbmJsWmhiSFZsSnlrc1hHNGdJQ0FnWlhFZ1BTQnlaWEYxYVhKbEtDY3VMMlZ4SnlrN1hHNWNiaThxS2x4dUlDb2dWR2hwY3lCbWRXNWpkR2x2YmlCcGN5QnNhV3RsSUdCaGMzTnBaMjVXWVd4MVpXQWdaWGhqWlhCMElIUm9ZWFFnYVhRZ1pHOWxjMjRuZENCaGMzTnBaMjVjYmlBcUlHQjFibVJsWm1sdVpXUmdJSFpoYkhWbGN5NWNiaUFxWEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzlpYW1WamRDQlVhR1VnYjJKcVpXTjBJSFJ2SUcxdlpHbG1lUzVjYmlBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCclpYa2dWR2hsSUd0bGVTQnZaaUIwYUdVZ2NISnZjR1Z5ZEhrZ2RHOGdZWE56YVdkdUxseHVJQ29nUUhCaGNtRnRJSHNxZlNCMllXeDFaU0JVYUdVZ2RtRnNkV1VnZEc4Z1lYTnphV2R1TGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJoYzNOcFoyNU5aWEpuWlZaaGJIVmxLRzlpYW1WamRDd2dhMlY1TENCMllXeDFaU2tnZTF4dUlDQnBaaUFvS0haaGJIVmxJQ0U5UFNCMWJtUmxabWx1WldRZ0ppWWdJV1Z4S0c5aWFtVmpkRnRyWlhsZExDQjJZV3gxWlNrcElIeDhYRzRnSUNBZ0lDQW9kbUZzZFdVZ1BUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlBaEtHdGxlU0JwYmlCdlltcGxZM1FwS1NrZ2UxeHVJQ0FnSUdKaGMyVkJjM05wWjI1V1lXeDFaU2h2WW1wbFkzUXNJR3RsZVN3Z2RtRnNkV1VwTzF4dUlDQjlYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1lYTnphV2R1VFdWeVoyVldZV3gxWlR0Y2JpSXNJaThxS2x4dUlDb2dRM0psWVhSbGN5QmhJR0poYzJVZ1puVnVZM1JwYjI0Z1ptOXlJRzFsZEdodlpITWdiR2xyWlNCZ1h5NW1iM0pKYm1BZ1lXNWtJR0JmTG1admNrOTNibUF1WEc0Z0tseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUlFQndZWEpoYlNCN1ltOXZiR1ZoYm4wZ1cyWnliMjFTYVdkb2RGMGdVM0JsWTJsbWVTQnBkR1Z5WVhScGJtY2dabkp2YlNCeWFXZG9kQ0IwYnlCc1pXWjBMbHh1SUNvZ1FISmxkSFZ5Ym5NZ2UwWjFibU4wYVc5dWZTQlNaWFIxY201eklIUm9aU0J1WlhjZ1ltRnpaU0JtZFc1amRHbHZiaTVjYmlBcUwxeHVablZ1WTNScGIyNGdZM0psWVhSbFFtRnpaVVp2Y2lobWNtOXRVbWxuYUhRcElIdGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVLRzlpYW1WamRDd2dhWFJsY21GMFpXVXNJR3RsZVhOR2RXNWpLU0I3WEc0Z0lDQWdkbUZ5SUdsdVpHVjRJRDBnTFRFc1hHNGdJQ0FnSUNBZ0lHbDBaWEpoWW14bElEMGdUMkpxWldOMEtHOWlhbVZqZENrc1hHNGdJQ0FnSUNBZ0lIQnliM0J6SUQwZ2EyVjVjMFoxYm1Nb2IySnFaV04wS1N4Y2JpQWdJQ0FnSUNBZ2JHVnVaM1JvSUQwZ2NISnZjSE11YkdWdVozUm9PMXh1WEc0Z0lDQWdkMmhwYkdVZ0tHeGxibWQwYUMwdEtTQjdYRzRnSUNBZ0lDQjJZWElnYTJWNUlEMGdjSEp2Y0hOYlpuSnZiVkpwWjJoMElEOGdiR1Z1WjNSb0lEb2dLeXRwYm1SbGVGMDdYRzRnSUNBZ0lDQnBaaUFvYVhSbGNtRjBaV1VvYVhSbGNtRmliR1ZiYTJWNVhTd2dhMlY1TENCcGRHVnlZV0pzWlNrZ1BUMDlJR1poYkhObEtTQjdYRzRnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdiMkpxWldOME8xeHVJQ0I5TzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR055WldGMFpVSmhjMlZHYjNJN1hHNGlMQ0oyWVhJZ1kzSmxZWFJsUW1GelpVWnZjaUE5SUhKbGNYVnBjbVVvSnk0dlgyTnlaV0YwWlVKaGMyVkdiM0luS1R0Y2JseHVMeW9xWEc0Z0tpQlVhR1VnWW1GelpTQnBiWEJzWlcxbGJuUmhkR2x2YmlCdlppQmdZbUZ6WlVadmNrOTNibUFnZDJocFkyZ2dhWFJsY21GMFpYTWdiM1psY2lCZ2IySnFaV04wWUZ4dUlDb2djSEp2Y0dWeWRHbGxjeUJ5WlhSMWNtNWxaQ0JpZVNCZ2EyVjVjMFoxYm1OZ0lHRnVaQ0JwYm5admEyVnpJR0JwZEdWeVlYUmxaV0FnWm05eUlHVmhZMmdnY0hKdmNHVnlkSGt1WEc0Z0tpQkpkR1Z5WVhSbFpTQm1kVzVqZEdsdmJuTWdiV0Y1SUdWNGFYUWdhWFJsY21GMGFXOXVJR1ZoY214NUlHSjVJR1Y0Y0d4cFkybDBiSGtnY21WMGRYSnVhVzVuSUdCbVlXeHpaV0F1WEc0Z0tseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCdlltcGxZM1FnVkdobElHOWlhbVZqZENCMGJ5QnBkR1Z5WVhSbElHOTJaWEl1WEc0Z0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQnBkR1Z5WVhSbFpTQlVhR1VnWm5WdVkzUnBiMjRnYVc1MmIydGxaQ0J3WlhJZ2FYUmxjbUYwYVc5dUxseHVJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnYTJWNWMwWjFibU1nVkdobElHWjFibU4wYVc5dUlIUnZJR2RsZENCMGFHVWdhMlY1Y3lCdlppQmdiMkpxWldOMFlDNWNiaUFxSUVCeVpYUjFjbTV6SUh0UFltcGxZM1I5SUZKbGRIVnlibk1nWUc5aWFtVmpkR0F1WEc0Z0tpOWNiblpoY2lCaVlYTmxSbTl5SUQwZ1kzSmxZWFJsUW1GelpVWnZjaWdwTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHSmhjMlZHYjNJN1hHNGlMQ0oyWVhJZ2NtOXZkQ0E5SUhKbGNYVnBjbVVvSnk0dlgzSnZiM1FuS1R0Y2JseHVMeW9xSUVSbGRHVmpkQ0JtY21WbElIWmhjbWxoWW14bElHQmxlSEJ2Y25SellDNGdLaTljYm5aaGNpQm1jbVZsUlhod2IzSjBjeUE5SUhSNWNHVnZaaUJsZUhCdmNuUnpJRDA5SUNkdlltcGxZM1FuSUNZbUlHVjRjRzl5ZEhNZ0ppWWdJV1Y0Y0c5eWRITXVibTlrWlZSNWNHVWdKaVlnWlhod2IzSjBjenRjYmx4dUx5b3FJRVJsZEdWamRDQm1jbVZsSUhaaGNtbGhZbXhsSUdCdGIyUjFiR1ZnTGlBcUwxeHVkbUZ5SUdaeVpXVk5iMlIxYkdVZ1BTQm1jbVZsUlhod2IzSjBjeUFtSmlCMGVYQmxiMllnYlc5a2RXeGxJRDA5SUNkdlltcGxZM1FuSUNZbUlHMXZaSFZzWlNBbUppQWhiVzlrZFd4bExtNXZaR1ZVZVhCbElDWW1JRzF2WkhWc1pUdGNibHh1THlvcUlFUmxkR1ZqZENCMGFHVWdjRzl3ZFd4aGNpQkRiMjF0YjI1S1V5QmxlSFJsYm5OcGIyNGdZRzF2WkhWc1pTNWxlSEJ2Y25SellDNGdLaTljYm5aaGNpQnRiMlIxYkdWRmVIQnZjblJ6SUQwZ1puSmxaVTF2WkhWc1pTQW1KaUJtY21WbFRXOWtkV3hsTG1WNGNHOXlkSE1nUFQwOUlHWnlaV1ZGZUhCdmNuUnpPMXh1WEc0dktpb2dRblZwYkhRdGFXNGdkbUZzZFdVZ2NtVm1aWEpsYm1ObGN5NGdLaTljYm5aaGNpQkNkV1ptWlhJZ1BTQnRiMlIxYkdWRmVIQnZjblJ6SUQ4Z2NtOXZkQzVDZFdabVpYSWdPaUIxYm1SbFptbHVaV1FzWEc0Z0lDQWdZV3hzYjJOVmJuTmhabVVnUFNCQ2RXWm1aWElnUHlCQ2RXWm1aWEl1WVd4c2IyTlZibk5oWm1VZ09pQjFibVJsWm1sdVpXUTdYRzVjYmk4cUtseHVJQ29nUTNKbFlYUmxjeUJoSUdOc2IyNWxJRzltSUNCZ1luVm1abVZ5WUM1Y2JpQXFYRzRnS2lCQWNISnBkbUYwWlZ4dUlDb2dRSEJoY21GdElIdENkV1ptWlhKOUlHSjFabVpsY2lCVWFHVWdZblZtWm1WeUlIUnZJR05zYjI1bExseHVJQ29nUUhCaGNtRnRJSHRpYjI5c1pXRnVmU0JiYVhORVpXVndYU0JUY0dWamFXWjVJR0VnWkdWbGNDQmpiRzl1WlM1Y2JpQXFJRUJ5WlhSMWNtNXpJSHRDZFdabVpYSjlJRkpsZEhWeWJuTWdkR2hsSUdOc2IyNWxaQ0JpZFdabVpYSXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHTnNiMjVsUW5WbVptVnlLR0oxWm1abGNpd2dhWE5FWldWd0tTQjdYRzRnSUdsbUlDaHBjMFJsWlhBcElIdGNiaUFnSUNCeVpYUjFjbTRnWW5WbVptVnlMbk5zYVdObEtDazdYRzRnSUgxY2JpQWdkbUZ5SUd4bGJtZDBhQ0E5SUdKMVptWmxjaTVzWlc1bmRHZ3NYRzRnSUNBZ0lDQnlaWE4xYkhRZ1BTQmhiR3h2WTFWdWMyRm1aU0EvSUdGc2JHOWpWVzV6WVdabEtHeGxibWQwYUNrZ09pQnVaWGNnWW5WbVptVnlMbU52Ym5OMGNuVmpkRzl5S0d4bGJtZDBhQ2s3WEc1Y2JpQWdZblZtWm1WeUxtTnZjSGtvY21WemRXeDBLVHRjYmlBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmpiRzl1WlVKMVptWmxjanRjYmlJc0luWmhjaUJ5YjI5MElEMGdjbVZ4ZFdseVpTZ25MaTlmY205dmRDY3BPMXh1WEc0dktpb2dRblZwYkhRdGFXNGdkbUZzZFdVZ2NtVm1aWEpsYm1ObGN5NGdLaTljYm5aaGNpQlZhVzUwT0VGeWNtRjVJRDBnY205dmRDNVZhVzUwT0VGeWNtRjVPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUZWcGJuUTRRWEp5WVhrN1hHNGlMQ0oyWVhJZ1ZXbHVkRGhCY25KaGVTQTlJSEpsY1hWcGNtVW9KeTR2WDFWcGJuUTRRWEp5WVhrbktUdGNibHh1THlvcVhHNGdLaUJEY21WaGRHVnpJR0VnWTJ4dmJtVWdiMllnWUdGeWNtRjVRblZtWm1WeVlDNWNiaUFxWEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ29nUUhCaGNtRnRJSHRCY25KaGVVSjFabVpsY24wZ1lYSnlZWGxDZFdabVpYSWdWR2hsSUdGeWNtRjVJR0oxWm1abGNpQjBieUJqYkc5dVpTNWNiaUFxSUVCeVpYUjFjbTV6SUh0QmNuSmhlVUoxWm1abGNuMGdVbVYwZFhKdWN5QjBhR1VnWTJ4dmJtVmtJR0Z5Y21GNUlHSjFabVpsY2k1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnWTJ4dmJtVkJjbkpoZVVKMVptWmxjaWhoY25KaGVVSjFabVpsY2lrZ2UxeHVJQ0IyWVhJZ2NtVnpkV3gwSUQwZ2JtVjNJR0Z5Y21GNVFuVm1abVZ5TG1OdmJuTjBjblZqZEc5eUtHRnljbUY1UW5WbVptVnlMbUo1ZEdWTVpXNW5kR2dwTzF4dUlDQnVaWGNnVldsdWREaEJjbkpoZVNoeVpYTjFiSFFwTG5ObGRDaHVaWGNnVldsdWREaEJjbkpoZVNoaGNuSmhlVUoxWm1abGNpa3BPMXh1SUNCeVpYUjFjbTRnY21WemRXeDBPMXh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHTnNiMjVsUVhKeVlYbENkV1ptWlhJN1hHNGlMQ0oyWVhJZ1kyeHZibVZCY25KaGVVSjFabVpsY2lBOUlISmxjWFZwY21Vb0p5NHZYMk5zYjI1bFFYSnlZWGxDZFdabVpYSW5LVHRjYmx4dUx5b3FYRzRnS2lCRGNtVmhkR1Z6SUdFZ1kyeHZibVVnYjJZZ1lIUjVjR1ZrUVhKeVlYbGdMbHh1SUNwY2JpQXFJRUJ3Y21sMllYUmxYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnZEhsd1pXUkJjbkpoZVNCVWFHVWdkSGx3WldRZ1lYSnlZWGtnZEc4Z1kyeHZibVV1WEc0Z0tpQkFjR0Z5WVcwZ2UySnZiMnhsWVc1OUlGdHBjMFJsWlhCZElGTndaV05wWm5rZ1lTQmtaV1Z3SUdOc2IyNWxMbHh1SUNvZ1FISmxkSFZ5Ym5NZ2UwOWlhbVZqZEgwZ1VtVjBkWEp1Y3lCMGFHVWdZMnh2Ym1Wa0lIUjVjR1ZrSUdGeWNtRjVMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQmpiRzl1WlZSNWNHVmtRWEp5WVhrb2RIbHdaV1JCY25KaGVTd2dhWE5FWldWd0tTQjdYRzRnSUhaaGNpQmlkV1ptWlhJZ1BTQnBjMFJsWlhBZ1B5QmpiRzl1WlVGeWNtRjVRblZtWm1WeUtIUjVjR1ZrUVhKeVlYa3VZblZtWm1WeUtTQTZJSFI1Y0dWa1FYSnlZWGt1WW5WbVptVnlPMXh1SUNCeVpYUjFjbTRnYm1WM0lIUjVjR1ZrUVhKeVlYa3VZMjl1YzNSeWRXTjBiM0lvWW5WbVptVnlMQ0IwZVhCbFpFRnljbUY1TG1KNWRHVlBabVp6WlhRc0lIUjVjR1ZrUVhKeVlYa3ViR1Z1WjNSb0tUdGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCamJHOXVaVlI1Y0dWa1FYSnlZWGs3WEc0aUxDSXZLaXBjYmlBcUlFTnZjR2xsY3lCMGFHVWdkbUZzZFdWeklHOW1JR0J6YjNWeVkyVmdJSFJ2SUdCaGNuSmhlV0F1WEc0Z0tseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUlFQndZWEpoYlNCN1FYSnlZWGw5SUhOdmRYSmpaU0JVYUdVZ1lYSnlZWGtnZEc4Z1kyOXdlU0IyWVd4MVpYTWdabkp2YlM1Y2JpQXFJRUJ3WVhKaGJTQjdRWEp5WVhsOUlGdGhjbkpoZVQxYlhWMGdWR2hsSUdGeWNtRjVJSFJ2SUdOdmNIa2dkbUZzZFdWeklIUnZMbHh1SUNvZ1FISmxkSFZ5Ym5NZ2UwRnljbUY1ZlNCU1pYUjFjbTV6SUdCaGNuSmhlV0F1WEc0Z0tpOWNibVoxYm1OMGFXOXVJR052Y0hsQmNuSmhlU2h6YjNWeVkyVXNJR0Z5Y21GNUtTQjdYRzRnSUhaaGNpQnBibVJsZUNBOUlDMHhMRnh1SUNBZ0lDQWdiR1Z1WjNSb0lEMGdjMjkxY21ObExteGxibWQwYUR0Y2JseHVJQ0JoY25KaGVTQjhmQ0FvWVhKeVlYa2dQU0JCY25KaGVTaHNaVzVuZEdncEtUdGNiaUFnZDJocGJHVWdLQ3NyYVc1a1pYZ2dQQ0JzWlc1bmRHZ3BJSHRjYmlBZ0lDQmhjbkpoZVZ0cGJtUmxlRjBnUFNCemIzVnlZMlZiYVc1a1pYaGRPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQmhjbkpoZVR0Y2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JqYjNCNVFYSnlZWGs3WEc0aUxDSjJZWElnYVhOUFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwybHpUMkpxWldOMEp5azdYRzVjYmk4cUtpQkNkV2xzZEMxcGJpQjJZV3gxWlNCeVpXWmxjbVZ1WTJWekxpQXFMMXh1ZG1GeUlHOWlhbVZqZEVOeVpXRjBaU0E5SUU5aWFtVmpkQzVqY21WaGRHVTdYRzVjYmk4cUtseHVJQ29nVkdobElHSmhjMlVnYVcxd2JHVnRaVzUwWVhScGIyNGdiMllnWUY4dVkzSmxZWFJsWUNCM2FYUm9iM1YwSUhOMWNIQnZjblFnWm05eUlHRnpjMmxuYm1sdVoxeHVJQ29nY0hKdmNHVnlkR2xsY3lCMGJ5QjBhR1VnWTNKbFlYUmxaQ0J2WW1wbFkzUXVYRzRnS2x4dUlDb2dRSEJ5YVhaaGRHVmNiaUFxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J3Y205MGJ5QlVhR1VnYjJKcVpXTjBJSFJ2SUdsdWFHVnlhWFFnWm5KdmJTNWNiaUFxSUVCeVpYUjFjbTV6SUh0UFltcGxZM1I5SUZKbGRIVnlibk1nZEdobElHNWxkeUJ2WW1wbFkzUXVYRzRnS2k5Y2JuWmhjaUJpWVhObFEzSmxZWFJsSUQwZ0tHWjFibU4wYVc5dUtDa2dlMXh1SUNCbWRXNWpkR2x2YmlCdlltcGxZM1FvS1NCN2ZWeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNG9jSEp2ZEc4cElIdGNiaUFnSUNCcFppQW9JV2x6VDJKcVpXTjBLSEJ5YjNSdktTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIdDlPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9iMkpxWldOMFEzSmxZWFJsS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYjJKcVpXTjBRM0psWVhSbEtIQnliM1J2S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdiMkpxWldOMExuQnliM1J2ZEhsd1pTQTlJSEJ5YjNSdk8xeHVJQ0FnSUhaaGNpQnlaWE4xYkhRZ1BTQnVaWGNnYjJKcVpXTjBPMXh1SUNBZ0lHOWlhbVZqZEM1d2NtOTBiM1I1Y0dVZ1BTQjFibVJsWm1sdVpXUTdYRzRnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYmlBZ2ZUdGNibjBvS1NrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdZbUZ6WlVOeVpXRjBaVHRjYmlJc0lpOHFLbHh1SUNvZ1EzSmxZWFJsY3lCaElIVnVZWEo1SUdaMWJtTjBhVzl1SUhSb1lYUWdhVzUyYjJ0bGN5QmdablZ1WTJBZ2QybDBhQ0JwZEhNZ1lYSm5kVzFsYm5RZ2RISmhibk5tYjNKdFpXUXVYRzRnS2x4dUlDb2dRSEJ5YVhaaGRHVmNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdaMWJtTWdWR2hsSUdaMWJtTjBhVzl1SUhSdklIZHlZWEF1WEc0Z0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQjBjbUZ1YzJadmNtMGdWR2hsSUdGeVozVnRaVzUwSUhSeVlXNXpabTl5YlM1Y2JpQXFJRUJ5WlhSMWNtNXpJSHRHZFc1amRHbHZibjBnVW1WMGRYSnVjeUIwYUdVZ2JtVjNJR1oxYm1OMGFXOXVMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQnZkbVZ5UVhKbktHWjFibU1zSUhSeVlXNXpabTl5YlNrZ2UxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNG9ZWEpuS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1oxYm1Nb2RISmhibk5tYjNKdEtHRnlaeWtwTzF4dUlDQjlPMXh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHOTJaWEpCY21jN1hHNGlMQ0oyWVhJZ2IzWmxja0Z5WnlBOUlISmxjWFZwY21Vb0p5NHZYMjkyWlhKQmNtY25LVHRjYmx4dUx5b3FJRUoxYVd4MExXbHVJSFpoYkhWbElISmxabVZ5Wlc1alpYTXVJQ292WEc1MllYSWdaMlYwVUhKdmRHOTBlWEJsSUQwZ2IzWmxja0Z5WnloUFltcGxZM1F1WjJWMFVISnZkRzkwZVhCbFQyWXNJRTlpYW1WamRDazdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWjJWMFVISnZkRzkwZVhCbE8xeHVJaXdpTHlvcUlGVnpaV1FnWm05eUlHSjFhV3gwTFdsdUlHMWxkR2h2WkNCeVpXWmxjbVZ1WTJWekxpQXFMMXh1ZG1GeUlHOWlhbVZqZEZCeWIzUnZJRDBnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaVHRjYmx4dUx5b3FYRzRnS2lCRGFHVmphM01nYVdZZ1lIWmhiSFZsWUNCcGN5QnNhV3RsYkhrZ1lTQndjbTkwYjNSNWNHVWdiMkpxWldOMExseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaUJBY0dGeVlXMGdleXA5SUhaaGJIVmxJRlJvWlNCMllXeDFaU0IwYnlCamFHVmpheTVjYmlBcUlFQnlaWFIxY201eklIdGliMjlzWldGdWZTQlNaWFIxY201eklHQjBjblZsWUNCcFppQmdkbUZzZFdWZ0lHbHpJR0VnY0hKdmRHOTBlWEJsTENCbGJITmxJR0JtWVd4elpXQXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHbHpVSEp2ZEc5MGVYQmxLSFpoYkhWbEtTQjdYRzRnSUhaaGNpQkRkRzl5SUQwZ2RtRnNkV1VnSmlZZ2RtRnNkV1V1WTI5dWMzUnlkV04wYjNJc1hHNGdJQ0FnSUNCd2NtOTBieUE5SUNoMGVYQmxiMllnUTNSdmNpQTlQU0FuWm5WdVkzUnBiMjRuSUNZbUlFTjBiM0l1Y0hKdmRHOTBlWEJsS1NCOGZDQnZZbXBsWTNSUWNtOTBienRjYmx4dUlDQnlaWFIxY200Z2RtRnNkV1VnUFQwOUlIQnliM1J2TzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR2x6VUhKdmRHOTBlWEJsTzF4dUlpd2lkbUZ5SUdKaGMyVkRjbVZoZEdVZ1BTQnlaWEYxYVhKbEtDY3VMMTlpWVhObFEzSmxZWFJsSnlrc1hHNGdJQ0FnWjJWMFVISnZkRzkwZVhCbElEMGdjbVZ4ZFdseVpTZ25MaTlmWjJWMFVISnZkRzkwZVhCbEp5a3NYRzRnSUNBZ2FYTlFjbTkwYjNSNWNHVWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGMxQnliM1J2ZEhsd1pTY3BPMXh1WEc0dktpcGNiaUFxSUVsdWFYUnBZV3hwZW1WeklHRnVJRzlpYW1WamRDQmpiRzl1WlM1Y2JpQXFYRzRnS2lCQWNISnBkbUYwWlZ4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHOWlhbVZqZENCVWFHVWdiMkpxWldOMElIUnZJR05zYjI1bExseHVJQ29nUUhKbGRIVnlibk1nZTA5aWFtVmpkSDBnVW1WMGRYSnVjeUIwYUdVZ2FXNXBkR2xoYkdsNlpXUWdZMnh2Ym1VdVhHNGdLaTljYm1aMWJtTjBhVzl1SUdsdWFYUkRiRzl1WlU5aWFtVmpkQ2h2WW1wbFkzUXBJSHRjYmlBZ2NtVjBkWEp1SUNoMGVYQmxiMllnYjJKcVpXTjBMbU52Ym5OMGNuVmpkRzl5SUQwOUlDZG1kVzVqZEdsdmJpY2dKaVlnSVdselVISnZkRzkwZVhCbEtHOWlhbVZqZENrcFhHNGdJQ0FnUHlCaVlYTmxRM0psWVhSbEtHZGxkRkJ5YjNSdmRIbHdaU2h2WW1wbFkzUXBLVnh1SUNBZ0lEb2dlMzA3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdhVzVwZEVOc2IyNWxUMkpxWldOME8xeHVJaXdpTHlvcVhHNGdLaUJEYUdWamEzTWdhV1lnWUhaaGJIVmxZQ0JwY3lCdlltcGxZM1F0YkdsclpTNGdRU0IyWVd4MVpTQnBjeUJ2WW1wbFkzUXRiR2xyWlNCcFppQnBkQ2R6SUc1dmRDQmdiblZzYkdCY2JpQXFJR0Z1WkNCb1lYTWdZU0JnZEhsd1pXOW1ZQ0J5WlhOMWJIUWdiMllnWENKdlltcGxZM1JjSWk1Y2JpQXFYRzRnS2lCQWMzUmhkR2xqWEc0Z0tpQkFiV1Z0WW1WeVQyWWdYMXh1SUNvZ1FITnBibU5sSURRdU1DNHdYRzRnS2lCQVkyRjBaV2R2Y25rZ1RHRnVaMXh1SUNvZ1FIQmhjbUZ0SUhzcWZTQjJZV3gxWlNCVWFHVWdkbUZzZFdVZ2RHOGdZMmhsWTJzdVhHNGdLaUJBY21WMGRYSnVjeUI3WW05dmJHVmhibjBnVW1WMGRYSnVjeUJnZEhKMVpXQWdhV1lnWUhaaGJIVmxZQ0JwY3lCdlltcGxZM1F0YkdsclpTd2daV3h6WlNCZ1ptRnNjMlZnTGx4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxWEc0Z0tpQmZMbWx6VDJKcVpXTjBUR2xyWlNoN2ZTazdYRzRnS2lBdkx5QTlQaUIwY25WbFhHNGdLbHh1SUNvZ1h5NXBjMDlpYW1WamRFeHBhMlVvV3pFc0lESXNJRE5kS1R0Y2JpQXFJQzh2SUQwK0lIUnlkV1ZjYmlBcVhHNGdLaUJmTG1selQySnFaV04wVEdsclpTaGZMbTV2YjNBcE8xeHVJQ29nTHk4Z1BUNGdabUZzYzJWY2JpQXFYRzRnS2lCZkxtbHpUMkpxWldOMFRHbHJaU2h1ZFd4c0tUdGNiaUFxSUM4dklEMCtJR1poYkhObFhHNGdLaTljYm1aMWJtTjBhVzl1SUdselQySnFaV04wVEdsclpTaDJZV3gxWlNrZ2UxeHVJQ0J5WlhSMWNtNGdkbUZzZFdVZ0lUMGdiblZzYkNBbUppQjBlWEJsYjJZZ2RtRnNkV1VnUFQwZ0oyOWlhbVZqZENjN1hHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnYVhOUFltcGxZM1JNYVd0bE8xeHVJaXdpZG1GeUlHSmhjMlZIWlhSVVlXY2dQU0J5WlhGMWFYSmxLQ2N1TDE5aVlYTmxSMlYwVkdGbkp5a3NYRzRnSUNBZ2FYTlBZbXBsWTNSTWFXdGxJRDBnY21WeGRXbHlaU2duTGk5cGMwOWlhbVZqZEV4cGEyVW5LVHRjYmx4dUx5b3FJR0JQWW1wbFkzUWpkRzlUZEhKcGJtZGdJSEpsYzNWc2RDQnlaV1psY21WdVkyVnpMaUFxTDF4dWRtRnlJR0Z5WjNOVVlXY2dQU0FuVzI5aWFtVmpkQ0JCY21kMWJXVnVkSE5kSnp0Y2JseHVMeW9xWEc0Z0tpQlVhR1VnWW1GelpTQnBiWEJzWlcxbGJuUmhkR2x2YmlCdlppQmdYeTVwYzBGeVozVnRaVzUwYzJBdVhHNGdLbHh1SUNvZ1FIQnlhWFpoZEdWY2JpQXFJRUJ3WVhKaGJTQjdLbjBnZG1Gc2RXVWdWR2hsSUhaaGJIVmxJSFJ2SUdOb1pXTnJMbHh1SUNvZ1FISmxkSFZ5Ym5NZ2UySnZiMnhsWVc1OUlGSmxkSFZ5Ym5NZ1lIUnlkV1ZnSUdsbUlHQjJZV3gxWldBZ2FYTWdZVzRnWUdGeVozVnRaVzUwYzJBZ2IySnFaV04wTEZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJpWVhObFNYTkJjbWQxYldWdWRITW9kbUZzZFdVcElIdGNiaUFnY21WMGRYSnVJR2x6VDJKcVpXTjBUR2xyWlNoMllXeDFaU2tnSmlZZ1ltRnpaVWRsZEZSaFp5aDJZV3gxWlNrZ1BUMGdZWEpuYzFSaFp6dGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCaVlYTmxTWE5CY21kMWJXVnVkSE03WEc0aUxDSjJZWElnWW1GelpVbHpRWEpuZFcxbGJuUnpJRDBnY21WeGRXbHlaU2duTGk5ZlltRnpaVWx6UVhKbmRXMWxiblJ6Snlrc1hHNGdJQ0FnYVhOUFltcGxZM1JNYVd0bElEMGdjbVZ4ZFdseVpTZ25MaTlwYzA5aWFtVmpkRXhwYTJVbktUdGNibHh1THlvcUlGVnpaV1FnWm05eUlHSjFhV3gwTFdsdUlHMWxkR2h2WkNCeVpXWmxjbVZ1WTJWekxpQXFMMXh1ZG1GeUlHOWlhbVZqZEZCeWIzUnZJRDBnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaVHRjYmx4dUx5b3FJRlZ6WldRZ2RHOGdZMmhsWTJzZ2IySnFaV04wY3lCbWIzSWdiM2R1SUhCeWIzQmxjblJwWlhNdUlDb3ZYRzUyWVhJZ2FHRnpUM2R1VUhKdmNHVnlkSGtnUFNCdlltcGxZM1JRY205MGJ5NW9ZWE5QZDI1UWNtOXdaWEowZVR0Y2JseHVMeW9xSUVKMWFXeDBMV2x1SUhaaGJIVmxJSEpsWm1WeVpXNWpaWE11SUNvdlhHNTJZWElnY0hKdmNHVnlkSGxKYzBWdWRXMWxjbUZpYkdVZ1BTQnZZbXBsWTNSUWNtOTBieTV3Y205d1pYSjBlVWx6Ulc1MWJXVnlZV0pzWlR0Y2JseHVMeW9xWEc0Z0tpQkRhR1ZqYTNNZ2FXWWdZSFpoYkhWbFlDQnBjeUJzYVd0bGJIa2dZVzRnWUdGeVozVnRaVzUwYzJBZ2IySnFaV04wTGx4dUlDcGNiaUFxSUVCemRHRjBhV05jYmlBcUlFQnRaVzFpWlhKUFppQmZYRzRnS2lCQWMybHVZMlVnTUM0eExqQmNiaUFxSUVCallYUmxaMjl5ZVNCTVlXNW5YRzRnS2lCQWNHRnlZVzBnZXlwOUlIWmhiSFZsSUZSb1pTQjJZV3gxWlNCMGJ5QmphR1ZqYXk1Y2JpQXFJRUJ5WlhSMWNtNXpJSHRpYjI5c1pXRnVmU0JTWlhSMWNtNXpJR0IwY25WbFlDQnBaaUJnZG1Gc2RXVmdJR2x6SUdGdUlHQmhjbWQxYldWdWRITmdJRzlpYW1WamRDeGNiaUFxSUNCbGJITmxJR0JtWVd4elpXQXVYRzRnS2lCQVpYaGhiWEJzWlZ4dUlDcGNiaUFxSUY4dWFYTkJjbWQxYldWdWRITW9ablZ1WTNScGIyNG9LU0I3SUhKbGRIVnliaUJoY21kMWJXVnVkSE03SUgwb0tTazdYRzRnS2lBdkx5QTlQaUIwY25WbFhHNGdLbHh1SUNvZ1h5NXBjMEZ5WjNWdFpXNTBjeWhiTVN3Z01pd2dNMTBwTzF4dUlDb2dMeThnUFQ0Z1ptRnNjMlZjYmlBcUwxeHVkbUZ5SUdselFYSm5kVzFsYm5SeklEMGdZbUZ6WlVselFYSm5kVzFsYm5SektHWjFibU4wYVc5dUtDa2dleUJ5WlhSMWNtNGdZWEpuZFcxbGJuUnpPeUI5S0NrcElEOGdZbUZ6WlVselFYSm5kVzFsYm5SeklEb2dablZ1WTNScGIyNG9kbUZzZFdVcElIdGNiaUFnY21WMGRYSnVJR2x6VDJKcVpXTjBUR2xyWlNoMllXeDFaU2tnSmlZZ2FHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaDJZV3gxWlN3Z0oyTmhiR3hsWlNjcElDWW1YRzRnSUNBZ0lYQnliM0JsY25SNVNYTkZiblZ0WlhKaFlteGxMbU5oYkd3b2RtRnNkV1VzSUNkallXeHNaV1VuS1R0Y2JuMDdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnYVhOQmNtZDFiV1Z1ZEhNN1hHNGlMQ0l2S2lwY2JpQXFJRU5vWldOcmN5QnBaaUJnZG1Gc2RXVmdJR2x6SUdOc1lYTnphV1pwWldRZ1lYTWdZVzRnWUVGeWNtRjVZQ0J2WW1wbFkzUXVYRzRnS2x4dUlDb2dRSE4wWVhScFkxeHVJQ29nUUcxbGJXSmxjazltSUY5Y2JpQXFJRUJ6YVc1alpTQXdMakV1TUZ4dUlDb2dRR05oZEdWbmIzSjVJRXhoYm1kY2JpQXFJRUJ3WVhKaGJTQjdLbjBnZG1Gc2RXVWdWR2hsSUhaaGJIVmxJSFJ2SUdOb1pXTnJMbHh1SUNvZ1FISmxkSFZ5Ym5NZ2UySnZiMnhsWVc1OUlGSmxkSFZ5Ym5NZ1lIUnlkV1ZnSUdsbUlHQjJZV3gxWldBZ2FYTWdZVzRnWVhKeVlYa3NJR1ZzYzJVZ1lHWmhiSE5sWUM1Y2JpQXFJRUJsZUdGdGNHeGxYRzRnS2x4dUlDb2dYeTVwYzBGeWNtRjVLRnN4TENBeUxDQXpYU2s3WEc0Z0tpQXZMeUE5UGlCMGNuVmxYRzRnS2x4dUlDb2dYeTVwYzBGeWNtRjVLR1J2WTNWdFpXNTBMbUp2WkhrdVkyaHBiR1J5Wlc0cE8xeHVJQ29nTHk4Z1BUNGdabUZzYzJWY2JpQXFYRzRnS2lCZkxtbHpRWEp5WVhrb0oyRmlZeWNwTzF4dUlDb2dMeThnUFQ0Z1ptRnNjMlZjYmlBcVhHNGdLaUJmTG1selFYSnlZWGtvWHk1dWIyOXdLVHRjYmlBcUlDOHZJRDArSUdaaGJITmxYRzRnS2k5Y2JuWmhjaUJwYzBGeWNtRjVJRDBnUVhKeVlYa3VhWE5CY25KaGVUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JwYzBGeWNtRjVPMXh1SWl3aUx5b3FJRlZ6WldRZ1lYTWdjbVZtWlhKbGJtTmxjeUJtYjNJZ2RtRnlhVzkxY3lCZ1RuVnRZbVZ5WUNCamIyNXpkR0Z1ZEhNdUlDb3ZYRzUyWVhJZ1RVRllYMU5CUmtWZlNVNVVSVWRGVWlBOUlEa3dNRGN4T1RreU5UUTNOREE1T1RFN1hHNWNiaThxS2x4dUlDb2dRMmhsWTJ0eklHbG1JR0IyWVd4MVpXQWdhWE1nWVNCMllXeHBaQ0JoY25KaGVTMXNhV3RsSUd4bGJtZDBhQzVjYmlBcVhHNGdLaUFxS2s1dmRHVTZLaW9nVkdocGN5QnRaWFJvYjJRZ2FYTWdiRzl2YzJWc2VTQmlZWE5sWkNCdmJseHVJQ29nVzJCVWIweGxibWQwYUdCZEtHaDBkSEE2THk5bFkyMWhMV2x1ZEdWeWJtRjBhVzl1WVd3dWIzSm5MMlZqYldFdE1qWXlMemN1TUM4amMyVmpMWFJ2YkdWdVozUm9LUzVjYmlBcVhHNGdLaUJBYzNSaGRHbGpYRzRnS2lCQWJXVnRZbVZ5VDJZZ1gxeHVJQ29nUUhOcGJtTmxJRFF1TUM0d1hHNGdLaUJBWTJGMFpXZHZjbmtnVEdGdVoxeHVJQ29nUUhCaGNtRnRJSHNxZlNCMllXeDFaU0JVYUdVZ2RtRnNkV1VnZEc4Z1kyaGxZMnN1WEc0Z0tpQkFjbVYwZFhKdWN5QjdZbTl2YkdWaGJuMGdVbVYwZFhKdWN5QmdkSEoxWldBZ2FXWWdZSFpoYkhWbFlDQnBjeUJoSUhaaGJHbGtJR3hsYm1kMGFDd2daV3h6WlNCZ1ptRnNjMlZnTGx4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxWEc0Z0tpQmZMbWx6VEdWdVozUm9LRE1wTzF4dUlDb2dMeThnUFQ0Z2RISjFaVnh1SUNwY2JpQXFJRjh1YVhOTVpXNW5kR2dvVG5WdFltVnlMazFKVGw5V1FVeFZSU2s3WEc0Z0tpQXZMeUE5UGlCbVlXeHpaVnh1SUNwY2JpQXFJRjh1YVhOTVpXNW5kR2dvU1c1bWFXNXBkSGtwTzF4dUlDb2dMeThnUFQ0Z1ptRnNjMlZjYmlBcVhHNGdLaUJmTG1selRHVnVaM1JvS0Njekp5azdYRzRnS2lBdkx5QTlQaUJtWVd4elpWeHVJQ292WEc1bWRXNWpkR2x2YmlCcGMweGxibWQwYUNoMllXeDFaU2tnZTF4dUlDQnlaWFIxY200Z2RIbHdaVzltSUhaaGJIVmxJRDA5SUNkdWRXMWlaWEluSUNZbVhHNGdJQ0FnZG1Gc2RXVWdQaUF0TVNBbUppQjJZV3gxWlNBbElERWdQVDBnTUNBbUppQjJZV3gxWlNBOFBTQk5RVmhmVTBGR1JWOUpUbFJGUjBWU08xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdselRHVnVaM1JvTzF4dUlpd2lkbUZ5SUdselJuVnVZM1JwYjI0Z1BTQnlaWEYxYVhKbEtDY3VMMmx6Um5WdVkzUnBiMjRuS1N4Y2JpQWdJQ0JwYzB4bGJtZDBhQ0E5SUhKbGNYVnBjbVVvSnk0dmFYTk1aVzVuZEdnbktUdGNibHh1THlvcVhHNGdLaUJEYUdWamEzTWdhV1lnWUhaaGJIVmxZQ0JwY3lCaGNuSmhlUzFzYVd0bExpQkJJSFpoYkhWbElHbHpJR052Ym5OcFpHVnlaV1FnWVhKeVlYa3RiR2xyWlNCcFppQnBkQ2R6WEc0Z0tpQnViM1FnWVNCbWRXNWpkR2x2YmlCaGJtUWdhR0Z6SUdFZ1lIWmhiSFZsTG14bGJtZDBhR0FnZEdoaGRDZHpJR0Z1SUdsdWRHVm5aWElnWjNKbFlYUmxjaUIwYUdGdUlHOXlYRzRnS2lCbGNYVmhiQ0IwYnlCZ01HQWdZVzVrSUd4bGMzTWdkR2hoYmlCdmNpQmxjWFZoYkNCMGJ5QmdUblZ0WW1WeUxrMUJXRjlUUVVaRlgwbE9WRVZIUlZKZ0xseHVJQ3BjYmlBcUlFQnpkR0YwYVdOY2JpQXFJRUJ0WlcxaVpYSlBaaUJmWEc0Z0tpQkFjMmx1WTJVZ05DNHdMakJjYmlBcUlFQmpZWFJsWjI5eWVTQk1ZVzVuWEc0Z0tpQkFjR0Z5WVcwZ2V5cDlJSFpoYkhWbElGUm9aU0IyWVd4MVpTQjBieUJqYUdWamF5NWNiaUFxSUVCeVpYUjFjbTV6SUh0aWIyOXNaV0Z1ZlNCU1pYUjFjbTV6SUdCMGNuVmxZQ0JwWmlCZ2RtRnNkV1ZnSUdseklHRnljbUY1TFd4cGEyVXNJR1ZzYzJVZ1lHWmhiSE5sWUM1Y2JpQXFJRUJsZUdGdGNHeGxYRzRnS2x4dUlDb2dYeTVwYzBGeWNtRjVUR2xyWlNoYk1Td2dNaXdnTTEwcE8xeHVJQ29nTHk4Z1BUNGdkSEoxWlZ4dUlDcGNiaUFxSUY4dWFYTkJjbkpoZVV4cGEyVW9aRzlqZFcxbGJuUXVZbTlrZVM1amFHbHNaSEpsYmlrN1hHNGdLaUF2THlBOVBpQjBjblZsWEc0Z0tseHVJQ29nWHk1cGMwRnljbUY1VEdsclpTZ25ZV0pqSnlrN1hHNGdLaUF2THlBOVBpQjBjblZsWEc0Z0tseHVJQ29nWHk1cGMwRnljbUY1VEdsclpTaGZMbTV2YjNBcE8xeHVJQ29nTHk4Z1BUNGdabUZzYzJWY2JpQXFMMXh1Wm5WdVkzUnBiMjRnYVhOQmNuSmhlVXhwYTJVb2RtRnNkV1VwSUh0Y2JpQWdjbVYwZFhKdUlIWmhiSFZsSUNFOUlHNTFiR3dnSmlZZ2FYTk1aVzVuZEdnb2RtRnNkV1V1YkdWdVozUm9LU0FtSmlBaGFYTkdkVzVqZEdsdmJpaDJZV3gxWlNrN1hHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnYVhOQmNuSmhlVXhwYTJVN1hHNGlMQ0oyWVhJZ2FYTkJjbkpoZVV4cGEyVWdQU0J5WlhGMWFYSmxLQ2N1TDJselFYSnlZWGxNYVd0bEp5a3NYRzRnSUNBZ2FYTlBZbXBsWTNSTWFXdGxJRDBnY21WeGRXbHlaU2duTGk5cGMwOWlhbVZqZEV4cGEyVW5LVHRjYmx4dUx5b3FYRzRnS2lCVWFHbHpJRzFsZEdodlpDQnBjeUJzYVd0bElHQmZMbWx6UVhKeVlYbE1hV3RsWUNCbGVHTmxjSFFnZEdoaGRDQnBkQ0JoYkhOdklHTm9aV05yY3lCcFppQmdkbUZzZFdWZ1hHNGdLaUJwY3lCaGJpQnZZbXBsWTNRdVhHNGdLbHh1SUNvZ1FITjBZWFJwWTF4dUlDb2dRRzFsYldKbGNrOW1JRjljYmlBcUlFQnphVzVqWlNBMExqQXVNRnh1SUNvZ1FHTmhkR1ZuYjNKNUlFeGhibWRjYmlBcUlFQndZWEpoYlNCN0tuMGdkbUZzZFdVZ1ZHaGxJSFpoYkhWbElIUnZJR05vWldOckxseHVJQ29nUUhKbGRIVnlibk1nZTJKdmIyeGxZVzU5SUZKbGRIVnlibk1nWUhSeWRXVmdJR2xtSUdCMllXeDFaV0FnYVhNZ1lXNGdZWEp5WVhrdGJHbHJaU0J2WW1wbFkzUXNYRzRnS2lBZ1pXeHpaU0JnWm1Gc2MyVmdMbHh1SUNvZ1FHVjRZVzF3YkdWY2JpQXFYRzRnS2lCZkxtbHpRWEp5WVhsTWFXdGxUMkpxWldOMEtGc3hMQ0F5TENBelhTazdYRzRnS2lBdkx5QTlQaUIwY25WbFhHNGdLbHh1SUNvZ1h5NXBjMEZ5Y21GNVRHbHJaVTlpYW1WamRDaGtiMk4xYldWdWRDNWliMlI1TG1Ob2FXeGtjbVZ1S1R0Y2JpQXFJQzh2SUQwK0lIUnlkV1ZjYmlBcVhHNGdLaUJmTG1selFYSnlZWGxNYVd0bFQySnFaV04wS0NkaFltTW5LVHRjYmlBcUlDOHZJRDArSUdaaGJITmxYRzRnS2x4dUlDb2dYeTVwYzBGeWNtRjVUR2xyWlU5aWFtVmpkQ2hmTG01dmIzQXBPMXh1SUNvZ0x5OGdQVDRnWm1Gc2MyVmNiaUFxTDF4dVpuVnVZM1JwYjI0Z2FYTkJjbkpoZVV4cGEyVlBZbXBsWTNRb2RtRnNkV1VwSUh0Y2JpQWdjbVYwZFhKdUlHbHpUMkpxWldOMFRHbHJaU2gyWVd4MVpTa2dKaVlnYVhOQmNuSmhlVXhwYTJVb2RtRnNkV1VwTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR2x6UVhKeVlYbE1hV3RsVDJKcVpXTjBPMXh1SWl3aUx5b3FYRzRnS2lCVWFHbHpJRzFsZEdodlpDQnlaWFIxY201eklHQm1ZV3h6WldBdVhHNGdLbHh1SUNvZ1FITjBZWFJwWTF4dUlDb2dRRzFsYldKbGNrOW1JRjljYmlBcUlFQnphVzVqWlNBMExqRXpMakJjYmlBcUlFQmpZWFJsWjI5eWVTQlZkR2xzWEc0Z0tpQkFjbVYwZFhKdWN5QjdZbTl2YkdWaGJuMGdVbVYwZFhKdWN5QmdabUZzYzJWZ0xseHVJQ29nUUdWNFlXMXdiR1ZjYmlBcVhHNGdLaUJmTG5ScGJXVnpLRElzSUY4dWMzUjFZa1poYkhObEtUdGNiaUFxSUM4dklEMCtJRnRtWVd4elpTd2dabUZzYzJWZFhHNGdLaTljYm1aMWJtTjBhVzl1SUhOMGRXSkdZV3h6WlNncElIdGNiaUFnY21WMGRYSnVJR1poYkhObE8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhOMGRXSkdZV3h6WlR0Y2JpSXNJblpoY2lCeWIyOTBJRDBnY21WeGRXbHlaU2duTGk5ZmNtOXZkQ2NwTEZ4dUlDQWdJSE4wZFdKR1lXeHpaU0E5SUhKbGNYVnBjbVVvSnk0dmMzUjFZa1poYkhObEp5azdYRzVjYmk4cUtpQkVaWFJsWTNRZ1puSmxaU0IyWVhKcFlXSnNaU0JnWlhod2IzSjBjMkF1SUNvdlhHNTJZWElnWm5KbFpVVjRjRzl5ZEhNZ1BTQjBlWEJsYjJZZ1pYaHdiM0owY3lBOVBTQW5iMkpxWldOMEp5QW1KaUJsZUhCdmNuUnpJQ1ltSUNGbGVIQnZjblJ6TG01dlpHVlVlWEJsSUNZbUlHVjRjRzl5ZEhNN1hHNWNiaThxS2lCRVpYUmxZM1FnWm5KbFpTQjJZWEpwWVdKc1pTQmdiVzlrZFd4bFlDNGdLaTljYm5aaGNpQm1jbVZsVFc5a2RXeGxJRDBnWm5KbFpVVjRjRzl5ZEhNZ0ppWWdkSGx3Wlc5bUlHMXZaSFZzWlNBOVBTQW5iMkpxWldOMEp5QW1KaUJ0YjJSMWJHVWdKaVlnSVcxdlpIVnNaUzV1YjJSbFZIbHdaU0FtSmlCdGIyUjFiR1U3WEc1Y2JpOHFLaUJFWlhSbFkzUWdkR2hsSUhCdmNIVnNZWElnUTI5dGJXOXVTbE1nWlhoMFpXNXphVzl1SUdCdGIyUjFiR1V1Wlhod2IzSjBjMkF1SUNvdlhHNTJZWElnYlc5a2RXeGxSWGh3YjNKMGN5QTlJR1p5WldWTmIyUjFiR1VnSmlZZ1puSmxaVTF2WkhWc1pTNWxlSEJ2Y25SeklEMDlQU0JtY21WbFJYaHdiM0owY3p0Y2JseHVMeW9xSUVKMWFXeDBMV2x1SUhaaGJIVmxJSEpsWm1WeVpXNWpaWE11SUNvdlhHNTJZWElnUW5WbVptVnlJRDBnYlc5a2RXeGxSWGh3YjNKMGN5QS9JSEp2YjNRdVFuVm1abVZ5SURvZ2RXNWtaV1pwYm1Wa08xeHVYRzR2S2lCQ2RXbHNkQzFwYmlCdFpYUm9iMlFnY21WbVpYSmxibU5sY3lCbWIzSWdkR2h2YzJVZ2QybDBhQ0IwYUdVZ2MyRnRaU0J1WVcxbElHRnpJRzkwYUdWeUlHQnNiMlJoYzJoZ0lHMWxkR2h2WkhNdUlDb3ZYRzUyWVhJZ2JtRjBhWFpsU1hOQ2RXWm1aWElnUFNCQ2RXWm1aWElnUHlCQ2RXWm1aWEl1YVhOQ2RXWm1aWElnT2lCMWJtUmxabWx1WldRN1hHNWNiaThxS2x4dUlDb2dRMmhsWTJ0eklHbG1JR0IyWVd4MVpXQWdhWE1nWVNCaWRXWm1aWEl1WEc0Z0tseHVJQ29nUUhOMFlYUnBZMXh1SUNvZ1FHMWxiV0psY2s5bUlGOWNiaUFxSUVCemFXNWpaU0EwTGpNdU1GeHVJQ29nUUdOaGRHVm5iM0o1SUV4aGJtZGNiaUFxSUVCd1lYSmhiU0I3S24wZ2RtRnNkV1VnVkdobElIWmhiSFZsSUhSdklHTm9aV05yTGx4dUlDb2dRSEpsZEhWeWJuTWdlMkp2YjJ4bFlXNTlJRkpsZEhWeWJuTWdZSFJ5ZFdWZ0lHbG1JR0IyWVd4MVpXQWdhWE1nWVNCaWRXWm1aWElzSUdWc2MyVWdZR1poYkhObFlDNWNiaUFxSUVCbGVHRnRjR3hsWEc0Z0tseHVJQ29nWHk1cGMwSjFabVpsY2lodVpYY2dRblZtWm1WeUtESXBLVHRjYmlBcUlDOHZJRDArSUhSeWRXVmNiaUFxWEc0Z0tpQmZMbWx6UW5WbVptVnlLRzVsZHlCVmFXNTBPRUZ5Y21GNUtESXBLVHRjYmlBcUlDOHZJRDArSUdaaGJITmxYRzRnS2k5Y2JuWmhjaUJwYzBKMVptWmxjaUE5SUc1aGRHbDJaVWx6UW5WbVptVnlJSHg4SUhOMGRXSkdZV3h6WlR0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnBjMEoxWm1abGNqdGNiaUlzSW5aaGNpQmlZWE5sUjJWMFZHRm5JRDBnY21WeGRXbHlaU2duTGk5ZlltRnpaVWRsZEZSaFp5Y3BMRnh1SUNBZ0lHZGxkRkJ5YjNSdmRIbHdaU0E5SUhKbGNYVnBjbVVvSnk0dlgyZGxkRkJ5YjNSdmRIbHdaU2NwTEZ4dUlDQWdJR2x6VDJKcVpXTjBUR2xyWlNBOUlISmxjWFZwY21Vb0p5NHZhWE5QWW1wbFkzUk1hV3RsSnlrN1hHNWNiaThxS2lCZ1QySnFaV04wSTNSdlUzUnlhVzVuWUNCeVpYTjFiSFFnY21WbVpYSmxibU5sY3k0Z0tpOWNiblpoY2lCdlltcGxZM1JVWVdjZ1BTQW5XMjlpYW1WamRDQlBZbXBsWTNSZEp6dGNibHh1THlvcUlGVnpaV1FnWm05eUlHSjFhV3gwTFdsdUlHMWxkR2h2WkNCeVpXWmxjbVZ1WTJWekxpQXFMMXh1ZG1GeUlHWjFibU5RY205MGJ5QTlJRVoxYm1OMGFXOXVMbkJ5YjNSdmRIbHdaU3hjYmlBZ0lDQnZZbXBsWTNSUWNtOTBieUE5SUU5aWFtVmpkQzV3Y205MGIzUjVjR1U3WEc1Y2JpOHFLaUJWYzJWa0lIUnZJSEpsYzI5c2RtVWdkR2hsSUdSbFkyOXRjR2xzWldRZ2MyOTFjbU5sSUc5bUlHWjFibU4wYVc5dWN5NGdLaTljYm5aaGNpQm1kVzVqVkc5VGRISnBibWNnUFNCbWRXNWpVSEp2ZEc4dWRHOVRkSEpwYm1jN1hHNWNiaThxS2lCVmMyVmtJSFJ2SUdOb1pXTnJJRzlpYW1WamRITWdabTl5SUc5M2JpQndjbTl3WlhKMGFXVnpMaUFxTDF4dWRtRnlJR2hoYzA5M2JsQnliM0JsY25SNUlEMGdiMkpxWldOMFVISnZkRzh1YUdGelQzZHVVSEp2Y0dWeWRIazdYRzVjYmk4cUtpQlZjMlZrSUhSdklHbHVabVZ5SUhSb1pTQmdUMkpxWldOMFlDQmpiMjV6ZEhKMVkzUnZjaTRnS2k5Y2JuWmhjaUJ2WW1wbFkzUkRkRzl5VTNSeWFXNW5JRDBnWm5WdVkxUnZVM1J5YVc1bkxtTmhiR3dvVDJKcVpXTjBLVHRjYmx4dUx5b3FYRzRnS2lCRGFHVmphM01nYVdZZ1lIWmhiSFZsWUNCcGN5QmhJSEJzWVdsdUlHOWlhbVZqZEN3Z2RHaGhkQ0JwY3l3Z1lXNGdiMkpxWldOMElHTnlaV0YwWldRZ1lua2dkR2hsWEc0Z0tpQmdUMkpxWldOMFlDQmpiMjV6ZEhKMVkzUnZjaUJ2Y2lCdmJtVWdkMmwwYUNCaElHQmJXMUJ5YjNSdmRIbHdaVjFkWUNCdlppQmdiblZzYkdBdVhHNGdLbHh1SUNvZ1FITjBZWFJwWTF4dUlDb2dRRzFsYldKbGNrOW1JRjljYmlBcUlFQnphVzVqWlNBd0xqZ3VNRnh1SUNvZ1FHTmhkR1ZuYjNKNUlFeGhibWRjYmlBcUlFQndZWEpoYlNCN0tuMGdkbUZzZFdVZ1ZHaGxJSFpoYkhWbElIUnZJR05vWldOckxseHVJQ29nUUhKbGRIVnlibk1nZTJKdmIyeGxZVzU5SUZKbGRIVnlibk1nWUhSeWRXVmdJR2xtSUdCMllXeDFaV0FnYVhNZ1lTQndiR0ZwYmlCdlltcGxZM1FzSUdWc2MyVWdZR1poYkhObFlDNWNiaUFxSUVCbGVHRnRjR3hsWEc0Z0tseHVJQ29nWm5WdVkzUnBiMjRnUm05dktDa2dlMXh1SUNvZ0lDQjBhR2x6TG1FZ1BTQXhPMXh1SUNvZ2ZWeHVJQ3BjYmlBcUlGOHVhWE5RYkdGcGJrOWlhbVZqZENodVpYY2dSbTl2S1R0Y2JpQXFJQzh2SUQwK0lHWmhiSE5sWEc0Z0tseHVJQ29nWHk1cGMxQnNZV2x1VDJKcVpXTjBLRnN4TENBeUxDQXpYU2s3WEc0Z0tpQXZMeUE5UGlCbVlXeHpaVnh1SUNwY2JpQXFJRjh1YVhOUWJHRnBiazlpYW1WamRDaDdJQ2Q0SnpvZ01Dd2dKM2tuT2lBd0lIMHBPMXh1SUNvZ0x5OGdQVDRnZEhKMVpWeHVJQ3BjYmlBcUlGOHVhWE5RYkdGcGJrOWlhbVZqZENoUFltcGxZM1F1WTNKbFlYUmxLRzUxYkd3cEtUdGNiaUFxSUM4dklEMCtJSFJ5ZFdWY2JpQXFMMXh1Wm5WdVkzUnBiMjRnYVhOUWJHRnBiazlpYW1WamRDaDJZV3gxWlNrZ2UxeHVJQ0JwWmlBb0lXbHpUMkpxWldOMFRHbHJaU2gyWVd4MVpTa2dmSHdnWW1GelpVZGxkRlJoWnloMllXeDFaU2tnSVQwZ2IySnFaV04wVkdGbktTQjdYRzRnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNCOVhHNGdJSFpoY2lCd2NtOTBieUE5SUdkbGRGQnliM1J2ZEhsd1pTaDJZV3gxWlNrN1hHNGdJR2xtSUNod2NtOTBieUE5UFQwZ2JuVnNiQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQjlYRzRnSUhaaGNpQkRkRzl5SUQwZ2FHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaHdjbTkwYnl3Z0oyTnZibk4wY25WamRHOXlKeWtnSmlZZ2NISnZkRzh1WTI5dWMzUnlkV04wYjNJN1hHNGdJSEpsZEhWeWJpQjBlWEJsYjJZZ1EzUnZjaUE5UFNBblpuVnVZM1JwYjI0bklDWW1JRU4wYjNJZ2FXNXpkR0Z1WTJWdlppQkRkRzl5SUNZbVhHNGdJQ0FnWm5WdVkxUnZVM1J5YVc1bkxtTmhiR3dvUTNSdmNpa2dQVDBnYjJKcVpXTjBRM1J2Y2xOMGNtbHVaenRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnBjMUJzWVdsdVQySnFaV04wTzF4dUlpd2lkbUZ5SUdKaGMyVkhaWFJVWVdjZ1BTQnlaWEYxYVhKbEtDY3VMMTlpWVhObFIyVjBWR0ZuSnlrc1hHNGdJQ0FnYVhOTVpXNW5kR2dnUFNCeVpYRjFhWEpsS0NjdUwybHpUR1Z1WjNSb0p5a3NYRzRnSUNBZ2FYTlBZbXBsWTNSTWFXdGxJRDBnY21WeGRXbHlaU2duTGk5cGMwOWlhbVZqZEV4cGEyVW5LVHRjYmx4dUx5b3FJR0JQWW1wbFkzUWpkRzlUZEhKcGJtZGdJSEpsYzNWc2RDQnlaV1psY21WdVkyVnpMaUFxTDF4dWRtRnlJR0Z5WjNOVVlXY2dQU0FuVzI5aWFtVmpkQ0JCY21kMWJXVnVkSE5kSnl4Y2JpQWdJQ0JoY25KaGVWUmhaeUE5SUNkYmIySnFaV04wSUVGeWNtRjVYU2NzWEc0Z0lDQWdZbTl2YkZSaFp5QTlJQ2RiYjJKcVpXTjBJRUp2YjJ4bFlXNWRKeXhjYmlBZ0lDQmtZWFJsVkdGbklEMGdKMXR2WW1wbFkzUWdSR0YwWlYwbkxGeHVJQ0FnSUdWeWNtOXlWR0ZuSUQwZ0oxdHZZbXBsWTNRZ1JYSnliM0pkSnl4Y2JpQWdJQ0JtZFc1alZHRm5JRDBnSjF0dlltcGxZM1FnUm5WdVkzUnBiMjVkSnl4Y2JpQWdJQ0J0WVhCVVlXY2dQU0FuVzI5aWFtVmpkQ0JOWVhCZEp5eGNiaUFnSUNCdWRXMWlaWEpVWVdjZ1BTQW5XMjlpYW1WamRDQk9kVzFpWlhKZEp5eGNiaUFnSUNCdlltcGxZM1JVWVdjZ1BTQW5XMjlpYW1WamRDQlBZbXBsWTNSZEp5eGNiaUFnSUNCeVpXZGxlSEJVWVdjZ1BTQW5XMjlpYW1WamRDQlNaV2RGZUhCZEp5eGNiaUFnSUNCelpYUlVZV2NnUFNBblcyOWlhbVZqZENCVFpYUmRKeXhjYmlBZ0lDQnpkSEpwYm1kVVlXY2dQU0FuVzI5aWFtVmpkQ0JUZEhKcGJtZGRKeXhjYmlBZ0lDQjNaV0ZyVFdGd1ZHRm5JRDBnSjF0dlltcGxZM1FnVjJWaGEwMWhjRjBuTzF4dVhHNTJZWElnWVhKeVlYbENkV1ptWlhKVVlXY2dQU0FuVzI5aWFtVmpkQ0JCY25KaGVVSjFabVpsY2wwbkxGeHVJQ0FnSUdSaGRHRldhV1YzVkdGbklEMGdKMXR2WW1wbFkzUWdSR0YwWVZacFpYZGRKeXhjYmlBZ0lDQm1iRzloZERNeVZHRm5JRDBnSjF0dlltcGxZM1FnUm14dllYUXpNa0Z5Y21GNVhTY3NYRzRnSUNBZ1pteHZZWFEyTkZSaFp5QTlJQ2RiYjJKcVpXTjBJRVpzYjJGME5qUkJjbkpoZVYwbkxGeHVJQ0FnSUdsdWREaFVZV2NnUFNBblcyOWlhbVZqZENCSmJuUTRRWEp5WVhsZEp5eGNiaUFnSUNCcGJuUXhObFJoWnlBOUlDZGJiMkpxWldOMElFbHVkREUyUVhKeVlYbGRKeXhjYmlBZ0lDQnBiblF6TWxSaFp5QTlJQ2RiYjJKcVpXTjBJRWx1ZERNeVFYSnlZWGxkSnl4Y2JpQWdJQ0IxYVc1ME9GUmhaeUE5SUNkYmIySnFaV04wSUZWcGJuUTRRWEp5WVhsZEp5eGNiaUFnSUNCMWFXNTBPRU5zWVcxd1pXUlVZV2NnUFNBblcyOWlhbVZqZENCVmFXNTBPRU5zWVcxd1pXUkJjbkpoZVYwbkxGeHVJQ0FnSUhWcGJuUXhObFJoWnlBOUlDZGJiMkpxWldOMElGVnBiblF4TmtGeWNtRjVYU2NzWEc0Z0lDQWdkV2x1ZERNeVZHRm5JRDBnSjF0dlltcGxZM1FnVldsdWRETXlRWEp5WVhsZEp6dGNibHh1THlvcUlGVnpaV1FnZEc4Z2FXUmxiblJwWm5rZ1lIUnZVM1J5YVc1blZHRm5ZQ0IyWVd4MVpYTWdiMllnZEhsd1pXUWdZWEp5WVhsekxpQXFMMXh1ZG1GeUlIUjVjR1ZrUVhKeVlYbFVZV2R6SUQwZ2UzMDdYRzUwZVhCbFpFRnljbUY1VkdGbmMxdG1iRzloZERNeVZHRm5YU0E5SUhSNWNHVmtRWEp5WVhsVVlXZHpXMlpzYjJGME5qUlVZV2RkSUQxY2JuUjVjR1ZrUVhKeVlYbFVZV2R6VzJsdWREaFVZV2RkSUQwZ2RIbHdaV1JCY25KaGVWUmhaM05iYVc1ME1UWlVZV2RkSUQxY2JuUjVjR1ZrUVhKeVlYbFVZV2R6VzJsdWRETXlWR0ZuWFNBOUlIUjVjR1ZrUVhKeVlYbFVZV2R6VzNWcGJuUTRWR0ZuWFNBOVhHNTBlWEJsWkVGeWNtRjVWR0ZuYzF0MWFXNTBPRU5zWVcxd1pXUlVZV2RkSUQwZ2RIbHdaV1JCY25KaGVWUmhaM05iZFdsdWRERTJWR0ZuWFNBOVhHNTBlWEJsWkVGeWNtRjVWR0ZuYzF0MWFXNTBNekpVWVdkZElEMGdkSEoxWlR0Y2JuUjVjR1ZrUVhKeVlYbFVZV2R6VzJGeVozTlVZV2RkSUQwZ2RIbHdaV1JCY25KaGVWUmhaM05iWVhKeVlYbFVZV2RkSUQxY2JuUjVjR1ZrUVhKeVlYbFVZV2R6VzJGeWNtRjVRblZtWm1WeVZHRm5YU0E5SUhSNWNHVmtRWEp5WVhsVVlXZHpXMkp2YjJ4VVlXZGRJRDFjYm5SNWNHVmtRWEp5WVhsVVlXZHpXMlJoZEdGV2FXVjNWR0ZuWFNBOUlIUjVjR1ZrUVhKeVlYbFVZV2R6VzJSaGRHVlVZV2RkSUQxY2JuUjVjR1ZrUVhKeVlYbFVZV2R6VzJWeWNtOXlWR0ZuWFNBOUlIUjVjR1ZrUVhKeVlYbFVZV2R6VzJaMWJtTlVZV2RkSUQxY2JuUjVjR1ZrUVhKeVlYbFVZV2R6VzIxaGNGUmhaMTBnUFNCMGVYQmxaRUZ5Y21GNVZHRm5jMXR1ZFcxaVpYSlVZV2RkSUQxY2JuUjVjR1ZrUVhKeVlYbFVZV2R6VzI5aWFtVmpkRlJoWjEwZ1BTQjBlWEJsWkVGeWNtRjVWR0ZuYzF0eVpXZGxlSEJVWVdkZElEMWNiblI1Y0dWa1FYSnlZWGxVWVdkelczTmxkRlJoWjEwZ1BTQjBlWEJsWkVGeWNtRjVWR0ZuYzF0emRISnBibWRVWVdkZElEMWNiblI1Y0dWa1FYSnlZWGxVWVdkelczZGxZV3ROWVhCVVlXZGRJRDBnWm1Gc2MyVTdYRzVjYmk4cUtseHVJQ29nVkdobElHSmhjMlVnYVcxd2JHVnRaVzUwWVhScGIyNGdiMllnWUY4dWFYTlVlWEJsWkVGeWNtRjVZQ0IzYVhSb2IzVjBJRTV2WkdVdWFuTWdiM0IwYVcxcGVtRjBhVzl1Y3k1Y2JpQXFYRzRnS2lCQWNISnBkbUYwWlZ4dUlDb2dRSEJoY21GdElIc3FmU0IyWVd4MVpTQlVhR1VnZG1Gc2RXVWdkRzhnWTJobFkyc3VYRzRnS2lCQWNtVjBkWEp1Y3lCN1ltOXZiR1ZoYm4wZ1VtVjBkWEp1Y3lCZ2RISjFaV0FnYVdZZ1lIWmhiSFZsWUNCcGN5QmhJSFI1Y0dWa0lHRnljbUY1TENCbGJITmxJR0JtWVd4elpXQXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHSmhjMlZKYzFSNWNHVmtRWEp5WVhrb2RtRnNkV1VwSUh0Y2JpQWdjbVYwZFhKdUlHbHpUMkpxWldOMFRHbHJaU2gyWVd4MVpTa2dKaVpjYmlBZ0lDQnBjMHhsYm1kMGFDaDJZV3gxWlM1c1pXNW5kR2dwSUNZbUlDRWhkSGx3WldSQmNuSmhlVlJoWjNOYlltRnpaVWRsZEZSaFp5aDJZV3gxWlNsZE8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdKaGMyVkpjMVI1Y0dWa1FYSnlZWGs3WEc0aUxDSXZLaXBjYmlBcUlGUm9aU0JpWVhObElHbHRjR3hsYldWdWRHRjBhVzl1SUc5bUlHQmZMblZ1WVhKNVlDQjNhWFJvYjNWMElITjFjSEJ2Y25RZ1ptOXlJSE4wYjNKcGJtY2diV1YwWVdSaGRHRXVYRzRnS2x4dUlDb2dRSEJ5YVhaaGRHVmNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdaMWJtTWdWR2hsSUdaMWJtTjBhVzl1SUhSdklHTmhjQ0JoY21kMWJXVnVkSE1nWm05eUxseHVJQ29nUUhKbGRIVnlibk1nZTBaMWJtTjBhVzl1ZlNCU1pYUjFjbTV6SUhSb1pTQnVaWGNnWTJGd2NHVmtJR1oxYm1OMGFXOXVMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQmlZWE5sVlc1aGNua29ablZ1WXlrZ2UxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNG9kbUZzZFdVcElIdGNiaUFnSUNCeVpYUjFjbTRnWm5WdVl5aDJZV3gxWlNrN1hHNGdJSDA3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdZbUZ6WlZWdVlYSjVPMXh1SWl3aWRtRnlJR1p5WldWSGJHOWlZV3dnUFNCeVpYRjFhWEpsS0NjdUwxOW1jbVZsUjJ4dlltRnNKeWs3WEc1Y2JpOHFLaUJFWlhSbFkzUWdabkpsWlNCMllYSnBZV0pzWlNCZ1pYaHdiM0owYzJBdUlDb3ZYRzUyWVhJZ1puSmxaVVY0Y0c5eWRITWdQU0IwZVhCbGIyWWdaWGh3YjNKMGN5QTlQU0FuYjJKcVpXTjBKeUFtSmlCbGVIQnZjblJ6SUNZbUlDRmxlSEJ2Y25SekxtNXZaR1ZVZVhCbElDWW1JR1Y0Y0c5eWRITTdYRzVjYmk4cUtpQkVaWFJsWTNRZ1puSmxaU0IyWVhKcFlXSnNaU0JnYlc5a2RXeGxZQzRnS2k5Y2JuWmhjaUJtY21WbFRXOWtkV3hsSUQwZ1puSmxaVVY0Y0c5eWRITWdKaVlnZEhsd1pXOW1JRzF2WkhWc1pTQTlQU0FuYjJKcVpXTjBKeUFtSmlCdGIyUjFiR1VnSmlZZ0lXMXZaSFZzWlM1dWIyUmxWSGx3WlNBbUppQnRiMlIxYkdVN1hHNWNiaThxS2lCRVpYUmxZM1FnZEdobElIQnZjSFZzWVhJZ1EyOXRiVzl1U2xNZ1pYaDBaVzV6YVc5dUlHQnRiMlIxYkdVdVpYaHdiM0owYzJBdUlDb3ZYRzUyWVhJZ2JXOWtkV3hsUlhod2IzSjBjeUE5SUdaeVpXVk5iMlIxYkdVZ0ppWWdabkpsWlUxdlpIVnNaUzVsZUhCdmNuUnpJRDA5UFNCbWNtVmxSWGh3YjNKMGN6dGNibHh1THlvcUlFUmxkR1ZqZENCbWNtVmxJSFpoY21saFlteGxJR0J3Y205alpYTnpZQ0JtY205dElFNXZaR1V1YW5NdUlDb3ZYRzUyWVhJZ1puSmxaVkJ5YjJObGMzTWdQU0J0YjJSMWJHVkZlSEJ2Y25SeklDWW1JR1p5WldWSGJHOWlZV3d1Y0hKdlkyVnpjenRjYmx4dUx5b3FJRlZ6WldRZ2RHOGdZV05qWlhOeklHWmhjM1JsY2lCT2IyUmxMbXB6SUdobGJIQmxjbk11SUNvdlhHNTJZWElnYm05a1pWVjBhV3dnUFNBb1puVnVZM1JwYjI0b0tTQjdYRzRnSUhSeWVTQjdYRzRnSUNBZ0x5OGdWWE5sSUdCMWRHbHNMblI1Y0dWellDQm1iM0lnVG05a1pTNXFjeUF4TUNzdVhHNGdJQ0FnZG1GeUlIUjVjR1Z6SUQwZ1puSmxaVTF2WkhWc1pTQW1KaUJtY21WbFRXOWtkV3hsTG5KbGNYVnBjbVVnSmlZZ1puSmxaVTF2WkhWc1pTNXlaWEYxYVhKbEtDZDFkR2xzSnlrdWRIbHdaWE03WEc1Y2JpQWdJQ0JwWmlBb2RIbHdaWE1wSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwZVhCbGN6dGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5Qk1aV2RoWTNrZ1lIQnliMk5sYzNNdVltbHVaR2x1WnlnbmRYUnBiQ2NwWUNCbWIzSWdUbTlrWlM1cWN5QThJREV3TGx4dUlDQWdJSEpsZEhWeWJpQm1jbVZsVUhKdlkyVnpjeUFtSmlCbWNtVmxVSEp2WTJWemN5NWlhVzVrYVc1bklDWW1JR1p5WldWUWNtOWpaWE56TG1KcGJtUnBibWNvSjNWMGFXd25LVHRjYmlBZ2ZTQmpZWFJqYUNBb1pTa2dlMzFjYm4wb0tTazdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnYm05a1pWVjBhV3c3WEc0aUxDSjJZWElnWW1GelpVbHpWSGx3WldSQmNuSmhlU0E5SUhKbGNYVnBjbVVvSnk0dlgySmhjMlZKYzFSNWNHVmtRWEp5WVhrbktTeGNiaUFnSUNCaVlYTmxWVzVoY25rZ1BTQnlaWEYxYVhKbEtDY3VMMTlpWVhObFZXNWhjbmtuS1N4Y2JpQWdJQ0J1YjJSbFZYUnBiQ0E5SUhKbGNYVnBjbVVvSnk0dlgyNXZaR1ZWZEdsc0p5azdYRzVjYmk4cUlFNXZaR1V1YW5NZ2FHVnNjR1Z5SUhKbFptVnlaVzVqWlhNdUlDb3ZYRzUyWVhJZ2JtOWtaVWx6Vkhsd1pXUkJjbkpoZVNBOUlHNXZaR1ZWZEdsc0lDWW1JRzV2WkdWVmRHbHNMbWx6Vkhsd1pXUkJjbkpoZVR0Y2JseHVMeW9xWEc0Z0tpQkRhR1ZqYTNNZ2FXWWdZSFpoYkhWbFlDQnBjeUJqYkdGemMybG1hV1ZrSUdGeklHRWdkSGx3WldRZ1lYSnlZWGt1WEc0Z0tseHVJQ29nUUhOMFlYUnBZMXh1SUNvZ1FHMWxiV0psY2s5bUlGOWNiaUFxSUVCemFXNWpaU0F6TGpBdU1GeHVJQ29nUUdOaGRHVm5iM0o1SUV4aGJtZGNiaUFxSUVCd1lYSmhiU0I3S24wZ2RtRnNkV1VnVkdobElIWmhiSFZsSUhSdklHTm9aV05yTGx4dUlDb2dRSEpsZEhWeWJuTWdlMkp2YjJ4bFlXNTlJRkpsZEhWeWJuTWdZSFJ5ZFdWZ0lHbG1JR0IyWVd4MVpXQWdhWE1nWVNCMGVYQmxaQ0JoY25KaGVTd2daV3h6WlNCZ1ptRnNjMlZnTGx4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxWEc0Z0tpQmZMbWx6Vkhsd1pXUkJjbkpoZVNodVpYY2dWV2x1ZERoQmNuSmhlU2s3WEc0Z0tpQXZMeUE5UGlCMGNuVmxYRzRnS2x4dUlDb2dYeTVwYzFSNWNHVmtRWEp5WVhrb1cxMHBPMXh1SUNvZ0x5OGdQVDRnWm1Gc2MyVmNiaUFxTDF4dWRtRnlJR2x6Vkhsd1pXUkJjbkpoZVNBOUlHNXZaR1ZKYzFSNWNHVmtRWEp5WVhrZ1B5QmlZWE5sVlc1aGNua29ibTlrWlVselZIbHdaV1JCY25KaGVTa2dPaUJpWVhObFNYTlVlWEJsWkVGeWNtRjVPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdselZIbHdaV1JCY25KaGVUdGNiaUlzSWk4cUtseHVJQ29nUjJWMGN5QjBhR1VnZG1Gc2RXVWdZWFFnWUd0bGVXQXNJSFZ1YkdWemN5QmdhMlY1WUNCcGN5QmNJbDlmY0hKdmRHOWZYMXdpSUc5eUlGd2lZMjl1YzNSeWRXTjBiM0pjSWk1Y2JpQXFYRzRnS2lCQWNISnBkbUYwWlZ4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHOWlhbVZqZENCVWFHVWdiMkpxWldOMElIUnZJSEYxWlhKNUxseHVJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR3RsZVNCVWFHVWdhMlY1SUc5bUlIUm9aU0J3Y205d1pYSjBlU0IwYnlCblpYUXVYRzRnS2lCQWNtVjBkWEp1Y3lCN0tuMGdVbVYwZFhKdWN5QjBhR1VnY0hKdmNHVnlkSGtnZG1Gc2RXVXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlITmhabVZIWlhRb2IySnFaV04wTENCclpYa3BJSHRjYmlBZ2FXWWdLR3RsZVNBOVBUMGdKMk52Ym5OMGNuVmpkRzl5SnlBbUppQjBlWEJsYjJZZ2IySnFaV04wVzJ0bGVWMGdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNCeVpYUjFjbTQ3WEc0Z0lIMWNibHh1SUNCcFppQW9hMlY1SUQwOUlDZGZYM0J5YjNSdlgxOG5LU0I3WEc0Z0lDQWdjbVYwZFhKdU8xeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlHOWlhbVZqZEZ0clpYbGRPMXh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlITmhabVZIWlhRN1hHNGlMQ0oyWVhJZ1ltRnpaVUZ6YzJsbmJsWmhiSFZsSUQwZ2NtVnhkV2x5WlNnbkxpOWZZbUZ6WlVGemMybG5ibFpoYkhWbEp5a3NYRzRnSUNBZ1pYRWdQU0J5WlhGMWFYSmxLQ2N1TDJWeEp5azdYRzVjYmk4cUtpQlZjMlZrSUdadmNpQmlkV2xzZEMxcGJpQnRaWFJvYjJRZ2NtVm1aWEpsYm1ObGN5NGdLaTljYm5aaGNpQnZZbXBsWTNSUWNtOTBieUE5SUU5aWFtVmpkQzV3Y205MGIzUjVjR1U3WEc1Y2JpOHFLaUJWYzJWa0lIUnZJR05vWldOcklHOWlhbVZqZEhNZ1ptOXlJRzkzYmlCd2NtOXdaWEowYVdWekxpQXFMMXh1ZG1GeUlHaGhjMDkzYmxCeWIzQmxjblI1SUQwZ2IySnFaV04wVUhKdmRHOHVhR0Z6VDNkdVVISnZjR1Z5ZEhrN1hHNWNiaThxS2x4dUlDb2dRWE56YVdkdWN5QmdkbUZzZFdWZ0lIUnZJR0JyWlhsZ0lHOW1JR0J2WW1wbFkzUmdJR2xtSUhSb1pTQmxlR2x6ZEdsdVp5QjJZV3gxWlNCcGN5QnViM1FnWlhGMWFYWmhiR1Z1ZEZ4dUlDb2dkWE5wYm1jZ1cyQlRZVzFsVm1Gc2RXVmFaWEp2WUYwb2FIUjBjRG92TDJWamJXRXRhVzUwWlhKdVlYUnBiMjVoYkM1dmNtY3ZaV050WVMweU5qSXZOeTR3THlOelpXTXRjMkZ0WlhaaGJIVmxlbVZ5YnlsY2JpQXFJR1p2Y2lCbGNYVmhiR2wwZVNCamIyMXdZWEpwYzI5dWN5NWNiaUFxWEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzlpYW1WamRDQlVhR1VnYjJKcVpXTjBJSFJ2SUcxdlpHbG1lUzVjYmlBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCclpYa2dWR2hsSUd0bGVTQnZaaUIwYUdVZ2NISnZjR1Z5ZEhrZ2RHOGdZWE56YVdkdUxseHVJQ29nUUhCaGNtRnRJSHNxZlNCMllXeDFaU0JVYUdVZ2RtRnNkV1VnZEc4Z1lYTnphV2R1TGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJoYzNOcFoyNVdZV3gxWlNodlltcGxZM1FzSUd0bGVTd2dkbUZzZFdVcElIdGNiaUFnZG1GeUlHOWlhbFpoYkhWbElEMGdiMkpxWldOMFcydGxlVjA3WEc0Z0lHbG1JQ2doS0doaGMwOTNibEJ5YjNCbGNuUjVMbU5oYkd3b2IySnFaV04wTENCclpYa3BJQ1ltSUdWeEtHOWlhbFpoYkhWbExDQjJZV3gxWlNrcElIeDhYRzRnSUNBZ0lDQW9kbUZzZFdVZ1BUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlBaEtHdGxlU0JwYmlCdlltcGxZM1FwS1NrZ2UxeHVJQ0FnSUdKaGMyVkJjM05wWjI1V1lXeDFaU2h2WW1wbFkzUXNJR3RsZVN3Z2RtRnNkV1VwTzF4dUlDQjlYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1lYTnphV2R1Vm1Gc2RXVTdYRzRpTENKMllYSWdZWE56YVdkdVZtRnNkV1VnUFNCeVpYRjFhWEpsS0NjdUwxOWhjM05wWjI1V1lXeDFaU2NwTEZ4dUlDQWdJR0poYzJWQmMzTnBaMjVXWVd4MVpTQTlJSEpsY1hWcGNtVW9KeTR2WDJKaGMyVkJjM05wWjI1V1lXeDFaU2NwTzF4dVhHNHZLaXBjYmlBcUlFTnZjR2xsY3lCd2NtOXdaWEowYVdWeklHOW1JR0J6YjNWeVkyVmdJSFJ2SUdCdlltcGxZM1JnTGx4dUlDcGNiaUFxSUVCd2NtbDJZWFJsWEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2MyOTFjbU5sSUZSb1pTQnZZbXBsWTNRZ2RHOGdZMjl3ZVNCd2NtOXdaWEowYVdWeklHWnliMjB1WEc0Z0tpQkFjR0Z5WVcwZ2UwRnljbUY1ZlNCd2NtOXdjeUJVYUdVZ2NISnZjR1Z5ZEhrZ2FXUmxiblJwWm1sbGNuTWdkRzhnWTI5d2VTNWNiaUFxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0JiYjJKcVpXTjBQWHQ5WFNCVWFHVWdiMkpxWldOMElIUnZJR052Y0hrZ2NISnZjR1Z5ZEdsbGN5QjBieTVjYmlBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlGdGpkWE4wYjIxcGVtVnlYU0JVYUdVZ1puVnVZM1JwYjI0Z2RHOGdZM1Z6ZEc5dGFYcGxJR052Y0dsbFpDQjJZV3gxWlhNdVhHNGdLaUJBY21WMGRYSnVjeUI3VDJKcVpXTjBmU0JTWlhSMWNtNXpJR0J2WW1wbFkzUmdMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQmpiM0I1VDJKcVpXTjBLSE52ZFhKalpTd2djSEp2Y0hNc0lHOWlhbVZqZEN3Z1kzVnpkRzl0YVhwbGNpa2dlMXh1SUNCMllYSWdhWE5PWlhjZ1BTQWhiMkpxWldOME8xeHVJQ0J2WW1wbFkzUWdmSHdnS0c5aWFtVmpkQ0E5SUh0OUtUdGNibHh1SUNCMllYSWdhVzVrWlhnZ1BTQXRNU3hjYmlBZ0lDQWdJR3hsYm1kMGFDQTlJSEJ5YjNCekxteGxibWQwYUR0Y2JseHVJQ0IzYUdsc1pTQW9LeXRwYm1SbGVDQThJR3hsYm1kMGFDa2dlMXh1SUNBZ0lIWmhjaUJyWlhrZ1BTQndjbTl3YzF0cGJtUmxlRjA3WEc1Y2JpQWdJQ0IyWVhJZ2JtVjNWbUZzZFdVZ1BTQmpkWE4wYjIxcGVtVnlYRzRnSUNBZ0lDQS9JR04xYzNSdmJXbDZaWElvYjJKcVpXTjBXMnRsZVYwc0lITnZkWEpqWlZ0clpYbGRMQ0JyWlhrc0lHOWlhbVZqZEN3Z2MyOTFjbU5sS1Z4dUlDQWdJQ0FnT2lCMWJtUmxabWx1WldRN1hHNWNiaUFnSUNCcFppQW9ibVYzVm1Gc2RXVWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ2JtVjNWbUZzZFdVZ1BTQnpiM1Z5WTJWYmEyVjVYVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLR2x6VG1WM0tTQjdYRzRnSUNBZ0lDQmlZWE5sUVhOemFXZHVWbUZzZFdVb2IySnFaV04wTENCclpYa3NJRzVsZDFaaGJIVmxLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ1lYTnphV2R1Vm1Gc2RXVW9iMkpxWldOMExDQnJaWGtzSUc1bGQxWmhiSFZsS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnY21WMGRYSnVJRzlpYW1WamREdGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCamIzQjVUMkpxWldOME8xeHVJaXdpTHlvcVhHNGdLaUJVYUdVZ1ltRnpaU0JwYlhCc1pXMWxiblJoZEdsdmJpQnZaaUJnWHk1MGFXMWxjMkFnZDJsMGFHOTFkQ0J6ZFhCd2IzSjBJR1p2Y2lCcGRHVnlZWFJsWlNCemFHOXlkR2hoYm1SelhHNGdLaUJ2Y2lCdFlYZ2dZWEp5WVhrZ2JHVnVaM1JvSUdOb1pXTnJjeTVjYmlBcVhHNGdLaUJBY0hKcGRtRjBaVnh1SUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUc0Z1ZHaGxJRzUxYldKbGNpQnZaaUIwYVcxbGN5QjBieUJwYm5admEyVWdZR2wwWlhKaGRHVmxZQzVjYmlBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlHbDBaWEpoZEdWbElGUm9aU0JtZFc1amRHbHZiaUJwYm5admEyVmtJSEJsY2lCcGRHVnlZWFJwYjI0dVhHNGdLaUJBY21WMGRYSnVjeUI3UVhKeVlYbDlJRkpsZEhWeWJuTWdkR2hsSUdGeWNtRjVJRzltSUhKbGMzVnNkSE11WEc0Z0tpOWNibVoxYm1OMGFXOXVJR0poYzJWVWFXMWxjeWh1TENCcGRHVnlZWFJsWlNrZ2UxeHVJQ0IyWVhJZ2FXNWtaWGdnUFNBdE1TeGNiaUFnSUNBZ0lISmxjM1ZzZENBOUlFRnljbUY1S0c0cE8xeHVYRzRnSUhkb2FXeGxJQ2dySzJsdVpHVjRJRHdnYmlrZ2UxeHVJQ0FnSUhKbGMzVnNkRnRwYm1SbGVGMGdQU0JwZEdWeVlYUmxaU2hwYm1SbGVDazdYRzRnSUgxY2JpQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JpWVhObFZHbHRaWE03WEc0aUxDSXZLaW9nVlhObFpDQmhjeUJ5WldabGNtVnVZMlZ6SUdadmNpQjJZWEpwYjNWeklHQk9kVzFpWlhKZ0lHTnZibk4wWVc1MGN5NGdLaTljYm5aaGNpQk5RVmhmVTBGR1JWOUpUbFJGUjBWU0lEMGdPVEF3TnpFNU9USTFORGMwTURrNU1UdGNibHh1THlvcUlGVnpaV1FnZEc4Z1pHVjBaV04wSUhWdWMybG5ibVZrSUdsdWRHVm5aWElnZG1Gc2RXVnpMaUFxTDF4dWRtRnlJSEpsU1hOVmFXNTBJRDBnTDE0b1B6b3dmRnN4TFRsZFhGeGtLaWtrTHp0Y2JseHVMeW9xWEc0Z0tpQkRhR1ZqYTNNZ2FXWWdZSFpoYkhWbFlDQnBjeUJoSUhaaGJHbGtJR0Z5Y21GNUxXeHBhMlVnYVc1a1pYZ3VYRzRnS2x4dUlDb2dRSEJ5YVhaaGRHVmNiaUFxSUVCd1lYSmhiU0I3S24wZ2RtRnNkV1VnVkdobElIWmhiSFZsSUhSdklHTm9aV05yTGx4dUlDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlGdHNaVzVuZEdnOVRVRllYMU5CUmtWZlNVNVVSVWRGVWwwZ1ZHaGxJSFZ3Y0dWeUlHSnZkVzVrY3lCdlppQmhJSFpoYkdsa0lHbHVaR1Y0TGx4dUlDb2dRSEpsZEhWeWJuTWdlMkp2YjJ4bFlXNTlJRkpsZEhWeWJuTWdZSFJ5ZFdWZ0lHbG1JR0IyWVd4MVpXQWdhWE1nWVNCMllXeHBaQ0JwYm1SbGVDd2daV3h6WlNCZ1ptRnNjMlZnTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJwYzBsdVpHVjRLSFpoYkhWbExDQnNaVzVuZEdncElIdGNiaUFnZG1GeUlIUjVjR1VnUFNCMGVYQmxiMllnZG1Gc2RXVTdYRzRnSUd4bGJtZDBhQ0E5SUd4bGJtZDBhQ0E5UFNCdWRXeHNJRDhnVFVGWVgxTkJSa1ZmU1U1VVJVZEZVaUE2SUd4bGJtZDBhRHRjYmx4dUlDQnlaWFIxY200Z0lTRnNaVzVuZEdnZ0ppWmNiaUFnSUNBb2RIbHdaU0E5UFNBbmJuVnRZbVZ5SnlCOGZGeHVJQ0FnSUNBZ0tIUjVjR1VnSVQwZ0ozTjViV0p2YkNjZ0ppWWdjbVZKYzFWcGJuUXVkR1Z6ZENoMllXeDFaU2twS1NBbUpseHVJQ0FnSUNBZ0lDQW9kbUZzZFdVZ1BpQXRNU0FtSmlCMllXeDFaU0FsSURFZ1BUMGdNQ0FtSmlCMllXeDFaU0E4SUd4bGJtZDBhQ2s3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdhWE5KYm1SbGVEdGNiaUlzSW5aaGNpQmlZWE5sVkdsdFpYTWdQU0J5WlhGMWFYSmxLQ2N1TDE5aVlYTmxWR2x0WlhNbktTeGNiaUFnSUNCcGMwRnlaM1Z0Wlc1MGN5QTlJSEpsY1hWcGNtVW9KeTR2YVhOQmNtZDFiV1Z1ZEhNbktTeGNiaUFnSUNCcGMwRnljbUY1SUQwZ2NtVnhkV2x5WlNnbkxpOXBjMEZ5Y21GNUp5a3NYRzRnSUNBZ2FYTkNkV1ptWlhJZ1BTQnlaWEYxYVhKbEtDY3VMMmx6UW5WbVptVnlKeWtzWEc0Z0lDQWdhWE5KYm1SbGVDQTlJSEpsY1hWcGNtVW9KeTR2WDJselNXNWtaWGduS1N4Y2JpQWdJQ0JwYzFSNWNHVmtRWEp5WVhrZ1BTQnlaWEYxYVhKbEtDY3VMMmx6Vkhsd1pXUkJjbkpoZVNjcE8xeHVYRzR2S2lvZ1ZYTmxaQ0JtYjNJZ1luVnBiSFF0YVc0Z2JXVjBhRzlrSUhKbFptVnlaVzVqWlhNdUlDb3ZYRzUyWVhJZ2IySnFaV04wVUhKdmRHOGdQU0JQWW1wbFkzUXVjSEp2ZEc5MGVYQmxPMXh1WEc0dktpb2dWWE5sWkNCMGJ5QmphR1ZqYXlCdlltcGxZM1J6SUdadmNpQnZkMjRnY0hKdmNHVnlkR2xsY3k0Z0tpOWNiblpoY2lCb1lYTlBkMjVRY205d1pYSjBlU0E5SUc5aWFtVmpkRkJ5YjNSdkxtaGhjMDkzYmxCeWIzQmxjblI1TzF4dVhHNHZLaXBjYmlBcUlFTnlaV0YwWlhNZ1lXNGdZWEp5WVhrZ2IyWWdkR2hsSUdWdWRXMWxjbUZpYkdVZ2NISnZjR1Z5ZEhrZ2JtRnRaWE1nYjJZZ2RHaGxJR0Z5Y21GNUxXeHBhMlVnWUhaaGJIVmxZQzVjYmlBcVhHNGdLaUJBY0hKcGRtRjBaVnh1SUNvZ1FIQmhjbUZ0SUhzcWZTQjJZV3gxWlNCVWFHVWdkbUZzZFdVZ2RHOGdjWFZsY25rdVhHNGdLaUJBY0dGeVlXMGdlMkp2YjJ4bFlXNTlJR2x1YUdWeWFYUmxaQ0JUY0dWamFXWjVJSEpsZEhWeWJtbHVaeUJwYm1obGNtbDBaV1FnY0hKdmNHVnlkSGtnYm1GdFpYTXVYRzRnS2lCQWNtVjBkWEp1Y3lCN1FYSnlZWGw5SUZKbGRIVnlibk1nZEdobElHRnljbUY1SUc5bUlIQnliM0JsY25SNUlHNWhiV1Z6TGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJoY25KaGVVeHBhMlZMWlhsektIWmhiSFZsTENCcGJtaGxjbWwwWldRcElIdGNiaUFnZG1GeUlHbHpRWEp5SUQwZ2FYTkJjbkpoZVNoMllXeDFaU2tzWEc0Z0lDQWdJQ0JwYzBGeVp5QTlJQ0ZwYzBGeWNpQW1KaUJwYzBGeVozVnRaVzUwY3loMllXeDFaU2tzWEc0Z0lDQWdJQ0JwYzBKMVptWWdQU0FoYVhOQmNuSWdKaVlnSVdselFYSm5JQ1ltSUdselFuVm1abVZ5S0haaGJIVmxLU3hjYmlBZ0lDQWdJR2x6Vkhsd1pTQTlJQ0ZwYzBGeWNpQW1KaUFoYVhOQmNtY2dKaVlnSVdselFuVm1aaUFtSmlCcGMxUjVjR1ZrUVhKeVlYa29kbUZzZFdVcExGeHVJQ0FnSUNBZ2MydHBjRWx1WkdWNFpYTWdQU0JwYzBGeWNpQjhmQ0JwYzBGeVp5QjhmQ0JwYzBKMVptWWdmSHdnYVhOVWVYQmxMRnh1SUNBZ0lDQWdjbVZ6ZFd4MElEMGdjMnRwY0VsdVpHVjRaWE1nUHlCaVlYTmxWR2x0WlhNb2RtRnNkV1V1YkdWdVozUm9MQ0JUZEhKcGJtY3BJRG9nVzEwc1hHNGdJQ0FnSUNCc1pXNW5kR2dnUFNCeVpYTjFiSFF1YkdWdVozUm9PMXh1WEc0Z0lHWnZjaUFvZG1GeUlHdGxlU0JwYmlCMllXeDFaU2tnZTF4dUlDQWdJR2xtSUNnb2FXNW9aWEpwZEdWa0lIeDhJR2hoYzA5M2JsQnliM0JsY25SNUxtTmhiR3dvZG1Gc2RXVXNJR3RsZVNrcElDWW1YRzRnSUNBZ0lDQWdJQ0VvYzJ0cGNFbHVaR1Y0WlhNZ0ppWWdLRnh1SUNBZ0lDQWdJQ0FnSUNBdkx5QlRZV1poY21rZ09TQm9ZWE1nWlc1MWJXVnlZV0pzWlNCZ1lYSm5kVzFsYm5SekxteGxibWQwYUdBZ2FXNGdjM1J5YVdOMElHMXZaR1V1WEc0Z0lDQWdJQ0FnSUNBZ0lHdGxlU0E5UFNBbmJHVnVaM1JvSnlCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0F2THlCT2IyUmxMbXB6SURBdU1UQWdhR0Z6SUdWdWRXMWxjbUZpYkdVZ2JtOXVMV2x1WkdWNElIQnliM0JsY25ScFpYTWdiMjRnWW5WbVptVnljeTVjYmlBZ0lDQWdJQ0FnSUNBZ0tHbHpRblZtWmlBbUppQW9hMlY1SUQwOUlDZHZabVp6WlhRbklIeDhJR3RsZVNBOVBTQW5jR0Z5Wlc1MEp5a3BJSHg4WEc0Z0lDQWdJQ0FnSUNBZ0lDOHZJRkJvWVc1MGIyMUtVeUF5SUdoaGN5QmxiblZ0WlhKaFlteGxJRzV2YmkxcGJtUmxlQ0J3Y205d1pYSjBhV1Z6SUc5dUlIUjVjR1ZrSUdGeWNtRjVjeTVjYmlBZ0lDQWdJQ0FnSUNBZ0tHbHpWSGx3WlNBbUppQW9hMlY1SUQwOUlDZGlkV1ptWlhJbklIeDhJR3RsZVNBOVBTQW5ZbmwwWlV4bGJtZDBhQ2NnZkh3Z2EyVjVJRDA5SUNkaWVYUmxUMlptYzJWMEp5a3BJSHg4WEc0Z0lDQWdJQ0FnSUNBZ0lDOHZJRk5yYVhBZ2FXNWtaWGdnY0hKdmNHVnlkR2xsY3k1Y2JpQWdJQ0FnSUNBZ0lDQWdhWE5KYm1SbGVDaHJaWGtzSUd4bGJtZDBhQ2xjYmlBZ0lDQWdJQ0FnS1NrcElIdGNiaUFnSUNBZ0lISmxjM1ZzZEM1d2RYTm9LR3RsZVNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1lYSnlZWGxNYVd0bFMyVjVjenRjYmlJc0lpOHFLbHh1SUNvZ1ZHaHBjeUJtZFc1amRHbHZiaUJwY3lCc2FXdGxYRzRnS2lCYllFOWlhbVZqZEM1clpYbHpZRjBvYUhSMGNEb3ZMMlZqYldFdGFXNTBaWEp1WVhScGIyNWhiQzV2Y21jdlpXTnRZUzB5TmpJdk55NHdMeU56WldNdGIySnFaV04wTG10bGVYTXBYRzRnS2lCbGVHTmxjSFFnZEdoaGRDQnBkQ0JwYm1Oc2RXUmxjeUJwYm1obGNtbDBaV1FnWlc1MWJXVnlZV0pzWlNCd2NtOXdaWEowYVdWekxseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdiMkpxWldOMElGUm9aU0J2WW1wbFkzUWdkRzhnY1hWbGNua3VYRzRnS2lCQWNtVjBkWEp1Y3lCN1FYSnlZWGw5SUZKbGRIVnlibk1nZEdobElHRnljbUY1SUc5bUlIQnliM0JsY25SNUlHNWhiV1Z6TGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJ1WVhScGRtVkxaWGx6U1c0b2IySnFaV04wS1NCN1hHNGdJSFpoY2lCeVpYTjFiSFFnUFNCYlhUdGNiaUFnYVdZZ0tHOWlhbVZqZENBaFBTQnVkV3hzS1NCN1hHNGdJQ0FnWm05eUlDaDJZWElnYTJWNUlHbHVJRTlpYW1WamRDaHZZbXBsWTNRcEtTQjdYRzRnSUNBZ0lDQnlaWE4xYkhRdWNIVnphQ2hyWlhrcE8xeHVJQ0FnSUgxY2JpQWdmVnh1SUNCeVpYUjFjbTRnY21WemRXeDBPMXh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHNWhkR2wyWlV0bGVYTkpianRjYmlJc0luWmhjaUJwYzA5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dmFYTlBZbXBsWTNRbktTeGNiaUFnSUNCcGMxQnliM1J2ZEhsd1pTQTlJSEpsY1hWcGNtVW9KeTR2WDJselVISnZkRzkwZVhCbEp5a3NYRzRnSUNBZ2JtRjBhWFpsUzJWNWMwbHVJRDBnY21WeGRXbHlaU2duTGk5ZmJtRjBhWFpsUzJWNWMwbHVKeWs3WEc1Y2JpOHFLaUJWYzJWa0lHWnZjaUJpZFdsc2RDMXBiaUJ0WlhSb2IyUWdjbVZtWlhKbGJtTmxjeTRnS2k5Y2JuWmhjaUJ2WW1wbFkzUlFjbTkwYnlBOUlFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVN1hHNWNiaThxS2lCVmMyVmtJSFJ2SUdOb1pXTnJJRzlpYW1WamRITWdabTl5SUc5M2JpQndjbTl3WlhKMGFXVnpMaUFxTDF4dWRtRnlJR2hoYzA5M2JsQnliM0JsY25SNUlEMGdiMkpxWldOMFVISnZkRzh1YUdGelQzZHVVSEp2Y0dWeWRIazdYRzVjYmk4cUtseHVJQ29nVkdobElHSmhjMlVnYVcxd2JHVnRaVzUwWVhScGIyNGdiMllnWUY4dWEyVjVjMGx1WUNCM2FHbGphQ0JrYjJWemJpZDBJSFJ5WldGMElITndZWEp6WlNCaGNuSmhlWE1nWVhNZ1pHVnVjMlV1WEc0Z0tseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCdlltcGxZM1FnVkdobElHOWlhbVZqZENCMGJ5QnhkV1Z5ZVM1Y2JpQXFJRUJ5WlhSMWNtNXpJSHRCY25KaGVYMGdVbVYwZFhKdWN5QjBhR1VnWVhKeVlYa2diMllnY0hKdmNHVnlkSGtnYm1GdFpYTXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHSmhjMlZMWlhselNXNG9iMkpxWldOMEtTQjdYRzRnSUdsbUlDZ2hhWE5QWW1wbFkzUW9iMkpxWldOMEtTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdVlYUnBkbVZMWlhselNXNG9iMkpxWldOMEtUdGNiaUFnZlZ4dUlDQjJZWElnYVhOUWNtOTBieUE5SUdselVISnZkRzkwZVhCbEtHOWlhbVZqZENrc1hHNGdJQ0FnSUNCeVpYTjFiSFFnUFNCYlhUdGNibHh1SUNCbWIzSWdLSFpoY2lCclpYa2dhVzRnYjJKcVpXTjBLU0I3WEc0Z0lDQWdhV1lnS0NFb2EyVjVJRDA5SUNkamIyNXpkSEoxWTNSdmNpY2dKaVlnS0dselVISnZkRzhnZkh3Z0lXaGhjMDkzYmxCeWIzQmxjblI1TG1OaGJHd29iMkpxWldOMExDQnJaWGtwS1NrcElIdGNiaUFnSUNBZ0lISmxjM1ZzZEM1d2RYTm9LR3RsZVNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1ltRnpaVXRsZVhOSmJqdGNiaUlzSW5aaGNpQmhjbkpoZVV4cGEyVkxaWGx6SUQwZ2NtVnhkV2x5WlNnbkxpOWZZWEp5WVhsTWFXdGxTMlY1Y3ljcExGeHVJQ0FnSUdKaGMyVkxaWGx6U1c0Z1BTQnlaWEYxYVhKbEtDY3VMMTlpWVhObFMyVjVjMGx1Snlrc1hHNGdJQ0FnYVhOQmNuSmhlVXhwYTJVZ1BTQnlaWEYxYVhKbEtDY3VMMmx6UVhKeVlYbE1hV3RsSnlrN1hHNWNiaThxS2x4dUlDb2dRM0psWVhSbGN5QmhiaUJoY25KaGVTQnZaaUIwYUdVZ2IzZHVJR0Z1WkNCcGJtaGxjbWwwWldRZ1pXNTFiV1Z5WVdKc1pTQndjbTl3WlhKMGVTQnVZVzFsY3lCdlppQmdiMkpxWldOMFlDNWNiaUFxWEc0Z0tpQXFLazV2ZEdVNktpb2dUbTl1TFc5aWFtVmpkQ0IyWVd4MVpYTWdZWEpsSUdOdlpYSmpaV1FnZEc4Z2IySnFaV04wY3k1Y2JpQXFYRzRnS2lCQWMzUmhkR2xqWEc0Z0tpQkFiV1Z0WW1WeVQyWWdYMXh1SUNvZ1FITnBibU5sSURNdU1DNHdYRzRnS2lCQVkyRjBaV2R2Y25rZ1QySnFaV04wWEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2IySnFaV04wSUZSb1pTQnZZbXBsWTNRZ2RHOGdjWFZsY25rdVhHNGdLaUJBY21WMGRYSnVjeUI3UVhKeVlYbDlJRkpsZEhWeWJuTWdkR2hsSUdGeWNtRjVJRzltSUhCeWIzQmxjblI1SUc1aGJXVnpMbHh1SUNvZ1FHVjRZVzF3YkdWY2JpQXFYRzRnS2lCbWRXNWpkR2x2YmlCR2IyOG9LU0I3WEc0Z0tpQWdJSFJvYVhNdVlTQTlJREU3WEc0Z0tpQWdJSFJvYVhNdVlpQTlJREk3WEc0Z0tpQjlYRzRnS2x4dUlDb2dSbTl2TG5CeWIzUnZkSGx3WlM1aklEMGdNenRjYmlBcVhHNGdLaUJmTG10bGVYTkpiaWh1WlhjZ1JtOXZLVHRjYmlBcUlDOHZJRDArSUZzbllTY3NJQ2RpSnl3Z0oyTW5YU0FvYVhSbGNtRjBhVzl1SUc5eVpHVnlJR2x6SUc1dmRDQm5kV0Z5WVc1MFpXVmtLVnh1SUNvdlhHNW1kVzVqZEdsdmJpQnJaWGx6U1c0b2IySnFaV04wS1NCN1hHNGdJSEpsZEhWeWJpQnBjMEZ5Y21GNVRHbHJaU2h2WW1wbFkzUXBJRDhnWVhKeVlYbE1hV3RsUzJWNWN5aHZZbXBsWTNRc0lIUnlkV1VwSURvZ1ltRnpaVXRsZVhOSmJpaHZZbXBsWTNRcE8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUd0bGVYTkpianRjYmlJc0luWmhjaUJqYjNCNVQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOWZZMjl3ZVU5aWFtVmpkQ2NwTEZ4dUlDQWdJR3RsZVhOSmJpQTlJSEpsY1hWcGNtVW9KeTR2YTJWNWMwbHVKeWs3WEc1Y2JpOHFLbHh1SUNvZ1EyOXVkbVZ5ZEhNZ1lIWmhiSFZsWUNCMGJ5QmhJSEJzWVdsdUlHOWlhbVZqZENCbWJHRjBkR1Z1YVc1bklHbHVhR1Z5YVhSbFpDQmxiblZ0WlhKaFlteGxJSE4wY21sdVoxeHVJQ29nYTJWNVpXUWdjSEp2Y0dWeWRHbGxjeUJ2WmlCZ2RtRnNkV1ZnSUhSdklHOTNiaUJ3Y205d1pYSjBhV1Z6SUc5bUlIUm9aU0J3YkdGcGJpQnZZbXBsWTNRdVhHNGdLbHh1SUNvZ1FITjBZWFJwWTF4dUlDb2dRRzFsYldKbGNrOW1JRjljYmlBcUlFQnphVzVqWlNBekxqQXVNRnh1SUNvZ1FHTmhkR1ZuYjNKNUlFeGhibWRjYmlBcUlFQndZWEpoYlNCN0tuMGdkbUZzZFdVZ1ZHaGxJSFpoYkhWbElIUnZJR052Ym5abGNuUXVYRzRnS2lCQWNtVjBkWEp1Y3lCN1QySnFaV04wZlNCU1pYUjFjbTV6SUhSb1pTQmpiMjUyWlhKMFpXUWdjR3hoYVc0Z2IySnFaV04wTGx4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxWEc0Z0tpQm1kVzVqZEdsdmJpQkdiMjhvS1NCN1hHNGdLaUFnSUhSb2FYTXVZaUE5SURJN1hHNGdLaUI5WEc0Z0tseHVJQ29nUm05dkxuQnliM1J2ZEhsd1pTNWpJRDBnTXp0Y2JpQXFYRzRnS2lCZkxtRnpjMmxuYmloN0lDZGhKem9nTVNCOUxDQnVaWGNnUm05dktUdGNiaUFxSUM4dklEMCtJSHNnSjJFbk9pQXhMQ0FuWWljNklESWdmVnh1SUNwY2JpQXFJRjh1WVhOemFXZHVLSHNnSjJFbk9pQXhJSDBzSUY4dWRHOVFiR0ZwYms5aWFtVmpkQ2h1WlhjZ1JtOXZLU2s3WEc0Z0tpQXZMeUE5UGlCN0lDZGhKem9nTVN3Z0oySW5PaUF5TENBbll5YzZJRE1nZlZ4dUlDb3ZYRzVtZFc1amRHbHZiaUIwYjFCc1lXbHVUMkpxWldOMEtIWmhiSFZsS1NCN1hHNGdJSEpsZEhWeWJpQmpiM0I1VDJKcVpXTjBLSFpoYkhWbExDQnJaWGx6U1c0b2RtRnNkV1VwS1R0Y2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0IwYjFCc1lXbHVUMkpxWldOME8xeHVJaXdpZG1GeUlHRnpjMmxuYmsxbGNtZGxWbUZzZFdVZ1BTQnlaWEYxYVhKbEtDY3VMMTloYzNOcFoyNU5aWEpuWlZaaGJIVmxKeWtzWEc0Z0lDQWdZMnh2Ym1WQ2RXWm1aWElnUFNCeVpYRjFhWEpsS0NjdUwxOWpiRzl1WlVKMVptWmxjaWNwTEZ4dUlDQWdJR05zYjI1bFZIbHdaV1JCY25KaGVTQTlJSEpsY1hWcGNtVW9KeTR2WDJOc2IyNWxWSGx3WldSQmNuSmhlU2NwTEZ4dUlDQWdJR052Y0hsQmNuSmhlU0E5SUhKbGNYVnBjbVVvSnk0dlgyTnZjSGxCY25KaGVTY3BMRnh1SUNBZ0lHbHVhWFJEYkc5dVpVOWlhbVZqZENBOUlISmxjWFZwY21Vb0p5NHZYMmx1YVhSRGJHOXVaVTlpYW1WamRDY3BMRnh1SUNBZ0lHbHpRWEpuZFcxbGJuUnpJRDBnY21WeGRXbHlaU2duTGk5cGMwRnlaM1Z0Wlc1MGN5Y3BMRnh1SUNBZ0lHbHpRWEp5WVhrZ1BTQnlaWEYxYVhKbEtDY3VMMmx6UVhKeVlYa25LU3hjYmlBZ0lDQnBjMEZ5Y21GNVRHbHJaVTlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR2YVhOQmNuSmhlVXhwYTJWUFltcGxZM1FuS1N4Y2JpQWdJQ0JwYzBKMVptWmxjaUE5SUhKbGNYVnBjbVVvSnk0dmFYTkNkV1ptWlhJbktTeGNiaUFnSUNCcGMwWjFibU4wYVc5dUlEMGdjbVZ4ZFdseVpTZ25MaTlwYzBaMWJtTjBhVzl1Snlrc1hHNGdJQ0FnYVhOUFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwybHpUMkpxWldOMEp5a3NYRzRnSUNBZ2FYTlFiR0ZwYms5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dmFYTlFiR0ZwYms5aWFtVmpkQ2NwTEZ4dUlDQWdJR2x6Vkhsd1pXUkJjbkpoZVNBOUlISmxjWFZwY21Vb0p5NHZhWE5VZVhCbFpFRnljbUY1Snlrc1hHNGdJQ0FnYzJGbVpVZGxkQ0E5SUhKbGNYVnBjbVVvSnk0dlgzTmhabVZIWlhRbktTeGNiaUFnSUNCMGIxQnNZV2x1VDJKcVpXTjBJRDBnY21WeGRXbHlaU2duTGk5MGIxQnNZV2x1VDJKcVpXTjBKeWs3WEc1Y2JpOHFLbHh1SUNvZ1FTQnpjR1ZqYVdGc2FYcGxaQ0IyWlhKemFXOXVJRzltSUdCaVlYTmxUV1Z5WjJWZ0lHWnZjaUJoY25KaGVYTWdZVzVrSUc5aWFtVmpkSE1nZDJocFkyZ2djR1Z5Wm05eWJYTmNiaUFxSUdSbFpYQWdiV1Z5WjJWeklHRnVaQ0IwY21GamEzTWdkSEpoZG1WeWMyVmtJRzlpYW1WamRITWdaVzVoWW14cGJtY2diMkpxWldOMGN5QjNhWFJvSUdOcGNtTjFiR0Z5WEc0Z0tpQnlaV1psY21WdVkyVnpJSFJ2SUdKbElHMWxjbWRsWkM1Y2JpQXFYRzRnS2lCQWNISnBkbUYwWlZ4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHOWlhbVZqZENCVWFHVWdaR1Z6ZEdsdVlYUnBiMjRnYjJKcVpXTjBMbHh1SUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUhOdmRYSmpaU0JVYUdVZ2MyOTFjbU5sSUc5aWFtVmpkQzVjYmlBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCclpYa2dWR2hsSUd0bGVTQnZaaUIwYUdVZ2RtRnNkV1VnZEc4Z2JXVnlaMlV1WEc0Z0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ2MzSmpTVzVrWlhnZ1ZHaGxJR2x1WkdWNElHOW1JR0J6YjNWeVkyVmdMbHh1SUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym4wZ2JXVnlaMlZHZFc1aklGUm9aU0JtZFc1amRHbHZiaUIwYnlCdFpYSm5aU0IyWVd4MVpYTXVYRzRnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCYlkzVnpkRzl0YVhwbGNsMGdWR2hsSUdaMWJtTjBhVzl1SUhSdklHTjFjM1J2YldsNlpTQmhjM05wWjI1bFpDQjJZV3gxWlhNdVhHNGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdXM04wWVdOclhTQlVjbUZqYTNNZ2RISmhkbVZ5YzJWa0lITnZkWEpqWlNCMllXeDFaWE1nWVc1a0lIUm9aV2x5SUcxbGNtZGxaRnh1SUNvZ0lHTnZkVzUwWlhKd1lYSjBjeTVjYmlBcUwxeHVablZ1WTNScGIyNGdZbUZ6WlUxbGNtZGxSR1ZsY0NodlltcGxZM1FzSUhOdmRYSmpaU3dnYTJWNUxDQnpjbU5KYm1SbGVDd2diV1Z5WjJWR2RXNWpMQ0JqZFhOMGIyMXBlbVZ5TENCemRHRmpheWtnZTF4dUlDQjJZWElnYjJKcVZtRnNkV1VnUFNCellXWmxSMlYwS0c5aWFtVmpkQ3dnYTJWNUtTeGNiaUFnSUNBZ0lITnlZMVpoYkhWbElEMGdjMkZtWlVkbGRDaHpiM1Z5WTJVc0lHdGxlU2tzWEc0Z0lDQWdJQ0J6ZEdGamEyVmtJRDBnYzNSaFkyc3VaMlYwS0hOeVkxWmhiSFZsS1R0Y2JseHVJQ0JwWmlBb2MzUmhZMnRsWkNrZ2UxeHVJQ0FnSUdGemMybG5iazFsY21kbFZtRnNkV1VvYjJKcVpXTjBMQ0JyWlhrc0lITjBZV05yWldRcE8xeHVJQ0FnSUhKbGRIVnlianRjYmlBZ2ZWeHVJQ0IyWVhJZ2JtVjNWbUZzZFdVZ1BTQmpkWE4wYjIxcGVtVnlYRzRnSUNBZ1B5QmpkWE4wYjIxcGVtVnlLRzlpYWxaaGJIVmxMQ0J6Y21OV1lXeDFaU3dnS0d0bGVTQXJJQ2NuS1N3Z2IySnFaV04wTENCemIzVnlZMlVzSUhOMFlXTnJLVnh1SUNBZ0lEb2dkVzVrWldacGJtVmtPMXh1WEc0Z0lIWmhjaUJwYzBOdmJXMXZiaUE5SUc1bGQxWmhiSFZsSUQwOVBTQjFibVJsWm1sdVpXUTdYRzVjYmlBZ2FXWWdLR2x6UTI5dGJXOXVLU0I3WEc0Z0lDQWdkbUZ5SUdselFYSnlJRDBnYVhOQmNuSmhlU2h6Y21OV1lXeDFaU2tzWEc0Z0lDQWdJQ0FnSUdselFuVm1aaUE5SUNGcGMwRnljaUFtSmlCcGMwSjFabVpsY2loemNtTldZV3gxWlNrc1hHNGdJQ0FnSUNBZ0lHbHpWSGx3WldRZ1BTQWhhWE5CY25JZ0ppWWdJV2x6UW5WbVppQW1KaUJwYzFSNWNHVmtRWEp5WVhrb2MzSmpWbUZzZFdVcE8xeHVYRzRnSUNBZ2JtVjNWbUZzZFdVZ1BTQnpjbU5XWVd4MVpUdGNiaUFnSUNCcFppQW9hWE5CY25JZ2ZId2dhWE5DZFdabUlIeDhJR2x6Vkhsd1pXUXBJSHRjYmlBZ0lDQWdJR2xtSUNocGMwRnljbUY1S0c5aWFsWmhiSFZsS1NrZ2UxeHVJQ0FnSUNBZ0lDQnVaWGRXWVd4MVpTQTlJRzlpYWxaaGJIVmxPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdaV3h6WlNCcFppQW9hWE5CY25KaGVVeHBhMlZQWW1wbFkzUW9iMkpxVm1Gc2RXVXBLU0I3WEc0Z0lDQWdJQ0FnSUc1bGQxWmhiSFZsSUQwZ1kyOXdlVUZ5Y21GNUtHOWlhbFpoYkhWbEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHVnNjMlVnYVdZZ0tHbHpRblZtWmlrZ2UxeHVJQ0FnSUNBZ0lDQnBjME52YlcxdmJpQTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQnVaWGRXWVd4MVpTQTlJR05zYjI1bFFuVm1abVZ5S0hOeVkxWmhiSFZsTENCMGNuVmxLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR1ZzYzJVZ2FXWWdLR2x6Vkhsd1pXUXBJSHRjYmlBZ0lDQWdJQ0FnYVhORGIyMXRiMjRnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnYm1WM1ZtRnNkV1VnUFNCamJHOXVaVlI1Y0dWa1FYSnlZWGtvYzNKalZtRnNkV1VzSUhSeWRXVXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHNWxkMVpoYkhWbElEMGdXMTA3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lHVnNjMlVnYVdZZ0tHbHpVR3hoYVc1UFltcGxZM1FvYzNKalZtRnNkV1VwSUh4OElHbHpRWEpuZFcxbGJuUnpLSE55WTFaaGJIVmxLU2tnZTF4dUlDQWdJQ0FnYm1WM1ZtRnNkV1VnUFNCdlltcFdZV3gxWlR0Y2JpQWdJQ0FnSUdsbUlDaHBjMEZ5WjNWdFpXNTBjeWh2WW1wV1lXeDFaU2twSUh0Y2JpQWdJQ0FnSUNBZ2JtVjNWbUZzZFdVZ1BTQjBiMUJzWVdsdVQySnFaV04wS0c5aWFsWmhiSFZsS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdWc2MyVWdhV1lnS0NGcGMwOWlhbVZqZENodlltcFdZV3gxWlNrZ2ZId2dhWE5HZFc1amRHbHZiaWh2WW1wV1lXeDFaU2twSUh0Y2JpQWdJQ0FnSUNBZ2JtVjNWbUZzZFdVZ1BTQnBibWwwUTJ4dmJtVlBZbXBsWTNRb2MzSmpWbUZzZFdVcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lHbHpRMjl0Ylc5dUlEMGdabUZzYzJVN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUdsbUlDaHBjME52YlcxdmJpa2dlMXh1SUNBZ0lDOHZJRkpsWTNWeWMybDJaV3g1SUcxbGNtZGxJRzlpYW1WamRITWdZVzVrSUdGeWNtRjVjeUFvYzNWelkyVndkR2xpYkdVZ2RHOGdZMkZzYkNCemRHRmpheUJzYVcxcGRITXBMbHh1SUNBZ0lITjBZV05yTG5ObGRDaHpjbU5XWVd4MVpTd2dibVYzVm1Gc2RXVXBPMXh1SUNBZ0lHMWxjbWRsUm5WdVl5aHVaWGRXWVd4MVpTd2djM0pqVm1Gc2RXVXNJSE55WTBsdVpHVjRMQ0JqZFhOMGIyMXBlbVZ5TENCemRHRmpheWs3WEc0Z0lDQWdjM1JoWTJ0YkoyUmxiR1YwWlNkZEtITnlZMVpoYkhWbEtUdGNiaUFnZlZ4dUlDQmhjM05wWjI1TlpYSm5aVlpoYkhWbEtHOWlhbVZqZEN3Z2EyVjVMQ0J1WlhkV1lXeDFaU2s3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdZbUZ6WlUxbGNtZGxSR1ZsY0R0Y2JpSXNJblpoY2lCVGRHRmpheUE5SUhKbGNYVnBjbVVvSnk0dlgxTjBZV05ySnlrc1hHNGdJQ0FnWVhOemFXZHVUV1Z5WjJWV1lXeDFaU0E5SUhKbGNYVnBjbVVvSnk0dlgyRnpjMmxuYmsxbGNtZGxWbUZzZFdVbktTeGNiaUFnSUNCaVlYTmxSbTl5SUQwZ2NtVnhkV2x5WlNnbkxpOWZZbUZ6WlVadmNpY3BMRnh1SUNBZ0lHSmhjMlZOWlhKblpVUmxaWEFnUFNCeVpYRjFhWEpsS0NjdUwxOWlZWE5sVFdWeVoyVkVaV1Z3Snlrc1hHNGdJQ0FnYVhOUFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwybHpUMkpxWldOMEp5a3NYRzRnSUNBZ2EyVjVjMGx1SUQwZ2NtVnhkV2x5WlNnbkxpOXJaWGx6U1c0bktTeGNiaUFnSUNCellXWmxSMlYwSUQwZ2NtVnhkV2x5WlNnbkxpOWZjMkZtWlVkbGRDY3BPMXh1WEc0dktpcGNiaUFxSUZSb1pTQmlZWE5sSUdsdGNHeGxiV1Z1ZEdGMGFXOXVJRzltSUdCZkxtMWxjbWRsWUNCM2FYUm9iM1YwSUhOMWNIQnZjblFnWm05eUlHMTFiSFJwY0d4bElITnZkWEpqWlhNdVhHNGdLbHh1SUNvZ1FIQnlhWFpoZEdWY2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnZZbXBsWTNRZ1ZHaGxJR1JsYzNScGJtRjBhVzl1SUc5aWFtVmpkQzVjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCemIzVnlZMlVnVkdobElITnZkWEpqWlNCdlltcGxZM1F1WEc0Z0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ2MzSmpTVzVrWlhnZ1ZHaGxJR2x1WkdWNElHOW1JR0J6YjNWeVkyVmdMbHh1SUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym4wZ1cyTjFjM1J2YldsNlpYSmRJRlJvWlNCbWRXNWpkR2x2YmlCMGJ5QmpkWE4wYjIxcGVtVWdiV1Z5WjJWa0lIWmhiSFZsY3k1Y2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQmJjM1JoWTJ0ZElGUnlZV05yY3lCMGNtRjJaWEp6WldRZ2MyOTFjbU5sSUhaaGJIVmxjeUJoYm1RZ2RHaGxhWElnYldWeVoyVmtYRzRnS2lBZ1kyOTFiblJsY25CaGNuUnpMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQmlZWE5sVFdWeVoyVW9iMkpxWldOMExDQnpiM1Z5WTJVc0lITnlZMGx1WkdWNExDQmpkWE4wYjIxcGVtVnlMQ0J6ZEdGamF5a2dlMXh1SUNCcFppQW9iMkpxWldOMElEMDlQU0J6YjNWeVkyVXBJSHRjYmlBZ0lDQnlaWFIxY200N1hHNGdJSDFjYmlBZ1ltRnpaVVp2Y2loemIzVnlZMlVzSUdaMWJtTjBhVzl1S0hOeVkxWmhiSFZsTENCclpYa3BJSHRjYmlBZ0lDQnpkR0ZqYXlCOGZDQW9jM1JoWTJzZ1BTQnVaWGNnVTNSaFkyc3BPMXh1SUNBZ0lHbG1JQ2hwYzA5aWFtVmpkQ2h6Y21OV1lXeDFaU2twSUh0Y2JpQWdJQ0FnSUdKaGMyVk5aWEpuWlVSbFpYQW9iMkpxWldOMExDQnpiM1Z5WTJVc0lHdGxlU3dnYzNKalNXNWtaWGdzSUdKaGMyVk5aWEpuWlN3Z1kzVnpkRzl0YVhwbGNpd2djM1JoWTJzcE8xeHVJQ0FnSUgxY2JpQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lIWmhjaUJ1WlhkV1lXeDFaU0E5SUdOMWMzUnZiV2w2WlhKY2JpQWdJQ0FnSUNBZ1B5QmpkWE4wYjIxcGVtVnlLSE5oWm1WSFpYUW9iMkpxWldOMExDQnJaWGtwTENCemNtTldZV3gxWlN3Z0tHdGxlU0FySUNjbktTd2diMkpxWldOMExDQnpiM1Z5WTJVc0lITjBZV05yS1Z4dUlDQWdJQ0FnSUNBNklIVnVaR1ZtYVc1bFpEdGNibHh1SUNBZ0lDQWdhV1lnS0c1bGQxWmhiSFZsSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnYm1WM1ZtRnNkV1VnUFNCemNtTldZV3gxWlR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdGemMybG5iazFsY21kbFZtRnNkV1VvYjJKcVpXTjBMQ0JyWlhrc0lHNWxkMVpoYkhWbEtUdGNiaUFnSUNCOVhHNGdJSDBzSUd0bGVYTkpiaWs3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdZbUZ6WlUxbGNtZGxPMXh1SWl3aUx5b3FYRzRnS2lCVWFHbHpJRzFsZEdodlpDQnlaWFIxY201eklIUm9aU0JtYVhKemRDQmhjbWQxYldWdWRDQnBkQ0J5WldObGFYWmxjeTVjYmlBcVhHNGdLaUJBYzNSaGRHbGpYRzRnS2lCQWMybHVZMlVnTUM0eExqQmNiaUFxSUVCdFpXMWlaWEpQWmlCZlhHNGdLaUJBWTJGMFpXZHZjbmtnVlhScGJGeHVJQ29nUUhCaGNtRnRJSHNxZlNCMllXeDFaU0JCYm5rZ2RtRnNkV1V1WEc0Z0tpQkFjbVYwZFhKdWN5QjdLbjBnVW1WMGRYSnVjeUJnZG1Gc2RXVmdMbHh1SUNvZ1FHVjRZVzF3YkdWY2JpQXFYRzRnS2lCMllYSWdiMkpxWldOMElEMGdleUFuWVNjNklERWdmVHRjYmlBcVhHNGdLaUJqYjI1emIyeGxMbXh2WnloZkxtbGtaVzUwYVhSNUtHOWlhbVZqZENrZ1BUMDlJRzlpYW1WamRDazdYRzRnS2lBdkx5QTlQaUIwY25WbFhHNGdLaTljYm1aMWJtTjBhVzl1SUdsa1pXNTBhWFI1S0haaGJIVmxLU0I3WEc0Z0lISmxkSFZ5YmlCMllXeDFaVHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnBaR1Z1ZEdsMGVUdGNiaUlzSWk4cUtseHVJQ29nUVNCbVlYTjBaWElnWVd4MFpYSnVZWFJwZG1VZ2RHOGdZRVoxYm1OMGFXOXVJMkZ3Y0d4NVlDd2dkR2hwY3lCbWRXNWpkR2x2YmlCcGJuWnZhMlZ6SUdCbWRXNWpZRnh1SUNvZ2QybDBhQ0IwYUdVZ1lIUm9hWE5nSUdKcGJtUnBibWNnYjJZZ1lIUm9hWE5CY21kZ0lHRnVaQ0IwYUdVZ1lYSm5kVzFsYm5SeklHOW1JR0JoY21kellDNWNiaUFxWEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnWm5WdVl5QlVhR1VnWm5WdVkzUnBiMjRnZEc4Z2FXNTJiMnRsTGx4dUlDb2dRSEJoY21GdElIc3FmU0IwYUdselFYSm5JRlJvWlNCZ2RHaHBjMkFnWW1sdVpHbHVaeUJ2WmlCZ1puVnVZMkF1WEc0Z0tpQkFjR0Z5WVcwZ2UwRnljbUY1ZlNCaGNtZHpJRlJvWlNCaGNtZDFiV1Z1ZEhNZ2RHOGdhVzUyYjJ0bElHQm1kVzVqWUNCM2FYUm9MbHh1SUNvZ1FISmxkSFZ5Ym5NZ2V5cDlJRkpsZEhWeWJuTWdkR2hsSUhKbGMzVnNkQ0J2WmlCZ1puVnVZMkF1WEc0Z0tpOWNibVoxYm1OMGFXOXVJR0Z3Y0d4NUtHWjFibU1zSUhSb2FYTkJjbWNzSUdGeVozTXBJSHRjYmlBZ2MzZHBkR05vSUNoaGNtZHpMbXhsYm1kMGFDa2dlMXh1SUNBZ0lHTmhjMlVnTURvZ2NtVjBkWEp1SUdaMWJtTXVZMkZzYkNoMGFHbHpRWEpuS1R0Y2JpQWdJQ0JqWVhObElERTZJSEpsZEhWeWJpQm1kVzVqTG1OaGJHd29kR2hwYzBGeVp5d2dZWEpuYzFzd1hTazdYRzRnSUNBZ1kyRnpaU0F5T2lCeVpYUjFjbTRnWm5WdVl5NWpZV3hzS0hSb2FYTkJjbWNzSUdGeVozTmJNRjBzSUdGeVozTmJNVjBwTzF4dUlDQWdJR05oYzJVZ016b2djbVYwZFhKdUlHWjFibU11WTJGc2JDaDBhR2x6UVhKbkxDQmhjbWR6V3pCZExDQmhjbWR6V3pGZExDQmhjbWR6V3pKZEtUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z1puVnVZeTVoY0hCc2VTaDBhR2x6UVhKbkxDQmhjbWR6S1R0Y2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JoY0hCc2VUdGNiaUlzSW5aaGNpQmhjSEJzZVNBOUlISmxjWFZwY21Vb0p5NHZYMkZ3Y0d4NUp5azdYRzVjYmk4cUlFSjFhV3gwTFdsdUlHMWxkR2h2WkNCeVpXWmxjbVZ1WTJWeklHWnZjaUIwYUc5elpTQjNhWFJvSUhSb1pTQnpZVzFsSUc1aGJXVWdZWE1nYjNSb1pYSWdZR3h2WkdGemFHQWdiV1YwYUc5a2N5NGdLaTljYm5aaGNpQnVZWFJwZG1WTllYZ2dQU0JOWVhSb0xtMWhlRHRjYmx4dUx5b3FYRzRnS2lCQklITndaV05wWVd4cGVtVmtJSFpsY25OcGIyNGdiMllnWUdKaGMyVlNaWE4wWUNCM2FHbGphQ0IwY21GdWMyWnZjbTF6SUhSb1pTQnlaWE4wSUdGeWNtRjVMbHh1SUNwY2JpQXFJRUJ3Y21sMllYUmxYRzRnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCbWRXNWpJRlJvWlNCbWRXNWpkR2x2YmlCMGJ5QmhjSEJzZVNCaElISmxjM1FnY0dGeVlXMWxkR1Z5SUhSdkxseHVJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJRnR6ZEdGeWREMW1kVzVqTG14bGJtZDBhQzB4WFNCVWFHVWdjM1JoY25RZ2NHOXphWFJwYjI0Z2IyWWdkR2hsSUhKbGMzUWdjR0Z5WVcxbGRHVnlMbHh1SUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym4wZ2RISmhibk5tYjNKdElGUm9aU0J5WlhOMElHRnljbUY1SUhSeVlXNXpabTl5YlM1Y2JpQXFJRUJ5WlhSMWNtNXpJSHRHZFc1amRHbHZibjBnVW1WMGRYSnVjeUIwYUdVZ2JtVjNJR1oxYm1OMGFXOXVMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQnZkbVZ5VW1WemRDaG1kVzVqTENCemRHRnlkQ3dnZEhKaGJuTm1iM0p0S1NCN1hHNGdJSE4wWVhKMElEMGdibUYwYVhabFRXRjRLSE4wWVhKMElEMDlQU0IxYm1SbFptbHVaV1FnUHlBb1puVnVZeTVzWlc1bmRHZ2dMU0F4S1NBNklITjBZWEowTENBd0tUdGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJSFpoY2lCaGNtZHpJRDBnWVhKbmRXMWxiblJ6TEZ4dUlDQWdJQ0FnSUNCcGJtUmxlQ0E5SUMweExGeHVJQ0FnSUNBZ0lDQnNaVzVuZEdnZ1BTQnVZWFJwZG1WTllYZ29ZWEpuY3k1c1pXNW5kR2dnTFNCemRHRnlkQ3dnTUNrc1hHNGdJQ0FnSUNBZ0lHRnljbUY1SUQwZ1FYSnlZWGtvYkdWdVozUm9LVHRjYmx4dUlDQWdJSGRvYVd4bElDZ3JLMmx1WkdWNElEd2diR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQmhjbkpoZVZ0cGJtUmxlRjBnUFNCaGNtZHpXM04wWVhKMElDc2dhVzVrWlhoZE8xeHVJQ0FnSUgxY2JpQWdJQ0JwYm1SbGVDQTlJQzB4TzF4dUlDQWdJSFpoY2lCdmRHaGxja0Z5WjNNZ1BTQkJjbkpoZVNoemRHRnlkQ0FySURFcE8xeHVJQ0FnSUhkb2FXeGxJQ2dySzJsdVpHVjRJRHdnYzNSaGNuUXBJSHRjYmlBZ0lDQWdJRzkwYUdWeVFYSm5jMXRwYm1SbGVGMGdQU0JoY21kelcybHVaR1Y0WFR0Y2JpQWdJQ0I5WEc0Z0lDQWdiM1JvWlhKQmNtZHpXM04wWVhKMFhTQTlJSFJ5WVc1elptOXliU2hoY25KaGVTazdYRzRnSUNBZ2NtVjBkWEp1SUdGd2NHeDVLR1oxYm1Nc0lIUm9hWE1zSUc5MGFHVnlRWEpuY3lrN1hHNGdJSDA3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdiM1psY2xKbGMzUTdYRzRpTENJdktpcGNiaUFxSUVOeVpXRjBaWE1nWVNCbWRXNWpkR2x2YmlCMGFHRjBJSEpsZEhWeWJuTWdZSFpoYkhWbFlDNWNiaUFxWEc0Z0tpQkFjM1JoZEdsalhHNGdLaUJBYldWdFltVnlUMllnWDF4dUlDb2dRSE5wYm1ObElESXVOQzR3WEc0Z0tpQkFZMkYwWldkdmNua2dWWFJwYkZ4dUlDb2dRSEJoY21GdElIc3FmU0IyWVd4MVpTQlVhR1VnZG1Gc2RXVWdkRzhnY21WMGRYSnVJR1p5YjIwZ2RHaGxJRzVsZHlCbWRXNWpkR2x2Ymk1Y2JpQXFJRUJ5WlhSMWNtNXpJSHRHZFc1amRHbHZibjBnVW1WMGRYSnVjeUIwYUdVZ2JtVjNJR052Ym5OMFlXNTBJR1oxYm1OMGFXOXVMbHh1SUNvZ1FHVjRZVzF3YkdWY2JpQXFYRzRnS2lCMllYSWdiMkpxWldOMGN5QTlJRjh1ZEdsdFpYTW9NaXdnWHk1amIyNXpkR0Z1ZENoN0lDZGhKem9nTVNCOUtTazdYRzRnS2x4dUlDb2dZMjl1YzI5c1pTNXNiMmNvYjJKcVpXTjBjeWs3WEc0Z0tpQXZMeUE5UGlCYmV5QW5ZU2M2SURFZ2ZTd2dleUFuWVNjNklERWdmVjFjYmlBcVhHNGdLaUJqYjI1emIyeGxMbXh2WnlodlltcGxZM1J6V3pCZElEMDlQU0J2WW1wbFkzUnpXekZkS1R0Y2JpQXFJQzh2SUQwK0lIUnlkV1ZjYmlBcUwxeHVablZ1WTNScGIyNGdZMjl1YzNSaGJuUW9kbUZzZFdVcElIdGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjJZV3gxWlR0Y2JpQWdmVHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmpiMjV6ZEdGdWREdGNiaUlzSW5aaGNpQmpiMjV6ZEdGdWRDQTlJSEpsY1hWcGNtVW9KeTR2WTI5dWMzUmhiblFuS1N4Y2JpQWdJQ0JrWldacGJtVlFjbTl3WlhKMGVTQTlJSEpsY1hWcGNtVW9KeTR2WDJSbFptbHVaVkJ5YjNCbGNuUjVKeWtzWEc0Z0lDQWdhV1JsYm5ScGRIa2dQU0J5WlhGMWFYSmxLQ2N1TDJsa1pXNTBhWFI1SnlrN1hHNWNiaThxS2x4dUlDb2dWR2hsSUdKaGMyVWdhVzF3YkdWdFpXNTBZWFJwYjI0Z2IyWWdZSE5sZEZSdlUzUnlhVzVuWUNCM2FYUm9iM1YwSUhOMWNIQnZjblFnWm05eUlHaHZkQ0JzYjI5d0lITm9iM0owYVc1bkxseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0JtZFc1aklGUm9aU0JtZFc1amRHbHZiaUIwYnlCdGIyUnBabmt1WEc0Z0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQnpkSEpwYm1jZ1ZHaGxJR0IwYjFOMGNtbHVaMkFnY21WemRXeDBMbHh1SUNvZ1FISmxkSFZ5Ym5NZ2UwWjFibU4wYVc5dWZTQlNaWFIxY201eklHQm1kVzVqWUM1Y2JpQXFMMXh1ZG1GeUlHSmhjMlZUWlhSVWIxTjBjbWx1WnlBOUlDRmtaV1pwYm1WUWNtOXdaWEowZVNBL0lHbGtaVzUwYVhSNUlEb2dablZ1WTNScGIyNG9ablZ1WXl3Z2MzUnlhVzVuS1NCN1hHNGdJSEpsZEhWeWJpQmtaV1pwYm1WUWNtOXdaWEowZVNobWRXNWpMQ0FuZEc5VGRISnBibWNuTENCN1hHNGdJQ0FnSjJOdmJtWnBaM1Z5WVdKc1pTYzZJSFJ5ZFdVc1hHNGdJQ0FnSjJWdWRXMWxjbUZpYkdVbk9pQm1ZV3h6WlN4Y2JpQWdJQ0FuZG1Gc2RXVW5PaUJqYjI1emRHRnVkQ2h6ZEhKcGJtY3BMRnh1SUNBZ0lDZDNjbWwwWVdKc1pTYzZJSFJ5ZFdWY2JpQWdmU2s3WEc1OU8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR0poYzJWVFpYUlViMU4wY21sdVp6dGNiaUlzSWk4cUtpQlZjMlZrSUhSdklHUmxkR1ZqZENCb2IzUWdablZ1WTNScGIyNXpJR0o1SUc1MWJXSmxjaUJ2WmlCallXeHNjeUIzYVhSb2FXNGdZU0J6Y0dGdUlHOW1JRzFwYkd4cGMyVmpiMjVrY3k0Z0tpOWNiblpoY2lCSVQxUmZRMDlWVGxRZ1BTQTRNREFzWEc0Z0lDQWdTRTlVWDFOUVFVNGdQU0F4Tmp0Y2JseHVMeW9nUW5WcGJIUXRhVzRnYldWMGFHOWtJSEpsWm1WeVpXNWpaWE1nWm05eUlIUm9iM05sSUhkcGRHZ2dkR2hsSUhOaGJXVWdibUZ0WlNCaGN5QnZkR2hsY2lCZ2JHOWtZWE5vWUNCdFpYUm9iMlJ6TGlBcUwxeHVkbUZ5SUc1aGRHbDJaVTV2ZHlBOUlFUmhkR1V1Ym05M08xeHVYRzR2S2lwY2JpQXFJRU55WldGMFpYTWdZU0JtZFc1amRHbHZiaUIwYUdGMEoyeHNJSE5vYjNKMElHOTFkQ0JoYm1RZ2FXNTJiMnRsSUdCcFpHVnVkR2wwZVdBZ2FXNXpkR1ZoWkZ4dUlDb2diMllnWUdaMWJtTmdJSGRvWlc0Z2FYUW5jeUJqWVd4c1pXUWdZRWhQVkY5RFQxVk9WR0FnYjNJZ2JXOXlaU0IwYVcxbGN5QnBiaUJnU0U5VVgxTlFRVTVnWEc0Z0tpQnRhV3hzYVhObFkyOXVaSE11WEc0Z0tseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlHWjFibU1nVkdobElHWjFibU4wYVc5dUlIUnZJSEpsYzNSeWFXTjBMbHh1SUNvZ1FISmxkSFZ5Ym5NZ2UwWjFibU4wYVc5dWZTQlNaWFIxY201eklIUm9aU0J1WlhjZ2MyaHZjblJoWW14bElHWjFibU4wYVc5dUxseHVJQ292WEc1bWRXNWpkR2x2YmlCemFHOXlkRTkxZENobWRXNWpLU0I3WEc0Z0lIWmhjaUJqYjNWdWRDQTlJREFzWEc0Z0lDQWdJQ0JzWVhOMFEyRnNiR1ZrSUQwZ01EdGNibHh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnZG1GeUlITjBZVzF3SUQwZ2JtRjBhWFpsVG05M0tDa3NYRzRnSUNBZ0lDQWdJSEpsYldGcGJtbHVaeUE5SUVoUFZGOVRVRUZPSUMwZ0tITjBZVzF3SUMwZ2JHRnpkRU5oYkd4bFpDazdYRzVjYmlBZ0lDQnNZWE4wUTJGc2JHVmtJRDBnYzNSaGJYQTdYRzRnSUNBZ2FXWWdLSEpsYldGcGJtbHVaeUErSURBcElIdGNiaUFnSUNBZ0lHbG1JQ2dySzJOdmRXNTBJRDQ5SUVoUFZGOURUMVZPVkNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1lYSm5kVzFsYm5Seld6QmRPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCamIzVnVkQ0E5SURBN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQm1kVzVqTG1Gd2NHeDVLSFZ1WkdWbWFXNWxaQ3dnWVhKbmRXMWxiblJ6S1R0Y2JpQWdmVHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnphRzl5ZEU5MWREdGNiaUlzSW5aaGNpQmlZWE5sVTJWMFZHOVRkSEpwYm1jZ1BTQnlaWEYxYVhKbEtDY3VMMTlpWVhObFUyVjBWRzlUZEhKcGJtY25LU3hjYmlBZ0lDQnphRzl5ZEU5MWRDQTlJSEpsY1hWcGNtVW9KeTR2WDNOb2IzSjBUM1YwSnlrN1hHNWNiaThxS2x4dUlDb2dVMlYwY3lCMGFHVWdZSFJ2VTNSeWFXNW5ZQ0J0WlhSb2IyUWdiMllnWUdaMWJtTmdJSFJ2SUhKbGRIVnliaUJnYzNSeWFXNW5ZQzVjYmlBcVhHNGdLaUJBY0hKcGRtRjBaVnh1SUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym4wZ1puVnVZeUJVYUdVZ1puVnVZM1JwYjI0Z2RHOGdiVzlrYVdaNUxseHVJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnYzNSeWFXNW5JRlJvWlNCZ2RHOVRkSEpwYm1kZ0lISmxjM1ZzZEM1Y2JpQXFJRUJ5WlhSMWNtNXpJSHRHZFc1amRHbHZibjBnVW1WMGRYSnVjeUJnWm5WdVkyQXVYRzRnS2k5Y2JuWmhjaUJ6WlhSVWIxTjBjbWx1WnlBOUlITm9iM0owVDNWMEtHSmhjMlZUWlhSVWIxTjBjbWx1WnlrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdjMlYwVkc5VGRISnBibWM3WEc0aUxDSjJZWElnYVdSbGJuUnBkSGtnUFNCeVpYRjFhWEpsS0NjdUwybGtaVzUwYVhSNUp5a3NYRzRnSUNBZ2IzWmxjbEpsYzNRZ1BTQnlaWEYxYVhKbEtDY3VMMTl2ZG1WeVVtVnpkQ2NwTEZ4dUlDQWdJSE5sZEZSdlUzUnlhVzVuSUQwZ2NtVnhkV2x5WlNnbkxpOWZjMlYwVkc5VGRISnBibWNuS1R0Y2JseHVMeW9xWEc0Z0tpQlVhR1VnWW1GelpTQnBiWEJzWlcxbGJuUmhkR2x2YmlCdlppQmdYeTV5WlhOMFlDQjNhR2xqYUNCa2IyVnpiaWQwSUhaaGJHbGtZWFJsSUc5eUlHTnZaWEpqWlNCaGNtZDFiV1Z1ZEhNdVhHNGdLbHh1SUNvZ1FIQnlhWFpoZEdWY2JpQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJR1oxYm1NZ1ZHaGxJR1oxYm1OMGFXOXVJSFJ2SUdGd2NHeDVJR0VnY21WemRDQndZWEpoYldWMFpYSWdkRzh1WEc0Z0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ1czTjBZWEowUFdaMWJtTXViR1Z1WjNSb0xURmRJRlJvWlNCemRHRnlkQ0J3YjNOcGRHbHZiaUJ2WmlCMGFHVWdjbVZ6ZENCd1lYSmhiV1YwWlhJdVhHNGdLaUJBY21WMGRYSnVjeUI3Um5WdVkzUnBiMjU5SUZKbGRIVnlibk1nZEdobElHNWxkeUJtZFc1amRHbHZiaTVjYmlBcUwxeHVablZ1WTNScGIyNGdZbUZ6WlZKbGMzUW9ablZ1WXl3Z2MzUmhjblFwSUh0Y2JpQWdjbVYwZFhKdUlITmxkRlJ2VTNSeWFXNW5LRzkyWlhKU1pYTjBLR1oxYm1Nc0lITjBZWEowTENCcFpHVnVkR2wwZVNrc0lHWjFibU1nS3lBbkp5azdYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1ltRnpaVkpsYzNRN1hHNGlMQ0oyWVhJZ1pYRWdQU0J5WlhGMWFYSmxLQ2N1TDJWeEp5a3NYRzRnSUNBZ2FYTkJjbkpoZVV4cGEyVWdQU0J5WlhGMWFYSmxLQ2N1TDJselFYSnlZWGxNYVd0bEp5a3NYRzRnSUNBZ2FYTkpibVJsZUNBOUlISmxjWFZwY21Vb0p5NHZYMmx6U1c1a1pYZ25LU3hjYmlBZ0lDQnBjMDlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR2YVhOUFltcGxZM1FuS1R0Y2JseHVMeW9xWEc0Z0tpQkRhR1ZqYTNNZ2FXWWdkR2hsSUdkcGRtVnVJR0Z5WjNWdFpXNTBjeUJoY21VZ1puSnZiU0JoYmlCcGRHVnlZWFJsWlNCallXeHNMbHh1SUNwY2JpQXFJRUJ3Y21sMllYUmxYRzRnS2lCQWNHRnlZVzBnZXlwOUlIWmhiSFZsSUZSb1pTQndiM1JsYm5ScFlXd2dhWFJsY21GMFpXVWdkbUZzZFdVZ1lYSm5kVzFsYm5RdVhHNGdLaUJBY0dGeVlXMGdleXA5SUdsdVpHVjRJRlJvWlNCd2IzUmxiblJwWVd3Z2FYUmxjbUYwWldVZ2FXNWtaWGdnYjNJZ2EyVjVJR0Z5WjNWdFpXNTBMbHh1SUNvZ1FIQmhjbUZ0SUhzcWZTQnZZbXBsWTNRZ1ZHaGxJSEJ2ZEdWdWRHbGhiQ0JwZEdWeVlYUmxaU0J2WW1wbFkzUWdZWEpuZFcxbGJuUXVYRzRnS2lCQWNtVjBkWEp1Y3lCN1ltOXZiR1ZoYm4wZ1VtVjBkWEp1Y3lCZ2RISjFaV0FnYVdZZ2RHaGxJR0Z5WjNWdFpXNTBjeUJoY21VZ1puSnZiU0JoYmlCcGRHVnlZWFJsWlNCallXeHNMRnh1SUNvZ0lHVnNjMlVnWUdaaGJITmxZQzVjYmlBcUwxeHVablZ1WTNScGIyNGdhWE5KZEdWeVlYUmxaVU5oYkd3b2RtRnNkV1VzSUdsdVpHVjRMQ0J2WW1wbFkzUXBJSHRjYmlBZ2FXWWdLQ0ZwYzA5aWFtVmpkQ2h2WW1wbFkzUXBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQjlYRzRnSUhaaGNpQjBlWEJsSUQwZ2RIbHdaVzltSUdsdVpHVjRPMXh1SUNCcFppQW9kSGx3WlNBOVBTQW5iblZ0WW1WeUoxeHVJQ0FnSUNBZ0lDQS9JQ2hwYzBGeWNtRjVUR2xyWlNodlltcGxZM1FwSUNZbUlHbHpTVzVrWlhnb2FXNWtaWGdzSUc5aWFtVmpkQzVzWlc1bmRHZ3BLVnh1SUNBZ0lDQWdJQ0E2SUNoMGVYQmxJRDA5SUNkemRISnBibWNuSUNZbUlHbHVaR1Y0SUdsdUlHOWlhbVZqZENsY2JpQWdJQ0FnSUNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJsY1NodlltcGxZM1JiYVc1a1pYaGRMQ0IyWVd4MVpTazdYRzRnSUgxY2JpQWdjbVYwZFhKdUlHWmhiSE5sTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR2x6U1hSbGNtRjBaV1ZEWVd4c08xeHVJaXdpZG1GeUlHSmhjMlZTWlhOMElEMGdjbVZ4ZFdseVpTZ25MaTlmWW1GelpWSmxjM1FuS1N4Y2JpQWdJQ0JwYzBsMFpYSmhkR1ZsUTJGc2JDQTlJSEpsY1hWcGNtVW9KeTR2WDJselNYUmxjbUYwWldWRFlXeHNKeWs3WEc1Y2JpOHFLbHh1SUNvZ1EzSmxZWFJsY3lCaElHWjFibU4wYVc5dUlHeHBhMlVnWUY4dVlYTnphV2R1WUM1Y2JpQXFYRzRnS2lCQWNISnBkbUYwWlZ4dUlDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdZWE56YVdkdVpYSWdWR2hsSUdaMWJtTjBhVzl1SUhSdklHRnpjMmxuYmlCMllXeDFaWE11WEc0Z0tpQkFjbVYwZFhKdWN5QjdSblZ1WTNScGIyNTlJRkpsZEhWeWJuTWdkR2hsSUc1bGR5QmhjM05wWjI1bGNpQm1kVzVqZEdsdmJpNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1kzSmxZWFJsUVhOemFXZHVaWElvWVhOemFXZHVaWElwSUh0Y2JpQWdjbVYwZFhKdUlHSmhjMlZTWlhOMEtHWjFibU4wYVc5dUtHOWlhbVZqZEN3Z2MyOTFjbU5sY3lrZ2UxeHVJQ0FnSUhaaGNpQnBibVJsZUNBOUlDMHhMRnh1SUNBZ0lDQWdJQ0JzWlc1bmRHZ2dQU0J6YjNWeVkyVnpMbXhsYm1kMGFDeGNiaUFnSUNBZ0lDQWdZM1Z6ZEc5dGFYcGxjaUE5SUd4bGJtZDBhQ0ErSURFZ1B5QnpiM1Z5WTJWelcyeGxibWQwYUNBdElERmRJRG9nZFc1a1pXWnBibVZrTEZ4dUlDQWdJQ0FnSUNCbmRXRnlaQ0E5SUd4bGJtZDBhQ0ErSURJZ1B5QnpiM1Z5WTJWeld6SmRJRG9nZFc1a1pXWnBibVZrTzF4dVhHNGdJQ0FnWTNWemRHOXRhWHBsY2lBOUlDaGhjM05wWjI1bGNpNXNaVzVuZEdnZ1BpQXpJQ1ltSUhSNWNHVnZaaUJqZFhOMGIyMXBlbVZ5SUQwOUlDZG1kVzVqZEdsdmJpY3BYRzRnSUNBZ0lDQS9JQ2hzWlc1bmRHZ3RMU3dnWTNWemRHOXRhWHBsY2lsY2JpQWdJQ0FnSURvZ2RXNWtaV1pwYm1Wa08xeHVYRzRnSUNBZ2FXWWdLR2QxWVhKa0lDWW1JR2x6U1hSbGNtRjBaV1ZEWVd4c0tITnZkWEpqWlhOYk1GMHNJSE52ZFhKalpYTmJNVjBzSUdkMVlYSmtLU2tnZTF4dUlDQWdJQ0FnWTNWemRHOXRhWHBsY2lBOUlHeGxibWQwYUNBOElETWdQeUIxYm1SbFptbHVaV1FnT2lCamRYTjBiMjFwZW1WeU8xeHVJQ0FnSUNBZ2JHVnVaM1JvSUQwZ01UdGNiaUFnSUNCOVhHNGdJQ0FnYjJKcVpXTjBJRDBnVDJKcVpXTjBLRzlpYW1WamRDazdYRzRnSUNBZ2QyaHBiR1VnS0NzcmFXNWtaWGdnUENCc1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUhaaGNpQnpiM1Z5WTJVZ1BTQnpiM1Z5WTJWelcybHVaR1Y0WFR0Y2JpQWdJQ0FnSUdsbUlDaHpiM1Z5WTJVcElIdGNiaUFnSUNBZ0lDQWdZWE56YVdkdVpYSW9iMkpxWldOMExDQnpiM1Z5WTJVc0lHbHVaR1Y0TENCamRYTjBiMjFwZW1WeUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRzlpYW1WamREdGNiaUFnZlNrN1hHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWTNKbFlYUmxRWE56YVdkdVpYSTdYRzRpTENKMllYSWdZbUZ6WlUxbGNtZGxJRDBnY21WeGRXbHlaU2duTGk5ZlltRnpaVTFsY21kbEp5a3NYRzRnSUNBZ1kzSmxZWFJsUVhOemFXZHVaWElnUFNCeVpYRjFhWEpsS0NjdUwxOWpjbVZoZEdWQmMzTnBaMjVsY2ljcE8xeHVYRzR2S2lwY2JpQXFJRlJvYVhNZ2JXVjBhRzlrSUdseklHeHBhMlVnWUY4dVlYTnphV2R1WUNCbGVHTmxjSFFnZEdoaGRDQnBkQ0J5WldOMWNuTnBkbVZzZVNCdFpYSm5aWE1nYjNkdUlHRnVaRnh1SUNvZ2FXNW9aWEpwZEdWa0lHVnVkVzFsY21GaWJHVWdjM1J5YVc1bklHdGxlV1ZrSUhCeWIzQmxjblJwWlhNZ2IyWWdjMjkxY21ObElHOWlhbVZqZEhNZ2FXNTBieUIwYUdWY2JpQXFJR1JsYzNScGJtRjBhVzl1SUc5aWFtVmpkQzRnVTI5MWNtTmxJSEJ5YjNCbGNuUnBaWE1nZEdoaGRDQnlaWE52YkhabElIUnZJR0IxYm1SbFptbHVaV1JnSUdGeVpWeHVJQ29nYzJ0cGNIQmxaQ0JwWmlCaElHUmxjM1JwYm1GMGFXOXVJSFpoYkhWbElHVjRhWE4wY3k0Z1FYSnlZWGtnWVc1a0lIQnNZV2x1SUc5aWFtVmpkQ0J3Y205d1pYSjBhV1Z6WEc0Z0tpQmhjbVVnYldWeVoyVmtJSEpsWTNWeWMybDJaV3g1TGlCUGRHaGxjaUJ2WW1wbFkzUnpJR0Z1WkNCMllXeDFaU0IwZVhCbGN5QmhjbVVnYjNabGNuSnBaR1JsYmlCaWVWeHVJQ29nWVhOemFXZHViV1Z1ZEM0Z1UyOTFjbU5sSUc5aWFtVmpkSE1nWVhKbElHRndjR3hwWldRZ1puSnZiU0JzWldaMElIUnZJSEpwWjJoMExpQlRkV0p6WlhGMVpXNTBYRzRnS2lCemIzVnlZMlZ6SUc5MlpYSjNjbWwwWlNCd2NtOXdaWEowZVNCaGMzTnBaMjV0Wlc1MGN5QnZaaUJ3Y21WMmFXOTFjeUJ6YjNWeVkyVnpMbHh1SUNwY2JpQXFJQ29xVG05MFpUb3FLaUJVYUdseklHMWxkR2h2WkNCdGRYUmhkR1Z6SUdCdlltcGxZM1JnTGx4dUlDcGNiaUFxSUVCemRHRjBhV05jYmlBcUlFQnRaVzFpWlhKUFppQmZYRzRnS2lCQWMybHVZMlVnTUM0MUxqQmNiaUFxSUVCallYUmxaMjl5ZVNCUFltcGxZM1JjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCdlltcGxZM1FnVkdobElHUmxjM1JwYm1GMGFXOXVJRzlpYW1WamRDNWNiaUFxSUVCd1lYSmhiU0I3TGk0dVQySnFaV04wZlNCYmMyOTFjbU5sYzEwZ1ZHaGxJSE52ZFhKalpTQnZZbXBsWTNSekxseHVJQ29nUUhKbGRIVnlibk1nZTA5aWFtVmpkSDBnVW1WMGRYSnVjeUJnYjJKcVpXTjBZQzVjYmlBcUlFQmxlR0Z0Y0d4bFhHNGdLbHh1SUNvZ2RtRnlJRzlpYW1WamRDQTlJSHRjYmlBcUlDQWdKMkVuT2lCYmV5QW5ZaWM2SURJZ2ZTd2dleUFuWkNjNklEUWdmVjFjYmlBcUlIMDdYRzRnS2x4dUlDb2dkbUZ5SUc5MGFHVnlJRDBnZTF4dUlDb2dJQ0FuWVNjNklGdDdJQ2RqSnpvZ015QjlMQ0I3SUNkbEp6b2dOU0I5WFZ4dUlDb2dmVHRjYmlBcVhHNGdLaUJmTG0xbGNtZGxLRzlpYW1WamRDd2diM1JvWlhJcE8xeHVJQ29nTHk4Z1BUNGdleUFuWVNjNklGdDdJQ2RpSnpvZ01pd2dKMk1uT2lBeklIMHNJSHNnSjJRbk9pQTBMQ0FuWlNjNklEVWdmVjBnZlZ4dUlDb3ZYRzUyWVhJZ2JXVnlaMlVnUFNCamNtVmhkR1ZCYzNOcFoyNWxjaWhtZFc1amRHbHZiaWh2WW1wbFkzUXNJSE52ZFhKalpTd2djM0pqU1c1a1pYZ3BJSHRjYmlBZ1ltRnpaVTFsY21kbEtHOWlhbVZqZEN3Z2MyOTFjbU5sTENCemNtTkpibVJsZUNrN1hHNTlLVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCdFpYSm5aVHRjYmlJc0lpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElESXdNakVnUVdSdlltVmNiaUFxSUVGc2JDQlNhV2RvZEhNZ1VtVnpaWEoyWldRdVhHNGdLbHh1SUNvZ1RrOVVTVU5GT2lCQlpHOWlaU0J3WlhKdGFYUnpJSGx2ZFNCMGJ5QjFjMlVzSUcxdlpHbG1lU3dnWVc1a0lHUnBjM1J5YVdKMWRHVWdkR2hwY3lCbWFXeGxJR2x1WEc0Z0tpQmhZMk52Y21SaGJtTmxJSGRwZEdnZ2RHaGxJSFJsY20xeklHOW1JSFJvWlNCQlpHOWlaU0JzYVdObGJuTmxJR0ZuY21WbGJXVnVkQ0JoWTJOdmJYQmhibmxwYm1kY2JpQXFJR2wwTGx4dUlDb3ZYRzVjYm1sdGNHOXlkQ0JrWldKMVp5Qm1jbTl0SUNka1pXSjFaeWM3WEc1cGJYQnZjblFnZXlCSmJuWmhiR2xrU1c1d2RYUkZjbkp2Y2lCOUlHWnliMjBnSnk0dlpYSnliM0luTzF4dWFXMXdiM0owSUhzZ1UyUnJWMjl5YTJWeVVHOXZiQ0I5SUdaeWIyMGdKeTR2Y0c5dmJGZHlZWEJ3WlhJbk8xeHVYRzVqYjI1emRDQmtZbWNnUFNCa1pXSjFaeWduWXpKd1lUcFdZV3hwWkdGMGIzSW5LVHRjYmx4dUx5b3FYRzRnS2lCSVlXNWtiR1Z6SUhaaGJHbGtZWFJwYjI0Z2IyWWdhVzV3ZFhRZ1ltVm1iM0psSUhCeWIyTmxjM05wYm1jZ2FYUWdabTl5SUVNeVVFRWdiV1YwWVdSaGRHRmNiaUFxWEc0Z0tpQkFjSFZpYkdsalhHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5QldZV3hwWkdGMGIzSWdlMXh1SUNCemRHRjBhV01nY21WaFpHOXViSGtnVmtGTVNVUmZUVWxOUlY5VVdWQkZVeUE5SUZ0Y2JpQWdJQ0FuYVcxaFoyVXZhbkJsWnljc1hHNGdJQ0FnSjJsdFlXZGxMM0J1Wnljc1hHNGdJQ0FnSjJsdFlXZGxMM2RsWW5BbkxGeHVJQ0FnSUNkcGJXRm5aUzl6ZG1jcmVHMXNKeXhjYmlBZ0lDQW5kbWxrWlc4dmJYQTBKeXhjYmlBZ0lDQW5ZWEJ3YkdsallYUnBiMjR2ZUMxak1uQmhMVzFoYm1sbVpYTjBMWE4wYjNKbEp5eGNiaUFnWFR0Y2JseHVJQ0J6ZEdGMGFXTWdjbVZoWkc5dWJIa2dSRVZHUVZWTVZGOUVSVlJGUTFSSlQwNWZURVZPUjFSSUlEMGdOalUxTXpVN1hHNWNiaUFnSTNCdmIydzZJRk5rYTFkdmNtdGxjbEJ2YjJ3N1hHNWNiaUFnY21WaFpHOXViSGtnSTJSbGRHVmpkR2x2Ymt4bGJtZDBhRG9nYm5WdFltVnlPMXh1WEc0Z0lHTnZibk4wY25WamRHOXlLSEJ2YjJ3NklGTmthMWR2Y210bGNsQnZiMndzSUdSbGRHVmpkR2x2Ymt4bGJtZDBhRG9nYm5WdFltVnlJSHdnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnZEdocGN5NGpjRzl2YkNBOUlIQnZiMnc3WEc0Z0lDQWdkR2hwY3k0alpHVjBaV04wYVc5dVRHVnVaM1JvSUQxY2JpQWdJQ0FnSUdSbGRHVmpkR2x2Ymt4bGJtZDBhQ0EvUHlCV1lXeHBaR0YwYjNJdVJFVkdRVlZNVkY5RVJWUkZRMVJKVDA1ZlRFVk9SMVJJTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGTmhibWwwYVhwbGN5QnRhVzFsSUhSNWNHVWdjM1J5YVc1bmN5Qm1iM0lnY0hKdmNHVnlJR1pwYkdVZ2RIbHdaU0JqYUdWamEybHVaMXh1SUNBZ0tseHVJQ0FnS2lCQWNtVnRZWEpyYzF4dUlDQWdLaUJYWlNCdVpXVmtJSFJ2SUdSdklIUm9hWE1nYzJsdVkyVWdjMjl0WlNCRGIyNTBaVzUwTFZSNWNHVnpJR05oYmlCamIyMXBibWNnYVc0Z2MzVmphQ0JoY3lCZ2FXMWhaMlV2YW5CbFp6c2dZMmhoY25ObGREMTFkR1l0T0dBdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjBlWEJsSUMwZ1ZHaGxJRzFwYldVZ2RIbHdaU0J2WmlCMGFHVWdZWE56WlhSY2JpQWdJQ292WEc0Z0lITjBZWFJwWXlCellXNXBkR2w2WlUxcGJXVlVlWEJsS0hSNWNHVTZJSE4wY21sdVp5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGVYQmxMbk53YkdsMEtDYzdKeWxiTUYwN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRMmhsWTJ0eklHbG1JSFJvWlNCaGMzTmxkQ0JvWVhNZ1lTQnRhVzFsSUhSNWNHVWdkR2hoZENCcGN5QmpiMjF3WVhScFlteGxJSGRwZEdnZ1F6SlFRVnh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZEhsd1pTQXRJRlJvWlNCdGFXMWxJSFI1Y0dVZ2IyWWdkR2hsSUdGemMyVjBJSFJ2SUdOb1pXTnJYRzRnSUNBcUwxeHVJQ0J6ZEdGMGFXTWdhWE5XWVd4cFpFMXBiV1ZVZVhCbEtIUjVjR1U2SUhOMGNtbHVaeWtnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGxaQlRFbEVYMDFKVFVWZlZGbFFSVk11YVc1amJIVmtaWE1vZEdocGN5NXpZVzVwZEdsNlpVMXBiV1ZVZVhCbEtIUjVjR1VwS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlRZMkZ1Y3lCaGJpQnBibVJwZG1sa2RXRnNJR0pwYm1GeWVTQmphSFZ1YXlCbWIzSWdZU0JETWxCQklHMWxkR0ZrWVhSaElHMWhjbXRsY2x4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ1kyaDFibXNnTFNCMGFHVWdZMmgxYm1zZ2RHOGdZMmhsWTJzZ1ptOXlJSFJvWlNCdFpYUmhaR0YwWVNCdFlYSnJaWEpjYmlBZ0lDb3ZYRzRnSUdGemVXNWpJSE5qWVc1RGFIVnVheWhqYUhWdWF6b2dRWEp5WVhsQ2RXWm1aWElwSUh0Y2JpQWdJQ0JrWW1jb0oxTmpZVzV1YVc1bklHSjFabVpsY2lCbWIzSWdRekpRUVNCdFlYSnJaWElnZDJsMGFDQnNaVzVuZEdnZ0pXUW5MQ0JqYUhWdWF5NWllWFJsVEdWdVozUm9LVHRjYmlBZ0lDQXZMeUJVVDBSUE9pQkJaR1FnYzNWd2NHOXlkQ0JtYjNJZ2RISmhibk5tWlhKaFlteGxJRzlpYW1WamRITmNiaUFnSUNCamIyNXpkQ0J5WlhOMWJIUWdQU0JoZDJGcGRDQjBhR2x6TGlOd2IyOXNMbk5qWVc1SmJuQjFkQ2hqYUhWdWF5azdYRzRnSUNBZ1pHSm5LQ2RUWTJGdWJtVmtJR0oxWm1abGNpQmhibVFnWjI5MElISmxjM1ZzZENjc0lISmxjM1ZzZENrN1hHNGdJQ0FnY21WMGRYSnVJSEpsYzNWc2REdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJUWTJGdWN5QmhJR0oxWm1abGNpOUNiRzlpSUdadmNpQmhJRU15VUVFZ2JXVjBZV1JoZEdFZ2JXRnlhMlZ5WEc0Z0lDQXFYRzRnSUNBcUlFQnlaVzFoY210elhHNGdJQ0FxSUZSb2FYTWdkMmxzYkNCaGRYUnZiV0YwYVdOaGJHeDVJR2hoYm1Sc1pTQmliM1JvSUdFZ1lFRnljbUY1UW5WbVptVnlZQ0J2Y2lCaElHQkNiRzlpWUNCaGN5QnBibkIxZEZ4dUlDQWdLaUJoYm1RZ1lYVjBiMjFoZEdsallXeHNlU0JrWldOcFpHVWdhV1lnYVhRZ2MyaHZkV3hrSUdKbElIQmhjM05sWkNCaGN5QmhJSFJ5WVc1elptVnlZV0pzWlNCdlltcGxZM1FnYjNJZ2JtOTBMbHh1SUNBZ0tpQkpkQ0IzYVd4c0lIUm9aVzRnY0dGemN5QnBkQ0IwYnlCZ2MyTmhia05vZFc1cllDQm1iM0lnZEdobElHRmpkSFZoYkNCd2NtOWpaWE56YVc1bkxseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdhVzV3ZFhRZ0xTQlVhR1VnWW5WbVptVnlMMkpzYjJJZ2RHOGdjMk5oYmx4dUlDQWdLaTljYmlBZ1lYTjVibU1nYzJOaGJrbHVjSFYwS0dsdWNIVjBPaUJCY25KaGVVSjFabVpsY2lCOElFSnNiMklwSUh0Y2JpQWdJQ0JzWlhRZ1luVm1abVZ5T2lCQmNuSmhlVUoxWm1abGNpQjhJRzUxYkd3Z1BTQnVkV3hzTzF4dVhHNGdJQ0FnYVdZZ0tHbHVjSFYwSUdsdWMzUmhibU5sYjJZZ1FYSnlZWGxDZFdabVpYSXBJSHRjYmlBZ0lDQWdJR0oxWm1abGNpQTlJR2x1Y0hWME8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FXNXdkWFFnYVc1emRHRnVZMlZ2WmlCQ2JHOWlLU0I3WEc0Z0lDQWdJQ0F2THlCUGJteDVJSE5sYm1RZ2RHaHBjeUJoY3lCaElIUnlZVzV6Wm1WeVlXSnNaU0J2WW1wbFkzUWdhV1lnZDJVZ1lYSmxJR1Y0ZEhKaFkzUnBibWNnWVc0Z1lYSnlZWGxjYmlBZ0lDQWdJQzh2SUdKMVptWmxjaUJtY205dElHRWdZbXh2WWl3Z2MybHVZMlVnZDJVZ2QyOXVKM1FnWW1VZ2NtVXRkWE5wYm1jZ2RHaHBjeUJpZFdabVpYSWdZVzU1ZDJobGNtVWdaV3h6WlZ4dUlDQWdJQ0FnWTI5dWMzUWdablZzYkVKMVptWmxjaUE5SUdGM1lXbDBJR2x1Y0hWMExtRnljbUY1UW5WbVptVnlLQ2s3WEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeTRqWkdWMFpXTjBhVzl1VEdWdVozUm9JRDRnTUNrZ2UxeHVJQ0FnSUNBZ0lDQmlkV1ptWlhJZ1BTQm1kV3hzUW5WbVptVnlMbk5zYVdObEtEQXNJSFJvYVhNdUkyUmxkR1ZqZEdsdmJreGxibWQwYUNrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCaWRXWm1aWElnUFNCbWRXeHNRblZtWm1WeU8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDZ2hZblZtWm1WeUtTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dTVzUyWVd4cFpFbHVjSFYwUlhKeWIzSW9LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV6WTJGdVEyaDFibXNvWW5WbVptVnlLVHRjYmlBZ2ZWeHVmVnh1SWl3aUx5b3FYRzRnS2lCRGIzQjVjbWxuYUhRZ01qQXlNU0JCWkc5aVpWeHVJQ29nUVd4c0lGSnBaMmgwY3lCU1pYTmxjblpsWkM1Y2JpQXFYRzRnS2lCT1QxUkpRMFU2SUVGa2IySmxJSEJsY20xcGRITWdlVzkxSUhSdklIVnpaU3dnYlc5a2FXWjVMQ0JoYm1RZ1pHbHpkSEpwWW5WMFpTQjBhR2x6SUdacGJHVWdhVzVjYmlBcUlHRmpZMjl5WkdGdVkyVWdkMmwwYUNCMGFHVWdkR1Z5YlhNZ2IyWWdkR2hsSUVGa2IySmxJR3hwWTJWdWMyVWdZV2R5WldWdFpXNTBJR0ZqWTI5dGNHRnVlV2x1WjF4dUlDb2dhWFF1WEc0Z0tpOWNibHh1YVcxd2IzSjBJR1JsWW5WbklHWnliMjBnSjJSbFluVm5KenRjYm1sdGNHOXlkQ0J0WlhKblpTQm1jbTl0SUNkc2IyUmhjMmd2YldWeVoyVW5PMXh1YVcxd2IzSjBJSHNnU1c1MllXeHBaRTFwYldWVWVYQmxSWEp5YjNJc0lGVnliRVpsZEdOb1JYSnliM0lnZlNCbWNtOXRJQ2N1TDJWeWNtOXlKenRjYm1sdGNHOXlkQ0I3SUZOa2ExZHZjbXRsY2xCdmIyd2dmU0JtY205dElDY3VMM0J2YjJ4WGNtRndjR1Z5Snp0Y2JtbHRjRzl5ZENCN0lGWmhiR2xrWVhSdmNpQjlJR1p5YjIwZ0p5NHZkbUZzYVdSaGRHOXlKenRjYmx4dVkyOXVjM1FnWkdKbklEMGdaR1ZpZFdjb0oyTXljR0U2Ukc5M2JteHZZV1JsY2ljcE8xeHVZMjl1YzNRZ1kyRmphR1ZFWW1jZ1BTQmtaV0oxWnlnbll6SndZVHBFYjNkdWJHOWhaR1Z5T2tOaFkyaGxKeWs3WEc1Y2JtVjRjRzl5ZENCcGJuUmxjbVpoWTJVZ1JHOTNibXh2WVdSbGNrOXdkR2x2Ym5NZ2UxeHVJQ0F2S2lwY2JpQWdJQ29nVkdobElHNTFiV0psY2lCdlppQmllWFJsY3lCaGRDQjBhR1VnYzNSaGNuUWdiMllnZEdobElHbHRZV2RsSUhSdklHTm9aV05ySUdadmNpQkRNbEJCSUcxbGRHRmtZWFJoWEc0Z0lDQXFJR0psWm05eVpTQmtiM2R1Ykc5aFpHbHVaeUIwYUdVZ2QyaHZiR1VnYVcxaFoyVWdLR1JsWm1GMWJIUnpJSFJ2SURZMGF5bGNiaUFnSUNvdlhHNGdJR2x1YzNCbFkzUlRhWHBsT2lCdWRXMWlaWEk3WEc1OVhHNWNibVY0Y0c5eWRDQnBiblJsY21aaFkyVWdTVVpsZEdOb1QzQjBhVzl1Y3lCN1hHNGdJQzhxS2x4dUlDQWdLaUJVYUdVZ2NtRnVaMlVnWW5sMFpTQjBieUJ6ZEdGeWRDQm1jbTl0SUNoa1pXWmhkV3gwY3lCMGJ5QXdLVnh1SUNBZ0tpOWNiaUFnY21GdVoyVlRkR0Z5ZERvZ2JuVnRZbVZ5TzF4dUlDQXZLaXBjYmlBZ0lDb2dWR2hsSUhKaGJtZGxJR0o1ZEdVZ2RHOGdaVzVrSUdGMElDaGtaV1poZFd4MGN5QjBieUJsYm1RZ2IyWWdZMjl1ZEdWdWRDbGNiaUFnSUNvdlhHNGdJSEpoYm1kbFJXNWtPaUJ1ZFcxaVpYSWdmQ0IxYm1SbFptbHVaV1E3WEc0Z0lDOHFLbHh1SUNBZ0tpQlBjSFJwYjI1eklIQmhjM05sWkNCMGJ5QjBhR1VnWW5KdmQzTmxjaWR6SUdCbVpYUmphR0FnYldWMGFHOWtYRzRnSUNBcUwxeHVJQ0JtWlhSamFFTnZibVpwWnpvZ1VtVnhkV1Z6ZEVsdWFYUTdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1NHRnVaR3hsY3lCa2IzZHViRzloWkdsdVp5QnZaaUJoYm5rZ1lYTnpaWFJ6WEc0Z0tseHVJQ29nUUhCMVlteHBZMXh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nUkc5M2JteHZZV1JsY2lCN1hHNGdJQ052Y0hScGIyNXpPaUJFYjNkdWJHOWhaR1Z5VDNCMGFXOXVjenRjYmx4dUlDQWpjRzl2YkRvZ1UyUnJWMjl5YTJWeVVHOXZiRHRjYmx4dUlDQWpkbUZzYVdSaGRHOXlPaUJXWVd4cFpHRjBiM0k3WEc1Y2JpQWdjM1JoZEdsaklDTnlaWE53YjI1elpVTmhZMmhsSUQwZ2JtVjNJRTFoY0R4emRISnBibWNzSUdGdWVUNG9LVHRjYmx4dUlDQnpkR0YwYVdNZ0kyUmxabUYxYkhSUGNIUnBiMjV6T2lCRWIzZHViRzloWkdWeVQzQjBhVzl1Y3lBOUlIdGNiaUFnSUNCcGJuTndaV04wVTJsNlpUb2dNQ3hjYmlBZ2ZUdGNibHh1SUNCemRHRjBhV01nSTJSbFptRjFiSFJHWlhSamFFOXdkR2x2Ym5NNklFbEdaWFJqYUU5d2RHbHZibk1nUFNCN1hHNGdJQ0FnY21GdVoyVlRkR0Z5ZERvZ01DeGNiaUFnSUNCeVlXNW5aVVZ1WkRvZ2RXNWtaV1pwYm1Wa0xGeHVJQ0FnSUdabGRHTm9RMjl1Wm1sbk9pQjdmU3hjYmlBZ2ZUdGNibHh1SUNCamIyNXpkSEoxWTNSdmNpaHdiMjlzT2lCVFpHdFhiM0pyWlhKUWIyOXNMQ0J2Y0hSek9pQlFZWEowYVdGc1BFUnZkMjVzYjJGa1pYSlBjSFJwYjI1elBpQTlJSHQ5S1NCN1hHNGdJQ0FnZEdocGN5NGpiM0IwYVc5dWN5QTlJSHNnTGk0dVJHOTNibXh2WVdSbGNpNGpaR1ZtWVhWc2RFOXdkR2x2Ym5Nc0lDNHVMbTl3ZEhNZ2ZUdGNiaUFnSUNCMGFHbHpMaU53YjI5c0lEMGdjRzl2YkR0Y2JpQWdJQ0IwYUdsekxpTjJZV3hwWkdGMGIzSWdQU0J1WlhjZ1ZtRnNhV1JoZEc5eUtIUm9hWE11STNCdmIyd3NJSFJvYVhNdUkyOXdkR2x2Ym5NdWFXNXpjR1ZqZEZOcGVtVXBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZkeVlYQndaWElnWVhKdmRXNWtJR0JtWlhSamFHQWdkRzhnWkc5M2JteHZZV1FnWVc0Z1lYTnpaWFJjYmlBZ0lDcGNiaUFnSUNvZ1FISmxiV0Z5YTNOY2JpQWdJQ29nVkdocGN5Qm9ZWE1nWTI5dWRtVnVhV1Z1WTJVZ2JHOW5hV01nWm05eUlISmhibWRsSUhKbGNYVmxjM1J6WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCMWNtd2dMU0JVYUdVZ1ZWSk1JSFJ2SUdabGRHTm9YRzRnSUNBcUlFQndZWEpoYlNCbVpYUmphRTl3ZEdsdmJuTWdMU0JQY0hScGIyNXpJR1p2Y2lCMGFHbHpJSEJoY25ScFkzVnNZWElnY21WeGRXVnpkRnh1SUNBZ0tpOWNiaUFnYzNSaGRHbGpJR0Z6ZVc1aklHUnZkMjVzYjJGa0tGeHVJQ0FnSUhWeWJEb2djM1J5YVc1bkxGeHVJQ0FnSUdabGRHTm9UM0IwYVc5dWN6b2dVR0Z5ZEdsaGJEeEpSbVYwWTJoUGNIUnBiMjV6UGlBOUlIdDlMRnh1SUNBcE9pQlFjbTl0YVhObFBGSmxjM0J2Ym5ObFBpQjdYRzRnSUNBZ1pHSm5LQ2RFYjNkdWJHOWhaR2x1Wnljc0lIVnliQ2s3WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUdOdmJuTjBJR1JsWm1GMWJIUlBjSFJ6SUQwZ1JHOTNibXh2WVdSbGNpNGpaR1ZtWVhWc2RFWmxkR05vVDNCMGFXOXVjenRjYmlBZ0lDQWdJR052Ym5OMElHOXdkSE1nUFNCdFpYSm5aU2g3ZlN3Z1pHVm1ZWFZzZEU5d2RITXNJR1psZEdOb1QzQjBhVzl1Y3lrN1hHNGdJQ0FnSUNBdkx5QlBibXg1SUhWelpTQnlZVzVuWlNCcFppQnBkQ0JwY3lCemNHVmphV1pwWldRdUlFbG1JRzV2ZEN3Z2FYUWdiV0Y1SUd4bFlXUWdkRzhnUTA5U1V5QnBjM04xWlhNZ1pIVmxJSFJ2SUc1dmRDQmlaV2x1WnlCM2FHbDBaV3hwYzNSbFpGeHVJQ0FnSUNBZ1kyOXVjM1FnZFhObFVtRnVaMlVnUFZ4dUlDQWdJQ0FnSUNCdmNIUnpMbkpoYm1kbFUzUmhjblFnSVQwOUlHUmxabUYxYkhSUGNIUnpMbkpoYm1kbFUzUmhjblFnZkh4Y2JpQWdJQ0FnSUNBZ2IzQjBjeTV5WVc1blpVVnVaQ0FoUFQwZ1pHVm1ZWFZzZEU5d2RITXVjbUZ1WjJWRmJtUTdYRzRnSUNBZ0lDQmpiMjV6ZENCeVlXNW5aU0E5SUZ0dmNIUnpMbkpoYm1kbFUzUmhjblFzSUc5d2RITXVjbUZ1WjJWRmJtUWdQejhnSnlkZExtcHZhVzRvSnkwbktUdGNiaUFnSUNBZ0lHTnZibk4wSUhKaGJtZGxTR1ZoWkdWeWN5QTlJSFZ6WlZKaGJtZGxYRzRnSUNBZ0lDQWdJRDhnZXlCb1pXRmtaWEp6T2lCN0lISmhibWRsT2lCZ1lubDBaWE05Skh0eVlXNW5aWDFnSUgwZ2ZWeHVJQ0FnSUNBZ0lDQTZJRzUxYkd3N1hHNGdJQ0FnSUNCamIyNXpkQ0J5WlhNZ1BTQmhkMkZwZENCbVpYUmphQ2gxY213c0lHMWxjbWRsS0h0OUxDQnZjSFJ6TG1abGRHTm9RMjl1Wm1sbkxDQnlZVzVuWlVobFlXUmxjbk1wS1R0Y2JpQWdJQ0FnSUdsbUlDaHlaWE11YjJzcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISmxjenRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJWY214R1pYUmphRVZ5Y205eUtIVnliQ3dnY21WektUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUlHTmhkR05vSUNobGNuSXBJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJWY214R1pYUmphRVZ5Y205eUtIVnliQ3dnYm5Wc2JDd2dleUJqWVhWelpUb2daWEp5SUdGeklGUjVjR1ZGY25KdmNpQjlLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVkdocGN5QmhiR3h2ZDNNZ2RYTWdkRzhnYVc1emNHVmpkQ0IwYUdVZ2FXMWhaMlVnZEc4Z2MyVmxJR2xtSUhSb1pTQm9aV0ZrWlhJZ1kyOXVkR0ZwYm5NZ1F6SlFRU0JrWVhSaFhHNGdJQ0FxWEc0Z0lDQXFJRUJ5WlcxaGNtdHpYRzRnSUNBcUlGZGxJSGRwYkd3Z2NtVnhkV1Z6ZENCaElHUnZkMjVzYjJGa0lIUnZJSFJvWlNCelpYSjJaWElnY21WeGRXVnpkR2x1WnlCMGFHVWdabWx5YzNRZ1lHbHVjM0JsWTNSVGFYcGxZQ0JpZVhSbGN5NGdSbkp2YlNCMGFHVnlaVHBjYmlBZ0lDb2dMU0JwWmlCMGFHVWdjMlZ5ZG1WeUlISmxjM0J2Ym1SeklIZHBkR2dnWVNCd1lYbHNiMkZrSUd4bGMzTWdkR2hoYmlCMGFHVWdZMjl1ZEdWdWRDMXNaVzVuZEdnc0lIZGxJSGRwYkd3Z2FXNXpjR1ZqZENCMGFHRjBJR05vZFc1cklHRnVaRnh1SUNBZ0tpQWdJR1J2ZDI1c2IyRmtJSFJvWlNCeVpYTjBJR2xtSUhSb1pTQmpiMjUwWlc1MExYUjVjR1VnYldGMFkyaGxjeUJoYm1RZ2RHaGhkQ0JqYUhWdWF5QmpiMjUwWVdsdWN5QnRaWFJoWkdGMFlWeHVJQ0FnS2lBdElHbG1JR2wwSUhKbGMzQnZibVJ6SUhkcGRHZ2dZU0J3WVhsc2IyRmtJR1Z4ZFdGc0lIUnZJRzl5SUdkeVpXRjBaWElnZEdoaGJpQjBhR1VnWTI5dWRHVnVkQzFzWlc1bmRHZ3NJSGRsSUhkcGJHd2dhVzV6Y0dWamRDQjBhR0YwSUhSb1pWeHVJQ0FnS2lBZ0lHTnZiblJsYm5RZ2RIbHdaU0J0WVhSamFHVnpMQ0J6WTJGdUlIUm9aU0JqYUhWdWF5d2dZVzVrSUhKbGRIVnliaUIwYUdVZ1pHRjBZVnh1SUNBZ0tpQXRJSGRsSjJ4c0lISmxkSFZ5YmlCZ2JuVnNiR0FnYVdZZ2RHaGxJR052Ym5SbGJuUXRkSGx3WlNCcGN5QnBiblpoYkdsa0lHOXlJR2xtSUVOQlNTQmtZWFJoSUdSdlpYTWdibTkwSUdWNGFYTjBYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0IxY213Z0xTQlVhR1VnVlZKTUlIUnZJR1psZEdOb1hHNGdJQ0FxTDF4dUlDQmhjM2x1WXlCcGJuTndaV04wS0hWeWJEb2djM1J5YVc1bktUb2dVSEp2YldselpUeENiRzlpSUh3Z2JuVnNiRDRnZTF4dUlDQWdJR1JpWnlnblNXNXpjR1ZqZEdsdVp5Y3NJSFZ5YkNrN1hHNGdJQ0FnYkdWMElISmxjem9nVW1WemNHOXVjMlVnZkNCMWJtUmxabWx1WldRN1hHNGdJQ0FnYkdWMElHTnZiblJsYm5SVWVYQmxPaUJ6ZEhKcGJtY2dmQ0J1ZFd4c0lEMGdiblZzYkR0Y2JpQWdJQ0JqYjI1emRDQnphRzkxYkdSSmJuTndaV04wSUQwZ2RHaHBjeTRqYjNCMGFXOXVjeTVwYm5Od1pXTjBVMmw2WlNBK0lEQTdYRzVjYmlBZ0lDQnBaaUFvYzJodmRXeGtTVzV6Y0dWamRDa2dlMXh1SUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ2NtVnpJRDBnWVhkaGFYUWdSRzkzYm14dllXUmxjaTVrYjNkdWJHOWhaQ2gxY213c0lIdGNiaUFnSUNBZ0lDQWdJQ0J5WVc1blpVVnVaRG9nZEdocGN5NGpiM0IwYVc5dWN5NXBibk53WldOMFUybDZaU3hjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lHTnZiblJsYm5SVWVYQmxJRDBnY21WekxtaGxZV1JsY25NdVoyVjBLQ2RqYjI1MFpXNTBMWFI1Y0dVbktUdGNiaUFnSUNBZ0lDQWdhV1lnS0hKbGN5NXpkR0YwZFhNZ1BUMDlJREl3TmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJR1JpWnloY2JpQWdJQ0FnSUNBZ0lDQWdJQ2RUZFdOalpYTnpablZzYkhrZ1pHOTNibXh2WVdSbFpDQm1hWEp6ZENCd1lYSjBJRzltSUhWeWJDQW9jM1Z3Y0c5eWRITWdjbUZ1WjJVZ2NtVnhkV1Z6ZEhNcEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUhWeWJDeGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGN5eGNiaUFnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lHUmlaeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDZFRkV05qWlhOelpuVnNiSGtnWkc5M2JteHZZV1JsWkNCamIyMXdiR1YwWlNCMWNtd2dLSE5sY25abGNpQmtiMlZ6SUc1dmRDQnpkWEJ3YjNKMElISmhibWRsSUhKbGNYVmxjM1J6S1Njc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IxY213c1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhNc1hHNGdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNCallYUmphQ0FvWlhKeUtTQjdYRzRnSUNBZ0lDQWdJR1JpWnloY2JpQWdJQ0FnSUNBZ0lDQW5RWFIwWlcxd2RHbHVaeUIwYnlCa2IzZHViRzloWkNCM2FYUm9JR0VnY21GdVoyVWdhR1ZoWkdWeUlHWmhhV3hsWkN3Z2RISjVhVzVuSUdGbllXbHVJSGRwZEdodmRYUWdiMjVsSnl4Y2JpQWdJQ0FnSUNBZ0lDQmxjbklzWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR1JpWnlnbmFXNXpjR1ZqZEZOcGVtVWdiMllnTUNCbmFYWmxiaXdnWkc5M2JteHZZV1JwYm1jZ1pXNTBhWEpsSUdacGJHVW5LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvSVhKbGN5a2dlMXh1SUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0x5OGdWMlVnWkc5dUozUWdhR0YyWlNCaGJpQnBibWwwYVdGc0lISmxjM0J2Ym5ObElHUjFaU0IwYnlCdWIzUWdaRzlwYm1jZ2RHaGxJR2x1YVhScFlXd2djbUZ1WjJVZ1pHOTNibXh2WVdSY2JpQWdJQ0FnSUNBZ0x5OGdSRzhnWVNCSVJVRkVJSEpsY1hWbGMzUWdkRzhnWkdWMFpYSnRhVzVsSUdsbUlIZGxJSE5vYjNWc1pDQmtiM2R1Ykc5aFpDQjBhR1VnWlc1MGFYSmxJR1pwYkdVZ1ltRnpaV1FnYjI0Z1kyOXVkR1Z1ZEMxMGVYQmxYRzRnSUNBZ0lDQWdJR052Ym5OMElHaGxZV1JTWlhNZ1BTQmhkMkZwZENCRWIzZHViRzloWkdWeUxtUnZkMjVzYjJGa0tIVnliQ3dnZTF4dUlDQWdJQ0FnSUNBZ0lHWmxkR05vUTI5dVptbG5PaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRaWFJvYjJRNklDZElSVUZFSnl4Y2JpQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ1kyOXVkR1Z1ZEZSNWNHVWdQU0JvWldGa1VtVnpMbWhsWVdSbGNuTXVaMlYwS0NkamIyNTBaVzUwTFhSNWNHVW5LVHRjYmlBZ0lDQWdJQ0FnWkdKbktDZFFaWEptYjNKdFpXUWdTRVZCUkNCeVpYRjFaWE4wSUdGdVpDQm5iM1FnWTI5dWRHVnVkQzEwZVhCbEp5d2dkWEpzTENCamIyNTBaVzUwVkhsd1pTazdYRzRnSUNBZ0lDQjlJR05oZEdOb0lDaGxjbklwSUh0Y2JpQWdJQ0FnSUNBZ1pHSm5LRnh1SUNBZ0lDQWdJQ0FnSUNkSVJVRkVJSEpsY1hWbGMzUWdkRzhnWTJobFkyc2dabTl5SUdOdmJuUmxiblF0ZEhsd1pTQm1ZV2xzWldRc0lHUnZkMjVzYjJGa2FXNW5JR1Z1ZEdseVpTQm1hV3hsSnl4Y2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9ZMjl1ZEdWdWRGUjVjR1VnSmlZZ0lWWmhiR2xrWVhSdmNpNXBjMVpoYkdsa1RXbHRaVlI1Y0dVb1kyOXVkR1Z1ZEZSNWNHVXBLU0I3WEc0Z0lDQWdJQ0JrWW1jb0oxSmxjMjkxY21ObElHaGhjeUJwYm5aaGJHbGtJR052Ym5SbGJuUWdkSGx3WlNjc0lHTnZiblJsYm5SVWVYQmxLVHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJKYm5aaGJHbGtUV2x0WlZSNWNHVkZjbkp2Y2loamIyNTBaVzUwVkhsd1pTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLQ0Z5WlhNcElIdGNiaUFnSUNBZ0lISmxjeUE5SUdGM1lXbDBJRVJ2ZDI1c2IyRmtaWEl1Wkc5M2JteHZZV1FvZFhKc0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0JpYkc5aUlEMGdZWGRoYVhRZ2NtVnpMbUpzYjJJb0tUdGNibHh1SUNBZ0lHbG1JQ2doYzJodmRXeGtTVzV6Y0dWamRDa2dlMXh1SUNBZ0lDQWdaR0puS0dCVGEybHdjR2x1WnlCcGJuTndaV04wYVc5dUlHUjFaU0IwYnlCa2FYTmhZbXhwYm1jZ2RHaGxJR052Ym1acFoyQXBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlHSnNiMkk3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMjl1YzNRZ1luVm1abVZ5SUQwZ1lYZGhhWFFnWW14dllpNWhjbkpoZVVKMVptWmxjaWdwTzF4dUlDQWdJR052Ym5OMElIc2dabTkxYm1RZ2ZTQTlJR0YzWVdsMElIUm9hWE11STNaaGJHbGtZWFJ2Y2k1elkyRnVRMmgxYm1zb1luVm1abVZ5S1R0Y2JpQWdJQ0JwWmlBb1ptOTFibVFwSUh0Y2JpQWdJQ0FnSUdSaVp5Z25RekpRUVNCdFpYUmhaR0YwWVNCbWIzVnVaQ0JtYjNJZ2RYSnNKeXdnZFhKc0tUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnWkdKbktDZE9ieUJETWxCQklHMWxkR0ZrWVhSaElHWnZkVzVrSUdadmNpQjFjbXduTENCMWNtd3BPMXh1SUNBZ0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnVjJVZ1pHOXVKM1FnWjJWMElHRWdablZzYkNCamIyNTBaVzUwTFd4bGJtZDBhQ0JpWVdOcklHWnliMjBnZEdobElITmxjblpsY2lCM2FHVnVJR1J2YVc1bklHRWdjbUZ1WjJWY2JpQWdJQ0F2THlCeVpYRjFaWE4wTENCemJ5QjNaU0J1WldWa0lIUnZJR2QxWlhOeklHSmhjMlZrSUc5dUlIUm9aU0J5WlhOd2IyNXpaUzRnVjJVZ2MyaHZkV3hrSUdOdmJuUnBiblZsSUdsbVhHNGdJQ0FnTHk4Z2QyVWdaMlYwSUdFZ01qQTJJR0poWTJzZ1puSnZiU0IwYUdVZ2MyVnlkbVZ5SUdsdWMzUmxZV1FnYjJZZ1lTQXlNREFzSUdGdVpDQjBhR0YwSUdWeGRXRnNjeUIwYUdVZ1lHbHVjM0JsWTNSVGFYcGxZQzVjYmlBZ0lDQXZMeUJKYmlCMGFHRjBJR05oYzJVc0lHTm9ZVzVuWlhNZ1lYSmxJSFJvWlNCelpXTnZibVFnY21WeGRXVnpkQ0IzYVd4c0lIbHBaV3hrSUcxdmNtVWdaR0YwWVN3Z2RXNXNaWE56SUhSb1pTQnBiV0ZuWlZ4dUlDQWdJQzh2SUhOcGVtVWdhWE1nWlhoaFkzUnNlU0IwYUdVZ1lHbHVjM0JsWTNSVGFYcGxZQ3dnWVc1a0lIZGxJR2RsZENCdWJ5QmtZWFJoSUdKaFkyc3VYRzRnSUNBZ1kyOXVjM1FnYzJodmRXeGtRMjl1ZEdsdWRXVWdQVnh1SUNBZ0lDQWdjbVZ6TG5OMFlYUjFjeUE5UFQwZ01qQTJJQ1ltSUdKMVptWmxjaTVpZVhSbFRHVnVaM1JvSUQwOVBTQjBhR2x6TGlOdmNIUnBiMjV6TG1sdWMzQmxZM1JUYVhwbElDc2dNVHRjYmlBZ0lDQnBaaUFvYzJodmRXeGtRMjl1ZEdsdWRXVXBJSHRjYmlBZ0lDQWdJR1JpWnlnblEyOXVkR2x1ZFdsdVp5QmtiM2R1Ykc5aFpDQmhkQ0J2Wm1aelpYUWdKV1FuTENCMGFHbHpMaU52Y0hScGIyNXpMbWx1YzNCbFkzUlRhWHBsS1R0Y2JpQWdJQ0FnSUdOdmJuTjBJSFJoYVd4U1pYTWdQU0JoZDJGcGRDQkViM2R1Ykc5aFpHVnlMbVJ2ZDI1c2IyRmtLSFZ5YkN3Z2UxeHVJQ0FnSUNBZ0lDQXZMeUJYWlNCdVpXVmtJSFJ2SUhOMFlYSjBJSFJvWlNCeVlXNW5aU0JoZENCMGFHVWdibVY0ZENCaWVYUmxYRzRnSUNBZ0lDQWdJSEpoYm1kbFUzUmhjblE2SUhSb2FYTXVJMjl3ZEdsdmJuTXVhVzV6Y0dWamRGTnBlbVVnS3lBeExGeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQmpiMjV6ZENCMFlXbHNRblZtWm1WeUlEMGdZWGRoYVhRZ2RHRnBiRkpsY3k1aGNuSmhlVUoxWm1abGNpZ3BPMXh1SUNBZ0lDQWdaR0puS0Z4dUlDQWdJQ0FnSUNBblUzVmpZMlZ6YzJaMWJHeDVJR1J2ZDI1c2IyRmtaV1FnY21WemRDQnZaaUJtYVd4bElDZ2xaQ0JpZVhSbGN5a25MRnh1SUNBZ0lDQWdJQ0IwWVdsc1FuVm1abVZ5TG1KNWRHVk1aVzVuZEdnc1hHNGdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QkNiRzlpS0Z0aWRXWm1aWElzSUhSaGFXeENkV1ptWlhKZExDQjdJSFI1Y0dVNklHSnNiMkl1ZEhsd1pTQjlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z1lteHZZanRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCR1pYUmphR1Z6SUdFZ1NsTlBUaUJ3WVhsc2IyRmtJR0Z1WkNCallXTm9aWE1nYVhRc0lIVnphVzVuSUhSb1pTQnlaWEYxWlhOMFpXUWdWVkpNSUdGeklIUm9aU0JyWlhsY2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIVnliQ0F0SUZSb1pTQlZVa3dnZEc4Z1ptVjBZMmdnWVc1a0lHTmhZMmhsWEc0Z0lDQXFMMXh1SUNCemRHRjBhV01nWVhONWJtTWdZMkZqYUdWa1IyVjBTbk52Ymp4VUlEMGdZVzU1UGloMWNtdzZJSE4wY21sdVp5azZJRkJ5YjIxcGMyVThWRDRnZTF4dUlDQWdJR2xtSUNnaGRHaHBjeTRqY21WemNHOXVjMlZEWVdOb1pTNW5aWFFvZFhKc0tTa2dlMXh1SUNBZ0lDQWdZMkZqYUdWRVltY29KMDV2SUdOaFkyaGxJR1p2ZFc1a0lHWnZjaUFsY3ljc0lIVnliQ2s3WEc0Z0lDQWdJQ0JqYjI1emRDQnlaWE1nUFNCaGQyRnBkQ0JFYjNkdWJHOWhaR1Z5TG1SdmQyNXNiMkZrS0hWeWJDd2dlMXh1SUNBZ0lDQWdJQ0JtWlhSamFFTnZibVpwWnpvZ2UxeHVJQ0FnSUNBZ0lDQWdJR055WldSbGJuUnBZV3h6T2lBbmIyMXBkQ2NzWEc0Z0lDQWdJQ0FnSUNBZ2FHVmhaR1Z5Y3pvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnUVdOalpYQjBPaUFuWVhCd2JHbGpZWFJwYjI0dmFuTnZiaWNzWEc0Z0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnWTI5dWMzUWdaR0YwWVNBOUlHRjNZV2wwSUhKbGN5NXFjMjl1S0NrN1hHNGdJQ0FnSUNCallXTm9aVVJpWnlnblUyRjJhVzVuSUdSaGRHRWdabTl5SUNWekp5d2dkWEpzTENCa1lYUmhLVHRjYmlBZ0lDQWdJSFJvYVhNdUkzSmxjM0J2Ym5ObFEyRmphR1V1YzJWMEtIVnliQ3dnWkdGMFlTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1kyRmphR1ZFWW1jb0oxSmxkSFZ5Ym1sdVp5QmpZV05vWldRZ1pHRjBZU0JtYjNJZ0pYTW5MQ0IxY213cE8xeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxpTnlaWE53YjI1elpVTmhZMmhsTG1kbGRDaDFjbXdwTzF4dUlDQjlYRzU5WEc0aUxDSXZLaXBjYmlBcUlFTnZjSGx5YVdkb2RDQXlNREl6SUVGa2IySmxYRzRnS2lCQmJHd2dVbWxuYUhSeklGSmxjMlZ5ZG1Wa0xseHVJQ3BjYmlBcUlFNVBWRWxEUlRvZ1FXUnZZbVVnY0dWeWJXbDBjeUI1YjNVZ2RHOGdkWE5sTENCdGIyUnBabmtzSUdGdVpDQmthWE4wY21saWRYUmxJSFJvYVhNZ1ptbHNaU0JwYmx4dUlDb2dZV05qYjNKa1lXNWpaU0IzYVhSb0lIUm9aU0IwWlhKdGN5QnZaaUIwYUdVZ1FXUnZZbVVnYkdsalpXNXpaU0JoWjNKbFpXMWxiblFnWVdOamIyMXdZVzU1YVc1blhHNGdLaUJwZEM1Y2JpQXFMMXh1WEc1cGJYQnZjblFnZXlCWGIzSnJaWEpTWlhGMVpYTjBJSDBnWm5KdmJTQW5MaTkzYjNKclpYSW5PMXh1WEc1bGVIQnZjblFnYVc1MFpYSm1ZV05sSUZSaGMyc2dlMXh1SUNCeVpYRjFaWE4wT2lCWGIzSnJaWEpTWlhGMVpYTjBPMXh1SUNCeVpYTnZiSFpsT2lBb2RtRnNkV1U2SUhWdWEyNXZkMjRwSUQwK0lIWnZhV1E3WEc0Z0lISmxhbVZqZERvZ0tIWmhiSFZsT2lCMWJtdHViM2R1S1NBOVBpQjJiMmxrTzF4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdZM0psWVhSbFZHRnpheWgwWVhOck9pQlVZWE5yS1NCN1hHNGdJSEpsZEhWeWJpQjBZWE5yTzF4dWZWeHVJaXdpTHlvcVhHNGdLaUJEYjNCNWNtbG5hSFFnTWpBeU15QkJaRzlpWlZ4dUlDb2dRV3hzSUZKcFoyaDBjeUJTWlhObGNuWmxaQzVjYmlBcVhHNGdLaUJPVDFSSlEwVTZJRUZrYjJKbElIQmxjbTFwZEhNZ2VXOTFJSFJ2SUhWelpTd2diVzlrYVdaNUxDQmhibVFnWkdsemRISnBZblYwWlNCMGFHbHpJR1pwYkdVZ2FXNWNiaUFxSUdGalkyOXlaR0Z1WTJVZ2QybDBhQ0IwYUdVZ2RHVnliWE1nYjJZZ2RHaGxJRUZrYjJKbElHeHBZMlZ1YzJVZ1lXZHlaV1Z0Wlc1MElHRmpZMjl0Y0dGdWVXbHVaMXh1SUNvZ2FYUXVYRzRnS2k5Y2JseHVhVzUwWlhKbVlXTmxJRk5sY21saGJHbDZaV1JGY25KdmNpQjdYRzRnSUZ0clpYazZJSE4wY21sdVoxMDZJR0Z1ZVR0Y2JuMWNibHh1THk4Z1JuSnZiU0JvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2YW05elpHVnFiMjVuTDNkdmNtdGxjbkJ2YjJ3dllteHZZaTl0WVhOMFpYSXZjM0pqTDNkdmNtdGxjaTVxY3lOTU56WXRURGd6WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYzJWeWFXRnNhWHBsUlhKeWIzSW9aWEp5YjNJNklGSmxZMjl5WkR4emRISnBibWNzSUdGdWVUNHBPaUJUWlhKcFlXeHBlbVZrUlhKeWIzSWdlMXh1SUNCeVpYUjFjbTRnVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVRtRnRaWE1vWlhKeWIzSXBMbkpsWkhWalpTaG1kVzVqZEdsdmJpQW9jSEp2WkhWamRDd2dibUZ0WlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2NISnZaSFZqZEN3Z2JtRnRaU3dnZTF4dUlDQWdJQ0FnZG1Gc2RXVTZJR1Z5Y205eVcyNWhiV1ZkTEZ4dUlDQWdJQ0FnWlc1MWJXVnlZV0pzWlRvZ2RISjFaU3hjYmlBZ0lDQjlLVHRjYmlBZ2ZTd2dlMzBwTzF4dWZWeHVYRzR2THlCR2NtOXRJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzlxYjNOa1pXcHZibWN2ZDI5eWEyVnljRzl2YkM5aWJHOWlMMjFoYzNSbGNpOXpjbU12VjI5eWEyVnlTR0Z1Wkd4bGNpNXFjeU5NTVRjNUxVd3hPVE5jYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJrWlhObGNtbGhiR2w2WlVWeWNtOXlLSE5sY21saGJHbDZaV1JGY25KdmNqb2dVMlZ5YVdGc2FYcGxaRVZ5Y205eUtUb2dSWEp5YjNJZ2UxeHVJQ0IyWVhJZ2RHVnRjQ0E5SUc1bGR5QkZjbkp2Y2lnbkp5azdYRzRnSUhaaGNpQndjbTl3Y3lBOUlFOWlhbVZqZEM1clpYbHpLSE5sY21saGJHbDZaV1JGY25KdmNpazdYRzVjYmlBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQndjbTl3Y3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDOHZJRUIwY3kxcFoyNXZjbVZjYmlBZ0lDQjBaVzF3VzNCeWIzQnpXMmxkWFNBOUlITmxjbWxoYkdsNlpXUkZjbkp2Y2x0d2NtOXdjMXRwWFYwN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2RHVnRjRHRjYm4xY2JpSXNJaThxS2x4dUlDb2dRMjl3ZVhKcFoyaDBJREl3TWpNZ1FXUnZZbVZjYmlBcUlFRnNiQ0JTYVdkb2RITWdVbVZ6WlhKMlpXUXVYRzRnS2x4dUlDb2dUazlVU1VORk9pQkJaRzlpWlNCd1pYSnRhWFJ6SUhsdmRTQjBieUIxYzJVc0lHMXZaR2xtZVN3Z1lXNWtJR1JwYzNSeWFXSjFkR1VnZEdocGN5Qm1hV3hsSUdsdVhHNGdLaUJoWTJOdmNtUmhibU5sSUhkcGRHZ2dkR2hsSUhSbGNtMXpJRzltSUhSb1pTQkJaRzlpWlNCc2FXTmxibk5sSUdGbmNtVmxiV1Z1ZENCaFkyTnZiWEJoYm5scGJtZGNiaUFxSUdsMExseHVJQ292WEc1Y2JtbHRjRzl5ZENCN0lHUmxjMlZ5YVdGc2FYcGxSWEp5YjNJZ2ZTQm1jbTl0SUNjdUwyVnljbTl5Snp0Y2JtbHRjRzl5ZENCN0lGZHZjbXRsY2xKbGNYVmxjM1FzSUZkdmNtdGxjbEpsYzNCdmJuTmxJSDBnWm5KdmJTQW5MaTkzYjNKclpYSW5PMXh1WEc1bGVIQnZjblFnYVc1MFpYSm1ZV05sSUZkdmNtdGxjazFoYm1GblpYSWdlMXh1SUNCbGVHVmpkWFJsT2lBb2NtVnhkV1Z6ZERvZ1YyOXlhMlZ5VW1WeGRXVnpkQ2tnUFQ0Z1VISnZiV2x6WlR4MWJtdHViM2R1UGp0Y2JpQWdhWE5YYjNKcmFXNW5PaUFvS1NBOVBpQmliMjlzWldGdU8xeHVJQ0IwWlhKdGFXNWhkR1U2SUNncElEMCtJSFp2YVdRN1hHNTlYRzVjYmk4cUtseHVJQ29nUTNKbFlYUmxJR0VnZDNKaGNIQmxjaUJ5WlhOd2IyNXphV0pzWlNCbWIzSWdiV0Z1WVdkcGJtY2dZU0J6YVc1bmJHVWdkMjl5YTJWeVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUhOamNtbHdkRlZ5YkNCVlVrd2dkRzhnZDI5eWEyVnlJSE5qY21sd2RGeHVJQ29nUUhKbGRIVnlibk1nZTFkdmNtdGxjazFoYm1GblpYSjlYRzRnS2k5Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCamNtVmhkR1ZYYjNKclpYSk5ZVzVoWjJWeUtITmpjbWx3ZEZWeWJEb2djM1J5YVc1bktUb2dWMjl5YTJWeVRXRnVZV2RsY2lCN1hHNGdJR052Ym5OMElIZHZjbXRsY2lBOUlHNWxkeUJYYjNKclpYSW9jMk55YVhCMFZYSnNMQ0I3SUhSNWNHVTZJQ2R0YjJSMWJHVW5JSDBwTzF4dUlDQnNaWFFnZDI5eWEybHVaeUE5SUdaaGJITmxPMXh1WEc0Z0lHTnZibk4wSUdWNFpXTjFkR1U2SUZkdmNtdGxjazFoYm1GblpYSmJKMlY0WldOMWRHVW5YU0E5SUdGemVXNWpJQ2h5WlhGMVpYTjBLU0E5UGlCN1hHNGdJQ0FnZDI5eWEyVnlMbkJ2YzNSTlpYTnpZV2RsS0hKbGNYVmxjM1FwTzF4dUlDQWdJSGR2Y210cGJtY2dQU0IwY25WbE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtDaHlaWE52YkhabExDQnlaV3BsWTNRcElEMCtJSHRjYmlBZ0lDQWdJSGR2Y210bGNpNXZibTFsYzNOaFoyVWdQU0JtZFc1amRHbHZiaUFvWlRvZ1RXVnpjMkZuWlVWMlpXNTBQRmR2Y210bGNsSmxjM0J2Ym5ObFBpa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1pTNWtZWFJoTG5SNWNHVWdQVDA5SUNkemRXTmpaWE56SnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9aUzVrWVhSaExtUmhkR0VwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lISmxhbVZqZENoa1pYTmxjbWxoYkdsNlpVVnljbTl5S0dVdVpHRjBZUzVsY25KdmNpa3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhkdmNtdHBibWNnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUhkdmNtdGxjaTV2Ym1WeWNtOXlJRDBnWm5WdVkzUnBiMjRnS0dVcElIdGNiaUFnSUNBZ0lDQWdkMjl5YTJsdVp5QTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQnlaV3BsWTNRb1pTazdYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lIMHBPMXh1SUNCOU8xeHVYRzRnSUdOdmJuTjBJR2x6VjI5eWEybHVaem9nVjI5eWEyVnlUV0Z1WVdkbGNsc25hWE5YYjNKcmFXNW5KMTBnUFNBb0tTQTlQaUIzYjNKcmFXNW5PMXh1WEc0Z0lHTnZibk4wSUhSbGNtMXBibUYwWlRvZ1YyOXlhMlZ5VFdGdVlXZGxjbHNuZEdWeWJXbHVZWFJsSjEwZ1BTQW9LU0E5UGlCM2IzSnJaWEl1ZEdWeWJXbHVZWFJsS0NrN1hHNWNiaUFnY21WMGRYSnVJSHRjYmlBZ0lDQmxlR1ZqZFhSbExGeHVJQ0FnSUdselYyOXlhMmx1Wnl4Y2JpQWdJQ0IwWlhKdGFXNWhkR1VzWEc0Z0lIMDdYRzU5WEc0aUxDSXZLaXBjYmlBcUlFTnZjSGx5YVdkb2RDQXlNREl6SUVGa2IySmxYRzRnS2lCQmJHd2dVbWxuYUhSeklGSmxjMlZ5ZG1Wa0xseHVJQ3BjYmlBcUlFNVBWRWxEUlRvZ1FXUnZZbVVnY0dWeWJXbDBjeUI1YjNVZ2RHOGdkWE5sTENCdGIyUnBabmtzSUdGdVpDQmthWE4wY21saWRYUmxJSFJvYVhNZ1ptbHNaU0JwYmx4dUlDb2dZV05qYjNKa1lXNWpaU0IzYVhSb0lIUm9aU0IwWlhKdGN5QnZaaUIwYUdVZ1FXUnZZbVVnYkdsalpXNXpaU0JoWjNKbFpXMWxiblFnWVdOamIyMXdZVzU1YVc1blhHNGdLaUJwZEM1Y2JpQXFMMXh1WEc1cGJYQnZjblFnZXlCamNtVmhkR1ZVWVhOckxDQlVZWE5ySUgwZ1puSnZiU0FuTGk5MFlYTnJKenRjYm1sdGNHOXlkQ0I3SUdOeVpXRjBaVmR2Y210bGNrMWhibUZuWlhJc0lGZHZjbXRsY2sxaGJtRm5aWElnZlNCbWNtOXRJQ2N1TDNkdmNtdGxjazFoYm1GblpYSW5PMXh1WEc1bGVIQnZjblFnYVc1MFpYSm1ZV05sSUZkdmNtdGxjbEJ2YjJ4RGIyNW1hV2NnZTF4dUlDQXZMeUJRWVhSb0lIUnZJSGR2Y210bGNpQnpZM0pwY0hSY2JpQWdjMk55YVhCMFUzSmpPaUJ6ZEhKcGJtYzdYRzRnSUM4dklFWmhiR3hpWVdOcklIQmhkR2dnZEc4Z2QyOXlhMlZ5SUhOamNtbHdkQ0JtYjNJZ1UyRm1ZWEpwSUR3Z01UWXVOQ0J6YnlCM1pTQmpZVzRnYkc5aFpDQnBkQ0JoY3lCaElHUjVibUZ0YVdNZ2FXMXdiM0owSUNoRlUwMHBYRzRnSUdaaGJHeGlZV05yVTJOeWFYQjBVM0pqUHpvZ2MzUnlhVzVuTzF4dUlDQnRZWGhYYjNKclpYSnpPaUJ1ZFcxaVpYSTdYRzU5WEc1Y2JtbHVkR1Z5Wm1GalpTQlhiM0pyWlhKUWIyOXNJSHRjYmlBZ1pYaGxZM1YwWlRvZ0tHMWxkR2h2WkRvZ2MzUnlhVzVuTENCaGNtZHpPaUJoYm5sYlhTa2dQVDRnVUhKdmJXbHpaVHhoYm5rK08xeHVJQ0IwWlhKdGFXNWhkR1U2SUNncElEMCtJSFp2YVdRN1hHNTlYRzVjYmk4cUtseHVJQ29nUTNKbFlYUmxJR0VnWTI5dVptbG5kWEpoWW14bElIQnZiMndnYjJZZ2QyOXlhMlZ5Y3lCallYQmhZbXhsSUc5bUlHTnZibU4xY25KbGJuUWdkR0Z6YXlCbGVHVmpkWFJwYjI1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTFkdmNtdGxjbEJ2YjJ4RGIyNW1hV2Q5SUdOdmJtWnBaMXh1SUNvZ1FISmxkSFZ5Ym5NZ2UxZHZjbXRsY2xCdmIyeDlYRzRnS2k5Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCamNtVmhkR1ZYYjNKclpYSlFiMjlzS0dOdmJtWnBaem9nVjI5eWEyVnlVRzl2YkVOdmJtWnBaeWs2SUZkdmNtdGxjbEJ2YjJ3Z2UxeHVJQ0JqYjI1emRDQjNiM0pyWlhKek9pQlhiM0pyWlhKTllXNWhaMlZ5VzEwZ1BTQmJYVHRjYmlBZ1kyOXVjM1FnZEdGemEzTTZJRlJoYzJ0YlhTQTlJRnRkTzF4dUlDQXZLaXBjYmlBZ0lDb2dVbVYwY21sbGRtVWdZVzRnWVhaaGFXeGhZbXhsSUhkdmNtdGxjaTRnU1dZZ2JtOXVaU0JoY21VZ1lYWmhhV3hoWW14bElHRnVaQ0IwYUdVZ2JXRjRJR2x6SUc1dmRDQnlaV0ZqYUdWa0xGeHVJQ0FnS2lCaElHNWxkeUJ2Ym1VZ2QybHNiQ0JpWlNCamNtVmhkR1ZrSUdGdVpDQnlaWFIxY201bFpDNWNiaUFnSUNwY2JpQWdJQ29nUUhKbGRIVnlibk1nZTFkdmNtdGxjazFoYm1GblpYSWdmQ0J1ZFd4c2ZTQjNiM0pyWlhKY2JpQWdJQ292WEc0Z0lHTnZibk4wSUdkbGRGZHZjbXRsY2lBOUlDZ3BJRDArSUh0Y2JpQWdJQ0JtYjNJZ0tHTnZibk4wSUhkdmNtdGxjaUJ2WmlCM2IzSnJaWEp6S1NCN1hHNGdJQ0FnSUNCcFppQW9JWGR2Y210bGNpNXBjMWR2Y210cGJtY29LU2tnY21WMGRYSnVJSGR2Y210bGNqdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIZHZjbXRsY25NdWJHVnVaM1JvSUR3Z1kyOXVabWxuTG0xaGVGZHZjbXRsY25NcElIdGNiaUFnSUNBZ0lHTnZibk4wSUc1bGQxZHZjbXRsY2lBOUlHTnlaV0YwWlZkdmNtdGxjazFoYm1GblpYSW9ZMjl1Wm1sbkxuTmpjbWx3ZEZOeVl5azdYRzRnSUNBZ0lDQjNiM0pyWlhKekxuQjFjMmdvYm1WM1YyOXlhMlZ5S1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ1WlhkWGIzSnJaWEk3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNCOU8xeHVYRzRnSUM4cUtseHVJQ0FnS2lCQmRIUmxiWEIwSUhSdklIQnliMk5sYzNNZ2RHaGxJSFJoYzJzZ2NYVmxkV1VnWW5rZ2NtVjBjbWxsZG1sdVp5QmhJSGR2Y210bGNpd2dZWE56YVdkdWFXNW5JR2wwSUdFZ2RHRnpheXhjYmlBZ0lDb2dZVzVrSUhKbGMyOXNkbWx1WnlCMGFHVWdkR0Z6YXlCdmJtTmxJR052YlhCc1pYUmxMbHh1SUNBZ0tpOWNiaUFnWTI5dWMzUWdZWE56YVdkdVZHRnpheUE5SUdGemVXNWpJQ2dwSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0IzYjNKclpYSWdQU0JuWlhSWGIzSnJaWElvS1R0Y2JseHVJQ0FnSUdsbUlDZ2hkMjl5YTJWeUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWTI5dWMzUWdkR0Z6YXlBOUlIUmhjMnR6TG5CdmNDZ3BPMXh1WEc0Z0lDQWdhV1lnS0NGMFlYTnJLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJR052Ym5OMElISmxjM1ZzZENBOUlHRjNZV2wwSUhkdmNtdGxjaTVsZUdWamRYUmxLSFJoYzJzdWNtVnhkV1Z6ZENrN1hHNGdJQ0FnSUNCMFlYTnJMbkpsYzI5c2RtVW9jbVZ6ZFd4MEtUdGNiaUFnSUNCOUlHTmhkR05vSUNobGNuSnZjaWtnZTF4dUlDQWdJQ0FnZEdGemF5NXlaV3BsWTNRb1pYSnliM0lwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNBdktpcGNiaUFnSUNvZ1FYUjBaVzF3ZENCMGJ5QmxlR1ZqZFhSbElHRWdiV1YwYUc5a0lHOXVJSFJvWlNCM2IzSnJaWEpjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUcxbGRHaHZaQ0JPWVcxbElHOW1JRzFsZEdodlpDQjBieUJsZUdWamRYUmxYRzRnSUNBcUlFQndZWEpoYlNCaGNtZHpJRUZ5WjNWdFpXNTBjeUIwYnlCaVpTQndZWE56WldSY2JpQWdJQ29nUUhKbGRIVnlibk1nVUhKdmJXbHpaU0IwYUdGMElISmxjMjlzZG1WeklHOXVZMlVnZEdobElHMWxkR2h2WkNCb1lYTWdabWx1YVhOb1pXUWdaWGhsWTNWMGFXNW5YRzRnSUNBcUwxeHVJQ0JqYjI1emRDQmxlR1ZqZFhSbE9pQlhiM0pyWlhKUWIyOXNXeWRsZUdWamRYUmxKMTBnUFNBb2JXVjBhRzlrTENCaGNtZHpLU0E5UGlCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0NoeVpYTnZiSFpsTENCeVpXcGxZM1FwSUQwK0lIdGNiaUFnSUNBZ0lHTnZibk4wSUhSaGMyc2dQU0JqY21WaGRHVlVZWE5yS0h0Y2JpQWdJQ0FnSUNBZ2NtVnhkV1Z6ZERvZ2UxeHVJQ0FnSUNBZ0lDQWdJRzFsZEdodlpDeGNiaUFnSUNBZ0lDQWdJQ0JoY21kekxGeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0J5WlhOdmJIWmxPaUFvZG1Gc2RXVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJWY0c5dUlHTnZiWEJzWlhScGIyNGdiMllnZEdocGN5QjBZWE5yTENCcGRITWdkMjl5YTJWeUlHbHpJRzV2ZHlCbWNtVmxJR0Z1WkNCMGFHVWdjWFZsZFdVZ2MyaHZkV3hrSUdKbElHTm9aV05yWldSY2JpQWdJQ0FnSUNBZ0lDQmhjM05wWjI1VVlYTnJLQ2s3WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lISmxhbVZqZERvZ0tIWmhiSFZsS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLSFpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdJQ0JoYzNOcFoyNVVZWE5yS0NrN1hHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnZEdGemEzTXVjSFZ6YUNoMFlYTnJLVHRjYmx4dUlDQWdJQ0FnWVhOemFXZHVWR0Z6YXlncE8xeHVJQ0FnSUgwcE8xeHVJQ0I5TzF4dVhHNGdJR052Ym5OMElIUmxjbTFwYm1GMFpUb2dWMjl5YTJWeVVHOXZiRnNuZEdWeWJXbHVZWFJsSjEwZ1BTQW9LU0E5UGlCN1hHNGdJQ0FnZDI5eWEyVnljeTVtYjNKRllXTm9LQ2gzYjNKclpYSXBJRDArSUhkdmNtdGxjaTUwWlhKdGFXNWhkR1VvS1NrN1hHNGdJSDA3WEc1Y2JpQWdjbVYwZFhKdUlIdGNiaUFnSUNCbGVHVmpkWFJsTEZ4dUlDQWdJSFJsY20xcGJtRjBaU3hjYmlBZ2ZUdGNibjFjYmlJc0lpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElESXdNaklnUVdSdlltVmNiaUFxSUVGc2JDQlNhV2RvZEhNZ1VtVnpaWEoyWldRdVhHNGdLbHh1SUNvZ1RrOVVTVU5GT2lCQlpHOWlaU0J3WlhKdGFYUnpJSGx2ZFNCMGJ5QjFjMlVzSUcxdlpHbG1lU3dnWVc1a0lHUnBjM1J5YVdKMWRHVWdkR2hwY3lCbWFXeGxJR2x1WEc0Z0tpQmhZMk52Y21SaGJtTmxJSGRwZEdnZ2RHaGxJSFJsY20xeklHOW1JSFJvWlNCQlpHOWlaU0JzYVdObGJuTmxJR0ZuY21WbGJXVnVkQ0JoWTJOdmJYQmhibmxwYm1kY2JpQXFJR2wwTGx4dUlDb3ZYRzVjYm1sdGNHOXlkQ0JrWldKMVp5Qm1jbTl0SUNka1pXSjFaeWM3WEc1cGJYQnZjblFnZXlCWGIzSnJaWElnZlNCbWNtOXRJQ2N1TGk4dUxpOTNiM0pyWlhJbk8xeHVhVzF3YjNKMElIc2dTVzUyWVd4cFpGZHZjbXRsY2xOdmRYSmpaVVZ5Y205eUlIMGdabkp2YlNBbkxpOWxjbkp2Y2ljN1hHNXBiWEJ2Y25RZ2V5QlhiM0pyWlhKUWIyOXNRMjl1Wm1sbkxDQmpjbVZoZEdWWGIzSnJaWEpRYjI5c0lIMGdabkp2YlNBbkxpOXdiMjlzTDNkdmNtdGxjbEJ2YjJ3bk8xeHVYRzVqYjI1emRDQmtZbWNnUFNCa1pXSjFaeWduWXpKd1lUcDNiM0pyWlhKekp5azdYRzVjYm1WNGNHOXlkQ0JwYm5SbGNtWmhZMlVnVTJSclYyOXlhMlZ5VUc5dmJDQmxlSFJsYm1SeklGZHZjbXRsY2lCN1hHNGdJR1JwYzNCdmMyVTZJQ2dwSUQwK0lIWnZhV1E3WEc1OVhHNWNibUZ6ZVc1aklHWjFibU4wYVc5dUlHTnlaV0YwWlV4dlkyRnNSWGhsWTNWMGFXOXVSVzUyYVhKdmJtMWxiblFvWEc0Z0lITmpjbWx3ZEZOeVl6b2djM1J5YVc1bkxGeHVLVG9nVUhKdmJXbHpaVHhUWkd0WGIzSnJaWEpRYjI5c1BpQjdYRzRnSUdOdmJuTnZiR1V1WkdWaWRXY29KMVZ6YVc1bklHeHZZMkZzSUdWNFpXTjFkR2x2YmlCbGJuWnBjbTl1YldWdWRDQm1jbTl0Snl3Z2MyTnlhWEIwVTNKaktUdGNiaUFnWTI5dWMzUWdleUIzYjNKclpYSWdmU0E5SUdGM1lXbDBJR2x0Y0c5eWRDaGNiaUFnSUNBdktpQkFkbWwwWlMxcFoyNXZjbVVnS2k4Z0x5b2dkMlZpY0dGamEwbG5ibTl5WlRvZ2RISjFaU0FxTHlCelkzSnBjSFJUY21OY2JpQWdLVHRjYmx4dUlDQnlaWFIxY200Z2UxeHVJQ0FnSUM0dUxuZHZjbXRsY2l4Y2JpQWdJQ0JrYVhOd2IzTmxPaUFvS1NBOVBpQjdmU3hjYmlBZ2ZUdGNibjFjYmx4dVpYaHdiM0owSUdGemVXNWpJR1oxYm1OMGFXOXVJR055WldGMFpWQnZiMnhYY21Gd2NHVnlLRnh1SUNCamIyNW1hV2M2SUZkdmNtdGxjbEJ2YjJ4RGIyNW1hV2NzWEc0cE9pQlFjbTl0YVhObFBGTmthMWR2Y210bGNsQnZiMncrSUh0Y2JpQWdMeThnUm1sNElHWnZjaUJUWVdaaGNta2dQQ0F4TkNCM2FHVnVJSFJ5ZVdsdVp5QjBieUJqWVd4c0lIUm9hWE1nWm5KdmJTQnBibk5wWkdVZ1lXNGdaWGhwYzNScGJtY2dWMlZpSUhkdmNtdGxjbHh1SUNCcFppQW9kSGx3Wlc5bUlGZHZjbXRsY2lBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdZM0psWVhSbFRHOWpZV3hGZUdWamRYUnBiMjVGYm5acGNtOXViV1Z1ZENoY2JpQWdJQ0FnSUdOdmJtWnBaeTVtWVd4c1ltRmphMU5qY21sd2RGTnlZeUEvUHlCamIyNW1hV2N1YzJOeWFYQjBVM0pqTEZ4dUlDQWdJQ2s3WEc0Z0lIMWNibHh1SUNCamIyNXpkQ0J5WlhNZ1BTQmhkMkZwZENCbVpYUmphQ2hqYjI1bWFXY3VjMk55YVhCMFUzSmpLVHRjYmx4dUlDQnBaaUFvSVhKbGN5NXZheWtnZEdoeWIzY2dibVYzSUVsdWRtRnNhV1JYYjNKclpYSlRiM1Z5WTJWRmNuSnZjaWhqYjI1bWFXY3VjMk55YVhCMFUzSmpMQ0J5WlhNcE8xeHVYRzRnSUdOdmJuTjBJSE55WXlBOUlHRjNZV2wwSUhKbGN5NTBaWGgwS0NrN1hHNGdJQzh2SUVCVVQwUlBPaUJqYUdWamF5QnpkV0p5WlhOdmRYSmpaU0JwYm5SbFozSnBkSGxjYmlBZ1pHSm5LQ2RHWlhSamFHVmtJSGR2Y210bGNpQm1jbTl0SUNWeklDZ2xaQ0JpZVhSbGN5a25MQ0JqYjI1bWFXY3VjMk55YVhCMFUzSmpMQ0J6Y21NdWJHVnVaM1JvS1R0Y2JseHVJQ0JqYjI1emRDQjNiM0pyWlhKQ2JHOWlJRDBnYm1WM0lFSnNiMklvVzNOeVkxMHNJSHNnZEhsd1pUb2dKMkZ3Y0d4cFkyRjBhVzl1TDJwaGRtRnpZM0pwY0hRbklIMHBPMXh1SUNCamIyNXpkQ0IzYjNKclpYSlZjbXdnUFNCVlVrd3VZM0psWVhSbFQySnFaV04wVlZKTUtIZHZjbXRsY2tKc2IySXBPMXh1WEc0Z0lHTnZibk4wSUhkdmNtdGxjbEJ2YjJ3Z1BTQmpjbVZoZEdWWGIzSnJaWEpRYjI5c0tIdGNiaUFnSUNBdUxpNWpiMjVtYVdjc1hHNGdJQ0FnYzJOeWFYQjBVM0pqT2lCM2IzSnJaWEpWY213c1hHNGdJSDBwTzF4dVhHNGdJR052Ym5OMElIQnZiMnc2SUZkdmNtdGxjaUE5SUh0Y2JpQWdJQ0JqYjIxd2FXeGxWMkZ6YlRvZ1lYTjVibU1nS0M0dUxtRnlaM01wSUQwK0lIZHZjbXRsY2xCdmIyd3VaWGhsWTNWMFpTZ25ZMjl0Y0dsc1pWZGhjMjBuTENCaGNtZHpLU3hjYmlBZ0lDQmxiV0psWkVGdVpGTnBaMjQ2SUdGemVXNWpJQ2d1TGk1aGNtZHpLU0E5UGlCM2IzSnJaWEpRYjI5c0xtVjRaV04xZEdVb0oyVnRZbVZrUVc1a1UybG5iaWNzSUdGeVozTXBMRnh1SUNBZ0lHVjRjRzl5ZEVsdFlXZGxPaUJoYzNsdVl5QW9MaTR1WVhKbmN5a2dQVDRnZDI5eWEyVnlVRzl2YkM1bGVHVmpkWFJsS0NkbGVIQnZjblJKYldGblpTY3NJR0Z5WjNNcExGeHVJQ0FnSUdkbGRGSmxjRzl5ZERvZ1lYTjVibU1nS0M0dUxtRnlaM01wSUQwK0lIZHZjbXRsY2xCdmIyd3VaWGhsWTNWMFpTZ25aMlYwVW1Wd2IzSjBKeXdnWVhKbmN5a3NYRzRnSUNBZ1oyVjBVbVZ3YjNKMFJuSnZiVUZ6YzJWMFFXNWtUV0Z1YVdabGMzUkNkV1ptWlhJNklHRnplVzVqSUNndUxpNWhjbWR6S1NBOVBseHVJQ0FnSUNBZ2QyOXlhMlZ5VUc5dmJDNWxlR1ZqZFhSbEtDZG5aWFJTWlhCdmNuUkdjbTl0UVhOelpYUkJibVJOWVc1cFptVnpkRUoxWm1abGNpY3NJR0Z5WjNNcExGeHVJQ0FnSUhOallXNUpibkIxZERvZ1lYTjVibU1nS0M0dUxtRnlaM01wSUQwK0lIZHZjbXRsY2xCdmIyd3VaWGhsWTNWMFpTZ25jMk5oYmtsdWNIVjBKeXdnWVhKbmN5a3NYRzRnSUNBZ2MyTmhia2x1Y0hWMFZYSnNPaUJoYzNsdVl5QW9MaTR1WVhKbmN5a2dQVDRnZDI5eWEyVnlVRzl2YkM1bGVHVmpkWFJsS0NkelkyRnVTVzV3ZFhSVmNtd25MQ0JoY21kektTeGNiaUFnSUNCamNtVmhkR1ZKYm1keVpXUnBaVzUwUm5KdmJVRnljbUY1UW5WbVptVnlPaUJoYzNsdVl5QW9MaTR1WVhKbmN5a2dQVDVjYmlBZ0lDQWdJSGR2Y210bGNsQnZiMnd1WlhobFkzVjBaU2duWTNKbFlYUmxTVzVuY21Wa2FXVnVkRVp5YjIxQmNuSmhlVUoxWm1abGNpY3NJR0Z5WjNNcExGeHVJQ0FnSUdOeVpXRjBaVWx1WjNKbFpHbGxiblJHY205dFJtbHNaVG9nWVhONWJtTWdLQzR1TG1GeVozTXBJRDArWEc0Z0lDQWdJQ0IzYjNKclpYSlFiMjlzTG1WNFpXTjFkR1VvSjJOeVpXRjBaVWx1WjNKbFpHbGxiblJHY205dFJtbHNaU2NzSUdGeVozTXBMRnh1SUNCOU8xeHVYRzRnSUhKbGRIVnliaUI3WEc0Z0lDQWdMaTR1Y0c5dmJDeGNiaUFnSUNCa2FYTndiM05sT2lBb0tTQTlQaUI3WEc0Z0lDQWdJQ0JWVWt3dWNtVjJiMnRsVDJKcVpXTjBWVkpNS0hkdmNtdGxjbFZ5YkNrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZDI5eWEyVnlVRzl2YkM1MFpYSnRhVzVoZEdVb0tUdGNiaUFnSUNCOUxGeHVJQ0I5TzF4dWZWeHVJaXdpTHlvcVhHNGdLaUJEYjNCNWNtbG5hSFFnTWpBeU1pQkJaRzlpWlZ4dUlDb2dRV3hzSUZKcFoyaDBjeUJTWlhObGNuWmxaQzVjYmlBcVhHNGdLaUJPVDFSSlEwVTZJRUZrYjJKbElIQmxjbTFwZEhNZ2VXOTFJSFJ2SUhWelpTd2diVzlrYVdaNUxDQmhibVFnWkdsemRISnBZblYwWlNCMGFHbHpJR1pwYkdVZ2FXNWNiaUFxSUdGalkyOXlaR0Z1WTJVZ2QybDBhQ0IwYUdVZ2RHVnliWE1nYjJZZ2RHaGxJRUZrYjJKbElHeHBZMlZ1YzJVZ1lXZHlaV1Z0Wlc1MElHRmpZMjl0Y0dGdWVXbHVaMXh1SUNvZ2FYUXVYRzRnS2k5Y2JseHVhVzF3YjNKMElHUmxZblZuSUdaeWIyMGdKMlJsWW5Wbkp6dGNibWx0Y0c5eWRDQjdJRk5rYTFkdmNtdGxjbEJ2YjJ3Z2ZTQm1jbTl0SUNjdUwzQnZiMnhYY21Gd2NHVnlKenRjYmx4dVkyOXVjM1FnWkdKbklEMGdaR1ZpZFdjb0oyTXljR0U2ZDJGemJTY3BPMXh1WEc0dktpcGNiaUFxSUVabGRHTm9aWE1nZEdobElGZEJVMDBnWW1sdVlYSjVJR1p5YjIwZ1lTQnpkWEJ3YkdsbFpDQlZVa3hjYmlBcVhHNGdLaUJBY0dGeVlXMGdjRzl2YkNCWGIzSnJaWElnY0c5dmJDQjBieUJpWlNCMWMyVmtJSGRvWlc0Z1kyOXRjR2xzYVc1bklGZEJVMDFjYmlBcUlFQndZWEpoYlNCaWFXNWhjbmxWY213Z1ZWSk1JSEJ2YVc1MGFXNW5JSFJ2SUZkQlUwMGdZbWx1WVhKNVhHNGdLaTljYm1WNGNHOXlkQ0JoYzNsdVl5Qm1kVzVqZEdsdmJpQm1aWFJqYUZkaGMyMG9YRzRnSUhCdmIydzZJRk5rYTFkdmNtdGxjbEJ2YjJ3c1hHNGdJR0pwYm1GeWVWVnliRG9nYzNSeWFXNW5MRnh1S1RvZ1VISnZiV2x6WlR4WFpXSkJjM05sYldKc2VTNU5iMlIxYkdVK0lIdGNiaUFnTHk4Z1FIUnpMV2xuYm05eVpTQXRJSFJvYVhNZ2RtRnNkV1VnYVhNZ2NtVjNjbWwwZEdWdUlHSjVJRkp2Ykd4MWNGeHVJQ0JqYjI1emRDQnBiblJsWjNKcGRIa2dQU0J3Y205alpYTnpMbVZ1ZGk1VVQwOU1TMGxVWDBsT1ZFVkhVa2xVV1NCaGN5Qmhibms3WEc0Z0lHTnZibk4wSUhkaGMyMUpiblJsWjNKcGRIa2dQU0JwYm5SbFozSnBkSGsvTGxzbmRHOXZiR3RwZEY5aVp5NTNZWE50SjEwN1hHNGdJR1JpWnlnblJtVjBZMmhwYm1jZ1YwRlRUU0JpYVc1aGNua2dabkp2YlNCMWNtd2dKWE1uTENCaWFXNWhjbmxWY213c0lIdGNiaUFnSUNCbGVIQmxZM1JsWkVsdWRHVm5jbWwwZVRvZ2QyRnpiVWx1ZEdWbmNtbDBlU3hjYmlBZ2ZTazdYRzVjYmlBZ1kyOXVjM1FnY21WemNHOXVjMlVnUFNCaGQyRnBkQ0JtWlhSamFDaGlhVzVoY25sVmNtd3NJSHRjYmlBZ0lDQnBiblJsWjNKcGRIazZJSGRoYzIxSmJuUmxaM0pwZEhrc1hHNGdJSDBwTzF4dUlDQmpiMjV6ZENCaWRXWm1aWElnUFNCaGQyRnBkQ0J5WlhOd2IyNXpaUzVoY25KaGVVSjFabVpsY2lncE8xeHVYRzRnSUdSaVp5Z25VMlZ1WkdsdVp5QlhRVk5OSUdKcGJtRnllU0JpZFdabVpYSWdkRzhnZDI5eWEyVnlJR1p2Y2lCamIyMXdhV3hoZEdsdmJpY3NJSHRjYmlBZ0lDQnphWHBsT2lCaWRXWm1aWEl1WW5sMFpVeGxibWQwYUN4Y2JpQWdmU2s3WEc1Y2JpQWdZMjl1YzNRZ2QyRnpiU0E5SUdGM1lXbDBJSEJ2YjJ3dVkyOXRjR2xzWlZkaGMyMG9ZblZtWm1WeUtUdGNibHh1SUNCa1ltY29KME52YlhCcGJHRjBhVzl1SUdacGJtbHphR1ZrSnlrN1hHNWNiaUFnY21WMGRYSnVJSGRoYzIwN1hHNTlYRzRpTENJdktpcGNiaUFxSUVOdmNIbHlhV2RvZENBeU1ESXlJRUZrYjJKbFhHNGdLaUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGx4dUlDcGNiaUFxSUU1UFZFbERSVG9nUVdSdlltVWdjR1Z5YldsMGN5QjViM1VnZEc4Z2RYTmxMQ0J0YjJScFpua3NJR0Z1WkNCa2FYTjBjbWxpZFhSbElIUm9hWE1nWm1sc1pTQnBibHh1SUNvZ1lXTmpiM0prWVc1alpTQjNhWFJvSUhSb1pTQjBaWEp0Y3lCdlppQjBhR1VnUVdSdlltVWdiR2xqWlc1elpTQmhaM0psWlcxbGJuUWdZV05qYjIxd1lXNTVhVzVuWEc0Z0tpQnBkQzVjYmlBcUwxeHVYRzVwYlhCdmNuUWdleUJCYzNObGNuUnBiMjRzSUUxaGJtbG1aWE4wUVhOelpYSjBhVzl1SUgwZ1puSnZiU0FuUUdNeWNHRXZZV1J2WW1VdGRHOXZiR3RwZENjN1hHNWNibVY0Y0c5eWRDQnBiblJsY21aaFkyVWdSWGgwWlc1a1pXUkJjM05sY25ScGIyNXpJSHQ5WEc1Y2JuUjVjR1VnVFdGd2NHVmtSWGgwWlc1a1pXUkJjM05sY25ScGIyNXpJRDBnZTF4dUlDQmJUR0ZpWld3Z2FXNGdhMlY1YjJZZ1JYaDBaVzVrWldSQmMzTmxjblJwYjI1elhUb2dRWE56WlhKMGFXOXVQRnh1SUNBZ0lFeGhZbVZzTEZ4dUlDQWdJRVY0ZEdWdVpHVmtRWE56WlhKMGFXOXVjMXRNWVdKbGJGMWNiaUFnUGp0Y2JuMDdYRzVjYm5SNWNHVWdRV3hzUVhOelpYSjBhVzl1Y3lBOVhHNGdJSHdnVFdGd2NHVmtSWGgwWlc1a1pXUkJjM05sY25ScGIyNXpXMnRsZVc5bUlFMWhjSEJsWkVWNGRHVnVaR1ZrUVhOelpYSjBhVzl1YzExY2JpQWdmQ0JOWVc1cFptVnpkRUZ6YzJWeWRHbHZianRjYmx4dVpYaHdiM0owSUdsdWRHVnlabUZqWlNCQmMzTmxjblJwYjI1QlkyTmxjM052Y2lCN1hHNGdJQzhxS2x4dUlDQWdLaUJTWVhjZ1lYTnpaWEowYVc5dUlHUmhkR0VnWVhNZ2NtVjBkWEp1WldRZ1lua2dkR2hsSUZkQlUwMGdZbWx1WVhKNVhHNGdJQ0FxTDF4dUlDQmtZWFJoT2lCQmMzTmxjblJwYjI1YlhUdGNibHh1SUNBdktpcGNiaUFnSUNvZ1EyOXVkbVZ1YVdWdVkyVWdiV1YwYUc5a0lIUm9ZWFFnY21WMGRYSnVjeUJoYmlCaGNuSmhlU0J2WmlCaGJHd2dZWE56WlhKMGFXOXVjeUJ0WVhSamFHbHVaeUJoSUdkcGRtVnVJR3hoWW1Wc0xDQnpiM0owWldRZ1lua2dkR2hsYVhJZ2FXNWtaWGdnZG1Gc2RXVmNiaUFnSUNvZ1FIQmhjbUZ0SUd4aFltVnNJQzBnVkdobElHRnpjMlZ5ZEdsdmJpQnNZV0psYkNCMGJ5Qm1hV3gwWlhJZ1lua3NJSGRwZEdodmRYUWdZVzRnYVc1a1pYZ2dLR1V1Wnk0Z1l6SndZUzVoWTNScGIyNXpMQ0FxYm05MEtpQmpNbkJoTG1GamRHbHZibk5mWHpFcFhHNGdJQ0FxTDF4dUlDQm5aWFE2SUR4VUlHVjRkR1Z1WkhNZ1FXeHNRWE56WlhKMGFXOXVjMXNuYkdGaVpXd25YVDRvWEc0Z0lDQWdiR0ZpWld3NklGUXNYRzRnSUNrZ1BUNGdLRVY0ZEhKaFkzUThRV3hzUVhOelpYSjBhVzl1Y3l3Z2V5QnNZV0psYkRvZ1ZDQjlQaUI4SUhWdVpHVm1hVzVsWkNsYlhUdGNibjFjYmx4dUx5b3FYRzRnS2lCRGNtVmhkR1Z6SUdFZ1ptRmpZV1JsSUc5aWFtVmpkQ0IzYVhSb0lHTnZiblpsYm1sbGJtTmxJRzFsZEdodlpITWdiM1psY2lCaGMzTmxjblJwYjI0Z1pHRjBZU0J5WlhSMWNtNWxaQ0JtY205dElIUm9aU0IwYjI5c2EybDBMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQmhjM05sY25ScGIyNUVZWFJoSUZKaGR5QmhjM05sY25ScGIyNGdaR0YwWVNCeVpYUjFjbTVsWkNCaWVTQjBhR1VnZEc5dmJHdHBkRnh1SUNvdlhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1kzSmxZWFJsUVhOelpYSjBhVzl1UVdOalpYTnpiM0lvWEc0Z0lHRnpjMlZ5ZEdsdmJrUmhkR0U2SUVGemMyVnlkR2x2Ymx0ZExGeHVLVG9nUVhOelpYSjBhVzl1UVdOalpYTnpiM0lnZTF4dUlDQmpiMjV6ZENCemIzSjBaV1JCYzNObGNuUnBiMjV6SUQwZ1lYTnpaWEowYVc5dVJHRjBZUzV6YjNKMEtGeHVJQ0FnSUNoaExDQmlLU0E5UGlBb1lUOHVhVzV6ZEdGdVkyVWdQejhnTUNrZ0xTQW9Zajh1YVc1emRHRnVZMlVnUHo4Z01Da3NYRzRnSUNrN1hHNWNiaUFnY21WMGRYSnVJSHRjYmlBZ0lDQmtZWFJoT2lCemIzSjBaV1JCYzNObGNuUnBiMjV6TEZ4dVhHNGdJQ0FnWjJWME9pQW9iR0ZpWld3cElEMCtJSHRjYmlBZ0lDQWdJQzh2SUVCVVQwUlBPaUJqWVc0Z2RHaGxJRndpWVc1NVhDSWdZMkZ6ZENCaVpTQmhkbTlwWkdWa1AxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhOdmNuUmxaRUZ6YzJWeWRHbHZibk11Wm1sc2RHVnlLQ2hrWVhSaEtTQTlQaUJrWVhSaExteGhZbVZzSUQwOVBTQnNZV0psYkNrZ1lYTWdZVzU1TzF4dUlDQWdJSDBzWEc0Z0lIMDdYRzU5WEc0aUxDSXZLaXBjYmlBcUlFTnZjSGx5YVdkb2RDQXlNREl4SUVGa2IySmxYRzRnS2lCQmJHd2dVbWxuYUhSeklGSmxjMlZ5ZG1Wa0xseHVJQ3BjYmlBcUlFNVBWRWxEUlRvZ1FXUnZZbVVnY0dWeWJXbDBjeUI1YjNVZ2RHOGdkWE5sTENCdGIyUnBabmtzSUdGdVpDQmthWE4wY21saWRYUmxJSFJvYVhNZ1ptbHNaU0JwYmx4dUlDb2dZV05qYjNKa1lXNWpaU0IzYVhSb0lIUm9aU0IwWlhKdGN5QnZaaUIwYUdVZ1FXUnZZbVVnYkdsalpXNXpaU0JoWjNKbFpXMWxiblFnWVdOamIyMXdZVzU1YVc1blhHNGdLaUJwZEM1Y2JpQXFMMXh1WEc1cGJYQnZjblFnZEhsd1pTQjdJRkpsYzI5MWNtTmxVbVZtWlhKbGJtTmxJSDBnWm5KdmJTQW5RR015Y0dFdllXUnZZbVV0ZEc5dmJHdHBkQ2M3WEc1Y2JuUjVjR1VnUVd4bmIzSnBkR2h0SUQwZ0oxTklRUzB4SnlCOElDZFRTRUV0TWpVMkp5QjhJQ2RUU0VFdE16ZzBKeUI4SUNkVFNFRXROVEV5Snp0Y2JseHVZMjl1YzNRZ1JFVkdRVlZNVkY5QlRFYzZJRUZzWjI5eWFYUm9iU0E5SUNkVFNFRXRNalUySnp0Y2JseHVMeW9xWEc0Z0tpQkRZV3hqZFd4aGRHVnpJSFJvWlNCVFNFRWdiMllnWVNCaWRXWm1aWElnYjNJZ1lteHZZaUIxYzJsdVp5QlhaV0pEY25sd2RHOWNiaUFxTDF4dVpYaHdiM0owSUdGemVXNWpJR1oxYm1OMGFXOXVJSE5vWVNoY2JpQWdaR0YwWVRvZ1FYSnlZWGxDZFdabVpYSWdmQ0JDYkc5aUxGeHVJQ0JoYkdkdmNtbDBhRzA2SUVGc1oyOXlhWFJvYlNBOUlFUkZSa0ZWVEZSZlFVeEhMRnh1S1NCN1hHNGdJR052Ym5OMElHSjFabVpsY2lBOUlHUmhkR0VnYVc1emRHRnVZMlZ2WmlCQmNuSmhlVUoxWm1abGNpQS9JR1JoZEdFZ09pQmhkMkZwZENCa1lYUmhMbUZ5Y21GNVFuVm1abVZ5S0NrN1hHNGdJQzh2SUdSbFpYQmpiMlJsSUdsbmJtOXlaU0JKYm5ObFkzVnlaVWhoYzJnNklIVnpaV1FnWm05eUlHTnZiWEJoY21semIyNHNJRzV2ZENCelpXTjFjbWwwZVZ4dUlDQmpiMjV6ZENCb1lYTm9RblZtSUQwZ1lYZGhhWFFnWTNKNWNIUnZMbk4xWW5Sc1pTNWthV2RsYzNRb1lXeG5iM0pwZEdodExDQmlkV1ptWlhJcE8xeHVJQ0JqYjI1emRDQm9ZWE5vUVhKeUlEMGdRWEp5WVhrdVpuSnZiU2h1WlhjZ1ZXbHVkRGhCY25KaGVTaG9ZWE5vUW5WbUtTazdYRzRnSUM4dklHSmhjMlUyTkNCbGJtTnZaR1VnZEdobElHaGhjMmhjYmlBZ2NtVjBkWEp1SUdKMGIyRW9hR0Z6YUVGeWNpNXRZWEFvS0dJcElEMCtJRk4wY21sdVp5NW1jbTl0UTJoaGNrTnZaR1VvWWlrcExtcHZhVzRvSnljcEtUdGNibjFjYmx4dVpYaHdiM0owSUdGemVXNWpJR1oxYm1OMGFXOXVJR3hoWW1Wc1pXUlRhR0VvWEc0Z0lHUmhkR0U2SUVKc2IySXNYRzRnSUdGc1oyOXlhWFJvYlRvZ1FXeG5iM0pwZEdodElEMGdSRVZHUVZWTVZGOUJURWNzWEc0cElIdGNiaUFnWTI5dWMzUWdhR0Z6YUNBOUlHRjNZV2wwSUhOb1lTaGtZWFJoTENCaGJHZHZjbWwwYUcwcE8xeHVJQ0JqYjI1emRDQndjbVZtYVhnZ1BTQmhiR2R2Y21sMGFHMHVkRzlUZEhKcGJtY29LUzUwYjB4dmQyVnlRMkZ6WlNncExuSmxjR3hoWTJVb0p5MG5MQ0FuSnlrN1hHNGdJR052Ym5OMElITjFabVpwZUNBOUlHUmhkR0V1ZEhsd1pTNXpjR3hwZENnbkx5Y3BXekZkSUQ4L0lDZGlhVzRuTzF4dUlDQnlaWFIxY200Z1lDUjdjSEpsWm1sNGZTMGtlMmhoYzJoOUxpUjdjM1ZtWm1sNGZXQTdYRzU5WEc1Y2JtVjRjRzl5ZENCaGMzbHVZeUJtZFc1amRHbHZiaUJuWlhSU1pYTnZkWEpqWlZKbFptVnlaVzVqWlNoY2JpQWdaR0YwWVRvZ1FteHZZaXhjYmlBZ2FXNXpkR0Z1WTJWSlpEb2djM1J5YVc1bklId2diblZzYkN4Y2JpQWdZV3huYjNKcGRHaHRPaUJCYkdkdmNtbDBhRzBnUFNCRVJVWkJWVXhVWDBGTVJ5eGNiaWs2SUZCeWIyMXBjMlU4VW1WemIzVnlZMlZTWldabGNtVnVZMlUrSUh0Y2JpQWdZMjl1YzNRZ2MzVm1abWw0SUQwZ1pHRjBZUzUwZVhCbExuTndiR2wwS0Njdkp5bGJNVjBnUHo4Z0oySnBiaWM3WEc0Z0lHTnZibk4wSUdsa1pXNTBhV1pwWlhJZ1BTQnBibk4wWVc1alpVbGtYRzRnSUNBZ1B5QmdKSHRwYm5OMFlXNWpaVWxrTG5KbGNHeGhZMlVvTDF0ZVlTMTZNQzA1WEZ3dFhTc3ZaMmtzSUNjdEp5bDlMaVI3YzNWbVptbDRmV0JjYmlBZ0lDQTZJR0YzWVdsMElHeGhZbVZzWldSVGFHRW9aR0YwWVN3Z1lXeG5iM0pwZEdodEtUdGNiaUFnY21WMGRYSnVJSHRjYmlBZ0lDQm1iM0p0WVhRNklHUmhkR0V1ZEhsd1pTeGNiaUFnSUNCcFpHVnVkR2xtYVdWeUxGeHVJQ0I5TzF4dWZWeHVJaXdpTHlvcVhHNGdLaUJEYjNCNWNtbG5hSFFnTWpBeU15QkJaRzlpWlZ4dUlDb2dRV3hzSUZKcFoyaDBjeUJTWlhObGNuWmxaQzVjYmlBcVhHNGdLaUJPVDFSSlEwVTZJRUZrYjJKbElIQmxjbTFwZEhNZ2VXOTFJSFJ2SUhWelpTd2diVzlrYVdaNUxDQmhibVFnWkdsemRISnBZblYwWlNCMGFHbHpJR1pwYkdVZ2FXNWNiaUFxSUdGalkyOXlaR0Z1WTJVZ2QybDBhQ0IwYUdVZ2RHVnliWE1nYjJZZ2RHaGxJRUZrYjJKbElHeHBZMlZ1YzJVZ1lXZHlaV1Z0Wlc1MElHRmpZMjl0Y0dGdWVXbHVaMXh1SUNvZ2FYUXVYRzRnS2k5Y2JseHVhVzF3YjNKMElIc2dVbVZ6YjNWeVkyVlNaV1psY21WdVkyVXNJRkpsYzI5MWNtTmxVM1J2Y21VZ2ZTQm1jbTl0SUNkQVl6SndZUzloWkc5aVpTMTBiMjlzYTJsMEp6dGNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR2RsZEZKbGMyOTFjbU5sUVhOQ2JHOWlLRnh1SUNCemRHOXlaVG9nVW1WemIzVnlZMlZUZEc5eVpTeGNiaUFnY21WbVpYSmxibU5sT2lCU1pYTnZkWEpqWlZKbFptVnlaVzVqWlN4Y2Jpa2dlMXh1SUNCamIyNXpkQ0I3SUdadmNtMWhkRG9nZEhsd1pTd2dhV1JsYm5ScFptbGxjaUI5SUQwZ2NtVm1aWEpsYm1ObElEOC9JSHQ5TzF4dUlDQmpiMjV6ZENCa1lYUmhJRDBnYzNSdmNtVXVjbVZ6YjNWeVkyVnpQeTViYVdSbGJuUnBabWxsY2wwN1hHNWNiaUFnYVdZZ0tHUmhkR0VwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUVKc2IySW9XMVZwYm5RNFFYSnlZWGt1Wm5KdmJTaGtZWFJoS1Ywc0lIdGNiaUFnSUNBZ0lIUjVjR1VzWEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnYm5Wc2JEdGNibjFjYmlJc0lpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElESXdNaklnUVdSdlltVmNiaUFxSUVGc2JDQlNhV2RvZEhNZ1VtVnpaWEoyWldRdVhHNGdLbHh1SUNvZ1RrOVVTVU5GT2lCQlpHOWlaU0J3WlhKdGFYUnpJSGx2ZFNCMGJ5QjFjMlVzSUcxdlpHbG1lU3dnWVc1a0lHUnBjM1J5YVdKMWRHVWdkR2hwY3lCbWFXeGxJR2x1WEc0Z0tpQmhZMk52Y21SaGJtTmxJSGRwZEdnZ2RHaGxJSFJsY20xeklHOW1JSFJvWlNCQlpHOWlaU0JzYVdObGJuTmxJR0ZuY21WbGJXVnVkQ0JoWTJOdmJYQmhibmxwYm1kY2JpQXFJR2wwTGx4dUlDb3ZYRzVjYm1sdGNHOXlkQ0I3SUZKbGMyOTFjbU5sVW1WbVpYSmxibU5sTENCU1pYTnZkWEpqWlZOMGIzSmxJSDBnWm5KdmJTQW5RR015Y0dFdllXUnZZbVV0ZEc5dmJHdHBkQ2M3WEc1cGJYQnZjblFnZXlCemFHRWdmU0JtY205dElDY3VMMnhwWWk5b1lYTm9KenRjYm1sdGNHOXlkQ0I3SUdkbGRGSmxjMjkxY21ObFFYTkNiRzlpSUgwZ1puSnZiU0FuTGk5eVpYTnZkWEpqWlhNbk8xeHVaWGh3YjNKMElHbHVkR1Z5Wm1GalpTQkNiRzlpVlhKc1JHRjBZU0I3WEc0Z0lIVnliRG9nYzNSeWFXNW5PMXh1ZlZ4dVhHNWxlSEJ2Y25RZ2RIbHdaU0JFYVhOd2IzTmhZbXhsUW14dllsVnliQ0E5SUVKc2IySlZjbXhFWVhSaElDWWdlMXh1SUNCa2FYTndiM05sT2lBb0tTQTlQaUIyYjJsa08xeHVmVHRjYmx4dVpYaHdiM0owSUdsdWRHVnlabUZqWlNCVWFIVnRZbTVoYVd3Z2UxeHVJQ0JpYkc5aVB6b2dRbXh2WWp0Y2JpQWdZMjl1ZEdWdWRGUjVjR1U2SUhOMGNtbHVaeUI4SUhWdVpHVm1hVzVsWkR0Y2JpQWdhR0Z6YUQ4NklDZ3BJRDArSUZCeWIyMXBjMlU4YzNSeWFXNW5QanRjYmlBZ1oyVjBWWEpzT2lBb0tTQTlQaUJFYVhOd2IzTmhZbXhsUW14dllsVnliRHRjYm4xY2JseHVMeW9xWEc0Z0tpQkRjbVZoZEdWeklHRWdabUZqWVdSbElHOWlhbVZqZENCM2FYUm9JR052Ym5abGJtbGxibU5sSUcxbGRHaHZaSE1nYjNabGNpQjBhSFZ0WW01aGFXd2daR0YwWVNCeVpYUjFjbTVsWkNCbWNtOXRJSFJvWlNCMGIyOXNhMmwwTGx4dUlDcGNiaUFxSUVCd1lYSmhiU0J5WlhOdmRYSmpaVk4wYjNKbElGUm9aU0J5WlhOdmRYSmpaU0J6ZEc5eVpTQmhkSFJoWTJobFpDQjBieUIwYUdVZ1VtVnpiM1Z5WTJWUVlYSmxiblJjYmlBcUlFQndZWEpoYlNCeVpYTnZkWEpqWlZKbFptVnlaVzVqWlNCVWFHVWdjbVZtWlhKbGJtTmxJSFJ2SUhSb1pTQnlaWE52ZFhKalpTQjBhR0YwSUhCeWIzWnBaR1Z6SUhSb1pTQjBhSFZ0WW01aGFXd2daR0YwWVZ4dUlDb3ZYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdZM0psWVhSbFZHaDFiV0p1WVdsc0tGeHVJQ0J5WlhOdmRYSmpaVk4wYjNKbE9pQlNaWE52ZFhKalpWTjBiM0psTEZ4dUlDQnlaWE52ZFhKalpWSmxabVZ5Wlc1alpUODZJRkpsYzI5MWNtTmxVbVZtWlhKbGJtTmxMRnh1S1RvZ1ZHaDFiV0p1WVdsc0lId2diblZzYkNCN1hHNGdJR052Ym5OMElHSnNiMklnUFZ4dUlDQWdJSEpsYzI5MWNtTmxVbVZtWlhKbGJtTmxJQ1ltSUdkbGRGSmxjMjkxY21ObFFYTkNiRzlpS0hKbGMyOTFjbU5sVTNSdmNtVXNJSEpsYzI5MWNtTmxVbVZtWlhKbGJtTmxLVHRjYmx4dUlDQnBaaUFvSVdKc2IySXBJSHRjYmlBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUI3WEc0Z0lDQWdZbXh2WWl4Y2JpQWdJQ0JqYjI1MFpXNTBWSGx3WlRvZ2NtVnpiM1Z5WTJWU1pXWmxjbVZ1WTJVdVptOXliV0YwTEZ4dVhHNGdJQ0FnYUdGemFEb2dLQ2tnUFQ0Z2MyaGhLR0pzYjJJcExGeHVYRzRnSUNBZ1oyVjBWWEpzT2lBb0tTQTlQaUJqY21WaGRHVlBZbXBsWTNSVmNteEdjbTl0UW14dllpaGliRzlpS1N4Y2JpQWdmVHRjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHTnlaV0YwWlZSb2RXMWlibUZwYkVaeWIyMUNiRzlpS0Z4dUlDQmliRzlpT2lCQ2JHOWlMRnh1SUNCamIyNTBaVzUwVkhsd1pUb2djM1J5YVc1bkxGeHVLVG9nVkdoMWJXSnVZV2xzSUh0Y2JpQWdjbVYwZFhKdUlIdGNiaUFnSUNCaWJHOWlMRnh1SUNBZ0lHTnZiblJsYm5SVWVYQmxMRnh1WEc0Z0lDQWdhR0Z6YURvZ0tDa2dQVDRnYzJoaEtHSnNiMklwTEZ4dVhHNGdJQ0FnWjJWMFZYSnNPaUFvS1NBOVBpQmpjbVZoZEdWUFltcGxZM1JWY214R2NtOXRRbXh2WWloaWJHOWlLU3hjYmlBZ2ZUdGNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdOeVpXRjBaVlJvZFcxaWJtRnBiRVp5YjIxVmNtd29kWEpzT2lCemRISnBibWNwT2lCVWFIVnRZbTVoYVd3Z2UxeHVJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lHTnZiblJsYm5SVWVYQmxPaUIxYm1SbFptbHVaV1FzWEc0Z0lDQWdaMlYwVlhKc09pQW9LU0E5UGlBb2UxeHVJQ0FnSUNBZ2RYSnNMRnh1SUNBZ0lDQWdaR2x6Y0c5elpUb2dLQ2tnUFQ0Z2UzMHNYRzRnSUNBZ2ZTa3NYRzRnSUgwN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdOeVpXRjBaVTlpYW1WamRGVnliRVp5YjIxQ2JHOWlLR0pzYjJJNklFSnNiMklwT2lCRWFYTndiM05oWW14bFFteHZZbFZ5YkNCN1hHNGdJR052Ym5OMElIVnliQ0E5SUZWU1RDNWpjbVZoZEdWUFltcGxZM1JWVWt3b1lteHZZaWs3WEc1Y2JpQWdjbVYwZFhKdUlIdGNiaUFnSUNCMWNtd3NYRzRnSUNBZ1pHbHpjRzl6WlRvZ0tDa2dQVDRnVlZKTUxuSmxkbTlyWlU5aWFtVmpkRlZTVENoMWNtd3BMRnh1SUNCOU8xeHVmVnh1SWl3aUx5b3FYRzRnS2lCRGIzQjVjbWxuYUhRZ01qQXlNaUJCWkc5aVpWeHVJQ29nUVd4c0lGSnBaMmgwY3lCU1pYTmxjblpsWkM1Y2JpQXFYRzRnS2lCT1QxUkpRMFU2SUVGa2IySmxJSEJsY20xcGRITWdlVzkxSUhSdklIVnpaU3dnYlc5a2FXWjVMQ0JoYm1RZ1pHbHpkSEpwWW5WMFpTQjBhR2x6SUdacGJHVWdhVzVjYmlBcUlHRmpZMjl5WkdGdVkyVWdkMmwwYUNCMGFHVWdkR1Z5YlhNZ2IyWWdkR2hsSUVGa2IySmxJR3hwWTJWdWMyVWdZV2R5WldWdFpXNTBJR0ZqWTI5dGNHRnVlV2x1WjF4dUlDb2dhWFF1WEc0Z0tpOWNibHh1YVcxd2IzSjBJSHNnU1c1bmNtVmthV1Z1ZEN3Z1RXVjBZV1JoZEdFc0lGWmhiR2xrWVhScGIyNVRkR0YwZFhNZ2ZTQm1jbTl0SUNkQVl6SndZUzloWkc5aVpTMTBiMjlzYTJsMEp6dGNibWx0Y0c5eWRDQjdJRTFoYm1sbVpYTjBJSDBnWm5KdmJTQW5MaTl0WVc1cFptVnpkQ2M3WEc1cGJYQnZjblFnZXlCVWFIVnRZbTVoYVd3c0lHTnlaV0YwWlZSb2RXMWlibUZwYkNCOUlHWnliMjBnSnk0dmRHaDFiV0p1WVdsc0p6dGNibHh1THlvcVhHNGdLaUJKYm5SbGNtWmhZMlVnWm05eUlHbHVaM0psWkdsbGJuUnpJSFJvWVhRZ1kyOXRaU0JpWVdOcklIWnBZU0IwYUdVZ1lISmxZV1JnSUcxbGRHaHZaSE11SUZkbElHTmhiR3dnZEdocGN5QmdVbVZoWkVsdVozSmxaR2xsYm5SZ1hHNGdLaUIwYnlCa2FYTjBhVzVuZFdsemFDQnBkSE5sYkdZZ1puSnZiU0IwYUdVZ1lFbHVaM0psWkdsbGJuUmdJR2x1ZEdWeVptRmpaU0IwYUdGMElHTnZiV1Z6SUdKaFkyc2dabkp2YlNCMGFHVWdkRzl2Ykd0cGRDNGdWR2hwYzF4dUlDb2dZV1JrY3lCMGFHbHVaM01nYkdsclpTQmpZVzFsYkMxallYTnBibWNnWVc1a0lHTnZiblpsYm1sbGJtTmxJRzFsZEdodlpITWdabTl5SUhSb2RXMWlibUZwYkhNZ1lXNWtJRzFoYm1sbVpYTjBjeTVjYmlBcVhHNGdLaUJVVDBSUE9pQlRaV1VnYVdZZ2QyVWdZMkZ1SUhKbFkyOXVZMmxzWlNCdmNpQmxlSFJsYm1RZ2RHaHBjeUJtY205dElIUm9aU0JnU1c1bmNtVmthV1Z1ZEdBZ2FXNTBaWEptWVdObElHTnZiV2x1WnlCaVlXTnJJR1p5YjIxY2JpQXFJSFJvWlNCMGIyOXNhMmwwSUhOdklIUm9ZWFFnZDJVZ1pHOXVKM1FnYUdGMlpTQjBkMjhnYzJsdGFXeGhjaUJoYm1RZ1kyOXVablZ6YVc1bklHbHVkR1Z5Wm1GalpYTXVYRzRnS2k5Y2JtVjRjRzl5ZENCcGJuUmxjbVpoWTJVZ1VtVmhaRWx1WjNKbFpHbGxiblFnZTF4dUlDQXZLaXBjYmlBZ0lDb2dTSFZ0WVc0dGNtVmhaR0ZpYkdVZ2RHbDBiR1VzSUdkbGJtVnlZV3hzZVNCemIzVnlZMlVnWm1sc1pXNWhiV1ZjYmlBZ0lDb3ZYRzRnSUhScGRHeGxPaUJ6ZEhKcGJtYzdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFMUpUVVVnZEhsd1pTQnZaaUIwYUdVZ1lYTnpaWFFnWVhOemIyTnBZWFJsWkNCM2FYUm9JSFJvYVhNZ2FXNW5jbVZrYVdWdWRGeHVJQ0FnS2k5Y2JpQWdabTl5YldGME9pQnpkSEpwYm1jN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVSdlkzVnRaVzUwSUVsRUlHWnliMjBnWUhodGNFMU5Pa1J2WTNWdFpXNTBTVVJnSUdsdUlGaE5VQ0J0WlhSaFpHRjBZVnh1SUNBZ0tpOWNiaUFnWkc5amRXMWxiblJKWkRvZ2MzUnlhVzVuSUh3Z2JuVnNiRHRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dTVzV6ZEdGdVkyVWdTVVFnWm5KdmJTQmdlRzF3VFUwNlNXNXpkR0Z1WTJWSlJHQWdhVzRnV0UxUUlHMWxkR0ZrWVhSaFhHNGdJQ0FxTDF4dUlDQnBibk4wWVc1alpVbGtPaUJ6ZEhKcGJtYzdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGVlNTU0JtY205dElHQmtZM1JsY20xek9uQnliM1psYm1GdVkyVmdJR2x1SUZoTlVDQnRaWFJoWkdGMFlWeHVJQ0FnS2k5Y2JpQWdjSEp2ZG1WdVlXNWpaVG9nYzNSeWFXNW5JSHdnYm5Wc2JEdGNibHh1SUNBdktpcGNiaUFnSUNvZ1QzQjBhVzl1WVd3Z2FHRnphQ0J2WmlCMGFHVWdZWE56WlhRZ2RHOGdjSEpsZG1WdWRDQmtkWEJzYVdOaGRHVnpYRzRnSUNBcUwxeHVJQ0JvWVhOb09pQnpkSEpwYm1jZ2ZDQnVkV3hzTzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJEWVc0Z1ltVWdZR052YlhCdmJtVnVkRTltWUNCdmNpQmdjR0Z5Wlc1MFQyWmdYRzRnSUNBcUwxeHVJQ0J5Wld4aGRHbHZibk5vYVhBNklITjBjbWx1Wnp0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVm1Gc2FXUmhkR2x2YmlCbGNuSnZjbk1nWVhOemIyTnBZWFJsWkNCM2FYUm9JSFJvYVhNZ2FXNW5jbVZrYVdWdWRGeHVJQ0FnS2k5Y2JpQWdkbUZzYVdSaGRHbHZibE4wWVhSMWN6b2dWbUZzYVdSaGRHbHZibE4wWVhSMWMxdGRPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlVhR1VnYldGdWFXWmxjM1FnWTI5dWRHRnBibVZrSUhkcGRHaHBiaUIwYUdseklHbHVaM0psWkdsbGJuUXNJR2xtSUdGd2NHeHBZMkZpYkdWY2JpQWdJQ292WEc0Z0lHMWhibWxtWlhOME9pQk5ZVzVwWm1WemRDQjhJRzUxYkd3N1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUZSb2RXMWlibUZwYkNCaFkyTmxjM052Y2l3Z2FXWWdZWFpoYVd4aFlteGxYRzRnSUNBcUwxeHVJQ0IwYUhWdFltNWhhV3c2SUZSb2RXMWlibUZwYkNCOElHNTFiR3c3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUZrWkdsMGFXOXVZV3dnYldWMFlXUmhkR0VnWVhNZ1pHVm1hVzVsWkNCaWVTQjBhR1VnUXpKUVFTQnpjR1ZqWEc0Z0lDQXFMMXh1SUNCdFpYUmhaR0YwWVRvZ1RXVjBZV1JoZEdFZ2ZDQnVkV3hzTzF4dWZWeHVYRzR2S2lwY2JpQXFJRU55WldGMFpYTWdZU0JtWVdOaFpHVWdiMkpxWldOMElIZHBkR2dnWTI5dWRtVnVhV1Z1WTJVZ2JXVjBhRzlrY3lCdmRtVnlJR2x1WjNKbFpHbGxiblFnWkdGMFlTQnlaWFIxY201bFpDQm1jbTl0SUhSb1pTQjBiMjlzYTJsMExseHVJQ3BjYmlBcUlFQndZWEpoYlNCcGJtZHlaV1JwWlc1MFJHRjBZU0JTWVhjZ2FXNW5jbVZrYVdWdWRDQmtZWFJoSUhKbGRIVnlibVZrSUdKNUlIUm9aU0IwYjI5c2EybDBYRzRnS2lCQWNHRnlZVzBnYldGdWFXWmxjM1FnU1dZZ2NISnZkbWxrWldRc0lIUm9aU0JqY21WaGRHVmtJR2x1WjNKbFpHbGxiblFnZDJsc2JDQnNhVzVySUhSdklIUm9hWE1nYldGdWFXWmxjM1F1SUZSb2FYTWdjMmh2ZFd4a0lHSmxJSFJvWlNCdFlXNXBabVZ6ZENCM2FYUm9JR0VnYkdGaVpXd2diV0YwWTJocGJtY2dkR2hwY3lCcGJtZHlaV1JwWlc1MEozTWdiV0Z1YVdabGMzUkpaQ0JtYVdWc1pDNWNiaUFxTDF4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdOeVpXRjBaVWx1WjNKbFpHbGxiblFvWEc0Z0lHbHVaM0psWkdsbGJuUkVZWFJoT2lCSmJtZHlaV1JwWlc1MExGeHVJQ0J0WVc1cFptVnpkRDg2SUUxaGJtbG1aWE4wTEZ4dUtUb2dVbVZoWkVsdVozSmxaR2xsYm5RZ2UxeHVJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lIUnBkR3hsT2lCcGJtZHlaV1JwWlc1MFJHRjBZUzUwYVhSc1pTeGNiaUFnSUNCbWIzSnRZWFE2SUdsdVozSmxaR2xsYm5SRVlYUmhMbVp2Y20xaGRDeGNiaUFnSUNCa2IyTjFiV1Z1ZEVsa09pQnBibWR5WldScFpXNTBSR0YwWVM1a2IyTjFiV1Z1ZEY5cFpDQS9QeUJ1ZFd4c0xGeHVJQ0FnSUdsdWMzUmhibU5sU1dRNklHbHVaM0psWkdsbGJuUkVZWFJoTG1sdWMzUmhibU5sWDJsa0xGeHVJQ0FnSUhCeWIzWmxibUZ1WTJVNklHbHVaM0psWkdsbGJuUkVZWFJoTG5CeWIzWmxibUZ1WTJVZ1B6OGdiblZzYkN4Y2JpQWdJQ0JvWVhOb09pQnBibWR5WldScFpXNTBSR0YwWVM1b1lYTm9JRDgvSUc1MWJHd3NYRzRnSUNBZ2NtVnNZWFJwYjI1emFHbHdPaUJwYm1keVpXUnBaVzUwUkdGMFlTNXlaV3hoZEdsdmJuTm9hWEFnUHo4Z2JuVnNiQ3hjYmlBZ0lDQjJZV3hwWkdGMGFXOXVVM1JoZEhWek9pQnBibWR5WldScFpXNTBSR0YwWVM1MllXeHBaR0YwYVc5dVgzTjBZWFIxY3lBL1B5QmJYU3hjYmlBZ0lDQnRaWFJoWkdGMFlUb2dhVzVuY21Wa2FXVnVkRVJoZEdFdWJXVjBZV1JoZEdFZ1B6OGdiblZzYkN4Y2JpQWdJQ0J0WVc1cFptVnpkRG9nYldGdWFXWmxjM1FnUHo4Z2JuVnNiQ3hjYmx4dUlDQWdJSFJvZFcxaWJtRnBiRG9nWTNKbFlYUmxWR2gxYldKdVlXbHNLRnh1SUNBZ0lDQWdhVzVuY21Wa2FXVnVkRVJoZEdFdWNtVnpiM1Z5WTJWekxGeHVJQ0FnSUNBZ2FXNW5jbVZrYVdWdWRFUmhkR0V1ZEdoMWJXSnVZV2xzTEZ4dUlDQWdJQ2tzWEc0Z0lIMDdYRzU5WEc0aUxDSXZLaXBjYmlBcUlFTnZjSGx5YVdkb2RDQXlNREl5SUVGa2IySmxYRzRnS2lCQmJHd2dVbWxuYUhSeklGSmxjMlZ5ZG1Wa0xseHVJQ3BjYmlBcUlFNVBWRWxEUlRvZ1FXUnZZbVVnY0dWeWJXbDBjeUI1YjNVZ2RHOGdkWE5sTENCdGIyUnBabmtzSUdGdVpDQmthWE4wY21saWRYUmxJSFJvYVhNZ1ptbHNaU0JwYmx4dUlDb2dZV05qYjNKa1lXNWpaU0IzYVhSb0lIUm9aU0IwWlhKdGN5QnZaaUIwYUdVZ1FXUnZZbVVnYkdsalpXNXpaU0JoWjNKbFpXMWxiblFnWVdOamIyMXdZVzU1YVc1blhHNGdLaUJwZEM1Y2JpQXFMMXh1WEc1cGJYQnZjblFnZTF4dUlDQkRjbVZrWlc1MGFXRnNMRnh1SUNCVGFXZHVZWFIxY21WSmJtWnZMRnh1SUNCTllXNXBabVZ6ZENCaGN5QlViMjlzYTJsMFRXRnVhV1psYzNRc1hHNTlJR1p5YjIwZ0owQmpNbkJoTDJGa2IySmxMWFJ2YjJ4cmFYUW5PMXh1YVcxd2IzSjBJSHNnUVhOelpYSjBhVzl1UVdOalpYTnpiM0lzSUdOeVpXRjBaVUZ6YzJWeWRHbHZia0ZqWTJWemMyOXlJSDBnWm5KdmJTQW5MaTloYzNObGNuUnBiMjV6Snp0Y2JtbHRjRzl5ZENCN0lGSmxZV1JKYm1keVpXUnBaVzUwTENCamNtVmhkR1ZKYm1keVpXUnBaVzUwSUgwZ1puSnZiU0FuTGk5cGJtZHlaV1JwWlc1MEp6dGNibWx0Y0c5eWRDQjdJRTFoYm1sbVpYTjBUV0Z3SUgwZ1puSnZiU0FuTGk5dFlXNXBabVZ6ZEZOMGIzSmxKenRjYm1sdGNHOXlkQ0I3SUZSb2RXMWlibUZwYkN3Z1kzSmxZWFJsVkdoMWJXSnVZV2xzSUgwZ1puSnZiU0FuTGk5MGFIVnRZbTVoYVd3bk8xeHVYRzVsZUhCdmNuUWdhVzUwWlhKbVlXTmxJRTFoYm1sbVpYTjBJSHRjYmlBZ0x5b3FYRzRnSUNBcUlDQklkVzFoYmkxeVpXRmtZV0pzWlNCMGFYUnNaU3dnWjJWdVpYSmhiR3g1SUhOdmRYSmpaU0JtYVd4bGJtRnRaVnh1SUNBZ0tpOWNiaUFnZEdsMGJHVTZJSE4wY21sdVp6dGNibHh1SUNBdktpcGNiaUFnSUNvZ1RVbE5SU0IwZVhCbElHOW1JSFJvWlNCaGMzTmxkQ0JoYzNOdlkybGhkR1ZrSUhkcGRHZ2dkR2hwY3lCdFlXNXBabVZ6ZEZ4dUlDQWdLaTljYmlBZ1ptOXliV0YwT2lCemRISnBibWM3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRTl3ZEdsdmJtRnNJSEJ5WldacGVDQmhaR1JsWkNCMGJ5QjBhR1VnWjJWdVpYSmhkR1ZrSUcxaGJtbG1aWE4wSUd4aFltVnNYRzRnSUNBcUwxeHVJQ0IyWlc1a2IzSTZJSE4wY21sdVp5QjhJRzUxYkd3N1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUZWelpYSWdRV2RsYm5RZ2MzUnlhVzVuSUdsa1pXNTBhV1o1YVc1bklIUm9aU0J6YjJaMGQyRnlaUzlvWVhKa2QyRnlaUzl6ZVhOMFpXMGdkR2hoZENCamNtVmhkR1ZrSUhSb2FYTWdiV0Z1YVdabGMzUmNiaUFnSUNvdlhHNGdJR05zWVdsdFIyVnVaWEpoZEc5eU9pQnpkSEpwYm1jN1hHNGdJR05zWVdsdFIyVnVaWEpoZEc5eVNHbHVkSE02SUZKbFkyOXlaRHh6ZEhKcGJtY3NJSFZ1YTI1dmQyNCtJSHdnYm5Wc2JEdGNibHh1SUNBdktpcGNiaUFnSUNvZ1NXNXpkR0Z1WTJVZ1NVUWdabkp2YlNCZ2VHMXdUVTA2U1c1emRHRnVZMlZKUkdBZ2FXNGdXRTFRSUcxbGRHRmtZWFJoTGx4dUlDQWdLaTljYmlBZ2FXNXpkR0Z1WTJWSlpEb2djM1J5YVc1bk8xeHVYRzRnSUM4cUtseHVJQ0FnS2lCVGFXZHVZWFIxY21VZ2FXNW1iM0p0WVhScGIyNGdLR2x6YzNWbGNpd2daR0YwWlNrZ1lYTnpiMk5wWVhSbFpDQjNhWFJvSUhSb2FYTWdiV0Z1YVdabGMzUmNiaUFnSUNvdlhHNGdJSE5wWjI1aGRIVnlaVWx1Wm04NklGTnBaMjVoZEhWeVpVbHVabThnZkNCdWRXeHNPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQk1hWE4wSUc5bUlGWmxjbWxtYVdGaWJHVWdRM0psWkdWdWRHbGhiSE5jYmlBZ0lDb3ZYRzRnSUdOeVpXUmxiblJwWVd4ek9pQkRjbVZrWlc1MGFXRnNXMTA3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRXhwYzNRZ2IyWWdhVzVuY21Wa2FXVnVkSE1nYVc1amJIVmtaV1FnZDJsMGFHbHVJSFJvYVhNZ2JXRnVhV1psYzNSY2JpQWdJQ292WEc0Z0lHbHVaM0psWkdsbGJuUnpPaUJTWldGa1NXNW5jbVZrYVdWdWRGdGRPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQk1hWE4wSUc5bUlGVlNTWE1nY21WbVpYSmxibU5wYm1jZ2NtVmtZV04wWldRZ1lYTnpaWEowYVc5dWMxeHVJQ0FnS2k5Y2JpQWdjbVZrWVdOMGFXOXVjem9nYzNSeWFXNW5XMTA3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRlJvWlNCdFlXNXBabVZ6ZENCMGFHbHpJRzFoYm1sbVpYTjBJR2x6SUdGdUlHbHVaM0psWkdsbGJuUWdiMllzSUdsbUlHRndjR3hwWTJGaWJHVmNiaUFnSUNvdlhHNGdJSEJoY21WdWREb2dUV0Z1YVdabGMzUWdmQ0J1ZFd4c08xeHVYRzRnSUM4cUtseHVJQ0FnS2lCVWFIVnRZbTVoYVd3Z1lXTmpaWE56YjNJc0lHbG1JR0YyWVdsc1lXSnNaVnh1SUNBZ0tpOWNiaUFnZEdoMWJXSnVZV2xzT2lCVWFIVnRZbTVoYVd3Z2ZDQnVkV3hzTzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJKYm5SbGNtWmhZMlVnY0hKdmRtbGthVzVuSUdGalkyVnpjeUIwYnlCaGMzTmxjblJwYjI1eklHTnZiblJoYVc1bFpDQjNhWFJvYVc0Z2RHaHBjeUJ0WVc1cFptVnpkRnh1SUNBZ0tpOWNiaUFnWVhOelpYSjBhVzl1Y3pvZ1FYTnpaWEowYVc5dVFXTmpaWE56YjNJN1hHNTlYRzVjYmk4cUtseHVJQ29nUTNKbFlYUmxjeUJoSUdaaFkyRmtaU0J2WW1wbFkzUWdkMmwwYUNCamIyNTJaVzVwWlc1alpTQnRaWFJvYjJSeklHOTJaWElnYldGdWFXWmxjM1FnWkdGMFlTQnlaWFIxY201bFpDQm1jbTl0SUhSb1pTQjBiMjlzYTJsMExseHVJQ3BjYmlBcUlFQndZWEpoYlNCdFlXNXBabVZ6ZEVSaGRHRWdVbUYzSUcxaGJtbG1aWE4wSUdSaGRHRWdjbVYwZFhKdVpXUWdZbmtnZEdobElIUnZiMnhyYVhSY2JpQXFJRUJ3WVhKaGJTQnRZVzVwWm1WemRITWdRU0J0WVhBZ2IyWWdjSEpsZG1sdmRYTnNlUzFqY21WaGRHVmtJRzFoYm1sbVpYTjBJRzlpYW1WamRITWdkRzhnWW1VZ2NISnZkbWxrWldRZ2RHOGdhVzVuY21Wa2FXVnVkSE11SUUxMWMzUWdZMjl1ZEdGcGJpQmhibmtnYldGdWFXWmxjM1FnY21WbVpYSmxibU5sWkNCaWVTQjBhR2x6SUcxaGJtbG1aWE4wSjNNZ2FXNW5jbVZrYVdWdWRITXVYRzRnS2k5Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCamNtVmhkR1ZOWVc1cFptVnpkQ2hjYmlBZ2JXRnVhV1psYzNSRVlYUmhPaUJVYjI5c2EybDBUV0Z1YVdabGMzUXNYRzRnSUcxaGJtbG1aWE4wY3pvZ1RXRnVhV1psYzNSTllYQXNYRzRwT2lCTllXNXBabVZ6ZENCN1hHNGdJR052Ym5OMElHbHVaM0psWkdsbGJuUnpJRDBnYldGdWFXWmxjM1JFWVhSaExtbHVaM0psWkdsbGJuUnpMbTFoY0Nnb2FXNW5jbVZrYVdWdWRFUmhkR0VwSUQwK1hHNGdJQ0FnWTNKbFlYUmxTVzVuY21Wa2FXVnVkQ2hjYmlBZ0lDQWdJR2x1WjNKbFpHbGxiblJFWVhSaExGeHVJQ0FnSUNBZ2FXNW5jbVZrYVdWdWRFUmhkR0V1WVdOMGFYWmxYMjFoYm1sbVpYTjBYRzRnSUNBZ0lDQWdJRDhnYldGdWFXWmxjM1J6VzJsdVozSmxaR2xsYm5SRVlYUmhMbUZqZEdsMlpWOXRZVzVwWm1WemRGMWNiaUFnSUNBZ0lDQWdPaUIxYm1SbFptbHVaV1FzWEc0Z0lDQWdLU3hjYmlBZ0tUdGNibHh1SUNCeVpYUjFjbTRnZTF4dUlDQWdJSFJwZEd4bE9pQnRZVzVwWm1WemRFUmhkR0V1ZEdsMGJHVXNYRzRnSUNBZ1ptOXliV0YwT2lCdFlXNXBabVZ6ZEVSaGRHRXVabTl5YldGMExGeHVJQ0FnSUhabGJtUnZjam9nYldGdWFXWmxjM1JFWVhSaExuWmxibVJ2Y2lBL1B5QnVkV3hzTEZ4dUlDQWdJR05zWVdsdFIyVnVaWEpoZEc5eU9pQnRZVzVwWm1WemRFUmhkR0V1WTJ4aGFXMWZaMlZ1WlhKaGRHOXlMRnh1SUNBZ0lHTnNZV2x0UjJWdVpYSmhkRzl5U0dsdWRITTZJRzFoYm1sbVpYTjBSR0YwWVM1amJHRnBiVjluWlc1bGNtRjBiM0pmYUdsdWRITWdQejhnYm5Wc2JDeGNiaUFnSUNCcGJuTjBZVzVqWlVsa09pQnRZVzVwWm1WemRFUmhkR0V1YVc1emRHRnVZMlZmYVdRc1hHNGdJQ0FnYzJsbmJtRjBkWEpsU1c1bWJ6b2diV0Z1YVdabGMzUkVZWFJoTG5OcFoyNWhkSFZ5WlY5cGJtWnZJRDgvSUc1MWJHd3NYRzRnSUNBZ1kzSmxaR1Z1ZEdsaGJITTZJRzFoYm1sbVpYTjBSR0YwWVM1amNtVmtaVzUwYVdGc2N5QS9QeUJiWFN4Y2JpQWdJQ0JwYm1keVpXUnBaVzUwY3l4Y2JpQWdJQ0J5WldSaFkzUnBiMjV6T2lCdFlXNXBabVZ6ZEVSaGRHRXVjbVZrWVdOMGFXOXVjeUEvUHlCYlhTeGNiaUFnSUNCd1lYSmxiblE2SUc1MWJHd3NYRzVjYmlBZ0lDQjBhSFZ0WW01aGFXdzZJR055WldGMFpWUm9kVzFpYm1GcGJDaHRZVzVwWm1WemRFUmhkR0V1Y21WemIzVnlZMlZ6TENCdFlXNXBabVZ6ZEVSaGRHRXVkR2gxYldKdVlXbHNLU3hjYmx4dUlDQWdJR0Z6YzJWeWRHbHZibk02SUdOeVpXRjBaVUZ6YzJWeWRHbHZia0ZqWTJWemMyOXlLRzFoYm1sbVpYTjBSR0YwWVM1aGMzTmxjblJwYjI1ektTeGNiaUFnZlR0Y2JuMWNiaUlzSWk4cUtseHVJQ29nUTI5d2VYSnBaMmgwSURJd01qSWdRV1J2WW1WY2JpQXFJRUZzYkNCU2FXZG9kSE1nVW1WelpYSjJaV1F1WEc0Z0tseHVJQ29nVGs5VVNVTkZPaUJCWkc5aVpTQndaWEp0YVhSeklIbHZkU0IwYnlCMWMyVXNJRzF2WkdsbWVTd2dZVzVrSUdScGMzUnlhV0oxZEdVZ2RHaHBjeUJtYVd4bElHbHVYRzRnS2lCaFkyTnZjbVJoYm1ObElIZHBkR2dnZEdobElIUmxjbTF6SUc5bUlIUm9aU0JCWkc5aVpTQnNhV05sYm5ObElHRm5jbVZsYldWdWRDQmhZMk52YlhCaGJubHBibWRjYmlBcUlHbDBMbHh1SUNvdlhHNWNibWx0Y0c5eWRDQjdYRzRnSUUxaGJtbG1aWE4wSUdGeklGUnZiMnhyYVhSTllXNXBabVZ6ZEN4Y2JpQWdUV0Z1YVdabGMzUlRkRzl5WlNCaGN5QlViMjlzYTJsMFRXRnVhV1psYzNSVGRHOXlaU3hjYmlBZ1ZtRnNhV1JoZEdsdmJsTjBZWFIxY3l4Y2JuMGdabkp2YlNBblFHTXljR0V2WVdSdlltVXRkRzl2Ykd0cGRDYzdYRzVwYlhCdmNuUWdaR1ZpZFdjZ1puSnZiU0FuWkdWaWRXY25PMXh1YVcxd2IzSjBJSHNnWTNKbFlYUmxUV0Z1YVdabGMzUXNJRTFoYm1sbVpYTjBJSDBnWm5KdmJTQW5MaTl0WVc1cFptVnpkQ2M3WEc1Y2JtVjRjRzl5ZENCcGJuUmxjbVpoWTJVZ1RXRnVhV1psYzNSVGRHOXlaU0I3WEc0Z0lDOHFLbHh1SUNBZ0tpQk5ZWEFnYjJZZ1lXeHNJRzFoYm1sbVpYTjBjeUJwYm1Oc2RXUmxaQ0JwYmlCMGFHVWdiV0Z1YVdabGMzUWdjM1J2Y21WY2JpQWdJQ292WEc0Z0lHMWhibWxtWlhOMGN6b2dUV0Z1YVdabGMzUk5ZWEE3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRlJvWlNCaFkzUnBkbVVnYldGdWFXWmxjM1FnYVc0Z2RHaGxJRzFoYm1sbVpYTjBJSE4wYjNKbFhHNGdJQ0FxTDF4dUlDQmhZM1JwZG1WTllXNXBabVZ6ZERvZ1RXRnVhV1psYzNRN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUV4cGMzUWdiMllnZG1Gc2FXUmhkR2x2YmlCbGNuSnZjbk5jYmlBZ0lDb3ZYRzRnSUhaaGJHbGtZWFJwYjI1VGRHRjBkWE02SUZaaGJHbGtZWFJwYjI1VGRHRjBkWE5iWFR0Y2JuMWNibHh1Wlhod2IzSjBJR2x1ZEdWeVptRmpaU0JOWVc1cFptVnpkRTFoY0NCN1hHNGdJRnRyWlhrNklITjBjbWx1WjEwNklFMWhibWxtWlhOME8xeHVmVnh1WEc1MGVYQmxJRTFoYm1sbVpYTjBVM1JoWTJ0RVlYUmhJRDBnZTF4dUlDQmtZWFJoT2lCVWIyOXNhMmwwVFdGdWFXWmxjM1E3WEc0Z0lHeGhZbVZzT2lCemRISnBibWM3WEc1OU8xeHVYRzVqYjI1emRDQmtZbWNnUFNCa1pXSjFaeWduWXpKd1lUcHRZVzVwWm1WemRGTjBiM0psSnlrN1hHNWNiaThxS2x4dUlDb2dRM0psWVhSbGN5QmhJR1poWTJGa1pTQnZZbXBsWTNRZ2QybDBhQ0JqYjI1MlpXNXBaVzVqWlNCdFpYUm9iMlJ6SUc5MlpYSWdiV0Z1YVdabGMzUWdjM1J2Y21VZ1pHRjBZU0J5WlhSMWNtNWxaQ0JtY205dElIUm9aU0IwYjI5c2EybDBMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQmpiMjVtYVdjZ1F6SndZU0JqYjI1bWFXZDFjbUYwYVc5dUlHOWlhbVZqZEZ4dUlDb2dRSEJoY21GdElHMWhibWxtWlhOMFUzUnZjbVZFWVhSaElFMWhibWxtWlhOMElITjBiM0psSUdSaGRHRWdjbVYwZFhKdVpXUWdZbmtnZEdobElIUnZiMnhyYVhSY2JpQXFMMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR055WldGMFpVMWhibWxtWlhOMFUzUnZjbVVvWEc0Z0lHMWhibWxtWlhOMFUzUnZjbVZFWVhSaE9pQlViMjlzYTJsMFRXRnVhV1psYzNSVGRHOXlaU3hjYmlrNklFMWhibWxtWlhOMFUzUnZjbVVnZTF4dUlDQmpiMjV6ZENCdFlXNXBabVZ6ZEhNZ1BTQmpjbVZoZEdWTllXNXBabVZ6ZEhNb2JXRnVhV1psYzNSVGRHOXlaVVJoZEdFcE8xeHVYRzRnSUhKbGRIVnliaUI3WEc0Z0lDQWdiV0Z1YVdabGMzUnpMRnh1SUNBZ0lHRmpkR2wyWlUxaGJtbG1aWE4wT2lCdFlXNXBabVZ6ZEhOYmJXRnVhV1psYzNSVGRHOXlaVVJoZEdFdVlXTjBhWFpsWDIxaGJtbG1aWE4wWFN4Y2JpQWdJQ0IyWVd4cFpHRjBhVzl1VTNSaGRIVnpPaUJ0WVc1cFptVnpkRk4wYjNKbFJHRjBZVDh1ZG1Gc2FXUmhkR2x2Ymw5emRHRjBkWE1nUHo4Z1cxMHNYRzRnSUgwN1hHNTlYRzVjYmk4cUtseHVJQ29nUlc1emRYSmxjeUJ0WVc1cFptVnpkSE1nWVhKbElISmxjMjlzZG1Wa0lHbHVJSFJvWlNCamIzSnlaV04wSUc5eVpHVnlJSFJ2SUdKMWFXeGtJSFJvWlNCY0luUnlaV1ZjSWlCdlppQnRZVzVwWm1WemRITWdZVzVrSUhSb1pXbHlJR2x1WjNKbFpHbGxiblJ6TGx4dUlDcGNiaUFxSUVCd1lYSmhiU0J0WVc1cFptVnpkRk4wYjNKbFJHRjBZVnh1SUNvZ1FISmxkSFZ5Ym5OY2JpQXFMMXh1Wm5WdVkzUnBiMjRnWTNKbFlYUmxUV0Z1YVdabGMzUnpLRzFoYm1sbVpYTjBVM1J2Y21WRVlYUmhPaUJVYjI5c2EybDBUV0Z1YVdabGMzUlRkRzl5WlNrZ2UxeHVJQ0JqYjI1emRDQjdYRzRnSUNBZ2JXRnVhV1psYzNSek9pQjBiMjlzYTJsMFRXRnVhV1psYzNSekxGeHVJQ0FnSUdGamRHbDJaVjl0WVc1cFptVnpkRG9nZEc5dmJHdHBkRUZqZEdsMlpVMWhibWxtWlhOMFNXUXNYRzRnSUgwZ1BTQnRZVzVwWm1WemRGTjBiM0psUkdGMFlUdGNiaUFnWkdKbktDZFNaV05sYVhabFpDQnRZVzVwWm1WemRDQnpkRzl5WlNCbWNtOXRJSFJ2YjJ4cmFYUW5MQ0J0WVc1cFptVnpkRk4wYjNKbFJHRjBZU2s3WEc1Y2JpQWdMeThnVUdWeVptOXliU0JoSUhCdmMzUXRiM0prWlhJZ2RISmhkbVZ5YzJGc0lHOW1JSFJvWlNCdFlXNXBabVZ6ZENCMGNtVmxJQ2hzWldGMlpYTXRkRzh0Y205dmRDa2dkRzhnWjNWaGNtRnVkR1ZsSUhSb1lYUWdZU0J0WVc1cFptVnpkQ2R6SUdsdVozSmxaR2xsYm5SY2JpQWdMeThnYldGdWFXWmxjM1J6SUdGeVpTQmhiSEpsWVdSNUlHRjJZV2xzWVdKc1pTQjNhR1Z1SUdsMElHbHpJR055WldGMFpXUXVYRzVjYmlBZ1kyOXVjM1FnYzNSaFkyczZJRTFoYm1sbVpYTjBVM1JoWTJ0RVlYUmhXMTBnUFNCYlhHNGdJQ0FnZTF4dUlDQWdJQ0FnWkdGMFlUb2dkRzl2Ykd0cGRFMWhibWxtWlhOMGMxdDBiMjlzYTJsMFFXTjBhWFpsVFdGdWFXWmxjM1JKWkYwc1hHNGdJQ0FnSUNCc1lXSmxiRG9nZEc5dmJHdHBkRUZqZEdsMlpVMWhibWxtWlhOMFNXUXNYRzRnSUNBZ2ZTeGNiaUFnWFR0Y2JpQWdZMjl1YzNRZ2NHOXpkRzl5WkdWeVRXRnVhV1psYzNSek9pQk5ZVzVwWm1WemRGTjBZV05yUkdGMFlWdGRJRDBnVzEwN1hHNWNiaUFnZDJocGJHVWdLSE4wWVdOckxteGxibWQwYUNrZ2UxeHVJQ0FnSUdOdmJuTjBJR04xY25KbGJuUWdQU0J6ZEdGamF5NXdiM0FvS1NFN1hHNGdJQ0FnY0c5emRHOXlaR1Z5VFdGdWFXWmxjM1J6TG5WdWMyaHBablFvWTNWeWNtVnVkQ2s3WEc1Y2JpQWdJQ0JqYjI1emRDQjdJR1JoZEdFNklHTjFjbkpsYm5STllXNXBabVZ6ZENCOUlEMGdZM1Z5Y21WdWREdGNibHh1SUNBZ0lHTjFjbkpsYm5STllXNXBabVZ6ZEQ4dWFXNW5jbVZrYVdWdWRITS9MbVp2Y2tWaFkyZ29LSHNnWVdOMGFYWmxYMjFoYm1sbVpYTjBPaUJ0WVc1cFptVnpkRWxrSUgwcElEMCtJSHRjYmlBZ0lDQWdJR2xtSUNodFlXNXBabVZ6ZEVsa0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNodFlXNXBabVZ6ZEZOMGIzSmxSR0YwWVM1dFlXNXBabVZ6ZEhOYmJXRnVhV1psYzNSSlpGMHBJSHRjYmlBZ0lDQWdJQ0FnSUNCemRHRmpheTV3ZFhOb0tIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSaGRHRTZJRzFoYm1sbVpYTjBVM1J2Y21WRVlYUmhMbTFoYm1sbVpYTjBjMXR0WVc1cFptVnpkRWxrWFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hoWW1Wc09pQnRZVzVwWm1WemRFbGtMRnh1SUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJR1JpWnlnblRtOGdiV0Z1YVdabGMzUWdabTkxYm1RZ1ptOXlJR2xrSnl3Z2JXRnVhV1psYzNSSlpDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUdOdmJuTjBJRzl5WkdWeVpXUk5ZVzVwWm1WemRITWdQU0J3YjNOMGIzSmtaWEpOWVc1cFptVnpkSE11Y21Wa2RXTmxLRnh1SUNBZ0lDaHRZVzVwWm1WemRITXNJSE4wWVdOclRXRnVhV1psYzNSRVlYUmhLU0E5UGlCN1hHNGdJQ0FnSUNCamIyNXpkQ0I3SUdSaGRHRTZJRzFoYm1sbVpYTjBSR0YwWVN3Z2JHRmlaV3dnZlNBOUlITjBZV05yVFdGdWFXWmxjM1JFWVhSaE8xeHVJQ0FnSUNBZ1pHSm5LQ2REY21WaGRHbHVaeUJ0WVc1cFptVnpkQ0IzYVhSb0lHUmhkR0VuTENCdFlXNXBabVZ6ZEVSaGRHRXBPMXh1WEc0Z0lDQWdJQ0JqYjI1emRDQnRZVzVwWm1WemRDQTlJR055WldGMFpVMWhibWxtWlhOMEtHMWhibWxtWlhOMFJHRjBZU3dnYldGdWFXWmxjM1J6S1R0Y2JpQWdJQ0FnSUcxaGJtbG1aWE4wYzF0c1lXSmxiRjBnUFNCdFlXNXBabVZ6ZER0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ0WVc1cFptVnpkSE03WEc0Z0lDQWdmU3hjYmlBZ0lDQjdmU0JoY3lCTllXNXBabVZ6ZEUxaGNDeGNiaUFnS1R0Y2JseHVJQ0JqYjI1emRDQnRZVzVwWm1WemRGTjBZV05ySUQwZ1cyOXlaR1Z5WldSTllXNXBabVZ6ZEhOYmRHOXZiR3RwZEVGamRHbDJaVTFoYm1sbVpYTjBTV1JkWFR0Y2JseHVJQ0F2THlCUVpYSm1iM0p0SUdGdUlHbHVMVzl5WkdWeUlIUnlZWFpsY25OaGJDQnZaaUIwYUdVZ2JXRnVhV1psYzNRZ2RISmxaU0IwYnlCelpYUWdKM0JoY21WdWRDY2dkbUZzZFdWeklHOW1JR2x1WjNKbFpHbGxiblFnYldGdWFXWmxjM1J6WEc0Z0lIZG9hV3hsSUNodFlXNXBabVZ6ZEZOMFlXTnJMbXhsYm1kMGFDa2dlMXh1SUNBZ0lHTnZibk4wSUdOMWNuSmxiblJOWVc1cFptVnpkQ0E5SUcxaGJtbG1aWE4wVTNSaFkyc3VjRzl3S0NraE8xeHVYRzRnSUNBZ1kzVnljbVZ1ZEUxaGJtbG1aWE4wTG1sdVozSmxaR2xsYm5SelB5NW1iM0pGWVdOb0tDaDdJRzFoYm1sbVpYTjBJSDBwSUQwK0lIdGNiaUFnSUNBZ0lHbG1JQ2h0WVc1cFptVnpkQ2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J6Wld4bFkzUmxaRTFoYm1sbVpYTjBJRDBnYldGdWFXWmxjM1E3WEc0Z0lDQWdJQ0FnSUhObGJHVmpkR1ZrVFdGdWFXWmxjM1F1Y0dGeVpXNTBJRDBnWTNWeWNtVnVkRTFoYm1sbVpYTjBPMXh1SUNBZ0lDQWdJQ0J0WVc1cFptVnpkRk4wWVdOckxuQjFjMmdvYzJWc1pXTjBaV1JOWVc1cFptVnpkQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnYjNKa1pYSmxaRTFoYm1sbVpYTjBjenRjYm4xY2JpSXNJblpoY2lCdmRtVnlRWEpuSUQwZ2NtVnhkV2x5WlNnbkxpOWZiM1psY2tGeVp5Y3BPMXh1WEc0dktpQkNkV2xzZEMxcGJpQnRaWFJvYjJRZ2NtVm1aWEpsYm1ObGN5Qm1iM0lnZEdodmMyVWdkMmwwYUNCMGFHVWdjMkZ0WlNCdVlXMWxJR0Z6SUc5MGFHVnlJR0JzYjJSaGMyaGdJRzFsZEdodlpITXVJQ292WEc1MllYSWdibUYwYVhabFMyVjVjeUE5SUc5MlpYSkJjbWNvVDJKcVpXTjBMbXRsZVhNc0lFOWlhbVZqZENrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdibUYwYVhabFMyVjVjenRjYmlJc0luWmhjaUJwYzFCeWIzUnZkSGx3WlNBOUlISmxjWFZwY21Vb0p5NHZYMmx6VUhKdmRHOTBlWEJsSnlrc1hHNGdJQ0FnYm1GMGFYWmxTMlY1Y3lBOUlISmxjWFZwY21Vb0p5NHZYMjVoZEdsMlpVdGxlWE1uS1R0Y2JseHVMeW9xSUZWelpXUWdabTl5SUdKMWFXeDBMV2x1SUcxbGRHaHZaQ0J5WldabGNtVnVZMlZ6TGlBcUwxeHVkbUZ5SUc5aWFtVmpkRkJ5YjNSdklEMGdUMkpxWldOMExuQnliM1J2ZEhsd1pUdGNibHh1THlvcUlGVnpaV1FnZEc4Z1kyaGxZMnNnYjJKcVpXTjBjeUJtYjNJZ2IzZHVJSEJ5YjNCbGNuUnBaWE11SUNvdlhHNTJZWElnYUdGelQzZHVVSEp2Y0dWeWRIa2dQU0J2WW1wbFkzUlFjbTkwYnk1b1lYTlBkMjVRY205d1pYSjBlVHRjYmx4dUx5b3FYRzRnS2lCVWFHVWdZbUZ6WlNCcGJYQnNaVzFsYm5SaGRHbHZiaUJ2WmlCZ1h5NXJaWGx6WUNCM2FHbGphQ0JrYjJWemJpZDBJSFJ5WldGMElITndZWEp6WlNCaGNuSmhlWE1nWVhNZ1pHVnVjMlV1WEc0Z0tseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCdlltcGxZM1FnVkdobElHOWlhbVZqZENCMGJ5QnhkV1Z5ZVM1Y2JpQXFJRUJ5WlhSMWNtNXpJSHRCY25KaGVYMGdVbVYwZFhKdWN5QjBhR1VnWVhKeVlYa2diMllnY0hKdmNHVnlkSGtnYm1GdFpYTXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHSmhjMlZMWlhsektHOWlhbVZqZENrZ2UxeHVJQ0JwWmlBb0lXbHpVSEp2ZEc5MGVYQmxLRzlpYW1WamRDa3BJSHRjYmlBZ0lDQnlaWFIxY200Z2JtRjBhWFpsUzJWNWN5aHZZbXBsWTNRcE8xeHVJQ0I5WEc0Z0lIWmhjaUJ5WlhOMWJIUWdQU0JiWFR0Y2JpQWdabTl5SUNoMllYSWdhMlY1SUdsdUlFOWlhbVZqZENodlltcGxZM1FwS1NCN1hHNGdJQ0FnYVdZZ0tHaGhjMDkzYmxCeWIzQmxjblI1TG1OaGJHd29iMkpxWldOMExDQnJaWGtwSUNZbUlHdGxlU0FoUFNBblkyOXVjM1J5ZFdOMGIzSW5LU0I3WEc0Z0lDQWdJQ0J5WlhOMWJIUXVjSFZ6YUNoclpYa3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQnlaWFIxY200Z2NtVnpkV3gwTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR0poYzJWTFpYbHpPMXh1SWl3aWRtRnlJR0Z5Y21GNVRHbHJaVXRsZVhNZ1BTQnlaWEYxYVhKbEtDY3VMMTloY25KaGVVeHBhMlZMWlhsekp5a3NYRzRnSUNBZ1ltRnpaVXRsZVhNZ1BTQnlaWEYxYVhKbEtDY3VMMTlpWVhObFMyVjVjeWNwTEZ4dUlDQWdJR2x6UVhKeVlYbE1hV3RsSUQwZ2NtVnhkV2x5WlNnbkxpOXBjMEZ5Y21GNVRHbHJaU2NwTzF4dVhHNHZLaXBjYmlBcUlFTnlaV0YwWlhNZ1lXNGdZWEp5WVhrZ2IyWWdkR2hsSUc5M2JpQmxiblZ0WlhKaFlteGxJSEJ5YjNCbGNuUjVJRzVoYldWeklHOW1JR0J2WW1wbFkzUmdMbHh1SUNwY2JpQXFJQ29xVG05MFpUb3FLaUJPYjI0dGIySnFaV04wSUhaaGJIVmxjeUJoY21VZ1kyOWxjbU5sWkNCMGJ5QnZZbXBsWTNSekxpQlRaV1VnZEdobFhHNGdLaUJiUlZNZ2MzQmxZMTBvYUhSMGNEb3ZMMlZqYldFdGFXNTBaWEp1WVhScGIyNWhiQzV2Y21jdlpXTnRZUzB5TmpJdk55NHdMeU56WldNdGIySnFaV04wTG10bGVYTXBYRzRnS2lCbWIzSWdiVzl5WlNCa1pYUmhhV3h6TGx4dUlDcGNiaUFxSUVCemRHRjBhV05jYmlBcUlFQnphVzVqWlNBd0xqRXVNRnh1SUNvZ1FHMWxiV0psY2s5bUlGOWNiaUFxSUVCallYUmxaMjl5ZVNCUFltcGxZM1JjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCdlltcGxZM1FnVkdobElHOWlhbVZqZENCMGJ5QnhkV1Z5ZVM1Y2JpQXFJRUJ5WlhSMWNtNXpJSHRCY25KaGVYMGdVbVYwZFhKdWN5QjBhR1VnWVhKeVlYa2diMllnY0hKdmNHVnlkSGtnYm1GdFpYTXVYRzRnS2lCQVpYaGhiWEJzWlZ4dUlDcGNiaUFxSUdaMWJtTjBhVzl1SUVadmJ5Z3BJSHRjYmlBcUlDQWdkR2hwY3k1aElEMGdNVHRjYmlBcUlDQWdkR2hwY3k1aUlEMGdNanRjYmlBcUlIMWNiaUFxWEc0Z0tpQkdiMjh1Y0hKdmRHOTBlWEJsTG1NZ1BTQXpPMXh1SUNwY2JpQXFJRjh1YTJWNWN5aHVaWGNnUm05dktUdGNiaUFxSUM4dklEMCtJRnNuWVNjc0lDZGlKMTBnS0dsMFpYSmhkR2x2YmlCdmNtUmxjaUJwY3lCdWIzUWdaM1ZoY21GdWRHVmxaQ2xjYmlBcVhHNGdLaUJmTG10bGVYTW9KMmhwSnlrN1hHNGdLaUF2THlBOVBpQmJKekFuTENBbk1TZGRYRzRnS2k5Y2JtWjFibU4wYVc5dUlHdGxlWE1vYjJKcVpXTjBLU0I3WEc0Z0lISmxkSFZ5YmlCcGMwRnljbUY1VEdsclpTaHZZbXBsWTNRcElEOGdZWEp5WVhsTWFXdGxTMlY1Y3lodlltcGxZM1FwSURvZ1ltRnpaVXRsZVhNb2IySnFaV04wS1R0Y2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JyWlhsek8xeHVJaXdpZG1GeUlHSmhjMlZHYjNJZ1BTQnlaWEYxYVhKbEtDY3VMMTlpWVhObFJtOXlKeWtzWEc0Z0lDQWdhMlY1Y3lBOUlISmxjWFZwY21Vb0p5NHZhMlY1Y3ljcE8xeHVYRzR2S2lwY2JpQXFJRlJvWlNCaVlYTmxJR2x0Y0d4bGJXVnVkR0YwYVc5dUlHOW1JR0JmTG1admNrOTNibUFnZDJsMGFHOTFkQ0J6ZFhCd2IzSjBJR1p2Y2lCcGRHVnlZWFJsWlNCemFHOXlkR2hoYm1SekxseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdiMkpxWldOMElGUm9aU0J2WW1wbFkzUWdkRzhnYVhSbGNtRjBaU0J2ZG1WeUxseHVJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnYVhSbGNtRjBaV1VnVkdobElHWjFibU4wYVc5dUlHbHVkbTlyWldRZ2NHVnlJR2wwWlhKaGRHbHZiaTVjYmlBcUlFQnlaWFIxY201eklIdFBZbXBsWTNSOUlGSmxkSFZ5Ym5NZ1lHOWlhbVZqZEdBdVhHNGdLaTljYm1aMWJtTjBhVzl1SUdKaGMyVkdiM0pQZDI0b2IySnFaV04wTENCcGRHVnlZWFJsWlNrZ2UxeHVJQ0J5WlhSMWNtNGdiMkpxWldOMElDWW1JR0poYzJWR2IzSW9iMkpxWldOMExDQnBkR1Z5WVhSbFpTd2dhMlY1Y3lrN1hHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWW1GelpVWnZjazkzYmp0Y2JpSXNJaThxS2lCVmMyVmtJSFJ2SUhOMFlXNWtMV2x1SUdadmNpQmdkVzVrWldacGJtVmtZQ0JvWVhOb0lIWmhiSFZsY3k0Z0tpOWNiblpoY2lCSVFWTklYMVZPUkVWR1NVNUZSQ0E5SUNkZlgyeHZaR0Z6YUY5b1lYTm9YM1Z1WkdWbWFXNWxaRjlmSnp0Y2JseHVMeW9xWEc0Z0tpQkJaR1J6SUdCMllXeDFaV0FnZEc4Z2RHaGxJR0Z5Y21GNUlHTmhZMmhsTGx4dUlDcGNiaUFxSUVCd2NtbDJZWFJsWEc0Z0tpQkFibUZ0WlNCaFpHUmNiaUFxSUVCdFpXMWlaWEpQWmlCVFpYUkRZV05vWlZ4dUlDb2dRR0ZzYVdGeklIQjFjMmhjYmlBcUlFQndZWEpoYlNCN0tuMGdkbUZzZFdVZ1ZHaGxJSFpoYkhWbElIUnZJR05oWTJobExseHVJQ29nUUhKbGRIVnlibk1nZTA5aWFtVmpkSDBnVW1WMGRYSnVjeUIwYUdVZ1kyRmphR1VnYVc1emRHRnVZMlV1WEc0Z0tpOWNibVoxYm1OMGFXOXVJSE5sZEVOaFkyaGxRV1JrS0haaGJIVmxLU0I3WEc0Z0lIUm9hWE11WDE5a1lYUmhYMTh1YzJWMEtIWmhiSFZsTENCSVFWTklYMVZPUkVWR1NVNUZSQ2s3WEc0Z0lISmxkSFZ5YmlCMGFHbHpPMXh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlITmxkRU5oWTJobFFXUmtPMXh1SWl3aUx5b3FYRzRnS2lCRGFHVmphM01nYVdZZ1lIWmhiSFZsWUNCcGN5QnBiaUIwYUdVZ1lYSnlZWGtnWTJGamFHVXVYRzRnS2x4dUlDb2dRSEJ5YVhaaGRHVmNiaUFxSUVCdVlXMWxJR2hoYzF4dUlDb2dRRzFsYldKbGNrOW1JRk5sZEVOaFkyaGxYRzRnS2lCQWNHRnlZVzBnZXlwOUlIWmhiSFZsSUZSb1pTQjJZV3gxWlNCMGJ5QnpaV0Z5WTJnZ1ptOXlMbHh1SUNvZ1FISmxkSFZ5Ym5NZ2UyNTFiV0psY24wZ1VtVjBkWEp1Y3lCZ2RISjFaV0FnYVdZZ1lIWmhiSFZsWUNCcGN5Qm1iM1Z1WkN3Z1pXeHpaU0JnWm1Gc2MyVmdMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQnpaWFJEWVdOb1pVaGhjeWgyWVd4MVpTa2dlMXh1SUNCeVpYUjFjbTRnZEdocGN5NWZYMlJoZEdGZlh5NW9ZWE1vZG1Gc2RXVXBPMXh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlITmxkRU5oWTJobFNHRnpPMXh1SWl3aWRtRnlJRTFoY0VOaFkyaGxJRDBnY21WeGRXbHlaU2duTGk5ZlRXRndRMkZqYUdVbktTeGNiaUFnSUNCelpYUkRZV05vWlVGa1pDQTlJSEpsY1hWcGNtVW9KeTR2WDNObGRFTmhZMmhsUVdSa0p5a3NYRzRnSUNBZ2MyVjBRMkZqYUdWSVlYTWdQU0J5WlhGMWFYSmxLQ2N1TDE5elpYUkRZV05vWlVoaGN5Y3BPMXh1WEc0dktpcGNiaUFxWEc0Z0tpQkRjbVZoZEdWeklHRnVJR0Z5Y21GNUlHTmhZMmhsSUc5aWFtVmpkQ0IwYnlCemRHOXlaU0IxYm1seGRXVWdkbUZzZFdWekxseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaUJBWTI5dWMzUnlkV04wYjNKY2JpQXFJRUJ3WVhKaGJTQjdRWEp5WVhsOUlGdDJZV3gxWlhOZElGUm9aU0IyWVd4MVpYTWdkRzhnWTJGamFHVXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlGTmxkRU5oWTJobEtIWmhiSFZsY3lrZ2UxeHVJQ0IyWVhJZ2FXNWtaWGdnUFNBdE1TeGNiaUFnSUNBZ0lHeGxibWQwYUNBOUlIWmhiSFZsY3lBOVBTQnVkV3hzSUQ4Z01DQTZJSFpoYkhWbGN5NXNaVzVuZEdnN1hHNWNiaUFnZEdocGN5NWZYMlJoZEdGZlh5QTlJRzVsZHlCTllYQkRZV05vWlR0Y2JpQWdkMmhwYkdVZ0tDc3JhVzVrWlhnZ1BDQnNaVzVuZEdncElIdGNiaUFnSUNCMGFHbHpMbUZrWkNoMllXeDFaWE5iYVc1a1pYaGRLVHRjYmlBZ2ZWeHVmVnh1WEc0dkx5QkJaR1FnYldWMGFHOWtjeUIwYnlCZ1UyVjBRMkZqYUdWZ0xseHVVMlYwUTJGamFHVXVjSEp2ZEc5MGVYQmxMbUZrWkNBOUlGTmxkRU5oWTJobExuQnliM1J2ZEhsd1pTNXdkWE5vSUQwZ2MyVjBRMkZqYUdWQlpHUTdYRzVUWlhSRFlXTm9aUzV3Y205MGIzUjVjR1V1YUdGeklEMGdjMlYwUTJGamFHVklZWE03WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1UyVjBRMkZqYUdVN1hHNGlMQ0l2S2lwY2JpQXFJRUVnYzNCbFkybGhiR2w2WldRZ2RtVnljMmx2YmlCdlppQmdYeTV6YjIxbFlDQm1iM0lnWVhKeVlYbHpJSGRwZEdodmRYUWdjM1Z3Y0c5eWRDQm1iM0lnYVhSbGNtRjBaV1ZjYmlBcUlITm9iM0owYUdGdVpITXVYRzRnS2x4dUlDb2dRSEJ5YVhaaGRHVmNiaUFxSUVCd1lYSmhiU0I3UVhKeVlYbDlJRnRoY25KaGVWMGdWR2hsSUdGeWNtRjVJSFJ2SUdsMFpYSmhkR1VnYjNabGNpNWNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUhCeVpXUnBZMkYwWlNCVWFHVWdablZ1WTNScGIyNGdhVzUyYjJ0bFpDQndaWElnYVhSbGNtRjBhVzl1TGx4dUlDb2dRSEpsZEhWeWJuTWdlMkp2YjJ4bFlXNTlJRkpsZEhWeWJuTWdZSFJ5ZFdWZ0lHbG1JR0Z1ZVNCbGJHVnRaVzUwSUhCaGMzTmxjeUIwYUdVZ2NISmxaR2xqWVhSbElHTm9aV05yTEZ4dUlDb2dJR1ZzYzJVZ1lHWmhiSE5sWUM1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnWVhKeVlYbFRiMjFsS0dGeWNtRjVMQ0J3Y21Wa2FXTmhkR1VwSUh0Y2JpQWdkbUZ5SUdsdVpHVjRJRDBnTFRFc1hHNGdJQ0FnSUNCc1pXNW5kR2dnUFNCaGNuSmhlU0E5UFNCdWRXeHNJRDhnTUNBNklHRnljbUY1TG14bGJtZDBhRHRjYmx4dUlDQjNhR2xzWlNBb0t5dHBibVJsZUNBOElHeGxibWQwYUNrZ2UxeHVJQ0FnSUdsbUlDaHdjbVZrYVdOaGRHVW9ZWEp5WVhsYmFXNWtaWGhkTENCcGJtUmxlQ3dnWVhKeVlYa3BLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnY21WMGRYSnVJR1poYkhObE8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdGeWNtRjVVMjl0WlR0Y2JpSXNJaThxS2x4dUlDb2dRMmhsWTJ0eklHbG1JR0VnWUdOaFkyaGxZQ0IyWVd4MVpTQm1iM0lnWUd0bGVXQWdaWGhwYzNSekxseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdZMkZqYUdVZ1ZHaGxJR05oWTJobElIUnZJSEYxWlhKNUxseHVJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR3RsZVNCVWFHVWdhMlY1SUc5bUlIUm9aU0JsYm5SeWVTQjBieUJqYUdWamF5NWNiaUFxSUVCeVpYUjFjbTV6SUh0aWIyOXNaV0Z1ZlNCU1pYUjFjbTV6SUdCMGNuVmxZQ0JwWmlCaGJpQmxiblJ5ZVNCbWIzSWdZR3RsZVdBZ1pYaHBjM1J6TENCbGJITmxJR0JtWVd4elpXQXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHTmhZMmhsU0dGektHTmhZMmhsTENCclpYa3BJSHRjYmlBZ2NtVjBkWEp1SUdOaFkyaGxMbWhoY3loclpYa3BPMXh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHTmhZMmhsU0dGek8xeHVJaXdpZG1GeUlGTmxkRU5oWTJobElEMGdjbVZ4ZFdseVpTZ25MaTlmVTJWMFEyRmphR1VuS1N4Y2JpQWdJQ0JoY25KaGVWTnZiV1VnUFNCeVpYRjFhWEpsS0NjdUwxOWhjbkpoZVZOdmJXVW5LU3hjYmlBZ0lDQmpZV05vWlVoaGN5QTlJSEpsY1hWcGNtVW9KeTR2WDJOaFkyaGxTR0Z6SnlrN1hHNWNiaThxS2lCVmMyVmtJSFJ2SUdOdmJYQnZjMlVnWW1sMGJXRnphM01nWm05eUlIWmhiSFZsSUdOdmJYQmhjbWx6YjI1ekxpQXFMMXh1ZG1GeUlFTlBUVkJCVWtWZlVFRlNWRWxCVEY5R1RFRkhJRDBnTVN4Y2JpQWdJQ0JEVDAxUVFWSkZYMVZPVDFKRVJWSkZSRjlHVEVGSElEMGdNanRjYmx4dUx5b3FYRzRnS2lCQklITndaV05wWVd4cGVtVmtJSFpsY25OcGIyNGdiMllnWUdKaGMyVkpjMFZ4ZFdGc1JHVmxjR0FnWm05eUlHRnljbUY1Y3lCM2FYUm9JSE4xY0hCdmNuUWdabTl5WEc0Z0tpQndZWEowYVdGc0lHUmxaWEFnWTI5dGNHRnlhWE52Ym5NdVhHNGdLbHh1SUNvZ1FIQnlhWFpoZEdWY2JpQXFJRUJ3WVhKaGJTQjdRWEp5WVhsOUlHRnljbUY1SUZSb1pTQmhjbkpoZVNCMGJ5QmpiMjF3WVhKbExseHVJQ29nUUhCaGNtRnRJSHRCY25KaGVYMGdiM1JvWlhJZ1ZHaGxJRzkwYUdWeUlHRnljbUY1SUhSdklHTnZiWEJoY21VdVhHNGdLaUJBY0dGeVlXMGdlMjUxYldKbGNuMGdZbWwwYldGemF5QlVhR1VnWW1sMGJXRnpheUJtYkdGbmN5NGdVMlZsSUdCaVlYTmxTWE5GY1hWaGJHQWdabTl5SUcxdmNtVWdaR1YwWVdsc2N5NWNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdOMWMzUnZiV2w2WlhJZ1ZHaGxJR1oxYm1OMGFXOXVJSFJ2SUdOMWMzUnZiV2w2WlNCamIyMXdZWEpwYzI5dWN5NWNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdWeGRXRnNSblZ1WXlCVWFHVWdablZ1WTNScGIyNGdkRzhnWkdWMFpYSnRhVzVsSUdWeGRXbDJZV3hsYm5SeklHOW1JSFpoYkhWbGN5NWNiaUFxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J6ZEdGamF5QlVjbUZqYTNNZ2RISmhkbVZ5YzJWa0lHQmhjbkpoZVdBZ1lXNWtJR0J2ZEdobGNtQWdiMkpxWldOMGN5NWNiaUFxSUVCeVpYUjFjbTV6SUh0aWIyOXNaV0Z1ZlNCU1pYUjFjbTV6SUdCMGNuVmxZQ0JwWmlCMGFHVWdZWEp5WVhseklHRnlaU0JsY1hWcGRtRnNaVzUwTENCbGJITmxJR0JtWVd4elpXQXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHVnhkV0ZzUVhKeVlYbHpLR0Z5Y21GNUxDQnZkR2hsY2l3Z1ltbDBiV0Z6YXl3Z1kzVnpkRzl0YVhwbGNpd2daWEYxWVd4R2RXNWpMQ0J6ZEdGamF5a2dlMXh1SUNCMllYSWdhWE5RWVhKMGFXRnNJRDBnWW1sMGJXRnpheUFtSUVOUFRWQkJVa1ZmVUVGU1ZFbEJURjlHVEVGSExGeHVJQ0FnSUNBZ1lYSnlUR1Z1WjNSb0lEMGdZWEp5WVhrdWJHVnVaM1JvTEZ4dUlDQWdJQ0FnYjNSb1RHVnVaM1JvSUQwZ2IzUm9aWEl1YkdWdVozUm9PMXh1WEc0Z0lHbG1JQ2hoY25KTVpXNW5kR2dnSVQwZ2IzUm9UR1Z1WjNSb0lDWW1JQ0VvYVhOUVlYSjBhV0ZzSUNZbUlHOTBhRXhsYm1kMGFDQStJR0Z5Y2t4bGJtZDBhQ2twSUh0Y2JpQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJSDFjYmlBZ0x5OGdRMmhsWTJzZ2RHaGhkQ0JqZVdOc2FXTWdkbUZzZFdWeklHRnlaU0JsY1hWaGJDNWNiaUFnZG1GeUlHRnljbE4wWVdOclpXUWdQU0J6ZEdGamF5NW5aWFFvWVhKeVlYa3BPMXh1SUNCMllYSWdiM1JvVTNSaFkydGxaQ0E5SUhOMFlXTnJMbWRsZENodmRHaGxjaWs3WEc0Z0lHbG1JQ2hoY25KVGRHRmphMlZrSUNZbUlHOTBhRk4wWVdOclpXUXBJSHRjYmlBZ0lDQnlaWFIxY200Z1lYSnlVM1JoWTJ0bFpDQTlQU0J2ZEdobGNpQW1KaUJ2ZEdoVGRHRmphMlZrSUQwOUlHRnljbUY1TzF4dUlDQjlYRzRnSUhaaGNpQnBibVJsZUNBOUlDMHhMRnh1SUNBZ0lDQWdjbVZ6ZFd4MElEMGdkSEoxWlN4Y2JpQWdJQ0FnSUhObFpXNGdQU0FvWW1sMGJXRnpheUFtSUVOUFRWQkJVa1ZmVlU1UFVrUkZVa1ZFWDBaTVFVY3BJRDhnYm1WM0lGTmxkRU5oWTJobElEb2dkVzVrWldacGJtVmtPMXh1WEc0Z0lITjBZV05yTG5ObGRDaGhjbkpoZVN3Z2IzUm9aWElwTzF4dUlDQnpkR0ZqYXk1elpYUW9iM1JvWlhJc0lHRnljbUY1S1R0Y2JseHVJQ0F2THlCSloyNXZjbVVnYm05dUxXbHVaR1Y0SUhCeWIzQmxjblJwWlhNdVhHNGdJSGRvYVd4bElDZ3JLMmx1WkdWNElEd2dZWEp5VEdWdVozUm9LU0I3WEc0Z0lDQWdkbUZ5SUdGeWNsWmhiSFZsSUQwZ1lYSnlZWGxiYVc1a1pYaGRMRnh1SUNBZ0lDQWdJQ0J2ZEdoV1lXeDFaU0E5SUc5MGFHVnlXMmx1WkdWNFhUdGNibHh1SUNBZ0lHbG1JQ2hqZFhOMGIyMXBlbVZ5S1NCN1hHNGdJQ0FnSUNCMllYSWdZMjl0Y0dGeVpXUWdQU0JwYzFCaGNuUnBZV3hjYmlBZ0lDQWdJQ0FnUHlCamRYTjBiMjFwZW1WeUtHOTBhRlpoYkhWbExDQmhjbkpXWVd4MVpTd2dhVzVrWlhnc0lHOTBhR1Z5TENCaGNuSmhlU3dnYzNSaFkyc3BYRzRnSUNBZ0lDQWdJRG9nWTNWemRHOXRhWHBsY2loaGNuSldZV3gxWlN3Z2IzUm9WbUZzZFdVc0lHbHVaR1Y0TENCaGNuSmhlU3dnYjNSb1pYSXNJSE4wWVdOcktUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tHTnZiWEJoY21Wa0lDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUdsbUlDaGpiMjF3WVhKbFpDa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1MGFXNTFaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSEpsYzNWc2RDQTlJR1poYkhObE8xeHVJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdmVnh1SUNBZ0lDOHZJRkpsWTNWeWMybDJaV3g1SUdOdmJYQmhjbVVnWVhKeVlYbHpJQ2h6ZFhOalpYQjBhV0pzWlNCMGJ5QmpZV3hzSUhOMFlXTnJJR3hwYldsMGN5a3VYRzRnSUNBZ2FXWWdLSE5sWlc0cElIdGNiaUFnSUNBZ0lHbG1JQ2doWVhKeVlYbFRiMjFsS0c5MGFHVnlMQ0JtZFc1amRHbHZiaWh2ZEdoV1lXeDFaU3dnYjNSb1NXNWtaWGdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFkyRmphR1ZJWVhNb2MyVmxiaXdnYjNSb1NXNWtaWGdwSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tHRnljbFpoYkhWbElEMDlQU0J2ZEdoV1lXeDFaU0I4ZkNCbGNYVmhiRVoxYm1Nb1lYSnlWbUZzZFdVc0lHOTBhRlpoYkhWbExDQmlhWFJ0WVhOckxDQmpkWE4wYjIxcGVtVnlMQ0J6ZEdGamF5a3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnpaV1Z1TG5CMWMyZ29iM1JvU1c1a1pYZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJSDBwS1NCN1hHNGdJQ0FnSUNBZ0lISmxjM1ZzZENBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLQ0VvWEc0Z0lDQWdJQ0FnSUNBZ1lYSnlWbUZzZFdVZ1BUMDlJRzkwYUZaaGJIVmxJSHg4WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxjWFZoYkVaMWJtTW9ZWEp5Vm1Gc2RXVXNJRzkwYUZaaGJIVmxMQ0JpYVhSdFlYTnJMQ0JqZFhOMGIyMXBlbVZ5TENCemRHRmpheWxjYmlBZ0lDQWdJQ0FnS1NrZ2UxeHVJQ0FnSUNBZ2NtVnpkV3gwSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNCOVhHNGdJSDFjYmlBZ2MzUmhZMnRiSjJSbGJHVjBaU2RkS0dGeWNtRjVLVHRjYmlBZ2MzUmhZMnRiSjJSbGJHVjBaU2RkS0c5MGFHVnlLVHRjYmlBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmxjWFZoYkVGeWNtRjVjenRjYmlJc0lpOHFLbHh1SUNvZ1EyOXVkbVZ5ZEhNZ1lHMWhjR0FnZEc4Z2FYUnpJR3RsZVMxMllXeDFaU0J3WVdseWN5NWNiaUFxWEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzFoY0NCVWFHVWdiV0Z3SUhSdklHTnZiblpsY25RdVhHNGdLaUJBY21WMGRYSnVjeUI3UVhKeVlYbDlJRkpsZEhWeWJuTWdkR2hsSUd0bGVTMTJZV3gxWlNCd1lXbHljeTVjYmlBcUwxeHVablZ1WTNScGIyNGdiV0Z3Vkc5QmNuSmhlU2h0WVhBcElIdGNiaUFnZG1GeUlHbHVaR1Y0SUQwZ0xURXNYRzRnSUNBZ0lDQnlaWE4xYkhRZ1BTQkJjbkpoZVNodFlYQXVjMmw2WlNrN1hHNWNiaUFnYldGd0xtWnZja1ZoWTJnb1puVnVZM1JwYjI0b2RtRnNkV1VzSUd0bGVTa2dlMXh1SUNBZ0lISmxjM1ZzZEZzcksybHVaR1Y0WFNBOUlGdHJaWGtzSUhaaGJIVmxYVHRjYmlBZ2ZTazdYRzRnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2JXRndWRzlCY25KaGVUdGNiaUlzSWk4cUtseHVJQ29nUTI5dWRtVnlkSE1nWUhObGRHQWdkRzhnWVc0Z1lYSnlZWGtnYjJZZ2FYUnpJSFpoYkhWbGN5NWNiaUFxWEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJSE5sZENCVWFHVWdjMlYwSUhSdklHTnZiblpsY25RdVhHNGdLaUJBY21WMGRYSnVjeUI3UVhKeVlYbDlJRkpsZEhWeWJuTWdkR2hsSUhaaGJIVmxjeTVjYmlBcUwxeHVablZ1WTNScGIyNGdjMlYwVkc5QmNuSmhlU2h6WlhRcElIdGNiaUFnZG1GeUlHbHVaR1Y0SUQwZ0xURXNYRzRnSUNBZ0lDQnlaWE4xYkhRZ1BTQkJjbkpoZVNoelpYUXVjMmw2WlNrN1hHNWNiaUFnYzJWMExtWnZja1ZoWTJnb1puVnVZM1JwYjI0b2RtRnNkV1VwSUh0Y2JpQWdJQ0J5WlhOMWJIUmJLeXRwYm1SbGVGMGdQU0IyWVd4MVpUdGNiaUFnZlNrN1hHNGdJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnYzJWMFZHOUJjbkpoZVR0Y2JpSXNJblpoY2lCVGVXMWliMndnUFNCeVpYRjFhWEpsS0NjdUwxOVRlVzFpYjJ3bktTeGNiaUFnSUNCVmFXNTBPRUZ5Y21GNUlEMGdjbVZ4ZFdseVpTZ25MaTlmVldsdWREaEJjbkpoZVNjcExGeHVJQ0FnSUdWeElEMGdjbVZ4ZFdseVpTZ25MaTlsY1NjcExGeHVJQ0FnSUdWeGRXRnNRWEp5WVhseklEMGdjbVZ4ZFdseVpTZ25MaTlmWlhGMVlXeEJjbkpoZVhNbktTeGNiaUFnSUNCdFlYQlViMEZ5Y21GNUlEMGdjbVZ4ZFdseVpTZ25MaTlmYldGd1ZHOUJjbkpoZVNjcExGeHVJQ0FnSUhObGRGUnZRWEp5WVhrZ1BTQnlaWEYxYVhKbEtDY3VMMTl6WlhSVWIwRnljbUY1SnlrN1hHNWNiaThxS2lCVmMyVmtJSFJ2SUdOdmJYQnZjMlVnWW1sMGJXRnphM01nWm05eUlIWmhiSFZsSUdOdmJYQmhjbWx6YjI1ekxpQXFMMXh1ZG1GeUlFTlBUVkJCVWtWZlVFRlNWRWxCVEY5R1RFRkhJRDBnTVN4Y2JpQWdJQ0JEVDAxUVFWSkZYMVZPVDFKRVJWSkZSRjlHVEVGSElEMGdNanRjYmx4dUx5b3FJR0JQWW1wbFkzUWpkRzlUZEhKcGJtZGdJSEpsYzNWc2RDQnlaV1psY21WdVkyVnpMaUFxTDF4dWRtRnlJR0p2YjJ4VVlXY2dQU0FuVzI5aWFtVmpkQ0JDYjI5c1pXRnVYU2NzWEc0Z0lDQWdaR0YwWlZSaFp5QTlJQ2RiYjJKcVpXTjBJRVJoZEdWZEp5eGNiaUFnSUNCbGNuSnZjbFJoWnlBOUlDZGJiMkpxWldOMElFVnljbTl5WFNjc1hHNGdJQ0FnYldGd1ZHRm5JRDBnSjF0dlltcGxZM1FnVFdGd1hTY3NYRzRnSUNBZ2JuVnRZbVZ5VkdGbklEMGdKMXR2WW1wbFkzUWdUblZ0WW1WeVhTY3NYRzRnSUNBZ2NtVm5aWGh3VkdGbklEMGdKMXR2WW1wbFkzUWdVbVZuUlhod1hTY3NYRzRnSUNBZ2MyVjBWR0ZuSUQwZ0oxdHZZbXBsWTNRZ1UyVjBYU2NzWEc0Z0lDQWdjM1J5YVc1blZHRm5JRDBnSjF0dlltcGxZM1FnVTNSeWFXNW5YU2NzWEc0Z0lDQWdjM2x0WW05c1ZHRm5JRDBnSjF0dlltcGxZM1FnVTNsdFltOXNYU2M3WEc1Y2JuWmhjaUJoY25KaGVVSjFabVpsY2xSaFp5QTlJQ2RiYjJKcVpXTjBJRUZ5Y21GNVFuVm1abVZ5WFNjc1hHNGdJQ0FnWkdGMFlWWnBaWGRVWVdjZ1BTQW5XMjlpYW1WamRDQkVZWFJoVm1sbGQxMG5PMXh1WEc0dktpb2dWWE5sWkNCMGJ5QmpiMjUyWlhKMElITjViV0p2YkhNZ2RHOGdjSEpwYldsMGFYWmxjeUJoYm1RZ2MzUnlhVzVuY3k0Z0tpOWNiblpoY2lCemVXMWliMnhRY205MGJ5QTlJRk41YldKdmJDQS9JRk41YldKdmJDNXdjbTkwYjNSNWNHVWdPaUIxYm1SbFptbHVaV1FzWEc0Z0lDQWdjM2x0WW05c1ZtRnNkV1ZQWmlBOUlITjViV0p2YkZCeWIzUnZJRDhnYzNsdFltOXNVSEp2ZEc4dWRtRnNkV1ZQWmlBNklIVnVaR1ZtYVc1bFpEdGNibHh1THlvcVhHNGdLaUJCSUhOd1pXTnBZV3hwZW1Wa0lIWmxjbk5wYjI0Z2IyWWdZR0poYzJWSmMwVnhkV0ZzUkdWbGNHQWdabTl5SUdOdmJYQmhjbWx1WnlCdlltcGxZM1J6SUc5bVhHNGdLaUIwYUdVZ2MyRnRaU0JnZEc5VGRISnBibWRVWVdkZ0xseHVJQ3BjYmlBcUlDb3FUbTkwWlRvcUtpQlVhR2x6SUdaMWJtTjBhVzl1SUc5dWJIa2djM1Z3Y0c5eWRITWdZMjl0Y0dGeWFXNW5JSFpoYkhWbGN5QjNhWFJvSUhSaFozTWdiMlpjYmlBcUlHQkNiMjlzWldGdVlDd2dZRVJoZEdWZ0xDQmdSWEp5YjNKZ0xDQmdUblZ0WW1WeVlDd2dZRkpsWjBWNGNHQXNJRzl5SUdCVGRISnBibWRnTGx4dUlDcGNiaUFxSUVCd2NtbDJZWFJsWEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2IySnFaV04wSUZSb1pTQnZZbXBsWTNRZ2RHOGdZMjl0Y0dGeVpTNWNiaUFxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J2ZEdobGNpQlVhR1VnYjNSb1pYSWdiMkpxWldOMElIUnZJR052YlhCaGNtVXVYRzRnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnZEdGbklGUm9aU0JnZEc5VGRISnBibWRVWVdkZ0lHOW1JSFJvWlNCdlltcGxZM1J6SUhSdklHTnZiWEJoY21VdVhHNGdLaUJBY0dGeVlXMGdlMjUxYldKbGNuMGdZbWwwYldGemF5QlVhR1VnWW1sMGJXRnpheUJtYkdGbmN5NGdVMlZsSUdCaVlYTmxTWE5GY1hWaGJHQWdabTl5SUcxdmNtVWdaR1YwWVdsc2N5NWNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdOMWMzUnZiV2w2WlhJZ1ZHaGxJR1oxYm1OMGFXOXVJSFJ2SUdOMWMzUnZiV2w2WlNCamIyMXdZWEpwYzI5dWN5NWNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdWeGRXRnNSblZ1WXlCVWFHVWdablZ1WTNScGIyNGdkRzhnWkdWMFpYSnRhVzVsSUdWeGRXbDJZV3hsYm5SeklHOW1JSFpoYkhWbGN5NWNiaUFxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J6ZEdGamF5QlVjbUZqYTNNZ2RISmhkbVZ5YzJWa0lHQnZZbXBsWTNSZ0lHRnVaQ0JnYjNSb1pYSmdJRzlpYW1WamRITXVYRzRnS2lCQWNtVjBkWEp1Y3lCN1ltOXZiR1ZoYm4wZ1VtVjBkWEp1Y3lCZ2RISjFaV0FnYVdZZ2RHaGxJRzlpYW1WamRITWdZWEpsSUdWeGRXbDJZV3hsYm5Rc0lHVnNjMlVnWUdaaGJITmxZQzVjYmlBcUwxeHVablZ1WTNScGIyNGdaWEYxWVd4Q2VWUmhaeWh2WW1wbFkzUXNJRzkwYUdWeUxDQjBZV2NzSUdKcGRHMWhjMnNzSUdOMWMzUnZiV2w2WlhJc0lHVnhkV0ZzUm5WdVl5d2djM1JoWTJzcElIdGNiaUFnYzNkcGRHTm9JQ2gwWVdjcElIdGNiaUFnSUNCallYTmxJR1JoZEdGV2FXVjNWR0ZuT2x4dUlDQWdJQ0FnYVdZZ0tDaHZZbXBsWTNRdVlubDBaVXhsYm1kMGFDQWhQU0J2ZEdobGNpNWllWFJsVEdWdVozUm9LU0I4ZkZ4dUlDQWdJQ0FnSUNBZ0lDaHZZbXBsWTNRdVlubDBaVTltWm5ObGRDQWhQU0J2ZEdobGNpNWllWFJsVDJabWMyVjBLU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnZZbXBsWTNRZ1BTQnZZbXBsWTNRdVluVm1abVZ5TzF4dUlDQWdJQ0FnYjNSb1pYSWdQU0J2ZEdobGNpNWlkV1ptWlhJN1hHNWNiaUFnSUNCallYTmxJR0Z5Y21GNVFuVm1abVZ5VkdGbk9seHVJQ0FnSUNBZ2FXWWdLQ2h2WW1wbFkzUXVZbmwwWlV4bGJtZDBhQ0FoUFNCdmRHaGxjaTVpZVhSbFRHVnVaM1JvS1NCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0ZsY1hWaGJFWjFibU1vYm1WM0lGVnBiblE0UVhKeVlYa29iMkpxWldOMEtTd2dibVYzSUZWcGJuUTRRWEp5WVhrb2IzUm9aWElwS1NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JseHVJQ0FnSUdOaGMyVWdZbTl2YkZSaFp6cGNiaUFnSUNCallYTmxJR1JoZEdWVVlXYzZYRzRnSUNBZ1kyRnpaU0J1ZFcxaVpYSlVZV2M2WEc0Z0lDQWdJQ0F2THlCRGIyVnlZMlVnWW05dmJHVmhibk1nZEc4Z1lERmdJRzl5SUdBd1lDQmhibVFnWkdGMFpYTWdkRzhnYldsc2JHbHpaV052Ym1SekxseHVJQ0FnSUNBZ0x5OGdTVzUyWVd4cFpDQmtZWFJsY3lCaGNtVWdZMjlsY21ObFpDQjBieUJnVG1GT1lDNWNiaUFnSUNBZ0lISmxkSFZ5YmlCbGNTZ3JiMkpxWldOMExDQXJiM1JvWlhJcE8xeHVYRzRnSUNBZ1kyRnpaU0JsY25KdmNsUmhaenBjYmlBZ0lDQWdJSEpsZEhWeWJpQnZZbXBsWTNRdWJtRnRaU0E5UFNCdmRHaGxjaTV1WVcxbElDWW1JRzlpYW1WamRDNXRaWE56WVdkbElEMDlJRzkwYUdWeUxtMWxjM05oWjJVN1hHNWNiaUFnSUNCallYTmxJSEpsWjJWNGNGUmhaenBjYmlBZ0lDQmpZWE5sSUhOMGNtbHVaMVJoWnpwY2JpQWdJQ0FnSUM4dklFTnZaWEpqWlNCeVpXZGxlR1Z6SUhSdklITjBjbWx1WjNNZ1lXNWtJSFJ5WldGMElITjBjbWx1WjNNc0lIQnlhVzFwZEdsMlpYTWdZVzVrSUc5aWFtVmpkSE1zWEc0Z0lDQWdJQ0F2THlCaGN5QmxjWFZoYkM0Z1UyVmxJR2gwZEhBNkx5OTNkM2N1WldOdFlTMXBiblJsY201aGRHbHZibUZzTG05eVp5OWxZMjFoTFRJMk1pODNMakF2STNObFl5MXlaV2RsZUhBdWNISnZkRzkwZVhCbExuUnZjM1J5YVc1blhHNGdJQ0FnSUNBdkx5Qm1iM0lnYlc5eVpTQmtaWFJoYVd4ekxseHVJQ0FnSUNBZ2NtVjBkWEp1SUc5aWFtVmpkQ0E5UFNBb2IzUm9aWElnS3lBbkp5azdYRzVjYmlBZ0lDQmpZWE5sSUcxaGNGUmhaenBjYmlBZ0lDQWdJSFpoY2lCamIyNTJaWEowSUQwZ2JXRndWRzlCY25KaGVUdGNibHh1SUNBZ0lHTmhjMlVnYzJWMFZHRm5PbHh1SUNBZ0lDQWdkbUZ5SUdselVHRnlkR2xoYkNBOUlHSnBkRzFoYzJzZ0ppQkRUMDFRUVZKRlgxQkJVbFJKUVV4ZlJreEJSenRjYmlBZ0lDQWdJR052Ym5abGNuUWdmSHdnS0dOdmJuWmxjblFnUFNCelpYUlViMEZ5Y21GNUtUdGNibHh1SUNBZ0lDQWdhV1lnS0c5aWFtVmpkQzV6YVhwbElDRTlJRzkwYUdWeUxuTnBlbVVnSmlZZ0lXbHpVR0Z5ZEdsaGJDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNBdkx5QkJjM04xYldVZ1kzbGpiR2xqSUhaaGJIVmxjeUJoY21VZ1pYRjFZV3d1WEc0Z0lDQWdJQ0IyWVhJZ2MzUmhZMnRsWkNBOUlITjBZV05yTG1kbGRDaHZZbXBsWTNRcE8xeHVJQ0FnSUNBZ2FXWWdLSE4wWVdOclpXUXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE4wWVdOclpXUWdQVDBnYjNSb1pYSTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQmlhWFJ0WVhOcklIdzlJRU5QVFZCQlVrVmZWVTVQVWtSRlVrVkVYMFpNUVVjN1hHNWNiaUFnSUNBZ0lDOHZJRkpsWTNWeWMybDJaV3g1SUdOdmJYQmhjbVVnYjJKcVpXTjBjeUFvYzNWelkyVndkR2xpYkdVZ2RHOGdZMkZzYkNCemRHRmpheUJzYVcxcGRITXBMbHh1SUNBZ0lDQWdjM1JoWTJzdWMyVjBLRzlpYW1WamRDd2diM1JvWlhJcE8xeHVJQ0FnSUNBZ2RtRnlJSEpsYzNWc2RDQTlJR1Z4ZFdGc1FYSnlZWGx6S0dOdmJuWmxjblFvYjJKcVpXTjBLU3dnWTI5dWRtVnlkQ2h2ZEdobGNpa3NJR0pwZEcxaGMyc3NJR04xYzNSdmJXbDZaWElzSUdWeGRXRnNSblZ1WXl3Z2MzUmhZMnNwTzF4dUlDQWdJQ0FnYzNSaFkydGJKMlJsYkdWMFpTZGRLRzlpYW1WamRDazdYRzRnSUNBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4dVhHNGdJQ0FnWTJGelpTQnplVzFpYjJ4VVlXYzZYRzRnSUNBZ0lDQnBaaUFvYzNsdFltOXNWbUZzZFdWUFppa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM2x0WW05c1ZtRnNkV1ZQWmk1allXeHNLRzlpYW1WamRDa2dQVDBnYzNsdFltOXNWbUZzZFdWUFppNWpZV3hzS0c5MGFHVnlLVHRjYmlBZ0lDQWdJSDFjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWlhGMVlXeENlVlJoWnp0Y2JpSXNJaThxS2x4dUlDb2dRWEJ3Wlc1a2N5QjBhR1VnWld4bGJXVnVkSE1nYjJZZ1lIWmhiSFZsYzJBZ2RHOGdZR0Z5Y21GNVlDNWNiaUFxWEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ29nUUhCaGNtRnRJSHRCY25KaGVYMGdZWEp5WVhrZ1ZHaGxJR0Z5Y21GNUlIUnZJRzF2WkdsbWVTNWNiaUFxSUVCd1lYSmhiU0I3UVhKeVlYbDlJSFpoYkhWbGN5QlVhR1VnZG1Gc2RXVnpJSFJ2SUdGd2NHVnVaQzVjYmlBcUlFQnlaWFIxY201eklIdEJjbkpoZVgwZ1VtVjBkWEp1Y3lCZ1lYSnlZWGxnTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJoY25KaGVWQjFjMmdvWVhKeVlYa3NJSFpoYkhWbGN5a2dlMXh1SUNCMllYSWdhVzVrWlhnZ1BTQXRNU3hjYmlBZ0lDQWdJR3hsYm1kMGFDQTlJSFpoYkhWbGN5NXNaVzVuZEdnc1hHNGdJQ0FnSUNCdlptWnpaWFFnUFNCaGNuSmhlUzVzWlc1bmRHZzdYRzVjYmlBZ2QyaHBiR1VnS0NzcmFXNWtaWGdnUENCc1pXNW5kR2dwSUh0Y2JpQWdJQ0JoY25KaGVWdHZabVp6WlhRZ0t5QnBibVJsZUYwZ1BTQjJZV3gxWlhOYmFXNWtaWGhkTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJoY25KaGVUdGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCaGNuSmhlVkIxYzJnN1hHNGlMQ0oyWVhJZ1lYSnlZWGxRZFhOb0lEMGdjbVZ4ZFdseVpTZ25MaTlmWVhKeVlYbFFkWE5vSnlrc1hHNGdJQ0FnYVhOQmNuSmhlU0E5SUhKbGNYVnBjbVVvSnk0dmFYTkJjbkpoZVNjcE8xeHVYRzR2S2lwY2JpQXFJRlJvWlNCaVlYTmxJR2x0Y0d4bGJXVnVkR0YwYVc5dUlHOW1JR0JuWlhSQmJHeExaWGx6WUNCaGJtUWdZR2RsZEVGc2JFdGxlWE5KYm1BZ2QyaHBZMmdnZFhObGMxeHVJQ29nWUd0bGVYTkdkVzVqWUNCaGJtUWdZSE41YldKdmJITkdkVzVqWUNCMGJ5Qm5aWFFnZEdobElHVnVkVzFsY21GaWJHVWdjSEp2Y0dWeWRIa2dibUZ0WlhNZ1lXNWtYRzRnS2lCemVXMWliMnh6SUc5bUlHQnZZbXBsWTNSZ0xseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdiMkpxWldOMElGUm9aU0J2WW1wbFkzUWdkRzhnY1hWbGNua3VYRzRnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCclpYbHpSblZ1WXlCVWFHVWdablZ1WTNScGIyNGdkRzhnWjJWMElIUm9aU0JyWlhseklHOW1JR0J2WW1wbFkzUmdMbHh1SUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym4wZ2MzbHRZbTlzYzBaMWJtTWdWR2hsSUdaMWJtTjBhVzl1SUhSdklHZGxkQ0IwYUdVZ2MzbHRZbTlzY3lCdlppQmdiMkpxWldOMFlDNWNiaUFxSUVCeVpYUjFjbTV6SUh0QmNuSmhlWDBnVW1WMGRYSnVjeUIwYUdVZ1lYSnlZWGtnYjJZZ2NISnZjR1Z5ZEhrZ2JtRnRaWE1nWVc1a0lITjViV0p2YkhNdVhHNGdLaTljYm1aMWJtTjBhVzl1SUdKaGMyVkhaWFJCYkd4TFpYbHpLRzlpYW1WamRDd2dhMlY1YzBaMWJtTXNJSE41YldKdmJITkdkVzVqS1NCN1hHNGdJSFpoY2lCeVpYTjFiSFFnUFNCclpYbHpSblZ1WXlodlltcGxZM1FwTzF4dUlDQnlaWFIxY200Z2FYTkJjbkpoZVNodlltcGxZM1FwSUQ4Z2NtVnpkV3gwSURvZ1lYSnlZWGxRZFhOb0tISmxjM1ZzZEN3Z2MzbHRZbTlzYzBaMWJtTW9iMkpxWldOMEtTazdYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1ltRnpaVWRsZEVGc2JFdGxlWE03WEc0aUxDSXZLaXBjYmlBcUlFRWdjM0JsWTJsaGJHbDZaV1FnZG1WeWMybHZiaUJ2WmlCZ1h5NW1hV3gwWlhKZ0lHWnZjaUJoY25KaGVYTWdkMmwwYUc5MWRDQnpkWEJ3YjNKMElHWnZjbHh1SUNvZ2FYUmxjbUYwWldVZ2MyaHZjblJvWVc1a2N5NWNiaUFxWEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ29nUUhCaGNtRnRJSHRCY25KaGVYMGdXMkZ5Y21GNVhTQlVhR1VnWVhKeVlYa2dkRzhnYVhSbGNtRjBaU0J2ZG1WeUxseHVJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnY0hKbFpHbGpZWFJsSUZSb1pTQm1kVzVqZEdsdmJpQnBiblp2YTJWa0lIQmxjaUJwZEdWeVlYUnBiMjR1WEc0Z0tpQkFjbVYwZFhKdWN5QjdRWEp5WVhsOUlGSmxkSFZ5Ym5NZ2RHaGxJRzVsZHlCbWFXeDBaWEpsWkNCaGNuSmhlUzVjYmlBcUwxeHVablZ1WTNScGIyNGdZWEp5WVhsR2FXeDBaWElvWVhKeVlYa3NJSEJ5WldScFkyRjBaU2tnZTF4dUlDQjJZWElnYVc1a1pYZ2dQU0F0TVN4Y2JpQWdJQ0FnSUd4bGJtZDBhQ0E5SUdGeWNtRjVJRDA5SUc1MWJHd2dQeUF3SURvZ1lYSnlZWGt1YkdWdVozUm9MRnh1SUNBZ0lDQWdjbVZ6U1c1a1pYZ2dQU0F3TEZ4dUlDQWdJQ0FnY21WemRXeDBJRDBnVzEwN1hHNWNiaUFnZDJocGJHVWdLQ3NyYVc1a1pYZ2dQQ0JzWlc1bmRHZ3BJSHRjYmlBZ0lDQjJZWElnZG1Gc2RXVWdQU0JoY25KaGVWdHBibVJsZUYwN1hHNGdJQ0FnYVdZZ0tIQnlaV1JwWTJGMFpTaDJZV3gxWlN3Z2FXNWtaWGdzSUdGeWNtRjVLU2tnZTF4dUlDQWdJQ0FnY21WemRXeDBXM0psYzBsdVpHVjRLeXRkSUQwZ2RtRnNkV1U3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWVhKeVlYbEdhV3gwWlhJN1hHNGlMQ0l2S2lwY2JpQXFJRlJvYVhNZ2JXVjBhRzlrSUhKbGRIVnlibk1nWVNCdVpYY2daVzF3ZEhrZ1lYSnlZWGt1WEc0Z0tseHVJQ29nUUhOMFlYUnBZMXh1SUNvZ1FHMWxiV0psY2s5bUlGOWNiaUFxSUVCemFXNWpaU0EwTGpFekxqQmNiaUFxSUVCallYUmxaMjl5ZVNCVmRHbHNYRzRnS2lCQWNtVjBkWEp1Y3lCN1FYSnlZWGw5SUZKbGRIVnlibk1nZEdobElHNWxkeUJsYlhCMGVTQmhjbkpoZVM1Y2JpQXFJRUJsZUdGdGNHeGxYRzRnS2x4dUlDb2dkbUZ5SUdGeWNtRjVjeUE5SUY4dWRHbHRaWE1vTWl3Z1h5NXpkSFZpUVhKeVlYa3BPMXh1SUNwY2JpQXFJR052Ym5OdmJHVXViRzluS0dGeWNtRjVjeWs3WEc0Z0tpQXZMeUE5UGlCYlcxMHNJRnRkWFZ4dUlDcGNiaUFxSUdOdmJuTnZiR1V1Ykc5bktHRnljbUY1YzFzd1hTQTlQVDBnWVhKeVlYbHpXekZkS1R0Y2JpQXFJQzh2SUQwK0lHWmhiSE5sWEc0Z0tpOWNibVoxYm1OMGFXOXVJSE4wZFdKQmNuSmhlU2dwSUh0Y2JpQWdjbVYwZFhKdUlGdGRPMXh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlITjBkV0pCY25KaGVUdGNiaUlzSW5aaGNpQmhjbkpoZVVacGJIUmxjaUE5SUhKbGNYVnBjbVVvSnk0dlgyRnljbUY1Um1sc2RHVnlKeWtzWEc0Z0lDQWdjM1IxWWtGeWNtRjVJRDBnY21WeGRXbHlaU2duTGk5emRIVmlRWEp5WVhrbktUdGNibHh1THlvcUlGVnpaV1FnWm05eUlHSjFhV3gwTFdsdUlHMWxkR2h2WkNCeVpXWmxjbVZ1WTJWekxpQXFMMXh1ZG1GeUlHOWlhbVZqZEZCeWIzUnZJRDBnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaVHRjYmx4dUx5b3FJRUoxYVd4MExXbHVJSFpoYkhWbElISmxabVZ5Wlc1alpYTXVJQ292WEc1MllYSWdjSEp2Y0dWeWRIbEpjMFZ1ZFcxbGNtRmliR1VnUFNCdlltcGxZM1JRY205MGJ5NXdjbTl3WlhKMGVVbHpSVzUxYldWeVlXSnNaVHRjYmx4dUx5b2dRblZwYkhRdGFXNGdiV1YwYUc5a0lISmxabVZ5Wlc1alpYTWdabTl5SUhSb2IzTmxJSGRwZEdnZ2RHaGxJSE5oYldVZ2JtRnRaU0JoY3lCdmRHaGxjaUJnYkc5a1lYTm9ZQ0J0WlhSb2IyUnpMaUFxTDF4dWRtRnlJRzVoZEdsMlpVZGxkRk41YldKdmJITWdQU0JQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsVGVXMWliMnh6TzF4dVhHNHZLaXBjYmlBcUlFTnlaV0YwWlhNZ1lXNGdZWEp5WVhrZ2IyWWdkR2hsSUc5M2JpQmxiblZ0WlhKaFlteGxJSE41YldKdmJITWdiMllnWUc5aWFtVmpkR0F1WEc0Z0tseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCdlltcGxZM1FnVkdobElHOWlhbVZqZENCMGJ5QnhkV1Z5ZVM1Y2JpQXFJRUJ5WlhSMWNtNXpJSHRCY25KaGVYMGdVbVYwZFhKdWN5QjBhR1VnWVhKeVlYa2diMllnYzNsdFltOXNjeTVjYmlBcUwxeHVkbUZ5SUdkbGRGTjViV0p2YkhNZ1BTQWhibUYwYVhabFIyVjBVM2x0WW05c2N5QS9JSE4wZFdKQmNuSmhlU0E2SUdaMWJtTjBhVzl1S0c5aWFtVmpkQ2tnZTF4dUlDQnBaaUFvYjJKcVpXTjBJRDA5SUc1MWJHd3BJSHRjYmlBZ0lDQnlaWFIxY200Z1cxMDdYRzRnSUgxY2JpQWdiMkpxWldOMElEMGdUMkpxWldOMEtHOWlhbVZqZENrN1hHNGdJSEpsZEhWeWJpQmhjbkpoZVVacGJIUmxjaWh1WVhScGRtVkhaWFJUZVcxaWIyeHpLRzlpYW1WamRDa3NJR1oxYm1OMGFXOXVLSE41YldKdmJDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCd2NtOXdaWEowZVVselJXNTFiV1Z5WVdKc1pTNWpZV3hzS0c5aWFtVmpkQ3dnYzNsdFltOXNLVHRjYmlBZ2ZTazdYRzU5TzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHZGxkRk41YldKdmJITTdYRzRpTENKMllYSWdZbUZ6WlVkbGRFRnNiRXRsZVhNZ1BTQnlaWEYxYVhKbEtDY3VMMTlpWVhObFIyVjBRV3hzUzJWNWN5Y3BMRnh1SUNBZ0lHZGxkRk41YldKdmJITWdQU0J5WlhGMWFYSmxLQ2N1TDE5blpYUlRlVzFpYjJ4ekp5a3NYRzRnSUNBZ2EyVjVjeUE5SUhKbGNYVnBjbVVvSnk0dmEyVjVjeWNwTzF4dVhHNHZLaXBjYmlBcUlFTnlaV0YwWlhNZ1lXNGdZWEp5WVhrZ2IyWWdiM2R1SUdWdWRXMWxjbUZpYkdVZ2NISnZjR1Z5ZEhrZ2JtRnRaWE1nWVc1a0lITjViV0p2YkhNZ2IyWWdZRzlpYW1WamRHQXVYRzRnS2x4dUlDb2dRSEJ5YVhaaGRHVmNiaUFxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J2WW1wbFkzUWdWR2hsSUc5aWFtVmpkQ0IwYnlCeGRXVnllUzVjYmlBcUlFQnlaWFIxY201eklIdEJjbkpoZVgwZ1VtVjBkWEp1Y3lCMGFHVWdZWEp5WVhrZ2IyWWdjSEp2Y0dWeWRIa2dibUZ0WlhNZ1lXNWtJSE41YldKdmJITXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHZGxkRUZzYkV0bGVYTW9iMkpxWldOMEtTQjdYRzRnSUhKbGRIVnliaUJpWVhObFIyVjBRV3hzUzJWNWN5aHZZbXBsWTNRc0lHdGxlWE1zSUdkbGRGTjViV0p2YkhNcE8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdkbGRFRnNiRXRsZVhNN1hHNGlMQ0oyWVhJZ1oyVjBRV3hzUzJWNWN5QTlJSEpsY1hWcGNtVW9KeTR2WDJkbGRFRnNiRXRsZVhNbktUdGNibHh1THlvcUlGVnpaV1FnZEc4Z1kyOXRjRzl6WlNCaWFYUnRZWE5yY3lCbWIzSWdkbUZzZFdVZ1kyOXRjR0Z5YVhOdmJuTXVJQ292WEc1MllYSWdRMDlOVUVGU1JWOVFRVkpVU1VGTVgwWk1RVWNnUFNBeE8xeHVYRzR2S2lvZ1ZYTmxaQ0JtYjNJZ1luVnBiSFF0YVc0Z2JXVjBhRzlrSUhKbFptVnlaVzVqWlhNdUlDb3ZYRzUyWVhJZ2IySnFaV04wVUhKdmRHOGdQU0JQWW1wbFkzUXVjSEp2ZEc5MGVYQmxPMXh1WEc0dktpb2dWWE5sWkNCMGJ5QmphR1ZqYXlCdlltcGxZM1J6SUdadmNpQnZkMjRnY0hKdmNHVnlkR2xsY3k0Z0tpOWNiblpoY2lCb1lYTlBkMjVRY205d1pYSjBlU0E5SUc5aWFtVmpkRkJ5YjNSdkxtaGhjMDkzYmxCeWIzQmxjblI1TzF4dVhHNHZLaXBjYmlBcUlFRWdjM0JsWTJsaGJHbDZaV1FnZG1WeWMybHZiaUJ2WmlCZ1ltRnpaVWx6UlhGMVlXeEVaV1Z3WUNCbWIzSWdiMkpxWldOMGN5QjNhWFJvSUhOMWNIQnZjblFnWm05eVhHNGdLaUJ3WVhKMGFXRnNJR1JsWlhBZ1kyOXRjR0Z5YVhOdmJuTXVYRzRnS2x4dUlDb2dRSEJ5YVhaaGRHVmNiaUFxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J2WW1wbFkzUWdWR2hsSUc5aWFtVmpkQ0IwYnlCamIyMXdZWEpsTGx4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHOTBhR1Z5SUZSb1pTQnZkR2hsY2lCdlltcGxZM1FnZEc4Z1kyOXRjR0Z5WlM1Y2JpQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQmlhWFJ0WVhOcklGUm9aU0JpYVhSdFlYTnJJR1pzWVdkekxpQlRaV1VnWUdKaGMyVkpjMFZ4ZFdGc1lDQm1iM0lnYlc5eVpTQmtaWFJoYVd4ekxseHVJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnWTNWemRHOXRhWHBsY2lCVWFHVWdablZ1WTNScGIyNGdkRzhnWTNWemRHOXRhWHBsSUdOdmJYQmhjbWx6YjI1ekxseHVJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnWlhGMVlXeEdkVzVqSUZSb1pTQm1kVzVqZEdsdmJpQjBieUJrWlhSbGNtMXBibVVnWlhGMWFYWmhiR1Z1ZEhNZ2IyWWdkbUZzZFdWekxseHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJSE4wWVdOcklGUnlZV05yY3lCMGNtRjJaWEp6WldRZ1lHOWlhbVZqZEdBZ1lXNWtJR0J2ZEdobGNtQWdiMkpxWldOMGN5NWNiaUFxSUVCeVpYUjFjbTV6SUh0aWIyOXNaV0Z1ZlNCU1pYUjFjbTV6SUdCMGNuVmxZQ0JwWmlCMGFHVWdiMkpxWldOMGN5QmhjbVVnWlhGMWFYWmhiR1Z1ZEN3Z1pXeHpaU0JnWm1Gc2MyVmdMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQmxjWFZoYkU5aWFtVmpkSE1vYjJKcVpXTjBMQ0J2ZEdobGNpd2dZbWwwYldGemF5d2dZM1Z6ZEc5dGFYcGxjaXdnWlhGMVlXeEdkVzVqTENCemRHRmpheWtnZTF4dUlDQjJZWElnYVhOUVlYSjBhV0ZzSUQwZ1ltbDBiV0Z6YXlBbUlFTlBUVkJCVWtWZlVFRlNWRWxCVEY5R1RFRkhMRnh1SUNBZ0lDQWdiMkpxVUhKdmNITWdQU0JuWlhSQmJHeExaWGx6S0c5aWFtVmpkQ2tzWEc0Z0lDQWdJQ0J2WW1wTVpXNW5kR2dnUFNCdlltcFFjbTl3Y3k1c1pXNW5kR2dzWEc0Z0lDQWdJQ0J2ZEdoUWNtOXdjeUE5SUdkbGRFRnNiRXRsZVhNb2IzUm9aWElwTEZ4dUlDQWdJQ0FnYjNSb1RHVnVaM1JvSUQwZ2IzUm9VSEp2Y0hNdWJHVnVaM1JvTzF4dVhHNGdJR2xtSUNodlltcE1aVzVuZEdnZ0lUMGdiM1JvVEdWdVozUm9JQ1ltSUNGcGMxQmhjblJwWVd3cElIdGNiaUFnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUgxY2JpQWdkbUZ5SUdsdVpHVjRJRDBnYjJKcVRHVnVaM1JvTzF4dUlDQjNhR2xzWlNBb2FXNWtaWGd0TFNrZ2UxeHVJQ0FnSUhaaGNpQnJaWGtnUFNCdlltcFFjbTl3YzF0cGJtUmxlRjA3WEc0Z0lDQWdhV1lnS0NFb2FYTlFZWEowYVdGc0lEOGdhMlY1SUdsdUlHOTBhR1Z5SURvZ2FHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaHZkR2hsY2l3Z2EyVjVLU2twSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNCOVhHNGdJSDFjYmlBZ0x5OGdRMmhsWTJzZ2RHaGhkQ0JqZVdOc2FXTWdkbUZzZFdWeklHRnlaU0JsY1hWaGJDNWNiaUFnZG1GeUlHOWlhbE4wWVdOclpXUWdQU0J6ZEdGamF5NW5aWFFvYjJKcVpXTjBLVHRjYmlBZ2RtRnlJRzkwYUZOMFlXTnJaV1FnUFNCemRHRmpheTVuWlhRb2IzUm9aWElwTzF4dUlDQnBaaUFvYjJKcVUzUmhZMnRsWkNBbUppQnZkR2hUZEdGamEyVmtLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHOWlhbE4wWVdOclpXUWdQVDBnYjNSb1pYSWdKaVlnYjNSb1UzUmhZMnRsWkNBOVBTQnZZbXBsWTNRN1hHNGdJSDFjYmlBZ2RtRnlJSEpsYzNWc2RDQTlJSFJ5ZFdVN1hHNGdJSE4wWVdOckxuTmxkQ2h2WW1wbFkzUXNJRzkwYUdWeUtUdGNiaUFnYzNSaFkyc3VjMlYwS0c5MGFHVnlMQ0J2WW1wbFkzUXBPMXh1WEc0Z0lIWmhjaUJ6YTJsd1EzUnZjaUE5SUdselVHRnlkR2xoYkR0Y2JpQWdkMmhwYkdVZ0tDc3JhVzVrWlhnZ1BDQnZZbXBNWlc1bmRHZ3BJSHRjYmlBZ0lDQnJaWGtnUFNCdlltcFFjbTl3YzF0cGJtUmxlRjA3WEc0Z0lDQWdkbUZ5SUc5aWFsWmhiSFZsSUQwZ2IySnFaV04wVzJ0bGVWMHNYRzRnSUNBZ0lDQWdJRzkwYUZaaGJIVmxJRDBnYjNSb1pYSmJhMlY1WFR0Y2JseHVJQ0FnSUdsbUlDaGpkWE4wYjIxcGVtVnlLU0I3WEc0Z0lDQWdJQ0IyWVhJZ1kyOXRjR0Z5WldRZ1BTQnBjMUJoY25ScFlXeGNiaUFnSUNBZ0lDQWdQeUJqZFhOMGIyMXBlbVZ5S0c5MGFGWmhiSFZsTENCdlltcFdZV3gxWlN3Z2EyVjVMQ0J2ZEdobGNpd2diMkpxWldOMExDQnpkR0ZqYXlsY2JpQWdJQ0FnSUNBZ09pQmpkWE4wYjIxcGVtVnlLRzlpYWxaaGJIVmxMQ0J2ZEdoV1lXeDFaU3dnYTJWNUxDQnZZbXBsWTNRc0lHOTBhR1Z5TENCemRHRmpheWs3WEc0Z0lDQWdmVnh1SUNBZ0lDOHZJRkpsWTNWeWMybDJaV3g1SUdOdmJYQmhjbVVnYjJKcVpXTjBjeUFvYzNWelkyVndkR2xpYkdVZ2RHOGdZMkZzYkNCemRHRmpheUJzYVcxcGRITXBMbHh1SUNBZ0lHbG1JQ2doS0dOdmJYQmhjbVZrSUQwOVBTQjFibVJsWm1sdVpXUmNiaUFnSUNBZ0lDQWdJQ0EvSUNodlltcFdZV3gxWlNBOVBUMGdiM1JvVm1Gc2RXVWdmSHdnWlhGMVlXeEdkVzVqS0c5aWFsWmhiSFZsTENCdmRHaFdZV3gxWlN3Z1ltbDBiV0Z6YXl3Z1kzVnpkRzl0YVhwbGNpd2djM1JoWTJzcEtWeHVJQ0FnSUNBZ0lDQWdJRG9nWTI5dGNHRnlaV1JjYmlBZ0lDQWdJQ0FnS1NrZ2UxeHVJQ0FnSUNBZ2NtVnpkV3gwSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNCOVhHNGdJQ0FnYzJ0cGNFTjBiM0lnZkh3Z0tITnJhWEJEZEc5eUlEMGdhMlY1SUQwOUlDZGpiMjV6ZEhKMVkzUnZjaWNwTzF4dUlDQjlYRzRnSUdsbUlDaHlaWE4xYkhRZ0ppWWdJWE5yYVhCRGRHOXlLU0I3WEc0Z0lDQWdkbUZ5SUc5aWFrTjBiM0lnUFNCdlltcGxZM1F1WTI5dWMzUnlkV04wYjNJc1hHNGdJQ0FnSUNBZ0lHOTBhRU4wYjNJZ1BTQnZkR2hsY2k1amIyNXpkSEoxWTNSdmNqdGNibHh1SUNBZ0lDOHZJRTV2YmlCZ1QySnFaV04wWUNCdlltcGxZM1FnYVc1emRHRnVZMlZ6SUhkcGRHZ2daR2xtWm1WeVpXNTBJR052Ym5OMGNuVmpkRzl5Y3lCaGNtVWdibTkwSUdWeGRXRnNMbHh1SUNBZ0lHbG1JQ2h2WW1wRGRHOXlJQ0U5SUc5MGFFTjBiM0lnSmlaY2JpQWdJQ0FnSUNBZ0tDZGpiMjV6ZEhKMVkzUnZjaWNnYVc0Z2IySnFaV04wSUNZbUlDZGpiMjV6ZEhKMVkzUnZjaWNnYVc0Z2IzUm9aWElwSUNZbVhHNGdJQ0FnSUNBZ0lDRW9kSGx3Wlc5bUlHOWlha04wYjNJZ1BUMGdKMloxYm1OMGFXOXVKeUFtSmlCdlltcERkRzl5SUdsdWMzUmhibU5sYjJZZ2IySnFRM1J2Y2lBbUpseHVJQ0FnSUNBZ0lDQWdJSFI1Y0dWdlppQnZkR2hEZEc5eUlEMDlJQ2RtZFc1amRHbHZiaWNnSmlZZ2IzUm9RM1J2Y2lCcGJuTjBZVzVqWlc5bUlHOTBhRU4wYjNJcEtTQjdYRzRnSUNBZ0lDQnlaWE4xYkhRZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnYzNSaFkydGJKMlJsYkdWMFpTZGRLRzlpYW1WamRDazdYRzRnSUhOMFlXTnJXeWRrWld4bGRHVW5YU2h2ZEdobGNpazdYRzRnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1pYRjFZV3hQWW1wbFkzUnpPMXh1SWl3aWRtRnlJR2RsZEU1aGRHbDJaU0E5SUhKbGNYVnBjbVVvSnk0dlgyZGxkRTVoZEdsMlpTY3BMRnh1SUNBZ0lISnZiM1FnUFNCeVpYRjFhWEpsS0NjdUwxOXliMjkwSnlrN1hHNWNiaThxSUVKMWFXeDBMV2x1SUcxbGRHaHZaQ0J5WldabGNtVnVZMlZ6SUhSb1lYUWdZWEpsSUhabGNtbG1hV1ZrSUhSdklHSmxJRzVoZEdsMlpTNGdLaTljYm5aaGNpQkVZWFJoVm1sbGR5QTlJR2RsZEU1aGRHbDJaU2h5YjI5MExDQW5SR0YwWVZacFpYY25LVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCRVlYUmhWbWxsZHp0Y2JpSXNJblpoY2lCblpYUk9ZWFJwZG1VZ1BTQnlaWEYxYVhKbEtDY3VMMTluWlhST1lYUnBkbVVuS1N4Y2JpQWdJQ0J5YjI5MElEMGdjbVZ4ZFdseVpTZ25MaTlmY205dmRDY3BPMXh1WEc0dktpQkNkV2xzZEMxcGJpQnRaWFJvYjJRZ2NtVm1aWEpsYm1ObGN5QjBhR0YwSUdGeVpTQjJaWEpwWm1sbFpDQjBieUJpWlNCdVlYUnBkbVV1SUNvdlhHNTJZWElnVUhKdmJXbHpaU0E5SUdkbGRFNWhkR2wyWlNoeWIyOTBMQ0FuVUhKdmJXbHpaU2NwTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlGQnliMjFwYzJVN1hHNGlMQ0oyWVhJZ1oyVjBUbUYwYVhabElEMGdjbVZ4ZFdseVpTZ25MaTlmWjJWMFRtRjBhWFpsSnlrc1hHNGdJQ0FnY205dmRDQTlJSEpsY1hWcGNtVW9KeTR2WDNKdmIzUW5LVHRjYmx4dUx5b2dRblZwYkhRdGFXNGdiV1YwYUc5a0lISmxabVZ5Wlc1alpYTWdkR2hoZENCaGNtVWdkbVZ5YVdacFpXUWdkRzhnWW1VZ2JtRjBhWFpsTGlBcUwxeHVkbUZ5SUZObGRDQTlJR2RsZEU1aGRHbDJaU2h5YjI5MExDQW5VMlYwSnlrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdVMlYwTzF4dUlpd2lkbUZ5SUdkbGRFNWhkR2wyWlNBOUlISmxjWFZwY21Vb0p5NHZYMmRsZEU1aGRHbDJaU2NwTEZ4dUlDQWdJSEp2YjNRZ1BTQnlaWEYxYVhKbEtDY3VMMTl5YjI5MEp5azdYRzVjYmk4cUlFSjFhV3gwTFdsdUlHMWxkR2h2WkNCeVpXWmxjbVZ1WTJWeklIUm9ZWFFnWVhKbElIWmxjbWxtYVdWa0lIUnZJR0psSUc1aGRHbDJaUzRnS2k5Y2JuWmhjaUJYWldGclRXRndJRDBnWjJWMFRtRjBhWFpsS0hKdmIzUXNJQ2RYWldGclRXRndKeWs3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1YyVmhhMDFoY0R0Y2JpSXNJblpoY2lCRVlYUmhWbWxsZHlBOUlISmxjWFZwY21Vb0p5NHZYMFJoZEdGV2FXVjNKeWtzWEc0Z0lDQWdUV0Z3SUQwZ2NtVnhkV2x5WlNnbkxpOWZUV0Z3Snlrc1hHNGdJQ0FnVUhKdmJXbHpaU0E5SUhKbGNYVnBjbVVvSnk0dlgxQnliMjFwYzJVbktTeGNiaUFnSUNCVFpYUWdQU0J5WlhGMWFYSmxLQ2N1TDE5VFpYUW5LU3hjYmlBZ0lDQlhaV0ZyVFdGd0lEMGdjbVZ4ZFdseVpTZ25MaTlmVjJWaGEwMWhjQ2NwTEZ4dUlDQWdJR0poYzJWSFpYUlVZV2NnUFNCeVpYRjFhWEpsS0NjdUwxOWlZWE5sUjJWMFZHRm5KeWtzWEc0Z0lDQWdkRzlUYjNWeVkyVWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGIxTnZkWEpqWlNjcE8xeHVYRzR2S2lvZ1lFOWlhbVZqZENOMGIxTjBjbWx1WjJBZ2NtVnpkV3gwSUhKbFptVnlaVzVqWlhNdUlDb3ZYRzUyWVhJZ2JXRndWR0ZuSUQwZ0oxdHZZbXBsWTNRZ1RXRndYU2NzWEc0Z0lDQWdiMkpxWldOMFZHRm5JRDBnSjF0dlltcGxZM1FnVDJKcVpXTjBYU2NzWEc0Z0lDQWdjSEp2YldselpWUmhaeUE5SUNkYmIySnFaV04wSUZCeWIyMXBjMlZkSnl4Y2JpQWdJQ0J6WlhSVVlXY2dQU0FuVzI5aWFtVmpkQ0JUWlhSZEp5eGNiaUFnSUNCM1pXRnJUV0Z3VkdGbklEMGdKMXR2WW1wbFkzUWdWMlZoYTAxaGNGMG5PMXh1WEc1MllYSWdaR0YwWVZacFpYZFVZV2NnUFNBblcyOWlhbVZqZENCRVlYUmhWbWxsZDEwbk8xeHVYRzR2S2lvZ1ZYTmxaQ0IwYnlCa1pYUmxZM1FnYldGd2N5d2djMlYwY3l3Z1lXNWtJSGRsWVd0dFlYQnpMaUFxTDF4dWRtRnlJR1JoZEdGV2FXVjNRM1J2Y2xOMGNtbHVaeUE5SUhSdlUyOTFjbU5sS0VSaGRHRldhV1YzS1N4Y2JpQWdJQ0J0WVhCRGRHOXlVM1J5YVc1bklEMGdkRzlUYjNWeVkyVW9UV0Z3S1N4Y2JpQWdJQ0J3Y205dGFYTmxRM1J2Y2xOMGNtbHVaeUE5SUhSdlUyOTFjbU5sS0ZCeWIyMXBjMlVwTEZ4dUlDQWdJSE5sZEVOMGIzSlRkSEpwYm1jZ1BTQjBiMU52ZFhKalpTaFRaWFFwTEZ4dUlDQWdJSGRsWVd0TllYQkRkRzl5VTNSeWFXNW5JRDBnZEc5VGIzVnlZMlVvVjJWaGEwMWhjQ2s3WEc1Y2JpOHFLbHh1SUNvZ1IyVjBjeUIwYUdVZ1lIUnZVM1J5YVc1blZHRm5ZQ0J2WmlCZ2RtRnNkV1ZnTGx4dUlDcGNiaUFxSUVCd2NtbDJZWFJsWEc0Z0tpQkFjR0Z5WVcwZ2V5cDlJSFpoYkhWbElGUm9aU0IyWVd4MVpTQjBieUJ4ZFdWeWVTNWNiaUFxSUVCeVpYUjFjbTV6SUh0emRISnBibWQ5SUZKbGRIVnlibk1nZEdobElHQjBiMU4wY21sdVoxUmhaMkF1WEc0Z0tpOWNiblpoY2lCblpYUlVZV2NnUFNCaVlYTmxSMlYwVkdGbk8xeHVYRzR2THlCR1lXeHNZbUZqYXlCbWIzSWdaR0YwWVNCMmFXVjNjeXdnYldGd2N5d2djMlYwY3l3Z1lXNWtJSGRsWVdzZ2JXRndjeUJwYmlCSlJTQXhNU0JoYm1RZ2NISnZiV2x6WlhNZ2FXNGdUbTlrWlM1cWN5QThJRFl1WEc1cFppQW9LRVJoZEdGV2FXVjNJQ1ltSUdkbGRGUmhaeWh1WlhjZ1JHRjBZVlpwWlhjb2JtVjNJRUZ5Y21GNVFuVm1abVZ5S0RFcEtTa2dJVDBnWkdGMFlWWnBaWGRVWVdjcElIeDhYRzRnSUNBZ0tFMWhjQ0FtSmlCblpYUlVZV2NvYm1WM0lFMWhjQ2tnSVQwZ2JXRndWR0ZuS1NCOGZGeHVJQ0FnSUNoUWNtOXRhWE5sSUNZbUlHZGxkRlJoWnloUWNtOXRhWE5sTG5KbGMyOXNkbVVvS1NrZ0lUMGdjSEp2YldselpWUmhaeWtnZkh4Y2JpQWdJQ0FvVTJWMElDWW1JR2RsZEZSaFp5aHVaWGNnVTJWMEtTQWhQU0J6WlhSVVlXY3BJSHg4WEc0Z0lDQWdLRmRsWVd0TllYQWdKaVlnWjJWMFZHRm5LRzVsZHlCWFpXRnJUV0Z3S1NBaFBTQjNaV0ZyVFdGd1ZHRm5LU2tnZTF4dUlDQm5aWFJVWVdjZ1BTQm1kVzVqZEdsdmJpaDJZV3gxWlNrZ2UxeHVJQ0FnSUhaaGNpQnlaWE4xYkhRZ1BTQmlZWE5sUjJWMFZHRm5LSFpoYkhWbEtTeGNiaUFnSUNBZ0lDQWdRM1J2Y2lBOUlISmxjM1ZzZENBOVBTQnZZbXBsWTNSVVlXY2dQeUIyWVd4MVpTNWpiMjV6ZEhKMVkzUnZjaUE2SUhWdVpHVm1hVzVsWkN4Y2JpQWdJQ0FnSUNBZ1kzUnZjbE4wY21sdVp5QTlJRU4wYjNJZ1B5QjBiMU52ZFhKalpTaERkRzl5S1NBNklDY25PMXh1WEc0Z0lDQWdhV1lnS0dOMGIzSlRkSEpwYm1jcElIdGNiaUFnSUNBZ0lITjNhWFJqYUNBb1kzUnZjbE4wY21sdVp5a2dlMXh1SUNBZ0lDQWdJQ0JqWVhObElHUmhkR0ZXYVdWM1EzUnZjbE4wY21sdVp6b2djbVYwZFhKdUlHUmhkR0ZXYVdWM1ZHRm5PMXh1SUNBZ0lDQWdJQ0JqWVhObElHMWhjRU4wYjNKVGRISnBibWM2SUhKbGRIVnliaUJ0WVhCVVlXYzdYRzRnSUNBZ0lDQWdJR05oYzJVZ2NISnZiV2x6WlVOMGIzSlRkSEpwYm1jNklISmxkSFZ5YmlCd2NtOXRhWE5sVkdGbk8xeHVJQ0FnSUNBZ0lDQmpZWE5sSUhObGRFTjBiM0pUZEhKcGJtYzZJSEpsZEhWeWJpQnpaWFJVWVdjN1hHNGdJQ0FnSUNBZ0lHTmhjMlVnZDJWaGEwMWhjRU4wYjNKVGRISnBibWM2SUhKbGRIVnliaUIzWldGclRXRndWR0ZuTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4dUlDQjlPMXh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHZGxkRlJoWnp0Y2JpSXNJblpoY2lCVGRHRmpheUE5SUhKbGNYVnBjbVVvSnk0dlgxTjBZV05ySnlrc1hHNGdJQ0FnWlhGMVlXeEJjbkpoZVhNZ1BTQnlaWEYxYVhKbEtDY3VMMTlsY1hWaGJFRnljbUY1Y3ljcExGeHVJQ0FnSUdWeGRXRnNRbmxVWVdjZ1BTQnlaWEYxYVhKbEtDY3VMMTlsY1hWaGJFSjVWR0ZuSnlrc1hHNGdJQ0FnWlhGMVlXeFBZbXBsWTNSeklEMGdjbVZ4ZFdseVpTZ25MaTlmWlhGMVlXeFBZbXBsWTNSekp5a3NYRzRnSUNBZ1oyVjBWR0ZuSUQwZ2NtVnhkV2x5WlNnbkxpOWZaMlYwVkdGbkp5a3NYRzRnSUNBZ2FYTkJjbkpoZVNBOUlISmxjWFZwY21Vb0p5NHZhWE5CY25KaGVTY3BMRnh1SUNBZ0lHbHpRblZtWm1WeUlEMGdjbVZ4ZFdseVpTZ25MaTlwYzBKMVptWmxjaWNwTEZ4dUlDQWdJR2x6Vkhsd1pXUkJjbkpoZVNBOUlISmxjWFZwY21Vb0p5NHZhWE5VZVhCbFpFRnljbUY1SnlrN1hHNWNiaThxS2lCVmMyVmtJSFJ2SUdOdmJYQnZjMlVnWW1sMGJXRnphM01nWm05eUlIWmhiSFZsSUdOdmJYQmhjbWx6YjI1ekxpQXFMMXh1ZG1GeUlFTlBUVkJCVWtWZlVFRlNWRWxCVEY5R1RFRkhJRDBnTVR0Y2JseHVMeW9xSUdCUFltcGxZM1FqZEc5VGRISnBibWRnSUhKbGMzVnNkQ0J5WldabGNtVnVZMlZ6TGlBcUwxeHVkbUZ5SUdGeVozTlVZV2NnUFNBblcyOWlhbVZqZENCQmNtZDFiV1Z1ZEhOZEp5eGNiaUFnSUNCaGNuSmhlVlJoWnlBOUlDZGJiMkpxWldOMElFRnljbUY1WFNjc1hHNGdJQ0FnYjJKcVpXTjBWR0ZuSUQwZ0oxdHZZbXBsWTNRZ1QySnFaV04wWFNjN1hHNWNiaThxS2lCVmMyVmtJR1p2Y2lCaWRXbHNkQzFwYmlCdFpYUm9iMlFnY21WbVpYSmxibU5sY3k0Z0tpOWNiblpoY2lCdlltcGxZM1JRY205MGJ5QTlJRTlpYW1WamRDNXdjbTkwYjNSNWNHVTdYRzVjYmk4cUtpQlZjMlZrSUhSdklHTm9aV05ySUc5aWFtVmpkSE1nWm05eUlHOTNiaUJ3Y205d1pYSjBhV1Z6TGlBcUwxeHVkbUZ5SUdoaGMwOTNibEJ5YjNCbGNuUjVJRDBnYjJKcVpXTjBVSEp2ZEc4dWFHRnpUM2R1VUhKdmNHVnlkSGs3WEc1Y2JpOHFLbHh1SUNvZ1FTQnpjR1ZqYVdGc2FYcGxaQ0IyWlhKemFXOXVJRzltSUdCaVlYTmxTWE5GY1hWaGJHQWdabTl5SUdGeWNtRjVjeUJoYm1RZ2IySnFaV04wY3lCM2FHbGphQ0J3WlhKbWIzSnRjMXh1SUNvZ1pHVmxjQ0JqYjIxd1lYSnBjMjl1Y3lCaGJtUWdkSEpoWTJ0eklIUnlZWFpsY25ObFpDQnZZbXBsWTNSeklHVnVZV0pzYVc1bklHOWlhbVZqZEhNZ2QybDBhQ0JqYVhKamRXeGhjbHh1SUNvZ2NtVm1aWEpsYm1ObGN5QjBieUJpWlNCamIyMXdZWEpsWkM1Y2JpQXFYRzRnS2lCQWNISnBkbUYwWlZ4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHOWlhbVZqZENCVWFHVWdiMkpxWldOMElIUnZJR052YlhCaGNtVXVYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnYjNSb1pYSWdWR2hsSUc5MGFHVnlJRzlpYW1WamRDQjBieUJqYjIxd1lYSmxMbHh1SUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUdKcGRHMWhjMnNnVkdobElHSnBkRzFoYzJzZ1pteGhaM011SUZObFpTQmdZbUZ6WlVselJYRjFZV3hnSUdadmNpQnRiM0psSUdSbGRHRnBiSE11WEc0Z0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQmpkWE4wYjIxcGVtVnlJRlJvWlNCbWRXNWpkR2x2YmlCMGJ5QmpkWE4wYjIxcGVtVWdZMjl0Y0dGeWFYTnZibk11WEc0Z0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQmxjWFZoYkVaMWJtTWdWR2hsSUdaMWJtTjBhVzl1SUhSdklHUmxkR1Z5YldsdVpTQmxjWFZwZG1Gc1pXNTBjeUJ2WmlCMllXeDFaWE11WEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ1czTjBZV05yWFNCVWNtRmphM01nZEhKaGRtVnljMlZrSUdCdlltcGxZM1JnSUdGdVpDQmdiM1JvWlhKZ0lHOWlhbVZqZEhNdVhHNGdLaUJBY21WMGRYSnVjeUI3WW05dmJHVmhibjBnVW1WMGRYSnVjeUJnZEhKMVpXQWdhV1lnZEdobElHOWlhbVZqZEhNZ1lYSmxJR1Z4ZFdsMllXeGxiblFzSUdWc2MyVWdZR1poYkhObFlDNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1ltRnpaVWx6UlhGMVlXeEVaV1Z3S0c5aWFtVmpkQ3dnYjNSb1pYSXNJR0pwZEcxaGMyc3NJR04xYzNSdmJXbDZaWElzSUdWeGRXRnNSblZ1WXl3Z2MzUmhZMnNwSUh0Y2JpQWdkbUZ5SUc5aWFrbHpRWEp5SUQwZ2FYTkJjbkpoZVNodlltcGxZM1FwTEZ4dUlDQWdJQ0FnYjNSb1NYTkJjbklnUFNCcGMwRnljbUY1S0c5MGFHVnlLU3hjYmlBZ0lDQWdJRzlpYWxSaFp5QTlJRzlpYWtselFYSnlJRDhnWVhKeVlYbFVZV2NnT2lCblpYUlVZV2NvYjJKcVpXTjBLU3hjYmlBZ0lDQWdJRzkwYUZSaFp5QTlJRzkwYUVselFYSnlJRDhnWVhKeVlYbFVZV2NnT2lCblpYUlVZV2NvYjNSb1pYSXBPMXh1WEc0Z0lHOWlhbFJoWnlBOUlHOWlhbFJoWnlBOVBTQmhjbWR6VkdGbklEOGdiMkpxWldOMFZHRm5JRG9nYjJKcVZHRm5PMXh1SUNCdmRHaFVZV2NnUFNCdmRHaFVZV2NnUFQwZ1lYSm5jMVJoWnlBL0lHOWlhbVZqZEZSaFp5QTZJRzkwYUZSaFp6dGNibHh1SUNCMllYSWdiMkpxU1hOUFltb2dQU0J2WW1wVVlXY2dQVDBnYjJKcVpXTjBWR0ZuTEZ4dUlDQWdJQ0FnYjNSb1NYTlBZbW9nUFNCdmRHaFVZV2NnUFQwZ2IySnFaV04wVkdGbkxGeHVJQ0FnSUNBZ2FYTlRZVzFsVkdGbklEMGdiMkpxVkdGbklEMDlJRzkwYUZSaFp6dGNibHh1SUNCcFppQW9hWE5UWVcxbFZHRm5JQ1ltSUdselFuVm1abVZ5S0c5aWFtVmpkQ2twSUh0Y2JpQWdJQ0JwWmlBb0lXbHpRblZtWm1WeUtHOTBhR1Z5S1NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lIMWNiaUFnSUNCdlltcEpjMEZ5Y2lBOUlIUnlkV1U3WEc0Z0lDQWdiMkpxU1hOUFltb2dQU0JtWVd4elpUdGNiaUFnZlZ4dUlDQnBaaUFvYVhOVFlXMWxWR0ZuSUNZbUlDRnZZbXBKYzA5aWFpa2dlMXh1SUNBZ0lITjBZV05ySUh4OElDaHpkR0ZqYXlBOUlHNWxkeUJUZEdGamF5azdYRzRnSUNBZ2NtVjBkWEp1SUNodlltcEpjMEZ5Y2lCOGZDQnBjMVI1Y0dWa1FYSnlZWGtvYjJKcVpXTjBLU2xjYmlBZ0lDQWdJRDhnWlhGMVlXeEJjbkpoZVhNb2IySnFaV04wTENCdmRHaGxjaXdnWW1sMGJXRnpheXdnWTNWemRHOXRhWHBsY2l3Z1pYRjFZV3hHZFc1akxDQnpkR0ZqYXlsY2JpQWdJQ0FnSURvZ1pYRjFZV3hDZVZSaFp5aHZZbXBsWTNRc0lHOTBhR1Z5TENCdlltcFVZV2NzSUdKcGRHMWhjMnNzSUdOMWMzUnZiV2w2WlhJc0lHVnhkV0ZzUm5WdVl5d2djM1JoWTJzcE8xeHVJQ0I5WEc0Z0lHbG1JQ2doS0dKcGRHMWhjMnNnSmlCRFQwMVFRVkpGWDFCQlVsUkpRVXhmUmt4QlJ5a3BJSHRjYmlBZ0lDQjJZWElnYjJKcVNYTlhjbUZ3Y0dWa0lEMGdiMkpxU1hOUFltb2dKaVlnYUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNodlltcGxZM1FzSUNkZlgzZHlZWEJ3WldSZlh5Y3BMRnh1SUNBZ0lDQWdJQ0J2ZEdoSmMxZHlZWEJ3WldRZ1BTQnZkR2hKYzA5aWFpQW1KaUJvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0c5MGFHVnlMQ0FuWDE5M2NtRndjR1ZrWDE4bktUdGNibHh1SUNBZ0lHbG1JQ2h2WW1wSmMxZHlZWEJ3WldRZ2ZId2diM1JvU1hOWGNtRndjR1ZrS1NCN1hHNGdJQ0FnSUNCMllYSWdiMkpxVlc1M2NtRndjR1ZrSUQwZ2IySnFTWE5YY21Gd2NHVmtJRDhnYjJKcVpXTjBMblpoYkhWbEtDa2dPaUJ2WW1wbFkzUXNYRzRnSUNBZ0lDQWdJQ0FnYjNSb1ZXNTNjbUZ3Y0dWa0lEMGdiM1JvU1hOWGNtRndjR1ZrSUQ4Z2IzUm9aWEl1ZG1Gc2RXVW9LU0E2SUc5MGFHVnlPMXh1WEc0Z0lDQWdJQ0J6ZEdGamF5QjhmQ0FvYzNSaFkyc2dQU0J1WlhjZ1UzUmhZMnNwTzF4dUlDQWdJQ0FnY21WMGRYSnVJR1Z4ZFdGc1JuVnVZeWh2WW1wVmJuZHlZWEJ3WldRc0lHOTBhRlZ1ZDNKaGNIQmxaQ3dnWW1sMGJXRnpheXdnWTNWemRHOXRhWHBsY2l3Z2MzUmhZMnNwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0JwWmlBb0lXbHpVMkZ0WlZSaFp5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ2ZWeHVJQ0J6ZEdGamF5QjhmQ0FvYzNSaFkyc2dQU0J1WlhjZ1UzUmhZMnNwTzF4dUlDQnlaWFIxY200Z1pYRjFZV3hQWW1wbFkzUnpLRzlpYW1WamRDd2diM1JvWlhJc0lHSnBkRzFoYzJzc0lHTjFjM1J2YldsNlpYSXNJR1Z4ZFdGc1JuVnVZeXdnYzNSaFkyc3BPMXh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHSmhjMlZKYzBWeGRXRnNSR1ZsY0R0Y2JpSXNJblpoY2lCaVlYTmxTWE5GY1hWaGJFUmxaWEFnUFNCeVpYRjFhWEpsS0NjdUwxOWlZWE5sU1hORmNYVmhiRVJsWlhBbktTeGNiaUFnSUNCcGMwOWlhbVZqZEV4cGEyVWdQU0J5WlhGMWFYSmxLQ2N1TDJselQySnFaV04wVEdsclpTY3BPMXh1WEc0dktpcGNiaUFxSUZSb1pTQmlZWE5sSUdsdGNHeGxiV1Z1ZEdGMGFXOXVJRzltSUdCZkxtbHpSWEYxWVd4Z0lIZG9hV05vSUhOMWNIQnZjblJ6SUhCaGNuUnBZV3dnWTI5dGNHRnlhWE52Ym5OY2JpQXFJR0Z1WkNCMGNtRmphM01nZEhKaGRtVnljMlZrSUc5aWFtVmpkSE11WEc0Z0tseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUlFQndZWEpoYlNCN0tuMGdkbUZzZFdVZ1ZHaGxJSFpoYkhWbElIUnZJR052YlhCaGNtVXVYRzRnS2lCQWNHRnlZVzBnZXlwOUlHOTBhR1Z5SUZSb1pTQnZkR2hsY2lCMllXeDFaU0IwYnlCamIyMXdZWEpsTGx4dUlDb2dRSEJoY21GdElIdGliMjlzWldGdWZTQmlhWFJ0WVhOcklGUm9aU0JpYVhSdFlYTnJJR1pzWVdkekxseHVJQ29nSURFZ0xTQlZibTl5WkdWeVpXUWdZMjl0Y0dGeWFYTnZibHh1SUNvZ0lESWdMU0JRWVhKMGFXRnNJR052YlhCaGNtbHpiMjVjYmlBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlGdGpkWE4wYjIxcGVtVnlYU0JVYUdVZ1puVnVZM1JwYjI0Z2RHOGdZM1Z6ZEc5dGFYcGxJR052YlhCaGNtbHpiMjV6TGx4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlGdHpkR0ZqYTEwZ1ZISmhZMnR6SUhSeVlYWmxjbk5sWkNCZ2RtRnNkV1ZnSUdGdVpDQmdiM1JvWlhKZ0lHOWlhbVZqZEhNdVhHNGdLaUJBY21WMGRYSnVjeUI3WW05dmJHVmhibjBnVW1WMGRYSnVjeUJnZEhKMVpXQWdhV1lnZEdobElIWmhiSFZsY3lCaGNtVWdaWEYxYVhaaGJHVnVkQ3dnWld4elpTQmdabUZzYzJWZ0xseHVJQ292WEc1bWRXNWpkR2x2YmlCaVlYTmxTWE5GY1hWaGJDaDJZV3gxWlN3Z2IzUm9aWElzSUdKcGRHMWhjMnNzSUdOMWMzUnZiV2w2WlhJc0lITjBZV05yS1NCN1hHNGdJR2xtSUNoMllXeDFaU0E5UFQwZ2IzUm9aWElwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdmVnh1SUNCcFppQW9kbUZzZFdVZ1BUMGdiblZzYkNCOGZDQnZkR2hsY2lBOVBTQnVkV3hzSUh4OElDZ2hhWE5QWW1wbFkzUk1hV3RsS0haaGJIVmxLU0FtSmlBaGFYTlBZbXBsWTNSTWFXdGxLRzkwYUdWeUtTa3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RtRnNkV1VnSVQwOUlIWmhiSFZsSUNZbUlHOTBhR1Z5SUNFOVBTQnZkR2hsY2p0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnWW1GelpVbHpSWEYxWVd4RVpXVndLSFpoYkhWbExDQnZkR2hsY2l3Z1ltbDBiV0Z6YXl3Z1kzVnpkRzl0YVhwbGNpd2dZbUZ6WlVselJYRjFZV3dzSUhOMFlXTnJLVHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmlZWE5sU1hORmNYVmhiRHRjYmlJc0luWmhjaUJUZEdGamF5QTlJSEpsY1hWcGNtVW9KeTR2WDFOMFlXTnJKeWtzWEc0Z0lDQWdZbUZ6WlVselJYRjFZV3dnUFNCeVpYRjFhWEpsS0NjdUwxOWlZWE5sU1hORmNYVmhiQ2NwTzF4dVhHNHZLaW9nVlhObFpDQjBieUJqYjIxd2IzTmxJR0pwZEcxaGMydHpJR1p2Y2lCMllXeDFaU0JqYjIxd1lYSnBjMjl1Y3k0Z0tpOWNiblpoY2lCRFQwMVFRVkpGWDFCQlVsUkpRVXhmUmt4QlJ5QTlJREVzWEc0Z0lDQWdRMDlOVUVGU1JWOVZUazlTUkVWU1JVUmZSa3hCUnlBOUlESTdYRzVjYmk4cUtseHVJQ29nVkdobElHSmhjMlVnYVcxd2JHVnRaVzUwWVhScGIyNGdiMllnWUY4dWFYTk5ZWFJqYUdBZ2QybDBhRzkxZENCemRYQndiM0owSUdadmNpQnBkR1Z5WVhSbFpTQnphRzl5ZEdoaGJtUnpMbHh1SUNwY2JpQXFJRUJ3Y21sMllYUmxYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnYjJKcVpXTjBJRlJvWlNCdlltcGxZM1FnZEc4Z2FXNXpjR1ZqZEM1Y2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnpiM1Z5WTJVZ1ZHaGxJRzlpYW1WamRDQnZaaUJ3Y205d1pYSjBlU0IyWVd4MVpYTWdkRzhnYldGMFkyZ3VYRzRnS2lCQWNHRnlZVzBnZTBGeWNtRjVmU0J0WVhSamFFUmhkR0VnVkdobElIQnliM0JsY25SNUlHNWhiV1Z6TENCMllXeDFaWE1zSUdGdVpDQmpiMjF3WVhKbElHWnNZV2R6SUhSdklHMWhkR05vTGx4dUlDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdXMk4xYzNSdmJXbDZaWEpkSUZSb1pTQm1kVzVqZEdsdmJpQjBieUJqZFhOMGIyMXBlbVVnWTI5dGNHRnlhWE52Ym5NdVhHNGdLaUJBY21WMGRYSnVjeUI3WW05dmJHVmhibjBnVW1WMGRYSnVjeUJnZEhKMVpXQWdhV1lnWUc5aWFtVmpkR0FnYVhNZ1lTQnRZWFJqYUN3Z1pXeHpaU0JnWm1Gc2MyVmdMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQmlZWE5sU1hOTllYUmphQ2h2WW1wbFkzUXNJSE52ZFhKalpTd2diV0YwWTJoRVlYUmhMQ0JqZFhOMGIyMXBlbVZ5S1NCN1hHNGdJSFpoY2lCcGJtUmxlQ0E5SUcxaGRHTm9SR0YwWVM1c1pXNW5kR2dzWEc0Z0lDQWdJQ0JzWlc1bmRHZ2dQU0JwYm1SbGVDeGNiaUFnSUNBZ0lHNXZRM1Z6ZEc5dGFYcGxjaUE5SUNGamRYTjBiMjFwZW1WeU8xeHVYRzRnSUdsbUlDaHZZbXBsWTNRZ1BUMGdiblZzYkNrZ2UxeHVJQ0FnSUhKbGRIVnliaUFoYkdWdVozUm9PMXh1SUNCOVhHNGdJRzlpYW1WamRDQTlJRTlpYW1WamRDaHZZbXBsWTNRcE8xeHVJQ0IzYUdsc1pTQW9hVzVrWlhndExTa2dlMXh1SUNBZ0lIWmhjaUJrWVhSaElEMGdiV0YwWTJoRVlYUmhXMmx1WkdWNFhUdGNiaUFnSUNCcFppQW9LRzV2UTNWemRHOXRhWHBsY2lBbUppQmtZWFJoV3pKZEtWeHVJQ0FnSUNBZ0lDQWdJRDhnWkdGMFlWc3hYU0FoUFQwZ2IySnFaV04wVzJSaGRHRmJNRjFkWEc0Z0lDQWdJQ0FnSUNBZ09pQWhLR1JoZEdGYk1GMGdhVzRnYjJKcVpXTjBLVnh1SUNBZ0lDQWdJQ0FwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNCOVhHNGdJSDFjYmlBZ2QyaHBiR1VnS0NzcmFXNWtaWGdnUENCc1pXNW5kR2dwSUh0Y2JpQWdJQ0JrWVhSaElEMGdiV0YwWTJoRVlYUmhXMmx1WkdWNFhUdGNiaUFnSUNCMllYSWdhMlY1SUQwZ1pHRjBZVnN3WFN4Y2JpQWdJQ0FnSUNBZ2IySnFWbUZzZFdVZ1BTQnZZbXBsWTNSYmEyVjVYU3hjYmlBZ0lDQWdJQ0FnYzNKalZtRnNkV1VnUFNCa1lYUmhXekZkTzF4dVhHNGdJQ0FnYVdZZ0tHNXZRM1Z6ZEc5dGFYcGxjaUFtSmlCa1lYUmhXekpkS1NCN1hHNGdJQ0FnSUNCcFppQW9iMkpxVm1Gc2RXVWdQVDA5SUhWdVpHVm1hVzVsWkNBbUppQWhLR3RsZVNCcGJpQnZZbXBsWTNRcEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdkbUZ5SUhOMFlXTnJJRDBnYm1WM0lGTjBZV05yTzF4dUlDQWdJQ0FnYVdZZ0tHTjFjM1J2YldsNlpYSXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlISmxjM1ZzZENBOUlHTjFjM1J2YldsNlpYSW9iMkpxVm1Gc2RXVXNJSE55WTFaaGJIVmxMQ0JyWlhrc0lHOWlhbVZqZEN3Z2MyOTFjbU5sTENCemRHRmpheWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JwWmlBb0lTaHlaWE4xYkhRZ1BUMDlJSFZ1WkdWbWFXNWxaRnh1SUNBZ0lDQWdJQ0FnSUNBZ1B5QmlZWE5sU1hORmNYVmhiQ2h6Y21OV1lXeDFaU3dnYjJKcVZtRnNkV1VzSUVOUFRWQkJVa1ZmVUVGU1ZFbEJURjlHVEVGSElId2dRMDlOVUVGU1JWOVZUazlTUkVWU1JVUmZSa3hCUnl3Z1kzVnpkRzl0YVhwbGNpd2djM1JoWTJzcFhHNGdJQ0FnSUNBZ0lDQWdJQ0E2SUhKbGMzVnNkRnh1SUNBZ0lDQWdJQ0FnSUNrcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JpWVhObFNYTk5ZWFJqYUR0Y2JpSXNJblpoY2lCcGMwOWlhbVZqZENBOUlISmxjWFZwY21Vb0p5NHZhWE5QWW1wbFkzUW5LVHRjYmx4dUx5b3FYRzRnS2lCRGFHVmphM01nYVdZZ1lIWmhiSFZsWUNCcGN5QnpkV2wwWVdKc1pTQm1iM0lnYzNSeWFXTjBJR1Z4ZFdGc2FYUjVJR052YlhCaGNtbHpiMjV6TENCcExtVXVJR0E5UFQxZ0xseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaUJBY0dGeVlXMGdleXA5SUhaaGJIVmxJRlJvWlNCMllXeDFaU0IwYnlCamFHVmpheTVjYmlBcUlFQnlaWFIxY201eklIdGliMjlzWldGdWZTQlNaWFIxY201eklHQjBjblZsWUNCcFppQmdkbUZzZFdWZ0lHbG1JSE4xYVhSaFlteGxJR1p2Y2lCemRISnBZM1JjYmlBcUlDQmxjWFZoYkdsMGVTQmpiMjF3WVhKcGMyOXVjeXdnWld4elpTQmdabUZzYzJWZ0xseHVJQ292WEc1bWRXNWpkR2x2YmlCcGMxTjBjbWxqZEVOdmJYQmhjbUZpYkdVb2RtRnNkV1VwSUh0Y2JpQWdjbVYwZFhKdUlIWmhiSFZsSUQwOVBTQjJZV3gxWlNBbUppQWhhWE5QWW1wbFkzUW9kbUZzZFdVcE8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdselUzUnlhV04wUTI5dGNHRnlZV0pzWlR0Y2JpSXNJblpoY2lCcGMxTjBjbWxqZEVOdmJYQmhjbUZpYkdVZ1BTQnlaWEYxYVhKbEtDY3VMMTlwYzFOMGNtbGpkRU52YlhCaGNtRmliR1VuS1N4Y2JpQWdJQ0JyWlhseklEMGdjbVZ4ZFdseVpTZ25MaTlyWlhsekp5azdYRzVjYmk4cUtseHVJQ29nUjJWMGN5QjBhR1VnY0hKdmNHVnlkSGtnYm1GdFpYTXNJSFpoYkhWbGN5d2dZVzVrSUdOdmJYQmhjbVVnWm14aFozTWdiMllnWUc5aWFtVmpkR0F1WEc0Z0tseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCdlltcGxZM1FnVkdobElHOWlhbVZqZENCMGJ5QnhkV1Z5ZVM1Y2JpQXFJRUJ5WlhSMWNtNXpJSHRCY25KaGVYMGdVbVYwZFhKdWN5QjBhR1VnYldGMFkyZ2daR0YwWVNCdlppQmdiMkpxWldOMFlDNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1oyVjBUV0YwWTJoRVlYUmhLRzlpYW1WamRDa2dlMXh1SUNCMllYSWdjbVZ6ZFd4MElEMGdhMlY1Y3lodlltcGxZM1FwTEZ4dUlDQWdJQ0FnYkdWdVozUm9JRDBnY21WemRXeDBMbXhsYm1kMGFEdGNibHh1SUNCM2FHbHNaU0FvYkdWdVozUm9MUzBwSUh0Y2JpQWdJQ0IyWVhJZ2EyVjVJRDBnY21WemRXeDBXMnhsYm1kMGFGMHNYRzRnSUNBZ0lDQWdJSFpoYkhWbElEMGdiMkpxWldOMFcydGxlVjA3WEc1Y2JpQWdJQ0J5WlhOMWJIUmJiR1Z1WjNSb1hTQTlJRnRyWlhrc0lIWmhiSFZsTENCcGMxTjBjbWxqZEVOdmJYQmhjbUZpYkdVb2RtRnNkV1VwWFR0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnY21WemRXeDBPMXh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHZGxkRTFoZEdOb1JHRjBZVHRjYmlJc0lpOHFLbHh1SUNvZ1FTQnpjR1ZqYVdGc2FYcGxaQ0IyWlhKemFXOXVJRzltSUdCdFlYUmphR1Z6VUhKdmNHVnlkSGxnSUdadmNpQnpiM1Z5WTJVZ2RtRnNkV1Z6SUhOMWFYUmhZbXhsWEc0Z0tpQm1iM0lnYzNSeWFXTjBJR1Z4ZFdGc2FYUjVJR052YlhCaGNtbHpiMjV6TENCcExtVXVJR0E5UFQxZ0xseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdhMlY1SUZSb1pTQnJaWGtnYjJZZ2RHaGxJSEJ5YjNCbGNuUjVJSFJ2SUdkbGRDNWNiaUFxSUVCd1lYSmhiU0I3S24wZ2MzSmpWbUZzZFdVZ1ZHaGxJSFpoYkhWbElIUnZJRzFoZEdOb0xseHVJQ29nUUhKbGRIVnlibk1nZTBaMWJtTjBhVzl1ZlNCU1pYUjFjbTV6SUhSb1pTQnVaWGNnYzNCbFl5Qm1kVzVqZEdsdmJpNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z2JXRjBZMmhsYzFOMGNtbGpkRU52YlhCaGNtRmliR1VvYTJWNUxDQnpjbU5XWVd4MVpTa2dlMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRvYjJKcVpXTjBLU0I3WEc0Z0lDQWdhV1lnS0c5aWFtVmpkQ0E5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnZZbXBsWTNSYmEyVjVYU0E5UFQwZ2MzSmpWbUZzZFdVZ0ppWmNiaUFnSUNBZ0lDaHpjbU5XWVd4MVpTQWhQVDBnZFc1a1pXWnBibVZrSUh4OElDaHJaWGtnYVc0Z1QySnFaV04wS0c5aWFtVmpkQ2twS1R0Y2JpQWdmVHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnRZWFJqYUdWelUzUnlhV04wUTI5dGNHRnlZV0pzWlR0Y2JpSXNJblpoY2lCaVlYTmxTWE5OWVhSamFDQTlJSEpsY1hWcGNtVW9KeTR2WDJKaGMyVkpjMDFoZEdOb0p5a3NYRzRnSUNBZ1oyVjBUV0YwWTJoRVlYUmhJRDBnY21WeGRXbHlaU2duTGk5ZloyVjBUV0YwWTJoRVlYUmhKeWtzWEc0Z0lDQWdiV0YwWTJobGMxTjBjbWxqZEVOdmJYQmhjbUZpYkdVZ1BTQnlaWEYxYVhKbEtDY3VMMTl0WVhSamFHVnpVM1J5YVdOMFEyOXRjR0Z5WVdKc1pTY3BPMXh1WEc0dktpcGNiaUFxSUZSb1pTQmlZWE5sSUdsdGNHeGxiV1Z1ZEdGMGFXOXVJRzltSUdCZkxtMWhkR05vWlhOZ0lIZG9hV05vSUdSdlpYTnVKM1FnWTJ4dmJtVWdZSE52ZFhKalpXQXVYRzRnS2x4dUlDb2dRSEJ5YVhaaGRHVmNiaUFxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J6YjNWeVkyVWdWR2hsSUc5aWFtVmpkQ0J2WmlCd2NtOXdaWEowZVNCMllXeDFaWE1nZEc4Z2JXRjBZMmd1WEc0Z0tpQkFjbVYwZFhKdWN5QjdSblZ1WTNScGIyNTlJRkpsZEhWeWJuTWdkR2hsSUc1bGR5QnpjR1ZqSUdaMWJtTjBhVzl1TGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJpWVhObFRXRjBZMmhsY3loemIzVnlZMlVwSUh0Y2JpQWdkbUZ5SUcxaGRHTm9SR0YwWVNBOUlHZGxkRTFoZEdOb1JHRjBZU2h6YjNWeVkyVXBPMXh1SUNCcFppQW9iV0YwWTJoRVlYUmhMbXhsYm1kMGFDQTlQU0F4SUNZbUlHMWhkR05vUkdGMFlWc3dYVnN5WFNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ0WVhSamFHVnpVM1J5YVdOMFEyOXRjR0Z5WVdKc1pTaHRZWFJqYUVSaGRHRmJNRjFiTUYwc0lHMWhkR05vUkdGMFlWc3dYVnN4WFNrN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1S0c5aWFtVmpkQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQnZZbXBsWTNRZ1BUMDlJSE52ZFhKalpTQjhmQ0JpWVhObFNYTk5ZWFJqYUNodlltcGxZM1FzSUhOdmRYSmpaU3dnYldGMFkyaEVZWFJoS1R0Y2JpQWdmVHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmlZWE5sVFdGMFkyaGxjenRjYmlJc0luWmhjaUJpWVhObFIyVjBWR0ZuSUQwZ2NtVnhkV2x5WlNnbkxpOWZZbUZ6WlVkbGRGUmhaeWNwTEZ4dUlDQWdJR2x6VDJKcVpXTjBUR2xyWlNBOUlISmxjWFZwY21Vb0p5NHZhWE5QWW1wbFkzUk1hV3RsSnlrN1hHNWNiaThxS2lCZ1QySnFaV04wSTNSdlUzUnlhVzVuWUNCeVpYTjFiSFFnY21WbVpYSmxibU5sY3k0Z0tpOWNiblpoY2lCemVXMWliMnhVWVdjZ1BTQW5XMjlpYW1WamRDQlRlVzFpYjJ4ZEp6dGNibHh1THlvcVhHNGdLaUJEYUdWamEzTWdhV1lnWUhaaGJIVmxZQ0JwY3lCamJHRnpjMmxtYVdWa0lHRnpJR0VnWUZONWJXSnZiR0FnY0hKcGJXbDBhWFpsSUc5eUlHOWlhbVZqZEM1Y2JpQXFYRzRnS2lCQWMzUmhkR2xqWEc0Z0tpQkFiV1Z0WW1WeVQyWWdYMXh1SUNvZ1FITnBibU5sSURRdU1DNHdYRzRnS2lCQVkyRjBaV2R2Y25rZ1RHRnVaMXh1SUNvZ1FIQmhjbUZ0SUhzcWZTQjJZV3gxWlNCVWFHVWdkbUZzZFdVZ2RHOGdZMmhsWTJzdVhHNGdLaUJBY21WMGRYSnVjeUI3WW05dmJHVmhibjBnVW1WMGRYSnVjeUJnZEhKMVpXQWdhV1lnWUhaaGJIVmxZQ0JwY3lCaElITjViV0p2YkN3Z1pXeHpaU0JnWm1Gc2MyVmdMbHh1SUNvZ1FHVjRZVzF3YkdWY2JpQXFYRzRnS2lCZkxtbHpVM2x0WW05c0tGTjViV0p2YkM1cGRHVnlZWFJ2Y2lrN1hHNGdLaUF2THlBOVBpQjBjblZsWEc0Z0tseHVJQ29nWHk1cGMxTjViV0p2YkNnbllXSmpKeWs3WEc0Z0tpQXZMeUE5UGlCbVlXeHpaVnh1SUNvdlhHNW1kVzVqZEdsdmJpQnBjMU41YldKdmJDaDJZV3gxWlNrZ2UxeHVJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlIWmhiSFZsSUQwOUlDZHplVzFpYjJ3bklIeDhYRzRnSUNBZ0tHbHpUMkpxWldOMFRHbHJaU2gyWVd4MVpTa2dKaVlnWW1GelpVZGxkRlJoWnloMllXeDFaU2tnUFQwZ2MzbHRZbTlzVkdGbktUdGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCcGMxTjViV0p2YkR0Y2JpSXNJblpoY2lCcGMwRnljbUY1SUQwZ2NtVnhkV2x5WlNnbkxpOXBjMEZ5Y21GNUp5a3NYRzRnSUNBZ2FYTlRlVzFpYjJ3Z1BTQnlaWEYxYVhKbEtDY3VMMmx6VTNsdFltOXNKeWs3WEc1Y2JpOHFLaUJWYzJWa0lIUnZJRzFoZEdOb0lIQnliM0JsY25SNUlHNWhiV1Z6SUhkcGRHaHBiaUJ3Y205d1pYSjBlU0J3WVhSb2N5NGdLaTljYm5aaGNpQnlaVWx6UkdWbGNGQnliM0FnUFNBdlhGd3VmRnhjV3lnL09sdGVXMXhjWFYwcWZDaGJYQ0luWFNrb1B6b29QeUZjWERFcFcxNWNYRnhjWFh4Y1hGeGNMaWtxUDF4Y01TbGNYRjB2TEZ4dUlDQWdJSEpsU1hOUWJHRnBibEJ5YjNBZ1BTQXZYbHhjZHlva0x6dGNibHh1THlvcVhHNGdLaUJEYUdWamEzTWdhV1lnWUhaaGJIVmxZQ0JwY3lCaElIQnliM0JsY25SNUlHNWhiV1VnWVc1a0lHNXZkQ0JoSUhCeWIzQmxjblI1SUhCaGRHZ3VYRzRnS2x4dUlDb2dRSEJ5YVhaaGRHVmNiaUFxSUVCd1lYSmhiU0I3S24wZ2RtRnNkV1VnVkdobElIWmhiSFZsSUhSdklHTm9aV05yTGx4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlGdHZZbXBsWTNSZElGUm9aU0J2WW1wbFkzUWdkRzhnY1hWbGNua2dhMlY1Y3lCdmJpNWNiaUFxSUVCeVpYUjFjbTV6SUh0aWIyOXNaV0Z1ZlNCU1pYUjFjbTV6SUdCMGNuVmxZQ0JwWmlCZ2RtRnNkV1ZnSUdseklHRWdjSEp2Y0dWeWRIa2dibUZ0WlN3Z1pXeHpaU0JnWm1Gc2MyVmdMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQnBjMHRsZVNoMllXeDFaU3dnYjJKcVpXTjBLU0I3WEc0Z0lHbG1JQ2hwYzBGeWNtRjVLSFpoYkhWbEtTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ2ZWeHVJQ0IyWVhJZ2RIbHdaU0E5SUhSNWNHVnZaaUIyWVd4MVpUdGNiaUFnYVdZZ0tIUjVjR1VnUFQwZ0oyNTFiV0psY2ljZ2ZId2dkSGx3WlNBOVBTQW5jM2x0WW05c0p5QjhmQ0IwZVhCbElEMDlJQ2RpYjI5c1pXRnVKeUI4ZkZ4dUlDQWdJQ0FnZG1Gc2RXVWdQVDBnYm5Wc2JDQjhmQ0JwYzFONWJXSnZiQ2gyWVd4MVpTa3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdjbVZKYzFCc1lXbHVVSEp2Y0M1MFpYTjBLSFpoYkhWbEtTQjhmQ0FoY21WSmMwUmxaWEJRY205d0xuUmxjM1FvZG1Gc2RXVXBJSHg4WEc0Z0lDQWdLRzlpYW1WamRDQWhQU0J1ZFd4c0lDWW1JSFpoYkhWbElHbHVJRTlpYW1WamRDaHZZbXBsWTNRcEtUdGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCcGMwdGxlVHRjYmlJc0luWmhjaUJOWVhCRFlXTm9aU0E5SUhKbGNYVnBjbVVvSnk0dlgwMWhjRU5oWTJobEp5azdYRzVjYmk4cUtpQkZjbkp2Y2lCdFpYTnpZV2RsSUdOdmJuTjBZVzUwY3k0Z0tpOWNiblpoY2lCR1ZVNURYMFZTVWs5U1gxUkZXRlFnUFNBblJYaHdaV04wWldRZ1lTQm1kVzVqZEdsdmJpYzdYRzVjYmk4cUtseHVJQ29nUTNKbFlYUmxjeUJoSUdaMWJtTjBhVzl1SUhSb1lYUWdiV1Z0YjJsNlpYTWdkR2hsSUhKbGMzVnNkQ0J2WmlCZ1puVnVZMkF1SUVsbUlHQnlaWE52YkhabGNtQWdhWE5jYmlBcUlIQnliM1pwWkdWa0xDQnBkQ0JrWlhSbGNtMXBibVZ6SUhSb1pTQmpZV05vWlNCclpYa2dabTl5SUhOMGIzSnBibWNnZEdobElISmxjM1ZzZENCaVlYTmxaQ0J2YmlCMGFHVmNiaUFxSUdGeVozVnRaVzUwY3lCd2NtOTJhV1JsWkNCMGJ5QjBhR1VnYldWdGIybDZaV1FnWm5WdVkzUnBiMjR1SUVKNUlHUmxabUYxYkhRc0lIUm9aU0JtYVhKemRDQmhjbWQxYldWdWRGeHVJQ29nY0hKdmRtbGtaV1FnZEc4Z2RHaGxJRzFsYlc5cGVtVmtJR1oxYm1OMGFXOXVJR2x6SUhWelpXUWdZWE1nZEdobElHMWhjQ0JqWVdOb1pTQnJaWGt1SUZSb1pTQmdablZ1WTJCY2JpQXFJR2x6SUdsdWRtOXJaV1FnZDJsMGFDQjBhR1VnWUhSb2FYTmdJR0pwYm1ScGJtY2diMllnZEdobElHMWxiVzlwZW1Wa0lHWjFibU4wYVc5dUxseHVJQ3BjYmlBcUlDb3FUbTkwWlRvcUtpQlVhR1VnWTJGamFHVWdhWE1nWlhod2IzTmxaQ0JoY3lCMGFHVWdZR05oWTJobFlDQndjbTl3WlhKMGVTQnZiaUIwYUdVZ2JXVnRiMmw2WldSY2JpQXFJR1oxYm1OMGFXOXVMaUJKZEhNZ1kzSmxZWFJwYjI0Z2JXRjVJR0psSUdOMWMzUnZiV2w2WldRZ1lua2djbVZ3YkdGamFXNW5JSFJvWlNCZ1h5NXRaVzF2YVhwbExrTmhZMmhsWUZ4dUlDb2dZMjl1YzNSeWRXTjBiM0lnZDJsMGFDQnZibVVnZDJodmMyVWdhVzV6ZEdGdVkyVnpJR2x0Y0d4bGJXVnVkQ0IwYUdWY2JpQXFJRnRnVFdGd1lGMG9hSFIwY0RvdkwyVmpiV0V0YVc1MFpYSnVZWFJwYjI1aGJDNXZjbWN2WldOdFlTMHlOakl2Tnk0d0x5TnpaV010Y0hKdmNHVnlkR2xsY3kxdlppMTBhR1V0YldGd0xYQnliM1J2ZEhsd1pTMXZZbXBsWTNRcFhHNGdLaUJ0WlhSb2IyUWdhVzUwWlhKbVlXTmxJRzltSUdCamJHVmhjbUFzSUdCa1pXeGxkR1ZnTENCZ1oyVjBZQ3dnWUdoaGMyQXNJR0Z1WkNCZ2MyVjBZQzVjYmlBcVhHNGdLaUJBYzNSaGRHbGpYRzRnS2lCQWJXVnRZbVZ5VDJZZ1gxeHVJQ29nUUhOcGJtTmxJREF1TVM0d1hHNGdLaUJBWTJGMFpXZHZjbmtnUm5WdVkzUnBiMjVjYmlBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlHWjFibU1nVkdobElHWjFibU4wYVc5dUlIUnZJR2hoZG1VZ2FYUnpJRzkxZEhCMWRDQnRaVzF2YVhwbFpDNWNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUZ0eVpYTnZiSFpsY2wwZ1ZHaGxJR1oxYm1OMGFXOXVJSFJ2SUhKbGMyOXNkbVVnZEdobElHTmhZMmhsSUd0bGVTNWNiaUFxSUVCeVpYUjFjbTV6SUh0R2RXNWpkR2x2Ym4wZ1VtVjBkWEp1Y3lCMGFHVWdibVYzSUcxbGJXOXBlbVZrSUdaMWJtTjBhVzl1TGx4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxWEc0Z0tpQjJZWElnYjJKcVpXTjBJRDBnZXlBbllTYzZJREVzSUNkaUp6b2dNaUI5TzF4dUlDb2dkbUZ5SUc5MGFHVnlJRDBnZXlBbll5YzZJRE1zSUNka0p6b2dOQ0I5TzF4dUlDcGNiaUFxSUhaaGNpQjJZV3gxWlhNZ1BTQmZMbTFsYlc5cGVtVW9YeTUyWVd4MVpYTXBPMXh1SUNvZ2RtRnNkV1Z6S0c5aWFtVmpkQ2s3WEc0Z0tpQXZMeUE5UGlCYk1Td2dNbDFjYmlBcVhHNGdLaUIyWVd4MVpYTW9iM1JvWlhJcE8xeHVJQ29nTHk4Z1BUNGdXek1zSURSZFhHNGdLbHh1SUNvZ2IySnFaV04wTG1FZ1BTQXlPMXh1SUNvZ2RtRnNkV1Z6S0c5aWFtVmpkQ2s3WEc0Z0tpQXZMeUE5UGlCYk1Td2dNbDFjYmlBcVhHNGdLaUF2THlCTmIyUnBabmtnZEdobElISmxjM1ZzZENCallXTm9aUzVjYmlBcUlIWmhiSFZsY3k1allXTm9aUzV6WlhRb2IySnFaV04wTENCYkoyRW5MQ0FuWWlkZEtUdGNiaUFxSUhaaGJIVmxjeWh2WW1wbFkzUXBPMXh1SUNvZ0x5OGdQVDRnV3lkaEp5d2dKMkluWFZ4dUlDcGNiaUFxSUM4dklGSmxjR3hoWTJVZ1lGOHViV1Z0YjJsNlpTNURZV05vWldBdVhHNGdLaUJmTG0xbGJXOXBlbVV1UTJGamFHVWdQU0JYWldGclRXRndPMXh1SUNvdlhHNW1kVzVqZEdsdmJpQnRaVzF2YVhwbEtHWjFibU1zSUhKbGMyOXNkbVZ5S1NCN1hHNGdJR2xtSUNoMGVYQmxiMllnWm5WdVl5QWhQU0FuWm5WdVkzUnBiMjRuSUh4OElDaHlaWE52YkhabGNpQWhQU0J1ZFd4c0lDWW1JSFI1Y0dWdlppQnlaWE52YkhabGNpQWhQU0FuWm5WdVkzUnBiMjRuS1NrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1JsVk9RMTlGVWxKUFVsOVVSVmhVS1R0Y2JpQWdmVnh1SUNCMllYSWdiV1Z0YjJsNlpXUWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0IyWVhJZ1lYSm5jeUE5SUdGeVozVnRaVzUwY3l4Y2JpQWdJQ0FnSUNBZ2EyVjVJRDBnY21WemIyeDJaWElnUHlCeVpYTnZiSFpsY2k1aGNIQnNlU2gwYUdsekxDQmhjbWR6S1NBNklHRnlaM05iTUYwc1hHNGdJQ0FnSUNBZ0lHTmhZMmhsSUQwZ2JXVnRiMmw2WldRdVkyRmphR1U3WEc1Y2JpQWdJQ0JwWmlBb1kyRmphR1V1YUdGektHdGxlU2twSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJqWVdOb1pTNW5aWFFvYTJWNUtUdGNiaUFnSUNCOVhHNGdJQ0FnZG1GeUlISmxjM1ZzZENBOUlHWjFibU11WVhCd2JIa29kR2hwY3l3Z1lYSm5jeWs3WEc0Z0lDQWdiV1Z0YjJsNlpXUXVZMkZqYUdVZ1BTQmpZV05vWlM1elpYUW9hMlY1TENCeVpYTjFiSFFwSUh4OElHTmhZMmhsTzF4dUlDQWdJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNGdJSDA3WEc0Z0lHMWxiVzlwZW1Wa0xtTmhZMmhsSUQwZ2JtVjNJQ2h0WlcxdmFYcGxMa05oWTJobElIeDhJRTFoY0VOaFkyaGxLVHRjYmlBZ2NtVjBkWEp1SUcxbGJXOXBlbVZrTzF4dWZWeHVYRzR2THlCRmVIQnZjMlVnWUUxaGNFTmhZMmhsWUM1Y2JtMWxiVzlwZW1VdVEyRmphR1VnUFNCTllYQkRZV05vWlR0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnRaVzF2YVhwbE8xeHVJaXdpZG1GeUlHMWxiVzlwZW1VZ1BTQnlaWEYxYVhKbEtDY3VMMjFsYlc5cGVtVW5LVHRjYmx4dUx5b3FJRlZ6WldRZ1lYTWdkR2hsSUcxaGVHbHRkVzBnYldWdGIybDZaU0JqWVdOb1pTQnphWHBsTGlBcUwxeHVkbUZ5SUUxQldGOU5SVTFQU1ZwRlgxTkpXa1VnUFNBMU1EQTdYRzVjYmk4cUtseHVJQ29nUVNCemNHVmphV0ZzYVhwbFpDQjJaWEp6YVc5dUlHOW1JR0JmTG0xbGJXOXBlbVZnSUhkb2FXTm9JR05zWldGeWN5QjBhR1VnYldWdGIybDZaV1FnWm5WdVkzUnBiMjRuYzF4dUlDb2dZMkZqYUdVZ2QyaGxiaUJwZENCbGVHTmxaV1J6SUdCTlFWaGZUVVZOVDBsYVJWOVRTVnBGWUM1Y2JpQXFYRzRnS2lCQWNISnBkbUYwWlZ4dUlDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdablZ1WXlCVWFHVWdablZ1WTNScGIyNGdkRzhnYUdGMlpTQnBkSE1nYjNWMGNIVjBJRzFsYlc5cGVtVmtMbHh1SUNvZ1FISmxkSFZ5Ym5NZ2UwWjFibU4wYVc5dWZTQlNaWFIxY201eklIUm9aU0J1WlhjZ2JXVnRiMmw2WldRZ1puVnVZM1JwYjI0dVhHNGdLaTljYm1aMWJtTjBhVzl1SUcxbGJXOXBlbVZEWVhCd1pXUW9ablZ1WXlrZ2UxeHVJQ0IyWVhJZ2NtVnpkV3gwSUQwZ2JXVnRiMmw2WlNobWRXNWpMQ0JtZFc1amRHbHZiaWhyWlhrcElIdGNiaUFnSUNCcFppQW9ZMkZqYUdVdWMybDZaU0E5UFQwZ1RVRllYMDFGVFU5SldrVmZVMGxhUlNrZ2UxeHVJQ0FnSUNBZ1kyRmphR1V1WTJ4bFlYSW9LVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUd0bGVUdGNiaUFnZlNrN1hHNWNiaUFnZG1GeUlHTmhZMmhsSUQwZ2NtVnpkV3gwTG1OaFkyaGxPMXh1SUNCeVpYUjFjbTRnY21WemRXeDBPMXh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHMWxiVzlwZW1WRFlYQndaV1E3WEc0aUxDSjJZWElnYldWdGIybDZaVU5oY0hCbFpDQTlJSEpsY1hWcGNtVW9KeTR2WDIxbGJXOXBlbVZEWVhCd1pXUW5LVHRjYmx4dUx5b3FJRlZ6WldRZ2RHOGdiV0YwWTJnZ2NISnZjR1Z5ZEhrZ2JtRnRaWE1nZDJsMGFHbHVJSEJ5YjNCbGNuUjVJSEJoZEdoekxpQXFMMXh1ZG1GeUlISmxVSEp2Y0U1aGJXVWdQU0F2VzE0dVcxeGNYVjByZkZ4Y1d5Zy9PaWd0UDF4Y1pDc29QenBjWEM1Y1hHUXJLVDhwZkNoYlhDSW5YU2tvS0Q4NktEOGhYRnd5S1Z0ZVhGeGNYRjE4WEZ4Y1hDNHBLajhwWEZ3eUtWeGNYWHdvUHowb1B6cGNYQzU4WEZ4YlhGeGRLU2cvT2x4Y0xueGNYRnRjWEYxOEpDa3BMMmM3WEc1Y2JpOHFLaUJWYzJWa0lIUnZJRzFoZEdOb0lHSmhZMnR6YkdGemFHVnpJR2x1SUhCeWIzQmxjblI1SUhCaGRHaHpMaUFxTDF4dWRtRnlJSEpsUlhOallYQmxRMmhoY2lBOUlDOWNYRnhjS0Z4Y1hGd3BQeTluTzF4dVhHNHZLaXBjYmlBcUlFTnZiblpsY25SeklHQnpkSEpwYm1kZ0lIUnZJR0VnY0hKdmNHVnlkSGtnY0dGMGFDQmhjbkpoZVM1Y2JpQXFYRzRnS2lCQWNISnBkbUYwWlZ4dUlDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlITjBjbWx1WnlCVWFHVWdjM1J5YVc1bklIUnZJR052Ym5abGNuUXVYRzRnS2lCQWNtVjBkWEp1Y3lCN1FYSnlZWGw5SUZKbGRIVnlibk1nZEdobElIQnliM0JsY25SNUlIQmhkR2dnWVhKeVlYa3VYRzRnS2k5Y2JuWmhjaUJ6ZEhKcGJtZFViMUJoZEdnZ1BTQnRaVzF2YVhwbFEyRndjR1ZrS0daMWJtTjBhVzl1S0hOMGNtbHVaeWtnZTF4dUlDQjJZWElnY21WemRXeDBJRDBnVzEwN1hHNGdJR2xtSUNoemRISnBibWN1WTJoaGNrTnZaR1ZCZENnd0tTQTlQVDBnTkRZZ0x5b2dMaUFxTHlrZ2UxeHVJQ0FnSUhKbGMzVnNkQzV3ZFhOb0tDY25LVHRjYmlBZ2ZWeHVJQ0J6ZEhKcGJtY3VjbVZ3YkdGalpTaHlaVkJ5YjNCT1lXMWxMQ0JtZFc1amRHbHZiaWh0WVhSamFDd2diblZ0WW1WeUxDQnhkVzkwWlN3Z2MzVmlVM1J5YVc1bktTQjdYRzRnSUNBZ2NtVnpkV3gwTG5CMWMyZ29jWFZ2ZEdVZ1B5QnpkV0pUZEhKcGJtY3VjbVZ3YkdGalpTaHlaVVZ6WTJGd1pVTm9ZWElzSUNja01TY3BJRG9nS0c1MWJXSmxjaUI4ZkNCdFlYUmphQ2twTzF4dUlDQjlLVHRjYmlBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYm4wcE8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSE4wY21sdVoxUnZVR0YwYUR0Y2JpSXNJaThxS2x4dUlDb2dRU0J6Y0dWamFXRnNhWHBsWkNCMlpYSnphVzl1SUc5bUlHQmZMbTFoY0dBZ1ptOXlJR0Z5Y21GNWN5QjNhWFJvYjNWMElITjFjSEJ2Y25RZ1ptOXlJR2wwWlhKaGRHVmxYRzRnS2lCemFHOXlkR2hoYm1SekxseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaUJBY0dGeVlXMGdlMEZ5Y21GNWZTQmJZWEp5WVhsZElGUm9aU0JoY25KaGVTQjBieUJwZEdWeVlYUmxJRzkyWlhJdVhHNGdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0JwZEdWeVlYUmxaU0JVYUdVZ1puVnVZM1JwYjI0Z2FXNTJiMnRsWkNCd1pYSWdhWFJsY21GMGFXOXVMbHh1SUNvZ1FISmxkSFZ5Ym5NZ2UwRnljbUY1ZlNCU1pYUjFjbTV6SUhSb1pTQnVaWGNnYldGd2NHVmtJR0Z5Y21GNUxseHVJQ292WEc1bWRXNWpkR2x2YmlCaGNuSmhlVTFoY0NoaGNuSmhlU3dnYVhSbGNtRjBaV1VwSUh0Y2JpQWdkbUZ5SUdsdVpHVjRJRDBnTFRFc1hHNGdJQ0FnSUNCc1pXNW5kR2dnUFNCaGNuSmhlU0E5UFNCdWRXeHNJRDhnTUNBNklHRnljbUY1TG14bGJtZDBhQ3hjYmlBZ0lDQWdJSEpsYzNWc2RDQTlJRUZ5Y21GNUtHeGxibWQwYUNrN1hHNWNiaUFnZDJocGJHVWdLQ3NyYVc1a1pYZ2dQQ0JzWlc1bmRHZ3BJSHRjYmlBZ0lDQnlaWE4xYkhSYmFXNWtaWGhkSUQwZ2FYUmxjbUYwWldVb1lYSnlZWGxiYVc1a1pYaGRMQ0JwYm1SbGVDd2dZWEp5WVhrcE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCeVpYTjFiSFE3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdZWEp5WVhsTllYQTdYRzRpTENKMllYSWdVM2x0WW05c0lEMGdjbVZ4ZFdseVpTZ25MaTlmVTNsdFltOXNKeWtzWEc0Z0lDQWdZWEp5WVhsTllYQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGNuSmhlVTFoY0NjcExGeHVJQ0FnSUdselFYSnlZWGtnUFNCeVpYRjFhWEpsS0NjdUwybHpRWEp5WVhrbktTeGNiaUFnSUNCcGMxTjViV0p2YkNBOUlISmxjWFZwY21Vb0p5NHZhWE5UZVcxaWIyd25LVHRjYmx4dUx5b3FJRlZ6WldRZ1lYTWdjbVZtWlhKbGJtTmxjeUJtYjNJZ2RtRnlhVzkxY3lCZ1RuVnRZbVZ5WUNCamIyNXpkR0Z1ZEhNdUlDb3ZYRzUyWVhJZ1NVNUdTVTVKVkZrZ1BTQXhJQzhnTUR0Y2JseHVMeW9xSUZWelpXUWdkRzhnWTI5dWRtVnlkQ0J6ZVcxaWIyeHpJSFJ2SUhCeWFXMXBkR2wyWlhNZ1lXNWtJSE4wY21sdVozTXVJQ292WEc1MllYSWdjM2x0WW05c1VISnZkRzhnUFNCVGVXMWliMndnUHlCVGVXMWliMnd1Y0hKdmRHOTBlWEJsSURvZ2RXNWtaV1pwYm1Wa0xGeHVJQ0FnSUhONWJXSnZiRlJ2VTNSeWFXNW5JRDBnYzNsdFltOXNVSEp2ZEc4Z1B5QnplVzFpYjJ4UWNtOTBieTUwYjFOMGNtbHVaeUE2SUhWdVpHVm1hVzVsWkR0Y2JseHVMeW9xWEc0Z0tpQlVhR1VnWW1GelpTQnBiWEJzWlcxbGJuUmhkR2x2YmlCdlppQmdYeTUwYjFOMGNtbHVaMkFnZDJocFkyZ2daRzlsYzI0bmRDQmpiMjUyWlhKMElHNTFiR3hwYzJoY2JpQXFJSFpoYkhWbGN5QjBieUJsYlhCMGVTQnpkSEpwYm1kekxseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaUJBY0dGeVlXMGdleXA5SUhaaGJIVmxJRlJvWlNCMllXeDFaU0IwYnlCd2NtOWpaWE56TGx4dUlDb2dRSEpsZEhWeWJuTWdlM04wY21sdVozMGdVbVYwZFhKdWN5QjBhR1VnYzNSeWFXNW5MbHh1SUNvdlhHNW1kVzVqZEdsdmJpQmlZWE5sVkc5VGRISnBibWNvZG1Gc2RXVXBJSHRjYmlBZ0x5OGdSWGhwZENCbFlYSnNlU0JtYjNJZ2MzUnlhVzVuY3lCMGJ5QmhkbTlwWkNCaElIQmxjbVp2Y20xaGJtTmxJR2hwZENCcGJpQnpiMjFsSUdWdWRtbHliMjV0Wlc1MGN5NWNiaUFnYVdZZ0tIUjVjR1Z2WmlCMllXeDFaU0E5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUhKbGRIVnliaUIyWVd4MVpUdGNiaUFnZlZ4dUlDQnBaaUFvYVhOQmNuSmhlU2gyWVd4MVpTa3BJSHRjYmlBZ0lDQXZMeUJTWldOMWNuTnBkbVZzZVNCamIyNTJaWEowSUhaaGJIVmxjeUFvYzNWelkyVndkR2xpYkdVZ2RHOGdZMkZzYkNCemRHRmpheUJzYVcxcGRITXBMbHh1SUNBZ0lISmxkSFZ5YmlCaGNuSmhlVTFoY0NoMllXeDFaU3dnWW1GelpWUnZVM1J5YVc1bktTQXJJQ2NuTzF4dUlDQjlYRzRnSUdsbUlDaHBjMU41YldKdmJDaDJZV3gxWlNrcElIdGNiaUFnSUNCeVpYUjFjbTRnYzNsdFltOXNWRzlUZEhKcGJtY2dQeUJ6ZVcxaWIyeFViMU4wY21sdVp5NWpZV3hzS0haaGJIVmxLU0E2SUNjbk8xeHVJQ0I5WEc0Z0lIWmhjaUJ5WlhOMWJIUWdQU0FvZG1Gc2RXVWdLeUFuSnlrN1hHNGdJSEpsZEhWeWJpQW9jbVZ6ZFd4MElEMDlJQ2N3SnlBbUppQW9NU0F2SUhaaGJIVmxLU0E5UFNBdFNVNUdTVTVKVkZrcElEOGdKeTB3SnlBNklISmxjM1ZzZER0Y2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JpWVhObFZHOVRkSEpwYm1jN1hHNGlMQ0oyWVhJZ1ltRnpaVlJ2VTNSeWFXNW5JRDBnY21WeGRXbHlaU2duTGk5ZlltRnpaVlJ2VTNSeWFXNW5KeWs3WEc1Y2JpOHFLbHh1SUNvZ1EyOXVkbVZ5ZEhNZ1lIWmhiSFZsWUNCMGJ5QmhJSE4wY21sdVp5NGdRVzRnWlcxd2RIa2djM1J5YVc1bklHbHpJSEpsZEhWeWJtVmtJR1p2Y2lCZ2JuVnNiR0JjYmlBcUlHRnVaQ0JnZFc1a1pXWnBibVZrWUNCMllXeDFaWE11SUZSb1pTQnphV2R1SUc5bUlHQXRNR0FnYVhNZ2NISmxjMlZ5ZG1Wa0xseHVJQ3BjYmlBcUlFQnpkR0YwYVdOY2JpQXFJRUJ0WlcxaVpYSlBaaUJmWEc0Z0tpQkFjMmx1WTJVZ05DNHdMakJjYmlBcUlFQmpZWFJsWjI5eWVTQk1ZVzVuWEc0Z0tpQkFjR0Z5WVcwZ2V5cDlJSFpoYkhWbElGUm9aU0IyWVd4MVpTQjBieUJqYjI1MlpYSjBMbHh1SUNvZ1FISmxkSFZ5Ym5NZ2UzTjBjbWx1WjMwZ1VtVjBkWEp1Y3lCMGFHVWdZMjl1ZG1WeWRHVmtJSE4wY21sdVp5NWNiaUFxSUVCbGVHRnRjR3hsWEc0Z0tseHVJQ29nWHk1MGIxTjBjbWx1WnlodWRXeHNLVHRjYmlBcUlDOHZJRDArSUNjblhHNGdLbHh1SUNvZ1h5NTBiMU4wY21sdVp5Z3RNQ2s3WEc0Z0tpQXZMeUE5UGlBbkxUQW5YRzRnS2x4dUlDb2dYeTUwYjFOMGNtbHVaeWhiTVN3Z01pd2dNMTBwTzF4dUlDb2dMeThnUFQ0Z0p6RXNNaXd6SjF4dUlDb3ZYRzVtZFc1amRHbHZiaUIwYjFOMGNtbHVaeWgyWVd4MVpTa2dlMXh1SUNCeVpYUjFjbTRnZG1Gc2RXVWdQVDBnYm5Wc2JDQS9JQ2NuSURvZ1ltRnpaVlJ2VTNSeWFXNW5LSFpoYkhWbEtUdGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCMGIxTjBjbWx1Wnp0Y2JpSXNJblpoY2lCcGMwRnljbUY1SUQwZ2NtVnhkV2x5WlNnbkxpOXBjMEZ5Y21GNUp5a3NYRzRnSUNBZ2FYTkxaWGtnUFNCeVpYRjFhWEpsS0NjdUwxOXBjMHRsZVNjcExGeHVJQ0FnSUhOMGNtbHVaMVJ2VUdGMGFDQTlJSEpsY1hWcGNtVW9KeTR2WDNOMGNtbHVaMVJ2VUdGMGFDY3BMRnh1SUNBZ0lIUnZVM1J5YVc1bklEMGdjbVZ4ZFdseVpTZ25MaTkwYjFOMGNtbHVaeWNwTzF4dVhHNHZLaXBjYmlBcUlFTmhjM1J6SUdCMllXeDFaV0FnZEc4Z1lTQndZWFJvSUdGeWNtRjVJR2xtSUdsMEozTWdibTkwSUc5dVpTNWNiaUFxWEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ29nUUhCaGNtRnRJSHNxZlNCMllXeDFaU0JVYUdVZ2RtRnNkV1VnZEc4Z2FXNXpjR1ZqZEM1Y2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQmJiMkpxWldOMFhTQlVhR1VnYjJKcVpXTjBJSFJ2SUhGMVpYSjVJR3RsZVhNZ2IyNHVYRzRnS2lCQWNtVjBkWEp1Y3lCN1FYSnlZWGw5SUZKbGRIVnlibk1nZEdobElHTmhjM1FnY0hKdmNHVnlkSGtnY0dGMGFDQmhjbkpoZVM1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnWTJGemRGQmhkR2dvZG1Gc2RXVXNJRzlpYW1WamRDa2dlMXh1SUNCcFppQW9hWE5CY25KaGVTaDJZV3gxWlNrcElIdGNiaUFnSUNCeVpYUjFjbTRnZG1Gc2RXVTdYRzRnSUgxY2JpQWdjbVYwZFhKdUlHbHpTMlY1S0haaGJIVmxMQ0J2WW1wbFkzUXBJRDhnVzNaaGJIVmxYU0E2SUhOMGNtbHVaMVJ2VUdGMGFDaDBiMU4wY21sdVp5aDJZV3gxWlNrcE8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdOaGMzUlFZWFJvTzF4dUlpd2lkbUZ5SUdselUzbHRZbTlzSUQwZ2NtVnhkV2x5WlNnbkxpOXBjMU41YldKdmJDY3BPMXh1WEc0dktpb2dWWE5sWkNCaGN5QnlaV1psY21WdVkyVnpJR1p2Y2lCMllYSnBiM1Z6SUdCT2RXMWlaWEpnSUdOdmJuTjBZVzUwY3k0Z0tpOWNiblpoY2lCSlRrWkpUa2xVV1NBOUlERWdMeUF3TzF4dVhHNHZLaXBjYmlBcUlFTnZiblpsY25SeklHQjJZV3gxWldBZ2RHOGdZU0J6ZEhKcGJtY2dhMlY1SUdsbUlHbDBKM01nYm05MElHRWdjM1J5YVc1bklHOXlJSE41YldKdmJDNWNiaUFxWEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ29nUUhCaGNtRnRJSHNxZlNCMllXeDFaU0JVYUdVZ2RtRnNkV1VnZEc4Z2FXNXpjR1ZqZEM1Y2JpQXFJRUJ5WlhSMWNtNXpJSHR6ZEhKcGJtZDhjM2x0WW05c2ZTQlNaWFIxY201eklIUm9aU0JyWlhrdVhHNGdLaTljYm1aMWJtTjBhVzl1SUhSdlMyVjVLSFpoYkhWbEtTQjdYRzRnSUdsbUlDaDBlWEJsYjJZZ2RtRnNkV1VnUFQwZ0ozTjBjbWx1WnljZ2ZId2dhWE5UZVcxaWIyd29kbUZzZFdVcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhaaGJIVmxPMXh1SUNCOVhHNGdJSFpoY2lCeVpYTjFiSFFnUFNBb2RtRnNkV1VnS3lBbkp5azdYRzRnSUhKbGRIVnliaUFvY21WemRXeDBJRDA5SUNjd0p5QW1KaUFvTVNBdklIWmhiSFZsS1NBOVBTQXRTVTVHU1U1SlZGa3BJRDhnSnkwd0p5QTZJSEpsYzNWc2REdGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCMGIwdGxlVHRjYmlJc0luWmhjaUJqWVhOMFVHRjBhQ0E5SUhKbGNYVnBjbVVvSnk0dlgyTmhjM1JRWVhSb0p5a3NYRzRnSUNBZ2RHOUxaWGtnUFNCeVpYRjFhWEpsS0NjdUwxOTBiMHRsZVNjcE8xeHVYRzR2S2lwY2JpQXFJRlJvWlNCaVlYTmxJR2x0Y0d4bGJXVnVkR0YwYVc5dUlHOW1JR0JmTG1kbGRHQWdkMmwwYUc5MWRDQnpkWEJ3YjNKMElHWnZjaUJrWldaaGRXeDBJSFpoYkhWbGN5NWNiaUFxWEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzlpYW1WamRDQlVhR1VnYjJKcVpXTjBJSFJ2SUhGMVpYSjVMbHh1SUNvZ1FIQmhjbUZ0SUh0QmNuSmhlWHh6ZEhKcGJtZDlJSEJoZEdnZ1ZHaGxJSEJoZEdnZ2IyWWdkR2hsSUhCeWIzQmxjblI1SUhSdklHZGxkQzVjYmlBcUlFQnlaWFIxY201eklIc3FmU0JTWlhSMWNtNXpJSFJvWlNCeVpYTnZiSFpsWkNCMllXeDFaUzVjYmlBcUwxeHVablZ1WTNScGIyNGdZbUZ6WlVkbGRDaHZZbXBsWTNRc0lIQmhkR2dwSUh0Y2JpQWdjR0YwYUNBOUlHTmhjM1JRWVhSb0tIQmhkR2dzSUc5aWFtVmpkQ2s3WEc1Y2JpQWdkbUZ5SUdsdVpHVjRJRDBnTUN4Y2JpQWdJQ0FnSUd4bGJtZDBhQ0E5SUhCaGRHZ3ViR1Z1WjNSb08xeHVYRzRnSUhkb2FXeGxJQ2h2WW1wbFkzUWdJVDBnYm5Wc2JDQW1KaUJwYm1SbGVDQThJR3hsYm1kMGFDa2dlMXh1SUNBZ0lHOWlhbVZqZENBOUlHOWlhbVZqZEZ0MGIwdGxlU2h3WVhSb1cybHVaR1Y0S3l0ZEtWMDdYRzRnSUgxY2JpQWdjbVYwZFhKdUlDaHBibVJsZUNBbUppQnBibVJsZUNBOVBTQnNaVzVuZEdncElEOGdiMkpxWldOMElEb2dkVzVrWldacGJtVmtPMXh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHSmhjMlZIWlhRN1hHNGlMQ0oyWVhJZ1ltRnpaVWRsZENBOUlISmxjWFZwY21Vb0p5NHZYMkpoYzJWSFpYUW5LVHRjYmx4dUx5b3FYRzRnS2lCSFpYUnpJSFJvWlNCMllXeDFaU0JoZENCZ2NHRjBhR0FnYjJZZ1lHOWlhbVZqZEdBdUlFbG1JSFJvWlNCeVpYTnZiSFpsWkNCMllXeDFaU0JwYzF4dUlDb2dZSFZ1WkdWbWFXNWxaR0FzSUhSb1pTQmdaR1ZtWVhWc2RGWmhiSFZsWUNCcGN5QnlaWFIxY201bFpDQnBiaUJwZEhNZ2NHeGhZMlV1WEc0Z0tseHVJQ29nUUhOMFlYUnBZMXh1SUNvZ1FHMWxiV0psY2s5bUlGOWNiaUFxSUVCemFXNWpaU0F6TGpjdU1GeHVJQ29nUUdOaGRHVm5iM0o1SUU5aWFtVmpkRnh1SUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUc5aWFtVmpkQ0JVYUdVZ2IySnFaV04wSUhSdklIRjFaWEo1TGx4dUlDb2dRSEJoY21GdElIdEJjbkpoZVh4emRISnBibWQ5SUhCaGRHZ2dWR2hsSUhCaGRHZ2diMllnZEdobElIQnliM0JsY25SNUlIUnZJR2RsZEM1Y2JpQXFJRUJ3WVhKaGJTQjdLbjBnVzJSbFptRjFiSFJXWVd4MVpWMGdWR2hsSUhaaGJIVmxJSEpsZEhWeWJtVmtJR1p2Y2lCZ2RXNWtaV1pwYm1Wa1lDQnlaWE52YkhabFpDQjJZV3gxWlhNdVhHNGdLaUJBY21WMGRYSnVjeUI3S24wZ1VtVjBkWEp1Y3lCMGFHVWdjbVZ6YjJ4MlpXUWdkbUZzZFdVdVhHNGdLaUJBWlhoaGJYQnNaVnh1SUNwY2JpQXFJSFpoY2lCdlltcGxZM1FnUFNCN0lDZGhKem9nVzNzZ0oySW5PaUI3SUNkakp6b2dNeUI5SUgxZElIMDdYRzRnS2x4dUlDb2dYeTVuWlhRb2IySnFaV04wTENBbllWc3dYUzVpTG1NbktUdGNiaUFxSUM4dklEMCtJRE5jYmlBcVhHNGdLaUJmTG1kbGRDaHZZbXBsWTNRc0lGc25ZU2NzSUNjd0p5d2dKMkluTENBbll5ZGRLVHRjYmlBcUlDOHZJRDArSUROY2JpQXFYRzRnS2lCZkxtZGxkQ2h2WW1wbFkzUXNJQ2RoTG1JdVl5Y3NJQ2RrWldaaGRXeDBKeWs3WEc0Z0tpQXZMeUE5UGlBblpHVm1ZWFZzZENkY2JpQXFMMXh1Wm5WdVkzUnBiMjRnWjJWMEtHOWlhbVZqZEN3Z2NHRjBhQ3dnWkdWbVlYVnNkRlpoYkhWbEtTQjdYRzRnSUhaaGNpQnlaWE4xYkhRZ1BTQnZZbXBsWTNRZ1BUMGdiblZzYkNBL0lIVnVaR1ZtYVc1bFpDQTZJR0poYzJWSFpYUW9iMkpxWldOMExDQndZWFJvS1R0Y2JpQWdjbVYwZFhKdUlISmxjM1ZzZENBOVBUMGdkVzVrWldacGJtVmtJRDhnWkdWbVlYVnNkRlpoYkhWbElEb2djbVZ6ZFd4ME8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdkbGREdGNiaUlzSWk4cUtseHVJQ29nVkdobElHSmhjMlVnYVcxd2JHVnRaVzUwWVhScGIyNGdiMllnWUY4dWFHRnpTVzVnSUhkcGRHaHZkWFFnYzNWd2NHOXlkQ0JtYjNJZ1pHVmxjQ0J3WVhSb2N5NWNiaUFxWEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRnR2WW1wbFkzUmRJRlJvWlNCdlltcGxZM1FnZEc4Z2NYVmxjbmt1WEc0Z0tpQkFjR0Z5WVcwZ2UwRnljbUY1ZkhOMGNtbHVaMzBnYTJWNUlGUm9aU0JyWlhrZ2RHOGdZMmhsWTJzdVhHNGdLaUJBY21WMGRYSnVjeUI3WW05dmJHVmhibjBnVW1WMGRYSnVjeUJnZEhKMVpXQWdhV1lnWUd0bGVXQWdaWGhwYzNSekxDQmxiSE5sSUdCbVlXeHpaV0F1WEc0Z0tpOWNibVoxYm1OMGFXOXVJR0poYzJWSVlYTkpiaWh2WW1wbFkzUXNJR3RsZVNrZ2UxeHVJQ0J5WlhSMWNtNGdiMkpxWldOMElDRTlJRzUxYkd3Z0ppWWdhMlY1SUdsdUlFOWlhbVZqZENodlltcGxZM1FwTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR0poYzJWSVlYTkpianRjYmlJc0luWmhjaUJqWVhOMFVHRjBhQ0E5SUhKbGNYVnBjbVVvSnk0dlgyTmhjM1JRWVhSb0p5a3NYRzRnSUNBZ2FYTkJjbWQxYldWdWRITWdQU0J5WlhGMWFYSmxLQ2N1TDJselFYSm5kVzFsYm5Sekp5a3NYRzRnSUNBZ2FYTkJjbkpoZVNBOUlISmxjWFZwY21Vb0p5NHZhWE5CY25KaGVTY3BMRnh1SUNBZ0lHbHpTVzVrWlhnZ1BTQnlaWEYxYVhKbEtDY3VMMTlwYzBsdVpHVjRKeWtzWEc0Z0lDQWdhWE5NWlc1bmRHZ2dQU0J5WlhGMWFYSmxLQ2N1TDJselRHVnVaM1JvSnlrc1hHNGdJQ0FnZEc5TFpYa2dQU0J5WlhGMWFYSmxLQ2N1TDE5MGIwdGxlU2NwTzF4dVhHNHZLaXBjYmlBcUlFTm9aV05yY3lCcFppQmdjR0YwYUdBZ1pYaHBjM1J6SUc5dUlHQnZZbXBsWTNSZ0xseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdiMkpxWldOMElGUm9aU0J2WW1wbFkzUWdkRzhnY1hWbGNua3VYRzRnS2lCQWNHRnlZVzBnZTBGeWNtRjVmSE4wY21sdVozMGdjR0YwYUNCVWFHVWdjR0YwYUNCMGJ5QmphR1ZqYXk1Y2JpQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJR2hoYzBaMWJtTWdWR2hsSUdaMWJtTjBhVzl1SUhSdklHTm9aV05ySUhCeWIzQmxjblJwWlhNdVhHNGdLaUJBY21WMGRYSnVjeUI3WW05dmJHVmhibjBnVW1WMGRYSnVjeUJnZEhKMVpXQWdhV1lnWUhCaGRHaGdJR1Y0YVhOMGN5d2daV3h6WlNCZ1ptRnNjMlZnTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJvWVhOUVlYUm9LRzlpYW1WamRDd2djR0YwYUN3Z2FHRnpSblZ1WXlrZ2UxeHVJQ0J3WVhSb0lEMGdZMkZ6ZEZCaGRHZ29jR0YwYUN3Z2IySnFaV04wS1R0Y2JseHVJQ0IyWVhJZ2FXNWtaWGdnUFNBdE1TeGNiaUFnSUNBZ0lHeGxibWQwYUNBOUlIQmhkR2d1YkdWdVozUm9MRnh1SUNBZ0lDQWdjbVZ6ZFd4MElEMGdabUZzYzJVN1hHNWNiaUFnZDJocGJHVWdLQ3NyYVc1a1pYZ2dQQ0JzWlc1bmRHZ3BJSHRjYmlBZ0lDQjJZWElnYTJWNUlEMGdkRzlMWlhrb2NHRjBhRnRwYm1SbGVGMHBPMXh1SUNBZ0lHbG1JQ2doS0hKbGMzVnNkQ0E5SUc5aWFtVmpkQ0FoUFNCdWRXeHNJQ1ltSUdoaGMwWjFibU1vYjJKcVpXTjBMQ0JyWlhrcEtTa2dlMXh1SUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnZlZ4dUlDQWdJRzlpYW1WamRDQTlJRzlpYW1WamRGdHJaWGxkTzF4dUlDQjlYRzRnSUdsbUlDaHlaWE4xYkhRZ2ZId2dLeXRwYm1SbGVDQWhQU0JzWlc1bmRHZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4dUlDQjlYRzRnSUd4bGJtZDBhQ0E5SUc5aWFtVmpkQ0E5UFNCdWRXeHNJRDhnTUNBNklHOWlhbVZqZEM1c1pXNW5kR2c3WEc0Z0lISmxkSFZ5YmlBaElXeGxibWQwYUNBbUppQnBjMHhsYm1kMGFDaHNaVzVuZEdncElDWW1JR2x6U1c1a1pYZ29hMlY1TENCc1pXNW5kR2dwSUNZbVhHNGdJQ0FnS0dselFYSnlZWGtvYjJKcVpXTjBLU0I4ZkNCcGMwRnlaM1Z0Wlc1MGN5aHZZbXBsWTNRcEtUdGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCb1lYTlFZWFJvTzF4dUlpd2lkbUZ5SUdKaGMyVklZWE5KYmlBOUlISmxjWFZwY21Vb0p5NHZYMkpoYzJWSVlYTkpiaWNwTEZ4dUlDQWdJR2hoYzFCaGRHZ2dQU0J5WlhGMWFYSmxLQ2N1TDE5b1lYTlFZWFJvSnlrN1hHNWNiaThxS2x4dUlDb2dRMmhsWTJ0eklHbG1JR0J3WVhSb1lDQnBjeUJoSUdScGNtVmpkQ0J2Y2lCcGJtaGxjbWwwWldRZ2NISnZjR1Z5ZEhrZ2IyWWdZRzlpYW1WamRHQXVYRzRnS2x4dUlDb2dRSE4wWVhScFkxeHVJQ29nUUcxbGJXSmxjazltSUY5Y2JpQXFJRUJ6YVc1alpTQTBMakF1TUZ4dUlDb2dRR05oZEdWbmIzSjVJRTlpYW1WamRGeHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzlpYW1WamRDQlVhR1VnYjJKcVpXTjBJSFJ2SUhGMVpYSjVMbHh1SUNvZ1FIQmhjbUZ0SUh0QmNuSmhlWHh6ZEhKcGJtZDlJSEJoZEdnZ1ZHaGxJSEJoZEdnZ2RHOGdZMmhsWTJzdVhHNGdLaUJBY21WMGRYSnVjeUI3WW05dmJHVmhibjBnVW1WMGRYSnVjeUJnZEhKMVpXQWdhV1lnWUhCaGRHaGdJR1Y0YVhOMGN5d2daV3h6WlNCZ1ptRnNjMlZnTGx4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxWEc0Z0tpQjJZWElnYjJKcVpXTjBJRDBnWHk1amNtVmhkR1VvZXlBbllTYzZJRjh1WTNKbFlYUmxLSHNnSjJJbk9pQXlJSDBwSUgwcE8xeHVJQ3BjYmlBcUlGOHVhR0Z6U1c0b2IySnFaV04wTENBbllTY3BPMXh1SUNvZ0x5OGdQVDRnZEhKMVpWeHVJQ3BjYmlBcUlGOHVhR0Z6U1c0b2IySnFaV04wTENBbllTNWlKeWs3WEc0Z0tpQXZMeUE5UGlCMGNuVmxYRzRnS2x4dUlDb2dYeTVvWVhOSmJpaHZZbXBsWTNRc0lGc25ZU2NzSUNkaUoxMHBPMXh1SUNvZ0x5OGdQVDRnZEhKMVpWeHVJQ3BjYmlBcUlGOHVhR0Z6U1c0b2IySnFaV04wTENBbllpY3BPMXh1SUNvZ0x5OGdQVDRnWm1Gc2MyVmNiaUFxTDF4dVpuVnVZM1JwYjI0Z2FHRnpTVzRvYjJKcVpXTjBMQ0J3WVhSb0tTQjdYRzRnSUhKbGRIVnliaUJ2WW1wbFkzUWdJVDBnYm5Wc2JDQW1KaUJvWVhOUVlYUm9LRzlpYW1WamRDd2djR0YwYUN3Z1ltRnpaVWhoYzBsdUtUdGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCb1lYTkpianRjYmlJc0luWmhjaUJpWVhObFNYTkZjWFZoYkNBOUlISmxjWFZwY21Vb0p5NHZYMkpoYzJWSmMwVnhkV0ZzSnlrc1hHNGdJQ0FnWjJWMElEMGdjbVZ4ZFdseVpTZ25MaTluWlhRbktTeGNiaUFnSUNCb1lYTkpiaUE5SUhKbGNYVnBjbVVvSnk0dmFHRnpTVzRuS1N4Y2JpQWdJQ0JwYzB0bGVTQTlJSEpsY1hWcGNtVW9KeTR2WDJselMyVjVKeWtzWEc0Z0lDQWdhWE5UZEhKcFkzUkRiMjF3WVhKaFlteGxJRDBnY21WeGRXbHlaU2duTGk5ZmFYTlRkSEpwWTNSRGIyMXdZWEpoWW14bEp5a3NYRzRnSUNBZ2JXRjBZMmhsYzFOMGNtbGpkRU52YlhCaGNtRmliR1VnUFNCeVpYRjFhWEpsS0NjdUwxOXRZWFJqYUdWelUzUnlhV04wUTI5dGNHRnlZV0pzWlNjcExGeHVJQ0FnSUhSdlMyVjVJRDBnY21WeGRXbHlaU2duTGk5ZmRHOUxaWGtuS1R0Y2JseHVMeW9xSUZWelpXUWdkRzhnWTI5dGNHOXpaU0JpYVhSdFlYTnJjeUJtYjNJZ2RtRnNkV1VnWTI5dGNHRnlhWE52Ym5NdUlDb3ZYRzUyWVhJZ1EwOU5VRUZTUlY5UVFWSlVTVUZNWDBaTVFVY2dQU0F4TEZ4dUlDQWdJRU5QVFZCQlVrVmZWVTVQVWtSRlVrVkVYMFpNUVVjZ1BTQXlPMXh1WEc0dktpcGNiaUFxSUZSb1pTQmlZWE5sSUdsdGNHeGxiV1Z1ZEdGMGFXOXVJRzltSUdCZkxtMWhkR05vWlhOUWNtOXdaWEowZVdBZ2QyaHBZMmdnWkc5bGMyNG5kQ0JqYkc5dVpTQmdjM0pqVm1Gc2RXVmdMbHh1SUNwY2JpQXFJRUJ3Y21sMllYUmxYRzRnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnY0dGMGFDQlVhR1VnY0dGMGFDQnZaaUIwYUdVZ2NISnZjR1Z5ZEhrZ2RHOGdaMlYwTGx4dUlDb2dRSEJoY21GdElIc3FmU0J6Y21OV1lXeDFaU0JVYUdVZ2RtRnNkV1VnZEc4Z2JXRjBZMmd1WEc0Z0tpQkFjbVYwZFhKdWN5QjdSblZ1WTNScGIyNTlJRkpsZEhWeWJuTWdkR2hsSUc1bGR5QnpjR1ZqSUdaMWJtTjBhVzl1TGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJpWVhObFRXRjBZMmhsYzFCeWIzQmxjblI1S0hCaGRHZ3NJSE55WTFaaGJIVmxLU0I3WEc0Z0lHbG1JQ2hwYzB0bGVTaHdZWFJvS1NBbUppQnBjMU4wY21samRFTnZiWEJoY21GaWJHVW9jM0pqVm1Gc2RXVXBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHMWhkR05vWlhOVGRISnBZM1JEYjIxd1lYSmhZbXhsS0hSdlMyVjVLSEJoZEdncExDQnpjbU5XWVd4MVpTazdYRzRnSUgxY2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUtHOWlhbVZqZENrZ2UxeHVJQ0FnSUhaaGNpQnZZbXBXWVd4MVpTQTlJR2RsZENodlltcGxZM1FzSUhCaGRHZ3BPMXh1SUNBZ0lISmxkSFZ5YmlBb2IySnFWbUZzZFdVZ1BUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlCdlltcFdZV3gxWlNBOVBUMGdjM0pqVm1Gc2RXVXBYRzRnSUNBZ0lDQS9JR2hoYzBsdUtHOWlhbVZqZEN3Z2NHRjBhQ2xjYmlBZ0lDQWdJRG9nWW1GelpVbHpSWEYxWVd3b2MzSmpWbUZzZFdVc0lHOWlhbFpoYkhWbExDQkRUMDFRUVZKRlgxQkJVbFJKUVV4ZlJreEJSeUI4SUVOUFRWQkJVa1ZmVlU1UFVrUkZVa1ZFWDBaTVFVY3BPMXh1SUNCOU8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdKaGMyVk5ZWFJqYUdWelVISnZjR1Z5ZEhrN1hHNGlMQ0l2S2lwY2JpQXFJRlJvWlNCaVlYTmxJR2x0Y0d4bGJXVnVkR0YwYVc5dUlHOW1JR0JmTG5CeWIzQmxjblI1WUNCM2FYUm9iM1YwSUhOMWNIQnZjblFnWm05eUlHUmxaWEFnY0dGMGFITXVYRzRnS2x4dUlDb2dRSEJ5YVhaaGRHVmNiaUFxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JyWlhrZ1ZHaGxJR3RsZVNCdlppQjBhR1VnY0hKdmNHVnlkSGtnZEc4Z1oyVjBMbHh1SUNvZ1FISmxkSFZ5Ym5NZ2UwWjFibU4wYVc5dWZTQlNaWFIxY201eklIUm9aU0J1WlhjZ1lXTmpaWE56YjNJZ1puVnVZM1JwYjI0dVhHNGdLaTljYm1aMWJtTjBhVzl1SUdKaGMyVlFjbTl3WlhKMGVTaHJaWGtwSUh0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUtHOWlhbVZqZENrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ2WW1wbFkzUWdQVDBnYm5Wc2JDQS9JSFZ1WkdWbWFXNWxaQ0E2SUc5aWFtVmpkRnRyWlhsZE8xeHVJQ0I5TzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR0poYzJWUWNtOXdaWEowZVR0Y2JpSXNJblpoY2lCaVlYTmxSMlYwSUQwZ2NtVnhkV2x5WlNnbkxpOWZZbUZ6WlVkbGRDY3BPMXh1WEc0dktpcGNiaUFxSUVFZ2MzQmxZMmxoYkdsNlpXUWdkbVZ5YzJsdmJpQnZaaUJnWW1GelpWQnliM0JsY25SNVlDQjNhR2xqYUNCemRYQndiM0owY3lCa1pXVndJSEJoZEdoekxseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaUJBY0dGeVlXMGdlMEZ5Y21GNWZITjBjbWx1WjMwZ2NHRjBhQ0JVYUdVZ2NHRjBhQ0J2WmlCMGFHVWdjSEp2Y0dWeWRIa2dkRzhnWjJWMExseHVJQ29nUUhKbGRIVnlibk1nZTBaMWJtTjBhVzl1ZlNCU1pYUjFjbTV6SUhSb1pTQnVaWGNnWVdOalpYTnpiM0lnWm5WdVkzUnBiMjR1WEc0Z0tpOWNibVoxYm1OMGFXOXVJR0poYzJWUWNtOXdaWEowZVVSbFpYQW9jR0YwYUNrZ2UxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNG9iMkpxWldOMEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdKaGMyVkhaWFFvYjJKcVpXTjBMQ0J3WVhSb0tUdGNiaUFnZlR0Y2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JpWVhObFVISnZjR1Z5ZEhsRVpXVndPMXh1SWl3aWRtRnlJR0poYzJWUWNtOXdaWEowZVNBOUlISmxjWFZwY21Vb0p5NHZYMkpoYzJWUWNtOXdaWEowZVNjcExGeHVJQ0FnSUdKaGMyVlFjbTl3WlhKMGVVUmxaWEFnUFNCeVpYRjFhWEpsS0NjdUwxOWlZWE5sVUhKdmNHVnlkSGxFWldWd0p5a3NYRzRnSUNBZ2FYTkxaWGtnUFNCeVpYRjFhWEpsS0NjdUwxOXBjMHRsZVNjcExGeHVJQ0FnSUhSdlMyVjVJRDBnY21WeGRXbHlaU2duTGk5ZmRHOUxaWGtuS1R0Y2JseHVMeW9xWEc0Z0tpQkRjbVZoZEdWeklHRWdablZ1WTNScGIyNGdkR2hoZENCeVpYUjFjbTV6SUhSb1pTQjJZV3gxWlNCaGRDQmdjR0YwYUdBZ2IyWWdZU0JuYVhabGJpQnZZbXBsWTNRdVhHNGdLbHh1SUNvZ1FITjBZWFJwWTF4dUlDb2dRRzFsYldKbGNrOW1JRjljYmlBcUlFQnphVzVqWlNBeUxqUXVNRnh1SUNvZ1FHTmhkR1ZuYjNKNUlGVjBhV3hjYmlBcUlFQndZWEpoYlNCN1FYSnlZWGw4YzNSeWFXNW5mU0J3WVhSb0lGUm9aU0J3WVhSb0lHOW1JSFJvWlNCd2NtOXdaWEowZVNCMGJ5Qm5aWFF1WEc0Z0tpQkFjbVYwZFhKdWN5QjdSblZ1WTNScGIyNTlJRkpsZEhWeWJuTWdkR2hsSUc1bGR5QmhZMk5sYzNOdmNpQm1kVzVqZEdsdmJpNWNiaUFxSUVCbGVHRnRjR3hsWEc0Z0tseHVJQ29nZG1GeUlHOWlhbVZqZEhNZ1BTQmJYRzRnS2lBZ0lIc2dKMkVuT2lCN0lDZGlKem9nTWlCOUlIMHNYRzRnS2lBZ0lIc2dKMkVuT2lCN0lDZGlKem9nTVNCOUlIMWNiaUFxSUYwN1hHNGdLbHh1SUNvZ1h5NXRZWEFvYjJKcVpXTjBjeXdnWHk1d2NtOXdaWEowZVNnbllTNWlKeWtwTzF4dUlDb2dMeThnUFQ0Z1d6SXNJREZkWEc0Z0tseHVJQ29nWHk1dFlYQW9YeTV6YjNKMFFua29iMkpxWldOMGN5d2dYeTV3Y205d1pYSjBlU2hiSjJFbkxDQW5ZaWRkS1Nrc0lDZGhMbUluS1R0Y2JpQXFJQzh2SUQwK0lGc3hMQ0F5WFZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJ3Y205d1pYSjBlU2h3WVhSb0tTQjdYRzRnSUhKbGRIVnliaUJwYzB0bGVTaHdZWFJvS1NBL0lHSmhjMlZRY205d1pYSjBlU2gwYjB0bGVTaHdZWFJvS1NrZ09pQmlZWE5sVUhKdmNHVnlkSGxFWldWd0tIQmhkR2dwTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSEJ5YjNCbGNuUjVPMXh1SWl3aWRtRnlJR0poYzJWTllYUmphR1Z6SUQwZ2NtVnhkV2x5WlNnbkxpOWZZbUZ6WlUxaGRHTm9aWE1uS1N4Y2JpQWdJQ0JpWVhObFRXRjBZMmhsYzFCeWIzQmxjblI1SUQwZ2NtVnhkV2x5WlNnbkxpOWZZbUZ6WlUxaGRHTm9aWE5RY205d1pYSjBlU2NwTEZ4dUlDQWdJR2xrWlc1MGFYUjVJRDBnY21WeGRXbHlaU2duTGk5cFpHVnVkR2wwZVNjcExGeHVJQ0FnSUdselFYSnlZWGtnUFNCeVpYRjFhWEpsS0NjdUwybHpRWEp5WVhrbktTeGNiaUFnSUNCd2NtOXdaWEowZVNBOUlISmxjWFZwY21Vb0p5NHZjSEp2Y0dWeWRIa25LVHRjYmx4dUx5b3FYRzRnS2lCVWFHVWdZbUZ6WlNCcGJYQnNaVzFsYm5SaGRHbHZiaUJ2WmlCZ1h5NXBkR1Z5WVhSbFpXQXVYRzRnS2x4dUlDb2dRSEJ5YVhaaGRHVmNiaUFxSUVCd1lYSmhiU0I3S24wZ1czWmhiSFZsUFY4dWFXUmxiblJwZEhsZElGUm9aU0IyWVd4MVpTQjBieUJqYjI1MlpYSjBJSFJ2SUdGdUlHbDBaWEpoZEdWbExseHVJQ29nUUhKbGRIVnlibk1nZTBaMWJtTjBhVzl1ZlNCU1pYUjFjbTV6SUhSb1pTQnBkR1Z5WVhSbFpTNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1ltRnpaVWwwWlhKaGRHVmxLSFpoYkhWbEtTQjdYRzRnSUM4dklFUnZiaWQwSUhOMGIzSmxJSFJvWlNCZ2RIbHdaVzltWUNCeVpYTjFiSFFnYVc0Z1lTQjJZWEpwWVdKc1pTQjBieUJoZG05cFpDQmhJRXBKVkNCaWRXY2dhVzRnVTJGbVlYSnBJRGt1WEc0Z0lDOHZJRk5sWlNCb2RIUndjem92TDJKMVozTXVkMlZpYTJsMExtOXlaeTl6YUc5M1gySjFaeTVqWjJrL2FXUTlNVFUyTURNMElHWnZjaUJ0YjNKbElHUmxkR0ZwYkhNdVhHNGdJR2xtSUNoMGVYQmxiMllnZG1Gc2RXVWdQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUhKbGRIVnliaUIyWVd4MVpUdGNiaUFnZlZ4dUlDQnBaaUFvZG1Gc2RXVWdQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCcFpHVnVkR2wwZVR0Y2JpQWdmVnh1SUNCcFppQW9kSGx3Wlc5bUlIWmhiSFZsSUQwOUlDZHZZbXBsWTNRbktTQjdYRzRnSUNBZ2NtVjBkWEp1SUdselFYSnlZWGtvZG1Gc2RXVXBYRzRnSUNBZ0lDQS9JR0poYzJWTllYUmphR1Z6VUhKdmNHVnlkSGtvZG1Gc2RXVmJNRjBzSUhaaGJIVmxXekZkS1Z4dUlDQWdJQ0FnT2lCaVlYTmxUV0YwWTJobGN5aDJZV3gxWlNrN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUhCeWIzQmxjblI1S0haaGJIVmxLVHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmlZWE5sU1hSbGNtRjBaV1U3WEc0aUxDSjJZWElnWW1GelpVRnpjMmxuYmxaaGJIVmxJRDBnY21WeGRXbHlaU2duTGk5ZlltRnpaVUZ6YzJsbmJsWmhiSFZsSnlrc1hHNGdJQ0FnWW1GelpVWnZjazkzYmlBOUlISmxjWFZwY21Vb0p5NHZYMkpoYzJWR2IzSlBkMjRuS1N4Y2JpQWdJQ0JpWVhObFNYUmxjbUYwWldVZ1BTQnlaWEYxYVhKbEtDY3VMMTlpWVhObFNYUmxjbUYwWldVbktUdGNibHh1THlvcVhHNGdLaUJEY21WaGRHVnpJR0Z1SUc5aWFtVmpkQ0IzYVhSb0lIUm9aU0J6WVcxbElHdGxlWE1nWVhNZ1lHOWlhbVZqZEdBZ1lXNWtJSFpoYkhWbGN5Qm5aVzVsY21GMFpXUmNiaUFxSUdKNUlISjFibTVwYm1jZ1pXRmphQ0J2ZDI0Z1pXNTFiV1Z5WVdKc1pTQnpkSEpwYm1jZ2EyVjVaV1FnY0hKdmNHVnlkSGtnYjJZZ1lHOWlhbVZqZEdBZ2RHaHlkVnh1SUNvZ1lHbDBaWEpoZEdWbFlDNGdWR2hsSUdsMFpYSmhkR1ZsSUdseklHbHVkbTlyWldRZ2QybDBhQ0IwYUhKbFpTQmhjbWQxYldWdWRITTZYRzRnS2lBb2RtRnNkV1VzSUd0bGVTd2diMkpxWldOMEtTNWNiaUFxWEc0Z0tpQkFjM1JoZEdsalhHNGdLaUJBYldWdFltVnlUMllnWDF4dUlDb2dRSE5wYm1ObElESXVOQzR3WEc0Z0tpQkFZMkYwWldkdmNua2dUMkpxWldOMFhHNGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdiMkpxWldOMElGUm9aU0J2WW1wbFkzUWdkRzhnYVhSbGNtRjBaU0J2ZG1WeUxseHVJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnVzJsMFpYSmhkR1ZsUFY4dWFXUmxiblJwZEhsZElGUm9aU0JtZFc1amRHbHZiaUJwYm5admEyVmtJSEJsY2lCcGRHVnlZWFJwYjI0dVhHNGdLaUJBY21WMGRYSnVjeUI3VDJKcVpXTjBmU0JTWlhSMWNtNXpJSFJvWlNCdVpYY2diV0Z3Y0dWa0lHOWlhbVZqZEM1Y2JpQXFJRUJ6WldVZ1h5NXRZWEJMWlhselhHNGdLaUJBWlhoaGJYQnNaVnh1SUNwY2JpQXFJSFpoY2lCMWMyVnljeUE5SUh0Y2JpQXFJQ0FnSjJaeVpXUW5PaUFnSUNCN0lDZDFjMlZ5SnpvZ0oyWnlaV1FuTENBZ0lDQW5ZV2RsSnpvZ05EQWdmU3hjYmlBcUlDQWdKM0JsWW1Kc1pYTW5PaUI3SUNkMWMyVnlKem9nSjNCbFltSnNaWE1uTENBbllXZGxKem9nTVNCOVhHNGdLaUI5TzF4dUlDcGNiaUFxSUY4dWJXRndWbUZzZFdWektIVnpaWEp6TENCbWRXNWpkR2x2YmlodktTQjdJSEpsZEhWeWJpQnZMbUZuWlRzZ2ZTazdYRzRnS2lBdkx5QTlQaUI3SUNkbWNtVmtKem9nTkRBc0lDZHdaV0ppYkdWekp6b2dNU0I5SUNocGRHVnlZWFJwYjI0Z2IzSmtaWElnYVhNZ2JtOTBJR2QxWVhKaGJuUmxaV1FwWEc0Z0tseHVJQ29nTHk4Z1ZHaGxJR0JmTG5CeWIzQmxjblI1WUNCcGRHVnlZWFJsWlNCemFHOXlkR2hoYm1RdVhHNGdLaUJmTG0xaGNGWmhiSFZsY3loMWMyVnljeXdnSjJGblpTY3BPMXh1SUNvZ0x5OGdQVDRnZXlBblpuSmxaQ2M2SURRd0xDQW5jR1ZpWW14bGN5YzZJREVnZlNBb2FYUmxjbUYwYVc5dUlHOXlaR1Z5SUdseklHNXZkQ0JuZFdGeVlXNTBaV1ZrS1Z4dUlDb3ZYRzVtZFc1amRHbHZiaUJ0WVhCV1lXeDFaWE1vYjJKcVpXTjBMQ0JwZEdWeVlYUmxaU2tnZTF4dUlDQjJZWElnY21WemRXeDBJRDBnZTMwN1hHNGdJR2wwWlhKaGRHVmxJRDBnWW1GelpVbDBaWEpoZEdWbEtHbDBaWEpoZEdWbExDQXpLVHRjYmx4dUlDQmlZWE5sUm05eVQzZHVLRzlpYW1WamRDd2dablZ1WTNScGIyNG9kbUZzZFdVc0lHdGxlU3dnYjJKcVpXTjBLU0I3WEc0Z0lDQWdZbUZ6WlVGemMybG5ibFpoYkhWbEtISmxjM1ZzZEN3Z2EyVjVMQ0JwZEdWeVlYUmxaU2gyWVd4MVpTd2dhMlY1TENCdlltcGxZM1FwS1R0Y2JpQWdmU2s3WEc0Z0lISmxkSFZ5YmlCeVpYTjFiSFE3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdiV0Z3Vm1Gc2RXVnpPMXh1SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0FvS1NBOVBpQjdYRzVjZEdOdmJuTjBJSEpsZENBOUlIdDlPMXh1WEc1Y2RISmxkQzV3Y205dGFYTmxJRDBnYm1WM0lGQnliMjFwYzJVb0tISmxjMjlzZG1Vc0lISmxhbVZqZENrZ1BUNGdlMXh1WEhSY2RISmxkQzV5WlhOdmJIWmxJRDBnY21WemIyeDJaVHRjYmx4MFhIUnlaWFF1Y21WcVpXTjBJRDBnY21WcVpXTjBPMXh1WEhSOUtUdGNibHh1WEhSeVpYUjFjbTRnY21WME8xeHVmVHRjYmlJc0lsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVkyOXVjM1FnY0VSbFptVnlJRDBnY21WeGRXbHlaU2hjSW5BdFpHVm1aWEpjSWlrN1hHNW1kVzVqZEdsdmJpQnRZWEJCWjJWRGJHVmhibVZ5S0cxaGNDd2djSEp2Y0dWeWRIa2dQU0FuYldGNFFXZGxKeWtnZTF4dUlDQWdJR3hsZENCd2NtOWpaWE56YVc1blMyVjVPMXh1SUNBZ0lHeGxkQ0J3Y205alpYTnphVzVuVkdsdFpYSTdYRzRnSUNBZ2JHVjBJSEJ5YjJObGMzTnBibWRFWldabGNuSmxaRHRjYmlBZ0lDQmpiMjV6ZENCamJHVmhiblZ3SUQwZ1lYTjVibU1nS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JwWmlBb2NISnZZMlZ6YzJsdVowdGxlU0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkpaaUIzWlNCaGNtVWdZV3h5WldGa2VTQndjbTlqWlhOemFXNW5JR0Z1SUdsMFpXMHNJSGRsSUdOaGJpQnpZV1psYkhrZ1pYaHBkRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUhObGRIVndWR2x0WlhJZ1BTQmhjM2x1WXlBb2FYUmxiU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY0hKdlkyVnpjMmx1WjBSbFptVnljbVZrSUQwZ2NFUmxabVZ5S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmtaV3hoZVNBOUlHbDBaVzFiTVYxYmNISnZjR1Z5ZEhsZElDMGdSR0YwWlM1dWIzY29LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hrWld4aGVTQThQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdVbVZ0YjNabElIUm9aU0JwZEdWdElHbHRiV1ZrYVdGMFpXeDVJR2xtSUhSb1pTQmtaV3hoZVNCcGN5QmxjWFZoYkNCMGJ5QnZjaUJpWld4dmR5QXdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV0Z3TG1SbGJHVjBaU2hwZEdWdFd6QmRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205alpYTnphVzVuUkdWbVpYSnlaV1F1Y21WemIyeDJaU2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklFdGxaWEFnZEhKaFkyc2diMllnZEdobElHTjFjbkpsYm5RZ2NISnZZMlZ6YzJWa0lHdGxlVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NISnZZMlZ6YzJsdVowdGxlU0E5SUdsMFpXMWJNRjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQndjbTlqWlhOemFXNW5WR2x0WlhJZ1BTQnpaWFJVYVcxbGIzVjBLQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJTWlcxdmRtVWdkR2hsSUdsMFpXMGdkMmhsYmlCMGFHVWdkR2x0Wlc5MWRDQm1hWEpsYzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxaGNDNWtaV3hsZEdVb2FYUmxiVnN3WFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEJ5YjJObGMzTnBibWRFWldabGNuSmxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndjbTlqWlhOemFXNW5SR1ZtWlhKeVpXUXVjbVZ6YjJ4MlpTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNJR1JsYkdGNUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklIUnpiR2x1ZERwa2FYTmhZbXhsTFc1bGVIUXRiR2x1WlRwemRISnBZM1F0ZEhsd1pTMXdjbVZrYVdOaGRHVnpYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlIQnliMk5sYzNOcGJtZFVhVzFsY2k1MWJuSmxaaUE5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUVSdmJpZDBJR2h2YkdRZ2RYQWdkR2hsSUhCeWIyTmxjM01nWm5KdmJTQmxlR2wwYVc1blhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NISnZZMlZ6YzJsdVoxUnBiV1Z5TG5WdWNtVm1LQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY0hKdlkyVnpjMmx1WjBSbFptVnljbVZrTG5CeWIyMXBjMlU3WEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0dOdmJuTjBJR1Z1ZEhKNUlHOW1JRzFoY0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRjNZV2wwSUhObGRIVndWR2x0WlhJb1pXNTBjbmtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdOaGRHTm9JQ2hmWVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1JHOGdibTkwYUdsdVp5QnBaaUJoYmlCbGNuSnZjaUJ2WTJOMWNuTXNJSFJvYVhNZ2JXVmhibk1nZEdobElIUnBiV1Z5SUhkaGN5QmpiR1ZoYm1Wa0lIVndJR0Z1WkNCM1pTQnphRzkxYkdRZ2MzUnZjQ0J3Y205alpYTnphVzVuWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NISnZZMlZ6YzJsdVowdGxlU0E5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0I5TzF4dUlDQWdJR052Ym5OMElISmxjMlYwSUQwZ0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNCd2NtOWpaWE56YVc1blMyVjVJRDBnZFc1a1pXWnBibVZrTzF4dUlDQWdJQ0FnSUNCcFppQW9jSEp2WTJWemMybHVaMVJwYldWeUlDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05zWldGeVZHbHRaVzkxZENod2NtOWpaWE56YVc1blZHbHRaWElwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjSEp2WTJWemMybHVaMVJwYldWeUlEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaHdjbTlqWlhOemFXNW5SR1ZtWlhKeVpXUWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2V5QXZMeUIwYzJ4cGJuUTZaR2x6WVdKc1pTMXNhVzVsT21WaGNteDVMV1Y0YVhSY2JpQWdJQ0FnSUNBZ0lDQWdJSEJ5YjJObGMzTnBibWRFWldabGNuSmxaQzV5WldwbFkzUW9kVzVrWldacGJtVmtLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnliMk5sYzNOcGJtZEVaV1psY25KbFpDQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDA3WEc0Z0lDQWdZMjl1YzNRZ2IzSnBaMmx1WVd4VFpYUWdQU0J0WVhBdWMyVjBMbUpwYm1Rb2JXRndLVHRjYmlBZ0lDQnRZWEF1YzJWMElEMGdLR3RsZVN3Z2RtRnNkV1VwSUQwK0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0cxaGNDNW9ZWE1vYTJWNUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdTV1lnZEdobElHdGxlU0JoYkhKbFlXUjVJR1Y0YVhOMExDQnlaVzF2ZG1VZ2FYUWdjMjhnZDJVZ1kyRnVJR0ZrWkNCcGRDQmlZV05ySUdGMElIUm9aU0JsYm1RZ2IyWWdkR2hsSUcxaGNDNWNiaUFnSUNBZ0lDQWdJQ0FnSUcxaGNDNWtaV3hsZEdVb2EyVjVLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBdkx5QkRZV3hzSUhSb1pTQnZjbWxuYVc1aGJDQmdiV0Z3TG5ObGRHQmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NtVnpkV3gwSUQwZ2IzSnBaMmx1WVd4VFpYUW9hMlY1TENCMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUM4dklFbG1JSGRsSUdGeVpTQmhiSEpsWVdSNUlIQnliMk5sYzNOcGJtY2dZU0JyWlhrZ1lXNWtJSFJvWlNCclpYa2dZV1JrWldRZ2FYTWdkR2hsSUdOMWNuSmxiblFnY0hKdlkyVnpjMlZrSUd0bGVTd2djM1J2Y0NCd2NtOWpaWE56YVc1bklHbDBYRzRnSUNBZ0lDQWdJR2xtSUNod2NtOWpaWE56YVc1blMyVjVJQ1ltSUhCeWIyTmxjM05wYm1kTFpYa2dQVDA5SUd0bGVTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpaWFFvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQXZMeUJCYkhkaGVYTWdjblZ1SUhSb1pTQmpiR1ZoYm5Wd0lHMWxkR2h2WkNCcGJpQmpZWE5sSUdsMElIZGhjMjRuZENCemRHRnlkR1ZrSUhsbGRGeHVJQ0FnSUNBZ0lDQmpiR1ZoYm5Wd0tDazdJQzh2SUhSemJHbHVkRHBrYVhOaFlteGxMV3hwYm1VNmJtOHRabXh2WVhScGJtY3RjSEp2YldselpYTmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JpQWdJQ0I5TzF4dUlDQWdJR05zWldGdWRYQW9LVHNnTHk4Z2RITnNhVzUwT21ScGMyRmliR1V0YkdsdVpUcHVieTFtYkc5aGRHbHVaeTF3Y205dGFYTmxjMXh1SUNBZ0lISmxkSFZ5YmlCdFlYQTdYRzU5WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUcxaGNFRm5aVU5zWldGdVpYSTdYRzRpTENKY0luVnpaU0J6ZEhKcFkzUmNJanRjYm1OdmJuTjBJRzFoY0VGblpVTnNaV0Z1WlhJZ1BTQnlaWEYxYVhKbEtGd2liV0Z3TFdGblpTMWpiR1ZoYm1WeVhDSXBPMXh1WTJ4aGMzTWdSWGh3YVhKNVRXRndJSHRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWh0WVhoQloyVXNJR1JoZEdFcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dFlYaEJaMlVnUFNCdFlYaEJaMlU3WEc0Z0lDQWdJQ0FnSUhSb2FYTmJVM2x0WW05c0xuUnZVM1J5YVc1blZHRm5YU0E5SUNkTllYQW5PMXh1SUNBZ0lDQWdJQ0IwYUdsekxtUmhkR0VnUFNCdVpYY2dUV0Z3S0NrN1hHNGdJQ0FnSUNBZ0lDOHZJRUp2YjNSemRISmhjQ0IwYUdVZ1kyeGxZVzUxY0NCd2NtOWpaWE56SUhkb2FXTm9JR1p5WldWeklIVndJRzFsYlc5eWVTQjNhR1Z1SUdGdUlHbDBaVzBnWlhod2FYSmxjMXh1SUNBZ0lDQWdJQ0J0WVhCQloyVkRiR1ZoYm1WeUtIUm9hWE11WkdGMFlTazdYRzRnSUNBZ0lDQWdJR2xtSUNoa1lYUmhLU0I3SUM4dklIUnpiR2x1ZERwa2FYTmhZbXhsTFd4cGJtVTZaV0Z5YkhrdFpYaHBkRnh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2hqYjI1emRDQmJhMlY1TENCMllXeDFaVjBnYjJZZ1pHRjBZU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlYwS0d0bGVTd2dkbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJR2RsZENCemFYcGxLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWtZWFJoTG5OcGVtVTdYRzRnSUNBZ2ZWeHVJQ0FnSUdOc1pXRnlLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbVJoZEdFdVkyeGxZWElvS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdaR1ZzWlhSbEtHdGxlU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWtZWFJoTG1SbGJHVjBaU2hyWlhrcE8xeHVJQ0FnSUgxY2JpQWdJQ0JvWVhNb2EyVjVLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtUmhkR0V1YUdGektHdGxlU2s3WEc0Z0lDQWdmVnh1SUNBZ0lHZGxkQ2hyWlhrcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2RtRnNkV1VnUFNCMGFHbHpMbVJoZEdFdVoyVjBLR3RsZVNrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhaaGJIVmxMbVJoZEdFN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JpQWdJQ0J6WlhRb2EyVjVMQ0IyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtUmhkR0V1YzJWMEtHdGxlU3dnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiV0Y0UVdkbE9pQkVZWFJsTG01dmR5Z3BJQ3NnZEdocGN5NXRZWGhCWjJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaE9pQjJZV3gxWlZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdmVnh1SUNBZ0lIWmhiSFZsY3lncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WTNKbFlYUmxTWFJsY21GMGIzSW9hWFJsYlNBOVBpQnBkR1Z0V3pGZExtUmhkR0VwTzF4dUlDQWdJSDFjYmlBZ0lDQnJaWGx6S0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVrWVhSaExtdGxlWE1vS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdaVzUwY21sbGN5Z3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkzSmxZWFJsU1hSbGNtRjBiM0lvYVhSbGJTQTlQaUJiYVhSbGJWc3dYU3dnYVhSbGJWc3hYUzVrWVhSaFhTazdYRzRnSUNBZ2ZWeHVJQ0FnSUdadmNrVmhZMmdvWTJGc2JHSmhZMnRtYml3Z2RHaHBjMEZ5WnlrZ2UxeHVJQ0FnSUNBZ0lDQm1iM0lnS0dOdmJuTjBJRnRyWlhrc0lIWmhiSFZsWFNCdlppQjBhR2x6TG1WdWRISnBaWE1vS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGc2JHSmhZMnRtYmk1aGNIQnNlU2gwYUdselFYSm5MQ0JiZG1Gc2RXVXNJR3RsZVN3Z2RHaHBjMTBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJRnRUZVcxaWIyd3VhWFJsY21GMGIzSmRLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWxiblJ5YVdWektDazdYRzRnSUNBZ2ZWeHVJQ0FnSUNwamNtVmhkR1ZKZEdWeVlYUnZjaWh3Y205cVpXTjBhVzl1S1NCN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvWTI5dWMzUWdhWFJsYlNCdlppQjBhR2x6TG1SaGRHRXVaVzUwY21sbGN5Z3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjVhV1ZzWkNCd2NtOXFaV04wYVc5dUtHbDBaVzBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dWZWeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQkZlSEJwY25sTllYQTdYRzRpTENKamIyNXpkQ0JqYjNCNVVISnZjR1Z5ZEhrZ1BTQW9kRzhzSUdaeWIyMHNJSEJ5YjNCbGNuUjVMQ0JwWjI1dmNtVk9iMjVEYjI1bWFXZDFjbUZpYkdVcElEMCtJSHRjYmx4MEx5OGdZRVoxYm1OMGFXOXVJMnhsYm1kMGFHQWdjMmh2ZFd4a0lISmxabXhsWTNRZ2RHaGxJSEJoY21GdFpYUmxjbk1nYjJZZ1lIUnZZQ0J1YjNRZ1lHWnliMjFnSUhOcGJtTmxJSGRsSUd0bFpYQWdhWFJ6SUdKdlpIa3VYRzVjZEM4dklHQkdkVzVqZEdsdmJpTndjbTkwYjNSNWNHVmdJR2x6SUc1dmJpMTNjbWwwWVdKc1pTQmhibVFnYm05dUxXTnZibVpwWjNWeVlXSnNaU0J6YnlCallXNGdibVYyWlhJZ1ltVWdiVzlrYVdacFpXUXVYRzVjZEdsbUlDaHdjbTl3WlhKMGVTQTlQVDBnSjJ4bGJtZDBhQ2NnZkh3Z2NISnZjR1Z5ZEhrZ1BUMDlJQ2R3Y205MGIzUjVjR1VuS1NCN1hHNWNkRngwY21WMGRYSnVPMXh1WEhSOVhHNWNibHgwTHk4Z1lFWjFibU4wYVc5dUkyRnlaM1Z0Wlc1MGMyQWdZVzVrSUdCR2RXNWpkR2x2YmlOallXeHNaWEpnSUhOb2IzVnNaQ0J1YjNRZ1ltVWdZMjl3YVdWa0xpQlVhR1Y1SUhkbGNtVWdjbVZ3YjNKMFpXUWdkRzhnWW1VZ2NISmxjMlZ1ZENCcGJpQmdVbVZtYkdWamRDNXZkMjVMWlhsellDQm1iM0lnYzI5dFpTQmtaWFpwWTJWeklHbHVJRkpsWVdOMElFNWhkR2wyWlNBb0l6UXhLU3dnYzI4Z2QyVWdaWGh3YkdsamFYUnNlU0JwWjI1dmNtVWdkR2hsYlNCb1pYSmxMbHh1WEhScFppQW9jSEp2Y0dWeWRIa2dQVDA5SUNkaGNtZDFiV1Z1ZEhNbklIeDhJSEJ5YjNCbGNuUjVJRDA5UFNBblkyRnNiR1Z5SnlrZ2UxeHVYSFJjZEhKbGRIVnlianRjYmx4MGZWeHVYRzVjZEdOdmJuTjBJSFJ2UkdWelkzSnBjSFJ2Y2lBOUlFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lvZEc4c0lIQnliM0JsY25SNUtUdGNibHgwWTI5dWMzUWdabkp2YlVSbGMyTnlhWEIwYjNJZ1BTQlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxFWlhOamNtbHdkRzl5S0daeWIyMHNJSEJ5YjNCbGNuUjVLVHRjYmx4dVhIUnBaaUFvSVdOaGJrTnZjSGxRY205d1pYSjBlU2gwYjBSbGMyTnlhWEIwYjNJc0lHWnliMjFFWlhOamNtbHdkRzl5S1NBbUppQnBaMjV2Y21WT2IyNURiMjVtYVdkMWNtRmliR1VwSUh0Y2JseDBYSFJ5WlhSMWNtNDdYRzVjZEgxY2JseHVYSFJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2RHOHNJSEJ5YjNCbGNuUjVMQ0JtY205dFJHVnpZM0pwY0hSdmNpazdYRzU5TzF4dVhHNHZMeUJnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtDbGdJSFJvY205M2N5QnBaaUIwYUdVZ2NISnZjR1Z5ZEhrZ1pYaHBjM1J6TENCcGN5QnViM1FnWTI5dVptbG5kWEpoWW14bElHRnVaQ0JsYVhSb1pYSTZYRzR2THlBdElHOXVaU0JwZEhNZ1pHVnpZM0pwY0hSdmNuTWdhWE1nWTJoaGJtZGxaRnh1THk4Z0xTQnBkQ0JwY3lCdWIyNHRkM0pwZEdGaWJHVWdZVzVrSUdsMGN5QjJZV3gxWlNCcGN5QmphR0Z1WjJWa1hHNWpiMjV6ZENCallXNURiM0I1VUhKdmNHVnlkSGtnUFNCbWRXNWpkR2x2YmlBb2RHOUVaWE5qY21sd2RHOXlMQ0JtY205dFJHVnpZM0pwY0hSdmNpa2dlMXh1WEhSeVpYUjFjbTRnZEc5RVpYTmpjbWx3ZEc5eUlEMDlQU0IxYm1SbFptbHVaV1FnZkh3Z2RHOUVaWE5qY21sd2RHOXlMbU52Ym1acFozVnlZV0pzWlNCOGZDQW9YRzVjZEZ4MGRHOUVaWE5qY21sd2RHOXlMbmR5YVhSaFlteGxJRDA5UFNCbWNtOXRSR1Z6WTNKcGNIUnZjaTUzY21sMFlXSnNaU0FtSmx4dVhIUmNkSFJ2UkdWelkzSnBjSFJ2Y2k1bGJuVnRaWEpoWW14bElEMDlQU0JtY205dFJHVnpZM0pwY0hSdmNpNWxiblZ0WlhKaFlteGxJQ1ltWEc1Y2RGeDBkRzlFWlhOamNtbHdkRzl5TG1OdmJtWnBaM1Z5WVdKc1pTQTlQVDBnWm5KdmJVUmxjMk55YVhCMGIzSXVZMjl1Wm1sbmRYSmhZbXhsSUNZbVhHNWNkRngwS0hSdlJHVnpZM0pwY0hSdmNpNTNjbWwwWVdKc1pTQjhmQ0IwYjBSbGMyTnlhWEIwYjNJdWRtRnNkV1VnUFQwOUlHWnliMjFFWlhOamNtbHdkRzl5TG5aaGJIVmxLVnh1WEhRcE8xeHVmVHRjYmx4dVkyOXVjM1FnWTJoaGJtZGxVSEp2ZEc5MGVYQmxJRDBnS0hSdkxDQm1jbTl0S1NBOVBpQjdYRzVjZEdOdmJuTjBJR1p5YjIxUWNtOTBiM1I1Y0dVZ1BTQlBZbXBsWTNRdVoyVjBVSEp2ZEc5MGVYQmxUMllvWm5KdmJTazdYRzVjZEdsbUlDaG1jbTl0VUhKdmRHOTBlWEJsSUQwOVBTQlBZbXBsWTNRdVoyVjBVSEp2ZEc5MGVYQmxUMllvZEc4cEtTQjdYRzVjZEZ4MGNtVjBkWEp1TzF4dVhIUjlYRzVjYmx4MFQySnFaV04wTG5ObGRGQnliM1J2ZEhsd1pVOW1LSFJ2TENCbWNtOXRVSEp2ZEc5MGVYQmxLVHRjYm4wN1hHNWNibU52Ym5OMElIZHlZWEJ3WldSVWIxTjBjbWx1WnlBOUlDaDNhWFJvVG1GdFpTd2dabkp2YlVKdlpIa3BJRDArSUdBdktpQlhjbUZ3Y0dWa0lDUjdkMmwwYUU1aGJXVjlLaTljWEc0a2UyWnliMjFDYjJSNWZXQTdYRzVjYm1OdmJuTjBJSFJ2VTNSeWFXNW5SR1Z6WTNKcGNIUnZjaUE5SUU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSW9SblZ1WTNScGIyNHVjSEp2ZEc5MGVYQmxMQ0FuZEc5VGRISnBibWNuS1R0Y2JtTnZibk4wSUhSdlUzUnlhVzVuVG1GdFpTQTlJRTlpYW1WamRDNW5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJb1JuVnVZM1JwYjI0dWNISnZkRzkwZVhCbExuUnZVM1J5YVc1bkxDQW5ibUZ0WlNjcE8xeHVYRzR2THlCWFpTQmpZV3hzSUdCbWNtOXRMblJ2VTNSeWFXNW5LQ2xnSUdWaGNteDVJQ2h1YjNRZ2JHRjZhV3g1S1NCMGJ5Qmxibk4xY21VZ1lHWnliMjFnSUdOaGJpQmlaU0JuWVhKaVlXZGxJR052Ykd4bFkzUmxaQzVjYmk4dklGZGxJSFZ6WlNCZ1ltbHVaQ2dwWUNCcGJuTjBaV0ZrSUc5bUlHRWdZMnh2YzNWeVpTQm1iM0lnZEdobElITmhiV1VnY21WaGMyOXVMbHh1THk4Z1EyRnNiR2x1WnlCZ1puSnZiUzUwYjFOMGNtbHVaeWdwWUNCbFlYSnNlU0JoYkhOdklHRnNiRzkzY3lCallXTm9hVzVuSUdsMElHbHVJR05oYzJVZ1lIUnZMblJ2VTNSeWFXNW5LQ2xnSUdseklHTmhiR3hsWkNCelpYWmxjbUZzSUhScGJXVnpMbHh1WTI5dWMzUWdZMmhoYm1kbFZHOVRkSEpwYm1jZ1BTQW9kRzhzSUdaeWIyMHNJRzVoYldVcElEMCtJSHRjYmx4MFkyOXVjM1FnZDJsMGFFNWhiV1VnUFNCdVlXMWxJRDA5UFNBbkp5QS9JQ2NuSURvZ1lIZHBkR2dnSkh0dVlXMWxMblJ5YVcwb0tYMG9LU0JnTzF4dVhIUmpiMjV6ZENCdVpYZFViMU4wY21sdVp5QTlJSGR5WVhCd1pXUlViMU4wY21sdVp5NWlhVzVrS0c1MWJHd3NJSGRwZEdoT1lXMWxMQ0JtY205dExuUnZVM1J5YVc1bktDa3BPMXh1WEhRdkx5QkZibk4xY21VZ1lIUnZMblJ2VTNSeWFXNW5MblJ2VTNSeWFXNW5ZQ0JwY3lCdWIyNHRaVzUxYldWeVlXSnNaU0JoYm1RZ2FHRnpJSFJvWlNCellXMWxJR0J6WVcxbFlGeHVYSFJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2JtVjNWRzlUZEhKcGJtY3NJQ2R1WVcxbEp5d2dkRzlUZEhKcGJtZE9ZVzFsS1R0Y2JseDBUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0hSdkxDQW5kRzlUZEhKcGJtY25MQ0I3TGk0dWRHOVRkSEpwYm1kRVpYTmpjbWx3ZEc5eUxDQjJZV3gxWlRvZ2JtVjNWRzlUZEhKcGJtZDlLVHRjYm4wN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHWjFibU4wYVc5dUlHMXBiV2xqUm5WdVkzUnBiMjRvZEc4c0lHWnliMjBzSUh0cFoyNXZjbVZPYjI1RGIyNW1hV2QxY21GaWJHVWdQU0JtWVd4elpYMGdQU0I3ZlNrZ2UxeHVYSFJqYjI1emRDQjdibUZ0WlgwZ1BTQjBienRjYmx4dVhIUm1iM0lnS0dOdmJuTjBJSEJ5YjNCbGNuUjVJRzltSUZKbFpteGxZM1F1YjNkdVMyVjVjeWhtY205dEtTa2dlMXh1WEhSY2RHTnZjSGxRY205d1pYSjBlU2gwYnl3Z1puSnZiU3dnY0hKdmNHVnlkSGtzSUdsbmJtOXlaVTV2YmtOdmJtWnBaM1Z5WVdKc1pTazdYRzVjZEgxY2JseHVYSFJqYUdGdVoyVlFjbTkwYjNSNWNHVW9kRzhzSUdaeWIyMHBPMXh1WEhSamFHRnVaMlZVYjFOMGNtbHVaeWgwYnl3Z1puSnZiU3dnYm1GdFpTazdYRzVjYmx4MGNtVjBkWEp1SUhSdk8xeHVmVnh1SWl3aWFXMXdiM0owSUcxcGJXbGpSbTRnWm5KdmJTQW5iV2x0YVdNdFptNG5PMXh1WTI5dWMzUWdZMkZqYUdWVGRHOXlaU0E5SUc1bGR5QlhaV0ZyVFdGd0tDazdYRzR2S2lwY2JsdE5aVzF2YVhwbFhTaG9kSFJ3Y3pvdkwyVnVMbmRwYTJsd1pXUnBZUzV2Y21jdmQybHJhUzlOWlcxdmFYcGhkR2x2YmlrZ1puVnVZM1JwYjI1eklDMGdRVzRnYjNCMGFXMXBlbUYwYVc5dUlIVnpaV1FnZEc4Z2MzQmxaV1FnZFhBZ1kyOXVjMlZqZFhScGRtVWdablZ1WTNScGIyNGdZMkZzYkhNZ1lua2dZMkZqYUdsdVp5QjBhR1VnY21WemRXeDBJRzltSUdOaGJHeHpJSGRwZEdnZ2FXUmxiblJwWTJGc0lHbHVjSFYwTGx4dVhHNUFjR0Z5WVcwZ1ptNGdMU0JHZFc1amRHbHZiaUIwYnlCaVpTQnRaVzF2YVhwbFpDNWNibHh1UUdWNFlXMXdiR1ZjYm1CZ1lGeHVhVzF3YjNKMElIdHpaWFJVYVcxbGIzVjBJR0Z6SUdSbGJHRjVmU0JtY205dElDZHViMlJsT25ScGJXVnlMM0J5YjIxcGMyVnpKenRjYm1sdGNHOXlkQ0J3VFdWdGIybDZaU0JtY205dElDZHdMVzFsYlc5cGVtVW5PMXh1YVcxd2IzSjBJR2R2ZENCbWNtOXRJQ2RuYjNRbk8xeHVYRzVqYjI1emRDQnRaVzF2YVhwbFpFZHZkQ0E5SUhCTlpXMXZhWHBsS0dkdmRDazdYRzVjYm1GM1lXbDBJRzFsYlc5cGVtVmtSMjkwS0Nkb2RIUndjem92TDNOcGJtUnlaWE52Y21oMWN5NWpiMjBuS1R0Y2JseHVMeThnVkdocGN5QmpZV3hzSUdseklHTmhZMmhsWkZ4dVlYZGhhWFFnYldWdGIybDZaV1JIYjNRb0oyaDBkSEJ6T2k4dmMybHVaSEpsYzI5eWFIVnpMbU52YlNjcE8xeHVYRzVoZDJGcGRDQmtaV3hoZVNneU1EQXdLVHRjYmx4dUx5OGdWR2hwY3lCallXeHNJR2x6SUc1dmRDQmpZV05vWldRZ1lYTWdkR2hsSUdOaFkyaGxJR2hoY3lCbGVIQnBjbVZrWEc1aGQyRnBkQ0J0WlcxdmFYcGxaRWR2ZENnbmFIUjBjSE02THk5emFXNWtjbVZ6YjNKb2RYTXVZMjl0SnlrN1hHNWdZR0JjYmlvdlhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCbWRXNWpkR2x2YmlCd1RXVnRiMmw2WlNobWJpd2dleUJqWVdOb1pVdGxlU0E5SUNoYlptbHljM1JCY21kMWJXVnVkRjBwSUQwK0lHWnBjbk4wUVhKbmRXMWxiblFzSUdOaFkyaGxJRDBnYm1WM0lFMWhjQ2dwTENCOUlEMGdlMzBwSUh0Y2JpQWdJQ0F2THlCUWNtOXRhWE5sSUc5aWFtVmpkSE1nWTJGdUozUWdZbVVnYzJWeWFXRnNhWHBsWkNCemJ5QjNaU0JyWldWd0lIUnlZV05ySUc5bUlIUm9aVzBnYVc1MFpYSnVZV3hzZVNCaGJtUWdiMjVzZVNCd2NtOTJhV1JsSUhSb1pXbHlJSEpsYzI5c2RtVmtJSFpoYkhWbGN5QjBieUJnWTJGamFHVmdYRzRnSUNBZ0x5OGdZRkJ5YjIxcGMyVThRWE41Ym1OU1pYUjFjbTVVZVhCbFBFWjFibU4wYVc5dVZHOU5aVzF2YVhwbFBqNWdJR2x6SUhWelpXUWdhVzV6ZEdWaFpDQnZaaUJnVW1WMGRYSnVWSGx3WlR4R2RXNWpkR2x2YmxSdlRXVnRiMmw2WlQ1Z0lHSmxZMkYxYzJVZ2NISnZiV2x6WlNCd2NtOXdaWEowYVdWeklHRnlaU0J1YjNRZ2EyVndkRnh1SUNBZ0lHTnZibk4wSUhCeWIyMXBjMlZEWVdOb1pTQTlJRzVsZHlCTllYQW9LVHRjYmlBZ0lDQmpiMjV6ZENCdFpXMXZhWHBsWkNBOUlHWjFibU4wYVc5dUlDZ3VMaTVoY21kMWJXVnVkSE5mS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUd0bGVTQTlJR05oWTJobFMyVjVLR0Z5WjNWdFpXNTBjMThwTzF4dUlDQWdJQ0FnSUNCcFppQW9jSEp2YldselpVTmhZMmhsTG1oaGN5aHJaWGtwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjSEp2YldselpVTmhZMmhsTG1kbGRDaHJaWGtwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUhCeWIyMXBjMlVnUFNBb1lYTjVibU1nS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1kyRmphR1VnSmlZZ1lYZGhhWFFnWTJGamFHVXVhR0Z6S0d0bGVTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUNoaGQyRnBkQ0JqWVdOb1pTNW5aWFFvYTJWNUtTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIQnliMjFwYzJVZ1BTQm1iaTVoY0hCc2VTaDBhR2x6TENCaGNtZDFiV1Z1ZEhOZktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCeVpYTjFiSFFnUFNCaGQyRnBkQ0J3Y205dGFYTmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnBibUZzYkhrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1kyRmphR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGM1lXbDBJR05oWTJobExuTmxkQ2hyWlhrc0lISmxjM1ZzZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCbWFXNWhiR3g1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtOXRhWE5sUTJGamFHVXVaR1ZzWlhSbEtHdGxlU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBwS0NrN1hHNGdJQ0FnSUNBZ0lIQnliMjFwYzJWRFlXTm9aUzV6WlhRb2EyVjVMQ0J3Y205dGFYTmxLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEJ5YjIxcGMyVTdYRzRnSUNBZ2ZUdGNiaUFnSUNCdGFXMXBZMFp1S0cxbGJXOXBlbVZrTENCbWJpd2dlMXh1SUNBZ0lDQWdJQ0JwWjI1dmNtVk9iMjVEYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VzWEc0Z0lDQWdmU2s3WEc0Z0lDQWdZMkZqYUdWVGRHOXlaUzV6WlhRb2JXVnRiMmw2WldRc0lHTmhZMmhsS1R0Y2JpQWdJQ0J5WlhSMWNtNGdiV1Z0YjJsNlpXUTdYRzU5WEc0dktpcGNiaTBnVDI1c2VTQmpiR0Z6Y3lCdFpYUm9iMlJ6SUdGdVpDQm5aWFIwWlhKekwzTmxkSFJsY25NZ1kyRnVJR0psSUcxbGJXOXBlbVZrTENCdWIzUWdjbVZuZFd4aGNpQm1kVzVqZEdsdmJuTWdLSFJvWlhrZ1lYSmxiaWQwSUhCaGNuUWdiMllnZEdobElIQnliM0J2YzJGc0tUdGNiaTBnVDI1c2VTQmJWSGx3WlZOamNtbHdkT0tBbVhNZ1pHVmpiM0poZEc5eWMxMG9hSFIwY0hNNkx5OTNkM2N1ZEhsd1pYTmpjbWx3ZEd4aGJtY3ViM0puTDJSdlkzTXZhR0Z1WkdKdmIyc3ZaR1ZqYjNKaGRHOXljeTVvZEcxc0kzQmhjbUZ0WlhSbGNpMWtaV052Y21GMGIzSnpLU0JoY21VZ2MzVndjRzl5ZEdWa0xDQnViM1FnVzBKaFltVnM0b0NaYzEwb2FIUjBjSE02THk5aVlXSmxiR3B6TG1sdkwyUnZZM012Wlc0dlltRmlaV3d0Y0d4MVoybHVMWEJ5YjNCdmMyRnNMV1JsWTI5eVlYUnZjbk1wTENCM2FHbGphQ0IxYzJVZ1lTQmthV1ptWlhKbGJuUWdkbVZ5YzJsdmJpQnZaaUIwYUdVZ2NISnZjRzl6WVd3N1hHNHRJRUpsYVc1bklHRnVJR1Y0Y0dWeWFXMWxiblJoYkNCbVpXRjBkWEpsTENCMGFHVjVJRzVsWldRZ2RHOGdZbVVnWlc1aFlteGxaQ0IzYVhSb0lHQXRMV1Y0Y0dWeWFXMWxiblJoYkVSbFkyOXlZWFJ2Y25OZ095Qm1iMnhzYjNjZ1ZIbHdaVk5qY21sd2RPS0FtWE1nWkc5amN5NWNibHh1UUhKbGRIVnlibk1nUVNCYlpHVmpiM0poZEc5eVhTaG9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZkR016T1M5d2NtOXdiM05oYkMxa1pXTnZjbUYwYjNKektTQjBieUJ0WlcxdmFYcGxJR05zWVhOeklHMWxkR2h2WkhNZ2IzSWdjM1JoZEdsaklHTnNZWE56SUcxbGRHaHZaSE11WEc1Y2JrQmxlR0Z0Y0d4bFhHNWdZR0JjYm1sdGNHOXlkQ0I3Y0UxbGJXOXBlbVZFWldOdmNtRjBiM0o5SUdaeWIyMGdKM0F0YldWdGIybDZaU2M3WEc1Y2JtTnNZWE56SUVWNFlXMXdiR1VnZTF4dUlDQWdJR2x1WkdWNElEMGdNRnh1WEc0Z0lDQWdRSEJOWlcxdmFYcGxSR1ZqYjNKaGRHOXlLQ2xjYmlBZ0lDQmhjM2x1WXlCamIzVnVkR1Z5S0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0t5dDBhR2x6TG1sdVpHVjRPMXh1SUNBZ0lIMWNibjFjYmx4dVkyeGhjM01nUlhoaGJYQnNaVmRwZEdoUGNIUnBiMjV6SUh0Y2JpQWdJQ0JwYm1SbGVDQTlJREJjYmx4dUlDQWdJRUJ3VFdWdGIybDZaVVJsWTI5eVlYUnZjaWdwWEc0Z0lDQWdZWE41Ym1NZ1kyOTFiblJsY2lncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDc3JkR2hwY3k1cGJtUmxlRHRjYmlBZ0lDQjlYRzU5WEc1Z1lHQmNiaW92WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnY0UxbGJXOXBlbVZFWldOdmNtRjBiM0lvYjNCMGFXOXVjeUE5SUh0OUtTQjdYRzRnSUNBZ1kyOXVjM1FnYVc1emRHRnVZMlZOWVhBZ1BTQnVaWGNnVjJWaGEwMWhjQ2dwTzF4dUlDQWdJSEpsZEhWeWJpQW9kR0Z5WjJWMExDQndjbTl3WlhKMGVVdGxlU3dnWkdWelkzSnBjSFJ2Y2lrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnBibkIxZENBOUlIUmhjbWRsZEZ0d2NtOXdaWEowZVV0bGVWMDdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMV3hwYm1VZ1FIUjVjR1Z6WTNKcGNIUXRaWE5zYVc1MEwyNXZMWFZ1YzJGbVpTMWhjM05wWjI1dFpXNTBYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnYVc1d2RYUWdJVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0oxUm9aU0JrWldOdmNtRjBaV1FnZG1Gc2RXVWdiWFZ6ZENCaVpTQmhJR1oxYm1OMGFXOXVKeWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pHVnNaWFJsSUdSbGMyTnlhWEIwYjNJdWRtRnNkV1U3WEc0Z0lDQWdJQ0FnSUdSbGJHVjBaU0JrWlhOamNtbHdkRzl5TG5keWFYUmhZbXhsTzF4dUlDQWdJQ0FnSUNCa1pYTmpjbWx3ZEc5eUxtZGxkQ0E5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hhVzV6ZEdGdVkyVk5ZWEF1YUdGektIUm9hWE1wS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnZG1Gc2RXVWdQU0J3VFdWdGIybDZaU2hwYm5CMWRDd2diM0IwYVc5dWN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzV6ZEdGdVkyVk5ZWEF1YzJWMEtIUm9hWE1zSUhaaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkbUZzZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2FXNXpkR0Z1WTJWTllYQXVaMlYwS0hSb2FYTXBPMXh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJSDA3WEc1OVhHNHZLaXBjYmtOc1pXRnlJR0ZzYkNCallXTm9aV1FnWkdGMFlTQnZaaUJoSUcxbGJXOXBlbVZrSUdaMWJtTjBhVzl1TGx4dVhHNUFjR0Z5WVcwZ1ptNGdMU0JOWlcxdmFYcGxaQ0JtZFc1amRHbHZiaTVjYmlvdlhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2NFMWxiVzlwZW1WRGJHVmhjaWhtYmlrZ2UxeHVJQ0FnSUdsbUlDZ2hZMkZqYUdWVGRHOXlaUzVvWVhNb1ptNHBLU0I3WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0owTmhibHhjSjNRZ1kyeGxZWElnWVNCbWRXNWpkR2x2YmlCMGFHRjBJSGRoY3lCdWIzUWdiV1Z0YjJsNlpXUWhKeWs3WEc0Z0lDQWdmVnh1SUNBZ0lHTnZibk4wSUdOaFkyaGxJRDBnWTJGamFHVlRkRzl5WlM1blpYUW9abTRwTzF4dUlDQWdJR2xtSUNnaFkyRmphR1VwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25RMkZ1WEZ3bmRDQmpiR1ZoY2lCaElHWjFibU4wYVc5dUlIUm9ZWFFnWkc5bGMyNWNYQ2QwSUhWelpTQmhJR05oWTJobElTY3BPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHTmhZMmhsTG1Oc1pXRnlJQ0U5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjFSb1pTQmpZV05vWlNCTllYQWdZMkZ1WEZ3bmRDQmlaU0JqYkdWaGNtVmtJU2NwTzF4dUlDQWdJSDFjYmlBZ0lDQmpZV05vWlM1amJHVmhjaWdwTzF4dWZWeHVJaXdpTHlvcVhHNGdLaUJEYjNCNWNtbG5hSFFnTWpBeU15QkJaRzlpWlZ4dUlDb2dRV3hzSUZKcFoyaDBjeUJTWlhObGNuWmxaQzVjYmlBcVhHNGdLaUJPVDFSSlEwVTZJRUZrYjJKbElIQmxjbTFwZEhNZ2VXOTFJSFJ2SUhWelpTd2diVzlrYVdaNUxDQmhibVFnWkdsemRISnBZblYwWlNCMGFHbHpJR1pwYkdVZ2FXNWNiaUFxSUdGalkyOXlaR0Z1WTJVZ2QybDBhQ0IwYUdVZ2RHVnliWE1nYjJZZ2RHaGxJRUZrYjJKbElHeHBZMlZ1YzJVZ1lXZHlaV1Z0Wlc1MElHRmpZMjl0Y0dGdWVXbHVaMXh1SUNvZ2FYUXVYRzRnS2k5Y2JseHVhVzF3YjNKMElIc2dTVzUyWVd4cFpFTnZibVpwWjBWeWNtOXlMQ0JWY214R1pYUmphRVZ5Y205eUlIMGdabkp2YlNBbkxpNHZiR2xpTDJWeWNtOXlKenRjYm1sdGNHOXlkQ0IwZVhCbElIc2dRMjl0WW1sdVpXUkRiMjVtYVdjZ2ZTQm1jbTl0SUNjdUwzTnBaMjRuTzF4dVhHNWxlSEJ2Y25RZ2RIbHdaU0JUZEc5eVlXZGxUM0IwYVc5dUlEMGdKMk5zYjNWa0p5QjhJQ2RsYldKbFpHUmxaQ2M3WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCc1lXSmxiRUZ6VlhKc0tHeGhZbVZzT2lCemRISnBibWNzSUhObGRIUnBibWR6T2lCRGIyMWlhVzVsWkVOdmJtWnBaeWtnZTF4dUlDQmpiMjV6ZENCb2IzTjBJRDBnYzJWMGRHbHVaM011WjJ4dlltRnNMbTFoYm1sbVpYTjBVM1J2Y21GblpUOHVaMlYwUHk1b2IzTjBPMXh1WEc0Z0lHbG1JQ2doYUc5emRDa2dlMXh1SUNBZ0lDOHZJRlJQUkU4NklGTmxaU0IzYUhrZ1lFbHVkbUZzYVdSRGIyNW1hV2RGY25KdmNtQWdZbkpsWVd0eklIUmxjM1J6SUhKMWJtNXBibWNnYVc0Z1lIZDBjbUJjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oyMWhibWxtWlhOMFgzTjBiM0poWjJWZloyVjBYMmh2YzNRbktUdGNiaUFnZlZ4dVhHNGdJR052Ym5OMElIVnliQ0E5SUc1bGR5QlZVa3dvYUc5emRDazdYRzRnSUhWeWJDNXdZWFJvYm1GdFpTQTlJR0F2YldGdWFXWmxjM1J6WUR0Y2JseHVJQ0J5WlhSMWNtNGdXM1Z5YkM1MGIxTjBjbWx1WnlncExDQnNZV0psYkM1eVpYQnNZV05sUVd4c0tDYzZKeXdnSnkwbktWMHVhbTlwYmlnbkx5Y3BPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1lYTjVibU1nWm5WdVkzUnBiMjRnZFhCc2IyRmtVMmxuYm1Wa1RXRnVhV1psYzNRb1hHNGdJRzFoYm1sbVpYTjBPaUJDYkc5aUxGeHVJQ0J6WlhSMGFXNW5jem9nUTI5dFltbHVaV1JEYjI1bWFXY3NYRzRwSUh0Y2JpQWdZMjl1YzNRZ2MyVnlkbWxqWlVOdmJtWnBaeUE5SUhObGRIUnBibWR6TG1kc2IySmhiQzV0WVc1cFptVnpkRk4wYjNKaFoyVS9MbkJ2YzNRN1hHNGdJR052Ym5OMElIc2dZWFYwYUZSdmEyVnVJSDBnUFNCelpYUjBhVzVuY3k1emFXZHVPMXh1WEc0Z0lHbG1JQ2doYzJWeWRtbGpaVU52Ym1acFp6OHVhRzl6ZENCOGZDQWhjMlZ5ZG1salpVTnZibVpwWnk1aGNHbExaWGtnZkh3Z0lXRjFkR2hVYjJ0bGJpa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkpiblpoYkdsa1EyOXVabWxuUlhKeWIzSW9ZRzFoYm1sbVpYTjBYM04wYjNKaFoyVmdLVHRjYmlBZ2ZWeHVYRzRnSUdOdmJuTjBJSHNnYUc5emRDd2dZWEJwUzJWNUlIMGdQU0J6WlhKMmFXTmxRMjl1Wm1sbk8xeHVJQ0JqYjI1emRDQjFjbXdnUFNCZ0pIdG9iM04wZlM5dFlXNXBabVZ6ZEhNdmRqRmdPMXh1SUNCamIyNXpkQ0J5WlhNZ1BTQmhkMkZwZENCbVpYUmphQ2gxY213c0lIdGNiaUFnSUNCdFpYUm9iMlE2SUNkUVQxTlVKeXhjYmlBZ0lDQm9aV0ZrWlhKek9pQnVaWGNnU0dWaFpHVnljeWg3WEc0Z0lDQWdJQ0FuZUMxaGNHa3RhMlY1SnpvZ1lYQnBTMlY1TEZ4dUlDQWdJQ0FnUVhWMGFHOXlhWHBoZEdsdmJqb2dZRUpsWVhKbGNpQWtlMkYxZEdoVWIydGxibjFnTEZ4dUlDQWdJSDBwTEZ4dUlDQWdJR0p2WkhrNklHMWhibWxtWlhOMExGeHVJQ0I5S1R0Y2JseHVJQ0JwWmlBb0lYSmxjeTV2YXlrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCVmNteEdaWFJqYUVWeWNtOXlLSFZ5YkN3Z2NtVnpLVHRjYmlBZ2ZWeHVmVnh1SWl3aUx5b3FYRzRnS2lCRGIzQjVjbWxuYUhRZ01qQXlNeUJCWkc5aVpWeHVJQ29nUVd4c0lGSnBaMmgwY3lCU1pYTmxjblpsWkM1Y2JpQXFYRzRnS2lCT1QxUkpRMFU2SUVGa2IySmxJSEJsY20xcGRITWdlVzkxSUhSdklIVnpaU3dnYlc5a2FXWjVMQ0JoYm1RZ1pHbHpkSEpwWW5WMFpTQjBhR2x6SUdacGJHVWdhVzVjYmlBcUlHRmpZMjl5WkdGdVkyVWdkMmwwYUNCMGFHVWdkR1Z5YlhNZ2IyWWdkR2hsSUVGa2IySmxJR3hwWTJWdWMyVWdZV2R5WldWdFpXNTBJR0ZqWTI5dGNHRnVlV2x1WjF4dUlDb2dhWFF1WEc0Z0tpOWNibHh1YVcxd2IzSjBJR1JsWW5WbklHWnliMjBnSjJSbFluVm5KenRjYm1sdGNHOXlkQ0I3SUZKbGMybDZaVWx0WVdkbFJYSnliM0lnZlNCbWNtOXRJQ2N1TGk5c2FXSXZaWEp5YjNJbk8xeHVhVzF3YjNKMElIUjVjR1VnZXlCVWFIVnRZbTVoYVd4UGNIUnBiMjV6SUgwZ1puSnZiU0FuTGk5emFXZHVKenRjYmx4dVkyOXVjM1FnWkdKbklEMGdaR1ZpZFdjb0oyTXljR0U2YzJsbmJqcHBiV0ZuWlNjcE8xeHVYRzUwZVhCbElFRnVlVU5oYm5aaGN5QTlJRWhVVFV4RFlXNTJZWE5GYkdWdFpXNTBJSHdnVDJabWMyTnlaV1Z1UTJGdWRtRnpPMXh1WEc1MGVYQmxJRTl3ZEdsdmJtRnNRVzU1UTJGdWRtRnpJRDBnUVc1NVEyRnVkbUZ6SUh3Z2JuVnNiRHRjYmx4dWFXNTBaWEptWVdObElGSmxjMmw2WlVScGJXVnVjMmx2Ym5NZ2UxeHVJQ0IzYVdSMGFEb2diblZ0WW1WeU8xeHVJQ0JvWldsbmFIUTZJRzUxYldKbGNqdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1oyVjBRMkZ1ZG1GektGeHVJQ0IzYVdSMGFEb2diblZ0WW1WeUxGeHVJQ0JvWldsbmFIUTZJRzUxYldKbGNpeGNiaUFnZDI5eWEybHVaME5oYm5aaGN6b2dUM0IwYVc5dVlXeEJibmxEWVc1MllYTWdQU0J1ZFd4c0xGeHVLU0I3WEc0Z0lHbG1JQ2gzYjNKcmFXNW5RMkZ1ZG1GektTQjdYRzRnSUNBZ2QyOXlhMmx1WjBOaGJuWmhjeTUzYVdSMGFDQTlJSGRwWkhSb08xeHVJQ0FnSUhkdmNtdHBibWREWVc1MllYTXVhR1ZwWjJoMElEMGdhR1ZwWjJoME8xeHVJQ0FnSUhKbGRIVnliaUIzYjNKcmFXNW5RMkZ1ZG1Gek8xeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlHNWxkeUJQWm1aelkzSmxaVzVEWVc1MllYTW9kMmxrZEdnc0lHaGxhV2RvZENrN1hHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJuWlhSU1pYTnBlbVZFYVcxbGJuTnBiMjV6S0Z4dUlDQnpjbU5YYVdSMGFEb2diblZ0WW1WeUxGeHVJQ0J6Y21OSVpXbG5hSFE2SUc1MWJXSmxjaXhjYmlBZ2IzQjBhVzl1Y3pvZ1ZHaDFiV0p1WVdsc1QzQjBhVzl1Y3l4Y2JpazZJRkpsYzJsNlpVUnBiV1Z1YzJsdmJuTWdlMXh1SUNCamIyNXpkQ0I3SUcxaGVGTnBlbVVnZlNBOUlHOXdkR2x2Ym5NN1hHNGdJR2xtSUNoemNtTlhhV1IwYUNBK0lHMWhlRk5wZW1VZ2ZId2djM0pqU0dWcFoyaDBJRDRnYldGNFUybDZaU2tnZTF4dUlDQWdJR052Ym5OMElISmhkR2x2SUQxY2JpQWdJQ0FnSUhOeVkxZHBaSFJvSUQ0OUlITnlZMGhsYVdkb2RDQS9JRzFoZUZOcGVtVWdMeUJ6Y21OWGFXUjBhQ0E2SUcxaGVGTnBlbVVnTHlCemNtTklaV2xuYUhRN1hHNGdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJSGRwWkhSb09pQk5ZWFJvTG5KdmRXNWtLSE55WTFkcFpIUm9JQ29nY21GMGFXOHBMRnh1SUNBZ0lDQWdhR1ZwWjJoME9pQk5ZWFJvTG5KdmRXNWtLSE55WTBobGFXZG9kQ0FxSUhKaGRHbHZLU3hjYmlBZ0lDQjlPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQjdYRzRnSUNBZ2QybGtkR2c2SUhOeVkxZHBaSFJvTEZ4dUlDQWdJR2hsYVdkb2REb2djM0pqU0dWcFoyaDBMRnh1SUNCOU8xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYUdGelFXeHdhR0VvYVcxaFoyVTZJRWx0WVdkbFJHRjBZU2tnZTF4dUlDQnNaWFFnWVd4d2FHRkdiM1Z1WkNBOUlHWmhiSE5sTzF4dUlDQm1iM0lnS0d4bGRDQnBJRDBnTXpzZ2FTQThJR2x0WVdkbExtUmhkR0V1YkdWdVozUm9PeUJwSUNzOUlEUXBJSHRjYmlBZ0lDQnBaaUFvYVcxaFoyVXVaR0YwWVZ0cFhTQThJREkxTlNrZ2UxeHVJQ0FnSUNBZ1lXeHdhR0ZHYjNWdVpDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQjlYRzRnSUgxY2JpQWdaR0puS0NkQmJIQm9ZU0JtYjNWdVpEOG5MQ0JoYkhCb1lVWnZkVzVrS1R0Y2JpQWdjbVYwZFhKdUlHRnNjR2hoUm05MWJtUTdYRzU5WEc1Y2JpOHZJRlJQUkU4NklGSmxjR3hoWTJVZ2QybDBhQ0JoYkd3Z1lHTnlaV0YwWlVsdFlXZGxRbWwwYldGd1lDQmpZV3hzY3lCdmJtTmxJR2wwSUdoaGN5QmlaWFIwWlhJZ2MzVndjRzl5ZENCcGJpQkdhWEpsWm05NElHRnVaQ0JUWVdaaGNtbGNibVY0Y0c5eWRDQmhjM2x1WXlCbWRXNWpkR2x2YmlCbGVIQnZjblJKYldGblpTaGNiaUFnWkdGMFlUb2dRbXh2WWl4Y2JpQWdiM0IwYVc5dWN6b2dWR2gxYldKdVlXbHNUM0IwYVc5dWN5eGNiaUFnZDI5eWEybHVaME5oYm5aaGN6b2dUM0IwYVc5dVlXeEJibmxEWVc1MllYTWdQU0J1ZFd4c0xGeHVLVG9nVUhKdmJXbHpaVHhDYkc5aVBpQjdYRzRnSUd4bGRDQnBiV0ZuWlRvZ1NXMWhaMlZDYVhSdFlYQWdmQ0IxYm1SbFptbHVaV1FnUFNCMWJtUmxabWx1WldRN1hHNGdJSFJ5ZVNCN1hHNGdJQ0FnYVcxaFoyVWdQU0JoZDJGcGRDQmpjbVZoZEdWSmJXRm5aVUpwZEcxaGNDaGtZWFJoS1R0Y2JpQWdJQ0JqYjI1emRDQjdJSEYxWVd4cGRIa2dmU0E5SUc5d2RHbHZibk03WEc0Z0lDQWdZMjl1YzNRZ2V5QjNhV1IwYUN3Z2FHVnBaMmgwSUgwZ1BTQm5aWFJTWlhOcGVtVkVhVzFsYm5OcGIyNXpLRnh1SUNBZ0lDQWdhVzFoWjJVdWQybGtkR2dzWEc0Z0lDQWdJQ0JwYldGblpTNW9aV2xuYUhRc1hHNGdJQ0FnSUNCdmNIUnBiMjV6TEZ4dUlDQWdJQ2s3WEc0Z0lDQWdMeThnVjJVZ2MzUnBiR3dnZDJGdWRDQjBhR2x6SUhSdklISjFiaUJsZG1WdUlHbG1JSFJvWlNCa2FXMWxibk5wYjI1eklHRnlaU0IwYUdVZ2MyRnRaU0J6YVhwbElITnZJSFJvWVhRZ2FYUWdZMkZ1SUdOdmJuWmxjblFnVUU1SFhHNGdJQ0FnTHk4Z2RHOGdTbEJGUnlCMGJ5QnpZWFpsSUhOd1lXTmxJR2xtSUc1bFkyVnpjMkZ5ZVZ4dUlDQWdJR052Ym5OMElHTmhiblpoY3lBOUlHZGxkRU5oYm5aaGN5aDNhV1IwYUN3Z2FHVnBaMmgwTENCM2IzSnJhVzVuUTJGdWRtRnpLVHRjYmlBZ0lDQmpiMjV6ZENCamRIZ2dQU0JqWVc1MllYTXVaMlYwUTI5dWRHVjRkQ2duTW1RbktTQmhjeUJEWVc1MllYTlNaVzVrWlhKcGJtZERiMjUwWlhoME1rUTdYRzRnSUNBZ1kzUjRMbVJ5WVhkSmJXRm5aU2hwYldGblpTd2dNQ3dnTUN3Z2QybGtkR2dzSUdobGFXZG9kQ2s3WEc0Z0lDQWdZMjl1YzNRZ2FXMWhaMlZFWVhSaElEMGdZM1I0TG1kbGRFbHRZV2RsUkdGMFlTZ3dMQ0F3TENCM2FXUjBhQ3dnYUdWcFoyaDBLVHRjYmlBZ0lDQmpiMjV6ZENCMGVYQmxJRDBnYUdGelFXeHdhR0VvYVcxaFoyVkVZWFJoS1NBL0lDZHBiV0ZuWlM5d2JtY25JRG9nSjJsdFlXZGxMMnB3Wldjbk8xeHVYRzRnSUNBZ2FXWWdLQ2RQWm1aelkzSmxaVzVEWVc1MllYTW5JR2x1SUdkc2IySmhiRlJvYVhNZ0ppWWdZMkZ1ZG1GeklHbHVjM1JoYm1ObGIyWWdUMlptYzJOeVpXVnVRMkZ1ZG1GektTQjdYRzRnSUNBZ0lDQmtZbWNvSjFKbGJtUmxjbWx1WnlCM2FYUm9JRTltWm5OamNtVmxia05oYm5aaGN5Y3BPMXh1SUNBZ0lDQWdMeThnUUhSekxXbG5ibTl5WlZ4dUlDQWdJQ0FnY21WMGRYSnVJR05oYm5aaGN5NWpiMjUyWlhKMFZHOUNiRzlpS0hzZ2RIbHdaU3dnY1hWaGJHbDBlU0I5S1R0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0dOaGJuWmhjeUJwYm5OMFlXNWpaVzltSUVoVVRVeERZVzUyWVhORmJHVnRaVzUwS1NCN1hHNGdJQ0FnSUNCa1ltY29KMDltWm5OamNtVmxia05oYm5aaGN5QnViM1FnWm05MWJtUXNJSEpsYm1SbGNtbHVaeUJwYmlCdFlXbHVJSFJvY21WaFpDY3BPMXh1SUNBZ0lDQWdjbVYwZFhKdUlHRjNZV2wwSUc1bGR5QlFjbTl0YVhObEtDaHlaWE52YkhabExDQnlaV3BsWTNRcElEMCtJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR05oYm5aaGN5NTBiMEpzYjJJb1hHNGdJQ0FnSUNBZ0lDQWdLR1Y0Y0c5eWRHVmtLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pYaHdiM0owWldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNobGVIQnZjblJsWkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb2JuVnNiQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQjBlWEJsTEZ4dUlDQWdJQ0FnSUNBZ0lIRjFZV3hwZEhrc1hHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGSmxjMmw2WlVsdFlXZGxSWEp5YjNJb2UxeHVJQ0FnSUNBZ0lDQmpZWFZ6WlRvZ2JtVjNJRVZ5Y205eUtDZERZVzUyWVhNZ2RIbHdaU0J1YjNRZ2MzVndjRzl5ZEdWa0p5a3NYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzRnSUgwZ1kyRjBZMmdnS0dWeWNqb2dkVzVyYm05M2Jpa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QlNaWE5wZW1WSmJXRm5aVVZ5Y205eUtIc2dZMkYxYzJVNklHVnljaUI5S1R0Y2JpQWdmU0JtYVc1aGJHeDVJSHRjYmlBZ0lDQnBiV0ZuWlQ4dVkyeHZjMlVvS1R0Y2JpQWdmVnh1ZlZ4dUlpd2lMeW9xWEc0Z0tpQkRiM0I1Y21sbmFIUWdNakF5TXlCQlpHOWlaVnh1SUNvZ1FXeHNJRkpwWjJoMGN5QlNaWE5sY25abFpDNWNiaUFxWEc0Z0tpQk9UMVJKUTBVNklFRmtiMkpsSUhCbGNtMXBkSE1nZVc5MUlIUnZJSFZ6WlN3Z2JXOWthV1o1TENCaGJtUWdaR2x6ZEhKcFluVjBaU0IwYUdseklHWnBiR1VnYVc1Y2JpQXFJR0ZqWTI5eVpHRnVZMlVnZDJsMGFDQjBhR1VnZEdWeWJYTWdiMllnZEdobElFRmtiMkpsSUd4cFkyVnVjMlVnWVdkeVpXVnRaVzUwSUdGalkyOXRjR0Z1ZVdsdVoxeHVJQ29nYVhRdVhHNGdLaTljYmx4dWFXMXdiM0owSUhzZ1NXNTJZV3hwWkZSb2RXMWlibUZwYkZOdmRYSmpaVVZ5Y205eUlIMGdabkp2YlNBbkxpNHZiR2xpTDJWeWNtOXlKenRjYm1sdGNHOXlkQ0IwZVhCbElIc2dVMlJyVjI5eWEyVnlVRzl2YkNCOUlHWnliMjBnSnk0dUwyeHBZaTl3YjI5c1YzSmhjSEJsY2ljN1hHNXBiWEJ2Y25RZ2V5QmxlSEJ2Y25SSmJXRm5aU0I5SUdaeWIyMGdKeTR2YVcxaFoyVW5PMXh1YVcxd2IzSjBJSFI1Y0dVZ2V5QlVhSFZ0WW01aGFXeFBjSFJwYjI1eklIMGdabkp2YlNBbkxpOXphV2R1Snp0Y2JseHVZMjl1YzNRZ1lXeHNiM2RsWkUxcGJXVlVlWEJsY3lBOUlGdGNiaUFnSjJsdFlXZGxMMnB3WldjbkxGeHVJQ0FuYVcxaFoyVXZjRzVuSnl4Y2JpQWdKMmx0WVdkbEwzZGxZbkFuTEZ4dUlDQW5hVzFoWjJVdmMzWm5LM2h0YkNjc1hHNWRPMXh1WEc1amIyNXpkQ0JpZVhCaGMzTlVhSFZ0WW01aGFXeE5hVzFsVkhsd1pYTWdQU0JiSjJsdFlXZGxMM04yWnl0NGJXd25YVHRjYmx4dVpYaHdiM0owSUdGemVXNWpJR1oxYm1OMGFXOXVJR055WldGMFpWUm9kVzFpYm1GcGJDaGNiaUFnWkdGMFlUb2dRbXh2WWl4Y2JpQWdjRzl2YkRvZ1UyUnJWMjl5YTJWeVVHOXZiQ3hjYmlBZ2IzQjBhVzl1Y3pvZ1ZHaDFiV0p1WVdsc1QzQjBhVzl1Y3l4Y2JpazZJRkJ5YjIxcGMyVThRbXh2WWlCOElHNTFiR3crSUh0Y2JpQWdhV1lnS0NGaGJHeHZkMlZrVFdsdFpWUjVjR1Z6TG1sdVkyeDFaR1Z6S0dSaGRHRXVkSGx3WlNrcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1NXNTJZV3hwWkZSb2RXMWlibUZwYkZOdmRYSmpaVVZ5Y205eUtHUmhkR0V1ZEhsd1pTazdYRzRnSUgxY2JseHVJQ0JwWmlBb1hHNGdJQ0FnSjA5bVpuTmpjbVZsYmtOaGJuWmhjeWNnYVc0Z2MyVnNaaUFtSmx4dUlDQWdJQ0ZpZVhCaGMzTlVhSFZ0WW01aGFXeE5hVzFsVkhsd1pYTXVhVzVqYkhWa1pYTW9aR0YwWVM1MGVYQmxLVnh1SUNBcElIdGNiaUFnSUNCeVpYUjFjbTRnY0c5dmJDNWxlSEJ2Y25SSmJXRm5aU2hrWVhSaExDQnZjSFJwYjI1ektUdGNiaUFnZlNCbGJITmxJR2xtSUNoY2JpQWdJQ0FuWkc5amRXMWxiblFuSUdsdUlITmxiR1lnSmlaY2JpQWdJQ0FoWW5sd1lYTnpWR2gxYldKdVlXbHNUV2x0WlZSNWNHVnpMbWx1WTJ4MVpHVnpLR1JoZEdFdWRIbHdaU2xjYmlBZ0tTQjdYRzRnSUNBZ0x5OGdUbThnVDJabWMyTnlaV1Z1UTJGdWRtRnpJR1Y0YVhOMGN5d2dkMlVuYkd3Z2JtVmxaQ0IwYnlCeWRXNGdkR2hwY3lCdmJpQjBhR1VnYldGcGJpQjBhSEpsWVdRZ0tGTmhabUZ5YVNsY2JpQWdJQ0JqYjI1emRDQmpZVzUyWVhNZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0NkallXNTJZWE1uS1R0Y2JpQWdJQ0J5WlhSMWNtNGdaWGh3YjNKMFNXMWhaMlVvWkdGMFlTd2diM0IwYVc5dWN5d2dZMkZ1ZG1GektUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ2ZWeHVmVnh1SWl3aUx5b3FYRzRnS2lCRGIzQjVjbWxuYUhRZ01qQXlNeUJCWkc5aVpWeHVJQ29nUVd4c0lGSnBaMmgwY3lCU1pYTmxjblpsWkM1Y2JpQXFYRzRnS2lCT1QxUkpRMFU2SUVGa2IySmxJSEJsY20xcGRITWdlVzkxSUhSdklIVnpaU3dnYlc5a2FXWjVMQ0JoYm1RZ1pHbHpkSEpwWW5WMFpTQjBhR2x6SUdacGJHVWdhVzVjYmlBcUlHRmpZMjl5WkdGdVkyVWdkMmwwYUNCMGFHVWdkR1Z5YlhNZ2IyWWdkR2hsSUVGa2IySmxJR3hwWTJWdWMyVWdZV2R5WldWdFpXNTBJR0ZqWTI5dGNHRnVlV2x1WjF4dUlDb2dhWFF1WEc0Z0tpOWNibHh1YVcxd2IzSjBJR1JsWW5WbklHWnliMjBnSjJSbFluVm5KenRjYm1sdGNHOXlkQ0JGZUhCcGNubE5ZWEFnWm5KdmJTQW5aWGh3YVhKNUxXMWhjQ2M3WEc1cGJYQnZjblFnYldWeVoyVWdabkp2YlNBbmJHOWtZWE5vTDIxbGNtZGxKenRjYmk4dklFWkpXRTFGT2lCWGFIa2dhWE1nWlhOc2FXNTBJR1poYVd4cGJtY2dhR1Z5WlQ5Y2JpOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQnBiWEJ2Y25RdmJtOHRkVzV5WlhOdmJIWmxaRnh1YVcxd2IzSjBJSEJOWlcxdmFYcGxJR1p5YjIwZ0ozQXRiV1Z0YjJsNlpTYzdYRzVwYlhCdmNuUWdkSGx3WlNCN0lFTXljR0ZEYjI1bWFXY2dmU0JtY205dElDY3VMaTlqTW5CaEp6dGNibWx0Y0c5eWRDQjdYRzRnSUVNeWNHRlRhV2R1YVc1blJYSnliM0lzWEc0Z0lFbHVkbUZzYVdSRGIyNW1hV2RGY25KdmNpeGNiaUFnVTJsbmJtbHVaME5oYm1ObGJHeGxaRVZ5Y205eUxGeHVJQ0JUYVdkdWFXNW5VM1J2Y21GblpVMXBjM05wYm1kRmNuSnZjaXhjYmlBZ1ZYSnNSbVYwWTJoRmNuSnZjaXhjYm4wZ1puSnZiU0FuTGk0dmJHbGlMMlZ5Y205eUp6dGNibWx0Y0c5eWRDQjBlWEJsSUhzZ1UyUnJWMjl5YTJWeVVHOXZiQ0I5SUdaeWIyMGdKeTR1TDJ4cFlpOXdiMjlzVjNKaGNIQmxjaWM3WEc1cGJYQnZjblFnZEhsd1pTQjdJRTFoYm1sbVpYTjBRblZwYkdSbGNpQjlJR1p5YjIwZ0p5NHZiV0Z1YVdabGMzUkNkV2xzWkdWeUp6dGNibWx0Y0c5eWRDQjdJRk4wYjNKaFoyVlBjSFJwYjI0c0lHeGhZbVZzUVhOVmNtd3NJSFZ3Ykc5aFpGTnBaMjVsWkUxaGJtbG1aWE4wSUgwZ1puSnZiU0FuTGk5emRHOXlZV2RsSnp0Y2JtbHRjRzl5ZENCN0lHTnlaV0YwWlZSb2RXMWlibUZwYkNCOUlHWnliMjBnSnk0dmRHaDFiV0p1WVdsc0p6dGNibWx0Y0c5eWRDQjdJRk5wWjI1U1pYTjFiSFFnZlNCbWNtOXRJQ2N1TDNkdmNtdGxjaWM3WEc1Y2JtTnZibk4wSUdSaVp5QTlJR1JsWW5WbktDZGpNbkJoT25OcFoyNDZjMmxuYmljcE8xeHVYRzVwYm5SbGNtWmhZMlVnUTJ4aGFXMXpVMmxuYm1WeVEyOXVabWxuSUh0Y2JpQWdhRzl6ZERvZ2MzUnlhVzVuTzF4dUlDQmhjR2xMWlhrNklITjBjbWx1Wnp0Y2JpQWdjbVZ6WlhKMlpWTnBlbVZEWVdOb1pVMXpPaUJ1ZFcxaVpYSWdmQ0JtWVd4elpUdGNibjFjYmx4dWFXNTBaWEptWVdObElFMWhibWxtWlhOMFUzUnZjbUZuWlVOdmJtWnBaeUI3WEc0Z0lIQnZjM1E2SUh0Y2JpQWdJQ0JvYjNOME9pQnpkSEpwYm1jN1hHNGdJQ0FnWVhCcFMyVjVPaUJ6ZEhKcGJtYzdYRzRnSUgwN1hHNGdJR2RsZERvZ2UxeHVJQ0FnSUdodmMzUTZJSE4wY21sdVp6dGNiaUFnZlR0Y2JuMWNibHh1YVc1MFpYSm1ZV05sSUVOdmJtNWxZM1JsWkVGalkyOTFiblJ6UTI5dVptbG5JSHRjYmlBZ2FHOXpkRG9nYzNSeWFXNW5PMXh1SUNCaGNHbExaWGs2SUhOMGNtbHVaenRjYm4xY2JseHVaWGh3YjNKMElHbHVkR1Z5Wm1GalpTQlRhV2R1UkdWd1pXNWtaVzVqYVdWeklIdGNiaUFnY0c5dmJEb2dVMlJyVjI5eWEyVnlVRzl2YkR0Y2JpQWdkMkZ6YlRvZ1YyVmlRWE56WlcxaWJIa3VUVzlrZFd4bE8xeHVmVnh1WEc1cGJuUmxjbVpoWTJVZ1EyRnNiRTl3ZEdsdmJuTWdlMXh1SUNCemFXZHVZV3cvT2lCQlltOXlkRk5wWjI1aGJEdGNibjFjYmx4dVpYaHdiM0owSUdsdWRHVnlabUZqWlNCVWFIVnRZbTVoYVd4UGNIUnBiMjV6SUh0Y2JpQWdiV0Y0VTJsNlpUb2diblZ0WW1WeU8xeHVJQ0J4ZFdGc2FYUjVPaUJ1ZFcxaVpYSTdYRzU5WEc1Y2JtVjRjRzl5ZENCcGJuUmxjbVpoWTJVZ1IyeHZZbUZzVTJsbmJrTnZibVpwWnlCN1hHNGdJR052Ym01bFkzUmxaRUZqWTI5MWJuUnpQem9nVUdGeWRHbGhiRHhEYjI1dVpXTjBaV1JCWTJOdmRXNTBjME52Ym1acFp6NDdYRzRnSUdOc1lXbHRjMU5wWjI1bGNqODZJRkJoY25ScFlXdzhRMnhoYVcxelUybG5ibVZ5UTI5dVptbG5QanRjYmlBZ2JXRnVhV1psYzNSVGRHOXlZV2RsUHpvZ1VHRnlkR2xoYkR4TllXNXBabVZ6ZEZOMGIzSmhaMlZEYjI1bWFXYytPMXh1SUNCemFXZHVWR2x0Wlc5MWRFMXpQem9nYm5WdFltVnlPMXh1SUNCMGFIVnRZbTVoYVd3L09pQlVhSFZ0WW01aGFXeFBjSFJwYjI1eklId2dabUZzYzJVZ2ZDQnVkV3hzTzF4dWZWeHVYRzVsZUhCdmNuUWdhVzUwWlhKbVlXTmxJRkJ5YjJkeVpYTnpJSHRjYmlBZ2RtRnNkV1U2SUc1MWJXSmxjanRjYmlBZ2MzUmhaMlU2SUhOMGNtbHVaenRjYmlBZ1pXeGhjSE5sWkRvZ2JuVnRZbVZ5TzF4dWZWeHVYRzVsZUhCdmNuUWdhVzUwWlhKbVlXTmxJRk5wWjI1RGIyNW1hV2NnZTF4dUlDQmhkWFJvVkc5clpXNDZJSE4wY21sdVp6dGNiaUFnYzNSdmNtRm5aVXh2WTJGMGFXOXVjem9nVTNSdmNtRm5aVTl3ZEdsdmJsdGRPMXh1SUNCMGFIVnRZbTVoYVd3L09pQlVhSFZ0WW01aGFXeFBjSFJwYjI1eklId2dabUZzYzJVZ2ZDQnVkV3hzTzF4dUlDQXZMeUJRWVhOeklHQm1ZV3h6WldBZ2FXWWdlVzkxSUhkdmRXeGtJR3hwYTJVZ2RHOGdjbVZ6YjJ4MlpTQjBhR1VnY0hKdmJXbHpaU0JpWldadmNtVWdkR2hsSUhWd2JHOWhaQ0JqYjIxd2JHVjBaWE11WEc0Z0lIZGhhWFJHYjNKVmNHeHZZV1EvT2lCaWIyOXNaV0Z1TzF4dUlDQXZMeUJEWVd4c1ltRmpheUIzYUdWdUlIUm9aU0J3Y205bmNtVnpjeUJ2WmlCMGFHVWdjMmxuYm1sdVp5QndjbTlqWlhOeklHTm9ZVzVuWlhNdVhHNGdJRzl1VUhKdlozSmxjM00vT2lBb2NISnZaM0psYzNNNklGQnliMmR5WlhOektTQTlQaUIyYjJsa08xeHVJQ0F2THlCRFlXeHNZbUZqYXlCM2FHVnVJSFJvWlNCemFXZHVhVzVuSUhCeWIyTmxjM01nWTI5dGNHeGxkR1Z6SUdGdVpDQmlaV1p2Y21VZ2RHaGxJSFZ3Ykc5aFpDQnpkR0Z5ZEhNdVhHNGdJRzl1VW1WemRXeDBQem9nS0hKbGMzVnNkRG9nVTJsbmJsSmxjM1ZzZENrZ1BUNGdkbTlwWkR0Y2JpQWdMeThnUTJGc2JHSmhZMnNnZDJobGJpQjBhR1VnZFhCc2IyRmtJR052YlhCc1pYUmxjeTVjYmlBZ2IyNVZjR3h2WVdSRGIyMXdiR1YwWlQ4NklDZ3BJRDArSUhadmFXUTdYRzRnSUM4dklFTmhiR3hpWVdOcklHbG1JSFJvWlNCMWNHeHZZV1FnWm1GcGJITXVYRzRnSUc5dVZYQnNiMkZrUlhKeWIzSS9PaUFvWlhKeU9pQjFibXR1YjNkdUtTQTlQaUIyYjJsa08xeHVmVnh1WEc1bGVIQnZjblFnYVc1MFpYSm1ZV05sSUVOdmJXSnBibVZrUTI5dVptbG5JSHRjYmlBZ1oyeHZZbUZzT2lCRE1uQmhRMjl1Wm1sbk8xeHVJQ0J6YVdkdU9pQlRhV2R1UTI5dVptbG5PMXh1SUNCeVpYTmxjblpsVTJsNlpUb2diblZ0WW1WeU8xeHVJQ0J5WlcxdmRHVk5ZVzVwWm1WemRGVnliRDg2SUhOMGNtbHVaenRjYm4xY2JseHVaWGh3YjNKMElHTnZibk4wSUdSbFptRjFiSFJIYkc5aVlXeERiMjVtYVdjNklFZHNiMkpoYkZOcFoyNURiMjVtYVdjZ1BTQjdYRzRnSUdOdmJtNWxZM1JsWkVGalkyOTFiblJ6T2lCN1hHNGdJQ0FnYUc5emREb2dKMmgwZEhCek9pOHZZMkZwTFdsa1pXNTBhWFI1TG1Ga2IySmxMbWx2Snl4Y2JpQWdJQ0JoY0dsTFpYazZJQ2RqWVdrdGNITXRjR3gxWjJsdUp5eGNiaUFnZlN4Y2JpQWdZMnhoYVcxelUybG5ibVZ5T2lCN1hHNGdJQ0FnYUc5emREb2dKMmgwZEhCek9pOHZZMkZwTG1Ga2IySmxMbWx2Snl4Y2JpQWdJQ0JoY0dsTFpYazZJQ2RqWVdrdFpHVnphM1J2Y0Mxb1pXeHdaWEluTEZ4dUlDQWdJSEpsYzJWeWRtVlRhWHBsUTJGamFHVk5jem9nTXpZd01DQXFJREV3TURBc1hHNGdJSDBzWEc0Z0lHMWhibWxtWlhOMFUzUnZjbUZuWlRvZ2UxeHVJQ0FnSUhCdmMzUTZJSHRjYmlBZ0lDQWdJR2h2YzNRNklDZG9kSFJ3Y3pvdkwyTmhhUzF0YzJJdVlXUnZZbVV1YVc4bkxGeHVJQ0FnSUNBZ1lYQnBTMlY1T2lBblkyRnBMV1JsYzJ0MGIzQXRhR1ZzY0dWeUp5eGNiaUFnSUNCOUxGeHVJQ0FnSUdkbGREb2dlMXh1SUNBZ0lDQWdhRzl6ZERvZ0oyaDBkSEJ6T2k4dlkyRnBMVzFoYm1sbVpYTjBjeTVoWkc5aVpTNWpiMjBuTEZ4dUlDQWdJSDBzWEc0Z0lIMHNYRzRnSUhOcFoyNVVhVzFsYjNWMFRYTTZJREV3SUNvZ01UQXdNQ3hjYmlBZ2RHaDFiV0p1WVdsc09pQjdYRzRnSUNBZ2JXRjRVMmw2WlRvZ01UQXlOQ3hjYmlBZ0lDQnhkV0ZzYVhSNU9pQTRNQ3hjYmlBZ2ZTeGNibjA3WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JrWldaaGRXeDBVMmxuYmtOdmJtWnBaem9nVTJsbmJrTnZibVpwWnlBOUlIdGNiaUFnWVhWMGFGUnZhMlZ1T2lBbkp5eGNiaUFnYzNSdmNtRm5aVXh2WTJGMGFXOXVjem9nV3lkbGJXSmxaR1JsWkNkZExGeHVmVHRjYmx4dVpYaHdiM0owSUdGemVXNWpJR1oxYm1OMGFXOXVJR1psZEdOb1VtVnpaWEoyWlZOcGVtVW9YRzRnSUdkc2IySmhiRU52Ym1acFp6b2dRekp3WVVOdmJtWnBaeXhjYmlBZ2MybG5ia052Ym1acFp6b2dVR0Z5ZEdsaGJEeFRhV2R1UTI5dVptbG5QaUFtSUZKbGNYVnBjbVZrUEZCcFkyczhVMmxuYmtOdmJtWnBaeXdnSjJGMWRHaFViMnRsYmljK1BpeGNiaWtnZTF4dUlDQmpiMjV6ZENCelpYSjJhV05sUTI5dVptbG5JRDBnWjJ4dlltRnNRMjl1Wm1sbkxtTnNZV2x0YzFOcFoyNWxjanRjYmx4dUlDQnBaaUFvSVhObGNuWnBZMlZEYjI1bWFXYy9MbWh2YzNRZ2ZId2dJWE5sY25acFkyVkRiMjVtYVdjdVlYQnBTMlY1SUh4OElDRnphV2R1UTI5dVptbG5MbUYxZEdoVWIydGxiaWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJKYm5aaGJHbGtRMjl1Wm1sblJYSnliM0lvWUdOc1lXbHRjMTl6YVdkdVpYSmdLVHRjYmlBZ2ZWeHVYRzRnSUdOdmJuTjBJSHNnYUc5emRDd2dZWEJwUzJWNUlIMGdQU0J6WlhKMmFXTmxRMjl1Wm1sbk8xeHVJQ0JqYjI1emRDQjFjbXdnUFNCZ0pIdG9iM04wZlM5emFXZHVZWFIxY21VdlltOTRYM05wZW1VdmRqRmdPMXh1SUNCamIyNXpkQ0J5WlhNZ1BTQmhkMkZwZENCbVpYUmphQ2gxY213c0lIdGNiaUFnSUNCb1pXRmtaWEp6T2lCdVpYY2dTR1ZoWkdWeWN5aDdYRzRnSUNBZ0lDQW5lQzFoY0drdGEyVjVKem9nWVhCcFMyVjVMRnh1SUNBZ0lDQWdRWFYwYUc5eWFYcGhkR2x2YmpvZ1lFSmxZWEpsY2lBa2UzTnBaMjVEYjI1bWFXY3VZWFYwYUZSdmEyVnVmV0FzWEc0Z0lDQWdmU2tzWEc0Z0lIMHBPMXh1WEc0Z0lHbG1JQ2doY21WekxtOXJLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRlZ5YkVabGRHTm9SWEp5YjNJb2RYSnNMQ0J5WlhNcE8xeHVJQ0I5WEc1Y2JpQWdZMjl1YzNRZ1pHRjBZU0E5SUdGM1lXbDBJSEpsY3k1cWMyOXVLQ2s3WEc1Y2JpQWdjbVYwZFhKdUlHUmhkR0V1WW05NFgzTnBlbVVnWVhNZ2JuVnRZbVZ5TzF4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdaMlYwVW1WelpYSjJaVk5wZW1WR2JpaG5iRzlpWVd4RGIyNW1hV2M2SUVNeWNHRkRiMjVtYVdjcElIdGNiaUFnWTI5dWMzUWdZMkZqYUdWTmN5QTlYRzRnSUNBZ1oyeHZZbUZzUTI5dVptbG5MbU5zWVdsdGMxTnBaMjVsY2o4dWNtVnpaWEoyWlZOcGVtVkRZV05vWlUxeklEOC9YRzRnSUNBZ1pHVm1ZWFZzZEVkc2IySmhiRU52Ym1acFp5NWpiR0ZwYlhOVGFXZHVaWEloTG5KbGMyVnlkbVZUYVhwbFEyRmphR1ZOY3p0Y2JpQWdhV1lnS0dOaFkyaGxUWE1nUFQwOUlFbHVabWx1YVhSNUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhCTlpXMXZhWHBsS0dabGRHTm9VbVZ6WlhKMlpWTnBlbVVwTzF4dUlDQjlJR1ZzYzJVZ2FXWWdLQ0ZqWVdOb1pVMXpLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHWmxkR05vVW1WelpYSjJaVk5wZW1VN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ1kyOXVjM1FnWTJGamFHVWdQU0J1WlhjZ1JYaHdhWEo1VFdGd0tHTmhZMmhsVFhNcE8xeHVJQ0FnSUhKbGRIVnliaUJ3VFdWdGIybDZaU2htWlhSamFGSmxjMlZ5ZG1WVGFYcGxMQ0I3SUdOaFkyaGxJSDBwTzF4dUlDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCamNtVmhkR1ZUYVdkdUtGeHVJQ0JqTW5CaFEyOXVabWxuT2lCRE1uQmhRMjl1Wm1sbkxGeHVJQ0JrWlhCbGJtUmxibU5wWlhNNklGTnBaMjVFWlhCbGJtUmxibU5wWlhNc1hHNGdJQzh2SUZCaGMzTWdZVzRnWVhWMGFDQjBiMnRsYmlCMGJ5QndjbVV0Wm1WMFkyZ2dZVzVrSUdOaFkyaGxJSFJvWlNCeVpYTmxjblpsSUhOcGVtVmNiaUFnWVhWMGFGUnZhMlZ1UHpvZ2MzUnlhVzVuTEZ4dUtTQjdYRzRnSUdOdmJuTjBJR2RzYjJKaGJFTnZibVpwWnpvZ1F6SndZVU52Ym1acFp5QTlJRzFsY21kbEtIdDlMQ0JrWldaaGRXeDBSMnh2WW1Gc1EyOXVabWxuTENCak1uQmhRMjl1Wm1sbktUdGNiaUFnWTI5dWMzUWdleUJ3YjI5c0xDQjNZWE50SUgwZ1BTQmtaWEJsYm1SbGJtTnBaWE03WEc0Z0lHTnZibk4wSUdkbGRGSmxjMlZ5ZG1WVGFYcGxJRDBnWjJWMFVtVnpaWEoyWlZOcGVtVkdiaWhuYkc5aVlXeERiMjVtYVdjcE8xeHVYRzRnSUM4dklGUnllU0IwYnlCd2NtVm1aWFJqYUNCaGJtUWdZMkZqYUdVZ2RHaGxJR0YxZEdnZ2RHOXJaVzRnZDJobGJpQnphV2R1YVc1bklHbHpJR2x1YVhScFlXeHBlbVZrWEc0Z0lHbG1JQ2hoZFhSb1ZHOXJaVzRwSUh0Y2JpQWdJQ0JuWlhSU1pYTmxjblpsVTJsNlpTaG5iRzlpWVd4RGIyNW1hV2NzSUhzZ1lYVjBhRlJ2YTJWdUlIMHBPMXh1SUNCOVhHNWNiaUFnWTI5dWMzUWdjMmxuYmtadUlEMGdZWE41Ym1NZ0tGeHVJQ0FnSUdGemMyVjBPaUJDYkc5aUxGeHVJQ0FnSUcxaGJtbG1aWE4wT2lCTllXNXBabVZ6ZEVKMWFXeGtaWElzWEc0Z0lDQWdjMmxuYmtOdmJtWnBaem9nVTJsbmJrTnZibVpwWnl4Y2JpQWdJQ0J2Y0hScGIyNXpQem9nUTJGc2JFOXdkR2x2Ym5Nc1hHNGdJQ2tnUFQ0Z2UxeHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCN1hHNGdJQ0FnSUNBZ0lITjBiM0poWjJWTWIyTmhkR2x2Ym5Nc1hHNGdJQ0FnSUNBZ0lIZGhhWFJHYjNKVmNHeHZZV1FzWEc0Z0lDQWdJQ0FnSUc5dVVISnZaM0psYzNNc1hHNGdJQ0FnSUNBZ0lHOXVVbVZ6ZFd4MExGeHVJQ0FnSUNBZ0lDQnZibFZ3Ykc5aFpFTnZiWEJzWlhSbExGeHVJQ0FnSUNBZ0lDQnZibFZ3Ykc5aFpFVnljbTl5TEZ4dUlDQWdJQ0FnZlNBOUlHMWxjbWRsS0h0OUxDQmtaV1poZFd4MFUybG5ia052Ym1acFp5d2djMmxuYmtOdmJtWnBaeWs3WEc0Z0lDQWdJQ0JrWld4bGRHVWdjMmxuYmtOdmJtWnBaeTUzWVdsMFJtOXlWWEJzYjJGa08xeHVJQ0FnSUNBZ1pHVnNaWFJsSUhOcFoyNURiMjVtYVdjdWIyNVFjbTluY21WemN6dGNiaUFnSUNBZ0lHUmxiR1YwWlNCemFXZHVRMjl1Wm1sbkxtOXVVbVZ6ZFd4ME8xeHVJQ0FnSUNBZ1pHVnNaWFJsSUhOcFoyNURiMjVtYVdjdWIyNVZjR3h2WVdSRGIyMXdiR1YwWlR0Y2JpQWdJQ0FnSUdSbGJHVjBaU0J6YVdkdVEyOXVabWxuTG05dVZYQnNiMkZrUlhKeWIzSTdYRzVjYmlBZ0lDQWdJQzh2SUZkbElHTmhiR3dnZEdocGN5QmlaV1p2Y21VZ2NuVnVibWx1WnlCaGJua2dZMkZzYkdKaFkydHpJSFJ2SUhObFpTQnBaaUJoYmlCQlltOXlkRk5wWjI1aGJDQjNZWE5jYmlBZ0lDQWdJQzh2SUhKbFkyVnBkbVZrSUdKbFptOXlaU0J0YjNacGJtY2diMjRnZEc4Z2RHaGxJRzVsZUhRZ2MzUmxjQ0J2WmlCMGFHVWdjSEp2WTJWemN5NGdTWFFuY3lCdWIzUWdkR2hsSUcxdmMzUmNiaUFnSUNBZ0lDOHZJR1ZzWldkaGJuUWdjMjlzZFhScGIyNHNJR0oxZENCMGNubHBibWNnZEc4Z2RHaHliM2NnZFhOcGJtY2dZRzl1UVdKdmNuUmdJSGRwYkd3Z2RHaHliM2NnWm5KdmJTQjBhR1VnZEc5d1hHNGdJQ0FnSUNBdkx5QnNaWFpsYkNCM2FHbGphQ0J5WlhOMWJIUnpJR2x1SUdGdUlIVnVhR0Z1Wkd4bFpDQmxjbkp2Y2k0Z1ZHaHBjeUJwY3lCMGJ5QnpkRzl3SUdGdUlHVmtaMlVnWTJGelpTQjNhR1Z5WlZ4dUlDQWdJQ0FnTHk4Z2RHaGxJR1oxYm1OMGFXOXVJR05oYmlCMGFXMWxJRzkxZENCaGJtUWdkR2hsSUhCeWIyMXBjMlVnYTJWbGNITWdaWGhsWTNWMGFXNW5JR0Z1WkNCMWNHUmhkR2x1WnlCemRHRjBkWE11WEc0Z0lDQWdJQ0F2TDF4dUlDQWdJQ0FnTHk4Z1ZFOUVUem9nVTJWbElHbG1JSFJvWlhKbEozTWdZU0JpWlhSMFpYSWdkMkY1SUdadklHUnZhVzVuSUhSb2FYTXVYRzRnSUNBZ0lDQmpiMjV6ZENCMGFISnZkMGxtUTJGdVkyVnNiR1ZrSUQwZ0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNCcFppQW9iM0IwYVc5dWN6OHVjMmxuYm1Gc1B5NWhZbTl5ZEdWa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUZOcFoyNXBibWREWVc1alpXeHNaV1JGY25KdmNpZ3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNCamIyNXpkQ0JvWVc1a2JHVlFjbTluY21WemN5QTlJQ2h3Y205bmNtVnpjem9nVUhKdlozSmxjM01wSUQwK0lIdGNiaUFnSUNBZ0lDQWdkR2h5YjNkSlprTmhibU5sYkd4bFpDZ3BPMXh1SUNBZ0lDQWdJQ0J2YmxCeWIyZHlaWE56UHk0b2NISnZaM0psYzNNcE8xeHVJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdZMjl1YzNRZ2FHRnVaR3hsVW1WemRXeDBJRDBnS0hKbGMzVnNkRG9nVTJsbmJsSmxjM1ZzZENrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0IwYUhKdmQwbG1RMkZ1WTJWc2JHVmtLQ2s3WEc0Z0lDQWdJQ0FnSUc5dVVtVnpkV3gwUHk0b2NtVnpkV3gwS1R0Y2JpQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lHbG1JQ2doYzNSdmNtRm5aVXh2WTJGMGFXOXVjeTVwYm1Oc2RXUmxjeWduWlcxaVpXUmtaV1FuS1NrZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dVMmxuYm1sdVoxTjBiM0poWjJWTmFYTnphVzVuUlhKeWIzSW9LVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnWTI5dWMzUWdjM1JoY25RZ1BTQndaWEptYjNKdFlXNWpaUzV1YjNjb0tUdGNiaUFnSUNBZ0lHTnZibk4wSUdkbGRFVnNZWEJ6WldRZ1BTQW9LU0E5UGlCd1pYSm1iM0p0WVc1alpTNXViM2NvS1NBdElITjBZWEowTzF4dUlDQWdJQ0FnYUdGdVpHeGxVSEp2WjNKbGMzTW9lMXh1SUNBZ0lDQWdJQ0IyWVd4MVpUb2dNQ3hjYmlBZ0lDQWdJQ0FnYzNSaFoyVTZJQ2RwYm1sMGFXRnNhWHBsWkNjc1hHNGdJQ0FnSUNBZ0lHVnNZWEJ6WldRNklHZGxkRVZzWVhCelpXUW9LU3hjYmlBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNCamIyNXpkQ0J5WlhObGNuWmxVMmw2WlNBOUlHRjNZV2wwSUdkbGRGSmxjMlZ5ZG1WVGFYcGxLR2RzYjJKaGJFTnZibVpwWnl3Z2MybG5ia052Ym1acFp5azdYRzRnSUNBZ0lDQmpiMjV6ZENCelpYUjBhVzVuY3pvZ1EyOXRZbWx1WldSRGIyNW1hV2NnUFNCN1hHNGdJQ0FnSUNBZ0lHZHNiMkpoYkRvZ1oyeHZZbUZzUTI5dVptbG5MRnh1SUNBZ0lDQWdJQ0J6YVdkdU9pQnphV2R1UTI5dVptbG5MRnh1SUNBZ0lDQWdJQ0J5WlhObGNuWmxVMmw2WlN4Y2JpQWdJQ0FnSUgwN1hHNGdJQ0FnSUNCamIyNXpkQ0IwYUhWdFltNWhhV3hQY0hScGIyNXpJRDFjYmlBZ0lDQWdJQ0FnZEhsd1pXOW1JSE5wWjI1RGIyNW1hV2MvTG5Sb2RXMWlibUZwYkNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2RjYmlBZ0lDQWdJQ0FnSUNBL0lITnBaMjVEYjI1bWFXY3VkR2gxYldKdVlXbHNYRzRnSUNBZ0lDQWdJQ0FnT2lCelpYUjBhVzVuY3k1bmJHOWlZV3d1ZEdoMWJXSnVZV2xzTzF4dVhHNGdJQ0FnSUNCb1lXNWtiR1ZRY205bmNtVnpjeWg3WEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUF4TUN4Y2JpQWdJQ0FnSUNBZ2MzUmhaMlU2SUNkbmIzUmZjbVZ6WlhKMlpWOXphWHBsSnl4Y2JpQWdJQ0FnSUNBZ1pXeGhjSE5sWkRvZ1oyVjBSV3hoY0hObFpDZ3BMRnh1SUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUM4dklGZGxJRzVsWldRZ2RHOGdaRzhnZEdocGN5Qm9aWEpsSUdsdWMzUmxZV1FnYjJZZ2FXNGdZR1Z0WW1Wa1FXNWtVMmxuYm1BZ2MybHVZMlVnVTJGbVlYSnBJR05oYm01dmRGeHVJQ0FnSUNBZ0x5OGdjblZ1SUhSb2FYTWdhVzRnWVNCM2IzSnJaWElnS0dGeklHOW1JRVpsWWlBeU1ESXpLVnh1SUNBZ0lDQWdZMjl1YzNRZ2RHaDFiV0p1WVdsc0lEMGdkR2gxYldKdVlXbHNUM0IwYVc5dWMxeHVJQ0FnSUNBZ0lDQS9JR0YzWVdsMElHTnlaV0YwWlZSb2RXMWlibUZwYkNoaGMzTmxkQ3dnY0c5dmJDd2dkR2gxYldKdVlXbHNUM0IwYVc5dWN5bGNiaUFnSUNBZ0lDQWdPaUJ1ZFd4c08xeHVYRzRnSUNBZ0lDQm9ZVzVrYkdWUWNtOW5jbVZ6Y3loN1hHNGdJQ0FnSUNBZ0lIWmhiSFZsT2lBek5TeGNiaUFnSUNBZ0lDQWdjM1JoWjJVNklDZGpjbVZoZEdWa1gzUm9kVzFpYm1GcGJDY3NYRzRnSUNBZ0lDQWdJR1ZzWVhCelpXUTZJR2RsZEVWc1lYQnpaV1FvS1N4Y2JpQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQnRZVzVwWm1WemRDNWpjbVZoZEdWTVlXSmxiQ2h6ZEc5eVlXZGxURzlqWVhScGIyNXpMbWx1WTJ4MVpHVnpLQ2RqYkc5MVpDY3BJRDhnSjJGa2IySmxKeUE2SUc1MWJHd3BPMXh1WEc0Z0lDQWdJQ0JwWmlBb2MzUnZjbUZuWlV4dlkyRjBhVzl1Y3k1cGJtTnNkV1JsY3lnblkyeHZkV1FuS1NrZ2UxeHVJQ0FnSUNBZ0lDQnpaWFIwYVc1bmN5NXlaVzF2ZEdWTllXNXBabVZ6ZEZWeWJDQTlJR3hoWW1Wc1FYTlZjbXdvWEc0Z0lDQWdJQ0FnSUNBZ2JXRnVhV1psYzNRdVpHVm1hVzVwZEdsdmJpNXNZV0psYkNFc1hHNGdJQ0FnSUNBZ0lDQWdjMlYwZEdsdVozTXNYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdSaVp5Z25RMkZzYkdsdVp5QmxiV0psWkVGdVpGTnBaMjRnYjI0Z2QyOXlhMlZ5SUhCdmIyd25MQ0I3WEc0Z0lDQWdJQ0FnSUdGemMyVjBMRnh1SUNBZ0lDQWdJQ0J0WVc1cFptVnpkQ3hjYmlBZ0lDQWdJQ0FnZEdoMWJXSnVZV2xzTEZ4dUlDQWdJQ0FnSUNCelpYUjBhVzVuY3l4Y2JpQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQXZMeUJKYmlCd1lYSmhiR3hsYkN3Z2QyVWdZMkZ1SUdOeVpXRjBaU0JoSUhSb2RXMWlibUZwYkNCaGJtUWdaMlYwSUdOdmJtNWxZM1JsWkNCaFkyTnZkVzUwY3lCcGJtWnZYRzRnSUNBZ0lDQmpiMjV6ZENCeVpYTjFiSFFnUFNCaGQyRnBkQ0J3YjI5c0xtVnRZbVZrUVc1a1UybG5iaWhjYmlBZ0lDQWdJQ0FnZDJGemJTeGNiaUFnSUNBZ0lDQWdZWE56WlhRc1hHNGdJQ0FnSUNBZ0lHMWhibWxtWlhOMExtUmxabWx1YVhScGIyNHNYRzRnSUNBZ0lDQWdJRzFoYm1sbVpYTjBMbWx1WjNKbFpHbGxiblJ6TEZ4dUlDQWdJQ0FnSUNCMGFIVnRZbTVoYVd3c1hHNGdJQ0FnSUNBZ0lITmxkSFJwYm1kekxGeHVJQ0FnSUNBZ0tUdGNibHh1SUNBZ0lDQWdhR0Z1Wkd4bFVISnZaM0psYzNNb2UxeHVJQ0FnSUNBZ0lDQjJZV3gxWlRvZ056VXNYRzRnSUNBZ0lDQWdJSE4wWVdkbE9pQW5aVzFpWldSZllXNWtYM05wWjI0bkxGeHVJQ0FnSUNBZ0lDQmxiR0Z3YzJWa09pQm5aWFJGYkdGd2MyVmtLQ2tzWEc0Z0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ2FHRnVaR3hsVW1WemRXeDBLSEpsYzNWc2RDazdYRzVjYmlBZ0lDQWdJR2xtSUNoemRHOXlZV2RsVEc5allYUnBiMjV6TG1sdVkyeDFaR1Z6S0NkamJHOTFaQ2NwSUNZbUlIZGhhWFJHYjNKVmNHeHZZV1FnUFQwOUlHWmhiSE5sS1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRVJ2YmlkMElIZGhhWFFnWm05eUlIUm9hWE1nZEc4Z1kyOXRjR3hsZEdVc0lHRnVaQ0J5ZFc0Z2IyNGdibVY0ZENCMGFXTnJYRzRnSUNBZ0lDQWdJSE5sZEZScGJXVnZkWFFvS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUhWd2JHOWhaRk5wWjI1bFpFMWhibWxtWlhOMEtISmxjM1ZzZEM1emFXZHVaV1JOWVc1cFptVnpkQ3dnYzJWMGRHbHVaM01wWEc0Z0lDQWdJQ0FnSUNBZ0lDQXVkR2hsYmlnb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2hoYm1Sc1pWQnliMmR5WlhOektIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ01UQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4wWVdkbE9pQW5ZMjl0Y0d4bGRHVW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzWVhCelpXUTZJR2RsZEVWc1lYQnpaV1FvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUc5dVZYQnNiMkZrUTI5dGNHeGxkR1UvTGlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUNBZ0lDQWdJQzVqWVhSamFDZ29aWEp5S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h2YmxWd2JHOWhaRVZ5Y205eUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiMjVWY0d4dllXUkZjbkp2Y2o4dUtHVnljaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ1pYSnlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSE4wYjNKaFoyVk1iMk5oZEdsdmJuTXVhVzVqYkhWa1pYTW9KMk5zYjNWa0p5a3BJSHRjYmlBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0JoZDJGcGRDQjFjR3h2WVdSVGFXZHVaV1JOWVc1cFptVnpkQ2h5WlhOMWJIUXVjMmxuYm1Wa1RXRnVhV1psYzNRc0lITmxkSFJwYm1kektUdGNiaUFnSUNBZ0lDQWdJQ0J2YmxWd2JHOWhaRU52YlhCc1pYUmxQeTRvS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pYSnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2IyNVZjR3h2WVdSRmNuSnZjajh1S0dWeWNpazdYRzRnSUNBZ0lDQWdJQ0FnZEdoeWIzY2daWEp5TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHaGhibVJzWlZCeWIyZHlaWE56S0h0Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SURFd01DeGNiaUFnSUNBZ0lDQWdjM1JoWjJVNklDZGpiMjF3YkdWMFpTY3NYRzRnSUNBZ0lDQWdJR1ZzWVhCelpXUTZJR2RsZEVWc1lYQnpaV1FvS1N4Y2JpQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4dUlDQWdJSDBnWTJGMFkyZ2dLR1Z5Y2pvZ2RXNXJibTkzYmlrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFTXljR0ZUYVdkdWFXNW5SWEp5YjNJb2V5QmpZWFZ6WlRvZ1pYSnlJSDBwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNCeVpYUjFjbTRnWVhONWJtTWdLRnh1SUNBZ0lHRnpjMlYwT2lCQ2JHOWlMRnh1SUNBZ0lHMWhibWxtWlhOME9pQk5ZVzVwWm1WemRFSjFhV3hrWlhJc1hHNGdJQ0FnYzJsbmJrTnZibVpwWnpvZ1UybG5ia052Ym1acFp5eGNiaUFnS1NBOVBpQjdYRzRnSUNBZ1kyOXVjM1FnZEdsdFpXOTFkQ0E5SUdkc2IySmhiRU52Ym1acFp5NXphV2R1VkdsdFpXOTFkRTF6TzF4dUlDQWdJR052Ym5OMElIUnBiV1Z2ZFhSVGRYQndiM0owWldRZ1BWeHVJQ0FnSUNBZ0owRmliM0owVTJsbmJtRnNKeUJwYmlCelpXeG1JQ1ltSUhSNWNHVnZaaUJCWW05eWRGTnBaMjVoYkM1MGFXMWxiM1YwSUQwOVBTQW5ablZ1WTNScGIyNG5PMXh1WEc0Z0lDQWdhV1lnS0NGMGFXMWxiM1YwVTNWd2NHOXlkR1ZrS1NCN1hHNGdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9KMEZpYjNKMFUybG5ibUZzTG5ScGJXVnZkWFFvS1NCdWIzUWdjM1Z3Y0c5eWRHVmtMQ0JrYVhOaFlteHBibWNnZEdsdFpXOTFkQ2NwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUZOaFptRnlhU0E4SURFMklHUnZaWE51SjNRZ2FHRjJaU0J6ZFhCd2IzSjBJR1p2Y2lCZ1FXSnZjblJUYVdkdVlXd3VkR2x0Wlc5MWRHQXNJR1JwYzJGaWJHVWdhV1lnZEdocGN5QnBjeUIwYUdVZ1kyRnpaVnh1SUNBZ0lHTnZibk4wSUhOcFoyNWhiQ0E5WEc0Z0lDQWdJQ0IwYVcxbGIzVjBJQ1ltSUhScGJXVnZkWFJUZFhCd2IzSjBaV1FnUHlCQlltOXlkRk5wWjI1aGJDNTBhVzFsYjNWMEtIUnBiV1Z2ZFhRcElEb2dkVzVrWldacGJtVmtPMXh1WEc0Z0lDQWdjbVYwZFhKdUlITnBaMjVHYmloaGMzTmxkQ3dnYldGdWFXWmxjM1FzSUhOcFoyNURiMjVtYVdjc0lIc2djMmxuYm1Gc0lIMHBPMXh1SUNCOU8xeHVmVnh1SWl3aWFXMXdiM0owSUhSNWNHVWdleUJKYm1keVpXUnBaVzUwSUgwZ1puSnZiU0FuUUdNeWNHRXZZV1J2WW1VdGRHOXZiR3RwZENjN1hHNXBiWEJ2Y25RZ2V5QlNaWE52ZFhKalpWTjBiM0psSUgwZ1puSnZiU0FuUUdNeWNHRXZZV1J2WW1VdGRHOXZiR3RwZENjN1hHNXBiWEJ2Y25RZ2JXRndWbUZzZFdWeklHWnliMjBnSjJ4dlpHRnphQzl0WVhCV1lXeDFaWE1uTzF4dWFXMXdiM0owSUcxbGNtZGxJR1p5YjIwZ0oyeHZaR0Z6YUM5dFpYSm5aU2M3WEc1cGJYQnZjblFnZEhsd1pTQjdJRU15Y0dGRGIyNW1hV2NnZlNCbWNtOXRJQ2N1TGk5ak1uQmhKenRjYm1sdGNHOXlkQ0I3SUVsdVozSmxaR2xsYm5SSlpHVnVkR2xtYVdWeVRXbHpjMmx1WnlCOUlHWnliMjBnSnk0dUwyeHBZaTlsY25KdmNpYzdYRzVwYlhCdmNuUWdleUJuWlhSU1pYTnZkWEpqWlZKbFptVnlaVzVqWlN3Z2JHRmlaV3hsWkZOb1lTQjlJR1p5YjIwZ0p5NHVMMnhwWWk5b1lYTm9KenRjYm1sdGNHOXlkQ0I3SUZOcFoyNUVaWEJsYm1SbGJtTnBaWE1zSUdSbFptRjFiSFJIYkc5aVlXeERiMjVtYVdjZ2ZTQm1jbTl0SUNjdUwzTnBaMjRuTzF4dWFXMXdiM0owSUhzZ1kzSmxZWFJsVkdoMWJXSnVZV2xzSUgwZ1puSnZiU0FuTGk5MGFIVnRZbTVoYVd3bk8xeHVYRzVsZUhCdmNuUWdhVzUwWlhKbVlXTmxJRk4wYjNKaFlteGxTVzVuY21Wa2FXVnVkQ0I3WEc0Z0lHbHVaM0psWkdsbGJuUTZJRWx1WjNKbFpHbGxiblE3WEc0Z0lISmxjMjkxY21ObGN6b2dVbVZqYjNKa1BITjBjbWx1Wnl3Z1FYSnlZWGxDZFdabVpYSStPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ2FXNTBaWEptWVdObElFTnlaV0YwWlVsdVozSmxaR2xsYm5SUWNtOXdjeUI3WEc0Z0lDOHZJRUpzYjJJZ1kyOXVkR0ZwYm1sdVp5QjBhR1VnYVc1bmNtVmthV1Z1ZENCa1lYUmhYRzRnSUdsdWNIVjBPaUJHYVd4bElId2dRbXh2WWp0Y2JpQWdMeThnVkdsMGJHVWdiMllnZEdobElHbHVaM0psWkdsbGJuUmNiaUFnZEdsMGJHVTZJSE4wY21sdVp6dGNiaUFnTHk4Z1VHRnpjeUJoSUdKc2IySWdhV1lnZVc5MUlIZHZkV3hrSUd4cGEyVWdkRzhnYzNWd2NHeDVJR0VnZEdoMWJXSnVZV2xzTENCdmNpQmdabUZzYzJWZ0lIUnZJR1JwYzJGaWJHVWdkR2gxYldKdVlXbHNJR2RsYm1WeVlYUnBiMjR1WEc0Z0lDOHZJRWxtSUc1dklIWmhiSFZsSUdseklIQnliM1pwWkdWa0xDQmhJSFJvZFcxaWJtRnBiQ0IzYVd4c0lHSmxJR2RsYm1WeVlYUmxaQ0JwWmlCamIyNW1hV2QxY21Wa0lIUnZJR1J2SUhOdklHZHNiMkpoYkd4NUxseHVJQ0IwYUhWdFltNWhhV3cvT2lCQ2JHOWlJSHdnWm1Gc2MyVTdYRzRnSUM4dklFRWdkVzVwY1hWbElHbGtaVzUwYVdacFpYSWdkR2hoZENCallXNGdZbVVnYzNWd2NHeHBaV1FnWm05eUlHeGhjbWRsSUdsdVozSmxaR2xsYm5SeklIUnZJR0YyYjJsa0lHaGhjMmhwYm1jZ2RHaGxJR1Z1ZEdseVpTQmliRzlpTGx4dUlDQXZMeUJVYUdseklHbHpJSEpsY1hWcGNtVmtJR1p2Y2lCZ1JtbHNaV0FnYVc1d2RYUnpJR2xtSUdCblpXNWxjbUYwWlVsa1pXNTBhV1pwWlhKSlprMXBjM05wYm1kZ0lHbHpJSE5sZENCMGJ5QmdabUZzYzJWZ0xseHVJQ0JwWkdWdWRHbG1hV1Z5UHpvZ2MzUnlhVzVuTzF4dUlDQXZMeUJKWmlCZ2RISjFaV0FzSUdGdUlFbEVJSGRwYkd3Z1ltVWdaMlZ1WlhKaGRHVmtJR1p2Y2lCcGJuQjFkSE1nYVdZZ1lXNGdhV1JsYm5ScFptbGxjaUJwY3lCdWIzUWdjSEp2ZG1sa1pXUXVJRVp2Y2lCdWIyNHRZRVpwYkdWZ0lHOWlhbVZqZEhNc1hHNGdJQzh2SUhSb2FYTWdkMmxzYkNCaVpTQmhJR2hoYzJnZ2IyWWdkR2hsSUdsdWNIVjBMaUJHYjNJZ1lFWnBiR1ZnSUc5aWFtVmpkSE1zSUhSb2FYTWdkMmxzYkNCaVpTQmhJRlZWU1VRdVhHNGdJR2RsYm1WeVlYUmxTV1JsYm5ScFptbGxja2xtVFdsemMybHVaejg2SUdKdmIyeGxZVzQ3WEc1OVhHNWNibVY0Y0c5eWRDQjBlWEJsSUVsdVozSmxaR2xsYm5STllXNWhaMlZ5SUQwZ1VtVjBkWEp1Vkhsd1pUeDBlWEJsYjJZZ1kzSmxZWFJsU1c1bmNtVmthV1Z1ZEUxaGJtRm5aWEkrTzF4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1kzSmxZWFJsU1c1bmNtVmthV1Z1ZEUxaGJtRm5aWElvWEc0Z0lHTXljR0ZEYjI1bWFXYzZJRU15Y0dGRGIyNW1hV2NzWEc0Z0lHUmxjR1Z1WkdWdVkybGxjem9nVTJsbmJrUmxjR1Z1WkdWdVkybGxjeXhjYmlrZ2UxeHVJQ0F2THlCVVQwUlBPaUJOYjNabElHbHVkRzhnYzJoaGNtVmtJR052Ym1acFp5Qm1kVzVqZEdsdmJseHVJQ0JqYjI1emRDQm5iRzlpWVd4RGIyNW1hV2M2SUVNeWNHRkRiMjVtYVdjZ1BTQnRaWEpuWlNoN2ZTd2daR1ZtWVhWc2RFZHNiMkpoYkVOdmJtWnBaeXdnWXpKd1lVTnZibVpwWnlrN1hHNGdJR052Ym5OMElIc2djRzl2YkN3Z2QyRnpiU0I5SUQwZ1pHVndaVzVrWlc1amFXVnpPMXh1WEc0Z0lISmxkSFZ5YmlCN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZHRnJaWE1nWVNCZ1JtbHNaV0FnYjNJZ1lFSnNiMkpnSUc5bUlHRnVJR0Z6YzJWMElHRnVaQ0J5WlhSMWNtNXpJR0Z1SUdsdVozSmxaR2xsYm5RZ2RHaGhkQ0JqWVc0Z1ltVWdjM1J2Y21Wa0lHOXVJSFJvWlNCaVlXTnJaVzVrTGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nU1dZZ1lTQmdSbWxzWldBZ2FYTWdjM1Z3Y0d4cFpXUXNJR2wwSUhkcGJHd2djM1J5WldGdElIUm9aU0JrWVhSaElIUnZJR0YyYjJsa0lHeHZZV1JwYm1jZ2RHaGxJR1Z1ZEdseVpTQm1hV3hsSUdsdWRHOGdiV1Z0YjNKNUxseHVJQ0FnSUNBcUlGUm9hWE1nYVhNZ2NtVmpiMjF0Wlc1a1pXUWdabTl5SUd4aGNtZGxJR1pwYkdWekxseHVJQ0FnSUNBcUwxeHVJQ0FnSUdGemVXNWpJR055WldGMFpVbHVaM0psWkdsbGJuUW9lMXh1SUNBZ0lDQWdhVzV3ZFhRc1hHNGdJQ0FnSUNCMGFYUnNaU3hjYmlBZ0lDQWdJSFJvZFcxaWJtRnBiQ3hjYmlBZ0lDQWdJR2xrWlc1MGFXWnBaWElzWEc0Z0lDQWdJQ0JuWlc1bGNtRjBaVWxrWlc1MGFXWnBaWEpKWmsxcGMzTnBibWNnUFNCMGNuVmxMRnh1SUNBZ0lIMDZJRU55WldGMFpVbHVaM0psWkdsbGJuUlFjbTl3Y3lrNklGQnliMjFwYzJVOFUzUnZjbUZpYkdWSmJtZHlaV1JwWlc1MFBpQjdYRzRnSUNBZ0lDQnNaWFFnYVc1bmNtVmthV1Z1ZERvZ1NXNW5jbVZrYVdWdWREdGNibHh1SUNBZ0lDQWdhV1lnS0dsdWNIVjBJR2x1YzNSaGJtTmxiMllnUm1sc1pTa2dlMXh1SUNBZ0lDQWdJQ0JwYm1keVpXUnBaVzUwSUQwZ1lYZGhhWFFnY0c5dmJDNWpjbVZoZEdWSmJtZHlaV1JwWlc1MFJuSnZiVVpwYkdVb2QyRnpiU3dnYVc1d2RYUXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb0lXbGtaVzUwYVdacFpYSWdKaVlnSVdsdVozSmxaR2xsYm5RdWFHRnphQ0FtSmlBaFoyVnVaWEpoZEdWSlpHVnVkR2xtYVdWeVNXWk5hWE56YVc1bktTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVsdVozSmxaR2xsYm5SSlpHVnVkR2xtYVdWeVRXbHpjMmx1WnlncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQzh2SUVkbGJtVnlZWFJsSUZWVlNVUWdkalFnYVdZZ2JtOGdhV1JsYm5ScFptbGxjaUJwY3lCd2NtOTJhV1JsWkNCMGJ5QmhkbTlwWkNCb1lYTm9hVzVuSUhSb1pTQmxiblJwY21VZ1ptbHNaVnh1SUNBZ0lDQWdJQ0JwYm1keVpXUnBaVzUwTG1oaGMyZ2dQU0JwWkdWdWRHbG1hV1Z5SUQ4L0lHbHVaM0psWkdsbGJuUXVhR0Z6YUNBL1B5Qmpjbmx3ZEc4dWNtRnVaRzl0VlZWSlJDZ3BPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1luVm1abVZ5SUQwZ1lYZGhhWFFnYVc1d2RYUXVZWEp5WVhsQ2RXWm1aWElvS1R0Y2JpQWdJQ0FnSUNBZ2FXNW5jbVZrYVdWdWRDQTlJR0YzWVdsMElIQnZiMnd1WTNKbFlYUmxTVzVuY21Wa2FXVnVkRVp5YjIxQmNuSmhlVUoxWm1abGNpaGNiaUFnSUNBZ0lDQWdJQ0IzWVhOdExGeHVJQ0FnSUNBZ0lDQWdJR0oxWm1abGNpeGNiaUFnSUNBZ0lDQWdJQ0JwYm5CMWRDNTBlWEJsTEZ4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvSVdsa1pXNTBhV1pwWlhJZ0ppWWdJV2x1WjNKbFpHbGxiblF1YUdGemFDQW1KaUFoWjJWdVpYSmhkR1ZKWkdWdWRHbG1hV1Z5U1daTmFYTnphVzVuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRWx1WjNKbFpHbGxiblJKWkdWdWRHbG1hV1Z5VFdsemMybHVaeWdwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDOHZJRWRsYm1WeVlYUmxJR2hoYzJnZ2FXWWdibThnYVdSbGJuUnBabWxsY2lCcGN5QndjbTkyYVdSbFpDQmhibVFnYm04Z2FHRnphQ0JwY3lCeVpYUjFjbTVsWkNCbWNtOXRJRkoxYzNSY2JpQWdJQ0FnSUNBZ2FXNW5jbVZrYVdWdWRDNW9ZWE5vSUQxY2JpQWdJQ0FnSUNBZ0lDQnBaR1Z1ZEdsbWFXVnlJRDgvSUdsdVozSmxaR2xsYm5RdWFHRnphQ0EvUHlBb1lYZGhhWFFnYkdGaVpXeGxaRk5vWVNocGJuQjFkQ2twTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBdkx5QlRaWEJoY21GMFpTQnlaWE52ZFhKalpYTWdiM1YwSUdsdWRHOGdkR2hsYVhJZ2IzZHVJRzlpYW1WamRDQnpieUIwYUdWNUlHTmhiaUJpWlNCemRHOXlaV1FnYlc5eVpTQmxZWE5wYkhsY2JpQWdJQ0FnSUdOdmJuTjBJSEpsYzI5MWNtTmxjeUE5SUcxaGNGWmhiSFZsY3loY2JpQWdJQ0FnSUNBZ2FXNW5jbVZrYVdWdWRDNXlaWE52ZFhKalpYTXVjbVZ6YjNWeVkyVnpJRDgvSUh0OUxGeHVJQ0FnSUNBZ0lDQW9jbVZ6YjNWeVkyVXBJRDArSUZWcGJuUTRRWEp5WVhrdVpuSnZiU2h5WlhOdmRYSmpaU2t1WW5WbVptVnlMRnh1SUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnYVc1bmNtVmthV1Z1ZEM1eVpYTnZkWEpqWlhNZ1BTQjdmU0JoY3lCU1pYTnZkWEpqWlZOMGIzSmxPMXh1SUNBZ0lDQWdhVzVuY21Wa2FXVnVkQzUwYVhSc1pTQTlJSFJwZEd4bE8xeHVYRzRnSUNBZ0lDQXZMeUJIWlc1bGNtRjBaU0JoSUhSb2RXMWlibUZwYkNCcFppQnZibVVnWkc5bGMyNG5kQ0JsZUdsemRDQnZiaUIwYUdVZ2FXNW5jbVZrYVdWdWRDZHpJRzFoYm1sbVpYTjBYRzRnSUNBZ0lDQnBaaUFvSVdsdVozSmxaR2xsYm5RdWRHaDFiV0p1WVdsc0tTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHbHpTVzFoWjJVZ1BTQnBibkIxZEM1MGVYQmxMbk4wWVhKMGMxZHBkR2dvSjJsdFlXZGxMeWNwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0IwYUhWdFltNWhhV3hDYkc5aUlEMWNiaUFnSUNBZ0lDQWdJQ0F2THlCVmMyVWdkR2gxYldKdVlXbHNJR2xtSUhCeWIzWnBaR1ZrWEc0Z0lDQWdJQ0FnSUNBZ2RHaDFiV0p1WVdsc0lIeDhYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1QzUm9aWEozYVhObElHZGxibVZ5WVhSbElHOXVaU0JwWmlCamIyNW1hV2QxY21Wa0lIUnZJR1J2SUhOdlhHNGdJQ0FnSUNBZ0lDQWdLR2RzYjJKaGJFTnZibVpwWnk1MGFIVnRZbTVoYVd3Z0ppWWdkR2gxYldKdVlXbHNJQ0U5UFNCbVlXeHpaU0FtSmlCcGMwbHRZV2RsWEc0Z0lDQWdJQ0FnSUNBZ0lDQS9JR0YzWVdsMElHTnlaV0YwWlZSb2RXMWlibUZwYkNocGJuQjFkQ3dnY0c5dmJDd2daMnh2WW1Gc1EyOXVabWxuTG5Sb2RXMWlibUZwYkNsY2JpQWdJQ0FnSUNBZ0lDQWdJRG9nYm5Wc2JDazdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFIVnRZbTVoYVd4Q2JHOWlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjM1FnY21WemIzVnlZMlZTWldZZ1BTQmhkMkZwZENCblpYUlNaWE52ZFhKalpWSmxabVZ5Wlc1alpTaGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2RXMWlibUZwYkVKc2IySXNYRzRnSUNBZ0lDQWdJQ0FnSUNCcGJtZHlaV1JwWlc1MExtbHVjM1JoYm1ObFgybGtMRnh1SUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdhVzVuY21Wa2FXVnVkQzUwYUhWdFltNWhhV3dnUFNCeVpYTnZkWEpqWlZKbFpqdGNiaUFnSUNBZ0lDQWdJQ0J5WlhOdmRYSmpaWE5iY21WemIzVnlZMlZTWldZdWFXUmxiblJwWm1sbGNsMGdQU0JoZDJGcGRDQjBhSFZ0WW01aGFXeENiRzlpTG1GeWNtRjVRblZtWm1WeUtDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJQ0FnYVc1bmNtVmthV1Z1ZEN4Y2JpQWdJQ0FnSUNBZ2NtVnpiM1Z5WTJWekxGeHVJQ0FnSUNBZ2ZUdGNiaUFnSUNCOUxGeHVJQ0I5TzF4dWZWeHVJaXdpYVcxd2IzSjBJSFI1Y0dVZ2V5Qk5ZVzVwWm1WemRDQjlJR1p5YjIwZ0owQmpNbkJoTDJGa2IySmxMWFJ2YjJ4cmFYUW5PMXh1YVcxd2IzSjBJRzFsY21kbElHWnliMjBnSjJ4dlpHRnphQzl0WlhKblpTYzdYRzVwYlhCdmNuUWdleUIyWlhKemFXOXVJSDBnWm5KdmJTQW5MaTR2TGk0dmNHRmphMkZuWlM1cWMyOXVKenRjYm1sdGNHOXlkQ0IwZVhCbElIc2dRekp3WVVOdmJtWnBaeUI5SUdaeWIyMGdKeTR1TDJNeWNHRW5PMXh1YVcxd2IzSjBJSHNnU1c1bmNtVmthV1Z1ZEVoaGMyaE5hWE56YVc1blJYSnliM0lnZlNCbWNtOXRJQ2N1TGk5c2FXSXZaWEp5YjNJbk8xeHVhVzF3YjNKMElIUjVjR1VnZXlCVGRHOXlZV0pzWlVsdVozSmxaR2xsYm5RZ2ZTQm1jbTl0SUNjdUwybHVaM0psWkdsbGJuUW5PMXh1YVcxd2IzSjBJSHNnVTJsbmJrUmxjR1Z1WkdWdVkybGxjeXdnWkdWbVlYVnNkRWRzYjJKaGJFTnZibVpwWnlCOUlHWnliMjBnSnk0dmMybG5iaWM3WEc1Y2JpOHZJRVpKV0UxRk9pQlRaV1VnYUc5M0lIZGxJR05oYmlCdFlXdGxJSFJvYVhNZ2QyOXlheUIzYVhSb2IzVjBJSFJvYVhNZ2FHRmphMXh1YVc1MFpYSm1ZV05sSUVGemMyVnlkR2x2Yms5MlpYSnlhV1JsSUh0Y2JpQWdiR0ZpWld3NklITjBjbWx1Wnp0Y2JpQWdaR0YwWVRvZ1lXNTVPMXh1ZlZ4dWFXNTBaWEptWVdObElFRnpjMlZ5ZEdsdmJrOTJaWEp5YVdSbGN5QjdYRzRnSUdGemMyVnlkR2x2Ym5NNklFRnpjMlZ5ZEdsdmJrOTJaWEp5YVdSbFcxMDdYRzU5WEc1Y2JtVjRjRzl5ZENCMGVYQmxJRTFoYm1sbVpYTjBSR1ZtYVc1cGRHbHZiaUE5SUZCaGNuUnBZV3c4WEc0Z0lFOXRhWFE4VFdGdWFXWmxjM1FzSUNkcGJtZHlaV1JwWlc1MGN5Y2dmQ0FuYzJsbmJtRjBkWEpsWDJsdVptOG5JSHdnSjNSb2RXMWlibUZwYkNjK1hHNCtJQ1pjYmlBZ1VtVnhkV2x5WldROFVHbGphenhOWVc1cFptVnpkQ3dnSjJOc1lXbHRYMmRsYm1WeVlYUnZjaWNnZkNBblptOXliV0YwSno0K0lDWmNiaUFnUVhOelpYSjBhVzl1VDNabGNuSnBaR1Z6TzF4dVhHNXBiblJsY21aaFkyVWdRblZwYkdSbGNrTnZibVpwWnlCN1hHNGdJR1JsY0dWdVpHVnVZMmxsY3pvZ1UybG5ia1JsY0dWdVpHVnVZMmxsY3p0Y2JpQWdaMnh2WW1Gc1EyOXVabWxuT2lCRE1uQmhRMjl1Wm1sbk8xeHVmVnh1WEc1bGVIQnZjblFnWTJ4aGMzTWdUV0Z1YVdabGMzUkNkV2xzWkdWeUlIdGNiaUFnYzNSaGRHbGpJSEpsY1hWcGNtVmtSbWxsYkdSeklEMGdXeWRqYkdGcGJWOW5aVzVsY21GMGIzSW5MQ0FuWm05eWJXRjBKMTA3WEc1Y2JpQWdJMlJsWm1sdWFYUnBiMjQ2SUUxaGJtbG1aWE4wUkdWbWFXNXBkR2x2Ymp0Y2JseHVJQ0FqWTI5dVptbG5PaUJDZFdsc1pHVnlRMjl1Wm1sbk8xeHVYRzRnSUNOcGJtZHlaV1JwWlc1MGN6b2dVbVZqYjNKa1BITjBjbWx1Wnl3Z1UzUnZjbUZpYkdWSmJtZHlaV1JwWlc1MFBpQTlJSHQ5TzF4dVhHNGdJSE4wWVhScFl5Qm5aWFFnWjJWdVpYSmhkRzl5S0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUJnWXpKd1lTMWhaRzlpWlMxcWN5OGtlM1psY25OcGIyNTlZRHRjYmlBZ2ZWeHVYRzRnSUdOdmJuTjBjblZqZEc5eUtHSmhjMlZFWldacGJtbDBhVzl1T2lCTllXNXBabVZ6ZEVSbFptbHVhWFJwYjI0c0lHTnZibVpwWnpvZ1FuVnBiR1JsY2tOdmJtWnBaeWtnZTF4dUlDQWdJQzh2SUVaSldFMUZPaUJtYVdkMWNtVWdiM1YwSUhkb2VTQjBhR2x6SUdOaGRYTmxjeUJoYmlCMWJtdHViM2R1SUdWeWNtOXlJR2x1SUdwaGMyMXBibVZjYmx4dUlDQWdJQzh2SUdOdmJuTjBJRzFwYzNOcGJtZEdhV1ZzWkhNZ1BTQmthV1ptWlhKbGJtTmxLRnh1SUNBZ0lDOHZJQ0FnVFdGdWFXWmxjM1JDZFdsc1pHVnlMbkpsY1hWcGNtVmtSbWxsYkdSekxGeHVJQ0FnSUM4dklDQWdUMkpxWldOMExtdGxlWE1vWW1GelpVUmxabWx1YVhScGIyNHBMRnh1SUNBZ0lDOHZJQ2s3WEc1Y2JpQWdJQ0F2THlCcFppQW9iV2x6YzJsdVowWnBaV3hrY3k1c1pXNW5kR2dwSUh0Y2JpQWdJQ0F2THlBZ0lHTnZibk4wSUdOaGRYTmxJRDBnYm1WM0lFVnljbTl5S0Z4dUlDQWdJQzh2SUNBZ0lDQmdUV2x6YzJsdVp5QnlaWEYxYVhKbFpDQm1hV1ZzWkhNNklDUjdiV2x6YzJsdVowWnBaV3hrY3k1cWIybHVLQ2NzSUNjcGZXQXNYRzRnSUNBZ0x5OGdJQ0FwTzF4dUlDQWdJQzh2SUNBZ2RHaHliM2NnYm1WM0lFMWhibWxtWlhOMFFuVnBiR1JsY2tWeWNtOXlLSHNnWTJGMWMyVWdmU2s3WEc0Z0lDQWdMeThnZlZ4dVhHNGdJQ0FnTHk4Z1FYQndaVzVrSUVwVElHeHBZbkpoY25rZ2RHOGdZMnhoYVcwZ1oyVnVaWEpoZEc5eVhHNGdJQ0FnWTI5dWMzUWdZMnhoYVcxSFpXNWxjbUYwYjNJZ1BTQmlZWE5sUkdWbWFXNXBkR2x2Ymk1amJHRnBiVjluWlc1bGNtRjBiM0l1YzNCc2FYUW9MMXhjY3lzdktUdGNiaUFnSUNCamJHRnBiVWRsYm1WeVlYUnZjaTV3ZFhOb0tFMWhibWxtWlhOMFFuVnBiR1JsY2k1blpXNWxjbUYwYjNJcE8xeHVJQ0FnSUdKaGMyVkVaV1pwYm1sMGFXOXVMbU5zWVdsdFgyZGxibVZ5WVhSdmNpQTlJR05zWVdsdFIyVnVaWEpoZEc5eUxtcHZhVzRvSnlBbktUdGNibHh1SUNBZ0lIUm9hWE11STJOdmJtWnBaeUE5SUdOdmJtWnBaenRjYmlBZ0lDQjBhR2x6TGlOa1pXWnBibWwwYVc5dUlEMGdZbUZ6WlVSbFptbHVhWFJwYjI0N1hHNGdJSDFjYmx4dUlDQndkV0pzYVdNZ1kzSmxZWFJsVEdGaVpXd29kbVZ1Wkc5eU9pQnpkSEpwYm1jZ2ZDQnVkV3hzS1NCN1hHNGdJQ0FnWTI5dWMzUWdkWEp1SUQwZ1kzSjVjSFJ2TG5KaGJtUnZiVlZWU1VRb0tUdGNibHh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdkbVZ1Wkc5eUlEMDlQU0FuYzNSeWFXNW5KeWtnZTF4dUlDQWdJQ0FnZEdocGN5NGpaR1ZtYVc1cGRHbHZiaTVzWVdKbGJDQTlJR0FrZTNabGJtUnZjaTUwYjB4dmQyVnlRMkZ6WlNncGZUb2tlM1Z5Ym4xZ08xeHVJQ0FnSUgxY2JseHVJQ0FnSUhSb2FYTXVJMlJsWm1sdWFYUnBiMjR1YkdGaVpXd2dQU0IxY200N1hHNGdJSDFjYmx4dUlDQndkV0pzYVdNZ1lYTjVibU1nWVdSa1NXNW5jbVZrYVdWdWRDaHBibkIxZERvZ1UzUnZjbUZpYkdWSmJtZHlaV1JwWlc1MEtTQjdYRzRnSUNBZ1kyOXVjM1FnZXlCcGJtZHlaV1JwWlc1MElIMGdQU0JwYm5CMWREdGNibHh1SUNBZ0lHbG1JQ2doYVc1bmNtVmthV1Z1ZEM1b1lYTm9LU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnU1c1bmNtVmthV1Z1ZEVoaGMyaE5hWE56YVc1blJYSnliM0lvYVc1bmNtVmthV1Z1ZENrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tDRjBhR2x6TGlOcGJtZHlaV1JwWlc1MGN5NW9ZWE5QZDI1UWNtOXdaWEowZVNocGJtZHlaV1JwWlc1MExtaGhjMmdwS1NCN1hHNGdJQ0FnSUNCMGFHbHpMaU5wYm1keVpXUnBaVzUwYzF0cGJtZHlaV1JwWlc1MExtaGhjMmhkSUQwZ2FXNXdkWFE3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnY0hWaWJHbGpJR2RsZENCa1pXWnBibWwwYVc5dUtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMaU5rWldacGJtbDBhVzl1TzF4dUlDQjlYRzVjYmlBZ2NIVmliR2xqSUdkbGRDQnBibWR5WldScFpXNTBjeWdwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdUMkpxWldOMExuWmhiSFZsY3loMGFHbHpMaU5wYm1keVpXUnBaVzUwY3lrN1hHNGdJSDFjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHTnlaV0YwWlUxaGJtbG1aWE4wUW5WcGJHUmxjaWhjYmlBZ1l6SndZVU52Ym1acFp6b2dRekp3WVVOdmJtWnBaeXhjYmlBZ1pHVndaVzVrWlc1amFXVnpPaUJUYVdkdVJHVndaVzVrWlc1amFXVnpMRnh1S1NCN1hHNGdJQzh2SUZSUFJFODZJRTF2ZG1VZ2FXNTBieUJ6YUdGeVpXUWdZMjl1Wm1sbklHWjFibU4wYVc5dVhHNGdJR052Ym5OMElHZHNiMkpoYkVOdmJtWnBaem9nUXpKd1lVTnZibVpwWnlBOUlHMWxjbWRsS0h0OUxDQmtaV1poZFd4MFIyeHZZbUZzUTI5dVptbG5MQ0JqTW5CaFEyOXVabWxuS1R0Y2JseHVJQ0J5WlhSMWNtNGdLR0poYzJWRVpXWnBibWwwYVc5dU9pQk5ZVzVwWm1WemRFUmxabWx1YVhScGIyNHBJRDArSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUUxaGJtbG1aWE4wUW5WcGJHUmxjaWhpWVhObFJHVm1hVzVwZEdsdmJpd2dlMXh1SUNBZ0lDQWdaR1Z3Wlc1a1pXNWphV1Z6TEZ4dUlDQWdJQ0FnWjJ4dlltRnNRMjl1Wm1sbkxGeHVJQ0FnSUgwcE8xeHVJQ0I5TzF4dWZWeHVJaXdpTHlvcVhHNGdLaUJEYjNCNWNtbG5hSFFnTWpBeU1pQkJaRzlpWlZ4dUlDb2dRV3hzSUZKcFoyaDBjeUJTWlhObGNuWmxaQzVjYmlBcVhHNGdLaUJPVDFSSlEwVTZJRUZrYjJKbElIQmxjbTFwZEhNZ2VXOTFJSFJ2SUhWelpTd2diVzlrYVdaNUxDQmhibVFnWkdsemRISnBZblYwWlNCMGFHbHpJR1pwYkdVZ2FXNWNiaUFxSUdGalkyOXlaR0Z1WTJVZ2QybDBhQ0IwYUdVZ2RHVnliWE1nYjJZZ2RHaGxJRUZrYjJKbElHeHBZMlZ1YzJVZ1lXZHlaV1Z0Wlc1MElHRmpZMjl0Y0dGdWVXbHVaMXh1SUNvZ2FYUXVYRzRnS2k5Y2JseHVhVzF3YjNKMElIc2dSRzkzYm14dllXUmxjaUI5SUdaeWIyMGdKeTR2YkdsaUwyUnZkMjVzYjJGa1pYSW5PMXh1YVcxd2IzSjBJSHNnVm1Gc2FXUmhkRzl5SUgwZ1puSnZiU0FuTGk5c2FXSXZkbUZzYVdSaGRHOXlKenRjYm1sdGNHOXlkQ0I3SUVsdWRtRnNhV1JOYVcxbFZIbHdaVVZ5Y205eUlIMGdabkp2YlNBbkxpOXNhV0l2WlhKeWIzSW5PMXh1YVcxd2IzSjBJSHRjYmlBZ1kzSmxZWFJsVkdoMWJXSnVZV2xzUm5KdmJVSnNiMklzWEc0Z0lHTnlaV0YwWlZSb2RXMWlibUZwYkVaeWIyMVZjbXdzWEc0Z0lGUm9kVzFpYm1GcGJDeGNibjBnWm5KdmJTQW5MaTkwYUhWdFltNWhhV3duTzF4dVhHNWxlSEJ2Y25RZ2RIbHdaU0JETW5CaFUyOTFjbU5sVkhsd1pTQTlJSE4wY21sdVp5QjhJRUpzYjJJZ2ZDQkdhV3hsSUh3Z1NGUk5URWx0WVdkbFJXeGxiV1Z1ZER0Y2JseHVaWGh3YjNKMElHbHVkR1Z5Wm1GalpTQlRiM1Z5WTJWTlpYUmhaR0YwWVNCN1hHNGdJQzhxS2x4dUlDQWdLaUJVYUdVZ1ptbHNaVzVoYldVZ2IyWWdkR2hsSUc5eWFXZHBibUZzSUdGemMyVjBMQ0JwWmlCcGRDQmxlR2x6ZEhNdlkyRnVJR0psSUdSbGNtbDJaV1JjYmlBZ0lDb3ZYRzRnSUdacGJHVnVZVzFsUHpvZ2MzUnlhVzVuTzF4dWZWeHVYRzVsZUhCdmNuUWdhVzUwWlhKbVlXTmxJRk52ZFhKalpTQjdYRzRnSUhSb2RXMWlibUZwYkRvZ1ZHaDFiV0p1WVdsc08xeHVJQ0J0WlhSaFpHRjBZVG9nVTI5MWNtTmxUV1YwWVdSaGRHRTdYRzRnSUhSNWNHVTZJSE4wY21sdVp6dGNiaUFnWW14dllqb2dRbXh2WWlCOElHNTFiR3c3WEc0Z0lHRnljbUY1UW5WbVptVnlPaUJDYkc5aVd5ZGhjbkpoZVVKMVptWmxjaWRkTzF4dWZWeHVYRzR2S2lwY2JpQXFJRU55WldGMFpYTWdZVzRnYjJKcVpXTjBJR052Ym5SaGFXNXBibWNnWkdGMFlTQm1iM0lnZEdobElHbHRZV2RsSUhCeWIzWnBaR1ZrSUhSdklIUm9aU0JqTW5CaElHOWlhbVZqZEM1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnWkc5M2JteHZZV1JsY2lCRWIzZHViRzloWkdWeUlHbHVjM1JoYm1ObElIVnpaV1FnZEc4Z2FXNXpjR1ZqZEM5a2IzZHViRzloWkNCcGJXRm5aWE1nWm5KdmJTQmhJRlZTVEZ4dUlDb2dRSEJoY21GdElHbHVjSFYwSUVsdWNIVjBJSEJ5YjNacFpHVmtJSFJ2SUhSb1pTQmpNbkJoSUc5aWFtVmpkRnh1SUNvZ1FIQmhjbUZ0SUcxbGRHRmtZWFJoSUVGdWVTQmhaR1JwZEdsdmJtRnNJRzFsZEdGa1lYUmhJR1p2Y2lCMGFHVWdjbVZtWlhKbGJtTmxaQ0JwYldGblpWeHVJQ292WEc1bGVIQnZjblFnWVhONWJtTWdablZ1WTNScGIyNGdZM0psWVhSbFUyOTFjbU5sS0Z4dUlDQmtiM2R1Ykc5aFpHVnlPaUJFYjNkdWJHOWhaR1Z5TEZ4dUlDQnBibkIxZERvZ1F6SndZVk52ZFhKalpWUjVjR1VzWEc0Z0lHMWxkR0ZrWVhSaFB6b2dVMjkxY21ObFRXVjBZV1JoZEdFc1hHNHBPaUJRY205dGFYTmxQRk52ZFhKalpUNGdlMXh1SUNCamIyNXpkQ0I3SUdKc2IySXNJRzFsZEdGa1lYUmhPaUJwYm5CMWRFMWxkR0ZrWVhSaElIMGdQU0JoZDJGcGRDQm5aWFJFWVhSaFJuSnZiVWx1Y0hWMEtGeHVJQ0FnSUdSdmQyNXNiMkZrWlhJc1hHNGdJQ0FnYVc1d2RYUXNYRzRnSUNBZ2JXVjBZV1JoZEdFZ1B6OGdlMzBzWEc0Z0lDazdYRzVjYmlBZ2FXWWdLQ0ZpYkc5aUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUhSb2RXMWlibUZwYkRvZ1kzSmxZWFJsVkdoMWJXSnVZV2xzUm5KdmJWVnliQ2hwYm5CMWRDQmhjeUJ6ZEhKcGJtY3BMRnh1SUNBZ0lDQWdiV1YwWVdSaGRHRTZJSHNnTGk0dWFXNXdkWFJOWlhSaFpHRjBZU3dnTGk0dWJXVjBZV1JoZEdFZ2ZTeGNiaUFnSUNBZ0lIUjVjR1U2SUNjbkxGeHVJQ0FnSUNBZ1lteHZZam9nYm5Wc2JDeGNiaUFnSUNBZ0lHRnljbUY1UW5WbVptVnlPaUJoYzNsdVl5QW9LU0E5UGlCdVpYY2dRWEp5WVhsQ2RXWm1aWElvTUNrc1hHNGdJQ0FnZlR0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2doVm1Gc2FXUmhkRzl5TG1selZtRnNhV1JOYVcxbFZIbHdaU2hpYkc5aUxuUjVjR1VwS1Z4dUlDQWdJSFJvY205M0lHNWxkeUJKYm5aaGJHbGtUV2x0WlZSNWNHVkZjbkp2Y2loaWJHOWlMblI1Y0dVcE8xeHVYRzRnSUhKbGRIVnliaUI3WEc0Z0lDQWdkR2gxYldKdVlXbHNPaUJqY21WaGRHVlVhSFZ0WW01aGFXeEdjbTl0UW14dllpaGliRzlpTENCaWJHOWlMblI1Y0dVcExGeHVJQ0FnSUcxbGRHRmtZWFJoT2lCN0lDNHVMbWx1Y0hWMFRXVjBZV1JoZEdFc0lDNHVMbTFsZEdGa1lYUmhJSDBzWEc0Z0lDQWdkSGx3WlRvZ1lteHZZaTUwZVhCbExGeHVJQ0FnSUdKc2IySTZJR0pzYjJJc1hHNGdJQ0FnWVhKeVlYbENkV1ptWlhJNklDZ3BJRDArSUdKc2IySXVZWEp5WVhsQ2RXWm1aWElvS1N4Y2JpQWdmVHRjYm4xY2JseHVhVzUwWlhKbVlXTmxJRWx1Y0hWMFJHRjBZU0I3WEc0Z0lHSnNiMkk2SUVKc2IySWdmQ0J1ZFd4c08xeHVJQ0J0WlhSaFpHRjBZVG9nVTI5MWNtTmxUV1YwWVdSaGRHRTdYRzU5WEc1Y2JtRnplVzVqSUdaMWJtTjBhVzl1SUdkbGRFUmhkR0ZHY205dFNXNXdkWFFvWEc0Z0lHUnZkMjVzYjJGa1pYSTZJRVJ2ZDI1c2IyRmtaWElzWEc0Z0lHbHVjSFYwT2lCRE1uQmhVMjkxY21ObFZIbHdaU3hjYmlBZ2JXVjBZV1JoZEdFNklGTnZkWEpqWlUxbGRHRmtZWFJoTEZ4dUtUb2dVSEp2YldselpUeEpibkIxZEVSaGRHRStJSHRjYmlBZ2FXWWdLR2x1Y0hWMElHbHVjM1JoYm1ObGIyWWdRbXh2WWlrZ2UxeHVJQ0FnSUM4dklFaGhibVJzWlNCbWFXeGxMMkpzYjJJZ2FXNXdkWFJ6WEc0Z0lDQWdZMjl1YzNRZ1ptbHVZV3hOWlhSaFpHRjBZU0E5SUh0Y2JpQWdJQ0FnSUM0dUxtMWxkR0ZrWVhSaExGeHVJQ0FnSUNBZ1ptbHNaVzVoYldVNklHbHVjSFYwSUdsdWMzUmhibU5sYjJZZ1JtbHNaU0EvSUdsdWNIVjBMbTVoYldVZ09pQjFibVJsWm1sdVpXUXNYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNCaWJHOWlPaUJwYm5CMWRDeGNiaUFnSUNBZ0lHMWxkR0ZrWVhSaE9pQm1hVzVoYkUxbGRHRmtZWFJoTEZ4dUlDQWdJSDA3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnTHk4Z2FHRnVaR3hsSUhOMGNtbHVaeUF2SUVoVVRVeEpiV0ZuWlVWc1pXMWxiblFnYVc1d2RYUnpYRzRnSUNBZ1kyOXVjM1FnZFhKc0lEMGdkSGx3Wlc5bUlHbHVjSFYwSUQwOVBTQW5jM1J5YVc1bkp5QS9JR2x1Y0hWMElEb2dhVzV3ZFhRdWMzSmpPMXh1SUNBZ0lHTnZibk4wSUdKc2IySWdQU0JoZDJGcGRDQmtiM2R1Ykc5aFpHVnlMbWx1YzNCbFkzUW9kWEpzS1R0Y2JseHVJQ0FnSUd4bGRDQndZWFJvSUQwZ2RYSnNPMXh1SUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0JqYjI1emRDQjdJSEJoZEdodVlXMWxJSDBnUFNCdVpYY2dWVkpNS0hWeWJDazdYRzRnSUNBZ0lDQndZWFJvSUQwZ2NHRjBhRzVoYldVN1hHNGdJQ0FnZlNCallYUmphQ0FvWlhKeUtTQjdmVnh1SUNBZ0lHTnZibk4wSUdacGJHVnVZVzFsSUQwZ2NHRjBhQzV6Y0d4cGRDZ25MeWNwTG5CdmNDZ3BJRDgvSUNjbk8xeHVYRzRnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUdKc2IySXNYRzRnSUNBZ0lDQnRaWFJoWkdGMFlUb2dleUF1TGk1dFpYUmhaR0YwWVN3Z1ptbHNaVzVoYldVZ2ZTeGNiaUFnSUNCOU8xeHVJQ0I5WEc1OVhHNGlMQ0l2S2lwY2JpQXFJRU52Y0hseWFXZG9kQ0F5TURJeUlFRmtiMkpsWEc0Z0tpQkJiR3dnVW1sbmFIUnpJRkpsYzJWeWRtVmtMbHh1SUNwY2JpQXFJRTVQVkVsRFJUb2dRV1J2WW1VZ2NHVnliV2wwY3lCNWIzVWdkRzhnZFhObExDQnRiMlJwWm5rc0lHRnVaQ0JrYVhOMGNtbGlkWFJsSUhSb2FYTWdabWxzWlNCcGJseHVJQ29nWVdOamIzSmtZVzVqWlNCM2FYUm9JSFJvWlNCMFpYSnRjeUJ2WmlCMGFHVWdRV1J2WW1VZ2JHbGpaVzV6WlNCaFozSmxaVzFsYm5RZ1lXTmpiMjF3WVc1NWFXNW5YRzRnS2lCcGRDNWNiaUFxTDF4dVhHNXBiWEJ2Y25RZ2V5QlViMjlzYTJsMFJYSnliM0lnZlNCbWNtOXRJQ2RBWXpKd1lTOWhaRzlpWlMxMGIyOXNhMmwwSnp0Y2JtbHRjRzl5ZENCa1pXSjFaeUJtY205dElDZGtaV0oxWnljN1hHNXBiWEJ2Y25RZ2V5Qmxibk4xY21WRGIyMXdZWFJwWW1sc2FYUjVJSDBnWm5KdmJTQW5MaTlzYVdJdlluSnZkM05sY2ljN1hHNXBiWEJ2Y25RZ2V5QkViM2R1Ykc5aFpHVnlMQ0JFYjNkdWJHOWhaR1Z5VDNCMGFXOXVjeUI5SUdaeWIyMGdKeTR2YkdsaUwyUnZkMjVzYjJGa1pYSW5PMXh1YVcxd2IzSjBJSHNnUXpKd1lWTmpZVzV1YVc1blJYSnliM0lnZlNCbWNtOXRJQ2N1TDJ4cFlpOWxjbkp2Y2ljN1hHNXBiWEJ2Y25RZ2V5QlhiM0pyWlhKUWIyOXNRMjl1Wm1sbklIMGdabkp2YlNBbkxpOXNhV0l2Y0c5dmJDOTNiM0pyWlhKUWIyOXNKenRjYm1sdGNHOXlkQ0I3SUZOa2ExZHZjbXRsY2xCdmIyd3NJR055WldGMFpWQnZiMnhYY21Gd2NHVnlJSDBnWm5KdmJTQW5MaTlzYVdJdmNHOXZiRmR5WVhCd1pYSW5PMXh1YVcxd2IzSjBJSHNnWm1WMFkyaFhZWE50SUgwZ1puSnZiU0FuTGk5c2FXSXZkMkZ6YlNjN1hHNXBiWEJ2Y25RZ2V5Qk5ZVzVwWm1WemRGTjBiM0psTENCamNtVmhkR1ZOWVc1cFptVnpkRk4wYjNKbElIMGdabkp2YlNBbkxpOXRZVzVwWm1WemRGTjBiM0psSnp0Y2JtbHRjRzl5ZENCN0lFbHVaM0psWkdsbGJuUk5ZVzVoWjJWeUxDQmpjbVZoZEdWSmJtZHlaV1JwWlc1MFRXRnVZV2RsY2lCOUlHWnliMjBnSnk0dmMybG5iaTlwYm1keVpXUnBaVzUwSnp0Y2JtbHRjRzl5ZENCN0lHTnlaV0YwWlUxaGJtbG1aWE4wUW5WcGJHUmxjaUI5SUdaeWIyMGdKeTR2YzJsbmJpOXRZVzVwWm1WemRFSjFhV3hrWlhJbk8xeHVhVzF3YjNKMElIUjVjR1VnZXlCSGJHOWlZV3hUYVdkdVEyOXVabWxuSUgwZ1puSnZiU0FuTGk5emFXZHVMM05wWjI0bk8xeHVhVzF3YjNKMElIc2dZM0psWVhSbFUybG5iaUI5SUdaeWIyMGdKeTR2YzJsbmJpOXphV2R1Snp0Y2JtbHRjRzl5ZENCN0lFTXljR0ZUYjNWeVkyVlVlWEJsTENCVGIzVnlZMlVzSUdOeVpXRjBaVk52ZFhKalpTQjlJR1p5YjIwZ0p5NHZjMjkxY21ObEp6dGNibHh1WTI5dWMzUWdaR0puSUQwZ1pHVmlkV2NvSjJNeWNHRW5LVHRjYm1OdmJuTjBJR1JpWjFSaGMyc2dQU0JrWldKMVp5Z25Zekp3WVRwMFlYTnJKeWs3WEc1Y2JpOHZJRUJVVDBSUE9pQnphRzkxYkdRZ2QyRnpiVk55WXk5M2IzSnJaWEpUY21NZ1ltVWdiM0IwYVc5dVlXd2dhR1Z5WlNCM0x5QmhiaUJsY25KdmNpQmhkQ0J5ZFc1MGFXMWxJR2xtSUc1dmRDQndjbTkyYVdSbFpEOWNibWx1ZEdWeVptRmpaU0JDWVhObFF6SndZVU52Ym1acFp5QjdYRzRnSUM4cUtseHVJQ0FnS2lCVWFHVWdWVkpNSUc5bUlIUm9aU0JYWldKQmMzTmxiV0pzZVNCaWFXNWhjbmtnYjNJZ1lTQmpiMjF3YVd4bFpDQlhaV0pCYzNObGJXSnNlU0J0YjJSMWJHVmNiaUFnSUNvdlhHNGdJSGRoYzIxVGNtTTZJRmRsWWtGemMyVnRZbXg1TGsxdlpIVnNaU0I4SUhOMGNtbHVaenRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dWR2hsSUZWU1RDQnZaaUIwYUdVZ2QyVmlJSGR2Y210bGNpQktZWFpoVTJOeWFYQjBJR1pwYkdWY2JpQWdJQ292WEc0Z0lIZHZjbXRsY2xOeVl6b2djM1J5YVc1bk8xeHVYRzRnSUM4cUtseHVJQ0FnS2lCR1lXeHNZbUZqYXlCd1lYUm9JSFJ2SUhkdmNtdGxjaUJ6WTNKcGNIUWdabTl5SUZOaFptRnlhU0E4SURFMkxqUWdjMjhnZDJVZ1kyRnVJR3h2WVdRZ2FYUWdZWE1nWVNCa2VXNWhiV2xqSUdsdGNHOXlkQ0FvUlZOTktWeHVJQ0FnS2k5Y2JpQWdabUZzYkdKaFkydFhiM0pyWlhKVGNtTS9PaUJ6ZEhKcGJtYzdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFOXdkR2x2Ym5NZ1ptOXlJSFJvWlNCM1pXSWdkMjl5YTJWeUlIQnZiMnhjYmlBZ0lDb3ZYRzRnSUhCdmIyeFBjSFJwYjI1elB6b2dVR0Z5ZEdsaGJEeFhiM0pyWlhKUWIyOXNRMjl1Wm1sblBqdGNibHh1SUNBdktpcGNiaUFnSUNvZ1QzQjBhVzl1Y3lCbWIzSWdkR2hsSUdGemMyVjBJR1J2ZDI1c2IyRmtaWEpjYmlBZ0lDb3ZYRzRnSUdSdmQyNXNiMkZrWlhKUGNIUnBiMjV6UHpvZ1VHRnlkR2xoYkR4RWIzZHViRzloWkdWeVQzQjBhVzl1Y3o0N1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVKNUlHUmxabUYxYkhRc0lIUm9aU0JUUkVzZ2QybHNiQ0JtWlhSamFDQmpiRzkxWkMxemRHOXlaV1FnS0hKbGJXOTBaU2tnYldGdWFXWmxjM1J6TGlCVFpYUWdkR2hwY3lCMGJ5Qm1ZV3h6WlNCMGJ5QmthWE5oWW14bElIUm9hWE1nWW1Wb1lYWnBiM0l1WEc0Z0lDQXFMMXh1SUNCbVpYUmphRkpsYlc5MFpVMWhibWxtWlhOMGN6ODZJR0p2YjJ4bFlXNDdYRzU5WEc1Y2JtVjRjRzl5ZENCMGVYQmxJRU15Y0dGRGIyNW1hV2NnUFNCQ1lYTmxRekp3WVVOdmJtWnBaeUFtSUVkc2IySmhiRk5wWjI1RGIyNW1hV2M3WEc1Y2JpOHFLbHh1SUNvZ1RXRnBiaUJwYm5SbGNtWmhZMlVnWm05eUlISmxZV1JwYm1jZ1l6SndZU0JrWVhSaElHTnZiblJoYVc1bFpDQjNhWFJvYVc0Z1lXNGdZWE56WlhRdVhHNGdLaTljYm1WNGNHOXlkQ0JwYm5SbGNtWmhZMlVnUXpKd1lTQjdYRzRnSUM4cUtseHVJQ0FnS2lCUWNtOWpaWE56WlhNZ2FXMWhaMlVnWkdGMFlTQm1jbTl0SUdFZ1lFSnNiMkpnSUdGeklHbHVjSFYwWEc0Z0lDQXFJRUJ3WVhKaGJTQmliRzlpSUMwZ1ZHaGxJR0pwYm1GeWVTQmtZWFJoSUc5bUlIUm9aU0JwYldGblpWeHVJQ0FnS2k5Y2JpQWdjbVZoWkNoaWJHOWlPaUJDYkc5aUtUb2dVSEp2YldselpUeERNbkJoVW1WaFpGSmxjM1ZzZEQ0N1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUZCeWIyTmxjM05sY3lCcGJXRm5aU0JrWVhSaElHWnliMjBnWVNCZ1JtbHNaV0FnWVhNZ2FXNXdkWFF1SUZWelpXWjFiQ0JtYjNJZ1ptbHNaU0IxY0d4dllXUnpMMlJ5WVdjdFlXNWtMV1J5YjNBdVhHNGdJQ0FxSUVCd1lYSmhiU0JtYVd4bElDMGdWR2hsSUdKcGJtRnllU0JrWVhSaElHOW1JSFJvWlNCcGJXRm5aVnh1SUNBZ0tpOWNiaUFnY21WaFpDaG1hV3hsT2lCR2FXeGxLVG9nVUhKdmJXbHpaVHhETW5CaFVtVmhaRkpsYzNWc2RENDdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGQnliMk5sYzNObGN5QnBiV0ZuWlNCa1lYUmhJR1p5YjIwZ1lTQlZVa3hjYmlBZ0lDcGNiaUFnSUNvZ1FISmxiV0Z5YTNOY2JpQWdJQ29nVG05MFpUb2dWR2hsSUdacGJHVWdjbVZtWlhKbGJtTmxaQ0JpZVNCMGFHVWdWVkpNSUcxMWMzUWdaV2wwYUdWeUlHSmxJR2hoZG1VZ2RHaGxJSE5oYldWY2JpQWdJQ29nZTBCc2FXNXJJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbTF2ZW1sc2JHRXViM0puTDJWdUxWVlRMMlJ2WTNNdlYyVmlMMU5sWTNWeWFYUjVMMU5oYldVdGIzSnBaMmx1WDNCdmJHbGplU0I4SUc5eWFXZHBibjFjYmlBZ0lDb2dZWE1nZEdobElITnBkR1VnY21WbVpYSmxibU5wYm1jZ2RHaHBjeUJqYjJSbExDQnZjaUJwZENCdVpXVmtjeUIwYnlCb1lYWmxYRzRnSUNBcUlIdEFiR2x1YXlCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1dGIzcHBiR3hoTG05eVp5OWxiaTFWVXk5a2IyTnpMMWRsWWk5SVZGUlFMME5QVWxNZ2ZDQkRUMUpUZlNCbGJtRmliR1ZrSUc5dUlIUm9aU0J5WlhOdmRYSmpaUzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUhWeWJDQXRJRlJvWlNCVlVrd2diMllnZEdobElHbHRZV2RsSUhSdklIQnliMk5sYzNOY2JpQWdJQ292WEc0Z0lISmxZV1FvZFhKc09pQnpkSEpwYm1jcE9pQlFjbTl0YVhObFBFTXljR0ZTWldGa1VtVnpkV3gwUGp0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVUhKdlkyVnpjMlZ6SUdGdUlHbHRZV2RsSUdaeWIyMGdZVzRnU0ZSTlRDQnBiV0ZuWlNCbGJHVnRaVzUwSUNoZ1BHbHRaeUF2UG1BcExseHVJQ0FnS2x4dUlDQWdLaUJBY21WdFlYSnJjMXh1SUNBZ0tpQlVhR2x6SUdseklIVnpaV1oxYkNCcFppQjViM1VnZDJGdWRDQjBieUJ3Y205alpYTnpJSFJvWlNCcGJXRm5aU0J5WlhSMWNtNWxaQ0JpZVNCaElHQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5WUNCallXeHNYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0JsYkdWdFpXNTBJQzBnUkU5TklHVnNaVzFsYm5RZ2IyWWdkR2hsSUdsdFlXZGxJSFJ2SUhCeWIyTmxjM05jYmlBZ0lDb3ZYRzRnSUhKbFlXUW9aV3hsYldWdWREb2dTRlJOVEVsdFlXZGxSV3hsYldWdWRDazZJRkJ5YjIxcGMyVThRekp3WVZKbFlXUlNaWE4xYkhRK08xeHVYRzRnSUM4cUtseHVJQ0FnS2lCUWNtOWpaWE56SUdGdUlHbHRZV2RsSUdkcGRtVnVJR0VnZG1Gc2FXUWdhVzV3ZFhRdUlGTjFjSEJ2Y25SbFpDQjBlWEJsY3pwY2JpQWdJQ29nTFNCQ2JHOWlYRzRnSUNBcUlDMGdSbWxzWlZ4dUlDQWdLaUF0SUVsdFlXZGxJRlZTVEZ4dUlDQWdLaUF0SUVoVVRVd2dhVzFoWjJVZ1pXeGxiV1Z1ZENBb1lEeHBiV2NnTHo1Z0tWeHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdhVzV3ZFhRZ0xTQkpiV0ZuWlNCMGJ5QndjbTlqWlhOelhHNGdJQ0FxTDF4dUlDQnlaV0ZrS0dsdWNIVjBPaUJETW5CaFUyOTFjbU5sVkhsd1pTazZJRkJ5YjIxcGMyVThRekp3WVZKbFlXUlNaWE4xYkhRK08xeHVYRzRnSUM4cUtseHVJQ0FnS2lCRGIyNTJaVzVwWlc1alpTQm1kVzVqZEdsdmJpQjBieUJ3Y205alpYTnpJRzExYkhScGNHeGxJR2x0WVdkbGN5QmhkQ0J2Ym1ObFhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQnBibkIxZEhNZ0xTQkJjbkpoZVNCdlppQnBibkIxZEhNZ2RHOGdjR0Z6Y3lCMGJ5QmdjSEp2WTJWemMwbHRZV2RsWUZ4dUlDQWdLaTljYmlBZ2NtVmhaRUZzYkNocGJuQjFkSE02SUVNeWNHRlRiM1Z5WTJWVWVYQmxXMTBwT2lCUWNtOXRhWE5sUEVNeWNHRlNaV0ZrVW1WemRXeDBXMTArTzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWldGa2N5QmhibVFnZG1Gc2FXUmhkR1Z6SUdFZ2NtRjNJRzFoYm1sbVpYTjBJSE4wYjNKbElHSjFabVpsY2x4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2JXRnVhV1psYzNSQ2RXWm1aWElnUW5WbVptVnlJRzltSUUxSlRVVWdkSGx3WlNCZ1lYQndiR2xqWVhScGIyNHZlQzFqTW5CaExXMWhibWxtWlhOMExYTjBiM0psWUZ4dUlDQWdLaUJBY0dGeVlXMGdhVzV3ZFhRZ1FteHZZaUJ2WmlCMGFHVWdZWE56WlhRZ2RHaHBjeUJ0WVc1cFptVnpkQ0IwYUdGMElIUm9hWE1nWW1Wc2IyNW5jeUIwYnlCemJ5QjNaU0JqWVc0Z2NHVnlabTl5YlNCMllXeHBaR0YwYVc5dVhHNGdJQ0FxTDF4dUlDQnlaV0ZrUVc1a1ZtRnNhV1JoZEdWTllXNXBabVZ6ZEVSaGRHRW9YRzRnSUNBZ2JXRnVhV1psYzNSQ2RXWm1aWEk2SUVGeWNtRjVRblZtWm1WeUxGeHVJQ0FnSUdsdWNIVjBPaUJDYkc5aUxGeHVJQ0FwT2lCUWNtOXRhWE5sUEVNeWNHRlNaV0ZrVW1WemRXeDBQanRjYmx4dUlDQnpZMkZ1S0dsdWNIVjBPaUJETW5CaFUyOTFjbU5sVkhsd1pTazZJRkJ5YjIxcGMyVThRekp3WVZOallXNVNaWE4xYkhRK08xeHVYRzRnSUhOallXNVZjbXdvZFhKc09pQnpkSEpwYm1jcE9pQlFjbTl0YVhObFBFTXljR0ZUWTJGdVVtVnpkV3gwUGp0Y2JseHVJQ0J6YVdkdU9pQlNaWFIxY201VWVYQmxQSFI1Y0dWdlppQmpjbVZoZEdWVGFXZHVQanRjYmx4dUlDQmpjbVZoZEdWTllXNXBabVZ6ZERvZ1VtVjBkWEp1Vkhsd1pUeDBlWEJsYjJZZ1kzSmxZWFJsVFdGdWFXWmxjM1JDZFdsc1pHVnlQanRjYmx4dUlDQmpjbVZoZEdWSmJtZHlaV1JwWlc1ME9pQkpibWR5WldScFpXNTBUV0Z1WVdkbGNsc25ZM0psWVhSbFNXNW5jbVZrYVdWdWRDZGRPMXh1WEc0Z0lGOXdiMjlzT2lCVFpHdFhiM0pyWlhKUWIyOXNPMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkVhWE53YjNObGNpQm1kVzVqZEdsdmJpQjBieUJqYkdWaGJpQjFjQ0IwYUdVZ2RXNWtaWEpzZVdsdVp5QjNiM0pyWlhJZ2NHOXZiQ0JoYm1RZ1lXNTVJRzkwYUdWeUlHUnBjM0J2YzJGaWJHVWdjbVZ6YjNWeVkyVnpYRzRnSUNBcUwxeHVJQ0JrYVhOd2IzTmxPaUFvS1NBOVBpQjJiMmxrTzF4dWZWeHVYRzVsZUhCdmNuUWdhVzUwWlhKbVlXTmxJRU15Y0dGVFkyRnVVbVZ6ZFd4MElIdGNiaUFnTHlvcVhHNGdJQ0FxSUZkb1pYUm9aWElnYjNJZ2JtOTBJR0VnUXpKUVFTQnRZWEpyWlhJZ2FHRnpJR0psWlc0Z1ptOTFibVFnYVc0Z2RHaGxJR2x0WVdkbFhHNGdJQ0FxTDF4dUlDQm1iM1Z1WkRvZ1ltOXZiR1ZoYmp0Y2JpQWdMeW9xWEc0Z0lDQXFJRmRvWlhKbElHbHVJSFJvWlNCbWFXeGxJSFJvWlNCRE1sQkJJRzFoY210bGNpQm9ZWE1nWW1WbGJpQm1iM1Z1WkZ4dUlDQWdLaTljYmlBZ2IyWm1jMlYwUHpvZ2JuVnRZbVZ5TzF4dWZWeHVYRzVsZUhCdmNuUWdhVzUwWlhKbVlXTmxJRU15Y0dGU1pXRmtVbVZ6ZFd4MElIdGNiaUFnTHlvcVhHNGdJQ0FxSUUxaGJtbG1aWE4wSUhOMGIzSmxJR052Ym5SaGFXNXBibWNnWVd4c0lHTXljR0VnYldWMFlXUmhkR0VnWVhOemIyTnBZWFJsWkNCM2FYUm9JSFJvWlNCcGJXRm5aVnh1SUNBZ0tpOWNiaUFnYldGdWFXWmxjM1JUZEc5eVpUb2dUV0Z1YVdabGMzUlRkRzl5WlNCOElHNTFiR3c3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRk52ZFhKalpTQmhjM05sZENCd2NtOTJhV1JsWkNCMGJ5QmdZekp3WVM1eVpXRmtLQ2xnWEc0Z0lDQXFMMXh1SUNCemIzVnlZMlU2SUZOdmRYSmpaVHRjYm4xY2JseHVMeW9xWEc0Z0tpQkRjbVZoZEdWeklHRWdZekp3WVNCdlltcGxZM1FnZEdoaGRDQmpZVzRnWW1VZ2RYTmxaQ0IwYnlCeVpXRmtJR015Y0dFZ2JXVjBZV1JoZEdFZ1puSnZiU0JoYmlCcGJXRm5aUzVjYmlBcVhHNGdLaUJBY0dGeVlXMGdZMjl1Wm1sbklDMGdRMjl1Wm1sbmRYSmhkR2x2YmlCdmNIUnBiMjV6SUdadmNpQjBhR1VnWTNKbFlYUmxaQ0JqTW5CaElHOWlhbVZqZEZ4dUlDb3ZYRzVsZUhCdmNuUWdZWE41Ym1NZ1puVnVZM1JwYjI0Z1kzSmxZWFJsUXpKd1lTaGpiMjVtYVdjNklFTXljR0ZEYjI1bWFXY3BPaUJRY205dGFYTmxQRU15Y0dFK0lIdGNiaUFnYkdWMElHcHZZa052ZFc1MFpYSWdQU0F3TzF4dVhHNGdJR1JpWnlnblEzSmxZWFJwYm1jZ1l6SndZU0IzYVhSb0lHTnZibVpwWnljc0lHTnZibVpwWnlrN1hHNGdJR1Z1YzNWeVpVTnZiWEJoZEdsaWFXeHBkSGtvS1R0Y2JseHVJQ0JqYjI1emRDQndiMjlzSUQwZ1lYZGhhWFFnWTNKbFlYUmxVRzl2YkZkeVlYQndaWElvZTF4dUlDQWdJSE5qY21sd2RGTnlZem9nWTI5dVptbG5MbmR2Y210bGNsTnlZeXhjYmlBZ0lDQm1ZV3hzWW1GamExTmpjbWx3ZEZOeVl6b2dZMjl1Wm1sbkxtWmhiR3hpWVdOclYyOXlhMlZ5VTNKakxGeHVJQ0FnSUcxaGVGZHZjbXRsY25NNklHNWhkbWxuWVhSdmNpNW9ZWEprZDJGeVpVTnZibU4xY25KbGJtTjVJSHg4SURRc1hHNGdJSDBwTzF4dVhHNGdJR052Ym5OMElHUnZkMjVzYjJGa1pYSWdQU0J1WlhjZ1JHOTNibXh2WVdSbGNpaHdiMjlzTENCamIyNW1hV2N1Wkc5M2JteHZZV1JsY2s5d2RHbHZibk1wTzF4dVhHNGdJR052Ym5OMElIZGhjMjBnUFZ4dUlDQWdJR052Ym1acFp5NTNZWE50VTNKaklHbHVjM1JoYm1ObGIyWWdWMlZpUVhOelpXMWliSGt1VFc5a2RXeGxYRzRnSUNBZ0lDQS9JR052Ym1acFp5NTNZWE50VTNKalhHNGdJQ0FnSUNBNklHRjNZV2wwSUdabGRHTm9WMkZ6YlNod2IyOXNMQ0JqYjI1bWFXY3VkMkZ6YlZOeVl5azdYRzVjYmlBZ1kyOXVjM1FnY21WaFpEb2dRekp3WVZzbmNtVmhaQ2RkSUQwZ1lYTjVibU1nS0dsdWNIVjBLU0E5UGlCN1hHNGdJQ0FnWTI5dWMzUWdhbTlpU1dRZ1BTQXJLMnB2WWtOdmRXNTBaWEk3WEc1Y2JpQWdJQ0JrWW1kVVlYTnJLQ2RiSlhOZElGSmxZV1JwYm1jZ1puSnZiU0JwYm5CMWRDY3NJR3B2WWtsa0xDQnBibkIxZENrN1hHNWNiaUFnSUNCamIyNXpkQ0J6YjNWeVkyVWdQU0JoZDJGcGRDQmpjbVZoZEdWVGIzVnlZMlVvWkc5M2JteHZZV1JsY2l3Z2FXNXdkWFFwTzF4dVhHNGdJQ0FnWkdKblZHRnpheWduV3lWelhTQlFjbTlqWlhOemFXNW5JR2x1Y0hWMEp5d2dhbTlpU1dRc0lHbHVjSFYwS1R0Y2JseHVJQ0FnSUdsbUlDZ2hjMjkxY21ObExtSnNiMklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0FnSUcxaGJtbG1aWE4wVTNSdmNtVTZJRzUxYkd3c1hHNGdJQ0FnSUNBZ0lITnZkWEpqWlN4Y2JpQWdJQ0FnSUgwN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWTI5dWMzUWdZblZtWm1WeUlEMGdZWGRoYVhRZ2MyOTFjbU5sTG1GeWNtRjVRblZtWm1WeUtDazdYRzVjYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnWTI5dWMzUWdjbVZ6ZFd4MElEMGdZWGRoYVhRZ2NHOXZiQzVuWlhSU1pYQnZjblFvZDJGemJTd2dZblZtWm1WeUxDQnpiM1Z5WTJVdWRIbHdaU2s3WEc1Y2JpQWdJQ0FnSUdSaVoxUmhjMnNvSjFzbGMxMGdVbVZqWldsMlpXUWdkMjl5YTJWeUlISmxjM1ZzZENjc0lHcHZZa2xrTENCeVpYTjFiSFFwTzF4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNCdFlXNXBabVZ6ZEZOMGIzSmxPaUJqY21WaGRHVk5ZVzVwWm1WemRGTjBiM0psS0hKbGMzVnNkQ2tzWEc0Z0lDQWdJQ0FnSUhOdmRYSmpaU3hjYmlBZ0lDQWdJSDA3WEc0Z0lDQWdmU0JqWVhSamFDQW9aWEp5T2lCaGJua3BJSHRjYmlBZ0lDQWdJR052Ym5OMElHMWhibWxtWlhOMFUzUnZjbVVnUFNCaGQyRnBkQ0JvWVc1a2JHVkZjbkp2Y25Nb1hHNGdJQ0FnSUNBZ0lITnZkWEpqWlN4Y2JpQWdJQ0FnSUNBZ1pYSnlMRnh1SUNBZ0lDQWdJQ0J3YjI5c0xGeHVJQ0FnSUNBZ0lDQjNZWE50TEZ4dUlDQWdJQ0FnSUNCamIyNW1hV2N1Wm1WMFkyaFNaVzF2ZEdWTllXNXBabVZ6ZEhNc1hHNGdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQnRZVzVwWm1WemRGTjBiM0psTEZ4dUlDQWdJQ0FnSUNCemIzVnlZMlVzWEc0Z0lDQWdJQ0I5TzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNCamIyNXpkQ0J5WldGa1FXeHNPaUJETW5CaFd5ZHlaV0ZrUVd4c0oxMGdQU0JoYzNsdVl5QW9hVzV3ZFhSektTQTlQbHh1SUNBZ0lGQnliMjFwYzJVdVlXeHNLR2x1Y0hWMGN5NXRZWEFvS0dsdWNIVjBLU0E5UGlCeVpXRmtLR2x1Y0hWMEtTa3BPMXh1WEc0Z0lHTnZibk4wSUhKbFlXUkJibVJXWVd4cFpHRjBaVTFoYm1sbVpYTjBSR0YwWVRvZ1F6SndZVnNuY21WaFpFRnVaRlpoYkdsa1lYUmxUV0Z1YVdabGMzUkVZWFJoSjEwZ1BWeHVJQ0FnSUdGemVXNWpJQ2h0WVc1cFptVnpkRUoxWm1abGNpd2dhVzV3ZFhRcElEMCtJSHRjYmlBZ0lDQWdJR052Ym5OMElITnZkWEpqWlNBOUlHRjNZV2wwSUdOeVpXRjBaVk52ZFhKalpTaGtiM2R1Ykc5aFpHVnlMQ0JwYm5CMWRDazdYRzRnSUNBZ0lDQmpiMjV6ZENCaWRXWm1aWElnUFNCaGQyRnBkQ0J6YjNWeVkyVXVZWEp5WVhsQ2RXWm1aWElvS1R0Y2JseHVJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjbVZ6ZFd4MElEMGdZWGRoYVhRZ2NHOXZiQzVuWlhSU1pYQnZjblJHY205dFFYTnpaWFJCYm1STllXNXBabVZ6ZEVKMVptWmxjaWhjYmlBZ0lDQWdJQ0FnSUNCM1lYTnRMRnh1SUNBZ0lDQWdJQ0FnSUcxaGJtbG1aWE4wUW5WbVptVnlMRnh1SUNBZ0lDQWdJQ0FnSUdKMVptWmxjaXhjYmlBZ0lDQWdJQ0FnSUNCemIzVnlZMlV1ZEhsd1pTeGNiaUFnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNBZ0lHMWhibWxtWlhOMFUzUnZjbVU2SUdOeVpXRjBaVTFoYm1sbVpYTjBVM1J2Y21Vb2NtVnpkV3gwS1N4Y2JpQWdJQ0FnSUNBZ0lDQnpiM1Z5WTJVc1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQjlJR05oZEdOb0lDaGxjbkk2SUdGdWVTa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnRZVzVwWm1WemRGTjBiM0psSUQwZ1lYZGhhWFFnYUdGdVpHeGxSWEp5YjNKektGeHVJQ0FnSUNBZ0lDQWdJSE52ZFhKalpTeGNiaUFnSUNBZ0lDQWdJQ0JsY25Jc1hHNGdJQ0FnSUNBZ0lDQWdjRzl2YkN4Y2JpQWdJQ0FnSUNBZ0lDQjNZWE50TEZ4dUlDQWdJQ0FnSUNBZ0lHTnZibVpwWnk1bVpYUmphRkpsYlc5MFpVMWhibWxtWlhOMGN5eGNiaUFnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNBZ0lHMWhibWxtWlhOMFUzUnZjbVVzWEc0Z0lDQWdJQ0FnSUNBZ2MyOTFjbU5sTEZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwN1hHNWNiaUFnWTI5dWMzUWdjMk5oYmpvZ1F6SndZVnNuYzJOaGJpZGRJRDBnWVhONWJtTWdLR2x1Y0hWMEtTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ2MyOTFjbU5sSUQwZ1lYZGhhWFFnWTNKbFlYUmxVMjkxY21ObEtHUnZkMjVzYjJGa1pYSXNJR2x1Y0hWMEtUdGNiaUFnSUNCamIyNXpkQ0JpZFdabVpYSWdQU0JoZDJGcGRDQnpiM1Z5WTJVdVlYSnlZWGxDZFdabVpYSW9LVHRjYmx4dUlDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWVhkaGFYUWdjRzl2YkM1elkyRnVTVzV3ZFhRb1luVm1abVZ5S1R0Y2JpQWdJQ0I5SUdOaGRHTm9JQ2hsY25JNklIVnVhMjV2ZDI0cElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkRNbkJoVTJOaGJtNXBibWRGY25KdmNpaDdJR05oZFhObE9pQmxjbklnZlNrN1hHNGdJQ0FnZlZ4dUlDQjlPMXh1WEc0Z0lHTnZibk4wSUhOallXNVZjbXc2SUVNeWNHRmJKM05qWVc1VmNtd25YU0E5SUdGemVXNWpJQ2gxY213cElEMCtJSHRjYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR0YzWVdsMElIQnZiMnd1YzJOaGJrbHVjSFYwVlhKc0tIVnliQ2s3WEc0Z0lDQWdmU0JqWVhSamFDQW9aWEp5T2lCMWJtdHViM2R1S1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1F6SndZVk5qWVc1dWFXNW5SWEp5YjNJb2V5QmpZWFZ6WlRvZ1pYSnlJSDBwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNCamIyNXpkQ0J6YVdkdU9pQkRNbkJoV3lkemFXZHVKMTBnUFNCamNtVmhkR1ZUYVdkdUtHTnZibVpwWnl3Z2V5QndiMjlzTENCM1lYTnRJSDBwTzF4dVhHNGdJR052Ym5OMElHTnlaV0YwWlUxaGJtbG1aWE4wT2lCRE1uQmhXeWRqY21WaGRHVk5ZVzVwWm1WemRDZGRJRDBnWTNKbFlYUmxUV0Z1YVdabGMzUkNkV2xzWkdWeUtHTnZibVpwWnl3Z2UxeHVJQ0FnSUhCdmIyd3NYRzRnSUNBZ2QyRnpiU3hjYmlBZ2ZTazdYRzVjYmlBZ1kyOXVjM1FnYVc1bmNtVmthV1Z1ZEUxaGJtRm5aWElnUFNCamNtVmhkR1ZKYm1keVpXUnBaVzUwVFdGdVlXZGxjaWhqYjI1bWFXY3NJSHRjYmlBZ0lDQndiMjlzTEZ4dUlDQWdJSGRoYzIwc1hHNGdJSDBwTzF4dVhHNGdJSEpsZEhWeWJpQjdYRzRnSUNBZ1gzQnZiMnc2SUhCdmIyd3NYRzRnSUNBZ2NtVmhaQ3hjYmlBZ0lDQnlaV0ZrUVd4c0xGeHVJQ0FnSUhKbFlXUkJibVJXWVd4cFpHRjBaVTFoYm1sbVpYTjBSR0YwWVN4Y2JpQWdJQ0J6WTJGdUxGeHVJQ0FnSUhOallXNVZjbXdzWEc0Z0lDQWdjMmxuYml4Y2JpQWdJQ0JqY21WaGRHVk5ZVzVwWm1WemRDeGNiaUFnSUNCamNtVmhkR1ZKYm1keVpXUnBaVzUwT2lCcGJtZHlaV1JwWlc1MFRXRnVZV2RsY2k1amNtVmhkR1ZKYm1keVpXUnBaVzUwTEZ4dUlDQWdJR1JwYzNCdmMyVTZJQ2dwSUQwK0lIQnZiMnd1WkdsemNHOXpaU2dwTEZ4dUlDQjlPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFZGxibVZ5WVhSbGN5QmhJRlZTVENCMGFHRjBJSEJ5WlMxc2IyRmtjeUIwYUdVZ1lHRnpjMlYwVlhKc1lDQnBiblJ2SUhSb1pTQkRiMjUwWlc1MElFRjFkR2hsYm5ScFkybDBlU0JXWlhKcFpua2djMmwwWlZ4dUlDb2dabTl5SUdSbFpYQmxjaUJwYm5Od1pXTjBhVzl1SUdKNUlIVnpaWEp6TGx4dUlDcGNiaUFxSUVCd1lYSmhiU0JoYzNObGRGVnliQ0F0SUZSb1pTQlZVa3dnYjJZZ2RHaGxJR0Z6YzJWMElIbHZkU0IzWVc1MElIUnZJSFpwWlhjZ2FXNGdWbVZ5YVdaNVhHNGdLaTljYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJuWlc1bGNtRjBaVlpsY21sbWVWVnliQ2hoYzNObGRGVnliRG9nYzNSeWFXNW5LU0I3WEc0Z0lHTnZibk4wSUhWeWJDQTlJRzVsZHlCVlVrd29KMmgwZEhCek9pOHZkbVZ5YVdaNUxtTnZiblJsYm5SaGRYUm9aVzUwYVdOcGRIa3ViM0puTDJsdWMzQmxZM1FuS1R0Y2JpQWdkWEpzTG5ObFlYSmphRkJoY21GdGN5NXpaWFFvSjNOdmRYSmpaU2NzSUdGemMyVjBWWEpzS1R0Y2JpQWdjbVYwZFhKdUlIVnliQzUwYjFOMGNtbHVaeWdwTzF4dWZWeHVYRzR2S2lwY2JpQXFJRWhoYm1Sc1pYTWdaWEp5YjNKeklHWnliMjBnZEdobElIUnZiMnhyYVhRZ1lXNWtJR1psZEdOb1pYTXZjSEp2WTJWemMyVnpJSEpsYlc5MFpTQnRZVzVwWm1WemRITXNJR2xtSUdGd2NHeHBZMkZpYkdVdVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUhOdmRYSmpaU0F0SUZOdmRYSmpaU0J2WW1wbFkzUWdjbVZ3Y21WelpXNTBhVzVuSUhSb1pTQmhjM05sZEZ4dUlDb2dRSEJoY21GdElHVnljbTl5SUMwZ1JYSnliM0lnWm5KdmJTQjBiMjlzYTJsMFhHNGdLaUJBY0dGeVlXMGdjRzl2YkNBdElGZHZjbXRsY2lCd2IyOXNJSFJ2SUhWelpTQjNhR1Z1SUhCeWIyTmxjM05wYm1jZ2NtVnRiM1JsSUcxaGJtbG1aWE4wY3lBb2RISnBaMmRsY21Wa0lHSjVJRlJ2YjJ4cmFYUW9VbVZ0YjNSbFRXRnVhV1psYzNSVmNtd3BJR1Z5Y205eUtWeHVJQ29nUUhCaGNtRnRJSGRoYzIwZ0xTQlhRVk5OSUcxdlpIVnNaU0IwYnlCMWMyVWdkMmhsYmlCd2NtOWpaWE56YVc1bklISmxiVzkwWlNCdFlXNXBabVZ6ZEhOY2JpQXFJRUJ3WVhKaGJTQm1aWFJqYUZKbGJXOTBaU0F0SUVOdmJuUnliMnh6SUhKbGJXOTBaUzFtWlhSamFHbHVaeUJpWldoaGRtbHZjbHh1SUNvZ1FISmxkSFZ5Ym5NZ1FTQnRZVzVwWm1WemRGTjBiM0psTENCcFppQmhjSEJzYVdOaFlteGxMQ0J1ZFd4c0lHOTBhR1Z5ZDJselpTQnZjaUJoSUhKbExYUm9jbTkzYmlCbGNuSnZjaTVjYmlBcUwxeHVablZ1WTNScGIyNGdhR0Z1Wkd4bFJYSnliM0p6S0Z4dUlDQnpiM1Z5WTJVNklGTnZkWEpqWlN4Y2JpQWdaWEp5YjNJNklGUnZiMnhyYVhSRmNuSnZjaXhjYmlBZ2NHOXZiRG9nVTJSclYyOXlhMlZ5VUc5dmJDeGNiaUFnZDJGemJUb2dWMlZpUVhOelpXMWliSGt1VFc5a2RXeGxMRnh1SUNCbVpYUmphRkpsYlc5MFpTQTlJSFJ5ZFdVc1hHNHBPaUJRY205dGFYTmxQRTFoYm1sbVpYTjBVM1J2Y21VZ2ZDQnVkV3hzUGlCOElHNTFiR3dnZTF4dUlDQnpkMmwwWTJnZ0tHVnljbTl5TG01aGJXVXBJSHRjYmlBZ0lDQmpZWE5sSUNkVWIyOXNhMmwwS0ZKbGJXOTBaVTFoYm1sbVpYTjBWWEpzS1NjNlhHNGdJQ0FnSUNCcFppQW9abVYwWTJoU1pXMXZkR1VnSmlZZ1pYSnliM0l1ZFhKc0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQm1aWFJqYUZKbGJXOTBaVTFoYm1sbVpYTjBLSE52ZFhKalpTd2daWEp5YjNJdWRYSnNMQ0J3YjI5c0xDQjNZWE50S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lHTmhjMlVnSjBNeWNHRW9VSEp2ZG1WdVlXNWpaVTFwYzNOcGJtY3BKenBjYmlBZ0lDQmpZWE5sSUNkRE1uQmhLRXAxYldKbVRtOTBSbTkxYm1RcEp6cGNiaUFnSUNBZ0lHUmlaeWduVG04Z2NISnZkbVZ1WVc1alpTQmtZWFJoSUdadmRXNWtKeWs3WEc0Z0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnZEdoeWIzY2daWEp5YjNJN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2JuVnNiRHRjYm4xY2JseHVZWE41Ym1NZ1puVnVZM1JwYjI0Z1ptVjBZMmhTWlcxdmRHVk5ZVzVwWm1WemRDaGNiaUFnYzI5MWNtTmxPaUJUYjNWeVkyVXNYRzRnSUcxaGJtbG1aWE4wVlhKc09pQnpkSEpwYm1jc1hHNGdJSEJ2YjJ3NklGTmthMWR2Y210bGNsQnZiMndzWEc0Z0lIZGhjMjA2SUZkbFlrRnpjMlZ0WW14NUxrMXZaSFZzWlN4Y2JpazZJRkJ5YjIxcGMyVThUV0Z1YVdabGMzUlRkRzl5WlNCOElHNTFiR3crSUh0Y2JpQWdkSEo1SUh0Y2JpQWdJQ0JqYjI1emRDQjFjbXdnUFNCdVpYY2dWVkpNS0cxaGJtbG1aWE4wVlhKc0tUdGNiaUFnSUNCa1ltY29KMFpsZEdOb2FXNW5JSEpsYlc5MFpTQnRZVzVwWm1WemRDQm1jbTl0Snl3Z2RYSnNLVHRjYmx4dUlDQWdJR052Ym5OMElHMWhibWxtWlhOMFFubDBaWE1nUFNCaGQyRnBkQ0JtWlhSamFDaDFjbXd1ZEc5VGRISnBibWNvS1NrN1hHNGdJQ0FnWTI5dWMzUWdiV0Z1YVdabGMzUkNiRzlpSUQwZ1lYZGhhWFFnYldGdWFXWmxjM1JDZVhSbGN5NWliRzlpS0NrN1hHNGdJQ0FnWTI5dWMzUWdiV0Z1YVdabGMzUkNkV1ptWlhJZ1BTQmhkMkZwZENCdFlXNXBabVZ6ZEVKc2IySXVZWEp5WVhsQ2RXWm1aWElvS1R0Y2JpQWdJQ0JqYjI1emRDQnpiM1Z5WTJWQ2RXWm1aWElnUFNCaGQyRnBkQ0J6YjNWeVkyVXVZWEp5WVhsQ2RXWm1aWElvS1R0Y2JpQWdJQ0JqYjI1emRDQnlaWE4xYkhRZ1BTQmhkMkZwZENCd2IyOXNMbWRsZEZKbGNHOXlkRVp5YjIxQmMzTmxkRUZ1WkUxaGJtbG1aWE4wUW5WbVptVnlLRnh1SUNBZ0lDQWdkMkZ6YlN4Y2JpQWdJQ0FnSUcxaGJtbG1aWE4wUW5WbVptVnlMRnh1SUNBZ0lDQWdjMjkxY21ObFFuVm1abVZ5TEZ4dUlDQWdJQ0FnYzI5MWNtTmxMblI1Y0dVc1hHNGdJQ0FnS1R0Y2JseHVJQ0FnSUhKbGRIVnliaUJqY21WaGRHVk5ZVzVwWm1WemRGTjBiM0psS0hKbGMzVnNkQ2s3WEc0Z0lIMGdZMkYwWTJnZ0tHVnljaWtnZTF4dUlDQWdJR2xtSUNobGNuSWdhVzV6ZEdGdVkyVnZaaUJVZVhCbFJYSnliM0lwSUh0Y2JpQWdJQ0FnSUdSaVp5Z25TVzUyWVd4cFpDQlZVa3dnWjJsMlpXNHNJSE5yYVhCd2FXNW5JSEpsYlc5MFpTQnRZVzVwWm1WemRDQnNiMkZrYVc1bkp5d2diV0Z1YVdabGMzUlZjbXdwTzF4dUlDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWkdKbktDZEZjbkp2Y2lCc2IyRmthVzVuSUhKbGJXOTBaU0J0WVc1cFptVnpkQ0JtY205dEp5d2diV0Z1YVdabGMzUlZjbXdzSUdWeWNpazdYRzRnSUNBZ2RHaHliM2NnWlhKeU8xeHVJQ0I5WEc1OVhHNGlMQ0l2S2lwY2JpQXFJRU52Y0hseWFXZG9kQ0F5TURJeUlFRmtiMkpsWEc0Z0tpQkJiR3dnVW1sbmFIUnpJRkpsYzJWeWRtVmtMbHh1SUNwY2JpQXFJRTVQVkVsRFJUb2dRV1J2WW1VZ2NHVnliV2wwY3lCNWIzVWdkRzhnZFhObExDQnRiMlJwWm5rc0lHRnVaQ0JrYVhOMGNtbGlkWFJsSUhSb2FYTWdabWxzWlNCcGJseHVJQ29nWVdOamIzSmtZVzVqWlNCM2FYUm9JSFJvWlNCMFpYSnRjeUJ2WmlCMGFHVWdRV1J2WW1VZ2JHbGpaVzV6WlNCaFozSmxaVzFsYm5RZ1lXTmpiMjF3WVc1NWFXNW5YRzRnS2lCcGRDNWNiaUFxTDF4dVhHNXBiWEJ2Y25RZ2V5QldZV3hwWkdGMGFXOXVVM1JoZEhWeklIMGdabkp2YlNCY0lrQmpNbkJoTDJGa2IySmxMWFJ2YjJ4cmFYUmNJanRjYmx4dVpYaHdiM0owSUdOdmJuTjBJRTlVUjFCZlJWSlNUMUpmUTA5RVJTQTlJQ2RoYzNObGNuUnBiMjR1WkdGMFlVaGhjMmd1YldsemJXRjBZMmduTzF4dVhHNHZLaXBjYmlBcUlFUmxkR1Z5YldsdVpYTWdhV1lnWVNCMllXeHBaR0YwYVc5dUlITjBZWFIxY3lCc2FYTjBJR052Ym5SaGFXNXpJR0Z1SUU5VVIxQWdLR0JoYzNObGNuUnBiMjR1WkdGMFlVaGhjMmd1YldsemJXRjBZMmhnS1Z4dUlDb2djM1JoZEhWelhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUhaaGJHbGtZWFJwYjI1VGRHRjBkWE5jYmlBcUlFQnlaWFIxY201eklHQjBjblZsWUNCcFppQjNaU0JtYVc1a0lHRnVJRTlVUjFBZ2MzUmhkSFZ6WEc0Z0tpOWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQm9ZWE5QZEdkd1UzUmhkSFZ6S0haaGJHbGtZWFJwYjI1VGRHRjBkWE02SUZaaGJHbGtZWFJwYjI1VGRHRjBkWE5iWFNBOUlGdGRLU0I3WEc0Z0lISmxkSFZ5YmlCMllXeHBaR0YwYVc5dVUzUmhkSFZ6TG5OdmJXVW9LR1Z5Y2lrZ1BUNGdaWEp5TG1OdlpHVWdQVDA5SUU5VVIxQmZSVkpTVDFKZlEwOUVSU2s3WEc1OVhHNWNiaThxS2x4dUlDb2dSR1YwWlhKdGFXNWxjeUJwWmlCaElIWmhiR2xrWVhScGIyNGdjM1JoZEhWeklHeHBjM1FnWTI5dWRHRnBibk1nWVc0Z1pYSnliM0lnS0dGdWVYUm9hVzVuSUc1dmRDQnBiaUIwYUdVZ1l6SndZUzF5YzF4dUlDb2dZRU15VUVGZlUxUkJWRlZUWDFaQlRFbEVYMU5GVkdBZ2JHbHpkQ0JmWVc1a1h5QnViM1FnWVc0Z1QxUkhVQ0J6ZEdGMGRYTXBYRzRnS2lCY2JpQXFJRUJ3WVhKaGJTQjJZV3hwWkdGMGFXOXVVM1JoZEhWelhHNGdLaUJBY21WMGRYSnVjeUJnZEhKMVpXQWdhV1lnZDJVZ1ptbHVaQ0JoYmlCbGNuSnZjbHh1SUNvdlhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2FHRnpSWEp5YjNKVGRHRjBkWE1vZG1Gc2FXUmhkR2x2YmxOMFlYUjFjem9nWVc1NVcxMGdQU0JiWFNrZ2UxeHVJQ0J5WlhSMWNtNGdkbUZzYVdSaGRHbHZibE4wWVhSMWN5NXNaVzVuZEdnZ1BpQXdJQ1ltSUNGb1lYTlBkR2R3VTNSaGRIVnpLSFpoYkdsa1lYUnBiMjVUZEdGMGRYTXBJRnh1ZlZ4dUlpd2lMeW9xWEc0Z0tpQkJJSE53WldOcFlXeHBlbVZrSUhabGNuTnBiMjRnYjJZZ1lGOHVabTl5UldGamFHQWdabTl5SUdGeWNtRjVjeUIzYVhSb2IzVjBJSE4xY0hCdmNuUWdabTl5WEc0Z0tpQnBkR1Z5WVhSbFpTQnphRzl5ZEdoaGJtUnpMbHh1SUNwY2JpQXFJRUJ3Y21sMllYUmxYRzRnS2lCQWNHRnlZVzBnZTBGeWNtRjVmU0JiWVhKeVlYbGRJRlJvWlNCaGNuSmhlU0IwYnlCcGRHVnlZWFJsSUc5MlpYSXVYRzRnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCcGRHVnlZWFJsWlNCVWFHVWdablZ1WTNScGIyNGdhVzUyYjJ0bFpDQndaWElnYVhSbGNtRjBhVzl1TGx4dUlDb2dRSEpsZEhWeWJuTWdlMEZ5Y21GNWZTQlNaWFIxY201eklHQmhjbkpoZVdBdVhHNGdLaTljYm1aMWJtTjBhVzl1SUdGeWNtRjVSV0ZqYUNoaGNuSmhlU3dnYVhSbGNtRjBaV1VwSUh0Y2JpQWdkbUZ5SUdsdVpHVjRJRDBnTFRFc1hHNGdJQ0FnSUNCc1pXNW5kR2dnUFNCaGNuSmhlU0E5UFNCdWRXeHNJRDhnTUNBNklHRnljbUY1TG14bGJtZDBhRHRjYmx4dUlDQjNhR2xzWlNBb0t5dHBibVJsZUNBOElHeGxibWQwYUNrZ2UxeHVJQ0FnSUdsbUlDaHBkR1Z5WVhSbFpTaGhjbkpoZVZ0cGJtUmxlRjBzSUdsdVpHVjRMQ0JoY25KaGVTa2dQVDA5SUdaaGJITmxLU0I3WEc0Z0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNCOVhHNGdJSDFjYmlBZ2NtVjBkWEp1SUdGeWNtRjVPMXh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHRnljbUY1UldGamFEdGNiaUlzSW5aaGNpQnBjMEZ5Y21GNVRHbHJaU0E5SUhKbGNYVnBjbVVvSnk0dmFYTkJjbkpoZVV4cGEyVW5LVHRjYmx4dUx5b3FYRzRnS2lCRGNtVmhkR1Z6SUdFZ1lHSmhjMlZGWVdOb1lDQnZjaUJnWW1GelpVVmhZMmhTYVdkb2RHQWdablZ1WTNScGIyNHVYRzRnS2x4dUlDb2dRSEJ5YVhaaGRHVmNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdWaFkyaEdkVzVqSUZSb1pTQm1kVzVqZEdsdmJpQjBieUJwZEdWeVlYUmxJRzkyWlhJZ1lTQmpiMnhzWldOMGFXOXVMbHh1SUNvZ1FIQmhjbUZ0SUh0aWIyOXNaV0Z1ZlNCYlpuSnZiVkpwWjJoMFhTQlRjR1ZqYVdaNUlHbDBaWEpoZEdsdVp5Qm1jbTl0SUhKcFoyaDBJSFJ2SUd4bFpuUXVYRzRnS2lCQWNtVjBkWEp1Y3lCN1JuVnVZM1JwYjI1OUlGSmxkSFZ5Ym5NZ2RHaGxJRzVsZHlCaVlYTmxJR1oxYm1OMGFXOXVMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQmpjbVZoZEdWQ1lYTmxSV0ZqYUNobFlXTm9SblZ1WXl3Z1puSnZiVkpwWjJoMEtTQjdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaWhqYjJ4c1pXTjBhVzl1TENCcGRHVnlZWFJsWlNrZ2UxeHVJQ0FnSUdsbUlDaGpiMnhzWldOMGFXOXVJRDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmpiMnhzWldOMGFXOXVPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9JV2x6UVhKeVlYbE1hV3RsS0dOdmJHeGxZM1JwYjI0cEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1pXRmphRVoxYm1Nb1kyOXNiR1ZqZEdsdmJpd2dhWFJsY21GMFpXVXBPMXh1SUNBZ0lIMWNiaUFnSUNCMllYSWdiR1Z1WjNSb0lEMGdZMjlzYkdWamRHbHZiaTVzWlc1bmRHZ3NYRzRnSUNBZ0lDQWdJR2x1WkdWNElEMGdabkp2YlZKcFoyaDBJRDhnYkdWdVozUm9JRG9nTFRFc1hHNGdJQ0FnSUNBZ0lHbDBaWEpoWW14bElEMGdUMkpxWldOMEtHTnZiR3hsWTNScGIyNHBPMXh1WEc0Z0lDQWdkMmhwYkdVZ0tDaG1jbTl0VW1sbmFIUWdQeUJwYm1SbGVDMHRJRG9nS3l0cGJtUmxlQ0E4SUd4bGJtZDBhQ2twSUh0Y2JpQWdJQ0FnSUdsbUlDaHBkR1Z5WVhSbFpTaHBkR1Z5WVdKc1pWdHBibVJsZUYwc0lHbHVaR1Y0TENCcGRHVnlZV0pzWlNrZ1BUMDlJR1poYkhObEtTQjdYRzRnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdZMjlzYkdWamRHbHZianRjYmlBZ2ZUdGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCamNtVmhkR1ZDWVhObFJXRmphRHRjYmlJc0luWmhjaUJpWVhObFJtOXlUM2R1SUQwZ2NtVnhkV2x5WlNnbkxpOWZZbUZ6WlVadmNrOTNiaWNwTEZ4dUlDQWdJR055WldGMFpVSmhjMlZGWVdOb0lEMGdjbVZ4ZFdseVpTZ25MaTlmWTNKbFlYUmxRbUZ6WlVWaFkyZ25LVHRjYmx4dUx5b3FYRzRnS2lCVWFHVWdZbUZ6WlNCcGJYQnNaVzFsYm5SaGRHbHZiaUJ2WmlCZ1h5NW1iM0pGWVdOb1lDQjNhWFJvYjNWMElITjFjSEJ2Y25RZ1ptOXlJR2wwWlhKaGRHVmxJSE5vYjNKMGFHRnVaSE11WEc0Z0tseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUlFQndZWEpoYlNCN1FYSnlZWGw4VDJKcVpXTjBmU0JqYjJ4c1pXTjBhVzl1SUZSb1pTQmpiMnhzWldOMGFXOXVJSFJ2SUdsMFpYSmhkR1VnYjNabGNpNWNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdsMFpYSmhkR1ZsSUZSb1pTQm1kVzVqZEdsdmJpQnBiblp2YTJWa0lIQmxjaUJwZEdWeVlYUnBiMjR1WEc0Z0tpQkFjbVYwZFhKdWN5QjdRWEp5WVhsOFQySnFaV04wZlNCU1pYUjFjbTV6SUdCamIyeHNaV04wYVc5dVlDNWNiaUFxTDF4dWRtRnlJR0poYzJWRllXTm9JRDBnWTNKbFlYUmxRbUZ6WlVWaFkyZ29ZbUZ6WlVadmNrOTNiaWs3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1ltRnpaVVZoWTJnN1hHNGlMQ0oyWVhJZ2FXUmxiblJwZEhrZ1BTQnlaWEYxYVhKbEtDY3VMMmxrWlc1MGFYUjVKeWs3WEc1Y2JpOHFLbHh1SUNvZ1EyRnpkSE1nWUhaaGJIVmxZQ0IwYnlCZ2FXUmxiblJwZEhsZ0lHbG1JR2wwSjNNZ2JtOTBJR0VnWm5WdVkzUnBiMjR1WEc0Z0tseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUlFQndZWEpoYlNCN0tuMGdkbUZzZFdVZ1ZHaGxJSFpoYkhWbElIUnZJR2x1YzNCbFkzUXVYRzRnS2lCQWNtVjBkWEp1Y3lCN1JuVnVZM1JwYjI1OUlGSmxkSFZ5Ym5NZ1kyRnpkQ0JtZFc1amRHbHZiaTVjYmlBcUwxeHVablZ1WTNScGIyNGdZMkZ6ZEVaMWJtTjBhVzl1S0haaGJIVmxLU0I3WEc0Z0lISmxkSFZ5YmlCMGVYQmxiMllnZG1Gc2RXVWdQVDBnSjJaMWJtTjBhVzl1SnlBL0lIWmhiSFZsSURvZ2FXUmxiblJwZEhrN1hHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWTJGemRFWjFibU4wYVc5dU8xeHVJaXdpZG1GeUlHRnljbUY1UldGamFDQTlJSEpsY1hWcGNtVW9KeTR2WDJGeWNtRjVSV0ZqYUNjcExGeHVJQ0FnSUdKaGMyVkZZV05vSUQwZ2NtVnhkV2x5WlNnbkxpOWZZbUZ6WlVWaFkyZ25LU3hjYmlBZ0lDQmpZWE4wUm5WdVkzUnBiMjRnUFNCeVpYRjFhWEpsS0NjdUwxOWpZWE4wUm5WdVkzUnBiMjRuS1N4Y2JpQWdJQ0JwYzBGeWNtRjVJRDBnY21WeGRXbHlaU2duTGk5cGMwRnljbUY1SnlrN1hHNWNiaThxS2x4dUlDb2dTWFJsY21GMFpYTWdiM1psY2lCbGJHVnRaVzUwY3lCdlppQmdZMjlzYkdWamRHbHZibUFnWVc1a0lHbHVkbTlyWlhNZ1lHbDBaWEpoZEdWbFlDQm1iM0lnWldGamFDQmxiR1Z0Wlc1MExseHVJQ29nVkdobElHbDBaWEpoZEdWbElHbHpJR2x1ZG05clpXUWdkMmwwYUNCMGFISmxaU0JoY21kMWJXVnVkSE02SUNoMllXeDFaU3dnYVc1a1pYaDhhMlY1TENCamIyeHNaV04wYVc5dUtTNWNiaUFxSUVsMFpYSmhkR1ZsSUdaMWJtTjBhVzl1Y3lCdFlYa2daWGhwZENCcGRHVnlZWFJwYjI0Z1pXRnliSGtnWW5rZ1pYaHdiR2xqYVhSc2VTQnlaWFIxY201cGJtY2dZR1poYkhObFlDNWNiaUFxWEc0Z0tpQXFLazV2ZEdVNktpb2dRWE1nZDJsMGFDQnZkR2hsY2lCY0lrTnZiR3hsWTNScGIyNXpYQ0lnYldWMGFHOWtjeXdnYjJKcVpXTjBjeUIzYVhSb0lHRWdYQ0pzWlc1bmRHaGNJbHh1SUNvZ2NISnZjR1Z5ZEhrZ1lYSmxJR2wwWlhKaGRHVmtJR3hwYTJVZ1lYSnlZWGx6TGlCVWJ5QmhkbTlwWkNCMGFHbHpJR0psYUdGMmFXOXlJSFZ6WlNCZ1h5NW1iM0pKYm1CY2JpQXFJRzl5SUdCZkxtWnZjazkzYm1BZ1ptOXlJRzlpYW1WamRDQnBkR1Z5WVhScGIyNHVYRzRnS2x4dUlDb2dRSE4wWVhScFkxeHVJQ29nUUcxbGJXSmxjazltSUY5Y2JpQXFJRUJ6YVc1alpTQXdMakV1TUZ4dUlDb2dRR0ZzYVdGeklHVmhZMmhjYmlBcUlFQmpZWFJsWjI5eWVTQkRiMnhzWldOMGFXOXVYRzRnS2lCQWNHRnlZVzBnZTBGeWNtRjVmRTlpYW1WamRIMGdZMjlzYkdWamRHbHZiaUJVYUdVZ1kyOXNiR1ZqZEdsdmJpQjBieUJwZEdWeVlYUmxJRzkyWlhJdVhHNGdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0JiYVhSbGNtRjBaV1U5WHk1cFpHVnVkR2wwZVYwZ1ZHaGxJR1oxYm1OMGFXOXVJR2x1ZG05clpXUWdjR1Z5SUdsMFpYSmhkR2x2Ymk1Y2JpQXFJRUJ5WlhSMWNtNXpJSHRCY25KaGVYeFBZbXBsWTNSOUlGSmxkSFZ5Ym5NZ1lHTnZiR3hsWTNScGIyNWdMbHh1SUNvZ1FITmxaU0JmTG1admNrVmhZMmhTYVdkb2RGeHVJQ29nUUdWNFlXMXdiR1ZjYmlBcVhHNGdLaUJmTG1admNrVmhZMmdvV3pFc0lESmRMQ0JtZFc1amRHbHZiaWgyWVd4MVpTa2dlMXh1SUNvZ0lDQmpiMjV6YjJ4bExteHZaeWgyWVd4MVpTazdYRzRnS2lCOUtUdGNiaUFxSUM4dklEMCtJRXh2WjNNZ1lERmdJSFJvWlc0Z1lESmdMbHh1SUNwY2JpQXFJRjh1Wm05eVJXRmphQ2g3SUNkaEp6b2dNU3dnSjJJbk9pQXlJSDBzSUdaMWJtTjBhVzl1S0haaGJIVmxMQ0JyWlhrcElIdGNiaUFxSUNBZ1kyOXVjMjlzWlM1c2IyY29hMlY1S1R0Y2JpQXFJSDBwTzF4dUlDb2dMeThnUFQ0Z1RHOW5jeUFuWVNjZ2RHaGxiaUFuWWljZ0tHbDBaWEpoZEdsdmJpQnZjbVJsY2lCcGN5QnViM1FnWjNWaGNtRnVkR1ZsWkNrdVhHNGdLaTljYm1aMWJtTjBhVzl1SUdadmNrVmhZMmdvWTI5c2JHVmpkR2x2Yml3Z2FYUmxjbUYwWldVcElIdGNiaUFnZG1GeUlHWjFibU1nUFNCcGMwRnljbUY1S0dOdmJHeGxZM1JwYjI0cElEOGdZWEp5WVhsRllXTm9JRG9nWW1GelpVVmhZMmc3WEc0Z0lISmxkSFZ5YmlCbWRXNWpLR052Ykd4bFkzUnBiMjRzSUdOaGMzUkdkVzVqZEdsdmJpaHBkR1Z5WVhSbFpTa3BPMXh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWnZja1ZoWTJnN1hHNGlMQ0p0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSEpsY1hWcGNtVW9KeTR2Wm05eVJXRmphQ2NwTzF4dUlpd2lMeW9xSUZWelpXUWdkRzhnYldGd0lHRnNhV0Z6WlhNZ2RHOGdkR2hsYVhJZ2NtVmhiQ0J1WVcxbGN5NGdLaTljYm1WNGNHOXlkSE11WVd4cFlYTlViMUpsWVd3Z1BTQjdYRzVjYmlBZ0x5OGdURzlrWVhOb0lHRnNhV0Z6WlhNdVhHNGdJQ2RsWVdOb0p6b2dKMlp2Y2tWaFkyZ25MRnh1SUNBblpXRmphRkpwWjJoMEp6b2dKMlp2Y2tWaFkyaFNhV2RvZENjc1hHNGdJQ2RsYm5SeWFXVnpKem9nSjNSdlVHRnBjbk1uTEZ4dUlDQW5aVzUwY21sbGMwbHVKem9nSjNSdlVHRnBjbk5KYmljc1hHNGdJQ2RsZUhSbGJtUW5PaUFuWVhOemFXZHVTVzRuTEZ4dUlDQW5aWGgwWlc1a1FXeHNKem9nSjJGemMybG5ia2x1UVd4c0p5eGNiaUFnSjJWNGRHVnVaRUZzYkZkcGRHZ25PaUFuWVhOemFXZHVTVzVCYkd4WGFYUm9KeXhjYmlBZ0oyVjRkR1Z1WkZkcGRHZ25PaUFuWVhOemFXZHVTVzVYYVhSb0p5eGNiaUFnSjJacGNuTjBKem9nSjJobFlXUW5MRnh1WEc0Z0lDOHZJRTFsZEdodlpITWdkR2hoZENCaGNtVWdZM1Z5Y21sbFpDQjJZWEpwWVc1MGN5QnZaaUJ2ZEdobGNuTXVYRzRnSUNkamIyNW1iM0p0Y3ljNklDZGpiMjVtYjNKdGMxUnZKeXhjYmlBZ0oyMWhkR05vWlhNbk9pQW5hWE5OWVhSamFDY3NYRzRnSUNkd2NtOXdaWEowZVNjNklDZG5aWFFuTEZ4dVhHNGdJQzh2SUZKaGJXUmhJR0ZzYVdGelpYTXVYRzRnSUNkZlh5YzZJQ2R3YkdGalpXaHZiR1JsY2ljc1hHNGdJQ2RHSnpvZ0ozTjBkV0pHWVd4elpTY3NYRzRnSUNkVUp6b2dKM04wZFdKVWNuVmxKeXhjYmlBZ0oyRnNiQ2M2SUNkbGRtVnllU2NzWEc0Z0lDZGhiR3hRWVhOekp6b2dKMjkyWlhKRmRtVnllU2NzWEc0Z0lDZGhiSGRoZVhNbk9pQW5ZMjl1YzNSaGJuUW5MRnh1SUNBbllXNTVKem9nSjNOdmJXVW5MRnh1SUNBbllXNTVVR0Z6Y3ljNklDZHZkbVZ5VTI5dFpTY3NYRzRnSUNkaGNIQnNlU2M2SUNkemNISmxZV1FuTEZ4dUlDQW5ZWE56YjJNbk9pQW5jMlYwSnl4Y2JpQWdKMkZ6YzI5alVHRjBhQ2M2SUNkelpYUW5MRnh1SUNBblkyOXRjR3hsYldWdWRDYzZJQ2R1WldkaGRHVW5MRnh1SUNBblkyOXRjRzl6WlNjNklDZG1iRzkzVW1sbmFIUW5MRnh1SUNBblkyOXVkR0ZwYm5Nbk9pQW5hVzVqYkhWa1pYTW5MRnh1SUNBblpHbHpjMjlqSnpvZ0ozVnVjMlYwSnl4Y2JpQWdKMlJwYzNOdlkxQmhkR2duT2lBbmRXNXpaWFFuTEZ4dUlDQW5aSEp2Y0V4aGMzUW5PaUFuWkhKdmNGSnBaMmgwSnl4Y2JpQWdKMlJ5YjNCTVlYTjBWMmhwYkdVbk9pQW5aSEp2Y0ZKcFoyaDBWMmhwYkdVbkxGeHVJQ0FuWlhGMVlXeHpKem9nSjJselJYRjFZV3duTEZ4dUlDQW5hV1JsYm5ScFkyRnNKem9nSjJWeEp5eGNiaUFnSjJsdVpHVjRRbmtuT2lBbmEyVjVRbmtuTEZ4dUlDQW5hVzVwZENjNklDZHBibWwwYVdGc0p5eGNiaUFnSjJsdWRtVnlkRTlpYWljNklDZHBiblpsY25RbkxGeHVJQ0FuYW5WNGRDYzZJQ2R2ZG1WeUp5eGNiaUFnSjI5dGFYUkJiR3duT2lBbmIyMXBkQ2NzWEc0Z0lDZHVRWEo1SnpvZ0oyRnllU2NzWEc0Z0lDZHdZWFJvSnpvZ0oyZGxkQ2NzWEc0Z0lDZHdZWFJvUlhFbk9pQW5iV0YwWTJobGMxQnliM0JsY25SNUp5eGNiaUFnSjNCaGRHaFBjaWM2SUNkblpYUlBjaWNzWEc0Z0lDZHdZWFJvY3ljNklDZGhkQ2NzWEc0Z0lDZHdhV05yUVd4c0p6b2dKM0JwWTJzbkxGeHVJQ0FuY0dsd1pTYzZJQ2RtYkc5M0p5eGNiaUFnSjNCc2RXTnJKem9nSjIxaGNDY3NYRzRnSUNkd2NtOXdKem9nSjJkbGRDY3NYRzRnSUNkd2NtOXdSWEVuT2lBbmJXRjBZMmhsYzFCeWIzQmxjblI1Snl4Y2JpQWdKM0J5YjNCUGNpYzZJQ2RuWlhSUGNpY3NYRzRnSUNkd2NtOXdjeWM2SUNkaGRDY3NYRzRnSUNkemVXMXRaWFJ5YVdORWFXWm1aWEpsYm1ObEp6b2dKM2h2Y2ljc1hHNGdJQ2R6ZVcxdFpYUnlhV05FYVdabVpYSmxibU5sUW5rbk9pQW5lRzl5UW5rbkxGeHVJQ0FuYzNsdGJXVjBjbWxqUkdsbVptVnlaVzVqWlZkcGRHZ25PaUFuZUc5eVYybDBhQ2NzWEc0Z0lDZDBZV3RsVEdGemRDYzZJQ2QwWVd0bFVtbG5hSFFuTEZ4dUlDQW5kR0ZyWlV4aGMzUlhhR2xzWlNjNklDZDBZV3RsVW1sbmFIUlhhR2xzWlNjc1hHNGdJQ2QxYm1Gd2NHeDVKem9nSjNKbGMzUW5MRnh1SUNBbmRXNXVaWE4wSnpvZ0oyWnNZWFIwWlc0bkxGeHVJQ0FuZFhObFYybDBhQ2M2SUNkdmRtVnlRWEpuY3ljc1hHNGdJQ2QzYUdWeVpTYzZJQ2RqYjI1bWIzSnRjMVJ2Snl4Y2JpQWdKM2RvWlhKbFJYRW5PaUFuYVhOTllYUmphQ2NzWEc0Z0lDZDZhWEJQWW1vbk9pQW5lbWx3VDJKcVpXTjBKMXh1ZlR0Y2JseHVMeW9xSUZWelpXUWdkRzhnYldGd0lHRnllU0IwYnlCdFpYUm9iMlFnYm1GdFpYTXVJQ292WEc1bGVIQnZjblJ6TG1GeWVVMWxkR2h2WkNBOUlIdGNiaUFnSnpFbk9pQmJYRzRnSUNBZ0oyRnpjMmxuYmtGc2JDY3NJQ2RoYzNOcFoyNUpia0ZzYkNjc0lDZGhkSFJsYlhCMEp5d2dKMk5oYzNSQmNuSmhlU2NzSUNkalpXbHNKeXdnSjJOeVpXRjBaU2NzWEc0Z0lDQWdKMk4xY25KNUp5d2dKMk4xY25KNVVtbG5hSFFuTENBblpHVm1ZWFZzZEhOQmJHd25MQ0FuWkdWbVlYVnNkSE5FWldWd1FXeHNKeXdnSjJac2IyOXlKeXdnSjJac2IzY25MRnh1SUNBZ0lDZG1iRzkzVW1sbmFIUW5MQ0FuWm5KdmJWQmhhWEp6Snl3Z0oybHVkbVZ5ZENjc0lDZHBkR1Z5WVhSbFpTY3NJQ2R0WlcxdmFYcGxKeXdnSjIxbGRHaHZaQ2NzSUNkdFpYSm5aVUZzYkNjc1hHNGdJQ0FnSjIxbGRHaHZaRTltSnl3Z0oyMXBlR2x1Snl3Z0oyNTBhRUZ5Wnljc0lDZHZkbVZ5Snl3Z0oyOTJaWEpGZG1WeWVTY3NJQ2R2ZG1WeVUyOXRaU2NzSjNKbGMzUW5MQ0FuY21WMlpYSnpaU2NzWEc0Z0lDQWdKM0p2ZFc1a0p5d2dKM0oxYmtsdVEyOXVkR1Y0ZENjc0lDZHpjSEpsWVdRbkxDQW5kR1Z0Y0d4aGRHVW5MQ0FuZEhKcGJTY3NJQ2QwY21sdFJXNWtKeXdnSjNSeWFXMVRkR0Z5ZENjc1hHNGdJQ0FnSjNWdWFYRjFaVWxrSnl3Z0ozZHZjbVJ6Snl3Z0ozcHBjRUZzYkNkY2JpQWdYU3hjYmlBZ0p6SW5PaUJiWEc0Z0lDQWdKMkZrWkNjc0lDZGhablJsY2ljc0lDZGhjbmtuTENBbllYTnphV2R1Snl3Z0oyRnpjMmxuYmtGc2JGZHBkR2duTENBbllYTnphV2R1U1c0bkxDQW5ZWE56YVdkdVNXNUJiR3hYYVhSb0p5eGNiaUFnSUNBbllYUW5MQ0FuWW1WbWIzSmxKeXdnSjJKcGJtUW5MQ0FuWW1sdVpFRnNiQ2NzSUNkaWFXNWtTMlY1Snl3Z0oyTm9kVzVySnl3Z0oyTnNiMjVsUkdWbGNGZHBkR2duTEZ4dUlDQWdJQ2RqYkc5dVpWZHBkR2duTENBblkyOXVZMkYwSnl3Z0oyTnZibVp2Y20xelZHOG5MQ0FuWTI5MWJuUkNlU2NzSUNkamRYSnllVTRuTENBblkzVnljbmxTYVdkb2RFNG5MRnh1SUNBZ0lDZGtaV0p2ZFc1alpTY3NJQ2RrWldaaGRXeDBjeWNzSUNka1pXWmhkV3gwYzBSbFpYQW5MQ0FuWkdWbVlYVnNkRlJ2Snl3Z0oyUmxiR0Y1Snl3Z0oyUnBabVpsY21WdVkyVW5MRnh1SUNBZ0lDZGthWFpwWkdVbkxDQW5aSEp2Y0Njc0lDZGtjbTl3VW1sbmFIUW5MQ0FuWkhKdmNGSnBaMmgwVjJocGJHVW5MQ0FuWkhKdmNGZG9hV3hsSnl3Z0oyVnVaSE5YYVhSb0p5d2dKMlZ4Snl4Y2JpQWdJQ0FuWlhabGNua25MQ0FuWm1sc2RHVnlKeXdnSjJacGJtUW5MQ0FuWm1sdVpFbHVaR1Y0Snl3Z0oyWnBibVJMWlhrbkxDQW5abWx1WkV4aGMzUW5MQ0FuWm1sdVpFeGhjM1JKYm1SbGVDY3NYRzRnSUNBZ0oyWnBibVJNWVhOMFMyVjVKeXdnSjJac1lYUk5ZWEFuTENBblpteGhkRTFoY0VSbFpYQW5MQ0FuWm14aGRIUmxia1JsY0hSb0p5d2dKMlp2Y2tWaFkyZ25MRnh1SUNBZ0lDZG1iM0pGWVdOb1VtbG5hSFFuTENBblptOXlTVzRuTENBblptOXlTVzVTYVdkb2RDY3NJQ2RtYjNKUGQyNG5MQ0FuWm05eVQzZHVVbWxuYUhRbkxDQW5aMlYwSnl4Y2JpQWdJQ0FuWjNKdmRYQkNlU2NzSUNkbmRDY3NJQ2RuZEdVbkxDQW5hR0Z6Snl3Z0oyaGhjMGx1Snl3Z0oybHVZMngxWkdWekp5d2dKMmx1WkdWNFQyWW5MQ0FuYVc1MFpYSnpaV04wYVc5dUp5eGNiaUFnSUNBbmFXNTJaWEowUW5rbkxDQW5hVzUyYjJ0bEp5d2dKMmx1ZG05clpVMWhjQ2NzSUNkcGMwVnhkV0ZzSnl3Z0oybHpUV0YwWTJnbkxDQW5hbTlwYmljc0lDZHJaWGxDZVNjc1hHNGdJQ0FnSjJ4aGMzUkpibVJsZUU5bUp5d2dKMngwSnl3Z0oyeDBaU2NzSUNkdFlYQW5MQ0FuYldGd1MyVjVjeWNzSUNkdFlYQldZV3gxWlhNbkxDQW5iV0YwWTJobGMxQnliM0JsY25SNUp5eGNiaUFnSUNBbmJXRjRRbmtuTENBbmJXVmhia0o1Snl3Z0oyMWxjbWRsSnl3Z0oyMWxjbWRsUVd4c1YybDBhQ2NzSUNkdGFXNUNlU2NzSUNkdGRXeDBhWEJzZVNjc0lDZHVkR2duTENBbmIyMXBkQ2NzWEc0Z0lDQWdKMjl0YVhSQ2VTY3NJQ2R2ZG1WeVFYSm5jeWNzSUNkd1lXUW5MQ0FuY0dGa1JXNWtKeXdnSjNCaFpGTjBZWEowSnl3Z0ozQmhjbk5sU1c1MEp5d2dKM0JoY25ScFlXd25MRnh1SUNBZ0lDZHdZWEowYVdGc1VtbG5hSFFuTENBbmNHRnlkR2wwYVc5dUp5d2dKM0JwWTJzbkxDQW5jR2xqYTBKNUp5d2dKM0J5YjNCbGNuUjVUMlluTENBbmNIVnNiQ2NzSUNkd2RXeHNRV3hzSnl4Y2JpQWdJQ0FuY0hWc2JFRjBKeXdnSjNKaGJtUnZiU2NzSUNkeVlXNW5aU2NzSUNkeVlXNW5aVkpwWjJoMEp5d2dKM0psWVhKbkp5d2dKM0psYW1WamRDY3NJQ2R5WlcxdmRtVW5MRnh1SUNBZ0lDZHlaWEJsWVhRbkxDQW5jbVZ6ZEVaeWIyMG5MQ0FuY21WemRXeDBKeXdnSjNOaGJYQnNaVk5wZW1VbkxDQW5jMjl0WlNjc0lDZHpiM0owUW5rbkxDQW5jMjl5ZEdWa1NXNWtaWGduTEZ4dUlDQWdJQ2R6YjNKMFpXUkpibVJsZUU5bUp5d2dKM052Y25SbFpFeGhjM1JKYm1SbGVDY3NJQ2R6YjNKMFpXUk1ZWE4wU1c1a1pYaFBaaWNzSUNkemIzSjBaV1JWYm1seFFua25MRnh1SUNBZ0lDZHpjR3hwZENjc0lDZHpjSEpsWVdSR2NtOXRKeXdnSjNOMFlYSjBjMWRwZEdnbkxDQW5jM1ZpZEhKaFkzUW5MQ0FuYzNWdFFua25MQ0FuZEdGclpTY3NJQ2QwWVd0bFVtbG5hSFFuTEZ4dUlDQWdJQ2QwWVd0bFVtbG5hSFJYYUdsc1pTY3NJQ2QwWVd0bFYyaHBiR1VuTENBbmRHRndKeXdnSjNSb2NtOTBkR3hsSnl3Z0ozUm9jblVuTENBbmRHbHRaWE1uTENBbmRISnBiVU5vWVhKekp5eGNiaUFnSUNBbmRISnBiVU5vWVhKelJXNWtKeXdnSjNSeWFXMURhR0Z5YzFOMFlYSjBKeXdnSjNSeWRXNWpZWFJsSnl3Z0ozVnVhVzl1Snl3Z0ozVnVhWEZDZVNjc0lDZDFibWx4VjJsMGFDY3NYRzRnSUNBZ0ozVnVjMlYwSnl3Z0ozVnVlbWx3VjJsMGFDY3NJQ2QzYVhSb2IzVjBKeXdnSjNkeVlYQW5MQ0FuZUc5eUp5d2dKM3BwY0Njc0lDZDZhWEJQWW1wbFkzUW5MRnh1SUNBZ0lDZDZhWEJQWW1wbFkzUkVaV1Z3SjF4dUlDQmRMRnh1SUNBbk15YzZJRnRjYmlBZ0lDQW5ZWE56YVdkdVNXNVhhWFJvSnl3Z0oyRnpjMmxuYmxkcGRHZ25MQ0FuWTJ4aGJYQW5MQ0FuWkdsbVptVnlaVzVqWlVKNUp5d2dKMlJwWm1abGNtVnVZMlZYYVhSb0p5eGNiaUFnSUNBblptbHVaRVp5YjIwbkxDQW5abWx1WkVsdVpHVjRSbkp2YlNjc0lDZG1hVzVrVEdGemRFWnliMjBuTENBblptbHVaRXhoYzNSSmJtUmxlRVp5YjIwbkxDQW5aMlYwVDNJbkxGeHVJQ0FnSUNkcGJtTnNkV1JsYzBaeWIyMG5MQ0FuYVc1a1pYaFBaa1p5YjIwbkxDQW5hVzVTWVc1blpTY3NJQ2RwYm5SbGNuTmxZM1JwYjI1Q2VTY3NJQ2RwYm5SbGNuTmxZM1JwYjI1WGFYUm9KeXhjYmlBZ0lDQW5hVzUyYjJ0bFFYSm5jeWNzSUNkcGJuWnZhMlZCY21kelRXRndKeXdnSjJselJYRjFZV3hYYVhSb0p5d2dKMmx6VFdGMFkyaFhhWFJvSnl3Z0oyWnNZWFJOWVhCRVpYQjBhQ2NzWEc0Z0lDQWdKMnhoYzNSSmJtUmxlRTltUm5KdmJTY3NJQ2R0WlhKblpWZHBkR2duTENBbmIzSmtaWEpDZVNjc0lDZHdZV1JEYUdGeWN5Y3NJQ2R3WVdSRGFHRnljMFZ1WkNjc1hHNGdJQ0FnSjNCaFpFTm9ZWEp6VTNSaGNuUW5MQ0FuY0hWc2JFRnNiRUo1Snl3Z0ozQjFiR3hCYkd4WGFYUm9KeXdnSjNKaGJtZGxVM1JsY0Njc0lDZHlZVzVuWlZOMFpYQlNhV2RvZENjc1hHNGdJQ0FnSjNKbFpIVmpaU2NzSUNkeVpXUjFZMlZTYVdkb2RDY3NJQ2R5WlhCc1lXTmxKeXdnSjNObGRDY3NJQ2R6YkdsalpTY3NJQ2R6YjNKMFpXUkpibVJsZUVKNUp5eGNiaUFnSUNBbmMyOXlkR1ZrVEdGemRFbHVaR1Y0UW5rbkxDQW5kSEpoYm5ObWIzSnRKeXdnSjNWdWFXOXVRbmtuTENBbmRXNXBiMjVYYVhSb0p5d2dKM1Z3WkdGMFpTY3NJQ2Q0YjNKQ2VTY3NYRzRnSUNBZ0ozaHZjbGRwZEdnbkxDQW5lbWx3VjJsMGFDZGNiaUFnWFN4Y2JpQWdKelFuT2lCYlhHNGdJQ0FnSjJacGJHd25MQ0FuYzJWMFYybDBhQ2NzSUNkMWNHUmhkR1ZYYVhSb0oxeHVJQ0JkWEc1OU8xeHVYRzR2S2lvZ1ZYTmxaQ0IwYnlCdFlYQWdZWEo1SUhSdklISmxZWEpuSUdOdmJtWnBaM011SUNvdlhHNWxlSEJ2Y25SekxtRnllVkpsWVhKbklEMGdlMXh1SUNBbk1pYzZJRnN4TENBd1hTeGNiaUFnSnpNbk9pQmJNaXdnTUN3Z01WMHNYRzRnSUNjMEp6b2dXek1zSURJc0lEQXNJREZkWEc1OU8xeHVYRzR2S2lvZ1ZYTmxaQ0IwYnlCdFlYQWdiV1YwYUc5a0lHNWhiV1Z6SUhSdklIUm9aV2x5SUdsMFpYSmhkR1ZsSUdGeWVTNGdLaTljYm1WNGNHOXlkSE11YVhSbGNtRjBaV1ZCY25rZ1BTQjdYRzRnSUNka2NtOXdVbWxuYUhSWGFHbHNaU2M2SURFc1hHNGdJQ2RrY205d1YyaHBiR1VuT2lBeExGeHVJQ0FuWlhabGNua25PaUF4TEZ4dUlDQW5abWxzZEdWeUp6b2dNU3hjYmlBZ0oyWnBibVFuT2lBeExGeHVJQ0FuWm1sdVpFWnliMjBuT2lBeExGeHVJQ0FuWm1sdVpFbHVaR1Y0SnpvZ01TeGNiaUFnSjJacGJtUkpibVJsZUVaeWIyMG5PaUF4TEZ4dUlDQW5abWx1WkV0bGVTYzZJREVzWEc0Z0lDZG1hVzVrVEdGemRDYzZJREVzWEc0Z0lDZG1hVzVrVEdGemRFWnliMjBuT2lBeExGeHVJQ0FuWm1sdVpFeGhjM1JKYm1SbGVDYzZJREVzWEc0Z0lDZG1hVzVrVEdGemRFbHVaR1Y0Um5KdmJTYzZJREVzWEc0Z0lDZG1hVzVrVEdGemRFdGxlU2M2SURFc1hHNGdJQ2RtYkdGMFRXRndKem9nTVN4Y2JpQWdKMlpzWVhSTllYQkVaV1Z3SnpvZ01TeGNiaUFnSjJac1lYUk5ZWEJFWlhCMGFDYzZJREVzWEc0Z0lDZG1iM0pGWVdOb0p6b2dNU3hjYmlBZ0oyWnZja1ZoWTJoU2FXZG9kQ2M2SURFc1hHNGdJQ2RtYjNKSmJpYzZJREVzWEc0Z0lDZG1iM0pKYmxKcFoyaDBKem9nTVN4Y2JpQWdKMlp2Y2s5M2JpYzZJREVzWEc0Z0lDZG1iM0pQZDI1U2FXZG9kQ2M2SURFc1hHNGdJQ2R0WVhBbk9pQXhMRnh1SUNBbmJXRndTMlY1Y3ljNklERXNYRzRnSUNkdFlYQldZV3gxWlhNbk9pQXhMRnh1SUNBbmNHRnlkR2wwYVc5dUp6b2dNU3hjYmlBZ0ozSmxaSFZqWlNjNklESXNYRzRnSUNkeVpXUjFZMlZTYVdkb2RDYzZJRElzWEc0Z0lDZHlaV3BsWTNRbk9pQXhMRnh1SUNBbmNtVnRiM1psSnpvZ01TeGNiaUFnSjNOdmJXVW5PaUF4TEZ4dUlDQW5kR0ZyWlZKcFoyaDBWMmhwYkdVbk9pQXhMRnh1SUNBbmRHRnJaVmRvYVd4bEp6b2dNU3hjYmlBZ0ozUnBiV1Z6SnpvZ01TeGNiaUFnSjNSeVlXNXpabTl5YlNjNklESmNibjA3WEc1Y2JpOHFLaUJWYzJWa0lIUnZJRzFoY0NCdFpYUm9iMlFnYm1GdFpYTWdkRzhnYVhSbGNtRjBaV1VnY21WaGNtY2dZMjl1Wm1sbmN5NGdLaTljYm1WNGNHOXlkSE11YVhSbGNtRjBaV1ZTWldGeVp5QTlJSHRjYmlBZ0oyMWhjRXRsZVhNbk9pQmJNVjBzWEc0Z0lDZHlaV1IxWTJWU2FXZG9kQ2M2SUZzeExDQXdYVnh1ZlR0Y2JseHVMeW9xSUZWelpXUWdkRzhnYldGd0lHMWxkR2h2WkNCdVlXMWxjeUIwYnlCeVpXRnlaeUJqYjI1bWFXZHpMaUFxTDF4dVpYaHdiM0owY3k1dFpYUm9iMlJTWldGeVp5QTlJSHRjYmlBZ0oyRnpjMmxuYmtsdVFXeHNWMmwwYUNjNklGc3hMQ0F3WFN4Y2JpQWdKMkZ6YzJsbmJrbHVWMmwwYUNjNklGc3hMQ0F5TENBd1hTeGNiaUFnSjJGemMybG5ia0ZzYkZkcGRHZ25PaUJiTVN3Z01GMHNYRzRnSUNkaGMzTnBaMjVYYVhSb0p6b2dXekVzSURJc0lEQmRMRnh1SUNBblpHbG1abVZ5Wlc1alpVSjVKem9nV3pFc0lESXNJREJkTEZ4dUlDQW5aR2xtWm1WeVpXNWpaVmRwZEdnbk9pQmJNU3dnTWl3Z01GMHNYRzRnSUNkblpYUlBjaWM2SUZzeUxDQXhMQ0F3WFN4Y2JpQWdKMmx1ZEdWeWMyVmpkR2x2YmtKNUp6b2dXekVzSURJc0lEQmRMRnh1SUNBbmFXNTBaWEp6WldOMGFXOXVWMmwwYUNjNklGc3hMQ0F5TENBd1hTeGNiaUFnSjJselJYRjFZV3hYYVhSb0p6b2dXekVzSURJc0lEQmRMRnh1SUNBbmFYTk5ZWFJqYUZkcGRHZ25PaUJiTWl3Z01Td2dNRjBzWEc0Z0lDZHRaWEpuWlVGc2JGZHBkR2duT2lCYk1Td2dNRjBzWEc0Z0lDZHRaWEpuWlZkcGRHZ25PaUJiTVN3Z01pd2dNRjBzWEc0Z0lDZHdZV1JEYUdGeWN5YzZJRnN5TENBeExDQXdYU3hjYmlBZ0ozQmhaRU5vWVhKelJXNWtKem9nV3pJc0lERXNJREJkTEZ4dUlDQW5jR0ZrUTJoaGNuTlRkR0Z5ZENjNklGc3lMQ0F4TENBd1hTeGNiaUFnSjNCMWJHeEJiR3hDZVNjNklGc3lMQ0F4TENBd1hTeGNiaUFnSjNCMWJHeEJiR3hYYVhSb0p6b2dXeklzSURFc0lEQmRMRnh1SUNBbmNtRnVaMlZUZEdWd0p6b2dXekVzSURJc0lEQmRMRnh1SUNBbmNtRnVaMlZUZEdWd1VtbG5hSFFuT2lCYk1Td2dNaXdnTUYwc1hHNGdJQ2R6WlhSWGFYUm9Kem9nV3pNc0lERXNJRElzSURCZExGeHVJQ0FuYzI5eWRHVmtTVzVrWlhoQ2VTYzZJRnN5TENBeExDQXdYU3hjYmlBZ0ozTnZjblJsWkV4aGMzUkpibVJsZUVKNUp6b2dXeklzSURFc0lEQmRMRnh1SUNBbmRXNXBiMjVDZVNjNklGc3hMQ0F5TENBd1hTeGNiaUFnSjNWdWFXOXVWMmwwYUNjNklGc3hMQ0F5TENBd1hTeGNiaUFnSjNWd1pHRjBaVmRwZEdnbk9pQmJNeXdnTVN3Z01pd2dNRjBzWEc0Z0lDZDRiM0pDZVNjNklGc3hMQ0F5TENBd1hTeGNiaUFnSjNodmNsZHBkR2duT2lCYk1Td2dNaXdnTUYwc1hHNGdJQ2Q2YVhCWGFYUm9Kem9nV3pFc0lESXNJREJkWEc1OU8xeHVYRzR2S2lvZ1ZYTmxaQ0IwYnlCdFlYQWdiV1YwYUc5a0lHNWhiV1Z6SUhSdklITndjbVZoWkNCamIyNW1hV2R6TGlBcUwxeHVaWGh3YjNKMGN5NXRaWFJvYjJSVGNISmxZV1FnUFNCN1hHNGdJQ2RoYzNOcFoyNUJiR3duT2lCN0lDZHpkR0Z5ZENjNklEQWdmU3hjYmlBZ0oyRnpjMmxuYmtGc2JGZHBkR2duT2lCN0lDZHpkR0Z5ZENjNklEQWdmU3hjYmlBZ0oyRnpjMmxuYmtsdVFXeHNKem9nZXlBbmMzUmhjblFuT2lBd0lIMHNYRzRnSUNkaGMzTnBaMjVKYmtGc2JGZHBkR2duT2lCN0lDZHpkR0Z5ZENjNklEQWdmU3hjYmlBZ0oyUmxabUYxYkhSelFXeHNKem9nZXlBbmMzUmhjblFuT2lBd0lIMHNYRzRnSUNka1pXWmhkV3gwYzBSbFpYQkJiR3duT2lCN0lDZHpkR0Z5ZENjNklEQWdmU3hjYmlBZ0oybHVkbTlyWlVGeVozTW5PaUI3SUNkemRHRnlkQ2M2SURJZ2ZTeGNiaUFnSjJsdWRtOXJaVUZ5WjNOTllYQW5PaUI3SUNkemRHRnlkQ2M2SURJZ2ZTeGNiaUFnSjIxbGNtZGxRV3hzSnpvZ2V5QW5jM1JoY25Rbk9pQXdJSDBzWEc0Z0lDZHRaWEpuWlVGc2JGZHBkR2duT2lCN0lDZHpkR0Z5ZENjNklEQWdmU3hjYmlBZ0ozQmhjblJwWVd3bk9pQjdJQ2R6ZEdGeWRDYzZJREVnZlN4Y2JpQWdKM0JoY25ScFlXeFNhV2RvZENjNklIc2dKM04wWVhKMEp6b2dNU0I5TEZ4dUlDQW5kMmwwYUc5MWRDYzZJSHNnSjNOMFlYSjBKem9nTVNCOUxGeHVJQ0FuZW1sd1FXeHNKem9nZXlBbmMzUmhjblFuT2lBd0lIMWNibjA3WEc1Y2JpOHFLaUJWYzJWa0lIUnZJR2xrWlc1MGFXWjVJRzFsZEdodlpITWdkMmhwWTJnZ2JYVjBZWFJsSUdGeWNtRjVjeUJ2Y2lCdlltcGxZM1J6TGlBcUwxeHVaWGh3YjNKMGN5NXRkWFJoZEdVZ1BTQjdYRzRnSUNkaGNuSmhlU2M2SUh0Y2JpQWdJQ0FuWm1sc2JDYzZJSFJ5ZFdVc1hHNGdJQ0FnSjNCMWJHd25PaUIwY25WbExGeHVJQ0FnSUNkd2RXeHNRV3hzSnpvZ2RISjFaU3hjYmlBZ0lDQW5jSFZzYkVGc2JFSjVKem9nZEhKMVpTeGNiaUFnSUNBbmNIVnNiRUZzYkZkcGRHZ25PaUIwY25WbExGeHVJQ0FnSUNkd2RXeHNRWFFuT2lCMGNuVmxMRnh1SUNBZ0lDZHlaVzF2ZG1Vbk9pQjBjblZsTEZ4dUlDQWdJQ2R5WlhabGNuTmxKem9nZEhKMVpWeHVJQ0I5TEZ4dUlDQW5iMkpxWldOMEp6b2dlMXh1SUNBZ0lDZGhjM05wWjI0bk9pQjBjblZsTEZ4dUlDQWdJQ2RoYzNOcFoyNUJiR3duT2lCMGNuVmxMRnh1SUNBZ0lDZGhjM05wWjI1QmJHeFhhWFJvSnpvZ2RISjFaU3hjYmlBZ0lDQW5ZWE56YVdkdVNXNG5PaUIwY25WbExGeHVJQ0FnSUNkaGMzTnBaMjVKYmtGc2JDYzZJSFJ5ZFdVc1hHNGdJQ0FnSjJGemMybG5ia2x1UVd4c1YybDBhQ2M2SUhSeWRXVXNYRzRnSUNBZ0oyRnpjMmxuYmtsdVYybDBhQ2M2SUhSeWRXVXNYRzRnSUNBZ0oyRnpjMmxuYmxkcGRHZ25PaUIwY25WbExGeHVJQ0FnSUNka1pXWmhkV3gwY3ljNklIUnlkV1VzWEc0Z0lDQWdKMlJsWm1GMWJIUnpRV3hzSnpvZ2RISjFaU3hjYmlBZ0lDQW5aR1ZtWVhWc2RITkVaV1Z3SnpvZ2RISjFaU3hjYmlBZ0lDQW5aR1ZtWVhWc2RITkVaV1Z3UVd4c0p6b2dkSEoxWlN4Y2JpQWdJQ0FuYldWeVoyVW5PaUIwY25WbExGeHVJQ0FnSUNkdFpYSm5aVUZzYkNjNklIUnlkV1VzWEc0Z0lDQWdKMjFsY21kbFFXeHNWMmwwYUNjNklIUnlkV1VzWEc0Z0lDQWdKMjFsY21kbFYybDBhQ2M2SUhSeWRXVXNYRzRnSUgwc1hHNGdJQ2R6WlhRbk9pQjdYRzRnSUNBZ0ozTmxkQ2M2SUhSeWRXVXNYRzRnSUNBZ0ozTmxkRmRwZEdnbk9pQjBjblZsTEZ4dUlDQWdJQ2QxYm5ObGRDYzZJSFJ5ZFdVc1hHNGdJQ0FnSjNWd1pHRjBaU2M2SUhSeWRXVXNYRzRnSUNBZ0ozVndaR0YwWlZkcGRHZ25PaUIwY25WbFhHNGdJSDFjYm4wN1hHNWNiaThxS2lCVmMyVmtJSFJ2SUcxaGNDQnlaV0ZzSUc1aGJXVnpJSFJ2SUhSb1pXbHlJR0ZzYVdGelpYTXVJQ292WEc1bGVIQnZjblJ6TG5KbFlXeFViMEZzYVdGeklEMGdLR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQjJZWElnYUdGelQzZHVVSEp2Y0dWeWRIa2dQU0JQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMbWhoYzA5M2JsQnliM0JsY25SNUxGeHVJQ0FnSUNBZ2IySnFaV04wSUQwZ1pYaHdiM0owY3k1aGJHbGhjMVJ2VW1WaGJDeGNiaUFnSUNBZ0lISmxjM1ZzZENBOUlIdDlPMXh1WEc0Z0lHWnZjaUFvZG1GeUlHdGxlU0JwYmlCdlltcGxZM1FwSUh0Y2JpQWdJQ0IyWVhJZ2RtRnNkV1VnUFNCdlltcGxZM1JiYTJWNVhUdGNiaUFnSUNCcFppQW9hR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2h5WlhOMWJIUXNJSFpoYkhWbEtTa2dlMXh1SUNBZ0lDQWdjbVZ6ZFd4MFczWmhiSFZsWFM1d2RYTm9LR3RsZVNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSEpsYzNWc2RGdDJZV3gxWlYwZ1BTQmJhMlY1WFR0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnY21WMGRYSnVJSEpsYzNWc2REdGNibjBvS1NrN1hHNWNiaThxS2lCVmMyVmtJSFJ2SUcxaGNDQnRaWFJvYjJRZ2JtRnRaWE1nZEc4Z2IzUm9aWElnYm1GdFpYTXVJQ292WEc1bGVIQnZjblJ6TG5KbGJXRndJRDBnZTF4dUlDQW5ZWE56YVdkdVFXeHNKem9nSjJGemMybG5iaWNzWEc0Z0lDZGhjM05wWjI1QmJHeFhhWFJvSnpvZ0oyRnpjMmxuYmxkcGRHZ25MRnh1SUNBbllYTnphV2R1U1c1QmJHd25PaUFuWVhOemFXZHVTVzRuTEZ4dUlDQW5ZWE56YVdkdVNXNUJiR3hYYVhSb0p6b2dKMkZ6YzJsbmJrbHVWMmwwYUNjc1hHNGdJQ2RqZFhKeWVVNG5PaUFuWTNWeWNua25MRnh1SUNBblkzVnljbmxTYVdkb2RFNG5PaUFuWTNWeWNubFNhV2RvZENjc1hHNGdJQ2RrWldaaGRXeDBjMEZzYkNjNklDZGtaV1poZFd4MGN5Y3NYRzRnSUNka1pXWmhkV3gwYzBSbFpYQkJiR3duT2lBblpHVm1ZWFZzZEhORVpXVndKeXhjYmlBZ0oyWnBibVJHY205dEp6b2dKMlpwYm1RbkxGeHVJQ0FuWm1sdVpFbHVaR1Y0Um5KdmJTYzZJQ2RtYVc1a1NXNWtaWGduTEZ4dUlDQW5abWx1WkV4aGMzUkdjbTl0SnpvZ0oyWnBibVJNWVhOMEp5eGNiaUFnSjJacGJtUk1ZWE4wU1c1a1pYaEdjbTl0SnpvZ0oyWnBibVJNWVhOMFNXNWtaWGduTEZ4dUlDQW5aMlYwVDNJbk9pQW5aMlYwSnl4Y2JpQWdKMmx1WTJ4MVpHVnpSbkp2YlNjNklDZHBibU5zZFdSbGN5Y3NYRzRnSUNkcGJtUmxlRTltUm5KdmJTYzZJQ2RwYm1SbGVFOW1KeXhjYmlBZ0oybHVkbTlyWlVGeVozTW5PaUFuYVc1MmIydGxKeXhjYmlBZ0oybHVkbTlyWlVGeVozTk5ZWEFuT2lBbmFXNTJiMnRsVFdGd0p5eGNiaUFnSjJ4aGMzUkpibVJsZUU5bVJuSnZiU2M2SUNkc1lYTjBTVzVrWlhoUFppY3NYRzRnSUNkdFpYSm5aVUZzYkNjNklDZHRaWEpuWlNjc1hHNGdJQ2R0WlhKblpVRnNiRmRwZEdnbk9pQW5iV1Z5WjJWWGFYUm9KeXhjYmlBZ0ozQmhaRU5vWVhKekp6b2dKM0JoWkNjc1hHNGdJQ2R3WVdSRGFHRnljMFZ1WkNjNklDZHdZV1JGYm1RbkxGeHVJQ0FuY0dGa1EyaGhjbk5UZEdGeWRDYzZJQ2R3WVdSVGRHRnlkQ2NzWEc0Z0lDZHdjbTl3WlhKMGVVOW1Kem9nSjJkbGRDY3NYRzRnSUNkeVlXNW5aVk4wWlhBbk9pQW5jbUZ1WjJVbkxGeHVJQ0FuY21GdVoyVlRkR1Z3VW1sbmFIUW5PaUFuY21GdVoyVlNhV2RvZENjc1hHNGdJQ2R5WlhOMFJuSnZiU2M2SUNkeVpYTjBKeXhjYmlBZ0ozTndjbVZoWkVaeWIyMG5PaUFuYzNCeVpXRmtKeXhjYmlBZ0ozUnlhVzFEYUdGeWN5YzZJQ2QwY21sdEp5eGNiaUFnSjNSeWFXMURhR0Z5YzBWdVpDYzZJQ2QwY21sdFJXNWtKeXhjYmlBZ0ozUnlhVzFEYUdGeWMxTjBZWEowSnpvZ0ozUnlhVzFUZEdGeWRDY3NYRzRnSUNkNmFYQkJiR3duT2lBbmVtbHdKMXh1ZlR0Y2JseHVMeW9xSUZWelpXUWdkRzhnZEhKaFkyc2diV1YwYUc5a2N5QjBhR0YwSUhOcmFYQWdabWw0YVc1bklIUm9aV2x5SUdGeWFYUjVMaUFxTDF4dVpYaHdiM0owY3k1emEybHdSbWw0WldRZ1BTQjdYRzRnSUNkallYTjBRWEp5WVhrbk9pQjBjblZsTEZ4dUlDQW5abXh2ZHljNklIUnlkV1VzWEc0Z0lDZG1iRzkzVW1sbmFIUW5PaUIwY25WbExGeHVJQ0FuYVhSbGNtRjBaV1VuT2lCMGNuVmxMRnh1SUNBbmJXbDRhVzRuT2lCMGNuVmxMRnh1SUNBbmNtVmhjbWNuT2lCMGNuVmxMRnh1SUNBbmNuVnVTVzVEYjI1MFpYaDBKem9nZEhKMVpWeHVmVHRjYmx4dUx5b3FJRlZ6WldRZ2RHOGdkSEpoWTJzZ2JXVjBhRzlrY3lCMGFHRjBJSE5yYVhBZ2NtVmhjbkpoYm1kcGJtY2dZWEpuZFcxbGJuUnpMaUFxTDF4dVpYaHdiM0owY3k1emEybHdVbVZoY21jZ1BTQjdYRzRnSUNkaFpHUW5PaUIwY25WbExGeHVJQ0FuWVhOemFXZHVKem9nZEhKMVpTeGNiaUFnSjJGemMybG5ia2x1SnpvZ2RISjFaU3hjYmlBZ0oySnBibVFuT2lCMGNuVmxMRnh1SUNBblltbHVaRXRsZVNjNklIUnlkV1VzWEc0Z0lDZGpiMjVqWVhRbk9pQjBjblZsTEZ4dUlDQW5aR2xtWm1WeVpXNWpaU2M2SUhSeWRXVXNYRzRnSUNka2FYWnBaR1VuT2lCMGNuVmxMRnh1SUNBblpYRW5PaUIwY25WbExGeHVJQ0FuWjNRbk9pQjBjblZsTEZ4dUlDQW5aM1JsSnpvZ2RISjFaU3hjYmlBZ0oybHpSWEYxWVd3bk9pQjBjblZsTEZ4dUlDQW5iSFFuT2lCMGNuVmxMRnh1SUNBbmJIUmxKem9nZEhKMVpTeGNiaUFnSjIxaGRHTm9aWE5RY205d1pYSjBlU2M2SUhSeWRXVXNYRzRnSUNkdFpYSm5aU2M2SUhSeWRXVXNYRzRnSUNkdGRXeDBhWEJzZVNjNklIUnlkV1VzWEc0Z0lDZHZkbVZ5UVhKbmN5YzZJSFJ5ZFdVc1hHNGdJQ2R3WVhKMGFXRnNKem9nZEhKMVpTeGNiaUFnSjNCaGNuUnBZV3hTYVdkb2RDYzZJSFJ5ZFdVc1hHNGdJQ2R3Y205d1pYSjBlVTltSnpvZ2RISjFaU3hjYmlBZ0ozSmhibVJ2YlNjNklIUnlkV1VzWEc0Z0lDZHlZVzVuWlNjNklIUnlkV1VzWEc0Z0lDZHlZVzVuWlZKcFoyaDBKem9nZEhKMVpTeGNiaUFnSjNOMVluUnlZV04wSnpvZ2RISjFaU3hjYmlBZ0ozcHBjQ2M2SUhSeWRXVXNYRzRnSUNkNmFYQlBZbXBsWTNRbk9pQjBjblZsTEZ4dUlDQW5lbWx3VDJKcVpXTjBSR1ZsY0NjNklIUnlkV1ZjYm4wN1hHNGlMQ0l2S2lwY2JpQXFJRlJvWlNCa1pXWmhkV3gwSUdGeVozVnRaVzUwSUhCc1lXTmxhRzlzWkdWeUlIWmhiSFZsSUdadmNpQnRaWFJvYjJSekxseHVJQ3BjYmlBcUlFQjBlWEJsSUh0UFltcGxZM1I5WEc0Z0tpOWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdlMzA3WEc0aUxDSjJZWElnYldGd2NHbHVaeUE5SUhKbGNYVnBjbVVvSnk0dlgyMWhjSEJwYm1jbktTeGNiaUFnSUNCbVlXeHNZbUZqYTBodmJHUmxjaUE5SUhKbGNYVnBjbVVvSnk0dmNHeGhZMlZvYjJ4a1pYSW5LVHRjYmx4dUx5b3FJRUoxYVd4MExXbHVJSFpoYkhWbElISmxabVZ5Wlc1alpTNGdLaTljYm5aaGNpQndkWE5vSUQwZ1FYSnlZWGt1Y0hKdmRHOTBlWEJsTG5CMWMyZzdYRzVjYmk4cUtseHVJQ29nUTNKbFlYUmxjeUJoSUdaMWJtTjBhVzl1TENCM2FYUm9JR0Z1SUdGeWFYUjVJRzltSUdCdVlDd2dkR2hoZENCcGJuWnZhMlZ6SUdCbWRXNWpZQ0IzYVhSb0lIUm9aVnh1SUNvZ1lYSm5kVzFsYm5SeklHbDBJSEpsWTJWcGRtVnpMbHh1SUNwY2JpQXFJRUJ3Y21sMllYUmxYRzRnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCbWRXNWpJRlJvWlNCbWRXNWpkR2x2YmlCMGJ5QjNjbUZ3TGx4dUlDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlHNGdWR2hsSUdGeWFYUjVJRzltSUhSb1pTQnVaWGNnWm5WdVkzUnBiMjR1WEc0Z0tpQkFjbVYwZFhKdWN5QjdSblZ1WTNScGIyNTlJRkpsZEhWeWJuTWdkR2hsSUc1bGR5Qm1kVzVqZEdsdmJpNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1ltRnpaVUZ5YVhSNUtHWjFibU1zSUc0cElIdGNiaUFnY21WMGRYSnVJRzRnUFQwZ01seHVJQ0FnSUQ4Z1puVnVZM1JwYjI0b1lTd2dZaWtnZXlCeVpYUjFjbTRnWm5WdVl5NWhjSEJzZVNoMWJtUmxabWx1WldRc0lHRnlaM1Z0Wlc1MGN5azdJSDFjYmlBZ0lDQTZJR1oxYm1OMGFXOXVLR0VwSUhzZ2NtVjBkWEp1SUdaMWJtTXVZWEJ3Ykhrb2RXNWtaV1pwYm1Wa0xDQmhjbWQxYldWdWRITXBPeUI5TzF4dWZWeHVYRzR2S2lwY2JpQXFJRU55WldGMFpYTWdZU0JtZFc1amRHbHZiaUIwYUdGMElHbHVkbTlyWlhNZ1lHWjFibU5nTENCM2FYUm9JSFZ3SUhSdklHQnVZQ0JoY21kMWJXVnVkSE1zSUdsbmJtOXlhVzVuWEc0Z0tpQmhibmtnWVdSa2FYUnBiMjVoYkNCaGNtZDFiV1Z1ZEhNdVhHNGdLbHh1SUNvZ1FIQnlhWFpoZEdWY2JpQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJR1oxYm1NZ1ZHaGxJR1oxYm1OMGFXOXVJSFJ2SUdOaGNDQmhjbWQxYldWdWRITWdabTl5TGx4dUlDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlHNGdWR2hsSUdGeWFYUjVJR05oY0M1Y2JpQXFJRUJ5WlhSMWNtNXpJSHRHZFc1amRHbHZibjBnVW1WMGRYSnVjeUIwYUdVZ2JtVjNJR1oxYm1OMGFXOXVMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQmlZWE5sUVhKNUtHWjFibU1zSUc0cElIdGNiaUFnY21WMGRYSnVJRzRnUFQwZ01seHVJQ0FnSUQ4Z1puVnVZM1JwYjI0b1lTd2dZaWtnZXlCeVpYUjFjbTRnWm5WdVl5aGhMQ0JpS1RzZ2ZWeHVJQ0FnSURvZ1puVnVZM1JwYjI0b1lTa2dleUJ5WlhSMWNtNGdablZ1WXloaEtUc2dmVHRjYm4xY2JseHVMeW9xWEc0Z0tpQkRjbVZoZEdWeklHRWdZMnh2Ym1VZ2IyWWdZR0Z5Y21GNVlDNWNiaUFxWEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ29nUUhCaGNtRnRJSHRCY25KaGVYMGdZWEp5WVhrZ1ZHaGxJR0Z5Y21GNUlIUnZJR05zYjI1bExseHVJQ29nUUhKbGRIVnlibk1nZTBGeWNtRjVmU0JTWlhSMWNtNXpJSFJvWlNCamJHOXVaV1FnWVhKeVlYa3VYRzRnS2k5Y2JtWjFibU4wYVc5dUlHTnNiMjVsUVhKeVlYa29ZWEp5WVhrcElIdGNiaUFnZG1GeUlHeGxibWQwYUNBOUlHRnljbUY1SUQ4Z1lYSnlZWGt1YkdWdVozUm9JRG9nTUN4Y2JpQWdJQ0FnSUhKbGMzVnNkQ0E5SUVGeWNtRjVLR3hsYm1kMGFDazdYRzVjYmlBZ2QyaHBiR1VnS0d4bGJtZDBhQzB0S1NCN1hHNGdJQ0FnY21WemRXeDBXMnhsYm1kMGFGMGdQU0JoY25KaGVWdHNaVzVuZEdoZE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCeVpYTjFiSFE3WEc1OVhHNWNiaThxS2x4dUlDb2dRM0psWVhSbGN5QmhJR1oxYm1OMGFXOXVJSFJvWVhRZ1kyeHZibVZ6SUdFZ1oybDJaVzRnYjJKcVpXTjBJSFZ6YVc1bklIUm9aU0JoYzNOcFoyNXRaVzUwSUdCbWRXNWpZQzVjYmlBcVhHNGdLaUJBY0hKcGRtRjBaVnh1SUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym4wZ1puVnVZeUJVYUdVZ1lYTnphV2R1YldWdWRDQm1kVzVqZEdsdmJpNWNiaUFxSUVCeVpYUjFjbTV6SUh0R2RXNWpkR2x2Ym4wZ1VtVjBkWEp1Y3lCMGFHVWdibVYzSUdOc2IyNWxjaUJtZFc1amRHbHZiaTVjYmlBcUwxeHVablZ1WTNScGIyNGdZM0psWVhSbFEyeHZibVZ5S0daMWJtTXBJSHRjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1S0c5aWFtVmpkQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQm1kVzVqS0h0OUxDQnZZbXBsWTNRcE8xeHVJQ0I5TzF4dWZWeHVYRzR2S2lwY2JpQXFJRUVnYzNCbFkybGhiR2w2WldRZ2RtVnljMmx2YmlCdlppQmdYeTV6Y0hKbFlXUmdJSGRvYVdOb0lHWnNZWFIwWlc1eklIUm9aU0J6Y0hKbFlXUWdZWEp5WVhrZ2FXNTBiMXh1SUNvZ2RHaGxJR0Z5WjNWdFpXNTBjeUJ2WmlCMGFHVWdhVzUyYjJ0bFpDQmdablZ1WTJBdVhHNGdLbHh1SUNvZ1FIQnlhWFpoZEdWY2JpQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJR1oxYm1NZ1ZHaGxJR1oxYm1OMGFXOXVJSFJ2SUhOd2NtVmhaQ0JoY21kMWJXVnVkSE1nYjNabGNpNWNiaUFxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0J6ZEdGeWRDQlVhR1VnYzNSaGNuUWdjRzl6YVhScGIyNGdiMllnZEdobElITndjbVZoWkM1Y2JpQXFJRUJ5WlhSMWNtNXpJSHRHZFc1amRHbHZibjBnVW1WMGRYSnVjeUIwYUdVZ2JtVjNJR1oxYm1OMGFXOXVMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQm1iR0YwVTNCeVpXRmtLR1oxYm1Nc0lITjBZWEowS1NCN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQjJZWElnYkdWdVozUm9JRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ3hjYmlBZ0lDQWdJQ0FnYkdGemRFbHVaR1Y0SUQwZ2JHVnVaM1JvSUMwZ01TeGNiaUFnSUNBZ0lDQWdZWEpuY3lBOUlFRnljbUY1S0d4bGJtZDBhQ2s3WEc1Y2JpQWdJQ0IzYUdsc1pTQW9iR1Z1WjNSb0xTMHBJSHRjYmlBZ0lDQWdJR0Z5WjNOYmJHVnVaM1JvWFNBOUlHRnlaM1Z0Wlc1MGMxdHNaVzVuZEdoZE8xeHVJQ0FnSUgxY2JpQWdJQ0IyWVhJZ1lYSnlZWGtnUFNCaGNtZHpXM04wWVhKMFhTeGNiaUFnSUNBZ0lDQWdiM1JvWlhKQmNtZHpJRDBnWVhKbmN5NXpiR2xqWlNnd0xDQnpkR0Z5ZENrN1hHNWNiaUFnSUNCcFppQW9ZWEp5WVhrcElIdGNiaUFnSUNBZ0lIQjFjMmd1WVhCd2JIa29iM1JvWlhKQmNtZHpMQ0JoY25KaGVTazdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHpkR0Z5ZENBaFBTQnNZWE4wU1c1a1pYZ3BJSHRjYmlBZ0lDQWdJSEIxYzJndVlYQndiSGtvYjNSb1pYSkJjbWR6TENCaGNtZHpMbk5zYVdObEtITjBZWEowSUNzZ01Ta3BPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnWm5WdVl5NWhjSEJzZVNoMGFHbHpMQ0J2ZEdobGNrRnlaM01wTzF4dUlDQjlPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFTnlaV0YwWlhNZ1lTQm1kVzVqZEdsdmJpQjBhR0YwSUhkeVlYQnpJR0JtZFc1allDQmhibVFnZFhObGN5QmdZMnh2Ym1WeVlDQjBieUJqYkc5dVpTQjBhR1VnWm1seWMzUmNiaUFxSUdGeVozVnRaVzUwSUdsMElISmxZMlZwZG1WekxseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0JtZFc1aklGUm9aU0JtZFc1amRHbHZiaUIwYnlCM2NtRndMbHh1SUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym4wZ1kyeHZibVZ5SUZSb1pTQm1kVzVqZEdsdmJpQjBieUJqYkc5dVpTQmhjbWQxYldWdWRITXVYRzRnS2lCQWNtVjBkWEp1Y3lCN1JuVnVZM1JwYjI1OUlGSmxkSFZ5Ym5NZ2RHaGxJRzVsZHlCcGJXMTFkR0ZpYkdVZ1puVnVZM1JwYjI0dVhHNGdLaTljYm1aMWJtTjBhVzl1SUhkeVlYQkpiVzExZEdGaWJHVW9ablZ1WXl3Z1kyeHZibVZ5S1NCN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQjJZWElnYkdWdVozUm9JRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhRHRjYmlBZ0lDQnBaaUFvSVd4bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNiaUFnSUNCMllYSWdZWEpuY3lBOUlFRnljbUY1S0d4bGJtZDBhQ2s3WEc0Z0lDQWdkMmhwYkdVZ0tHeGxibWQwYUMwdEtTQjdYRzRnSUNBZ0lDQmhjbWR6VzJ4bGJtZDBhRjBnUFNCaGNtZDFiV1Z1ZEhOYmJHVnVaM1JvWFR0Y2JpQWdJQ0I5WEc0Z0lDQWdkbUZ5SUhKbGMzVnNkQ0E5SUdGeVozTmJNRjBnUFNCamJHOXVaWEl1WVhCd2JIa29kVzVrWldacGJtVmtMQ0JoY21kektUdGNiaUFnSUNCbWRXNWpMbUZ3Y0d4NUtIVnVaR1ZtYVc1bFpDd2dZWEpuY3lrN1hHNGdJQ0FnY21WMGRYSnVJSEpsYzNWc2REdGNiaUFnZlR0Y2JuMWNibHh1THlvcVhHNGdLaUJVYUdVZ1ltRnpaU0JwYlhCc1pXMWxiblJoZEdsdmJpQnZaaUJnWTI5dWRtVnlkR0FnZDJocFkyZ2dZV05qWlhCMGN5QmhJR0IxZEdsc1lDQnZZbXBsWTNRZ2IyWWdiV1YwYUc5a2MxeHVJQ29nY21WeGRXbHlaV1FnZEc4Z2NHVnlabTl5YlNCamIyNTJaWEp6YVc5dWN5NWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2RYUnBiQ0JVYUdVZ2RYUnBiQ0J2WW1wbFkzUXVYRzRnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYm1GdFpTQlVhR1VnYm1GdFpTQnZaaUIwYUdVZ1puVnVZM1JwYjI0Z2RHOGdZMjl1ZG1WeWRDNWNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdaMWJtTWdWR2hsSUdaMWJtTjBhVzl1SUhSdklHTnZiblpsY25RdVhHNGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdXMjl3ZEdsdmJuTmRJRlJvWlNCdmNIUnBiMjV6SUc5aWFtVmpkQzVjYmlBcUlFQndZWEpoYlNCN1ltOXZiR1ZoYm4wZ1cyOXdkR2x2Ym5NdVkyRndQWFJ5ZFdWZElGTndaV05wWm5rZ1kyRndjR2x1WnlCcGRHVnlZWFJsWlNCaGNtZDFiV1Z1ZEhNdVhHNGdLaUJBY0dGeVlXMGdlMkp2YjJ4bFlXNTlJRnR2Y0hScGIyNXpMbU4xY25KNVBYUnlkV1ZkSUZOd1pXTnBabmtnWTNWeWNubHBibWN1WEc0Z0tpQkFjR0Z5WVcwZ2UySnZiMnhsWVc1OUlGdHZjSFJwYjI1ekxtWnBlR1ZrUFhSeWRXVmRJRk53WldOcFpua2dabWw0WldRZ1lYSnBkSGt1WEc0Z0tpQkFjR0Z5WVcwZ2UySnZiMnhsWVc1OUlGdHZjSFJwYjI1ekxtbHRiWFYwWVdKc1pUMTBjblZsWFNCVGNHVmphV1o1SUdsdGJYVjBZV0pzWlNCdmNHVnlZWFJwYjI1ekxseHVJQ29nUUhCaGNtRnRJSHRpYjI5c1pXRnVmU0JiYjNCMGFXOXVjeTV5WldGeVp6MTBjblZsWFNCVGNHVmphV1o1SUhKbFlYSnlZVzVuYVc1bklHRnlaM1Z0Wlc1MGN5NWNiaUFxSUVCeVpYUjFjbTV6SUh0R2RXNWpkR2x2Ym54UFltcGxZM1I5SUZKbGRIVnlibk1nZEdobElHTnZiblpsY25SbFpDQm1kVzVqZEdsdmJpQnZjaUJ2WW1wbFkzUXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHSmhjMlZEYjI1MlpYSjBLSFYwYVd3c0lHNWhiV1VzSUdaMWJtTXNJRzl3ZEdsdmJuTXBJSHRjYmlBZ2RtRnlJR2x6VEdsaUlEMGdkSGx3Wlc5bUlHNWhiV1VnUFQwZ0oyWjFibU4wYVc5dUp5eGNiaUFnSUNBZ0lHbHpUMkpxSUQwZ2JtRnRaU0E5UFQwZ1QySnFaV04wS0c1aGJXVXBPMXh1WEc0Z0lHbG1JQ2hwYzA5aWFpa2dlMXh1SUNBZ0lHOXdkR2x2Ym5NZ1BTQm1kVzVqTzF4dUlDQWdJR1oxYm1NZ1BTQnVZVzFsTzF4dUlDQWdJRzVoYldVZ1BTQjFibVJsWm1sdVpXUTdYRzRnSUgxY2JpQWdhV1lnS0daMWJtTWdQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSTdYRzRnSUgxY2JpQWdiM0IwYVc5dWN5QjhmQ0FvYjNCMGFXOXVjeUE5SUh0OUtUdGNibHh1SUNCMllYSWdZMjl1Wm1sbklEMGdlMXh1SUNBZ0lDZGpZWEFuT2lBblkyRndKeUJwYmlCdmNIUnBiMjV6SUQ4Z2IzQjBhVzl1Y3k1allYQWdPaUIwY25WbExGeHVJQ0FnSUNkamRYSnllU2M2SUNkamRYSnllU2NnYVc0Z2IzQjBhVzl1Y3lBL0lHOXdkR2x2Ym5NdVkzVnljbmtnT2lCMGNuVmxMRnh1SUNBZ0lDZG1hWGhsWkNjNklDZG1hWGhsWkNjZ2FXNGdiM0IwYVc5dWN5QS9JRzl3ZEdsdmJuTXVabWw0WldRZ09pQjBjblZsTEZ4dUlDQWdJQ2RwYlcxMWRHRmliR1VuT2lBbmFXMXRkWFJoWW14bEp5QnBiaUJ2Y0hScGIyNXpJRDhnYjNCMGFXOXVjeTVwYlcxMWRHRmliR1VnT2lCMGNuVmxMRnh1SUNBZ0lDZHlaV0Z5WnljNklDZHlaV0Z5WnljZ2FXNGdiM0IwYVc5dWN5QS9JRzl3ZEdsdmJuTXVjbVZoY21jZ09pQjBjblZsWEc0Z0lIMDdYRzVjYmlBZ2RtRnlJR1JsWm1GMWJIUkliMnhrWlhJZ1BTQnBjMHhwWWlBL0lHWjFibU1nT2lCbVlXeHNZbUZqYTBodmJHUmxjaXhjYmlBZ0lDQWdJR1p2Y21ObFEzVnljbmtnUFNBb0oyTjFjbko1SnlCcGJpQnZjSFJwYjI1ektTQW1KaUJ2Y0hScGIyNXpMbU4xY25KNUxGeHVJQ0FnSUNBZ1ptOXlZMlZHYVhobFpDQTlJQ2duWm1sNFpXUW5JR2x1SUc5d2RHbHZibk1wSUNZbUlHOXdkR2x2Ym5NdVptbDRaV1FzWEc0Z0lDQWdJQ0JtYjNKalpWSmxZWEpuSUQwZ0tDZHlaV0Z5WnljZ2FXNGdiM0IwYVc5dWN5a2dKaVlnYjNCMGFXOXVjeTV5WldGeVp5eGNiaUFnSUNBZ0lIQnlhWE4wYVc1bElEMGdhWE5NYVdJZ1B5Qm1kVzVqTG5KMWJrbHVRMjl1ZEdWNGRDZ3BJRG9nZFc1a1pXWnBibVZrTzF4dVhHNGdJSFpoY2lCb1pXeHdaWEp6SUQwZ2FYTk1hV0lnUHlCbWRXNWpJRG9nZTF4dUlDQWdJQ2RoY25rbk9pQjFkR2xzTG1GeWVTeGNiaUFnSUNBbllYTnphV2R1SnpvZ2RYUnBiQzVoYzNOcFoyNHNYRzRnSUNBZ0oyTnNiMjVsSnpvZ2RYUnBiQzVqYkc5dVpTeGNiaUFnSUNBblkzVnljbmtuT2lCMWRHbHNMbU4xY25KNUxGeHVJQ0FnSUNkbWIzSkZZV05vSnpvZ2RYUnBiQzVtYjNKRllXTm9MRnh1SUNBZ0lDZHBjMEZ5Y21GNUp6b2dkWFJwYkM1cGMwRnljbUY1TEZ4dUlDQWdJQ2RwYzBWeWNtOXlKem9nZFhScGJDNXBjMFZ5Y205eUxGeHVJQ0FnSUNkcGMwWjFibU4wYVc5dUp6b2dkWFJwYkM1cGMwWjFibU4wYVc5dUxGeHVJQ0FnSUNkcGMxZGxZV3ROWVhBbk9pQjFkR2xzTG1selYyVmhhMDFoY0N4Y2JpQWdJQ0FuYVhSbGNtRjBaV1VuT2lCMWRHbHNMbWwwWlhKaGRHVmxMRnh1SUNBZ0lDZHJaWGx6SnpvZ2RYUnBiQzVyWlhsekxGeHVJQ0FnSUNkeVpXRnlaeWM2SUhWMGFXd3VjbVZoY21jc1hHNGdJQ0FnSjNSdlNXNTBaV2RsY2ljNklIVjBhV3d1ZEc5SmJuUmxaMlZ5TEZ4dUlDQWdJQ2QwYjFCaGRHZ25PaUIxZEdsc0xuUnZVR0YwYUZ4dUlDQjlPMXh1WEc0Z0lIWmhjaUJoY25rZ1BTQm9aV3h3WlhKekxtRnllU3hjYmlBZ0lDQWdJR0Z6YzJsbmJpQTlJR2hsYkhCbGNuTXVZWE56YVdkdUxGeHVJQ0FnSUNBZ1kyeHZibVVnUFNCb1pXeHdaWEp6TG1Oc2IyNWxMRnh1SUNBZ0lDQWdZM1Z5Y25rZ1BTQm9aV3h3WlhKekxtTjFjbko1TEZ4dUlDQWdJQ0FnWldGamFDQTlJR2hsYkhCbGNuTXVabTl5UldGamFDeGNiaUFnSUNBZ0lHbHpRWEp5WVhrZ1BTQm9aV3h3WlhKekxtbHpRWEp5WVhrc1hHNGdJQ0FnSUNCcGMwVnljbTl5SUQwZ2FHVnNjR1Z5Y3k1cGMwVnljbTl5TEZ4dUlDQWdJQ0FnYVhOR2RXNWpkR2x2YmlBOUlHaGxiSEJsY25NdWFYTkdkVzVqZEdsdmJpeGNiaUFnSUNBZ0lHbHpWMlZoYTAxaGNDQTlJR2hsYkhCbGNuTXVhWE5YWldGclRXRndMRnh1SUNBZ0lDQWdhMlY1Y3lBOUlHaGxiSEJsY25NdWEyVjVjeXhjYmlBZ0lDQWdJSEpsWVhKbklEMGdhR1ZzY0dWeWN5NXlaV0Z5Wnl4Y2JpQWdJQ0FnSUhSdlNXNTBaV2RsY2lBOUlHaGxiSEJsY25NdWRHOUpiblJsWjJWeUxGeHVJQ0FnSUNBZ2RHOVFZWFJvSUQwZ2FHVnNjR1Z5Y3k1MGIxQmhkR2c3WEc1Y2JpQWdkbUZ5SUdGeWVVMWxkR2h2WkV0bGVYTWdQU0JyWlhsektHMWhjSEJwYm1jdVlYSjVUV1YwYUc5a0tUdGNibHh1SUNCMllYSWdkM0poY0hCbGNuTWdQU0I3WEc0Z0lDQWdKMk5oYzNSQmNuSmhlU2M2SUdaMWJtTjBhVzl1S0dOaGMzUkJjbkpoZVNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnZG1Gc2RXVWdQU0JoY21kMWJXVnVkSE5iTUYwN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCcGMwRnljbUY1S0haaGJIVmxLVnh1SUNBZ0lDQWdJQ0FnSUQ4Z1kyRnpkRUZ5Y21GNUtHTnNiMjVsUVhKeVlYa29kbUZzZFdVcEtWeHVJQ0FnSUNBZ0lDQWdJRG9nWTJGemRFRnljbUY1TG1Gd2NHeDVLSFZ1WkdWbWFXNWxaQ3dnWVhKbmRXMWxiblJ6S1R0Y2JpQWdJQ0FnSUgwN1hHNGdJQ0FnZlN4Y2JpQWdJQ0FuYVhSbGNtRjBaV1VuT2lCbWRXNWpkR2x2YmlocGRHVnlZWFJsWlNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWm5WdVl5QTlJR0Z5WjNWdFpXNTBjMXN3WFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR0Z5YVhSNUlEMGdZWEpuZFcxbGJuUnpXekZkTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MElEMGdhWFJsY21GMFpXVW9ablZ1WXl3Z1lYSnBkSGtwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiR1Z1WjNSb0lEMGdjbVZ6ZFd4MExteGxibWQwYUR0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvWTI5dVptbG5MbU5oY0NBbUppQjBlWEJsYjJZZ1lYSnBkSGtnUFQwZ0oyNTFiV0psY2ljcElIdGNiaUFnSUNBZ0lDQWdJQ0JoY21sMGVTQTlJR0Z5YVhSNUlENGdNaUEvSUNoaGNtbDBlU0F0SURJcElEb2dNVHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnS0d4bGJtZDBhQ0FtSmlCc1pXNW5kR2dnUEQwZ1lYSnBkSGtwSUQ4Z2NtVnpkV3gwSURvZ1ltRnpaVUZ5ZVNoeVpYTjFiSFFzSUdGeWFYUjVLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY21WemRXeDBPMXh1SUNBZ0lDQWdmVHRjYmlBZ0lDQjlMRnh1SUNBZ0lDZHRhWGhwYmljNklHWjFibU4wYVc5dUtHMXBlR2x1S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRvYzI5MWNtTmxLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQm1kVzVqSUQwZ2RHaHBjenRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnBjMFoxYm1OMGFXOXVLR1oxYm1NcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzFwZUdsdUtHWjFibU1zSUU5aWFtVmpkQ2h6YjNWeVkyVXBLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMllYSWdjR0ZwY25NZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnWldGamFDaHJaWGx6S0hOdmRYSmpaU2tzSUdaMWJtTjBhVzl1S0d0bGVTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHBjMFoxYm1OMGFXOXVLSE52ZFhKalpWdHJaWGxkS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGcGNuTXVjSFZ6YUNoYmEyVjVMQ0JtZFc1akxuQnliM1J2ZEhsd1pWdHJaWGxkWFNrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQnRhWGhwYmlobWRXNWpMQ0JQWW1wbFkzUW9jMjkxY21ObEtTazdYRzVjYmlBZ0lDQWdJQ0FnWldGamFDaHdZV2x5Y3l3Z1puVnVZM1JwYjI0b2NHRnBjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lIWmhjaUIyWVd4MVpTQTlJSEJoYVhKYk1WMDdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHbHpSblZ1WTNScGIyNG9kbUZzZFdVcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWRXNWpMbkJ5YjNSdmRIbHdaVnR3WVdseVd6QmRYU0E5SUhaaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtaV3hsZEdVZ1puVnVZeTV3Y205MGIzUjVjR1ZiY0dGcGNsc3dYVjA3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1oxYm1NN1hHNGdJQ0FnSUNCOU8xeHVJQ0FnSUgwc1hHNGdJQ0FnSjI1MGFFRnlaeWM2SUdaMWJtTjBhVzl1S0c1MGFFRnlaeWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR1oxYm1OMGFXOXVLRzRwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR0Z5YVhSNUlEMGdiaUE4SURBZ1B5QXhJRG9nS0hSdlNXNTBaV2RsY2lodUtTQXJJREVwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWTNWeWNua29iblJvUVhKbktHNHBMQ0JoY21sMGVTazdYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lIMHNYRzRnSUNBZ0ozSmxZWEpuSnpvZ1puVnVZM1JwYjI0b2NtVmhjbWNwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJtZFc1amRHbHZiaWhtZFc1akxDQnBibVJsZUdWektTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCaGNtbDBlU0E5SUdsdVpHVjRaWE1nUHlCcGJtUmxlR1Z6TG14bGJtZDBhQ0E2SURBN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCamRYSnllU2h5WldGeVp5aG1kVzVqTENCcGJtUmxlR1Z6S1N3Z1lYSnBkSGtwTzF4dUlDQWdJQ0FnZlR0Y2JpQWdJQ0I5TEZ4dUlDQWdJQ2R5ZFc1SmJrTnZiblJsZUhRbk9pQm1kVzVqZEdsdmJpaHlkVzVKYmtOdmJuUmxlSFFwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJtZFc1amRHbHZiaWhqYjI1MFpYaDBLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJpWVhObFEyOXVkbVZ5ZENoMWRHbHNMQ0J5ZFc1SmJrTnZiblJsZUhRb1kyOXVkR1Y0ZENrc0lHOXdkR2x2Ym5NcE8xeHVJQ0FnSUNBZ2ZUdGNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdMeW90TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFNvdlhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVOaGMzUnpJR0JtZFc1allDQjBieUJoSUdaMWJtTjBhVzl1SUhkcGRHZ2dZVzRnWVhKcGRIa2dZMkZ3Y0dWa0lHbDBaWEpoZEdWbElHbG1JRzVsWldSbFpDNWNiaUFnSUNwY2JpQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHNWhiV1VnVkdobElHNWhiV1VnYjJZZ2RHaGxJR1oxYm1OMGFXOXVJSFJ2SUdsdWMzQmxZM1F1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJR1oxYm1NZ1ZHaGxJR1oxYm1OMGFXOXVJSFJ2SUdsdWMzQmxZM1F1WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRHZFc1amRHbHZibjBnVW1WMGRYSnVjeUIwYUdVZ1kyRnpkQ0JtZFc1amRHbHZiaTVjYmlBZ0lDb3ZYRzRnSUdaMWJtTjBhVzl1SUdOaGMzUkRZWEFvYm1GdFpTd2dablZ1WXlrZ2UxeHVJQ0FnSUdsbUlDaGpiMjVtYVdjdVkyRndLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2FXNWtaWGhsY3lBOUlHMWhjSEJwYm1jdWFYUmxjbUYwWldWU1pXRnlaMXR1WVcxbFhUdGNiaUFnSUNBZ0lHbG1JQ2hwYm1SbGVHVnpLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJwZEdWeVlYUmxaVkpsWVhKbktHWjFibU1zSUdsdVpHVjRaWE1wTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnZG1GeUlHNGdQU0FoYVhOTWFXSWdKaVlnYldGd2NHbHVaeTVwZEdWeVlYUmxaVUZ5ZVZ0dVlXMWxYVHRjYmlBZ0lDQWdJR2xtSUNodUtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnBkR1Z5WVhSbFpVRnllU2htZFc1akxDQnVLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUdaMWJtTTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUTJGemRITWdZR1oxYm1OZ0lIUnZJR0VnWTNWeWNtbGxaQ0JtZFc1amRHbHZiaUJwWmlCdVpXVmtaV1F1WEc0Z0lDQXFYRzRnSUNBcUlFQndjbWwyWVhSbFhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0J1WVcxbElGUm9aU0J1WVcxbElHOW1JSFJvWlNCbWRXNWpkR2x2YmlCMGJ5QnBibk53WldOMExseHVJQ0FnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCbWRXNWpJRlJvWlNCbWRXNWpkR2x2YmlCMGJ5QnBibk53WldOMExseHVJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnYmlCVWFHVWdZWEpwZEhrZ2IyWWdZR1oxYm1OZ0xseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1JuVnVZM1JwYjI1OUlGSmxkSFZ5Ym5NZ2RHaGxJR05oYzNRZ1puVnVZM1JwYjI0dVhHNGdJQ0FxTDF4dUlDQm1kVzVqZEdsdmJpQmpZWE4wUTNWeWNua29ibUZ0WlN3Z1puVnVZeXdnYmlrZ2UxeHVJQ0FnSUhKbGRIVnliaUFvWm05eVkyVkRkWEp5ZVNCOGZDQW9ZMjl1Wm1sbkxtTjFjbko1SUNZbUlHNGdQaUF4S1NsY2JpQWdJQ0FnSUQ4Z1kzVnljbmtvWm5WdVl5d2diaWxjYmlBZ0lDQWdJRG9nWm5WdVl6dGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJEWVhOMGN5QmdablZ1WTJBZ2RHOGdZU0JtYVhobFpDQmhjbWwwZVNCbWRXNWpkR2x2YmlCcFppQnVaV1ZrWldRdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3Y21sMllYUmxYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCdVlXMWxJRlJvWlNCdVlXMWxJRzltSUhSb1pTQm1kVzVqZEdsdmJpQjBieUJwYm5Od1pXTjBMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQm1kVzVqSUZSb1pTQm1kVzVqZEdsdmJpQjBieUJwYm5Od1pXTjBMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ2JpQlVhR1VnWVhKcGRIa2dZMkZ3TGx4dUlDQWdLaUJBY21WMGRYSnVjeUI3Um5WdVkzUnBiMjU5SUZKbGRIVnlibk1nZEdobElHTmhjM1FnWm5WdVkzUnBiMjR1WEc0Z0lDQXFMMXh1SUNCbWRXNWpkR2x2YmlCallYTjBSbWw0WldRb2JtRnRaU3dnWm5WdVl5d2diaWtnZTF4dUlDQWdJR2xtSUNoamIyNW1hV2N1Wm1sNFpXUWdKaVlnS0dadmNtTmxSbWw0WldRZ2ZId2dJVzFoY0hCcGJtY3VjMnRwY0VacGVHVmtXMjVoYldWZEtTa2dlMXh1SUNBZ0lDQWdkbUZ5SUdSaGRHRWdQU0J0WVhCd2FXNW5MbTFsZEdodlpGTndjbVZoWkZ0dVlXMWxYU3hjYmlBZ0lDQWdJQ0FnSUNCemRHRnlkQ0E5SUdSaGRHRWdKaVlnWkdGMFlTNXpkR0Z5ZER0Y2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUhOMFlYSjBJQ0E5UFQwZ2RXNWtaV1pwYm1Wa0lEOGdZWEo1S0daMWJtTXNJRzRwSURvZ1pteGhkRk53Y21WaFpDaG1kVzVqTENCemRHRnlkQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCbWRXNWpPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVOaGMzUnpJR0JtZFc1allDQjBieUJoYmlCeVpXRnlaMlZrSUdaMWJtTjBhVzl1SUdsbUlHNWxaV1JsWkM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJ5YVhaaGRHVmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUc1aGJXVWdWR2hsSUc1aGJXVWdiMllnZEdobElHWjFibU4wYVc5dUlIUnZJR2x1YzNCbFkzUXVYRzRnSUNBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlHWjFibU1nVkdobElHWjFibU4wYVc5dUlIUnZJR2x1YzNCbFkzUXVYRzRnSUNBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCdUlGUm9aU0JoY21sMGVTQnZaaUJnWm5WdVkyQXVYRzRnSUNBcUlFQnlaWFIxY201eklIdEdkVzVqZEdsdmJuMGdVbVYwZFhKdWN5QjBhR1VnWTJGemRDQm1kVzVqZEdsdmJpNWNiaUFnSUNvdlhHNGdJR1oxYm1OMGFXOXVJR05oYzNSU1pXRnlaeWh1WVcxbExDQm1kVzVqTENCdUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUNoamIyNW1hV2N1Y21WaGNtY2dKaVlnYmlBK0lERWdKaVlnS0dadmNtTmxVbVZoY21jZ2ZId2dJVzFoY0hCcGJtY3VjMnRwY0ZKbFlYSm5XMjVoYldWZEtTbGNiaUFnSUNBZ0lEOGdjbVZoY21jb1puVnVZeXdnYldGd2NHbHVaeTV0WlhSb2IyUlNaV0Z5WjF0dVlXMWxYU0I4ZkNCdFlYQndhVzVuTG1GeWVWSmxZWEpuVzI1ZEtWeHVJQ0FnSUNBZ09pQm1kVzVqTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTnlaV0YwWlhNZ1lTQmpiRzl1WlNCdlppQmdiMkpxWldOMFlDQmllU0JnY0dGMGFHQXVYRzRnSUNBcVhHNGdJQ0FxSUVCd2NtbDJZWFJsWEc0Z0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnZZbXBsWTNRZ1ZHaGxJRzlpYW1WamRDQjBieUJqYkc5dVpTNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0QmNuSmhlWHh6ZEhKcGJtZDlJSEJoZEdnZ1ZHaGxJSEJoZEdnZ2RHOGdZMnh2Ym1VZ1lua3VYRzRnSUNBcUlFQnlaWFIxY201eklIdFBZbXBsWTNSOUlGSmxkSFZ5Ym5NZ2RHaGxJR05zYjI1bFpDQnZZbXBsWTNRdVhHNGdJQ0FxTDF4dUlDQm1kVzVqZEdsdmJpQmpiRzl1WlVKNVVHRjBhQ2h2WW1wbFkzUXNJSEJoZEdncElIdGNiaUFnSUNCd1lYUm9JRDBnZEc5UVlYUm9LSEJoZEdncE8xeHVYRzRnSUNBZ2RtRnlJR2x1WkdWNElEMGdMVEVzWEc0Z0lDQWdJQ0FnSUd4bGJtZDBhQ0E5SUhCaGRHZ3ViR1Z1WjNSb0xGeHVJQ0FnSUNBZ0lDQnNZWE4wU1c1a1pYZ2dQU0JzWlc1bmRHZ2dMU0F4TEZ4dUlDQWdJQ0FnSUNCeVpYTjFiSFFnUFNCamJHOXVaU2hQWW1wbFkzUW9iMkpxWldOMEtTa3NYRzRnSUNBZ0lDQWdJRzVsYzNSbFpDQTlJSEpsYzNWc2REdGNibHh1SUNBZ0lIZG9hV3hsSUNodVpYTjBaV1FnSVQwZ2JuVnNiQ0FtSmlBcksybHVaR1Y0SUR3Z2JHVnVaM1JvS1NCN1hHNGdJQ0FnSUNCMllYSWdhMlY1SUQwZ2NHRjBhRnRwYm1SbGVGMHNYRzRnSUNBZ0lDQWdJQ0FnZG1Gc2RXVWdQU0J1WlhOMFpXUmJhMlY1WFR0Y2JseHVJQ0FnSUNBZ2FXWWdLSFpoYkhWbElDRTlJRzUxYkd3Z0ppWmNiaUFnSUNBZ0lDQWdJQ0FoS0dselJuVnVZM1JwYjI0b2RtRnNkV1VwSUh4OElHbHpSWEp5YjNJb2RtRnNkV1VwSUh4OElHbHpWMlZoYTAxaGNDaDJZV3gxWlNrcEtTQjdYRzRnSUNBZ0lDQWdJRzVsYzNSbFpGdHJaWGxkSUQwZ1kyeHZibVVvYVc1a1pYZ2dQVDBnYkdGemRFbHVaR1Y0SUQ4Z2RtRnNkV1VnT2lCUFltcGxZM1FvZG1Gc2RXVXBLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJRzVsYzNSbFpDQTlJRzVsYzNSbFpGdHJaWGxkTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTnZiblpsY25SeklHQnNiMlJoYzJoZ0lIUnZJR0Z1SUdsdGJYVjBZV0pzWlNCaGRYUnZMV04xY25KcFpXUWdhWFJsY21GMFpXVXRabWx5YzNRZ1pHRjBZUzFzWVhOMFhHNGdJQ0FxSUhabGNuTnBiMjRnZDJsMGFDQmpiMjUyWlhKemFXOXVJR0J2Y0hScGIyNXpZQ0JoY0hCc2FXVmtMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnVzI5d2RHbHZibk5kSUZSb1pTQnZjSFJwYjI1eklHOWlhbVZqZEM0Z1UyVmxJR0JpWVhObFEyOXVkbVZ5ZEdBZ1ptOXlJRzF2Y21VZ1pHVjBZV2xzY3k1Y2JpQWdJQ29nUUhKbGRIVnlibk1nZTBaMWJtTjBhVzl1ZlNCU1pYUjFjbTV6SUhSb1pTQmpiMjUyWlhKMFpXUWdZR3h2WkdGemFHQXVYRzRnSUNBcUwxeHVJQ0JtZFc1amRHbHZiaUJqYjI1MlpYSjBUR2xpS0c5d2RHbHZibk1wSUh0Y2JpQWdJQ0J5WlhSMWNtNGdYeTV5ZFc1SmJrTnZiblJsZUhRdVkyOXVkbVZ5ZENodmNIUnBiMjV6S1NoMWJtUmxabWx1WldRcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRU55WldGMFpTQmhJR052Ym5abGNuUmxjaUJtZFc1amRHbHZiaUJtYjNJZ1lHWjFibU5nSUc5bUlHQnVZVzFsWUM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHNWhiV1VnVkdobElHNWhiV1VnYjJZZ2RHaGxJR1oxYm1OMGFXOXVJSFJ2SUdOdmJuWmxjblF1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJR1oxYm1NZ1ZHaGxJR1oxYm1OMGFXOXVJSFJ2SUdOdmJuWmxjblF1WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRHZFc1amRHbHZibjBnVW1WMGRYSnVjeUIwYUdVZ2JtVjNJR052Ym5abGNuUmxjaUJtZFc1amRHbHZiaTVjYmlBZ0lDb3ZYRzRnSUdaMWJtTjBhVzl1SUdOeVpXRjBaVU52Ym5abGNuUmxjaWh1WVcxbExDQm1kVzVqS1NCN1hHNGdJQ0FnZG1GeUlISmxZV3hPWVcxbElEMGdiV0Z3Y0dsdVp5NWhiR2xoYzFSdlVtVmhiRnR1WVcxbFhTQjhmQ0J1WVcxbExGeHVJQ0FnSUNBZ0lDQnRaWFJvYjJST1lXMWxJRDBnYldGd2NHbHVaeTV5WlcxaGNGdHlaV0ZzVG1GdFpWMGdmSHdnY21WaGJFNWhiV1VzWEc0Z0lDQWdJQ0FnSUc5c1pFOXdkR2x2Ym5NZ1BTQnZjSFJwYjI1ek8xeHVYRzRnSUNBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1S0c5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUhaaGNpQnVaWGRWZEdsc0lEMGdhWE5NYVdJZ1B5QndjbWx6ZEdsdVpTQTZJR2hsYkhCbGNuTXNYRzRnSUNBZ0lDQWdJQ0FnYm1WM1JuVnVZeUE5SUdselRHbGlJRDhnY0hKcGMzUnBibVZiYldWMGFHOWtUbUZ0WlYwZ09pQm1kVzVqTEZ4dUlDQWdJQ0FnSUNBZ0lHNWxkMDl3ZEdsdmJuTWdQU0JoYzNOcFoyNG9ZWE56YVdkdUtIdDlMQ0J2YkdSUGNIUnBiMjV6S1N3Z2IzQjBhVzl1Y3lrN1hHNWNiaUFnSUNBZ0lISmxkSFZ5YmlCaVlYTmxRMjl1ZG1WeWRDaHVaWGRWZEdsc0xDQnlaV0ZzVG1GdFpTd2dibVYzUm5WdVl5d2dibVYzVDNCMGFXOXVjeWs3WEc0Z0lDQWdmVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCRGNtVmhkR1Z6SUdFZ1puVnVZM1JwYjI0Z2RHaGhkQ0IzY21Gd2N5QmdablZ1WTJBZ2RHOGdhVzUyYjJ0bElHbDBjeUJwZEdWeVlYUmxaU3dnZDJsMGFDQjFjQ0IwYnlCZ2JtQmNiaUFnSUNvZ1lYSm5kVzFsYm5SekxDQnBaMjV2Y21sdVp5QmhibmtnWVdSa2FYUnBiMjVoYkNCaGNtZDFiV1Z1ZEhNdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3Y21sMllYUmxYRzRnSUNBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlHWjFibU1nVkdobElHWjFibU4wYVc5dUlIUnZJR05oY0NCcGRHVnlZWFJsWlNCaGNtZDFiV1Z1ZEhNZ1ptOXlMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ2JpQlVhR1VnWVhKcGRIa2dZMkZ3TGx4dUlDQWdLaUJBY21WMGRYSnVjeUI3Um5WdVkzUnBiMjU5SUZKbGRIVnlibk1nZEdobElHNWxkeUJtZFc1amRHbHZiaTVjYmlBZ0lDb3ZYRzRnSUdaMWJtTjBhVzl1SUdsMFpYSmhkR1ZsUVhKNUtHWjFibU1zSUc0cElIdGNiaUFnSUNCeVpYUjFjbTRnYjNabGNrRnlaeWhtZFc1akxDQm1kVzVqZEdsdmJpaG1kVzVqS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEhsd1pXOW1JR1oxYm1NZ1BUMGdKMloxYm1OMGFXOXVKeUEvSUdKaGMyVkJjbmtvWm5WdVl5d2diaWtnT2lCbWRXNWpPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVOeVpXRjBaWE1nWVNCbWRXNWpkR2x2YmlCMGFHRjBJSGR5WVhCeklHQm1kVzVqWUNCMGJ5QnBiblp2YTJVZ2FYUnpJR2wwWlhKaGRHVmxJSGRwZEdnZ1lYSm5kVzFsYm5SelhHNGdJQ0FxSUdGeWNtRnVaMlZrSUdGalkyOXlaR2x1WnlCMGJ5QjBhR1VnYzNCbFkybG1hV1ZrSUdCcGJtUmxlR1Z6WUNCM2FHVnlaU0IwYUdVZ1lYSm5kVzFsYm5RZ2RtRnNkV1VnWVhSY2JpQWdJQ29nZEdobElHWnBjbk4wSUdsdVpHVjRJR2x6SUhCeWIzWnBaR1ZrSUdGeklIUm9aU0JtYVhKemRDQmhjbWQxYldWdWRDd2dkR2hsSUdGeVozVnRaVzUwSUhaaGJIVmxJR0YwWEc0Z0lDQXFJSFJvWlNCelpXTnZibVFnYVc1a1pYZ2dhWE1nY0hKdmRtbGtaV1FnWVhNZ2RHaGxJSE5sWTI5dVpDQmhjbWQxYldWdWRDd2dZVzVrSUhOdklHOXVMbHh1SUNBZ0tseHVJQ0FnS2lCQWNISnBkbUYwWlZ4dUlDQWdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0JtZFc1aklGUm9aU0JtZFc1amRHbHZiaUIwYnlCeVpXRnljbUZ1WjJVZ2FYUmxjbUYwWldVZ1lYSm5kVzFsYm5SeklHWnZjaTVjYmlBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKYlhYMGdhVzVrWlhobGN5QlVhR1VnWVhKeVlXNW5aV1FnWVhKbmRXMWxiblFnYVc1a1pYaGxjeTVjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMFoxYm1OMGFXOXVmU0JTWlhSMWNtNXpJSFJvWlNCdVpYY2dablZ1WTNScGIyNHVYRzRnSUNBcUwxeHVJQ0JtZFc1amRHbHZiaUJwZEdWeVlYUmxaVkpsWVhKbktHWjFibU1zSUdsdVpHVjRaWE1wSUh0Y2JpQWdJQ0J5WlhSMWNtNGdiM1psY2tGeVp5aG1kVzVqTENCbWRXNWpkR2x2YmlobWRXNWpLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2JpQTlJR2x1WkdWNFpYTXViR1Z1WjNSb08xeHVJQ0FnSUNBZ2NtVjBkWEp1SUdKaGMyVkJjbWwwZVNoeVpXRnlaeWhpWVhObFFYSjVLR1oxYm1Nc0lHNHBMQ0JwYm1SbGVHVnpLU3dnYmlrN1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRM0psWVhSbGN5QmhJR1oxYm1OMGFXOXVJSFJvWVhRZ2FXNTJiMnRsY3lCZ1puVnVZMkFnZDJsMGFDQnBkSE1nWm1seWMzUWdZWEpuZFcxbGJuUWdkSEpoYm5ObWIzSnRaV1F1WEc0Z0lDQXFYRzRnSUNBcUlFQndjbWwyWVhSbFhHNGdJQ0FxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdaMWJtTWdWR2hsSUdaMWJtTjBhVzl1SUhSdklIZHlZWEF1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJSFJ5WVc1elptOXliU0JVYUdVZ1lYSm5kVzFsYm5RZ2RISmhibk5tYjNKdExseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1JuVnVZM1JwYjI1OUlGSmxkSFZ5Ym5NZ2RHaGxJRzVsZHlCbWRXNWpkR2x2Ymk1Y2JpQWdJQ292WEc0Z0lHWjFibU4wYVc5dUlHOTJaWEpCY21jb1puVnVZeXdnZEhKaGJuTm1iM0p0S1NCN1hHNGdJQ0FnY21WMGRYSnVJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnZG1GeUlHeGxibWQwYUNBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnN1hHNGdJQ0FnSUNCcFppQW9JV3hsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdablZ1WXlncE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2RtRnlJR0Z5WjNNZ1BTQkJjbkpoZVNoc1pXNW5kR2dwTzF4dUlDQWdJQ0FnZDJocGJHVWdLR3hsYm1kMGFDMHRLU0I3WEc0Z0lDQWdJQ0FnSUdGeVozTmJiR1Z1WjNSb1hTQTlJR0Z5WjNWdFpXNTBjMXRzWlc1bmRHaGRPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdkbUZ5SUdsdVpHVjRJRDBnWTI5dVptbG5MbkpsWVhKbklEOGdNQ0E2SUNoc1pXNW5kR2dnTFNBeEtUdGNiaUFnSUNBZ0lHRnlaM05iYVc1a1pYaGRJRDBnZEhKaGJuTm1iM0p0S0dGeVozTmJhVzVrWlhoZEtUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCbWRXNWpMbUZ3Y0d4NUtIVnVaR1ZtYVc1bFpDd2dZWEpuY3lrN1hHNGdJQ0FnZlR0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkRjbVZoZEdWeklHRWdablZ1WTNScGIyNGdkR2hoZENCM2NtRndjeUJnWm5WdVkyQWdZVzVrSUdGd2NHeDVjeUIwYUdVZ1kyOXVkbVZ5YzJsdmJuTmNiaUFnSUNvZ2NuVnNaWE1nWW5rZ1lHNWhiV1ZnTGx4dUlDQWdLbHh1SUNBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYm1GdFpTQlVhR1VnYm1GdFpTQnZaaUIwYUdVZ1puVnVZM1JwYjI0Z2RHOGdkM0poY0M1Y2JpQWdJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnWm5WdVl5QlVhR1VnWm5WdVkzUnBiMjRnZEc4Z2QzSmhjQzVjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMFoxYm1OMGFXOXVmU0JTWlhSMWNtNXpJSFJvWlNCamIyNTJaWEowWldRZ1puVnVZM1JwYjI0dVhHNGdJQ0FxTDF4dUlDQm1kVzVqZEdsdmJpQjNjbUZ3S0c1aGJXVXNJR1oxYm1Nc0lIQnNZV05sYUc5c1pHVnlLU0I3WEc0Z0lDQWdkbUZ5SUhKbGMzVnNkQ3hjYmlBZ0lDQWdJQ0FnY21WaGJFNWhiV1VnUFNCdFlYQndhVzVuTG1Gc2FXRnpWRzlTWldGc1cyNWhiV1ZkSUh4OElHNWhiV1VzWEc0Z0lDQWdJQ0FnSUhkeVlYQndaV1FnUFNCbWRXNWpMRnh1SUNBZ0lDQWdJQ0IzY21Gd2NHVnlJRDBnZDNKaGNIQmxjbk5iY21WaGJFNWhiV1ZkTzF4dVhHNGdJQ0FnYVdZZ0tIZHlZWEJ3WlhJcElIdGNiaUFnSUNBZ0lIZHlZWEJ3WldRZ1BTQjNjbUZ3Y0dWeUtHWjFibU1wTzF4dUlDQWdJSDFjYmlBZ0lDQmxiSE5sSUdsbUlDaGpiMjVtYVdjdWFXMXRkWFJoWW14bEtTQjdYRzRnSUNBZ0lDQnBaaUFvYldGd2NHbHVaeTV0ZFhSaGRHVXVZWEp5WVhsYmNtVmhiRTVoYldWZEtTQjdYRzRnSUNBZ0lDQWdJSGR5WVhCd1pXUWdQU0IzY21Gd1NXMXRkWFJoWW14bEtHWjFibU1zSUdOc2IyNWxRWEp5WVhrcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1pXeHpaU0JwWmlBb2JXRndjR2x1Wnk1dGRYUmhkR1V1YjJKcVpXTjBXM0psWVd4T1lXMWxYU2tnZTF4dUlDQWdJQ0FnSUNCM2NtRndjR1ZrSUQwZ2QzSmhjRWx0YlhWMFlXSnNaU2htZFc1akxDQmpjbVZoZEdWRGJHOXVaWElvWm5WdVl5a3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdaV3h6WlNCcFppQW9iV0Z3Y0dsdVp5NXRkWFJoZEdVdWMyVjBXM0psWVd4T1lXMWxYU2tnZTF4dUlDQWdJQ0FnSUNCM2NtRndjR1ZrSUQwZ2QzSmhjRWx0YlhWMFlXSnNaU2htZFc1akxDQmpiRzl1WlVKNVVHRjBhQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lHVmhZMmdvWVhKNVRXVjBhRzlrUzJWNWN5d2dablZ1WTNScGIyNG9ZWEo1UzJWNUtTQjdYRzRnSUNBZ0lDQmxZV05vS0cxaGNIQnBibWN1WVhKNVRXVjBhRzlrVzJGeWVVdGxlVjBzSUdaMWJtTjBhVzl1S0c5MGFHVnlUbUZ0WlNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvY21WaGJFNWhiV1VnUFQwZ2IzUm9aWEpPWVcxbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlHUmhkR0VnUFNCdFlYQndhVzVuTG0xbGRHaHZaRk53Y21WaFpGdHlaV0ZzVG1GdFpWMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHRm1kR1Z5VW1WaGNtY2dQU0JrWVhSaElDWW1JR1JoZEdFdVlXWjBaWEpTWldGeVp6dGNibHh1SUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQ0E5SUdGbWRHVnlVbVZoY21kY2JpQWdJQ0FnSUNBZ0lDQWdJRDhnWTJGemRFWnBlR1ZrS0hKbFlXeE9ZVzFsTENCallYTjBVbVZoY21jb2NtVmhiRTVoYldVc0lIZHlZWEJ3WldRc0lHRnllVXRsZVNrc0lHRnllVXRsZVNsY2JpQWdJQ0FnSUNBZ0lDQWdJRG9nWTJGemRGSmxZWEpuS0hKbFlXeE9ZVzFsTENCallYTjBSbWw0WldRb2NtVmhiRTVoYldVc0lIZHlZWEJ3WldRc0lHRnllVXRsZVNrc0lHRnllVXRsZVNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0J5WlhOMWJIUWdQU0JqWVhOMFEyRndLSEpsWVd4T1lXMWxMQ0J5WlhOMWJIUXBPMXh1SUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQ0E5SUdOaGMzUkRkWEp5ZVNoeVpXRnNUbUZ0WlN3Z2NtVnpkV3gwTENCaGNubExaWGtwTzF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnSVhKbGMzVnNkRHRjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJSEpsYzNWc2RDQjhmQ0FvY21WemRXeDBJRDBnZDNKaGNIQmxaQ2s3WEc0Z0lDQWdhV1lnS0hKbGMzVnNkQ0E5UFNCbWRXNWpLU0I3WEc0Z0lDQWdJQ0J5WlhOMWJIUWdQU0JtYjNKalpVTjFjbko1SUQ4Z1kzVnljbmtvY21WemRXeDBMQ0F4S1NBNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdablZ1WXk1aGNIQnNlU2gwYUdsekxDQmhjbWQxYldWdWRITXBPMXh1SUNBZ0lDQWdmVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVnpkV3gwTG1OdmJuWmxjblFnUFNCamNtVmhkR1ZEYjI1MlpYSjBaWElvY21WaGJFNWhiV1VzSUdaMWJtTXBPMXh1SUNBZ0lISmxjM1ZzZEM1d2JHRmpaV2h2YkdSbGNpQTlJR1oxYm1NdWNHeGhZMlZvYjJ4a1pYSWdQU0J3YkdGalpXaHZiR1JsY2p0Y2JseHVJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzRnSUgxY2JseHVJQ0F2S2kwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdEtpOWNibHh1SUNCcFppQW9JV2x6VDJKcUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhkeVlYQW9ibUZ0WlN3Z1puVnVZeXdnWkdWbVlYVnNkRWh2YkdSbGNpazdYRzRnSUgxY2JpQWdkbUZ5SUY4Z1BTQm1kVzVqTzF4dVhHNGdJQzh2SUVOdmJuWmxjblFnYldWMGFHOWtjeUJpZVNCaGNua2dZMkZ3TGx4dUlDQjJZWElnY0dGcGNuTWdQU0JiWFR0Y2JpQWdaV0ZqYUNoaGNubE5aWFJvYjJSTFpYbHpMQ0JtZFc1amRHbHZiaWhoY25sTFpYa3BJSHRjYmlBZ0lDQmxZV05vS0cxaGNIQnBibWN1WVhKNVRXVjBhRzlrVzJGeWVVdGxlVjBzSUdaMWJtTjBhVzl1S0d0bGVTa2dlMXh1SUNBZ0lDQWdkbUZ5SUdaMWJtTWdQU0JmVzIxaGNIQnBibWN1Y21WdFlYQmJhMlY1WFNCOGZDQnJaWGxkTzF4dUlDQWdJQ0FnYVdZZ0tHWjFibU1wSUh0Y2JpQWdJQ0FnSUNBZ2NHRnBjbk11Y0hWemFDaGJhMlY1TENCM2NtRndLR3RsZVN3Z1puVnVZeXdnWHlsZEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNiaUFnZlNrN1hHNWNiaUFnTHk4Z1EyOXVkbVZ5ZENCeVpXMWhhVzVwYm1jZ2JXVjBhRzlrY3k1Y2JpQWdaV0ZqYUNoclpYbHpLRjhwTENCbWRXNWpkR2x2YmloclpYa3BJSHRjYmlBZ0lDQjJZWElnWm5WdVl5QTlJRjliYTJWNVhUdGNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHWjFibU1nUFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lDQWdkbUZ5SUd4bGJtZDBhQ0E5SUhCaGFYSnpMbXhsYm1kMGFEdGNiaUFnSUNBZ0lIZG9hV3hsSUNoc1pXNW5kR2d0TFNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvY0dGcGNuTmJiR1Z1WjNSb1hWc3dYU0E5UFNCclpYa3BJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdaMWJtTXVZMjl1ZG1WeWRDQTlJR055WldGMFpVTnZiblpsY25SbGNpaHJaWGtzSUdaMWJtTXBPMXh1SUNBZ0lDQWdjR0ZwY25NdWNIVnphQ2hiYTJWNUxDQm1kVzVqWFNrN1hHNGdJQ0FnZlZ4dUlDQjlLVHRjYmx4dUlDQXZMeUJCYzNOcFoyNGdkRzhnWUY5Z0lHeGxZWFpwYm1jZ1lGOHVjSEp2ZEc5MGVYQmxZQ0IxYm1Ob1lXNW5aV1FnZEc4Z1lXeHNiM2NnWTJoaGFXNXBibWN1WEc0Z0lHVmhZMmdvY0dGcGNuTXNJR1oxYm1OMGFXOXVLSEJoYVhJcElIdGNiaUFnSUNCZlczQmhhWEpiTUYxZElEMGdjR0ZwY2xzeFhUdGNiaUFnZlNrN1hHNWNiaUFnWHk1amIyNTJaWEowSUQwZ1kyOXVkbVZ5ZEV4cFlqdGNiaUFnWHk1d2JHRmpaV2h2YkdSbGNpQTlJRjg3WEc1Y2JpQWdMeThnUVhOemFXZHVJR0ZzYVdGelpYTXVYRzRnSUdWaFkyZ29hMlY1Y3loZktTd2dablZ1WTNScGIyNG9hMlY1S1NCN1hHNGdJQ0FnWldGamFDaHRZWEJ3YVc1bkxuSmxZV3hVYjBGc2FXRnpXMnRsZVYwZ2ZId2dXMTBzSUdaMWJtTjBhVzl1S0dGc2FXRnpLU0I3WEc0Z0lDQWdJQ0JmVzJGc2FXRnpYU0E5SUY5YmEyVjVYVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZTazdYRzVjYmlBZ2NtVjBkWEp1SUY4N1hHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWW1GelpVTnZiblpsY25RN1hHNGlMQ0oyWVhJZ1YyVmhhMDFoY0NBOUlISmxjWFZwY21Vb0p5NHZYMWRsWVd0TllYQW5LVHRjYmx4dUx5b3FJRlZ6WldRZ2RHOGdjM1J2Y21VZ1puVnVZM1JwYjI0Z2JXVjBZV1JoZEdFdUlDb3ZYRzUyWVhJZ2JXVjBZVTFoY0NBOUlGZGxZV3ROWVhBZ0ppWWdibVYzSUZkbFlXdE5ZWEE3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2JXVjBZVTFoY0R0Y2JpSXNJblpoY2lCcFpHVnVkR2wwZVNBOUlISmxjWFZwY21Vb0p5NHZhV1JsYm5ScGRIa25LU3hjYmlBZ0lDQnRaWFJoVFdGd0lEMGdjbVZ4ZFdseVpTZ25MaTlmYldWMFlVMWhjQ2NwTzF4dVhHNHZLaXBjYmlBcUlGUm9aU0JpWVhObElHbHRjR3hsYldWdWRHRjBhVzl1SUc5bUlHQnpaWFJFWVhSaFlDQjNhWFJvYjNWMElITjFjSEJ2Y25RZ1ptOXlJR2h2ZENCc2IyOXdJSE5vYjNKMGFXNW5MbHh1SUNwY2JpQXFJRUJ3Y21sMllYUmxYRzRnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCbWRXNWpJRlJvWlNCbWRXNWpkR2x2YmlCMGJ5QmhjM052WTJsaGRHVWdiV1YwWVdSaGRHRWdkMmwwYUM1Y2JpQXFJRUJ3WVhKaGJTQjdLbjBnWkdGMFlTQlVhR1VnYldWMFlXUmhkR0V1WEc0Z0tpQkFjbVYwZFhKdWN5QjdSblZ1WTNScGIyNTlJRkpsZEhWeWJuTWdZR1oxYm1OZ0xseHVJQ292WEc1MllYSWdZbUZ6WlZObGRFUmhkR0VnUFNBaGJXVjBZVTFoY0NBL0lHbGtaVzUwYVhSNUlEb2dablZ1WTNScGIyNG9ablZ1WXl3Z1pHRjBZU2tnZTF4dUlDQnRaWFJoVFdGd0xuTmxkQ2htZFc1akxDQmtZWFJoS1R0Y2JpQWdjbVYwZFhKdUlHWjFibU03WEc1OU8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR0poYzJWVFpYUkVZWFJoTzF4dUlpd2lkbUZ5SUdKaGMyVkRjbVZoZEdVZ1BTQnlaWEYxYVhKbEtDY3VMMTlpWVhObFEzSmxZWFJsSnlrc1hHNGdJQ0FnYVhOUFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwybHpUMkpxWldOMEp5azdYRzVjYmk4cUtseHVJQ29nUTNKbFlYUmxjeUJoSUdaMWJtTjBhVzl1SUhSb1lYUWdjSEp2WkhWalpYTWdZVzRnYVc1emRHRnVZMlVnYjJZZ1lFTjBiM0pnSUhKbFoyRnlaR3hsYzNNZ2IyWmNiaUFxSUhkb1pYUm9aWElnYVhRZ2QyRnpJR2x1ZG05clpXUWdZWE1nY0dGeWRDQnZaaUJoSUdCdVpYZGdJR1Y0Y0hKbGMzTnBiMjRnYjNJZ1lua2dZR05oYkd4Z0lHOXlJR0JoY0hCc2VXQXVYRzRnS2x4dUlDb2dRSEJ5YVhaaGRHVmNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUVOMGIzSWdWR2hsSUdOdmJuTjBjblZqZEc5eUlIUnZJSGR5WVhBdVhHNGdLaUJBY21WMGRYSnVjeUI3Um5WdVkzUnBiMjU5SUZKbGRIVnlibk1nZEdobElHNWxkeUIzY21Gd2NHVmtJR1oxYm1OMGFXOXVMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQmpjbVZoZEdWRGRHOXlLRU4wYjNJcElIdGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQzh2SUZWelpTQmhJR0J6ZDJsMFkyaGdJSE4wWVhSbGJXVnVkQ0IwYnlCM2IzSnJJSGRwZEdnZ1kyeGhjM01nWTI5dWMzUnlkV04wYjNKekxpQlRaV1ZjYmlBZ0lDQXZMeUJvZEhSd09pOHZaV050WVMxcGJuUmxjbTVoZEdsdmJtRnNMbTl5Wnk5bFkyMWhMVEkyTWk4M0xqQXZJM05sWXkxbFkyMWhjMk55YVhCMExXWjFibU4wYVc5dUxXOWlhbVZqZEhNdFkyRnNiQzEwYUdsellYSm5kVzFsYm5RdFlYSm5kVzFsYm5SemJHbHpkRnh1SUNBZ0lDOHZJR1p2Y2lCdGIzSmxJR1JsZEdGcGJITXVYRzRnSUNBZ2RtRnlJR0Z5WjNNZ1BTQmhjbWQxYldWdWRITTdYRzRnSUNBZ2MzZHBkR05vSUNoaGNtZHpMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdZMkZ6WlNBd09pQnlaWFIxY200Z2JtVjNJRU4wYjNJN1hHNGdJQ0FnSUNCallYTmxJREU2SUhKbGRIVnliaUJ1WlhjZ1EzUnZjaWhoY21keld6QmRLVHRjYmlBZ0lDQWdJR05oYzJVZ01qb2djbVYwZFhKdUlHNWxkeUJEZEc5eUtHRnlaM05iTUYwc0lHRnlaM05iTVYwcE8xeHVJQ0FnSUNBZ1kyRnpaU0F6T2lCeVpYUjFjbTRnYm1WM0lFTjBiM0lvWVhKbmMxc3dYU3dnWVhKbmMxc3hYU3dnWVhKbmMxc3lYU2s3WEc0Z0lDQWdJQ0JqWVhObElEUTZJSEpsZEhWeWJpQnVaWGNnUTNSdmNpaGhjbWR6V3pCZExDQmhjbWR6V3pGZExDQmhjbWR6V3pKZExDQmhjbWR6V3pOZEtUdGNiaUFnSUNBZ0lHTmhjMlVnTlRvZ2NtVjBkWEp1SUc1bGR5QkRkRzl5S0dGeVozTmJNRjBzSUdGeVozTmJNVjBzSUdGeVozTmJNbDBzSUdGeVozTmJNMTBzSUdGeVozTmJORjBwTzF4dUlDQWdJQ0FnWTJGelpTQTJPaUJ5WlhSMWNtNGdibVYzSUVOMGIzSW9ZWEpuYzFzd1hTd2dZWEpuYzFzeFhTd2dZWEpuYzFzeVhTd2dZWEpuYzFzelhTd2dZWEpuYzFzMFhTd2dZWEpuYzFzMVhTazdYRzRnSUNBZ0lDQmpZWE5sSURjNklISmxkSFZ5YmlCdVpYY2dRM1J2Y2loaGNtZHpXekJkTENCaGNtZHpXekZkTENCaGNtZHpXekpkTENCaGNtZHpXek5kTENCaGNtZHpXelJkTENCaGNtZHpXelZkTENCaGNtZHpXelpkS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdkbUZ5SUhSb2FYTkNhVzVrYVc1bklEMGdZbUZ6WlVOeVpXRjBaU2hEZEc5eUxuQnliM1J2ZEhsd1pTa3NYRzRnSUNBZ0lDQWdJSEpsYzNWc2RDQTlJRU4wYjNJdVlYQndiSGtvZEdocGMwSnBibVJwYm1jc0lHRnlaM01wTzF4dVhHNGdJQ0FnTHk4Z1RXbHRhV01nZEdobElHTnZibk4wY25WamRHOXlKM01nWUhKbGRIVnlibUFnWW1Wb1lYWnBiM0l1WEc0Z0lDQWdMeThnVTJWbElHaDBkSEJ6T2k4dlpYTTFMbWRwZEdoMVlpNXBieThqZURFekxqSXVNaUJtYjNJZ2JXOXlaU0JrWlhSaGFXeHpMbHh1SUNBZ0lISmxkSFZ5YmlCcGMwOWlhbVZqZENoeVpYTjFiSFFwSUQ4Z2NtVnpkV3gwSURvZ2RHaHBjMEpwYm1ScGJtYzdYRzRnSUgwN1hHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWTNKbFlYUmxRM1J2Y2p0Y2JpSXNJblpoY2lCamNtVmhkR1ZEZEc5eUlEMGdjbVZ4ZFdseVpTZ25MaTlmWTNKbFlYUmxRM1J2Y2ljcExGeHVJQ0FnSUhKdmIzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5eWIyOTBKeWs3WEc1Y2JpOHFLaUJWYzJWa0lIUnZJR052YlhCdmMyVWdZbWwwYldGemEzTWdabTl5SUdaMWJtTjBhVzl1SUcxbGRHRmtZWFJoTGlBcUwxeHVkbUZ5SUZkU1FWQmZRa2xPUkY5R1RFRkhJRDBnTVR0Y2JseHVMeW9xWEc0Z0tpQkRjbVZoZEdWeklHRWdablZ1WTNScGIyNGdkR2hoZENCM2NtRndjeUJnWm5WdVkyQWdkRzhnYVc1MmIydGxJR2wwSUhkcGRHZ2dkR2hsSUc5d2RHbHZibUZzSUdCMGFHbHpZRnh1SUNvZ1ltbHVaR2x1WnlCdlppQmdkR2hwYzBGeVoyQXVYRzRnS2x4dUlDb2dRSEJ5YVhaaGRHVmNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdaMWJtTWdWR2hsSUdaMWJtTjBhVzl1SUhSdklIZHlZWEF1WEc0Z0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ1ltbDBiV0Z6YXlCVWFHVWdZbWwwYldGemF5Qm1iR0ZuY3k0Z1UyVmxJR0JqY21WaGRHVlhjbUZ3WUNCbWIzSWdiVzl5WlNCa1pYUmhhV3h6TGx4dUlDb2dRSEJoY21GdElIc3FmU0JiZEdocGMwRnlaMTBnVkdobElHQjBhR2x6WUNCaWFXNWthVzVuSUc5bUlHQm1kVzVqWUM1Y2JpQXFJRUJ5WlhSMWNtNXpJSHRHZFc1amRHbHZibjBnVW1WMGRYSnVjeUIwYUdVZ2JtVjNJSGR5WVhCd1pXUWdablZ1WTNScGIyNHVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHTnlaV0YwWlVKcGJtUW9ablZ1WXl3Z1ltbDBiV0Z6YXl3Z2RHaHBjMEZ5WnlrZ2UxeHVJQ0IyWVhJZ2FYTkNhVzVrSUQwZ1ltbDBiV0Z6YXlBbUlGZFNRVkJmUWtsT1JGOUdURUZITEZ4dUlDQWdJQ0FnUTNSdmNpQTlJR055WldGMFpVTjBiM0lvWm5WdVl5azdYRzVjYmlBZ1puVnVZM1JwYjI0Z2QzSmhjSEJsY2lncElIdGNiaUFnSUNCMllYSWdabTRnUFNBb2RHaHBjeUFtSmlCMGFHbHpJQ0U5UFNCeWIyOTBJQ1ltSUhSb2FYTWdhVzV6ZEdGdVkyVnZaaUIzY21Gd2NHVnlLU0EvSUVOMGIzSWdPaUJtZFc1ak8xeHVJQ0FnSUhKbGRIVnliaUJtYmk1aGNIQnNlU2hwYzBKcGJtUWdQeUIwYUdselFYSm5JRG9nZEdocGN5d2dZWEpuZFcxbGJuUnpLVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdkM0poY0hCbGNqdGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCamNtVmhkR1ZDYVc1a08xeHVJaXdpTHlvZ1FuVnBiSFF0YVc0Z2JXVjBhRzlrSUhKbFptVnlaVzVqWlhNZ1ptOXlJSFJvYjNObElIZHBkR2dnZEdobElITmhiV1VnYm1GdFpTQmhjeUJ2ZEdobGNpQmdiRzlrWVhOb1lDQnRaWFJvYjJSekxpQXFMMXh1ZG1GeUlHNWhkR2wyWlUxaGVDQTlJRTFoZEdndWJXRjRPMXh1WEc0dktpcGNiaUFxSUVOeVpXRjBaWE1nWVc0Z1lYSnlZWGtnZEdoaGRDQnBjeUIwYUdVZ1kyOXRjRzl6YVhScGIyNGdiMllnY0dGeWRHbGhiR3g1SUdGd2NHeHBaV1FnWVhKbmRXMWxiblJ6TEZ4dUlDb2djR3hoWTJWb2IyeGtaWEp6TENCaGJtUWdjSEp2ZG1sa1pXUWdZWEpuZFcxbGJuUnpJR2x1ZEc4Z1lTQnphVzVuYkdVZ1lYSnlZWGtnYjJZZ1lYSm5kVzFsYm5SekxseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaUJBY0dGeVlXMGdlMEZ5Y21GNWZTQmhjbWR6SUZSb1pTQndjbTkyYVdSbFpDQmhjbWQxYldWdWRITXVYRzRnS2lCQWNHRnlZVzBnZTBGeWNtRjVmU0J3WVhKMGFXRnNjeUJVYUdVZ1lYSm5kVzFsYm5SeklIUnZJSEJ5WlhCbGJtUWdkRzhnZEdodmMyVWdjSEp2ZG1sa1pXUXVYRzRnS2lCQWNHRnlZVzBnZTBGeWNtRjVmU0JvYjJ4a1pYSnpJRlJvWlNCZ2NHRnlkR2xoYkhOZ0lIQnNZV05sYUc5c1pHVnlJR2x1WkdWNFpYTXVYRzRnS2lCQWNHRnlZVzF6SUh0aWIyOXNaV0Z1ZlNCYmFYTkRkWEp5YVdWa1hTQlRjR1ZqYVdaNUlHTnZiWEJ2YzJsdVp5Qm1iM0lnWVNCamRYSnlhV1ZrSUdaMWJtTjBhVzl1TGx4dUlDb2dRSEpsZEhWeWJuTWdlMEZ5Y21GNWZTQlNaWFIxY201eklIUm9aU0J1WlhjZ1lYSnlZWGtnYjJZZ1kyOXRjRzl6WldRZ1lYSm5kVzFsYm5SekxseHVJQ292WEc1bWRXNWpkR2x2YmlCamIyMXdiM05sUVhKbmN5aGhjbWR6TENCd1lYSjBhV0ZzY3l3Z2FHOXNaR1Z5Y3l3Z2FYTkRkWEp5YVdWa0tTQjdYRzRnSUhaaGNpQmhjbWR6U1c1a1pYZ2dQU0F0TVN4Y2JpQWdJQ0FnSUdGeVozTk1aVzVuZEdnZ1BTQmhjbWR6TG14bGJtZDBhQ3hjYmlBZ0lDQWdJR2h2YkdSbGNuTk1aVzVuZEdnZ1BTQm9iMnhrWlhKekxteGxibWQwYUN4Y2JpQWdJQ0FnSUd4bFpuUkpibVJsZUNBOUlDMHhMRnh1SUNBZ0lDQWdiR1ZtZEV4bGJtZDBhQ0E5SUhCaGNuUnBZV3h6TG14bGJtZDBhQ3hjYmlBZ0lDQWdJSEpoYm1kbFRHVnVaM1JvSUQwZ2JtRjBhWFpsVFdGNEtHRnlaM05NWlc1bmRHZ2dMU0JvYjJ4a1pYSnpUR1Z1WjNSb0xDQXdLU3hjYmlBZ0lDQWdJSEpsYzNWc2RDQTlJRUZ5Y21GNUtHeGxablJNWlc1bmRHZ2dLeUJ5WVc1blpVeGxibWQwYUNrc1hHNGdJQ0FnSUNCcGMxVnVZM1Z5Y21sbFpDQTlJQ0ZwYzBOMWNuSnBaV1E3WEc1Y2JpQWdkMmhwYkdVZ0tDc3JiR1ZtZEVsdVpHVjRJRHdnYkdWbWRFeGxibWQwYUNrZ2UxeHVJQ0FnSUhKbGMzVnNkRnRzWldaMFNXNWtaWGhkSUQwZ2NHRnlkR2xoYkhOYmJHVm1kRWx1WkdWNFhUdGNiaUFnZlZ4dUlDQjNhR2xzWlNBb0t5dGhjbWR6U1c1a1pYZ2dQQ0JvYjJ4a1pYSnpUR1Z1WjNSb0tTQjdYRzRnSUNBZ2FXWWdLR2x6Vlc1amRYSnlhV1ZrSUh4OElHRnlaM05KYm1SbGVDQThJR0Z5WjNOTVpXNW5kR2dwSUh0Y2JpQWdJQ0FnSUhKbGMzVnNkRnRvYjJ4a1pYSnpXMkZ5WjNOSmJtUmxlRjFkSUQwZ1lYSm5jMXRoY21kelNXNWtaWGhkTzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0IzYUdsc1pTQW9jbUZ1WjJWTVpXNW5kR2d0TFNrZ2UxeHVJQ0FnSUhKbGMzVnNkRnRzWldaMFNXNWtaWGdySzEwZ1BTQmhjbWR6VzJGeVozTkpibVJsZUNzclhUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z2NtVnpkV3gwTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR052YlhCdmMyVkJjbWR6TzF4dUlpd2lMeW9nUW5WcGJIUXRhVzRnYldWMGFHOWtJSEpsWm1WeVpXNWpaWE1nWm05eUlIUm9iM05sSUhkcGRHZ2dkR2hsSUhOaGJXVWdibUZ0WlNCaGN5QnZkR2hsY2lCZ2JHOWtZWE5vWUNCdFpYUm9iMlJ6TGlBcUwxeHVkbUZ5SUc1aGRHbDJaVTFoZUNBOUlFMWhkR2d1YldGNE8xeHVYRzR2S2lwY2JpQXFJRlJvYVhNZ1puVnVZM1JwYjI0Z2FYTWdiR2xyWlNCZ1kyOXRjRzl6WlVGeVozTmdJR1Y0WTJWd2RDQjBhR0YwSUhSb1pTQmhjbWQxYldWdWRITWdZMjl0Y0c5emFYUnBiMjVjYmlBcUlHbHpJSFJoYVd4dmNtVmtJR1p2Y2lCZ1h5NXdZWEowYVdGc1VtbG5hSFJnTGx4dUlDcGNiaUFxSUVCd2NtbDJZWFJsWEc0Z0tpQkFjR0Z5WVcwZ2UwRnljbUY1ZlNCaGNtZHpJRlJvWlNCd2NtOTJhV1JsWkNCaGNtZDFiV1Z1ZEhNdVhHNGdLaUJBY0dGeVlXMGdlMEZ5Y21GNWZTQndZWEowYVdGc2N5QlVhR1VnWVhKbmRXMWxiblJ6SUhSdklHRndjR1Z1WkNCMGJ5QjBhRzl6WlNCd2NtOTJhV1JsWkM1Y2JpQXFJRUJ3WVhKaGJTQjdRWEp5WVhsOUlHaHZiR1JsY25NZ1ZHaGxJR0J3WVhKMGFXRnNjMkFnY0d4aFkyVm9iMnhrWlhJZ2FXNWtaWGhsY3k1Y2JpQXFJRUJ3WVhKaGJYTWdlMkp2YjJ4bFlXNTlJRnRwYzBOMWNuSnBaV1JkSUZOd1pXTnBabmtnWTI5dGNHOXphVzVuSUdadmNpQmhJR04xY25KcFpXUWdablZ1WTNScGIyNHVYRzRnS2lCQWNtVjBkWEp1Y3lCN1FYSnlZWGw5SUZKbGRIVnlibk1nZEdobElHNWxkeUJoY25KaGVTQnZaaUJqYjIxd2IzTmxaQ0JoY21kMWJXVnVkSE11WEc0Z0tpOWNibVoxYm1OMGFXOXVJR052YlhCdmMyVkJjbWR6VW1sbmFIUW9ZWEpuY3l3Z2NHRnlkR2xoYkhNc0lHaHZiR1JsY25Nc0lHbHpRM1Z5Y21sbFpDa2dlMXh1SUNCMllYSWdZWEpuYzBsdVpHVjRJRDBnTFRFc1hHNGdJQ0FnSUNCaGNtZHpUR1Z1WjNSb0lEMGdZWEpuY3k1c1pXNW5kR2dzWEc0Z0lDQWdJQ0JvYjJ4a1pYSnpTVzVrWlhnZ1BTQXRNU3hjYmlBZ0lDQWdJR2h2YkdSbGNuTk1aVzVuZEdnZ1BTQm9iMnhrWlhKekxteGxibWQwYUN4Y2JpQWdJQ0FnSUhKcFoyaDBTVzVrWlhnZ1BTQXRNU3hjYmlBZ0lDQWdJSEpwWjJoMFRHVnVaM1JvSUQwZ2NHRnlkR2xoYkhNdWJHVnVaM1JvTEZ4dUlDQWdJQ0FnY21GdVoyVk1aVzVuZEdnZ1BTQnVZWFJwZG1WTllYZ29ZWEpuYzB4bGJtZDBhQ0F0SUdodmJHUmxjbk5NWlc1bmRHZ3NJREFwTEZ4dUlDQWdJQ0FnY21WemRXeDBJRDBnUVhKeVlYa29jbUZ1WjJWTVpXNW5kR2dnS3lCeWFXZG9kRXhsYm1kMGFDa3NYRzRnSUNBZ0lDQnBjMVZ1WTNWeWNtbGxaQ0E5SUNGcGMwTjFjbkpwWldRN1hHNWNiaUFnZDJocGJHVWdLQ3NyWVhKbmMwbHVaR1Y0SUR3Z2NtRnVaMlZNWlc1bmRHZ3BJSHRjYmlBZ0lDQnlaWE4xYkhSYllYSm5jMGx1WkdWNFhTQTlJR0Z5WjNOYllYSm5jMGx1WkdWNFhUdGNiaUFnZlZ4dUlDQjJZWElnYjJabWMyVjBJRDBnWVhKbmMwbHVaR1Y0TzF4dUlDQjNhR2xzWlNBb0t5dHlhV2RvZEVsdVpHVjRJRHdnY21sbmFIUk1aVzVuZEdncElIdGNiaUFnSUNCeVpYTjFiSFJiYjJabWMyVjBJQ3NnY21sbmFIUkpibVJsZUYwZ1BTQndZWEowYVdGc2MxdHlhV2RvZEVsdVpHVjRYVHRjYmlBZ2ZWeHVJQ0IzYUdsc1pTQW9LeXRvYjJ4a1pYSnpTVzVrWlhnZ1BDQm9iMnhrWlhKelRHVnVaM1JvS1NCN1hHNGdJQ0FnYVdZZ0tHbHpWVzVqZFhKeWFXVmtJSHg4SUdGeVozTkpibVJsZUNBOElHRnlaM05NWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJSEpsYzNWc2RGdHZabVp6WlhRZ0t5Qm9iMnhrWlhKelcyaHZiR1JsY25OSmJtUmxlRjFkSUQwZ1lYSm5jMXRoY21kelNXNWtaWGdySzEwN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1kyOXRjRzl6WlVGeVozTlNhV2RvZER0Y2JpSXNJaThxS2x4dUlDb2dSMlYwY3lCMGFHVWdiblZ0WW1WeUlHOW1JR0J3YkdGalpXaHZiR1JsY21BZ2IyTmpkWEp5Wlc1alpYTWdhVzRnWUdGeWNtRjVZQzVjYmlBcVhHNGdLaUJBY0hKcGRtRjBaVnh1SUNvZ1FIQmhjbUZ0SUh0QmNuSmhlWDBnWVhKeVlYa2dWR2hsSUdGeWNtRjVJSFJ2SUdsdWMzQmxZM1F1WEc0Z0tpQkFjR0Z5WVcwZ2V5cDlJSEJzWVdObGFHOXNaR1Z5SUZSb1pTQndiR0ZqWldodmJHUmxjaUIwYnlCelpXRnlZMmdnWm05eUxseHVJQ29nUUhKbGRIVnlibk1nZTI1MWJXSmxjbjBnVW1WMGRYSnVjeUIwYUdVZ2NHeGhZMlZvYjJ4a1pYSWdZMjkxYm5RdVhHNGdLaTljYm1aMWJtTjBhVzl1SUdOdmRXNTBTRzlzWkdWeWN5aGhjbkpoZVN3Z2NHeGhZMlZvYjJ4a1pYSXBJSHRjYmlBZ2RtRnlJR3hsYm1kMGFDQTlJR0Z5Y21GNUxteGxibWQwYUN4Y2JpQWdJQ0FnSUhKbGMzVnNkQ0E5SURBN1hHNWNiaUFnZDJocGJHVWdLR3hsYm1kMGFDMHRLU0I3WEc0Z0lDQWdhV1lnS0dGeWNtRjVXMnhsYm1kMGFGMGdQVDA5SUhCc1lXTmxhRzlzWkdWeUtTQjdYRzRnSUNBZ0lDQXJLM0psYzNWc2REdGNiaUFnSUNCOVhHNGdJSDFjYmlBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmpiM1Z1ZEVodmJHUmxjbk03WEc0aUxDSXZLaXBjYmlBcUlGUm9aU0JtZFc1amRHbHZiaUIzYUc5elpTQndjbTkwYjNSNWNHVWdZMmhoYVc0Z2MyVnhkV1Z1WTJVZ2QzSmhjSEJsY25NZ2FXNW9aWEpwZENCbWNtOXRMbHh1SUNwY2JpQXFJRUJ3Y21sMllYUmxYRzRnS2k5Y2JtWjFibU4wYVc5dUlHSmhjMlZNYjJSaGMyZ29LU0I3WEc0Z0lDOHZJRTV2SUc5d1pYSmhkR2x2YmlCd1pYSm1iM0p0WldRdVhHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWW1GelpVeHZaR0Z6YUR0Y2JpSXNJblpoY2lCaVlYTmxRM0psWVhSbElEMGdjbVZ4ZFdseVpTZ25MaTlmWW1GelpVTnlaV0YwWlNjcExGeHVJQ0FnSUdKaGMyVk1iMlJoYzJnZ1BTQnlaWEYxYVhKbEtDY3VMMTlpWVhObFRHOWtZWE5vSnlrN1hHNWNiaThxS2lCVmMyVmtJR0Z6SUhKbFptVnlaVzVqWlhNZ1ptOXlJSFJvWlNCdFlYaHBiWFZ0SUd4bGJtZDBhQ0JoYm1RZ2FXNWtaWGdnYjJZZ1lXNGdZWEp5WVhrdUlDb3ZYRzUyWVhJZ1RVRllYMEZTVWtGWlgweEZUa2RVU0NBOUlEUXlPVFE1TmpjeU9UVTdYRzVjYmk4cUtseHVJQ29nUTNKbFlYUmxjeUJoSUd4aGVua2dkM0poY0hCbGNpQnZZbXBsWTNRZ2QyaHBZMmdnZDNKaGNITWdZSFpoYkhWbFlDQjBieUJsYm1GaWJHVWdiR0Y2ZVNCbGRtRnNkV0YwYVc5dUxseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaUJBWTI5dWMzUnlkV04wYjNKY2JpQXFJRUJ3WVhKaGJTQjdLbjBnZG1Gc2RXVWdWR2hsSUhaaGJIVmxJSFJ2SUhkeVlYQXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlFeGhlbmxYY21Gd2NHVnlLSFpoYkhWbEtTQjdYRzRnSUhSb2FYTXVYMTkzY21Gd2NHVmtYMThnUFNCMllXeDFaVHRjYmlBZ2RHaHBjeTVmWDJGamRHbHZibk5mWHlBOUlGdGRPMXh1SUNCMGFHbHpMbDlmWkdseVgxOGdQU0F4TzF4dUlDQjBhR2x6TGw5ZlptbHNkR1Z5WldSZlh5QTlJR1poYkhObE8xeHVJQ0IwYUdsekxsOWZhWFJsY21GMFpXVnpYMThnUFNCYlhUdGNiaUFnZEdocGN5NWZYM1JoYTJWRGIzVnVkRjlmSUQwZ1RVRllYMEZTVWtGWlgweEZUa2RVU0R0Y2JpQWdkR2hwY3k1ZlgzWnBaWGR6WDE4Z1BTQmJYVHRjYm4xY2JseHVMeThnUlc1emRYSmxJR0JNWVhwNVYzSmhjSEJsY21BZ2FYTWdZVzRnYVc1emRHRnVZMlVnYjJZZ1lHSmhjMlZNYjJSaGMyaGdMbHh1VEdGNmVWZHlZWEJ3WlhJdWNISnZkRzkwZVhCbElEMGdZbUZ6WlVOeVpXRjBaU2hpWVhObFRHOWtZWE5vTG5CeWIzUnZkSGx3WlNrN1hHNU1ZWHA1VjNKaGNIQmxjaTV3Y205MGIzUjVjR1V1WTI5dWMzUnlkV04wYjNJZ1BTQk1ZWHA1VjNKaGNIQmxjanRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCTVlYcDVWM0poY0hCbGNqdGNiaUlzSWk4cUtseHVJQ29nVkdocGN5QnRaWFJvYjJRZ2NtVjBkWEp1Y3lCZ2RXNWtaV1pwYm1Wa1lDNWNiaUFxWEc0Z0tpQkFjM1JoZEdsalhHNGdLaUJBYldWdFltVnlUMllnWDF4dUlDb2dRSE5wYm1ObElESXVNeTR3WEc0Z0tpQkFZMkYwWldkdmNua2dWWFJwYkZ4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxWEc0Z0tpQmZMblJwYldWektESXNJRjh1Ym05dmNDazdYRzRnS2lBdkx5QTlQaUJiZFc1a1pXWnBibVZrTENCMWJtUmxabWx1WldSZFhHNGdLaTljYm1aMWJtTjBhVzl1SUc1dmIzQW9LU0I3WEc0Z0lDOHZJRTV2SUc5d1pYSmhkR2x2YmlCd1pYSm1iM0p0WldRdVhHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnYm05dmNEdGNiaUlzSW5aaGNpQnRaWFJoVFdGd0lEMGdjbVZ4ZFdseVpTZ25MaTlmYldWMFlVMWhjQ2NwTEZ4dUlDQWdJRzV2YjNBZ1BTQnlaWEYxYVhKbEtDY3VMMjV2YjNBbktUdGNibHh1THlvcVhHNGdLaUJIWlhSeklHMWxkR0ZrWVhSaElHWnZjaUJnWm5WdVkyQXVYRzRnS2x4dUlDb2dRSEJ5YVhaaGRHVmNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdaMWJtTWdWR2hsSUdaMWJtTjBhVzl1SUhSdklIRjFaWEo1TGx4dUlDb2dRSEpsZEhWeWJuTWdleXA5SUZKbGRIVnlibk1nZEdobElHMWxkR0ZrWVhSaElHWnZjaUJnWm5WdVkyQXVYRzRnS2k5Y2JuWmhjaUJuWlhSRVlYUmhJRDBnSVcxbGRHRk5ZWEFnUHlCdWIyOXdJRG9nWm5WdVkzUnBiMjRvWm5WdVl5a2dlMXh1SUNCeVpYUjFjbTRnYldWMFlVMWhjQzVuWlhRb1puVnVZeWs3WEc1OU8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR2RsZEVSaGRHRTdYRzRpTENJdktpb2dWWE5sWkNCMGJ5QnNiMjlyZFhBZ2RXNXRhVzVwWm1sbFpDQm1kVzVqZEdsdmJpQnVZVzFsY3k0Z0tpOWNiblpoY2lCeVpXRnNUbUZ0WlhNZ1BTQjdmVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCeVpXRnNUbUZ0WlhNN1hHNGlMQ0oyWVhJZ2NtVmhiRTVoYldWeklEMGdjbVZ4ZFdseVpTZ25MaTlmY21WaGJFNWhiV1Z6SnlrN1hHNWNiaThxS2lCVmMyVmtJR1p2Y2lCaWRXbHNkQzFwYmlCdFpYUm9iMlFnY21WbVpYSmxibU5sY3k0Z0tpOWNiblpoY2lCdlltcGxZM1JRY205MGJ5QTlJRTlpYW1WamRDNXdjbTkwYjNSNWNHVTdYRzVjYmk4cUtpQlZjMlZrSUhSdklHTm9aV05ySUc5aWFtVmpkSE1nWm05eUlHOTNiaUJ3Y205d1pYSjBhV1Z6TGlBcUwxeHVkbUZ5SUdoaGMwOTNibEJ5YjNCbGNuUjVJRDBnYjJKcVpXTjBVSEp2ZEc4dWFHRnpUM2R1VUhKdmNHVnlkSGs3WEc1Y2JpOHFLbHh1SUNvZ1IyVjBjeUIwYUdVZ2JtRnRaU0J2WmlCZ1puVnVZMkF1WEc0Z0tseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlHWjFibU1nVkdobElHWjFibU4wYVc5dUlIUnZJSEYxWlhKNUxseHVJQ29nUUhKbGRIVnlibk1nZTNOMGNtbHVaMzBnVW1WMGRYSnVjeUIwYUdVZ1puVnVZM1JwYjI0Z2JtRnRaUzVjYmlBcUwxeHVablZ1WTNScGIyNGdaMlYwUm5WdVkwNWhiV1VvWm5WdVl5a2dlMXh1SUNCMllYSWdjbVZ6ZFd4MElEMGdLR1oxYm1NdWJtRnRaU0FySUNjbktTeGNiaUFnSUNBZ0lHRnljbUY1SUQwZ2NtVmhiRTVoYldWelczSmxjM1ZzZEYwc1hHNGdJQ0FnSUNCc1pXNW5kR2dnUFNCb1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c0tISmxZV3hPWVcxbGN5d2djbVZ6ZFd4MEtTQS9JR0Z5Y21GNUxteGxibWQwYUNBNklEQTdYRzVjYmlBZ2QyaHBiR1VnS0d4bGJtZDBhQzB0S1NCN1hHNGdJQ0FnZG1GeUlHUmhkR0VnUFNCaGNuSmhlVnRzWlc1bmRHaGRMRnh1SUNBZ0lDQWdJQ0J2ZEdobGNrWjFibU1nUFNCa1lYUmhMbVoxYm1NN1hHNGdJQ0FnYVdZZ0tHOTBhR1Z5Um5WdVl5QTlQU0J1ZFd4c0lIeDhJRzkwYUdWeVJuVnVZeUE5UFNCbWRXNWpLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdaR0YwWVM1dVlXMWxPMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQnlaWFIxY200Z2NtVnpkV3gwTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR2RsZEVaMWJtTk9ZVzFsTzF4dUlpd2lkbUZ5SUdKaGMyVkRjbVZoZEdVZ1BTQnlaWEYxYVhKbEtDY3VMMTlpWVhObFEzSmxZWFJsSnlrc1hHNGdJQ0FnWW1GelpVeHZaR0Z6YUNBOUlISmxjWFZwY21Vb0p5NHZYMkpoYzJWTWIyUmhjMmduS1R0Y2JseHVMeW9xWEc0Z0tpQlVhR1VnWW1GelpTQmpiMjV6ZEhKMVkzUnZjaUJtYjNJZ1kzSmxZWFJwYm1jZ1lHeHZaR0Z6YUdBZ2QzSmhjSEJsY2lCdlltcGxZM1J6TGx4dUlDcGNiaUFxSUVCd2NtbDJZWFJsWEc0Z0tpQkFjR0Z5WVcwZ2V5cDlJSFpoYkhWbElGUm9aU0IyWVd4MVpTQjBieUIzY21Gd0xseHVJQ29nUUhCaGNtRnRJSHRpYjI5c1pXRnVmU0JiWTJoaGFXNUJiR3hkSUVWdVlXSnNaU0JsZUhCc2FXTnBkQ0J0WlhSb2IyUWdZMmhoYVc0Z2MyVnhkV1Z1WTJWekxseHVJQ292WEc1bWRXNWpkR2x2YmlCTWIyUmhjMmhYY21Gd2NHVnlLSFpoYkhWbExDQmphR0ZwYmtGc2JDa2dlMXh1SUNCMGFHbHpMbDlmZDNKaGNIQmxaRjlmSUQwZ2RtRnNkV1U3WEc0Z0lIUm9hWE11WDE5aFkzUnBiMjV6WDE4Z1BTQmJYVHRjYmlBZ2RHaHBjeTVmWDJOb1lXbHVYMThnUFNBaElXTm9ZV2x1UVd4c08xeHVJQ0IwYUdsekxsOWZhVzVrWlhoZlh5QTlJREE3WEc0Z0lIUm9hWE11WDE5MllXeDFaWE5mWHlBOUlIVnVaR1ZtYVc1bFpEdGNibjFjYmx4dVRHOWtZWE5vVjNKaGNIQmxjaTV3Y205MGIzUjVjR1VnUFNCaVlYTmxRM0psWVhSbEtHSmhjMlZNYjJSaGMyZ3VjSEp2ZEc5MGVYQmxLVHRjYmt4dlpHRnphRmR5WVhCd1pYSXVjSEp2ZEc5MGVYQmxMbU52Ym5OMGNuVmpkRzl5SUQwZ1RHOWtZWE5vVjNKaGNIQmxjanRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCTWIyUmhjMmhYY21Gd2NHVnlPMXh1SWl3aWRtRnlJRXhoZW5sWGNtRndjR1Z5SUQwZ2NtVnhkV2x5WlNnbkxpOWZUR0Y2ZVZkeVlYQndaWEluS1N4Y2JpQWdJQ0JNYjJSaGMyaFhjbUZ3Y0dWeUlEMGdjbVZ4ZFdseVpTZ25MaTlmVEc5a1lYTm9WM0poY0hCbGNpY3BMRnh1SUNBZ0lHTnZjSGxCY25KaGVTQTlJSEpsY1hWcGNtVW9KeTR2WDJOdmNIbEJjbkpoZVNjcE8xeHVYRzR2S2lwY2JpQXFJRU55WldGMFpYTWdZU0JqYkc5dVpTQnZaaUJnZDNKaGNIQmxjbUF1WEc0Z0tseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCM2NtRndjR1Z5SUZSb1pTQjNjbUZ3Y0dWeUlIUnZJR05zYjI1bExseHVJQ29nUUhKbGRIVnlibk1nZTA5aWFtVmpkSDBnVW1WMGRYSnVjeUIwYUdVZ1kyeHZibVZrSUhkeVlYQndaWEl1WEc0Z0tpOWNibVoxYm1OMGFXOXVJSGR5WVhCd1pYSkRiRzl1WlNoM2NtRndjR1Z5S1NCN1hHNGdJR2xtSUNoM2NtRndjR1Z5SUdsdWMzUmhibU5sYjJZZ1RHRjZlVmR5WVhCd1pYSXBJSHRjYmlBZ0lDQnlaWFIxY200Z2QzSmhjSEJsY2k1amJHOXVaU2dwTzF4dUlDQjlYRzRnSUhaaGNpQnlaWE4xYkhRZ1BTQnVaWGNnVEc5a1lYTm9WM0poY0hCbGNpaDNjbUZ3Y0dWeUxsOWZkM0poY0hCbFpGOWZMQ0IzY21Gd2NHVnlMbDlmWTJoaGFXNWZYeWs3WEc0Z0lISmxjM1ZzZEM1ZlgyRmpkR2x2Ym5OZlh5QTlJR052Y0hsQmNuSmhlU2gzY21Gd2NHVnlMbDlmWVdOMGFXOXVjMTlmS1R0Y2JpQWdjbVZ6ZFd4MExsOWZhVzVrWlhoZlh5QWdQU0IzY21Gd2NHVnlMbDlmYVc1a1pYaGZYenRjYmlBZ2NtVnpkV3gwTGw5ZmRtRnNkV1Z6WDE4Z1BTQjNjbUZ3Y0dWeUxsOWZkbUZzZFdWelgxODdYRzRnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2QzSmhjSEJsY2tOc2IyNWxPMXh1SWl3aWRtRnlJRXhoZW5sWGNtRndjR1Z5SUQwZ2NtVnhkV2x5WlNnbkxpOWZUR0Y2ZVZkeVlYQndaWEluS1N4Y2JpQWdJQ0JNYjJSaGMyaFhjbUZ3Y0dWeUlEMGdjbVZ4ZFdseVpTZ25MaTlmVEc5a1lYTm9WM0poY0hCbGNpY3BMRnh1SUNBZ0lHSmhjMlZNYjJSaGMyZ2dQU0J5WlhGMWFYSmxLQ2N1TDE5aVlYTmxURzlrWVhOb0p5a3NYRzRnSUNBZ2FYTkJjbkpoZVNBOUlISmxjWFZwY21Vb0p5NHZhWE5CY25KaGVTY3BMRnh1SUNBZ0lHbHpUMkpxWldOMFRHbHJaU0E5SUhKbGNYVnBjbVVvSnk0dmFYTlBZbXBsWTNSTWFXdGxKeWtzWEc0Z0lDQWdkM0poY0hCbGNrTnNiMjVsSUQwZ2NtVnhkV2x5WlNnbkxpOWZkM0poY0hCbGNrTnNiMjVsSnlrN1hHNWNiaThxS2lCVmMyVmtJR1p2Y2lCaWRXbHNkQzFwYmlCdFpYUm9iMlFnY21WbVpYSmxibU5sY3k0Z0tpOWNiblpoY2lCdlltcGxZM1JRY205MGJ5QTlJRTlpYW1WamRDNXdjbTkwYjNSNWNHVTdYRzVjYmk4cUtpQlZjMlZrSUhSdklHTm9aV05ySUc5aWFtVmpkSE1nWm05eUlHOTNiaUJ3Y205d1pYSjBhV1Z6TGlBcUwxeHVkbUZ5SUdoaGMwOTNibEJ5YjNCbGNuUjVJRDBnYjJKcVpXTjBVSEp2ZEc4dWFHRnpUM2R1VUhKdmNHVnlkSGs3WEc1Y2JpOHFLbHh1SUNvZ1EzSmxZWFJsY3lCaElHQnNiMlJoYzJoZ0lHOWlhbVZqZENCM2FHbGphQ0IzY21Gd2N5QmdkbUZzZFdWZ0lIUnZJR1Z1WVdKc1pTQnBiWEJzYVdOcGRDQnRaWFJvYjJSY2JpQXFJR05vWVdsdUlITmxjWFZsYm1ObGN5NGdUV1YwYUc5a2N5QjBhR0YwSUc5d1pYSmhkR1VnYjI0Z1lXNWtJSEpsZEhWeWJpQmhjbkpoZVhNc0lHTnZiR3hsWTNScGIyNXpMRnh1SUNvZ1lXNWtJR1oxYm1OMGFXOXVjeUJqWVc0Z1ltVWdZMmhoYVc1bFpDQjBiMmRsZEdobGNpNGdUV1YwYUc5a2N5QjBhR0YwSUhKbGRISnBaWFpsSUdFZ2MybHVaMnhsSUhaaGJIVmxYRzRnS2lCdmNpQnRZWGtnY21WMGRYSnVJR0VnY0hKcGJXbDBhWFpsSUhaaGJIVmxJSGRwYkd3Z1lYVjBiMjFoZEdsallXeHNlU0JsYm1RZ2RHaGxJR05vWVdsdUlITmxjWFZsYm1ObFhHNGdLaUJoYm1RZ2NtVjBkWEp1SUhSb1pTQjFibmR5WVhCd1pXUWdkbUZzZFdVdUlFOTBhR1Z5ZDJselpTd2dkR2hsSUhaaGJIVmxJRzExYzNRZ1ltVWdkVzUzY21Gd2NHVmtYRzRnS2lCM2FYUm9JR0JmSTNaaGJIVmxZQzVjYmlBcVhHNGdLaUJGZUhCc2FXTnBkQ0JqYUdGcGJpQnpaWEYxWlc1alpYTXNJSGRvYVdOb0lHMTFjM1FnWW1VZ2RXNTNjbUZ3Y0dWa0lIZHBkR2dnWUY4amRtRnNkV1ZnTENCdFlYa2dZbVZjYmlBcUlHVnVZV0pzWldRZ2RYTnBibWNnWUY4dVkyaGhhVzVnTGx4dUlDcGNiaUFxSUZSb1pTQmxlR1ZqZFhScGIyNGdiMllnWTJoaGFXNWxaQ0J0WlhSb2IyUnpJR2x6SUd4aGVua3NJSFJvWVhRZ2FYTXNJR2wwSjNNZ1pHVm1aWEp5WldRZ2RXNTBhV3hjYmlBcUlHQmZJM1poYkhWbFlDQnBjeUJwYlhCc2FXTnBkR3g1SUc5eUlHVjRjR3hwWTJsMGJIa2dZMkZzYkdWa0xseHVJQ3BjYmlBcUlFeGhlbmtnWlhaaGJIVmhkR2x2YmlCaGJHeHZkM01nYzJWMlpYSmhiQ0J0WlhSb2IyUnpJSFJ2SUhOMWNIQnZjblFnYzJodmNuUmpkWFFnWm5WemFXOXVMbHh1SUNvZ1UyaHZjblJqZFhRZ1puVnphVzl1SUdseklHRnVJRzl3ZEdsdGFYcGhkR2x2YmlCMGJ5QnRaWEpuWlNCcGRHVnlZWFJsWlNCallXeHNjenNnZEdocGN5QmhkbTlwWkhOY2JpQXFJSFJvWlNCamNtVmhkR2x2YmlCdlppQnBiblJsY20xbFpHbGhkR1VnWVhKeVlYbHpJR0Z1WkNCallXNGdaM0psWVhSc2VTQnlaV1IxWTJVZ2RHaGxJRzUxYldKbGNpQnZabHh1SUNvZ2FYUmxjbUYwWldVZ1pYaGxZM1YwYVc5dWN5NGdVMlZqZEdsdmJuTWdiMllnWVNCamFHRnBiaUJ6WlhGMVpXNWpaU0J4ZFdGc2FXWjVJR1p2Y2lCemFHOXlkR04xZEZ4dUlDb2dablZ6YVc5dUlHbG1JSFJvWlNCelpXTjBhVzl1SUdseklHRndjR3hwWldRZ2RHOGdZVzRnWVhKeVlYa2dZVzVrSUdsMFpYSmhkR1ZsY3lCaFkyTmxjSFFnYjI1c2VWeHVJQ29nYjI1bElHRnlaM1Z0Wlc1MExpQlVhR1VnYUdWMWNtbHpkR2xqSUdadmNpQjNhR1YwYUdWeUlHRWdjMlZqZEdsdmJpQnhkV0ZzYVdacFpYTWdabTl5SUhOb2IzSjBZM1YwWEc0Z0tpQm1kWE5wYjI0Z2FYTWdjM1ZpYW1WamRDQjBieUJqYUdGdVoyVXVYRzRnS2x4dUlDb2dRMmhoYVc1cGJtY2dhWE1nYzNWd2NHOXlkR1ZrSUdsdUlHTjFjM1J2YlNCaWRXbHNaSE1nWVhNZ2JHOXVaeUJoY3lCMGFHVWdZRjhqZG1Gc2RXVmdJRzFsZEdodlpDQnBjMXh1SUNvZ1pHbHlaV04wYkhrZ2IzSWdhVzVrYVhKbFkzUnNlU0JwYm1Oc2RXUmxaQ0JwYmlCMGFHVWdZblZwYkdRdVhHNGdLbHh1SUNvZ1NXNGdZV1JrYVhScGIyNGdkRzhnYkc5a1lYTm9JRzFsZEdodlpITXNJSGR5WVhCd1pYSnpJR2hoZG1VZ1lFRnljbUY1WUNCaGJtUWdZRk4wY21sdVoyQWdiV1YwYUc5a2N5NWNiaUFxWEc0Z0tpQlVhR1VnZDNKaGNIQmxjaUJnUVhKeVlYbGdJRzFsZEdodlpITWdZWEpsT2x4dUlDb2dZR052Ym1OaGRHQXNJR0JxYjJsdVlDd2dZSEJ2Y0dBc0lHQndkWE5vWUN3Z1lITm9hV1owWUN3Z1lITnZjblJnTENCZ2MzQnNhV05sWUN3Z1lXNWtJR0IxYm5Ob2FXWjBZRnh1SUNwY2JpQXFJRlJvWlNCM2NtRndjR1Z5SUdCVGRISnBibWRnSUcxbGRHaHZaSE1nWVhKbE9seHVJQ29nWUhKbGNHeGhZMlZnSUdGdVpDQmdjM0JzYVhSZ1hHNGdLbHh1SUNvZ1ZHaGxJSGR5WVhCd1pYSWdiV1YwYUc5a2N5QjBhR0YwSUhOMWNIQnZjblFnYzJodmNuUmpkWFFnWm5WemFXOXVJR0Z5WlRwY2JpQXFJR0JoZEdBc0lHQmpiMjF3WVdOMFlDd2dZR1J5YjNCZ0xDQmdaSEp2Y0ZKcFoyaDBZQ3dnWUdSeWIzQlhhR2xzWldBc0lHQm1hV3gwWlhKZ0xDQmdabWx1WkdBc1hHNGdLaUJnWm1sdVpFeGhjM1JnTENCZ2FHVmhaR0FzSUdCcGJtbDBhV0ZzWUN3Z1lHeGhjM1JnTENCZ2JXRndZQ3dnWUhKbGFtVmpkR0FzSUdCeVpYWmxjbk5sWUN3Z1lITnNhV05sWUN4Y2JpQXFJR0IwWVdsc1lDd2dZSFJoYTJWZ0xDQmdkR0ZyWlZKcFoyaDBZQ3dnWUhSaGEyVlNhV2RvZEZkb2FXeGxZQ3dnWUhSaGEyVlhhR2xzWldBc0lHRnVaQ0JnZEc5QmNuSmhlV0JjYmlBcVhHNGdLaUJVYUdVZ1kyaGhhVzVoWW14bElIZHlZWEJ3WlhJZ2JXVjBhRzlrY3lCaGNtVTZYRzRnS2lCZ1lXWjBaWEpnTENCZ1lYSjVZQ3dnWUdGemMybG5ibUFzSUdCaGMzTnBaMjVKYm1Bc0lHQmhjM05wWjI1SmJsZHBkR2hnTENCZ1lYTnphV2R1VjJsMGFHQXNJR0JoZEdBc1hHNGdLaUJnWW1WbWIzSmxZQ3dnWUdKcGJtUmdMQ0JnWW1sdVpFRnNiR0FzSUdCaWFXNWtTMlY1WUN3Z1lHTmhjM1JCY25KaGVXQXNJR0JqYUdGcGJtQXNJR0JqYUhWdWEyQXNYRzRnS2lCZ1kyOXRiV2wwWUN3Z1lHTnZiWEJoWTNSZ0xDQmdZMjl1WTJGMFlDd2dZR052Ym1admNtMXpZQ3dnWUdOdmJuTjBZVzUwWUN3Z1lHTnZkVzUwUW5sZ0xDQmdZM0psWVhSbFlDeGNiaUFxSUdCamRYSnllV0FzSUdCa1pXSnZkVzVqWldBc0lHQmtaV1poZFd4MGMyQXNJR0JrWldaaGRXeDBjMFJsWlhCZ0xDQmdaR1ZtWlhKZ0xDQmdaR1ZzWVhsZ0xGeHVJQ29nWUdScFptWmxjbVZ1WTJWZ0xDQmdaR2xtWm1WeVpXNWpaVUo1WUN3Z1lHUnBabVpsY21WdVkyVlhhWFJvWUN3Z1lHUnliM0JnTENCZ1pISnZjRkpwWjJoMFlDeGNiaUFxSUdCa2NtOXdVbWxuYUhSWGFHbHNaV0FzSUdCa2NtOXdWMmhwYkdWZ0xDQmdaWGgwWlc1a1lDd2dZR1Y0ZEdWdVpGZHBkR2hnTENCZ1ptbHNiR0FzSUdCbWFXeDBaWEpnTEZ4dUlDb2dZR1pzWVhSTllYQmdMQ0JnWm14aGRFMWhjRVJsWlhCZ0xDQmdabXhoZEUxaGNFUmxjSFJvWUN3Z1lHWnNZWFIwWlc1Z0xDQmdabXhoZEhSbGJrUmxaWEJnTEZ4dUlDb2dZR1pzWVhSMFpXNUVaWEIwYUdBc0lHQm1iR2x3WUN3Z1lHWnNiM2RnTENCZ1pteHZkMUpwWjJoMFlDd2dZR1p5YjIxUVlXbHljMkFzSUdCbWRXNWpkR2x2Ym5OZ0xGeHVJQ29nWUdaMWJtTjBhVzl1YzBsdVlDd2dZR2R5YjNWd1FubGdMQ0JnYVc1cGRHbGhiR0FzSUdCcGJuUmxjbk5sWTNScGIyNWdMQ0JnYVc1MFpYSnpaV04wYVc5dVFubGdMRnh1SUNvZ1lHbHVkR1Z5YzJWamRHbHZibGRwZEdoZ0xDQmdhVzUyWlhKMFlDd2dZR2x1ZG1WeWRFSjVZQ3dnWUdsdWRtOXJaVTFoY0dBc0lHQnBkR1Z5WVhSbFpXQXNJR0JyWlhsQ2VXQXNYRzRnS2lCZ2EyVjVjMkFzSUdCclpYbHpTVzVnTENCZ2JXRndZQ3dnWUcxaGNFdGxlWE5nTENCZ2JXRndWbUZzZFdWellDd2dZRzFoZEdOb1pYTmdMQ0JnYldGMFkyaGxjMUJ5YjNCbGNuUjVZQ3hjYmlBcUlHQnRaVzF2YVhwbFlDd2dZRzFsY21kbFlDd2dZRzFsY21kbFYybDBhR0FzSUdCdFpYUm9iMlJnTENCZ2JXVjBhRzlrVDJaZ0xDQmdiV2w0YVc1Z0xDQmdibVZuWVhSbFlDeGNiaUFxSUdCdWRHaEJjbWRnTENCZ2IyMXBkR0FzSUdCdmJXbDBRbmxnTENCZ2IyNWpaV0FzSUdCdmNtUmxja0o1WUN3Z1lHOTJaWEpnTENCZ2IzWmxja0Z5WjNOZ0xGeHVJQ29nWUc5MlpYSkZkbVZ5ZVdBc0lHQnZkbVZ5VTI5dFpXQXNJR0J3WVhKMGFXRnNZQ3dnWUhCaGNuUnBZV3hTYVdkb2RHQXNJR0J3WVhKMGFYUnBiMjVnTENCZ2NHbGphMkFzWEc0Z0tpQmdjR2xqYTBKNVlDd2dZSEJzWVc1MFlDd2dZSEJ5YjNCbGNuUjVZQ3dnWUhCeWIzQmxjblI1VDJaZ0xDQmdjSFZzYkdBc0lHQndkV3hzUVd4c1lDd2dZSEIxYkd4QmJHeENlV0FzWEc0Z0tpQmdjSFZzYkVGc2JGZHBkR2hnTENCZ2NIVnNiRUYwWUN3Z1lIQjFjMmhnTENCZ2NtRnVaMlZnTENCZ2NtRnVaMlZTYVdkb2RHQXNJR0J5WldGeVoyQXNJR0J5WldwbFkzUmdMRnh1SUNvZ1lISmxiVzkyWldBc0lHQnlaWE4wWUN3Z1lISmxkbVZ5YzJWZ0xDQmdjMkZ0Y0d4bFUybDZaV0FzSUdCelpYUmdMQ0JnYzJWMFYybDBhR0FzSUdCemFIVm1abXhsWUN4Y2JpQXFJR0J6YkdsalpXQXNJR0J6YjNKMFlDd2dZSE52Y25SQ2VXQXNJR0J6Y0d4cFkyVmdMQ0JnYzNCeVpXRmtZQ3dnWUhSaGFXeGdMQ0JnZEdGclpXQXNJR0IwWVd0bFVtbG5hSFJnTEZ4dUlDb2dZSFJoYTJWU2FXZG9kRmRvYVd4bFlDd2dZSFJoYTJWWGFHbHNaV0FzSUdCMFlYQmdMQ0JnZEdoeWIzUjBiR1ZnTENCZ2RHaHlkV0FzSUdCMGIwRnljbUY1WUN4Y2JpQXFJR0IwYjFCaGFYSnpZQ3dnWUhSdlVHRnBjbk5KYm1Bc0lHQjBiMUJoZEdoZ0xDQmdkRzlRYkdGcGJrOWlhbVZqZEdBc0lHQjBjbUZ1YzJadmNtMWdMQ0JnZFc1aGNubGdMRnh1SUNvZ1lIVnVhVzl1WUN3Z1lIVnVhVzl1UW5sZ0xDQmdkVzVwYjI1WGFYUm9ZQ3dnWUhWdWFYRmdMQ0JnZFc1cGNVSjVZQ3dnWUhWdWFYRlhhWFJvWUN3Z1lIVnVjMlYwWUN4Y2JpQXFJR0IxYm5Ob2FXWjBZQ3dnWUhWdWVtbHdZQ3dnWUhWdWVtbHdWMmwwYUdBc0lHQjFjR1JoZEdWZ0xDQmdkWEJrWVhSbFYybDBhR0FzSUdCMllXeDFaWE5nTEZ4dUlDb2dZSFpoYkhWbGMwbHVZQ3dnWUhkcGRHaHZkWFJnTENCZ2QzSmhjR0FzSUdCNGIzSmdMQ0JnZUc5eVFubGdMQ0JnZUc5eVYybDBhR0FzSUdCNmFYQmdMRnh1SUNvZ1lIcHBjRTlpYW1WamRHQXNJR0I2YVhCUFltcGxZM1JFWldWd1lDd2dZVzVrSUdCNmFYQlhhWFJvWUZ4dUlDcGNiaUFxSUZSb1pTQjNjbUZ3Y0dWeUlHMWxkR2h2WkhNZ2RHaGhkQ0JoY21VZ0tpcHViM1FxS2lCamFHRnBibUZpYkdVZ1lua2daR1ZtWVhWc2RDQmhjbVU2WEc0Z0tpQmdZV1JrWUN3Z1lHRjBkR1Z0Y0hSZ0xDQmdZMkZ0Wld4RFlYTmxZQ3dnWUdOaGNHbDBZV3hwZW1WZ0xDQmdZMlZwYkdBc0lHQmpiR0Z0Y0dBc0lHQmpiRzl1WldBc1hHNGdLaUJnWTJ4dmJtVkVaV1Z3WUN3Z1lHTnNiMjVsUkdWbGNGZHBkR2hnTENCZ1kyeHZibVZYYVhSb1lDd2dZR052Ym1admNtMXpWRzlnTENCZ1pHVmlkWEp5WUN4Y2JpQXFJR0JrWldaaGRXeDBWRzlnTENCZ1pHbDJhV1JsWUN3Z1lHVmhZMmhnTENCZ1pXRmphRkpwWjJoMFlDd2dZR1Z1WkhOWGFYUm9ZQ3dnWUdWeFlDd2dZR1Z6WTJGd1pXQXNYRzRnS2lCZ1pYTmpZWEJsVW1WblJYaHdZQ3dnWUdWMlpYSjVZQ3dnWUdacGJtUmdMQ0JnWm1sdVpFbHVaR1Y0WUN3Z1lHWnBibVJMWlhsZ0xDQmdabWx1WkV4aGMzUmdMRnh1SUNvZ1lHWnBibVJNWVhOMFNXNWtaWGhnTENCZ1ptbHVaRXhoYzNSTFpYbGdMQ0JnWm1seWMzUmdMQ0JnWm14dmIzSmdMQ0JnWm05eVJXRmphR0FzSUdCbWIzSkZZV05vVW1sbmFIUmdMRnh1SUNvZ1lHWnZja2x1WUN3Z1lHWnZja2x1VW1sbmFIUmdMQ0JnWm05eVQzZHVZQ3dnWUdadmNrOTNibEpwWjJoMFlDd2dZR2RsZEdBc0lHQm5kR0FzSUdCbmRHVmdMQ0JnYUdGellDeGNiaUFxSUdCb1lYTkpibUFzSUdCb1pXRmtZQ3dnWUdsa1pXNTBhWFI1WUN3Z1lHbHVZMngxWkdWellDd2dZR2x1WkdWNFQyWmdMQ0JnYVc1U1lXNW5aV0FzSUdCcGJuWnZhMlZnTEZ4dUlDb2dZR2x6UVhKbmRXMWxiblJ6WUN3Z1lHbHpRWEp5WVhsZ0xDQmdhWE5CY25KaGVVSjFabVpsY21Bc0lHQnBjMEZ5Y21GNVRHbHJaV0FzSUdCcGMwRnljbUY1VEdsclpVOWlhbVZqZEdBc1hHNGdLaUJnYVhOQ2IyOXNaV0Z1WUN3Z1lHbHpRblZtWm1WeVlDd2dZR2x6UkdGMFpXQXNJR0JwYzBWc1pXMWxiblJnTENCZ2FYTkZiWEIwZVdBc0lHQnBjMFZ4ZFdGc1lDeGNiaUFxSUdCcGMwVnhkV0ZzVjJsMGFHQXNJR0JwYzBWeWNtOXlZQ3dnWUdselJtbHVhWFJsWUN3Z1lHbHpSblZ1WTNScGIyNWdMQ0JnYVhOSmJuUmxaMlZ5WUN3Z1lHbHpUR1Z1WjNSb1lDeGNiaUFxSUdCcGMwMWhjR0FzSUdCcGMwMWhkR05vWUN3Z1lHbHpUV0YwWTJoWGFYUm9ZQ3dnWUdselRtRk9ZQ3dnWUdselRtRjBhWFpsWUN3Z1lHbHpUbWxzWUN3Z1lHbHpUblZzYkdBc1hHNGdLaUJnYVhOT2RXMWlaWEpnTENCZ2FYTlBZbXBsWTNSZ0xDQmdhWE5QWW1wbFkzUk1hV3RsWUN3Z1lHbHpVR3hoYVc1UFltcGxZM1JnTENCZ2FYTlNaV2RGZUhCZ0xGeHVJQ29nWUdselUyRm1aVWx1ZEdWblpYSmdMQ0JnYVhOVFpYUmdMQ0JnYVhOVGRISnBibWRnTENCZ2FYTlZibVJsWm1sdVpXUmdMQ0JnYVhOVWVYQmxaRUZ5Y21GNVlDeGNiaUFxSUdCcGMxZGxZV3ROWVhCZ0xDQmdhWE5YWldGclUyVjBZQ3dnWUdwdmFXNWdMQ0JnYTJWaVlXSkRZWE5sWUN3Z1lHeGhjM1JnTENCZ2JHRnpkRWx1WkdWNFQyWmdMRnh1SUNvZ1lHeHZkMlZ5UTJGelpXQXNJR0JzYjNkbGNrWnBjbk4wWUN3Z1lHeDBZQ3dnWUd4MFpXQXNJR0J0WVhoZ0xDQmdiV0Y0UW5sZ0xDQmdiV1ZoYm1Bc0lHQnRaV0Z1UW5sZ0xGeHVJQ29nWUcxcGJtQXNJR0J0YVc1Q2VXQXNJR0J0ZFd4MGFYQnNlV0FzSUdCdWIwTnZibVpzYVdOMFlDd2dZRzV2YjNCZ0xDQmdibTkzWUN3Z1lHNTBhR0FzSUdCd1lXUmdMRnh1SUNvZ1lIQmhaRVZ1WkdBc0lHQndZV1JUZEdGeWRHQXNJR0J3WVhKelpVbHVkR0FzSUdCd2IzQmdMQ0JnY21GdVpHOXRZQ3dnWUhKbFpIVmpaV0FzSUdCeVpXUjFZMlZTYVdkb2RHQXNYRzRnS2lCZ2NtVndaV0YwWUN3Z1lISmxjM1ZzZEdBc0lHQnliM1Z1WkdBc0lHQnlkVzVKYmtOdmJuUmxlSFJnTENCZ2MyRnRjR3hsWUN3Z1lITm9hV1owWUN3Z1lITnBlbVZnTEZ4dUlDb2dZSE51WVd0bFEyRnpaV0FzSUdCemIyMWxZQ3dnWUhOdmNuUmxaRWx1WkdWNFlDd2dZSE52Y25SbFpFbHVaR1Y0UW5sZ0xDQmdjMjl5ZEdWa1RHRnpkRWx1WkdWNFlDeGNiaUFxSUdCemIzSjBaV1JNWVhOMFNXNWtaWGhDZVdBc0lHQnpkR0Z5ZEVOaGMyVmdMQ0JnYzNSaGNuUnpWMmwwYUdBc0lHQnpkSFZpUVhKeVlYbGdMQ0JnYzNSMVlrWmhiSE5sWUN4Y2JpQXFJR0J6ZEhWaVQySnFaV04wWUN3Z1lITjBkV0pUZEhKcGJtZGdMQ0JnYzNSMVlsUnlkV1ZnTENCZ2MzVmlkSEpoWTNSZ0xDQmdjM1Z0WUN3Z1lITjFiVUo1WUN4Y2JpQXFJR0IwWlcxd2JHRjBaV0FzSUdCMGFXMWxjMkFzSUdCMGIwWnBibWwwWldBc0lHQjBiMGx1ZEdWblpYSmdMQ0JnZEc5S1UwOU9ZQ3dnWUhSdlRHVnVaM1JvWUN4Y2JpQXFJR0IwYjB4dmQyVnlZQ3dnWUhSdlRuVnRZbVZ5WUN3Z1lIUnZVMkZtWlVsdWRHVm5aWEpnTENCZ2RHOVRkSEpwYm1kZ0xDQmdkRzlWY0hCbGNtQXNJR0IwY21sdFlDeGNiaUFxSUdCMGNtbHRSVzVrWUN3Z1lIUnlhVzFUZEdGeWRHQXNJR0IwY25WdVkyRjBaV0FzSUdCMWJtVnpZMkZ3WldBc0lHQjFibWx4ZFdWSlpHQXNJR0IxY0hCbGNrTmhjMlZnTEZ4dUlDb2dZSFZ3Y0dWeVJtbHljM1JnTENCZ2RtRnNkV1ZnTENCaGJtUWdZSGR2Y21SellGeHVJQ3BjYmlBcUlFQnVZVzFsSUY5Y2JpQXFJRUJqYjI1emRISjFZM1J2Y2x4dUlDb2dRR05oZEdWbmIzSjVJRk5sY1Z4dUlDb2dRSEJoY21GdElIc3FmU0IyWVd4MVpTQlVhR1VnZG1Gc2RXVWdkRzhnZDNKaGNDQnBiaUJoSUdCc2IyUmhjMmhnSUdsdWMzUmhibU5sTGx4dUlDb2dRSEpsZEhWeWJuTWdlMDlpYW1WamRIMGdVbVYwZFhKdWN5QjBhR1VnYm1WM0lHQnNiMlJoYzJoZ0lIZHlZWEJ3WlhJZ2FXNXpkR0Z1WTJVdVhHNGdLaUJBWlhoaGJYQnNaVnh1SUNwY2JpQXFJR1oxYm1OMGFXOXVJSE54ZFdGeVpTaHVLU0I3WEc0Z0tpQWdJSEpsZEhWeWJpQnVJQ29nYmp0Y2JpQXFJSDFjYmlBcVhHNGdLaUIyWVhJZ2QzSmhjSEJsWkNBOUlGOG9XekVzSURJc0lETmRLVHRjYmlBcVhHNGdLaUF2THlCU1pYUjFjbTV6SUdGdUlIVnVkM0poY0hCbFpDQjJZV3gxWlM1Y2JpQXFJSGR5WVhCd1pXUXVjbVZrZFdObEtGOHVZV1JrS1R0Y2JpQXFJQzh2SUQwK0lEWmNiaUFxWEc0Z0tpQXZMeUJTWlhSMWNtNXpJR0VnZDNKaGNIQmxaQ0IyWVd4MVpTNWNiaUFxSUhaaGNpQnpjWFZoY21WeklEMGdkM0poY0hCbFpDNXRZWEFvYzNGMVlYSmxLVHRjYmlBcVhHNGdLaUJmTG1selFYSnlZWGtvYzNGMVlYSmxjeWs3WEc0Z0tpQXZMeUE5UGlCbVlXeHpaVnh1SUNwY2JpQXFJRjh1YVhOQmNuSmhlU2h6Y1hWaGNtVnpMblpoYkhWbEtDa3BPMXh1SUNvZ0x5OGdQVDRnZEhKMVpWeHVJQ292WEc1bWRXNWpkR2x2YmlCc2IyUmhjMmdvZG1Gc2RXVXBJSHRjYmlBZ2FXWWdLR2x6VDJKcVpXTjBUR2xyWlNoMllXeDFaU2tnSmlZZ0lXbHpRWEp5WVhrb2RtRnNkV1VwSUNZbUlDRW9kbUZzZFdVZ2FXNXpkR0Z1WTJWdlppQk1ZWHA1VjNKaGNIQmxjaWtwSUh0Y2JpQWdJQ0JwWmlBb2RtRnNkV1VnYVc1emRHRnVZMlZ2WmlCTWIyUmhjMmhYY21Gd2NHVnlLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkbUZzZFdVN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNob1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c0tIWmhiSFZsTENBblgxOTNjbUZ3Y0dWa1gxOG5LU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSGR5WVhCd1pYSkRiRzl1WlNoMllXeDFaU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnVaWGNnVEc5a1lYTm9WM0poY0hCbGNpaDJZV3gxWlNrN1hHNTlYRzVjYmk4dklFVnVjM1Z5WlNCM2NtRndjR1Z5Y3lCaGNtVWdhVzV6ZEdGdVkyVnpJRzltSUdCaVlYTmxURzlrWVhOb1lDNWNibXh2WkdGemFDNXdjbTkwYjNSNWNHVWdQU0JpWVhObFRHOWtZWE5vTG5CeWIzUnZkSGx3WlR0Y2JteHZaR0Z6YUM1d2NtOTBiM1I1Y0dVdVkyOXVjM1J5ZFdOMGIzSWdQU0JzYjJSaGMyZzdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnYkc5a1lYTm9PMXh1SWl3aWRtRnlJRXhoZW5sWGNtRndjR1Z5SUQwZ2NtVnhkV2x5WlNnbkxpOWZUR0Y2ZVZkeVlYQndaWEluS1N4Y2JpQWdJQ0JuWlhSRVlYUmhJRDBnY21WeGRXbHlaU2duTGk5ZloyVjBSR0YwWVNjcExGeHVJQ0FnSUdkbGRFWjFibU5PWVcxbElEMGdjbVZ4ZFdseVpTZ25MaTlmWjJWMFJuVnVZMDVoYldVbktTeGNiaUFnSUNCc2IyUmhjMmdnUFNCeVpYRjFhWEpsS0NjdUwzZHlZWEJ3WlhKTWIyUmhjMmduS1R0Y2JseHVMeW9xWEc0Z0tpQkRhR1ZqYTNNZ2FXWWdZR1oxYm1OZ0lHaGhjeUJoSUd4aGVua2dZMjkxYm5SbGNuQmhjblF1WEc0Z0tseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlHWjFibU1nVkdobElHWjFibU4wYVc5dUlIUnZJR05vWldOckxseHVJQ29nUUhKbGRIVnlibk1nZTJKdmIyeGxZVzU5SUZKbGRIVnlibk1nWUhSeWRXVmdJR2xtSUdCbWRXNWpZQ0JvWVhNZ1lTQnNZWHA1SUdOdmRXNTBaWEp3WVhKMExGeHVJQ29nSUdWc2MyVWdZR1poYkhObFlDNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z2FYTk1ZWHBwWVdKc1pTaG1kVzVqS1NCN1hHNGdJSFpoY2lCbWRXNWpUbUZ0WlNBOUlHZGxkRVoxYm1OT1lXMWxLR1oxYm1NcExGeHVJQ0FnSUNBZ2IzUm9aWElnUFNCc2IyUmhjMmhiWm5WdVkwNWhiV1ZkTzF4dVhHNGdJR2xtSUNoMGVYQmxiMllnYjNSb1pYSWdJVDBnSjJaMWJtTjBhVzl1SnlCOGZDQWhLR1oxYm1OT1lXMWxJR2x1SUV4aGVubFhjbUZ3Y0dWeUxuQnliM1J2ZEhsd1pTa3BJSHRjYmlBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lIMWNiaUFnYVdZZ0tHWjFibU1nUFQwOUlHOTBhR1Z5S1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJSDFjYmlBZ2RtRnlJR1JoZEdFZ1BTQm5aWFJFWVhSaEtHOTBhR1Z5S1R0Y2JpQWdjbVYwZFhKdUlDRWhaR0YwWVNBbUppQm1kVzVqSUQwOVBTQmtZWFJoV3pCZE8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdselRHRjZhV0ZpYkdVN1hHNGlMQ0oyWVhJZ1ltRnpaVk5sZEVSaGRHRWdQU0J5WlhGMWFYSmxLQ2N1TDE5aVlYTmxVMlYwUkdGMFlTY3BMRnh1SUNBZ0lITm9iM0owVDNWMElEMGdjbVZ4ZFdseVpTZ25MaTlmYzJodmNuUlBkWFFuS1R0Y2JseHVMeW9xWEc0Z0tpQlRaWFJ6SUcxbGRHRmtZWFJoSUdadmNpQmdablZ1WTJBdVhHNGdLbHh1SUNvZ0tpcE9iM1JsT2lvcUlFbG1JSFJvYVhNZ1puVnVZM1JwYjI0Z1ltVmpiMjFsY3lCb2IzUXNJR2t1WlM0Z2FYTWdhVzUyYjJ0bFpDQmhJR3h2ZENCcGJpQmhJSE5vYjNKMFhHNGdLaUJ3WlhKcGIyUWdiMllnZEdsdFpTd2dhWFFnZDJsc2JDQjBjbWx3SUdsMGN5QmljbVZoYTJWeUlHRnVaQ0IwY21GdWMybDBhVzl1SUhSdklHRnVJR2xrWlc1MGFYUjVYRzRnS2lCbWRXNWpkR2x2YmlCMGJ5QmhkbTlwWkNCbllYSmlZV2RsSUdOdmJHeGxZM1JwYjI0Z2NHRjFjMlZ6SUdsdUlGWTRMaUJUWldWY2JpQXFJRnRXT0NCcGMzTjFaU0F5TURjd1hTaG9kSFJ3Y3pvdkwySjFaM011WTJoeWIyMXBkVzB1YjNKbkwzQXZkamd2YVhOemRXVnpMMlJsZEdGcGJEOXBaRDB5TURjd0tWeHVJQ29nWm05eUlHMXZjbVVnWkdWMFlXbHNjeTVjYmlBcVhHNGdLaUJBY0hKcGRtRjBaVnh1SUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym4wZ1puVnVZeUJVYUdVZ1puVnVZM1JwYjI0Z2RHOGdZWE56YjJOcFlYUmxJRzFsZEdGa1lYUmhJSGRwZEdndVhHNGdLaUJBY0dGeVlXMGdleXA5SUdSaGRHRWdWR2hsSUcxbGRHRmtZWFJoTGx4dUlDb2dRSEpsZEhWeWJuTWdlMFoxYm1OMGFXOXVmU0JTWlhSMWNtNXpJR0JtZFc1allDNWNiaUFxTDF4dWRtRnlJSE5sZEVSaGRHRWdQU0J6YUc5eWRFOTFkQ2hpWVhObFUyVjBSR0YwWVNrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdjMlYwUkdGMFlUdGNiaUlzSWk4cUtpQlZjMlZrSUhSdklHMWhkR05vSUhkeVlYQWdaR1YwWVdsc0lHTnZiVzFsYm5SekxpQXFMMXh1ZG1GeUlISmxWM0poY0VSbGRHRnBiSE1nUFNBdlhGeDdYRnh1WEZ3dlhGd3FJRnhjVzNkeVlYQndaV1FnZDJsMGFDQW9MaXNwWEZ4ZElGeGNLaThzWEc0Z0lDQWdjbVZUY0d4cGRFUmxkR0ZwYkhNZ1BTQXZMRDhnSmlBdk8xeHVYRzR2S2lwY2JpQXFJRVY0ZEhKaFkzUnpJSGR5WVhCd1pYSWdaR1YwWVdsc2N5Qm1jbTl0SUhSb1pTQmdjMjkxY21ObFlDQmliMlI1SUdOdmJXMWxiblF1WEc0Z0tseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCemIzVnlZMlVnVkdobElITnZkWEpqWlNCMGJ5QnBibk53WldOMExseHVJQ29nUUhKbGRIVnlibk1nZTBGeWNtRjVmU0JTWlhSMWNtNXpJSFJvWlNCM2NtRndjR1Z5SUdSbGRHRnBiSE11WEc0Z0tpOWNibVoxYm1OMGFXOXVJR2RsZEZkeVlYQkVaWFJoYVd4ektITnZkWEpqWlNrZ2UxeHVJQ0IyWVhJZ2JXRjBZMmdnUFNCemIzVnlZMlV1YldGMFkyZ29jbVZYY21Gd1JHVjBZV2xzY3lrN1hHNGdJSEpsZEhWeWJpQnRZWFJqYUNBL0lHMWhkR05vV3pGZExuTndiR2wwS0hKbFUzQnNhWFJFWlhSaGFXeHpLU0E2SUZ0ZE8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdkbGRGZHlZWEJFWlhSaGFXeHpPMXh1SWl3aUx5b3FJRlZ6WldRZ2RHOGdiV0YwWTJnZ2QzSmhjQ0JrWlhSaGFXd2dZMjl0YldWdWRITXVJQ292WEc1MllYSWdjbVZYY21Gd1EyOXRiV1Z1ZENBOUlDOWNYSHNvUHpwY1hHNWNYQzljWENvZ1hGeGJkM0poY0hCbFpDQjNhWFJvSUM0clhGeGRJRnhjS2x4Y0x5ay9YRnh1UHk4N1hHNWNiaThxS2x4dUlDb2dTVzV6WlhKMGN5QjNjbUZ3Y0dWeUlHQmtaWFJoYVd4ellDQnBiaUJoSUdOdmJXMWxiblFnWVhRZ2RHaGxJSFJ2Y0NCdlppQjBhR1VnWUhOdmRYSmpaV0FnWW05a2VTNWNiaUFxWEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSE52ZFhKalpTQlVhR1VnYzI5MWNtTmxJSFJ2SUcxdlpHbG1lUzVjYmlBcUlFQnlaWFIxY201eklIdEJjbkpoZVgwZ1pHVjBZV2xzY3lCVWFHVWdaR1YwWVdsc2N5QjBieUJwYm5ObGNuUXVYRzRnS2lCQWNtVjBkWEp1Y3lCN2MzUnlhVzVuZlNCU1pYUjFjbTV6SUhSb1pTQnRiMlJwWm1sbFpDQnpiM1Z5WTJVdVhHNGdLaTljYm1aMWJtTjBhVzl1SUdsdWMyVnlkRmR5WVhCRVpYUmhhV3h6S0hOdmRYSmpaU3dnWkdWMFlXbHNjeWtnZTF4dUlDQjJZWElnYkdWdVozUm9JRDBnWkdWMFlXbHNjeTVzWlc1bmRHZzdYRzRnSUdsbUlDZ2hiR1Z1WjNSb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhOdmRYSmpaVHRjYmlBZ2ZWeHVJQ0IyWVhJZ2JHRnpkRWx1WkdWNElEMGdiR1Z1WjNSb0lDMGdNVHRjYmlBZ1pHVjBZV2xzYzF0c1lYTjBTVzVrWlhoZElEMGdLR3hsYm1kMGFDQStJREVnUHlBbkppQW5JRG9nSnljcElDc2daR1YwWVdsc2MxdHNZWE4wU1c1a1pYaGRPMXh1SUNCa1pYUmhhV3h6SUQwZ1pHVjBZV2xzY3k1cWIybHVLR3hsYm1kMGFDQStJRElnUHlBbkxDQW5JRG9nSnlBbktUdGNiaUFnY21WMGRYSnVJSE52ZFhKalpTNXlaWEJzWVdObEtISmxWM0poY0VOdmJXMWxiblFzSUNkN1hGeHVMeW9nVzNkeVlYQndaV1FnZDJsMGFDQW5JQ3NnWkdWMFlXbHNjeUFySUNkZElDb3ZYRnh1SnlrN1hHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnYVc1elpYSjBWM0poY0VSbGRHRnBiSE03WEc0aUxDSXZLaXBjYmlBcUlGUm9aU0JpWVhObElHbHRjR3hsYldWdWRHRjBhVzl1SUc5bUlHQmZMbVpwYm1SSmJtUmxlR0FnWVc1a0lHQmZMbVpwYm1STVlYTjBTVzVrWlhoZ0lIZHBkR2h2ZFhSY2JpQXFJSE4xY0hCdmNuUWdabTl5SUdsMFpYSmhkR1ZsSUhOb2IzSjBhR0Z1WkhNdVhHNGdLbHh1SUNvZ1FIQnlhWFpoZEdWY2JpQXFJRUJ3WVhKaGJTQjdRWEp5WVhsOUlHRnljbUY1SUZSb1pTQmhjbkpoZVNCMGJ5QnBibk53WldOMExseHVJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnY0hKbFpHbGpZWFJsSUZSb1pTQm1kVzVqZEdsdmJpQnBiblp2YTJWa0lIQmxjaUJwZEdWeVlYUnBiMjR1WEc0Z0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ1puSnZiVWx1WkdWNElGUm9aU0JwYm1SbGVDQjBieUJ6WldGeVkyZ2dabkp2YlM1Y2JpQXFJRUJ3WVhKaGJTQjdZbTl2YkdWaGJuMGdXMlp5YjIxU2FXZG9kRjBnVTNCbFkybG1lU0JwZEdWeVlYUnBibWNnWm5KdmJTQnlhV2RvZENCMGJ5QnNaV1owTGx4dUlDb2dRSEpsZEhWeWJuTWdlMjUxYldKbGNuMGdVbVYwZFhKdWN5QjBhR1VnYVc1a1pYZ2diMllnZEdobElHMWhkR05vWldRZ2RtRnNkV1VzSUdWc2MyVWdZQzB4WUM1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnWW1GelpVWnBibVJKYm1SbGVDaGhjbkpoZVN3Z2NISmxaR2xqWVhSbExDQm1jbTl0U1c1a1pYZ3NJR1p5YjIxU2FXZG9kQ2tnZTF4dUlDQjJZWElnYkdWdVozUm9JRDBnWVhKeVlYa3ViR1Z1WjNSb0xGeHVJQ0FnSUNBZ2FXNWtaWGdnUFNCbWNtOXRTVzVrWlhnZ0t5QW9abkp2YlZKcFoyaDBJRDhnTVNBNklDMHhLVHRjYmx4dUlDQjNhR2xzWlNBb0tHWnliMjFTYVdkb2RDQS9JR2x1WkdWNExTMGdPaUFySzJsdVpHVjRJRHdnYkdWdVozUm9LU2tnZTF4dUlDQWdJR2xtSUNod2NtVmthV05oZEdVb1lYSnlZWGxiYVc1a1pYaGRMQ0JwYm1SbGVDd2dZWEp5WVhrcEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2FXNWtaWGc3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQXRNVHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmlZWE5sUm1sdVpFbHVaR1Y0TzF4dUlpd2lMeW9xWEc0Z0tpQlVhR1VnWW1GelpTQnBiWEJzWlcxbGJuUmhkR2x2YmlCdlppQmdYeTVwYzA1aFRtQWdkMmwwYUc5MWRDQnpkWEJ3YjNKMElHWnZjaUJ1ZFcxaVpYSWdiMkpxWldOMGN5NWNiaUFxWEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ29nUUhCaGNtRnRJSHNxZlNCMllXeDFaU0JVYUdVZ2RtRnNkV1VnZEc4Z1kyaGxZMnN1WEc0Z0tpQkFjbVYwZFhKdWN5QjdZbTl2YkdWaGJuMGdVbVYwZFhKdWN5QmdkSEoxWldBZ2FXWWdZSFpoYkhWbFlDQnBjeUJnVG1GT1lDd2daV3h6WlNCZ1ptRnNjMlZnTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJpWVhObFNYTk9ZVTRvZG1Gc2RXVXBJSHRjYmlBZ2NtVjBkWEp1SUhaaGJIVmxJQ0U5UFNCMllXeDFaVHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmlZWE5sU1hOT1lVNDdYRzRpTENJdktpcGNiaUFxSUVFZ2MzQmxZMmxoYkdsNlpXUWdkbVZ5YzJsdmJpQnZaaUJnWHk1cGJtUmxlRTltWUNCM2FHbGphQ0J3WlhKbWIzSnRjeUJ6ZEhKcFkzUWdaWEYxWVd4cGRIbGNiaUFxSUdOdmJYQmhjbWx6YjI1eklHOW1JSFpoYkhWbGN5d2dhUzVsTGlCZ1BUMDlZQzVjYmlBcVhHNGdLaUJBY0hKcGRtRjBaVnh1SUNvZ1FIQmhjbUZ0SUh0QmNuSmhlWDBnWVhKeVlYa2dWR2hsSUdGeWNtRjVJSFJ2SUdsdWMzQmxZM1F1WEc0Z0tpQkFjR0Z5WVcwZ2V5cDlJSFpoYkhWbElGUm9aU0IyWVd4MVpTQjBieUJ6WldGeVkyZ2dabTl5TGx4dUlDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlHWnliMjFKYm1SbGVDQlVhR1VnYVc1a1pYZ2dkRzhnYzJWaGNtTm9JR1p5YjIwdVhHNGdLaUJBY21WMGRYSnVjeUI3Ym5WdFltVnlmU0JTWlhSMWNtNXpJSFJvWlNCcGJtUmxlQ0J2WmlCMGFHVWdiV0YwWTJobFpDQjJZV3gxWlN3Z1pXeHpaU0JnTFRGZ0xseHVJQ292WEc1bWRXNWpkR2x2YmlCemRISnBZM1JKYm1SbGVFOW1LR0Z5Y21GNUxDQjJZV3gxWlN3Z1puSnZiVWx1WkdWNEtTQjdYRzRnSUhaaGNpQnBibVJsZUNBOUlHWnliMjFKYm1SbGVDQXRJREVzWEc0Z0lDQWdJQ0JzWlc1bmRHZ2dQU0JoY25KaGVTNXNaVzVuZEdnN1hHNWNiaUFnZDJocGJHVWdLQ3NyYVc1a1pYZ2dQQ0JzWlc1bmRHZ3BJSHRjYmlBZ0lDQnBaaUFvWVhKeVlYbGJhVzVrWlhoZElEMDlQU0IyWVd4MVpTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHbHVaR1Y0TzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdMVEU3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdjM1J5YVdOMFNXNWtaWGhQWmp0Y2JpSXNJblpoY2lCaVlYTmxSbWx1WkVsdVpHVjRJRDBnY21WeGRXbHlaU2duTGk5ZlltRnpaVVpwYm1SSmJtUmxlQ2NwTEZ4dUlDQWdJR0poYzJWSmMwNWhUaUE5SUhKbGNYVnBjbVVvSnk0dlgySmhjMlZKYzA1aFRpY3BMRnh1SUNBZ0lITjBjbWxqZEVsdVpHVjRUMllnUFNCeVpYRjFhWEpsS0NjdUwxOXpkSEpwWTNSSmJtUmxlRTltSnlrN1hHNWNiaThxS2x4dUlDb2dWR2hsSUdKaGMyVWdhVzF3YkdWdFpXNTBZWFJwYjI0Z2IyWWdZRjh1YVc1a1pYaFBabUFnZDJsMGFHOTFkQ0JnWm5KdmJVbHVaR1Y0WUNCaWIzVnVaSE1nWTJobFkydHpMbHh1SUNwY2JpQXFJRUJ3Y21sMllYUmxYRzRnS2lCQWNHRnlZVzBnZTBGeWNtRjVmU0JoY25KaGVTQlVhR1VnWVhKeVlYa2dkRzhnYVc1emNHVmpkQzVjYmlBcUlFQndZWEpoYlNCN0tuMGdkbUZzZFdVZ1ZHaGxJSFpoYkhWbElIUnZJSE5sWVhKamFDQm1iM0l1WEc0Z0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ1puSnZiVWx1WkdWNElGUm9aU0JwYm1SbGVDQjBieUJ6WldGeVkyZ2dabkp2YlM1Y2JpQXFJRUJ5WlhSMWNtNXpJSHR1ZFcxaVpYSjlJRkpsZEhWeWJuTWdkR2hsSUdsdVpHVjRJRzltSUhSb1pTQnRZWFJqYUdWa0lIWmhiSFZsTENCbGJITmxJR0F0TVdBdVhHNGdLaTljYm1aMWJtTjBhVzl1SUdKaGMyVkpibVJsZUU5bUtHRnljbUY1TENCMllXeDFaU3dnWm5KdmJVbHVaR1Y0S1NCN1hHNGdJSEpsZEhWeWJpQjJZV3gxWlNBOVBUMGdkbUZzZFdWY2JpQWdJQ0EvSUhOMGNtbGpkRWx1WkdWNFQyWW9ZWEp5WVhrc0lIWmhiSFZsTENCbWNtOXRTVzVrWlhncFhHNGdJQ0FnT2lCaVlYTmxSbWx1WkVsdVpHVjRLR0Z5Y21GNUxDQmlZWE5sU1hOT1lVNHNJR1p5YjIxSmJtUmxlQ2s3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdZbUZ6WlVsdVpHVjRUMlk3WEc0aUxDSjJZWElnWW1GelpVbHVaR1Y0VDJZZ1BTQnlaWEYxYVhKbEtDY3VMMTlpWVhObFNXNWtaWGhQWmljcE8xeHVYRzR2S2lwY2JpQXFJRUVnYzNCbFkybGhiR2w2WldRZ2RtVnljMmx2YmlCdlppQmdYeTVwYm1Oc2RXUmxjMkFnWm05eUlHRnljbUY1Y3lCM2FYUm9iM1YwSUhOMWNIQnZjblFnWm05eVhHNGdLaUJ6Y0dWamFXWjVhVzVuSUdGdUlHbHVaR1Y0SUhSdklITmxZWEpqYUNCbWNtOXRMbHh1SUNwY2JpQXFJRUJ3Y21sMllYUmxYRzRnS2lCQWNHRnlZVzBnZTBGeWNtRjVmU0JiWVhKeVlYbGRJRlJvWlNCaGNuSmhlU0IwYnlCcGJuTndaV04wTGx4dUlDb2dRSEJoY21GdElIc3FmU0IwWVhKblpYUWdWR2hsSUhaaGJIVmxJSFJ2SUhObFlYSmphQ0JtYjNJdVhHNGdLaUJBY21WMGRYSnVjeUI3WW05dmJHVmhibjBnVW1WMGRYSnVjeUJnZEhKMVpXQWdhV1lnWUhSaGNtZGxkR0FnYVhNZ1ptOTFibVFzSUdWc2MyVWdZR1poYkhObFlDNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1lYSnlZWGxKYm1Oc2RXUmxjeWhoY25KaGVTd2dkbUZzZFdVcElIdGNiaUFnZG1GeUlHeGxibWQwYUNBOUlHRnljbUY1SUQwOUlHNTFiR3dnUHlBd0lEb2dZWEp5WVhrdWJHVnVaM1JvTzF4dUlDQnlaWFIxY200Z0lTRnNaVzVuZEdnZ0ppWWdZbUZ6WlVsdVpHVjRUMllvWVhKeVlYa3NJSFpoYkhWbExDQXdLU0ErSUMweE8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdGeWNtRjVTVzVqYkhWa1pYTTdYRzRpTENKMllYSWdZWEp5WVhsRllXTm9JRDBnY21WeGRXbHlaU2duTGk5ZllYSnlZWGxGWVdOb0p5a3NYRzRnSUNBZ1lYSnlZWGxKYm1Oc2RXUmxjeUE5SUhKbGNYVnBjbVVvSnk0dlgyRnljbUY1U1c1amJIVmtaWE1uS1R0Y2JseHVMeW9xSUZWelpXUWdkRzhnWTI5dGNHOXpaU0JpYVhSdFlYTnJjeUJtYjNJZ1puVnVZM1JwYjI0Z2JXVjBZV1JoZEdFdUlDb3ZYRzUyWVhJZ1YxSkJVRjlDU1U1RVgwWk1RVWNnUFNBeExGeHVJQ0FnSUZkU1FWQmZRa2xPUkY5TFJWbGZSa3hCUnlBOUlESXNYRzRnSUNBZ1YxSkJVRjlEVlZKU1dWOUdURUZISUQwZ09DeGNiaUFnSUNCWFVrRlFYME5WVWxKWlgxSkpSMGhVWDBaTVFVY2dQU0F4Tml4Y2JpQWdJQ0JYVWtGUVgxQkJVbFJKUVV4ZlJreEJSeUE5SURNeUxGeHVJQ0FnSUZkU1FWQmZVRUZTVkVsQlRGOVNTVWRJVkY5R1RFRkhJRDBnTmpRc1hHNGdJQ0FnVjFKQlVGOUJVbGxmUmt4QlJ5QTlJREV5T0N4Y2JpQWdJQ0JYVWtGUVgxSkZRVkpIWDBaTVFVY2dQU0F5TlRZc1hHNGdJQ0FnVjFKQlVGOUdURWxRWDBaTVFVY2dQU0ExTVRJN1hHNWNiaThxS2lCVmMyVmtJSFJ2SUdGemMyOWphV0YwWlNCM2NtRndJRzFsZEdodlpITWdkMmwwYUNCMGFHVnBjaUJpYVhRZ1pteGhaM011SUNvdlhHNTJZWElnZDNKaGNFWnNZV2R6SUQwZ1cxeHVJQ0JiSjJGeWVTY3NJRmRTUVZCZlFWSlpYMFpNUVVkZExGeHVJQ0JiSjJKcGJtUW5MQ0JYVWtGUVgwSkpUa1JmUmt4QlIxMHNYRzRnSUZzblltbHVaRXRsZVNjc0lGZFNRVkJmUWtsT1JGOUxSVmxmUmt4QlIxMHNYRzRnSUZzblkzVnljbmtuTENCWFVrRlFYME5WVWxKWlgwWk1RVWRkTEZ4dUlDQmJKMk4xY25KNVVtbG5hSFFuTENCWFVrRlFYME5WVWxKWlgxSkpSMGhVWDBaTVFVZGRMRnh1SUNCYkoyWnNhWEFuTENCWFVrRlFYMFpNU1ZCZlJreEJSMTBzWEc0Z0lGc25jR0Z5ZEdsaGJDY3NJRmRTUVZCZlVFRlNWRWxCVEY5R1RFRkhYU3hjYmlBZ1d5ZHdZWEowYVdGc1VtbG5hSFFuTENCWFVrRlFYMUJCVWxSSlFVeGZVa2xIU0ZSZlJreEJSMTBzWEc0Z0lGc25jbVZoY21jbkxDQlhVa0ZRWDFKRlFWSkhYMFpNUVVkZFhHNWRPMXh1WEc0dktpcGNiaUFxSUZWd1pHRjBaWE1nZDNKaGNIQmxjaUJnWkdWMFlXbHNjMkFnWW1GelpXUWdiMjRnWUdKcGRHMWhjMnRnSUdac1lXZHpMbHh1SUNwY2JpQXFJRUJ3Y21sMllYUmxYRzRnS2lCQWNtVjBkWEp1Y3lCN1FYSnlZWGw5SUdSbGRHRnBiSE1nVkdobElHUmxkR0ZwYkhNZ2RHOGdiVzlrYVdaNUxseHVJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJR0pwZEcxaGMyc2dWR2hsSUdKcGRHMWhjMnNnWm14aFozTXVJRk5sWlNCZ1kzSmxZWFJsVjNKaGNHQWdabTl5SUcxdmNtVWdaR1YwWVdsc2N5NWNiaUFxSUVCeVpYUjFjbTV6SUh0QmNuSmhlWDBnVW1WMGRYSnVjeUJnWkdWMFlXbHNjMkF1WEc0Z0tpOWNibVoxYm1OMGFXOXVJSFZ3WkdGMFpWZHlZWEJFWlhSaGFXeHpLR1JsZEdGcGJITXNJR0pwZEcxaGMyc3BJSHRjYmlBZ1lYSnlZWGxGWVdOb0tIZHlZWEJHYkdGbmN5d2dablZ1WTNScGIyNG9jR0ZwY2lrZ2UxeHVJQ0FnSUhaaGNpQjJZV3gxWlNBOUlDZGZMaWNnS3lCd1lXbHlXekJkTzF4dUlDQWdJR2xtSUNnb1ltbDBiV0Z6YXlBbUlIQmhhWEpiTVYwcElDWW1JQ0ZoY25KaGVVbHVZMngxWkdWektHUmxkR0ZwYkhNc0lIWmhiSFZsS1NrZ2UxeHVJQ0FnSUNBZ1pHVjBZV2xzY3k1d2RYTm9LSFpoYkhWbEtUdGNiaUFnSUNCOVhHNGdJSDBwTzF4dUlDQnlaWFIxY200Z1pHVjBZV2xzY3k1emIzSjBLQ2s3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdkWEJrWVhSbFYzSmhjRVJsZEdGcGJITTdYRzRpTENKMllYSWdaMlYwVjNKaGNFUmxkR0ZwYkhNZ1BTQnlaWEYxYVhKbEtDY3VMMTluWlhSWGNtRndSR1YwWVdsc2N5Y3BMRnh1SUNBZ0lHbHVjMlZ5ZEZkeVlYQkVaWFJoYVd4eklEMGdjbVZ4ZFdseVpTZ25MaTlmYVc1elpYSjBWM0poY0VSbGRHRnBiSE1uS1N4Y2JpQWdJQ0J6WlhSVWIxTjBjbWx1WnlBOUlISmxjWFZwY21Vb0p5NHZYM05sZEZSdlUzUnlhVzVuSnlrc1hHNGdJQ0FnZFhCa1lYUmxWM0poY0VSbGRHRnBiSE1nUFNCeVpYRjFhWEpsS0NjdUwxOTFjR1JoZEdWWGNtRndSR1YwWVdsc2N5Y3BPMXh1WEc0dktpcGNiaUFxSUZObGRITWdkR2hsSUdCMGIxTjBjbWx1WjJBZ2JXVjBhRzlrSUc5bUlHQjNjbUZ3Y0dWeVlDQjBieUJ0YVcxcFl5QjBhR1VnYzI5MWNtTmxJRzltSUdCeVpXWmxjbVZ1WTJWZ1hHNGdLaUIzYVhSb0lIZHlZWEJ3WlhJZ1pHVjBZV2xzY3lCcGJpQmhJR052YlcxbGJuUWdZWFFnZEdobElIUnZjQ0J2WmlCMGFHVWdjMjkxY21ObElHSnZaSGt1WEc0Z0tseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlIZHlZWEJ3WlhJZ1ZHaGxJR1oxYm1OMGFXOXVJSFJ2SUcxdlpHbG1lUzVjYmlBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlISmxabVZ5Wlc1alpTQlVhR1VnY21WbVpYSmxibU5sSUdaMWJtTjBhVzl1TGx4dUlDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlHSnBkRzFoYzJzZ1ZHaGxJR0pwZEcxaGMyc2dabXhoWjNNdUlGTmxaU0JnWTNKbFlYUmxWM0poY0dBZ1ptOXlJRzF2Y21VZ1pHVjBZV2xzY3k1Y2JpQXFJRUJ5WlhSMWNtNXpJSHRHZFc1amRHbHZibjBnVW1WMGRYSnVjeUJnZDNKaGNIQmxjbUF1WEc0Z0tpOWNibVoxYm1OMGFXOXVJSE5sZEZkeVlYQlViMU4wY21sdVp5aDNjbUZ3Y0dWeUxDQnlaV1psY21WdVkyVXNJR0pwZEcxaGMyc3BJSHRjYmlBZ2RtRnlJSE52ZFhKalpTQTlJQ2h5WldabGNtVnVZMlVnS3lBbkp5azdYRzRnSUhKbGRIVnliaUJ6WlhSVWIxTjBjbWx1WnloM2NtRndjR1Z5TENCcGJuTmxjblJYY21Gd1JHVjBZV2xzY3loemIzVnlZMlVzSUhWd1pHRjBaVmR5WVhCRVpYUmhhV3h6S0dkbGRGZHlZWEJFWlhSaGFXeHpLSE52ZFhKalpTa3NJR0pwZEcxaGMyc3BLU2s3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdjMlYwVjNKaGNGUnZVM1J5YVc1bk8xeHVJaXdpZG1GeUlHbHpUR0Y2YVdGaWJHVWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGMweGhlbWxoWW14bEp5a3NYRzRnSUNBZ2MyVjBSR0YwWVNBOUlISmxjWFZwY21Vb0p5NHZYM05sZEVSaGRHRW5LU3hjYmlBZ0lDQnpaWFJYY21Gd1ZHOVRkSEpwYm1jZ1BTQnlaWEYxYVhKbEtDY3VMMTl6WlhSWGNtRndWRzlUZEhKcGJtY25LVHRjYmx4dUx5b3FJRlZ6WldRZ2RHOGdZMjl0Y0c5elpTQmlhWFJ0WVhOcmN5Qm1iM0lnWm5WdVkzUnBiMjRnYldWMFlXUmhkR0V1SUNvdlhHNTJZWElnVjFKQlVGOUNTVTVFWDBaTVFVY2dQU0F4TEZ4dUlDQWdJRmRTUVZCZlFrbE9SRjlMUlZsZlJreEJSeUE5SURJc1hHNGdJQ0FnVjFKQlVGOURWVkpTV1Y5Q1QxVk9SRjlHVEVGSElEMGdOQ3hjYmlBZ0lDQlhVa0ZRWDBOVlVsSlpYMFpNUVVjZ1BTQTRMRnh1SUNBZ0lGZFNRVkJmVUVGU1ZFbEJURjlHVEVGSElEMGdNeklzWEc0Z0lDQWdWMUpCVUY5UVFWSlVTVUZNWDFKSlIwaFVYMFpNUVVjZ1BTQTJORHRjYmx4dUx5b3FYRzRnS2lCRGNtVmhkR1Z6SUdFZ1puVnVZM1JwYjI0Z2RHaGhkQ0IzY21Gd2N5QmdablZ1WTJBZ2RHOGdZMjl1ZEdsdWRXVWdZM1Z5Y25scGJtY3VYRzRnS2x4dUlDb2dRSEJ5YVhaaGRHVmNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdaMWJtTWdWR2hsSUdaMWJtTjBhVzl1SUhSdklIZHlZWEF1WEc0Z0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ1ltbDBiV0Z6YXlCVWFHVWdZbWwwYldGemF5Qm1iR0ZuY3k0Z1UyVmxJR0JqY21WaGRHVlhjbUZ3WUNCbWIzSWdiVzl5WlNCa1pYUmhhV3h6TGx4dUlDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdkM0poY0VaMWJtTWdWR2hsSUdaMWJtTjBhVzl1SUhSdklHTnlaV0YwWlNCMGFHVWdZR1oxYm1OZ0lIZHlZWEJ3WlhJdVhHNGdLaUJBY0dGeVlXMGdleXA5SUhCc1lXTmxhRzlzWkdWeUlGUm9aU0J3YkdGalpXaHZiR1JsY2lCMllXeDFaUzVjYmlBcUlFQndZWEpoYlNCN0tuMGdXM1JvYVhOQmNtZGRJRlJvWlNCZ2RHaHBjMkFnWW1sdVpHbHVaeUJ2WmlCZ1puVnVZMkF1WEc0Z0tpQkFjR0Z5WVcwZ2UwRnljbUY1ZlNCYmNHRnlkR2xoYkhOZElGUm9aU0JoY21kMWJXVnVkSE1nZEc4Z2NISmxjR1Z1WkNCMGJ5QjBhRzl6WlNCd2NtOTJhV1JsWkNCMGIxeHVJQ29nSUhSb1pTQnVaWGNnWm5WdVkzUnBiMjR1WEc0Z0tpQkFjR0Z5WVcwZ2UwRnljbUY1ZlNCYmFHOXNaR1Z5YzEwZ1ZHaGxJR0J3WVhKMGFXRnNjMkFnY0d4aFkyVm9iMnhrWlhJZ2FXNWtaWGhsY3k1Y2JpQXFJRUJ3WVhKaGJTQjdRWEp5WVhsOUlGdGhjbWRRYjNOZElGUm9aU0JoY21kMWJXVnVkQ0J3YjNOcGRHbHZibk1nYjJZZ2RHaGxJRzVsZHlCbWRXNWpkR2x2Ymk1Y2JpQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQmJZWEo1WFNCVWFHVWdZWEpwZEhrZ1kyRndJRzltSUdCbWRXNWpZQzVjYmlBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCYllYSnBkSGxkSUZSb1pTQmhjbWwwZVNCdlppQmdablZ1WTJBdVhHNGdLaUJBY21WMGRYSnVjeUI3Um5WdVkzUnBiMjU5SUZKbGRIVnlibk1nZEdobElHNWxkeUIzY21Gd2NHVmtJR1oxYm1OMGFXOXVMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQmpjbVZoZEdWU1pXTjFjbko1S0daMWJtTXNJR0pwZEcxaGMyc3NJSGR5WVhCR2RXNWpMQ0J3YkdGalpXaHZiR1JsY2l3Z2RHaHBjMEZ5Wnl3Z2NHRnlkR2xoYkhNc0lHaHZiR1JsY25Nc0lHRnlaMUJ2Y3l3Z1lYSjVMQ0JoY21sMGVTa2dlMXh1SUNCMllYSWdhWE5EZFhKeWVTQTlJR0pwZEcxaGMyc2dKaUJYVWtGUVgwTlZVbEpaWDBaTVFVY3NYRzRnSUNBZ0lDQnVaWGRJYjJ4a1pYSnpJRDBnYVhORGRYSnllU0EvSUdodmJHUmxjbk1nT2lCMWJtUmxabWx1WldRc1hHNGdJQ0FnSUNCdVpYZEliMnhrWlhKelVtbG5hSFFnUFNCcGMwTjFjbko1SUQ4Z2RXNWtaV1pwYm1Wa0lEb2dhRzlzWkdWeWN5eGNiaUFnSUNBZ0lHNWxkMUJoY25ScFlXeHpJRDBnYVhORGRYSnllU0EvSUhCaGNuUnBZV3h6SURvZ2RXNWtaV1pwYm1Wa0xGeHVJQ0FnSUNBZ2JtVjNVR0Z5ZEdsaGJITlNhV2RvZENBOUlHbHpRM1Z5Y25rZ1B5QjFibVJsWm1sdVpXUWdPaUJ3WVhKMGFXRnNjenRjYmx4dUlDQmlhWFJ0WVhOcklIdzlJQ2hwYzBOMWNuSjVJRDhnVjFKQlVGOVFRVkpVU1VGTVgwWk1RVWNnT2lCWFVrRlFYMUJCVWxSSlFVeGZVa2xIU0ZSZlJreEJSeWs3WEc0Z0lHSnBkRzFoYzJzZ0pqMGdmaWhwYzBOMWNuSjVJRDhnVjFKQlVGOVFRVkpVU1VGTVgxSkpSMGhVWDBaTVFVY2dPaUJYVWtGUVgxQkJVbFJKUVV4ZlJreEJSeWs3WEc1Y2JpQWdhV1lnS0NFb1ltbDBiV0Z6YXlBbUlGZFNRVkJmUTFWU1VsbGZRazlWVGtSZlJreEJSeWtwSUh0Y2JpQWdJQ0JpYVhSdFlYTnJJQ1k5SUg0b1YxSkJVRjlDU1U1RVgwWk1RVWNnZkNCWFVrRlFYMEpKVGtSZlMwVlpYMFpNUVVjcE8xeHVJQ0I5WEc0Z0lIWmhjaUJ1WlhkRVlYUmhJRDBnVzF4dUlDQWdJR1oxYm1Nc0lHSnBkRzFoYzJzc0lIUm9hWE5CY21jc0lHNWxkMUJoY25ScFlXeHpMQ0J1WlhkSWIyeGtaWEp6TENCdVpYZFFZWEowYVdGc2MxSnBaMmgwTEZ4dUlDQWdJRzVsZDBodmJHUmxjbk5TYVdkb2RDd2dZWEpuVUc5ekxDQmhjbmtzSUdGeWFYUjVYRzRnSUYwN1hHNWNiaUFnZG1GeUlISmxjM1ZzZENBOUlIZHlZWEJHZFc1akxtRndjR3g1S0hWdVpHVm1hVzVsWkN3Z2JtVjNSR0YwWVNrN1hHNGdJR2xtSUNocGMweGhlbWxoWW14bEtHWjFibU1wS1NCN1hHNGdJQ0FnYzJWMFJHRjBZU2h5WlhOMWJIUXNJRzVsZDBSaGRHRXBPMXh1SUNCOVhHNGdJSEpsYzNWc2RDNXdiR0ZqWldodmJHUmxjaUE5SUhCc1lXTmxhRzlzWkdWeU8xeHVJQ0J5WlhSMWNtNGdjMlYwVjNKaGNGUnZVM1J5YVc1bktISmxjM1ZzZEN3Z1puVnVZeXdnWW1sMGJXRnpheWs3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdZM0psWVhSbFVtVmpkWEp5ZVR0Y2JpSXNJaThxS2x4dUlDb2dSMlYwY3lCMGFHVWdZWEpuZFcxbGJuUWdjR3hoWTJWb2IyeGtaWElnZG1Gc2RXVWdabTl5SUdCbWRXNWpZQzVjYmlBcVhHNGdLaUJBY0hKcGRtRjBaVnh1SUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym4wZ1puVnVZeUJVYUdVZ1puVnVZM1JwYjI0Z2RHOGdhVzV6Y0dWamRDNWNiaUFxSUVCeVpYUjFjbTV6SUhzcWZTQlNaWFIxY201eklIUm9aU0J3YkdGalpXaHZiR1JsY2lCMllXeDFaUzVjYmlBcUwxeHVablZ1WTNScGIyNGdaMlYwU0c5c1pHVnlLR1oxYm1NcElIdGNiaUFnZG1GeUlHOWlhbVZqZENBOUlHWjFibU03WEc0Z0lISmxkSFZ5YmlCdlltcGxZM1F1Y0d4aFkyVm9iMnhrWlhJN1hHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWjJWMFNHOXNaR1Z5TzF4dUlpd2lkbUZ5SUdOdmNIbEJjbkpoZVNBOUlISmxjWFZwY21Vb0p5NHZYMk52Y0hsQmNuSmhlU2NwTEZ4dUlDQWdJR2x6U1c1a1pYZ2dQU0J5WlhGMWFYSmxLQ2N1TDE5cGMwbHVaR1Y0SnlrN1hHNWNiaThxSUVKMWFXeDBMV2x1SUcxbGRHaHZaQ0J5WldabGNtVnVZMlZ6SUdadmNpQjBhRzl6WlNCM2FYUm9JSFJvWlNCellXMWxJRzVoYldVZ1lYTWdiM1JvWlhJZ1lHeHZaR0Z6YUdBZ2JXVjBhRzlrY3k0Z0tpOWNiblpoY2lCdVlYUnBkbVZOYVc0Z1BTQk5ZWFJvTG0xcGJqdGNibHh1THlvcVhHNGdLaUJTWlc5eVpHVnlJR0JoY25KaGVXQWdZV05qYjNKa2FXNW5JSFJ2SUhSb1pTQnpjR1ZqYVdacFpXUWdhVzVrWlhobGN5QjNhR1Z5WlNCMGFHVWdaV3hsYldWdWRDQmhkRnh1SUNvZ2RHaGxJR1pwY25OMElHbHVaR1Y0SUdseklHRnpjMmxuYm1Wa0lHRnpJSFJvWlNCbWFYSnpkQ0JsYkdWdFpXNTBMQ0IwYUdVZ1pXeGxiV1Z1ZENCaGRGeHVJQ29nZEdobElITmxZMjl1WkNCcGJtUmxlQ0JwY3lCaGMzTnBaMjVsWkNCaGN5QjBhR1VnYzJWamIyNWtJR1ZzWlcxbGJuUXNJR0Z1WkNCemJ5QnZiaTVjYmlBcVhHNGdLaUJBY0hKcGRtRjBaVnh1SUNvZ1FIQmhjbUZ0SUh0QmNuSmhlWDBnWVhKeVlYa2dWR2hsSUdGeWNtRjVJSFJ2SUhKbGIzSmtaWEl1WEc0Z0tpQkFjR0Z5WVcwZ2UwRnljbUY1ZlNCcGJtUmxlR1Z6SUZSb1pTQmhjbkpoYm1kbFpDQmhjbkpoZVNCcGJtUmxlR1Z6TGx4dUlDb2dRSEpsZEhWeWJuTWdlMEZ5Y21GNWZTQlNaWFIxY201eklHQmhjbkpoZVdBdVhHNGdLaTljYm1aMWJtTjBhVzl1SUhKbGIzSmtaWElvWVhKeVlYa3NJR2x1WkdWNFpYTXBJSHRjYmlBZ2RtRnlJR0Z5Y2t4bGJtZDBhQ0E5SUdGeWNtRjVMbXhsYm1kMGFDeGNiaUFnSUNBZ0lHeGxibWQwYUNBOUlHNWhkR2wyWlUxcGJpaHBibVJsZUdWekxteGxibWQwYUN3Z1lYSnlUR1Z1WjNSb0tTeGNiaUFnSUNBZ0lHOXNaRUZ5Y21GNUlEMGdZMjl3ZVVGeWNtRjVLR0Z5Y21GNUtUdGNibHh1SUNCM2FHbHNaU0FvYkdWdVozUm9MUzBwSUh0Y2JpQWdJQ0IyWVhJZ2FXNWtaWGdnUFNCcGJtUmxlR1Z6VzJ4bGJtZDBhRjA3WEc0Z0lDQWdZWEp5WVhsYmJHVnVaM1JvWFNBOUlHbHpTVzVrWlhnb2FXNWtaWGdzSUdGeWNreGxibWQwYUNrZ1B5QnZiR1JCY25KaGVWdHBibVJsZUYwZ09pQjFibVJsWm1sdVpXUTdYRzRnSUgxY2JpQWdjbVYwZFhKdUlHRnljbUY1TzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSEpsYjNKa1pYSTdYRzRpTENJdktpb2dWWE5sWkNCaGN5QjBhR1VnYVc1MFpYSnVZV3dnWVhKbmRXMWxiblFnY0d4aFkyVm9iMnhrWlhJdUlDb3ZYRzUyWVhJZ1VFeEJRMFZJVDB4RVJWSWdQU0FuWDE5c2IyUmhjMmhmY0d4aFkyVm9iMnhrWlhKZlh5YzdYRzVjYmk4cUtseHVJQ29nVW1Wd2JHRmpaWE1nWVd4c0lHQndiR0ZqWldodmJHUmxjbUFnWld4bGJXVnVkSE1nYVc0Z1lHRnljbUY1WUNCM2FYUm9JR0Z1SUdsdWRHVnlibUZzSUhCc1lXTmxhRzlzWkdWeVhHNGdLaUJoYm1RZ2NtVjBkWEp1Y3lCaGJpQmhjbkpoZVNCdlppQjBhR1ZwY2lCcGJtUmxlR1Z6TGx4dUlDcGNiaUFxSUVCd2NtbDJZWFJsWEc0Z0tpQkFjR0Z5WVcwZ2UwRnljbUY1ZlNCaGNuSmhlU0JVYUdVZ1lYSnlZWGtnZEc4Z2JXOWthV1o1TGx4dUlDb2dRSEJoY21GdElIc3FmU0J3YkdGalpXaHZiR1JsY2lCVWFHVWdjR3hoWTJWb2IyeGtaWElnZEc4Z2NtVndiR0ZqWlM1Y2JpQXFJRUJ5WlhSMWNtNXpJSHRCY25KaGVYMGdVbVYwZFhKdWN5QjBhR1VnYm1WM0lHRnljbUY1SUc5bUlIQnNZV05sYUc5c1pHVnlJR2x1WkdWNFpYTXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlISmxjR3hoWTJWSWIyeGtaWEp6S0dGeWNtRjVMQ0J3YkdGalpXaHZiR1JsY2lrZ2UxeHVJQ0IyWVhJZ2FXNWtaWGdnUFNBdE1TeGNiaUFnSUNBZ0lHeGxibWQwYUNBOUlHRnljbUY1TG14bGJtZDBhQ3hjYmlBZ0lDQWdJSEpsYzBsdVpHVjRJRDBnTUN4Y2JpQWdJQ0FnSUhKbGMzVnNkQ0E5SUZ0ZE8xeHVYRzRnSUhkb2FXeGxJQ2dySzJsdVpHVjRJRHdnYkdWdVozUm9LU0I3WEc0Z0lDQWdkbUZ5SUhaaGJIVmxJRDBnWVhKeVlYbGJhVzVrWlhoZE8xeHVJQ0FnSUdsbUlDaDJZV3gxWlNBOVBUMGdjR3hoWTJWb2IyeGtaWElnZkh3Z2RtRnNkV1VnUFQwOUlGQk1RVU5GU0U5TVJFVlNLU0I3WEc0Z0lDQWdJQ0JoY25KaGVWdHBibVJsZUYwZ1BTQlFURUZEUlVoUFRFUkZVanRjYmlBZ0lDQWdJSEpsYzNWc2RGdHlaWE5KYm1SbGVDc3JYU0E5SUdsdVpHVjRPMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQnlaWFIxY200Z2NtVnpkV3gwTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSEpsY0d4aFkyVkliMnhrWlhKek8xeHVJaXdpZG1GeUlHTnZiWEJ2YzJWQmNtZHpJRDBnY21WeGRXbHlaU2duTGk5ZlkyOXRjRzl6WlVGeVozTW5LU3hjYmlBZ0lDQmpiMjF3YjNObFFYSm5jMUpwWjJoMElEMGdjbVZ4ZFdseVpTZ25MaTlmWTI5dGNHOXpaVUZ5WjNOU2FXZG9kQ2NwTEZ4dUlDQWdJR052ZFc1MFNHOXNaR1Z5Y3lBOUlISmxjWFZwY21Vb0p5NHZYMk52ZFc1MFNHOXNaR1Z5Y3ljcExGeHVJQ0FnSUdOeVpXRjBaVU4wYjNJZ1BTQnlaWEYxYVhKbEtDY3VMMTlqY21WaGRHVkRkRzl5Snlrc1hHNGdJQ0FnWTNKbFlYUmxVbVZqZFhKeWVTQTlJSEpsY1hWcGNtVW9KeTR2WDJOeVpXRjBaVkpsWTNWeWNua25LU3hjYmlBZ0lDQm5aWFJJYjJ4a1pYSWdQU0J5WlhGMWFYSmxLQ2N1TDE5blpYUkliMnhrWlhJbktTeGNiaUFnSUNCeVpXOXlaR1Z5SUQwZ2NtVnhkV2x5WlNnbkxpOWZjbVZ2Y21SbGNpY3BMRnh1SUNBZ0lISmxjR3hoWTJWSWIyeGtaWEp6SUQwZ2NtVnhkV2x5WlNnbkxpOWZjbVZ3YkdGalpVaHZiR1JsY25NbktTeGNiaUFnSUNCeWIyOTBJRDBnY21WeGRXbHlaU2duTGk5ZmNtOXZkQ2NwTzF4dVhHNHZLaW9nVlhObFpDQjBieUJqYjIxd2IzTmxJR0pwZEcxaGMydHpJR1p2Y2lCbWRXNWpkR2x2YmlCdFpYUmhaR0YwWVM0Z0tpOWNiblpoY2lCWFVrRlFYMEpKVGtSZlJreEJSeUE5SURFc1hHNGdJQ0FnVjFKQlVGOUNTVTVFWDB0RldWOUdURUZISUQwZ01peGNiaUFnSUNCWFVrRlFYME5WVWxKWlgwWk1RVWNnUFNBNExGeHVJQ0FnSUZkU1FWQmZRMVZTVWxsZlVrbEhTRlJmUmt4QlJ5QTlJREUyTEZ4dUlDQWdJRmRTUVZCZlFWSlpYMFpNUVVjZ1BTQXhNamdzWEc0Z0lDQWdWMUpCVUY5R1RFbFFYMFpNUVVjZ1BTQTFNVEk3WEc1Y2JpOHFLbHh1SUNvZ1EzSmxZWFJsY3lCaElHWjFibU4wYVc5dUlIUm9ZWFFnZDNKaGNITWdZR1oxYm1OZ0lIUnZJR2x1ZG05clpTQnBkQ0IzYVhSb0lHOXdkR2x2Ym1Gc0lHQjBhR2x6WUZ4dUlDb2dZbWx1WkdsdVp5QnZaaUJnZEdocGMwRnlaMkFzSUhCaGNuUnBZV3dnWVhCd2JHbGpZWFJwYjI0c0lHRnVaQ0JqZFhKeWVXbHVaeTVjYmlBcVhHNGdLaUJBY0hKcGRtRjBaVnh1SUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym54emRISnBibWQ5SUdaMWJtTWdWR2hsSUdaMWJtTjBhVzl1SUc5eUlHMWxkR2h2WkNCdVlXMWxJSFJ2SUhkeVlYQXVYRzRnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnWW1sMGJXRnpheUJVYUdVZ1ltbDBiV0Z6YXlCbWJHRm5jeTRnVTJWbElHQmpjbVZoZEdWWGNtRndZQ0JtYjNJZ2JXOXlaU0JrWlhSaGFXeHpMbHh1SUNvZ1FIQmhjbUZ0SUhzcWZTQmJkR2hwYzBGeVoxMGdWR2hsSUdCMGFHbHpZQ0JpYVc1a2FXNW5JRzltSUdCbWRXNWpZQzVjYmlBcUlFQndZWEpoYlNCN1FYSnlZWGw5SUZ0d1lYSjBhV0ZzYzEwZ1ZHaGxJR0Z5WjNWdFpXNTBjeUIwYnlCd2NtVndaVzVrSUhSdklIUm9iM05sSUhCeWIzWnBaR1ZrSUhSdlhHNGdLaUFnZEdobElHNWxkeUJtZFc1amRHbHZiaTVjYmlBcUlFQndZWEpoYlNCN1FYSnlZWGw5SUZ0b2IyeGtaWEp6WFNCVWFHVWdZSEJoY25ScFlXeHpZQ0J3YkdGalpXaHZiR1JsY2lCcGJtUmxlR1Z6TGx4dUlDb2dRSEJoY21GdElIdEJjbkpoZVgwZ1czQmhjblJwWVd4elVtbG5hSFJkSUZSb1pTQmhjbWQxYldWdWRITWdkRzhnWVhCd1pXNWtJSFJ2SUhSb2IzTmxJSEJ5YjNacFpHVmtYRzRnS2lBZ2RHOGdkR2hsSUc1bGR5Qm1kVzVqZEdsdmJpNWNiaUFxSUVCd1lYSmhiU0I3UVhKeVlYbDlJRnRvYjJ4a1pYSnpVbWxuYUhSZElGUm9aU0JnY0dGeWRHbGhiSE5TYVdkb2RHQWdjR3hoWTJWb2IyeGtaWElnYVc1a1pYaGxjeTVjYmlBcUlFQndZWEpoYlNCN1FYSnlZWGw5SUZ0aGNtZFFiM05kSUZSb1pTQmhjbWQxYldWdWRDQndiM05wZEdsdmJuTWdiMllnZEdobElHNWxkeUJtZFc1amRHbHZiaTVjYmlBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCYllYSjVYU0JVYUdVZ1lYSnBkSGtnWTJGd0lHOW1JR0JtZFc1allDNWNiaUFxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0JiWVhKcGRIbGRJRlJvWlNCaGNtbDBlU0J2WmlCZ1puVnVZMkF1WEc0Z0tpQkFjbVYwZFhKdWN5QjdSblZ1WTNScGIyNTlJRkpsZEhWeWJuTWdkR2hsSUc1bGR5QjNjbUZ3Y0dWa0lHWjFibU4wYVc5dUxseHVJQ292WEc1bWRXNWpkR2x2YmlCamNtVmhkR1ZJZVdKeWFXUW9ablZ1WXl3Z1ltbDBiV0Z6YXl3Z2RHaHBjMEZ5Wnl3Z2NHRnlkR2xoYkhNc0lHaHZiR1JsY25Nc0lIQmhjblJwWVd4elVtbG5hSFFzSUdodmJHUmxjbk5TYVdkb2RDd2dZWEpuVUc5ekxDQmhjbmtzSUdGeWFYUjVLU0I3WEc0Z0lIWmhjaUJwYzBGeWVTQTlJR0pwZEcxaGMyc2dKaUJYVWtGUVgwRlNXVjlHVEVGSExGeHVJQ0FnSUNBZ2FYTkNhVzVrSUQwZ1ltbDBiV0Z6YXlBbUlGZFNRVkJmUWtsT1JGOUdURUZITEZ4dUlDQWdJQ0FnYVhOQ2FXNWtTMlY1SUQwZ1ltbDBiV0Z6YXlBbUlGZFNRVkJmUWtsT1JGOUxSVmxmUmt4QlJ5eGNiaUFnSUNBZ0lHbHpRM1Z5Y21sbFpDQTlJR0pwZEcxaGMyc2dKaUFvVjFKQlVGOURWVkpTV1Y5R1RFRkhJSHdnVjFKQlVGOURWVkpTV1Y5U1NVZElWRjlHVEVGSEtTeGNiaUFnSUNBZ0lHbHpSbXhwY0NBOUlHSnBkRzFoYzJzZ0ppQlhVa0ZRWDBaTVNWQmZSa3hCUnl4Y2JpQWdJQ0FnSUVOMGIzSWdQU0JwYzBKcGJtUkxaWGtnUHlCMWJtUmxabWx1WldRZ09pQmpjbVZoZEdWRGRHOXlLR1oxYm1NcE8xeHVYRzRnSUdaMWJtTjBhVzl1SUhkeVlYQndaWElvS1NCN1hHNGdJQ0FnZG1GeUlHeGxibWQwYUNBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnc1hHNGdJQ0FnSUNBZ0lHRnlaM01nUFNCQmNuSmhlU2hzWlc1bmRHZ3BMRnh1SUNBZ0lDQWdJQ0JwYm1SbGVDQTlJR3hsYm1kMGFEdGNibHh1SUNBZ0lIZG9hV3hsSUNocGJtUmxlQzB0S1NCN1hHNGdJQ0FnSUNCaGNtZHpXMmx1WkdWNFhTQTlJR0Z5WjNWdFpXNTBjMXRwYm1SbGVGMDdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHBjME4xY25KcFpXUXBJSHRjYmlBZ0lDQWdJSFpoY2lCd2JHRmpaV2h2YkdSbGNpQTlJR2RsZEVodmJHUmxjaWgzY21Gd2NHVnlLU3hjYmlBZ0lDQWdJQ0FnSUNCb2IyeGtaWEp6UTI5MWJuUWdQU0JqYjNWdWRFaHZiR1JsY25Nb1lYSm5jeXdnY0d4aFkyVm9iMnhrWlhJcE8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2NHRnlkR2xoYkhNcElIdGNiaUFnSUNBZ0lHRnlaM01nUFNCamIyMXdiM05sUVhKbmN5aGhjbWR6TENCd1lYSjBhV0ZzY3l3Z2FHOXNaR1Z5Y3l3Z2FYTkRkWEp5YVdWa0tUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIQmhjblJwWVd4elVtbG5hSFFwSUh0Y2JpQWdJQ0FnSUdGeVozTWdQU0JqYjIxd2IzTmxRWEpuYzFKcFoyaDBLR0Z5WjNNc0lIQmhjblJwWVd4elVtbG5hSFFzSUdodmJHUmxjbk5TYVdkb2RDd2dhWE5EZFhKeWFXVmtLVHRjYmlBZ0lDQjlYRzRnSUNBZ2JHVnVaM1JvSUMwOUlHaHZiR1JsY25ORGIzVnVkRHRjYmlBZ0lDQnBaaUFvYVhORGRYSnlhV1ZrSUNZbUlHeGxibWQwYUNBOElHRnlhWFI1S1NCN1hHNGdJQ0FnSUNCMllYSWdibVYzU0c5c1pHVnljeUE5SUhKbGNHeGhZMlZJYjJ4a1pYSnpLR0Z5WjNNc0lIQnNZV05sYUc5c1pHVnlLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmpjbVZoZEdWU1pXTjFjbko1S0Z4dUlDQWdJQ0FnSUNCbWRXNWpMQ0JpYVhSdFlYTnJMQ0JqY21WaGRHVkllV0p5YVdRc0lIZHlZWEJ3WlhJdWNHeGhZMlZvYjJ4a1pYSXNJSFJvYVhOQmNtY3NYRzRnSUNBZ0lDQWdJR0Z5WjNNc0lHNWxkMGh2YkdSbGNuTXNJR0Z5WjFCdmN5d2dZWEo1TENCaGNtbDBlU0F0SUd4bGJtZDBhRnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzRnSUNBZ2RtRnlJSFJvYVhOQ2FXNWthVzVuSUQwZ2FYTkNhVzVrSUQ4Z2RHaHBjMEZ5WnlBNklIUm9hWE1zWEc0Z0lDQWdJQ0FnSUdadUlEMGdhWE5DYVc1a1MyVjVJRDhnZEdocGMwSnBibVJwYm1kYlpuVnVZMTBnT2lCbWRXNWpPMXh1WEc0Z0lDQWdiR1Z1WjNSb0lEMGdZWEpuY3k1c1pXNW5kR2c3WEc0Z0lDQWdhV1lnS0dGeVoxQnZjeWtnZTF4dUlDQWdJQ0FnWVhKbmN5QTlJSEpsYjNKa1pYSW9ZWEpuY3l3Z1lYSm5VRzl6S1R0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0dselJteHBjQ0FtSmlCc1pXNW5kR2dnUGlBeEtTQjdYRzRnSUNBZ0lDQmhjbWR6TG5KbGRtVnljMlVvS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0dselFYSjVJQ1ltSUdGeWVTQThJR3hsYm1kMGFDa2dlMXh1SUNBZ0lDQWdZWEpuY3k1c1pXNW5kR2dnUFNCaGNuazdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaDBhR2x6SUNZbUlIUm9hWE1nSVQwOUlISnZiM1FnSmlZZ2RHaHBjeUJwYm5OMFlXNWpaVzltSUhkeVlYQndaWElwSUh0Y2JpQWdJQ0FnSUdadUlEMGdRM1J2Y2lCOGZDQmpjbVZoZEdWRGRHOXlLR1p1S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHWnVMbUZ3Y0d4NUtIUm9hWE5DYVc1a2FXNW5MQ0JoY21kektUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z2QzSmhjSEJsY2p0Y2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JqY21WaGRHVkllV0p5YVdRN1hHNGlMQ0oyWVhJZ1lYQndiSGtnUFNCeVpYRjFhWEpsS0NjdUwxOWhjSEJzZVNjcExGeHVJQ0FnSUdOeVpXRjBaVU4wYjNJZ1BTQnlaWEYxYVhKbEtDY3VMMTlqY21WaGRHVkRkRzl5Snlrc1hHNGdJQ0FnWTNKbFlYUmxTSGxpY21sa0lEMGdjbVZ4ZFdseVpTZ25MaTlmWTNKbFlYUmxTSGxpY21sa0p5a3NYRzRnSUNBZ1kzSmxZWFJsVW1WamRYSnllU0E5SUhKbGNYVnBjbVVvSnk0dlgyTnlaV0YwWlZKbFkzVnljbmtuS1N4Y2JpQWdJQ0JuWlhSSWIyeGtaWElnUFNCeVpYRjFhWEpsS0NjdUwxOW5aWFJJYjJ4a1pYSW5LU3hjYmlBZ0lDQnlaWEJzWVdObFNHOXNaR1Z5Y3lBOUlISmxjWFZwY21Vb0p5NHZYM0psY0d4aFkyVkliMnhrWlhKekp5a3NYRzRnSUNBZ2NtOXZkQ0E5SUhKbGNYVnBjbVVvSnk0dlgzSnZiM1FuS1R0Y2JseHVMeW9xWEc0Z0tpQkRjbVZoZEdWeklHRWdablZ1WTNScGIyNGdkR2hoZENCM2NtRndjeUJnWm5WdVkyQWdkRzhnWlc1aFlteGxJR04xY25KNWFXNW5MbHh1SUNwY2JpQXFJRUJ3Y21sMllYUmxYRzRnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCbWRXNWpJRlJvWlNCbWRXNWpkR2x2YmlCMGJ5QjNjbUZ3TGx4dUlDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlHSnBkRzFoYzJzZ1ZHaGxJR0pwZEcxaGMyc2dabXhoWjNNdUlGTmxaU0JnWTNKbFlYUmxWM0poY0dBZ1ptOXlJRzF2Y21VZ1pHVjBZV2xzY3k1Y2JpQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQmhjbWwwZVNCVWFHVWdZWEpwZEhrZ2IyWWdZR1oxYm1OZ0xseHVJQ29nUUhKbGRIVnlibk1nZTBaMWJtTjBhVzl1ZlNCU1pYUjFjbTV6SUhSb1pTQnVaWGNnZDNKaGNIQmxaQ0JtZFc1amRHbHZiaTVjYmlBcUwxeHVablZ1WTNScGIyNGdZM0psWVhSbFEzVnljbmtvWm5WdVl5d2dZbWwwYldGemF5d2dZWEpwZEhrcElIdGNiaUFnZG1GeUlFTjBiM0lnUFNCamNtVmhkR1ZEZEc5eUtHWjFibU1wTzF4dVhHNGdJR1oxYm1OMGFXOXVJSGR5WVhCd1pYSW9LU0I3WEc0Z0lDQWdkbUZ5SUd4bGJtZDBhQ0E5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2dzWEc0Z0lDQWdJQ0FnSUdGeVozTWdQU0JCY25KaGVTaHNaVzVuZEdncExGeHVJQ0FnSUNBZ0lDQnBibVJsZUNBOUlHeGxibWQwYUN4Y2JpQWdJQ0FnSUNBZ2NHeGhZMlZvYjJ4a1pYSWdQU0JuWlhSSWIyeGtaWElvZDNKaGNIQmxjaWs3WEc1Y2JpQWdJQ0IzYUdsc1pTQW9hVzVrWlhndExTa2dlMXh1SUNBZ0lDQWdZWEpuYzF0cGJtUmxlRjBnUFNCaGNtZDFiV1Z1ZEhOYmFXNWtaWGhkTzF4dUlDQWdJSDFjYmlBZ0lDQjJZWElnYUc5c1pHVnljeUE5SUNoc1pXNW5kR2dnUENBeklDWW1JR0Z5WjNOYk1GMGdJVDA5SUhCc1lXTmxhRzlzWkdWeUlDWW1JR0Z5WjNOYmJHVnVaM1JvSUMwZ01WMGdJVDA5SUhCc1lXTmxhRzlzWkdWeUtWeHVJQ0FnSUNBZ1B5QmJYVnh1SUNBZ0lDQWdPaUJ5WlhCc1lXTmxTRzlzWkdWeWN5aGhjbWR6TENCd2JHRmpaV2h2YkdSbGNpazdYRzVjYmlBZ0lDQnNaVzVuZEdnZ0xUMGdhRzlzWkdWeWN5NXNaVzVuZEdnN1hHNGdJQ0FnYVdZZ0tHeGxibWQwYUNBOElHRnlhWFI1S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWTNKbFlYUmxVbVZqZFhKeWVTaGNiaUFnSUNBZ0lDQWdablZ1WXl3Z1ltbDBiV0Z6YXl3Z1kzSmxZWFJsU0hsaWNtbGtMQ0IzY21Gd2NHVnlMbkJzWVdObGFHOXNaR1Z5TENCMWJtUmxabWx1WldRc1hHNGdJQ0FnSUNBZ0lHRnlaM01zSUdodmJHUmxjbk1zSUhWdVpHVm1hVzVsWkN3Z2RXNWtaV1pwYm1Wa0xDQmhjbWwwZVNBdElHeGxibWQwYUNrN1hHNGdJQ0FnZlZ4dUlDQWdJSFpoY2lCbWJpQTlJQ2gwYUdseklDWW1JSFJvYVhNZ0lUMDlJSEp2YjNRZ0ppWWdkR2hwY3lCcGJuTjBZVzVqWlc5bUlIZHlZWEJ3WlhJcElEOGdRM1J2Y2lBNklHWjFibU03WEc0Z0lDQWdjbVYwZFhKdUlHRndjR3g1S0dadUxDQjBhR2x6TENCaGNtZHpLVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdkM0poY0hCbGNqdGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCamNtVmhkR1ZEZFhKeWVUdGNiaUlzSW5aaGNpQmhjSEJzZVNBOUlISmxjWFZwY21Vb0p5NHZYMkZ3Y0d4NUp5a3NYRzRnSUNBZ1kzSmxZWFJsUTNSdmNpQTlJSEpsY1hWcGNtVW9KeTR2WDJOeVpXRjBaVU4wYjNJbktTeGNiaUFnSUNCeWIyOTBJRDBnY21WeGRXbHlaU2duTGk5ZmNtOXZkQ2NwTzF4dVhHNHZLaW9nVlhObFpDQjBieUJqYjIxd2IzTmxJR0pwZEcxaGMydHpJR1p2Y2lCbWRXNWpkR2x2YmlCdFpYUmhaR0YwWVM0Z0tpOWNiblpoY2lCWFVrRlFYMEpKVGtSZlJreEJSeUE5SURFN1hHNWNiaThxS2x4dUlDb2dRM0psWVhSbGN5QmhJR1oxYm1OMGFXOXVJSFJvWVhRZ2QzSmhjSE1nWUdaMWJtTmdJSFJ2SUdsdWRtOXJaU0JwZENCM2FYUm9JSFJvWlNCZ2RHaHBjMkFnWW1sdVpHbHVaMXh1SUNvZ2IyWWdZSFJvYVhOQmNtZGdJR0Z1WkNCZ2NHRnlkR2xoYkhOZ0lIQnlaWEJsYm1SbFpDQjBieUIwYUdVZ1lYSm5kVzFsYm5SeklHbDBJSEpsWTJWcGRtVnpMbHh1SUNwY2JpQXFJRUJ3Y21sMllYUmxYRzRnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCbWRXNWpJRlJvWlNCbWRXNWpkR2x2YmlCMGJ5QjNjbUZ3TGx4dUlDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlHSnBkRzFoYzJzZ1ZHaGxJR0pwZEcxaGMyc2dabXhoWjNNdUlGTmxaU0JnWTNKbFlYUmxWM0poY0dBZ1ptOXlJRzF2Y21VZ1pHVjBZV2xzY3k1Y2JpQXFJRUJ3WVhKaGJTQjdLbjBnZEdocGMwRnlaeUJVYUdVZ1lIUm9hWE5nSUdKcGJtUnBibWNnYjJZZ1lHWjFibU5nTGx4dUlDb2dRSEJoY21GdElIdEJjbkpoZVgwZ2NHRnlkR2xoYkhNZ1ZHaGxJR0Z5WjNWdFpXNTBjeUIwYnlCd2NtVndaVzVrSUhSdklIUm9iM05sSUhCeWIzWnBaR1ZrSUhSdlhHNGdLaUFnZEdobElHNWxkeUJtZFc1amRHbHZiaTVjYmlBcUlFQnlaWFIxY201eklIdEdkVzVqZEdsdmJuMGdVbVYwZFhKdWN5QjBhR1VnYm1WM0lIZHlZWEJ3WldRZ1puVnVZM1JwYjI0dVhHNGdLaTljYm1aMWJtTjBhVzl1SUdOeVpXRjBaVkJoY25ScFlXd29ablZ1WXl3Z1ltbDBiV0Z6YXl3Z2RHaHBjMEZ5Wnl3Z2NHRnlkR2xoYkhNcElIdGNiaUFnZG1GeUlHbHpRbWx1WkNBOUlHSnBkRzFoYzJzZ0ppQlhVa0ZRWDBKSlRrUmZSa3hCUnl4Y2JpQWdJQ0FnSUVOMGIzSWdQU0JqY21WaGRHVkRkRzl5S0daMWJtTXBPMXh1WEc0Z0lHWjFibU4wYVc5dUlIZHlZWEJ3WlhJb0tTQjdYRzRnSUNBZ2RtRnlJR0Z5WjNOSmJtUmxlQ0E5SUMweExGeHVJQ0FnSUNBZ0lDQmhjbWR6VEdWdVozUm9JRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ3hjYmlBZ0lDQWdJQ0FnYkdWbWRFbHVaR1Y0SUQwZ0xURXNYRzRnSUNBZ0lDQWdJR3hsWm5STVpXNW5kR2dnUFNCd1lYSjBhV0ZzY3k1c1pXNW5kR2dzWEc0Z0lDQWdJQ0FnSUdGeVozTWdQU0JCY25KaGVTaHNaV1owVEdWdVozUm9JQ3NnWVhKbmMweGxibWQwYUNrc1hHNGdJQ0FnSUNBZ0lHWnVJRDBnS0hSb2FYTWdKaVlnZEdocGN5QWhQVDBnY205dmRDQW1KaUIwYUdseklHbHVjM1JoYm1ObGIyWWdkM0poY0hCbGNpa2dQeUJEZEc5eUlEb2dablZ1WXp0Y2JseHVJQ0FnSUhkb2FXeGxJQ2dySzJ4bFpuUkpibVJsZUNBOElHeGxablJNWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJR0Z5WjNOYmJHVm1kRWx1WkdWNFhTQTlJSEJoY25ScFlXeHpXMnhsWm5SSmJtUmxlRjA3WEc0Z0lDQWdmVnh1SUNBZ0lIZG9hV3hsSUNoaGNtZHpUR1Z1WjNSb0xTMHBJSHRjYmlBZ0lDQWdJR0Z5WjNOYmJHVm1kRWx1WkdWNEt5dGRJRDBnWVhKbmRXMWxiblJ6V3lzcllYSm5jMGx1WkdWNFhUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJR0Z3Y0d4NUtHWnVMQ0JwYzBKcGJtUWdQeUIwYUdselFYSm5JRG9nZEdocGN5d2dZWEpuY3lrN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUhkeVlYQndaWEk3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdZM0psWVhSbFVHRnlkR2xoYkR0Y2JpSXNJblpoY2lCamIyMXdiM05sUVhKbmN5QTlJSEpsY1hWcGNtVW9KeTR2WDJOdmJYQnZjMlZCY21kekp5a3NYRzRnSUNBZ1kyOXRjRzl6WlVGeVozTlNhV2RvZENBOUlISmxjWFZwY21Vb0p5NHZYMk52YlhCdmMyVkJjbWR6VW1sbmFIUW5LU3hjYmlBZ0lDQnlaWEJzWVdObFNHOXNaR1Z5Y3lBOUlISmxjWFZwY21Vb0p5NHZYM0psY0d4aFkyVkliMnhrWlhKekp5azdYRzVjYmk4cUtpQlZjMlZrSUdGeklIUm9aU0JwYm5SbGNtNWhiQ0JoY21kMWJXVnVkQ0J3YkdGalpXaHZiR1JsY2k0Z0tpOWNiblpoY2lCUVRFRkRSVWhQVEVSRlVpQTlJQ2RmWDJ4dlpHRnphRjl3YkdGalpXaHZiR1JsY2w5Zkp6dGNibHh1THlvcUlGVnpaV1FnZEc4Z1kyOXRjRzl6WlNCaWFYUnRZWE5yY3lCbWIzSWdablZ1WTNScGIyNGdiV1YwWVdSaGRHRXVJQ292WEc1MllYSWdWMUpCVUY5Q1NVNUVYMFpNUVVjZ1BTQXhMRnh1SUNBZ0lGZFNRVkJmUWtsT1JGOUxSVmxmUmt4QlJ5QTlJRElzWEc0Z0lDQWdWMUpCVUY5RFZWSlNXVjlDVDFWT1JGOUdURUZISUQwZ05DeGNiaUFnSUNCWFVrRlFYME5WVWxKWlgwWk1RVWNnUFNBNExGeHVJQ0FnSUZkU1FWQmZRVkpaWDBaTVFVY2dQU0F4TWpnc1hHNGdJQ0FnVjFKQlVGOVNSVUZTUjE5R1RFRkhJRDBnTWpVMk8xeHVYRzR2S2lCQ2RXbHNkQzFwYmlCdFpYUm9iMlFnY21WbVpYSmxibU5sY3lCbWIzSWdkR2h2YzJVZ2QybDBhQ0IwYUdVZ2MyRnRaU0J1WVcxbElHRnpJRzkwYUdWeUlHQnNiMlJoYzJoZ0lHMWxkR2h2WkhNdUlDb3ZYRzUyWVhJZ2JtRjBhWFpsVFdsdUlEMGdUV0YwYUM1dGFXNDdYRzVjYmk4cUtseHVJQ29nVFdWeVoyVnpJSFJvWlNCbWRXNWpkR2x2YmlCdFpYUmhaR0YwWVNCdlppQmdjMjkxY21ObFlDQnBiblJ2SUdCa1lYUmhZQzVjYmlBcVhHNGdLaUJOWlhKbmFXNW5JRzFsZEdGa1lYUmhJSEpsWkhWalpYTWdkR2hsSUc1MWJXSmxjaUJ2WmlCM2NtRndjR1Z5Y3lCMWMyVmtJSFJ2SUdsdWRtOXJaU0JoSUdaMWJtTjBhVzl1TGx4dUlDb2dWR2hwY3lCcGN5QndiM056YVdKc1pTQmlaV05oZFhObElHMWxkR2h2WkhNZ2JHbHJaU0JnWHk1aWFXNWtZQ3dnWUY4dVkzVnljbmxnTENCaGJtUWdZRjh1Y0dGeWRHbGhiR0JjYmlBcUlHMWhlU0JpWlNCaGNIQnNhV1ZrSUhKbFoyRnlaR3hsYzNNZ2IyWWdaWGhsWTNWMGFXOXVJRzl5WkdWeUxpQk5aWFJvYjJSeklHeHBhMlVnWUY4dVlYSjVZQ0JoYm1SY2JpQXFJR0JmTG5KbFlYSm5ZQ0J0YjJScFpua2dablZ1WTNScGIyNGdZWEpuZFcxbGJuUnpMQ0J0WVd0cGJtY2dkR2hsSUc5eVpHVnlJR2x1SUhkb2FXTm9JSFJvWlhrZ1lYSmxYRzRnS2lCbGVHVmpkWFJsWkNCcGJYQnZjblJoYm5Rc0lIQnlaWFpsYm5ScGJtY2dkR2hsSUcxbGNtZHBibWNnYjJZZ2JXVjBZV1JoZEdFdUlFaHZkMlYyWlhJc0lIZGxJRzFoYTJWY2JpQXFJR0Z1SUdWNFkyVndkR2x2YmlCbWIzSWdZU0J6WVdabElHTnZiV0pwYm1Wa0lHTmhjMlVnZDJobGNtVWdZM1Z5Y21sbFpDQm1kVzVqZEdsdmJuTWdhR0YyWlNCZ1h5NWhjbmxnWEc0Z0tpQmhibVFnYjNJZ1lGOHVjbVZoY21kZ0lHRndjR3hwWldRdVhHNGdLbHh1SUNvZ1FIQnlhWFpoZEdWY2JpQXFJRUJ3WVhKaGJTQjdRWEp5WVhsOUlHUmhkR0VnVkdobElHUmxjM1JwYm1GMGFXOXVJRzFsZEdGa1lYUmhMbHh1SUNvZ1FIQmhjbUZ0SUh0QmNuSmhlWDBnYzI5MWNtTmxJRlJvWlNCemIzVnlZMlVnYldWMFlXUmhkR0V1WEc0Z0tpQkFjbVYwZFhKdWN5QjdRWEp5WVhsOUlGSmxkSFZ5Ym5NZ1lHUmhkR0ZnTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJ0WlhKblpVUmhkR0VvWkdGMFlTd2djMjkxY21ObEtTQjdYRzRnSUhaaGNpQmlhWFJ0WVhOcklEMGdaR0YwWVZzeFhTeGNiaUFnSUNBZ0lITnlZMEpwZEcxaGMyc2dQU0J6YjNWeVkyVmJNVjBzWEc0Z0lDQWdJQ0J1WlhkQ2FYUnRZWE5ySUQwZ1ltbDBiV0Z6YXlCOElITnlZMEpwZEcxaGMyc3NYRzRnSUNBZ0lDQnBjME52YlcxdmJpQTlJRzVsZDBKcGRHMWhjMnNnUENBb1YxSkJVRjlDU1U1RVgwWk1RVWNnZkNCWFVrRlFYMEpKVGtSZlMwVlpYMFpNUVVjZ2ZDQlhVa0ZRWDBGU1dWOUdURUZIS1R0Y2JseHVJQ0IyWVhJZ2FYTkRiMjFpYnlBOVhHNGdJQ0FnS0NoemNtTkNhWFJ0WVhOcklEMDlJRmRTUVZCZlFWSlpYMFpNUVVjcElDWW1JQ2hpYVhSdFlYTnJJRDA5SUZkU1FWQmZRMVZTVWxsZlJreEJSeWtwSUh4OFhHNGdJQ0FnS0NoemNtTkNhWFJ0WVhOcklEMDlJRmRTUVZCZlFWSlpYMFpNUVVjcElDWW1JQ2hpYVhSdFlYTnJJRDA5SUZkU1FWQmZVa1ZCVWtkZlJreEJSeWtnSmlZZ0tHUmhkR0ZiTjEwdWJHVnVaM1JvSUR3OUlITnZkWEpqWlZzNFhTa3BJSHg4WEc0Z0lDQWdLQ2h6Y21OQ2FYUnRZWE5ySUQwOUlDaFhVa0ZRWDBGU1dWOUdURUZISUh3Z1YxSkJVRjlTUlVGU1IxOUdURUZIS1NrZ0ppWWdLSE52ZFhKalpWczNYUzVzWlc1bmRHZ2dQRDBnYzI5MWNtTmxXemhkS1NBbUppQW9ZbWwwYldGemF5QTlQU0JYVWtGUVgwTlZVbEpaWDBaTVFVY3BLVHRjYmx4dUlDQXZMeUJGZUdsMElHVmhjbXg1SUdsbUlHMWxkR0ZrWVhSaElHTmhiaWQwSUdKbElHMWxjbWRsWkM1Y2JpQWdhV1lnS0NFb2FYTkRiMjF0YjI0Z2ZId2dhWE5EYjIxaWJ5a3BJSHRjYmlBZ0lDQnlaWFIxY200Z1pHRjBZVHRjYmlBZ2ZWeHVJQ0F2THlCVmMyVWdjMjkxY21ObElHQjBhR2x6UVhKbllDQnBaaUJoZG1GcGJHRmliR1V1WEc0Z0lHbG1JQ2h6Y21OQ2FYUnRZWE5ySUNZZ1YxSkJVRjlDU1U1RVgwWk1RVWNwSUh0Y2JpQWdJQ0JrWVhSaFd6SmRJRDBnYzI5MWNtTmxXekpkTzF4dUlDQWdJQzh2SUZObGRDQjNhR1Z1SUdOMWNuSjVhVzVuSUdFZ1ltOTFibVFnWm5WdVkzUnBiMjR1WEc0Z0lDQWdibVYzUW1sMGJXRnpheUI4UFNCaWFYUnRZWE5ySUNZZ1YxSkJVRjlDU1U1RVgwWk1RVWNnUHlBd0lEb2dWMUpCVUY5RFZWSlNXVjlDVDFWT1JGOUdURUZITzF4dUlDQjlYRzRnSUM4dklFTnZiWEJ2YzJVZ2NHRnlkR2xoYkNCaGNtZDFiV1Z1ZEhNdVhHNGdJSFpoY2lCMllXeDFaU0E5SUhOdmRYSmpaVnN6WFR0Y2JpQWdhV1lnS0haaGJIVmxLU0I3WEc0Z0lDQWdkbUZ5SUhCaGNuUnBZV3h6SUQwZ1pHRjBZVnN6WFR0Y2JpQWdJQ0JrWVhSaFd6TmRJRDBnY0dGeWRHbGhiSE1nUHlCamIyMXdiM05sUVhKbmN5aHdZWEowYVdGc2N5d2dkbUZzZFdVc0lITnZkWEpqWlZzMFhTa2dPaUIyWVd4MVpUdGNiaUFnSUNCa1lYUmhXelJkSUQwZ2NHRnlkR2xoYkhNZ1B5QnlaWEJzWVdObFNHOXNaR1Z5Y3loa1lYUmhXek5kTENCUVRFRkRSVWhQVEVSRlVpa2dPaUJ6YjNWeVkyVmJORjA3WEc0Z0lIMWNiaUFnTHk4Z1EyOXRjRzl6WlNCd1lYSjBhV0ZzSUhKcFoyaDBJR0Z5WjNWdFpXNTBjeTVjYmlBZ2RtRnNkV1VnUFNCemIzVnlZMlZiTlYwN1hHNGdJR2xtSUNoMllXeDFaU2tnZTF4dUlDQWdJSEJoY25ScFlXeHpJRDBnWkdGMFlWczFYVHRjYmlBZ0lDQmtZWFJoV3pWZElEMGdjR0Z5ZEdsaGJITWdQeUJqYjIxd2IzTmxRWEpuYzFKcFoyaDBLSEJoY25ScFlXeHpMQ0IyWVd4MVpTd2djMjkxY21ObFd6WmRLU0E2SUhaaGJIVmxPMXh1SUNBZ0lHUmhkR0ZiTmwwZ1BTQndZWEowYVdGc2N5QS9JSEpsY0d4aFkyVkliMnhrWlhKektHUmhkR0ZiTlYwc0lGQk1RVU5GU0U5TVJFVlNLU0E2SUhOdmRYSmpaVnMyWFR0Y2JpQWdmVnh1SUNBdkx5QlZjMlVnYzI5MWNtTmxJR0JoY21kUWIzTmdJR2xtSUdGMllXbHNZV0pzWlM1Y2JpQWdkbUZzZFdVZ1BTQnpiM1Z5WTJWYk4xMDdYRzRnSUdsbUlDaDJZV3gxWlNrZ2UxeHVJQ0FnSUdSaGRHRmJOMTBnUFNCMllXeDFaVHRjYmlBZ2ZWeHVJQ0F2THlCVmMyVWdjMjkxY21ObElHQmhjbmxnSUdsbUlHbDBKM01nYzIxaGJHeGxjaTVjYmlBZ2FXWWdLSE55WTBKcGRHMWhjMnNnSmlCWFVrRlFYMEZTV1Y5R1RFRkhLU0I3WEc0Z0lDQWdaR0YwWVZzNFhTQTlJR1JoZEdGYk9GMGdQVDBnYm5Wc2JDQS9JSE52ZFhKalpWczRYU0E2SUc1aGRHbDJaVTFwYmloa1lYUmhXemhkTENCemIzVnlZMlZiT0YwcE8xeHVJQ0I5WEc0Z0lDOHZJRlZ6WlNCemIzVnlZMlVnWUdGeWFYUjVZQ0JwWmlCdmJtVWdhWE1nYm05MElIQnliM1pwWkdWa0xseHVJQ0JwWmlBb1pHRjBZVnM1WFNBOVBTQnVkV3hzS1NCN1hHNGdJQ0FnWkdGMFlWczVYU0E5SUhOdmRYSmpaVnM1WFR0Y2JpQWdmVnh1SUNBdkx5QlZjMlVnYzI5MWNtTmxJR0JtZFc1allDQmhibVFnYldWeVoyVWdZbWwwYldGemEzTXVYRzRnSUdSaGRHRmJNRjBnUFNCemIzVnlZMlZiTUYwN1hHNGdJR1JoZEdGYk1WMGdQU0J1WlhkQ2FYUnRZWE5yTzF4dVhHNGdJSEpsZEhWeWJpQmtZWFJoTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRzFsY21kbFJHRjBZVHRjYmlJc0lpOHFLaUJWYzJWa0lIUnZJRzFoZEdOb0lHRWdjMmx1WjJ4bElIZG9hWFJsYzNCaFkyVWdZMmhoY21GamRHVnlMaUFxTDF4dWRtRnlJSEpsVjJocGRHVnpjR0ZqWlNBOUlDOWNYSE12TzF4dVhHNHZLaXBjYmlBcUlGVnpaV1FnWW5rZ1lGOHVkSEpwYldBZ1lXNWtJR0JmTG5SeWFXMUZibVJnSUhSdklHZGxkQ0IwYUdVZ2FXNWtaWGdnYjJZZ2RHaGxJR3hoYzNRZ2JtOXVMWGRvYVhSbGMzQmhZMlZjYmlBcUlHTm9ZWEpoWTNSbGNpQnZaaUJnYzNSeWFXNW5ZQzVjYmlBcVhHNGdLaUJBY0hKcGRtRjBaVnh1SUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUhOMGNtbHVaeUJVYUdVZ2MzUnlhVzVuSUhSdklHbHVjM0JsWTNRdVhHNGdLaUJBY21WMGRYSnVjeUI3Ym5WdFltVnlmU0JTWlhSMWNtNXpJSFJvWlNCcGJtUmxlQ0J2WmlCMGFHVWdiR0Z6ZENCdWIyNHRkMmhwZEdWemNHRmpaU0JqYUdGeVlXTjBaWEl1WEc0Z0tpOWNibVoxYm1OMGFXOXVJSFJ5YVcxdFpXUkZibVJKYm1SbGVDaHpkSEpwYm1jcElIdGNiaUFnZG1GeUlHbHVaR1Y0SUQwZ2MzUnlhVzVuTG14bGJtZDBhRHRjYmx4dUlDQjNhR2xzWlNBb2FXNWtaWGd0TFNBbUppQnlaVmRvYVhSbGMzQmhZMlV1ZEdWemRDaHpkSEpwYm1jdVkyaGhja0YwS0dsdVpHVjRLU2twSUh0OVhHNGdJSEpsZEhWeWJpQnBibVJsZUR0Y2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0IwY21sdGJXVmtSVzVrU1c1a1pYZzdYRzRpTENKMllYSWdkSEpwYlcxbFpFVnVaRWx1WkdWNElEMGdjbVZ4ZFdseVpTZ25MaTlmZEhKcGJXMWxaRVZ1WkVsdVpHVjRKeWs3WEc1Y2JpOHFLaUJWYzJWa0lIUnZJRzFoZEdOb0lHeGxZV1JwYm1jZ2QyaHBkR1Z6Y0dGalpTNGdLaTljYm5aaGNpQnlaVlJ5YVcxVGRHRnlkQ0E5SUM5ZVhGeHpLeTg3WEc1Y2JpOHFLbHh1SUNvZ1ZHaGxJR0poYzJVZ2FXMXdiR1Z0Wlc1MFlYUnBiMjRnYjJZZ1lGOHVkSEpwYldBdVhHNGdLbHh1SUNvZ1FIQnlhWFpoZEdWY2JpQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnpkSEpwYm1jZ1ZHaGxJSE4wY21sdVp5QjBieUIwY21sdExseHVJQ29nUUhKbGRIVnlibk1nZTNOMGNtbHVaMzBnVW1WMGRYSnVjeUIwYUdVZ2RISnBiVzFsWkNCemRISnBibWN1WEc0Z0tpOWNibVoxYm1OMGFXOXVJR0poYzJWVWNtbHRLSE4wY21sdVp5a2dlMXh1SUNCeVpYUjFjbTRnYzNSeWFXNW5YRzRnSUNBZ1B5QnpkSEpwYm1jdWMyeHBZMlVvTUN3Z2RISnBiVzFsWkVWdVpFbHVaR1Y0S0hOMGNtbHVaeWtnS3lBeEtTNXlaWEJzWVdObEtISmxWSEpwYlZOMFlYSjBMQ0FuSnlsY2JpQWdJQ0E2SUhOMGNtbHVaenRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmlZWE5sVkhKcGJUdGNiaUlzSW5aaGNpQmlZWE5sVkhKcGJTQTlJSEpsY1hWcGNtVW9KeTR2WDJKaGMyVlVjbWx0Snlrc1hHNGdJQ0FnYVhOUFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwybHpUMkpxWldOMEp5a3NYRzRnSUNBZ2FYTlRlVzFpYjJ3Z1BTQnlaWEYxYVhKbEtDY3VMMmx6VTNsdFltOXNKeWs3WEc1Y2JpOHFLaUJWYzJWa0lHRnpJSEpsWm1WeVpXNWpaWE1nWm05eUlIWmhjbWx2ZFhNZ1lFNTFiV0psY21BZ1kyOXVjM1JoYm5SekxpQXFMMXh1ZG1GeUlFNUJUaUE5SURBZ0x5QXdPMXh1WEc0dktpb2dWWE5sWkNCMGJ5QmtaWFJsWTNRZ1ltRmtJSE5wWjI1bFpDQm9aWGhoWkdWamFXMWhiQ0J6ZEhKcGJtY2dkbUZzZFdWekxpQXFMMXh1ZG1GeUlISmxTWE5DWVdSSVpYZ2dQU0F2WGxzdEsxMHdlRnN3TFRsaExXWmRLeVF2YVR0Y2JseHVMeW9xSUZWelpXUWdkRzhnWkdWMFpXTjBJR0pwYm1GeWVTQnpkSEpwYm1jZ2RtRnNkV1Z6TGlBcUwxeHVkbUZ5SUhKbFNYTkNhVzVoY25rZ1BTQXZYakJpV3pBeFhTc2tMMms3WEc1Y2JpOHFLaUJWYzJWa0lIUnZJR1JsZEdWamRDQnZZM1JoYkNCemRISnBibWNnZG1Gc2RXVnpMaUFxTDF4dWRtRnlJSEpsU1hOUFkzUmhiQ0E5SUM5ZU1HOWJNQzAzWFNza0wyazdYRzVjYmk4cUtpQkNkV2xzZEMxcGJpQnRaWFJvYjJRZ2NtVm1aWEpsYm1ObGN5QjNhWFJvYjNWMElHRWdaR1Z3Wlc1a1pXNWplU0J2YmlCZ2NtOXZkR0F1SUNvdlhHNTJZWElnWm5KbFpWQmhjbk5sU1c1MElEMGdjR0Z5YzJWSmJuUTdYRzVjYmk4cUtseHVJQ29nUTI5dWRtVnlkSE1nWUhaaGJIVmxZQ0IwYnlCaElHNTFiV0psY2k1Y2JpQXFYRzRnS2lCQWMzUmhkR2xqWEc0Z0tpQkFiV1Z0WW1WeVQyWWdYMXh1SUNvZ1FITnBibU5sSURRdU1DNHdYRzRnS2lCQVkyRjBaV2R2Y25rZ1RHRnVaMXh1SUNvZ1FIQmhjbUZ0SUhzcWZTQjJZV3gxWlNCVWFHVWdkbUZzZFdVZ2RHOGdjSEp2WTJWemN5NWNiaUFxSUVCeVpYUjFjbTV6SUh0dWRXMWlaWEo5SUZKbGRIVnlibk1nZEdobElHNTFiV0psY2k1Y2JpQXFJRUJsZUdGdGNHeGxYRzRnS2x4dUlDb2dYeTUwYjA1MWJXSmxjaWd6TGpJcE8xeHVJQ29nTHk4Z1BUNGdNeTR5WEc0Z0tseHVJQ29nWHk1MGIwNTFiV0psY2loT2RXMWlaWEl1VFVsT1gxWkJURlZGS1R0Y2JpQXFJQzh2SUQwK0lEVmxMVE15TkZ4dUlDcGNiaUFxSUY4dWRHOU9kVzFpWlhJb1NXNW1hVzVwZEhrcE8xeHVJQ29nTHk4Z1BUNGdTVzVtYVc1cGRIbGNiaUFxWEc0Z0tpQmZMblJ2VG5WdFltVnlLQ2N6TGpJbktUdGNiaUFxSUM4dklEMCtJRE11TWx4dUlDb3ZYRzVtZFc1amRHbHZiaUIwYjA1MWJXSmxjaWgyWVd4MVpTa2dlMXh1SUNCcFppQW9kSGx3Wlc5bUlIWmhiSFZsSUQwOUlDZHVkVzFpWlhJbktTQjdYRzRnSUNBZ2NtVjBkWEp1SUhaaGJIVmxPMXh1SUNCOVhHNGdJR2xtSUNocGMxTjViV0p2YkNoMllXeDFaU2twSUh0Y2JpQWdJQ0J5WlhSMWNtNGdUa0ZPTzF4dUlDQjlYRzRnSUdsbUlDaHBjMDlpYW1WamRDaDJZV3gxWlNrcElIdGNiaUFnSUNCMllYSWdiM1JvWlhJZ1BTQjBlWEJsYjJZZ2RtRnNkV1V1ZG1Gc2RXVlBaaUE5UFNBblpuVnVZM1JwYjI0bklEOGdkbUZzZFdVdWRtRnNkV1ZQWmlncElEb2dkbUZzZFdVN1hHNGdJQ0FnZG1Gc2RXVWdQU0JwYzA5aWFtVmpkQ2h2ZEdobGNpa2dQeUFvYjNSb1pYSWdLeUFuSnlrZ09pQnZkR2hsY2p0Y2JpQWdmVnh1SUNCcFppQW9kSGx3Wlc5bUlIWmhiSFZsSUNFOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ2NtVjBkWEp1SUhaaGJIVmxJRDA5UFNBd0lEOGdkbUZzZFdVZ09pQXJkbUZzZFdVN1hHNGdJSDFjYmlBZ2RtRnNkV1VnUFNCaVlYTmxWSEpwYlNoMllXeDFaU2s3WEc0Z0lIWmhjaUJwYzBKcGJtRnllU0E5SUhKbFNYTkNhVzVoY25rdWRHVnpkQ2gyWVd4MVpTazdYRzRnSUhKbGRIVnliaUFvYVhOQ2FXNWhjbmtnZkh3Z2NtVkpjMDlqZEdGc0xuUmxjM1FvZG1Gc2RXVXBLVnh1SUNBZ0lEOGdabkpsWlZCaGNuTmxTVzUwS0haaGJIVmxMbk5zYVdObEtESXBMQ0JwYzBKcGJtRnllU0EvSURJZ09pQTRLVnh1SUNBZ0lEb2dLSEpsU1hOQ1lXUklaWGd1ZEdWemRDaDJZV3gxWlNrZ1B5Qk9RVTRnT2lBcmRtRnNkV1VwTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSFJ2VG5WdFltVnlPMXh1SWl3aWRtRnlJSFJ2VG5WdFltVnlJRDBnY21WeGRXbHlaU2duTGk5MGIwNTFiV0psY2ljcE8xeHVYRzR2S2lvZ1ZYTmxaQ0JoY3lCeVpXWmxjbVZ1WTJWeklHWnZjaUIyWVhKcGIzVnpJR0JPZFcxaVpYSmdJR052Ym5OMFlXNTBjeTRnS2k5Y2JuWmhjaUJKVGtaSlRrbFVXU0E5SURFZ0x5QXdMRnh1SUNBZ0lFMUJXRjlKVGxSRlIwVlNJRDBnTVM0M09UYzJPVE14TXpRNE5qSXpNVFUzWlNzek1EZzdYRzVjYmk4cUtseHVJQ29nUTI5dWRtVnlkSE1nWUhaaGJIVmxZQ0IwYnlCaElHWnBibWwwWlNCdWRXMWlaWEl1WEc0Z0tseHVJQ29nUUhOMFlYUnBZMXh1SUNvZ1FHMWxiV0psY2s5bUlGOWNiaUFxSUVCemFXNWpaU0EwTGpFeUxqQmNiaUFxSUVCallYUmxaMjl5ZVNCTVlXNW5YRzRnS2lCQWNHRnlZVzBnZXlwOUlIWmhiSFZsSUZSb1pTQjJZV3gxWlNCMGJ5QmpiMjUyWlhKMExseHVJQ29nUUhKbGRIVnlibk1nZTI1MWJXSmxjbjBnVW1WMGRYSnVjeUIwYUdVZ1kyOXVkbVZ5ZEdWa0lHNTFiV0psY2k1Y2JpQXFJRUJsZUdGdGNHeGxYRzRnS2x4dUlDb2dYeTUwYjBacGJtbDBaU2d6TGpJcE8xeHVJQ29nTHk4Z1BUNGdNeTR5WEc0Z0tseHVJQ29nWHk1MGIwWnBibWwwWlNoT2RXMWlaWEl1VFVsT1gxWkJURlZGS1R0Y2JpQXFJQzh2SUQwK0lEVmxMVE15TkZ4dUlDcGNiaUFxSUY4dWRHOUdhVzVwZEdVb1NXNW1hVzVwZEhrcE8xeHVJQ29nTHk4Z1BUNGdNUzQzT1RjMk9UTXhNelE0TmpJek1UVTNaU3N6TURoY2JpQXFYRzRnS2lCZkxuUnZSbWx1YVhSbEtDY3pMakluS1R0Y2JpQXFJQzh2SUQwK0lETXVNbHh1SUNvdlhHNW1kVzVqZEdsdmJpQjBiMFpwYm1sMFpTaDJZV3gxWlNrZ2UxeHVJQ0JwWmlBb0lYWmhiSFZsS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFpoYkhWbElEMDlQU0F3SUQ4Z2RtRnNkV1VnT2lBd08xeHVJQ0I5WEc0Z0lIWmhiSFZsSUQwZ2RHOU9kVzFpWlhJb2RtRnNkV1VwTzF4dUlDQnBaaUFvZG1Gc2RXVWdQVDA5SUVsT1JrbE9TVlJaSUh4OElIWmhiSFZsSUQwOVBTQXRTVTVHU1U1SlZGa3BJSHRjYmlBZ0lDQjJZWElnYzJsbmJpQTlJQ2gyWVd4MVpTQThJREFnUHlBdE1TQTZJREVwTzF4dUlDQWdJSEpsZEhWeWJpQnphV2R1SUNvZ1RVRllYMGxPVkVWSFJWSTdYRzRnSUgxY2JpQWdjbVYwZFhKdUlIWmhiSFZsSUQwOVBTQjJZV3gxWlNBL0lIWmhiSFZsSURvZ01EdGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCMGIwWnBibWwwWlR0Y2JpSXNJblpoY2lCMGIwWnBibWwwWlNBOUlISmxjWFZwY21Vb0p5NHZkRzlHYVc1cGRHVW5LVHRjYmx4dUx5b3FYRzRnS2lCRGIyNTJaWEowY3lCZ2RtRnNkV1ZnSUhSdklHRnVJR2x1ZEdWblpYSXVYRzRnS2x4dUlDb2dLaXBPYjNSbE9pb3FJRlJvYVhNZ2JXVjBhRzlrSUdseklHeHZiM05sYkhrZ1ltRnpaV1FnYjI1Y2JpQXFJRnRnVkc5SmJuUmxaMlZ5WUYwb2FIUjBjRG92TDNkM2R5NWxZMjFoTFdsdWRHVnlibUYwYVc5dVlXd3ViM0puTDJWamJXRXRNall5THpjdU1DOGpjMlZqTFhSdmFXNTBaV2RsY2lrdVhHNGdLbHh1SUNvZ1FITjBZWFJwWTF4dUlDb2dRRzFsYldKbGNrOW1JRjljYmlBcUlFQnphVzVqWlNBMExqQXVNRnh1SUNvZ1FHTmhkR1ZuYjNKNUlFeGhibWRjYmlBcUlFQndZWEpoYlNCN0tuMGdkbUZzZFdVZ1ZHaGxJSFpoYkhWbElIUnZJR052Ym5abGNuUXVYRzRnS2lCQWNtVjBkWEp1Y3lCN2JuVnRZbVZ5ZlNCU1pYUjFjbTV6SUhSb1pTQmpiMjUyWlhKMFpXUWdhVzUwWldkbGNpNWNiaUFxSUVCbGVHRnRjR3hsWEc0Z0tseHVJQ29nWHk1MGIwbHVkR1ZuWlhJb015NHlLVHRjYmlBcUlDOHZJRDArSUROY2JpQXFYRzRnS2lCZkxuUnZTVzUwWldkbGNpaE9kVzFpWlhJdVRVbE9YMVpCVEZWRktUdGNiaUFxSUM4dklEMCtJREJjYmlBcVhHNGdLaUJmTG5SdlNXNTBaV2RsY2loSmJtWnBibWwwZVNrN1hHNGdLaUF2THlBOVBpQXhMamM1TnpZNU16RXpORGcyTWpNeE5UZGxLek13T0Z4dUlDcGNiaUFxSUY4dWRHOUpiblJsWjJWeUtDY3pMakluS1R0Y2JpQXFJQzh2SUQwK0lETmNiaUFxTDF4dVpuVnVZM1JwYjI0Z2RHOUpiblJsWjJWeUtIWmhiSFZsS1NCN1hHNGdJSFpoY2lCeVpYTjFiSFFnUFNCMGIwWnBibWwwWlNoMllXeDFaU2tzWEc0Z0lDQWdJQ0J5WlcxaGFXNWtaWElnUFNCeVpYTjFiSFFnSlNBeE8xeHVYRzRnSUhKbGRIVnliaUJ5WlhOMWJIUWdQVDA5SUhKbGMzVnNkQ0EvSUNoeVpXMWhhVzVrWlhJZ1B5QnlaWE4xYkhRZ0xTQnlaVzFoYVc1a1pYSWdPaUJ5WlhOMWJIUXBJRG9nTUR0Y2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0IwYjBsdWRHVm5aWEk3WEc0aUxDSjJZWElnWW1GelpWTmxkRVJoZEdFZ1BTQnlaWEYxYVhKbEtDY3VMMTlpWVhObFUyVjBSR0YwWVNjcExGeHVJQ0FnSUdOeVpXRjBaVUpwYm1RZ1BTQnlaWEYxYVhKbEtDY3VMMTlqY21WaGRHVkNhVzVrSnlrc1hHNGdJQ0FnWTNKbFlYUmxRM1Z5Y25rZ1BTQnlaWEYxYVhKbEtDY3VMMTlqY21WaGRHVkRkWEp5ZVNjcExGeHVJQ0FnSUdOeVpXRjBaVWg1WW5KcFpDQTlJSEpsY1hWcGNtVW9KeTR2WDJOeVpXRjBaVWg1WW5KcFpDY3BMRnh1SUNBZ0lHTnlaV0YwWlZCaGNuUnBZV3dnUFNCeVpYRjFhWEpsS0NjdUwxOWpjbVZoZEdWUVlYSjBhV0ZzSnlrc1hHNGdJQ0FnWjJWMFJHRjBZU0E5SUhKbGNYVnBjbVVvSnk0dlgyZGxkRVJoZEdFbktTeGNiaUFnSUNCdFpYSm5aVVJoZEdFZ1BTQnlaWEYxYVhKbEtDY3VMMTl0WlhKblpVUmhkR0VuS1N4Y2JpQWdJQ0J6WlhSRVlYUmhJRDBnY21WeGRXbHlaU2duTGk5ZmMyVjBSR0YwWVNjcExGeHVJQ0FnSUhObGRGZHlZWEJVYjFOMGNtbHVaeUE5SUhKbGNYVnBjbVVvSnk0dlgzTmxkRmR5WVhCVWIxTjBjbWx1WnljcExGeHVJQ0FnSUhSdlNXNTBaV2RsY2lBOUlISmxjWFZwY21Vb0p5NHZkRzlKYm5SbFoyVnlKeWs3WEc1Y2JpOHFLaUJGY25KdmNpQnRaWE56WVdkbElHTnZibk4wWVc1MGN5NGdLaTljYm5aaGNpQkdWVTVEWDBWU1VrOVNYMVJGV0ZRZ1BTQW5SWGh3WldOMFpXUWdZU0JtZFc1amRHbHZiaWM3WEc1Y2JpOHFLaUJWYzJWa0lIUnZJR052YlhCdmMyVWdZbWwwYldGemEzTWdabTl5SUdaMWJtTjBhVzl1SUcxbGRHRmtZWFJoTGlBcUwxeHVkbUZ5SUZkU1FWQmZRa2xPUkY5R1RFRkhJRDBnTVN4Y2JpQWdJQ0JYVWtGUVgwSkpUa1JmUzBWWlgwWk1RVWNnUFNBeUxGeHVJQ0FnSUZkU1FWQmZRMVZTVWxsZlJreEJSeUE5SURnc1hHNGdJQ0FnVjFKQlVGOURWVkpTV1Y5U1NVZElWRjlHVEVGSElEMGdNVFlzWEc0Z0lDQWdWMUpCVUY5UVFWSlVTVUZNWDBaTVFVY2dQU0F6TWl4Y2JpQWdJQ0JYVWtGUVgxQkJVbFJKUVV4ZlVrbEhTRlJmUmt4QlJ5QTlJRFkwTzF4dVhHNHZLaUJDZFdsc2RDMXBiaUJ0WlhSb2IyUWdjbVZtWlhKbGJtTmxjeUJtYjNJZ2RHaHZjMlVnZDJsMGFDQjBhR1VnYzJGdFpTQnVZVzFsSUdGeklHOTBhR1Z5SUdCc2IyUmhjMmhnSUcxbGRHaHZaSE11SUNvdlhHNTJZWElnYm1GMGFYWmxUV0Y0SUQwZ1RXRjBhQzV0WVhnN1hHNWNiaThxS2x4dUlDb2dRM0psWVhSbGN5QmhJR1oxYm1OMGFXOXVJSFJvWVhRZ1pXbDBhR1Z5SUdOMWNuSnBaWE1nYjNJZ2FXNTJiMnRsY3lCZ1puVnVZMkFnZDJsMGFDQnZjSFJwYjI1aGJGeHVJQ29nWUhSb2FYTmdJR0pwYm1ScGJtY2dZVzVrSUhCaGNuUnBZV3hzZVNCaGNIQnNhV1ZrSUdGeVozVnRaVzUwY3k1Y2JpQXFYRzRnS2lCQWNISnBkbUYwWlZ4dUlDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJueHpkSEpwYm1kOUlHWjFibU1nVkdobElHWjFibU4wYVc5dUlHOXlJRzFsZEdodlpDQnVZVzFsSUhSdklIZHlZWEF1WEc0Z0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ1ltbDBiV0Z6YXlCVWFHVWdZbWwwYldGemF5Qm1iR0ZuY3k1Y2JpQXFJQ0FnSURFZ0xTQmdYeTVpYVc1a1lGeHVJQ29nSUNBZ01pQXRJR0JmTG1KcGJtUkxaWGxnWEc0Z0tpQWdJQ0EwSUMwZ1lGOHVZM1Z5Y25sZ0lHOXlJR0JmTG1OMWNuSjVVbWxuYUhSZ0lHOW1JR0VnWW05MWJtUWdablZ1WTNScGIyNWNiaUFxSUNBZ0lEZ2dMU0JnWHk1amRYSnllV0JjYmlBcUlDQWdNVFlnTFNCZ1h5NWpkWEp5ZVZKcFoyaDBZRnh1SUNvZ0lDQXpNaUF0SUdCZkxuQmhjblJwWVd4Z1hHNGdLaUFnSURZMElDMGdZRjh1Y0dGeWRHbGhiRkpwWjJoMFlGeHVJQ29nSURFeU9DQXRJR0JmTG5KbFlYSm5ZRnh1SUNvZ0lESTFOaUF0SUdCZkxtRnllV0JjYmlBcUlDQTFNVElnTFNCZ1h5NW1iR2x3WUZ4dUlDb2dRSEJoY21GdElIc3FmU0JiZEdocGMwRnlaMTBnVkdobElHQjBhR2x6WUNCaWFXNWthVzVuSUc5bUlHQm1kVzVqWUM1Y2JpQXFJRUJ3WVhKaGJTQjdRWEp5WVhsOUlGdHdZWEowYVdGc2MxMGdWR2hsSUdGeVozVnRaVzUwY3lCMGJ5QmlaU0J3WVhKMGFXRnNiSGtnWVhCd2JHbGxaQzVjYmlBcUlFQndZWEpoYlNCN1FYSnlZWGw5SUZ0b2IyeGtaWEp6WFNCVWFHVWdZSEJoY25ScFlXeHpZQ0J3YkdGalpXaHZiR1JsY2lCcGJtUmxlR1Z6TGx4dUlDb2dRSEJoY21GdElIdEJjbkpoZVgwZ1cyRnlaMUJ2YzEwZ1ZHaGxJR0Z5WjNWdFpXNTBJSEJ2YzJsMGFXOXVjeUJ2WmlCMGFHVWdibVYzSUdaMWJtTjBhVzl1TGx4dUlDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlGdGhjbmxkSUZSb1pTQmhjbWwwZVNCallYQWdiMllnWUdaMWJtTmdMbHh1SUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUZ0aGNtbDBlVjBnVkdobElHRnlhWFI1SUc5bUlHQm1kVzVqWUM1Y2JpQXFJRUJ5WlhSMWNtNXpJSHRHZFc1amRHbHZibjBnVW1WMGRYSnVjeUIwYUdVZ2JtVjNJSGR5WVhCd1pXUWdablZ1WTNScGIyNHVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHTnlaV0YwWlZkeVlYQW9ablZ1WXl3Z1ltbDBiV0Z6YXl3Z2RHaHBjMEZ5Wnl3Z2NHRnlkR2xoYkhNc0lHaHZiR1JsY25Nc0lHRnlaMUJ2Y3l3Z1lYSjVMQ0JoY21sMGVTa2dlMXh1SUNCMllYSWdhWE5DYVc1a1MyVjVJRDBnWW1sMGJXRnpheUFtSUZkU1FWQmZRa2xPUkY5TFJWbGZSa3hCUnp0Y2JpQWdhV1lnS0NGcGMwSnBibVJMWlhrZ0ppWWdkSGx3Wlc5bUlHWjFibU1nSVQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9SbFZPUTE5RlVsSlBVbDlVUlZoVUtUdGNiaUFnZlZ4dUlDQjJZWElnYkdWdVozUm9JRDBnY0dGeWRHbGhiSE1nUHlCd1lYSjBhV0ZzY3k1c1pXNW5kR2dnT2lBd08xeHVJQ0JwWmlBb0lXeGxibWQwYUNrZ2UxeHVJQ0FnSUdKcGRHMWhjMnNnSmowZ2ZpaFhVa0ZRWDFCQlVsUkpRVXhmUmt4QlJ5QjhJRmRTUVZCZlVFRlNWRWxCVEY5U1NVZElWRjlHVEVGSEtUdGNiaUFnSUNCd1lYSjBhV0ZzY3lBOUlHaHZiR1JsY25NZ1BTQjFibVJsWm1sdVpXUTdYRzRnSUgxY2JpQWdZWEo1SUQwZ1lYSjVJRDA5UFNCMWJtUmxabWx1WldRZ1B5QmhjbmtnT2lCdVlYUnBkbVZOWVhnb2RHOUpiblJsWjJWeUtHRnllU2tzSURBcE8xeHVJQ0JoY21sMGVTQTlJR0Z5YVhSNUlEMDlQU0IxYm1SbFptbHVaV1FnUHlCaGNtbDBlU0E2SUhSdlNXNTBaV2RsY2loaGNtbDBlU2s3WEc0Z0lHeGxibWQwYUNBdFBTQm9iMnhrWlhKeklEOGdhRzlzWkdWeWN5NXNaVzVuZEdnZ09pQXdPMXh1WEc0Z0lHbG1JQ2hpYVhSdFlYTnJJQ1lnVjFKQlVGOVFRVkpVU1VGTVgxSkpSMGhVWDBaTVFVY3BJSHRjYmlBZ0lDQjJZWElnY0dGeWRHbGhiSE5TYVdkb2RDQTlJSEJoY25ScFlXeHpMRnh1SUNBZ0lDQWdJQ0JvYjJ4a1pYSnpVbWxuYUhRZ1BTQm9iMnhrWlhKek8xeHVYRzRnSUNBZ2NHRnlkR2xoYkhNZ1BTQm9iMnhrWlhKeklEMGdkVzVrWldacGJtVmtPMXh1SUNCOVhHNGdJSFpoY2lCa1lYUmhJRDBnYVhOQ2FXNWtTMlY1SUQ4Z2RXNWtaV1pwYm1Wa0lEb2daMlYwUkdGMFlTaG1kVzVqS1R0Y2JseHVJQ0IyWVhJZ2JtVjNSR0YwWVNBOUlGdGNiaUFnSUNCbWRXNWpMQ0JpYVhSdFlYTnJMQ0IwYUdselFYSm5MQ0J3WVhKMGFXRnNjeXdnYUc5c1pHVnljeXdnY0dGeWRHbGhiSE5TYVdkb2RDd2dhRzlzWkdWeWMxSnBaMmgwTEZ4dUlDQWdJR0Z5WjFCdmN5d2dZWEo1TENCaGNtbDBlVnh1SUNCZE8xeHVYRzRnSUdsbUlDaGtZWFJoS1NCN1hHNGdJQ0FnYldWeVoyVkVZWFJoS0c1bGQwUmhkR0VzSUdSaGRHRXBPMXh1SUNCOVhHNGdJR1oxYm1NZ1BTQnVaWGRFWVhSaFd6QmRPMXh1SUNCaWFYUnRZWE5ySUQwZ2JtVjNSR0YwWVZzeFhUdGNiaUFnZEdocGMwRnlaeUE5SUc1bGQwUmhkR0ZiTWwwN1hHNGdJSEJoY25ScFlXeHpJRDBnYm1WM1JHRjBZVnN6WFR0Y2JpQWdhRzlzWkdWeWN5QTlJRzVsZDBSaGRHRmJORjA3WEc0Z0lHRnlhWFI1SUQwZ2JtVjNSR0YwWVZzNVhTQTlJRzVsZDBSaGRHRmJPVjBnUFQwOUlIVnVaR1ZtYVc1bFpGeHVJQ0FnSUQ4Z0tHbHpRbWx1WkV0bGVTQS9JREFnT2lCbWRXNWpMbXhsYm1kMGFDbGNiaUFnSUNBNklHNWhkR2wyWlUxaGVDaHVaWGRFWVhSaFd6bGRJQzBnYkdWdVozUm9MQ0F3S1R0Y2JseHVJQ0JwWmlBb0lXRnlhWFI1SUNZbUlHSnBkRzFoYzJzZ0ppQW9WMUpCVUY5RFZWSlNXVjlHVEVGSElId2dWMUpCVUY5RFZWSlNXVjlTU1VkSVZGOUdURUZIS1NrZ2UxeHVJQ0FnSUdKcGRHMWhjMnNnSmowZ2ZpaFhVa0ZRWDBOVlVsSlpYMFpNUVVjZ2ZDQlhVa0ZRWDBOVlVsSlpYMUpKUjBoVVgwWk1RVWNwTzF4dUlDQjlYRzRnSUdsbUlDZ2hZbWwwYldGemF5QjhmQ0JpYVhSdFlYTnJJRDA5SUZkU1FWQmZRa2xPUkY5R1RFRkhLU0I3WEc0Z0lDQWdkbUZ5SUhKbGMzVnNkQ0E5SUdOeVpXRjBaVUpwYm1Rb1puVnVZeXdnWW1sMGJXRnpheXdnZEdocGMwRnlaeWs3WEc0Z0lIMGdaV3h6WlNCcFppQW9ZbWwwYldGemF5QTlQU0JYVWtGUVgwTlZVbEpaWDBaTVFVY2dmSHdnWW1sMGJXRnpheUE5UFNCWFVrRlFYME5WVWxKWlgxSkpSMGhVWDBaTVFVY3BJSHRjYmlBZ0lDQnlaWE4xYkhRZ1BTQmpjbVZoZEdWRGRYSnllU2htZFc1akxDQmlhWFJ0WVhOckxDQmhjbWwwZVNrN1hHNGdJSDBnWld4elpTQnBaaUFvS0dKcGRHMWhjMnNnUFQwZ1YxSkJVRjlRUVZKVVNVRk1YMFpNUVVjZ2ZId2dZbWwwYldGemF5QTlQU0FvVjFKQlVGOUNTVTVFWDBaTVFVY2dmQ0JYVWtGUVgxQkJVbFJKUVV4ZlJreEJSeWtwSUNZbUlDRm9iMnhrWlhKekxteGxibWQwYUNrZ2UxeHVJQ0FnSUhKbGMzVnNkQ0E5SUdOeVpXRjBaVkJoY25ScFlXd29ablZ1WXl3Z1ltbDBiV0Z6YXl3Z2RHaHBjMEZ5Wnl3Z2NHRnlkR2xoYkhNcE8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lISmxjM1ZzZENBOUlHTnlaV0YwWlVoNVluSnBaQzVoY0hCc2VTaDFibVJsWm1sdVpXUXNJRzVsZDBSaGRHRXBPMXh1SUNCOVhHNGdJSFpoY2lCelpYUjBaWElnUFNCa1lYUmhJRDhnWW1GelpWTmxkRVJoZEdFZ09pQnpaWFJFWVhSaE8xeHVJQ0J5WlhSMWNtNGdjMlYwVjNKaGNGUnZVM1J5YVc1bktITmxkSFJsY2loeVpYTjFiSFFzSUc1bGQwUmhkR0VwTENCbWRXNWpMQ0JpYVhSdFlYTnJLVHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmpjbVZoZEdWWGNtRndPMXh1SWl3aWRtRnlJR055WldGMFpWZHlZWEFnUFNCeVpYRjFhWEpsS0NjdUwxOWpjbVZoZEdWWGNtRndKeWs3WEc1Y2JpOHFLaUJWYzJWa0lIUnZJR052YlhCdmMyVWdZbWwwYldGemEzTWdabTl5SUdaMWJtTjBhVzl1SUcxbGRHRmtZWFJoTGlBcUwxeHVkbUZ5SUZkU1FWQmZRVkpaWDBaTVFVY2dQU0F4TWpnN1hHNWNiaThxS2x4dUlDb2dRM0psWVhSbGN5QmhJR1oxYm1OMGFXOXVJSFJvWVhRZ2FXNTJiMnRsY3lCZ1puVnVZMkFzSUhkcGRHZ2dkWEFnZEc4Z1lHNWdJR0Z5WjNWdFpXNTBjeXhjYmlBcUlHbG5ibTl5YVc1bklHRnVlU0JoWkdScGRHbHZibUZzSUdGeVozVnRaVzUwY3k1Y2JpQXFYRzRnS2lCQWMzUmhkR2xqWEc0Z0tpQkFiV1Z0WW1WeVQyWWdYMXh1SUNvZ1FITnBibU5sSURNdU1DNHdYRzRnS2lCQVkyRjBaV2R2Y25rZ1JuVnVZM1JwYjI1Y2JpQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJR1oxYm1NZ1ZHaGxJR1oxYm1OMGFXOXVJSFJ2SUdOaGNDQmhjbWQxYldWdWRITWdabTl5TGx4dUlDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlGdHVQV1oxYm1NdWJHVnVaM1JvWFNCVWFHVWdZWEpwZEhrZ1kyRndMbHh1SUNvZ1FIQmhjbUZ0TFNCN1QySnFaV04wZlNCYlozVmhjbVJkSUVWdVlXSnNaWE1nZFhObElHRnpJR0Z1SUdsMFpYSmhkR1ZsSUdadmNpQnRaWFJvYjJSeklHeHBhMlVnWUY4dWJXRndZQzVjYmlBcUlFQnlaWFIxY201eklIdEdkVzVqZEdsdmJuMGdVbVYwZFhKdWN5QjBhR1VnYm1WM0lHTmhjSEJsWkNCbWRXNWpkR2x2Ymk1Y2JpQXFJRUJsZUdGdGNHeGxYRzRnS2x4dUlDb2dYeTV0WVhBb1d5YzJKeXdnSnpnbkxDQW5NVEFuWFN3Z1h5NWhjbmtvY0dGeWMyVkpiblFzSURFcEtUdGNiaUFxSUM4dklEMCtJRnMyTENBNExDQXhNRjFjYmlBcUwxeHVablZ1WTNScGIyNGdZWEo1S0daMWJtTXNJRzRzSUdkMVlYSmtLU0I3WEc0Z0lHNGdQU0JuZFdGeVpDQS9JSFZ1WkdWbWFXNWxaQ0E2SUc0N1hHNGdJRzRnUFNBb1puVnVZeUFtSmlCdUlEMDlJRzUxYkd3cElEOGdablZ1WXk1c1pXNW5kR2dnT2lCdU8xeHVJQ0J5WlhSMWNtNGdZM0psWVhSbFYzSmhjQ2htZFc1akxDQlhVa0ZRWDBGU1dWOUdURUZITENCMWJtUmxabWx1WldRc0lIVnVaR1ZtYVc1bFpDd2dkVzVrWldacGJtVmtMQ0IxYm1SbFptbHVaV1FzSUc0cE8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdGeWVUdGNiaUlzSW5aaGNpQmpiM0I1VDJKcVpXTjBJRDBnY21WeGRXbHlaU2duTGk5ZlkyOXdlVTlpYW1WamRDY3BMRnh1SUNBZ0lHdGxlWE1nUFNCeVpYRjFhWEpsS0NjdUwydGxlWE1uS1R0Y2JseHVMeW9xWEc0Z0tpQlVhR1VnWW1GelpTQnBiWEJzWlcxbGJuUmhkR2x2YmlCdlppQmdYeTVoYzNOcFoyNWdJSGRwZEdodmRYUWdjM1Z3Y0c5eWRDQm1iM0lnYlhWc2RHbHdiR1VnYzI5MWNtTmxjMXh1SUNvZ2IzSWdZR04xYzNSdmJXbDZaWEpnSUdaMWJtTjBhVzl1Y3k1Y2JpQXFYRzRnS2lCQWNISnBkbUYwWlZ4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHOWlhbVZqZENCVWFHVWdaR1Z6ZEdsdVlYUnBiMjRnYjJKcVpXTjBMbHh1SUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUhOdmRYSmpaU0JVYUdVZ2MyOTFjbU5sSUc5aWFtVmpkQzVjYmlBcUlFQnlaWFIxY201eklIdFBZbXBsWTNSOUlGSmxkSFZ5Ym5NZ1lHOWlhbVZqZEdBdVhHNGdLaTljYm1aMWJtTjBhVzl1SUdKaGMyVkJjM05wWjI0b2IySnFaV04wTENCemIzVnlZMlVwSUh0Y2JpQWdjbVYwZFhKdUlHOWlhbVZqZENBbUppQmpiM0I1VDJKcVpXTjBLSE52ZFhKalpTd2dhMlY1Y3loemIzVnlZMlVwTENCdlltcGxZM1FwTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR0poYzJWQmMzTnBaMjQ3WEc0aUxDSjJZWElnWTI5d2VVOWlhbVZqZENBOUlISmxjWFZwY21Vb0p5NHZYMk52Y0hsUFltcGxZM1FuS1N4Y2JpQWdJQ0JyWlhselNXNGdQU0J5WlhGMWFYSmxLQ2N1TDJ0bGVYTkpiaWNwTzF4dVhHNHZLaXBjYmlBcUlGUm9aU0JpWVhObElHbHRjR3hsYldWdWRHRjBhVzl1SUc5bUlHQmZMbUZ6YzJsbmJrbHVZQ0IzYVhSb2IzVjBJSE4xY0hCdmNuUWdabTl5SUcxMWJIUnBjR3hsSUhOdmRYSmpaWE5jYmlBcUlHOXlJR0JqZFhOMGIyMXBlbVZ5WUNCbWRXNWpkR2x2Ym5NdVhHNGdLbHh1SUNvZ1FIQnlhWFpoZEdWY2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnZZbXBsWTNRZ1ZHaGxJR1JsYzNScGJtRjBhVzl1SUc5aWFtVmpkQzVjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCemIzVnlZMlVnVkdobElITnZkWEpqWlNCdlltcGxZM1F1WEc0Z0tpQkFjbVYwZFhKdWN5QjdUMkpxWldOMGZTQlNaWFIxY201eklHQnZZbXBsWTNSZ0xseHVJQ292WEc1bWRXNWpkR2x2YmlCaVlYTmxRWE56YVdkdVNXNG9iMkpxWldOMExDQnpiM1Z5WTJVcElIdGNiaUFnY21WMGRYSnVJRzlpYW1WamRDQW1KaUJqYjNCNVQySnFaV04wS0hOdmRYSmpaU3dnYTJWNWMwbHVLSE52ZFhKalpTa3NJRzlpYW1WamRDazdYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1ltRnpaVUZ6YzJsbmJrbHVPMXh1SWl3aWRtRnlJR052Y0hsUFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwxOWpiM0I1VDJKcVpXTjBKeWtzWEc0Z0lDQWdaMlYwVTNsdFltOXNjeUE5SUhKbGNYVnBjbVVvSnk0dlgyZGxkRk41YldKdmJITW5LVHRjYmx4dUx5b3FYRzRnS2lCRGIzQnBaWE1nYjNkdUlITjViV0p2YkhNZ2IyWWdZSE52ZFhKalpXQWdkRzhnWUc5aWFtVmpkR0F1WEc0Z0tseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCemIzVnlZMlVnVkdobElHOWlhbVZqZENCMGJ5QmpiM0I1SUhONWJXSnZiSE1nWm5KdmJTNWNiaUFxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0JiYjJKcVpXTjBQWHQ5WFNCVWFHVWdiMkpxWldOMElIUnZJR052Y0hrZ2MzbHRZbTlzY3lCMGJ5NWNiaUFxSUVCeVpYUjFjbTV6SUh0UFltcGxZM1I5SUZKbGRIVnlibk1nWUc5aWFtVmpkR0F1WEc0Z0tpOWNibVoxYm1OMGFXOXVJR052Y0hsVGVXMWliMnh6S0hOdmRYSmpaU3dnYjJKcVpXTjBLU0I3WEc0Z0lISmxkSFZ5YmlCamIzQjVUMkpxWldOMEtITnZkWEpqWlN3Z1oyVjBVM2x0WW05c2N5aHpiM1Z5WTJVcExDQnZZbXBsWTNRcE8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdOdmNIbFRlVzFpYjJ4ek8xeHVJaXdpZG1GeUlHRnljbUY1VUhWemFDQTlJSEpsY1hWcGNtVW9KeTR2WDJGeWNtRjVVSFZ6YUNjcExGeHVJQ0FnSUdkbGRGQnliM1J2ZEhsd1pTQTlJSEpsY1hWcGNtVW9KeTR2WDJkbGRGQnliM1J2ZEhsd1pTY3BMRnh1SUNBZ0lHZGxkRk41YldKdmJITWdQU0J5WlhGMWFYSmxLQ2N1TDE5blpYUlRlVzFpYjJ4ekp5a3NYRzRnSUNBZ2MzUjFZa0Z5Y21GNUlEMGdjbVZ4ZFdseVpTZ25MaTl6ZEhWaVFYSnlZWGtuS1R0Y2JseHVMeW9nUW5WcGJIUXRhVzRnYldWMGFHOWtJSEpsWm1WeVpXNWpaWE1nWm05eUlIUm9iM05sSUhkcGRHZ2dkR2hsSUhOaGJXVWdibUZ0WlNCaGN5QnZkR2hsY2lCZ2JHOWtZWE5vWUNCdFpYUm9iMlJ6TGlBcUwxeHVkbUZ5SUc1aGRHbDJaVWRsZEZONWJXSnZiSE1nUFNCUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbFRlVzFpYjJ4ek8xeHVYRzR2S2lwY2JpQXFJRU55WldGMFpYTWdZVzRnWVhKeVlYa2diMllnZEdobElHOTNiaUJoYm1RZ2FXNW9aWEpwZEdWa0lHVnVkVzFsY21GaWJHVWdjM2x0WW05c2N5QnZaaUJnYjJKcVpXTjBZQzVjYmlBcVhHNGdLaUJBY0hKcGRtRjBaVnh1SUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUc5aWFtVmpkQ0JVYUdVZ2IySnFaV04wSUhSdklIRjFaWEo1TGx4dUlDb2dRSEpsZEhWeWJuTWdlMEZ5Y21GNWZTQlNaWFIxY201eklIUm9aU0JoY25KaGVTQnZaaUJ6ZVcxaWIyeHpMbHh1SUNvdlhHNTJZWElnWjJWMFUzbHRZbTlzYzBsdUlEMGdJVzVoZEdsMlpVZGxkRk41YldKdmJITWdQeUJ6ZEhWaVFYSnlZWGtnT2lCbWRXNWpkR2x2YmlodlltcGxZM1FwSUh0Y2JpQWdkbUZ5SUhKbGMzVnNkQ0E5SUZ0ZE8xeHVJQ0IzYUdsc1pTQW9iMkpxWldOMEtTQjdYRzRnSUNBZ1lYSnlZWGxRZFhOb0tISmxjM1ZzZEN3Z1oyVjBVM2x0WW05c2N5aHZZbXBsWTNRcEtUdGNiaUFnSUNCdlltcGxZM1FnUFNCblpYUlFjbTkwYjNSNWNHVW9iMkpxWldOMEtUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z2NtVnpkV3gwTzF4dWZUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JuWlhSVGVXMWliMnh6U1c0N1hHNGlMQ0oyWVhJZ1kyOXdlVTlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR2WDJOdmNIbFBZbXBsWTNRbktTeGNiaUFnSUNCblpYUlRlVzFpYjJ4elNXNGdQU0J5WlhGMWFYSmxLQ2N1TDE5blpYUlRlVzFpYjJ4elNXNG5LVHRjYmx4dUx5b3FYRzRnS2lCRGIzQnBaWE1nYjNkdUlHRnVaQ0JwYm1obGNtbDBaV1FnYzNsdFltOXNjeUJ2WmlCZ2MyOTFjbU5sWUNCMGJ5QmdiMkpxWldOMFlDNWNiaUFxWEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJSE52ZFhKalpTQlVhR1VnYjJKcVpXTjBJSFJ2SUdOdmNIa2djM2x0WW05c2N5Qm1jbTl0TGx4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlGdHZZbXBsWTNROWUzMWRJRlJvWlNCdlltcGxZM1FnZEc4Z1kyOXdlU0J6ZVcxaWIyeHpJSFJ2TGx4dUlDb2dRSEpsZEhWeWJuTWdlMDlpYW1WamRIMGdVbVYwZFhKdWN5QmdiMkpxWldOMFlDNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1kyOXdlVk41YldKdmJITkpiaWh6YjNWeVkyVXNJRzlpYW1WamRDa2dlMXh1SUNCeVpYUjFjbTRnWTI5d2VVOWlhbVZqZENoemIzVnlZMlVzSUdkbGRGTjViV0p2YkhOSmJpaHpiM1Z5WTJVcExDQnZZbXBsWTNRcE8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdOdmNIbFRlVzFpYjJ4elNXNDdYRzRpTENKMllYSWdZbUZ6WlVkbGRFRnNiRXRsZVhNZ1BTQnlaWEYxYVhKbEtDY3VMMTlpWVhObFIyVjBRV3hzUzJWNWN5Y3BMRnh1SUNBZ0lHZGxkRk41YldKdmJITkpiaUE5SUhKbGNYVnBjbVVvSnk0dlgyZGxkRk41YldKdmJITkpiaWNwTEZ4dUlDQWdJR3RsZVhOSmJpQTlJSEpsY1hWcGNtVW9KeTR2YTJWNWMwbHVKeWs3WEc1Y2JpOHFLbHh1SUNvZ1EzSmxZWFJsY3lCaGJpQmhjbkpoZVNCdlppQnZkMjRnWVc1a0lHbHVhR1Z5YVhSbFpDQmxiblZ0WlhKaFlteGxJSEJ5YjNCbGNuUjVJRzVoYldWeklHRnVaRnh1SUNvZ2MzbHRZbTlzY3lCdlppQmdiMkpxWldOMFlDNWNiaUFxWEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzlpYW1WamRDQlVhR1VnYjJKcVpXTjBJSFJ2SUhGMVpYSjVMbHh1SUNvZ1FISmxkSFZ5Ym5NZ2UwRnljbUY1ZlNCU1pYUjFjbTV6SUhSb1pTQmhjbkpoZVNCdlppQndjbTl3WlhKMGVTQnVZVzFsY3lCaGJtUWdjM2x0WW05c2N5NWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1oyVjBRV3hzUzJWNWMwbHVLRzlpYW1WamRDa2dlMXh1SUNCeVpYUjFjbTRnWW1GelpVZGxkRUZzYkV0bGVYTW9iMkpxWldOMExDQnJaWGx6U1c0c0lHZGxkRk41YldKdmJITkpiaWs3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdaMlYwUVd4c1MyVjVjMGx1TzF4dUlpd2lMeW9xSUZWelpXUWdabTl5SUdKMWFXeDBMV2x1SUcxbGRHaHZaQ0J5WldabGNtVnVZMlZ6TGlBcUwxeHVkbUZ5SUc5aWFtVmpkRkJ5YjNSdklEMGdUMkpxWldOMExuQnliM1J2ZEhsd1pUdGNibHh1THlvcUlGVnpaV1FnZEc4Z1kyaGxZMnNnYjJKcVpXTjBjeUJtYjNJZ2IzZHVJSEJ5YjNCbGNuUnBaWE11SUNvdlhHNTJZWElnYUdGelQzZHVVSEp2Y0dWeWRIa2dQU0J2WW1wbFkzUlFjbTkwYnk1b1lYTlBkMjVRY205d1pYSjBlVHRjYmx4dUx5b3FYRzRnS2lCSmJtbDBhV0ZzYVhwbGN5QmhiaUJoY25KaGVTQmpiRzl1WlM1Y2JpQXFYRzRnS2lCQWNISnBkbUYwWlZ4dUlDb2dRSEJoY21GdElIdEJjbkpoZVgwZ1lYSnlZWGtnVkdobElHRnljbUY1SUhSdklHTnNiMjVsTGx4dUlDb2dRSEpsZEhWeWJuTWdlMEZ5Y21GNWZTQlNaWFIxY201eklIUm9aU0JwYm1sMGFXRnNhWHBsWkNCamJHOXVaUzVjYmlBcUwxeHVablZ1WTNScGIyNGdhVzVwZEVOc2IyNWxRWEp5WVhrb1lYSnlZWGtwSUh0Y2JpQWdkbUZ5SUd4bGJtZDBhQ0E5SUdGeWNtRjVMbXhsYm1kMGFDeGNiaUFnSUNBZ0lISmxjM1ZzZENBOUlHNWxkeUJoY25KaGVTNWpiMjV6ZEhKMVkzUnZjaWhzWlc1bmRHZ3BPMXh1WEc0Z0lDOHZJRUZrWkNCd2NtOXdaWEowYVdWeklHRnpjMmxuYm1Wa0lHSjVJR0JTWldkRmVIQWpaWGhsWTJBdVhHNGdJR2xtSUNoc1pXNW5kR2dnSmlZZ2RIbHdaVzltSUdGeWNtRjVXekJkSUQwOUlDZHpkSEpwYm1jbklDWW1JR2hoYzA5M2JsQnliM0JsY25SNUxtTmhiR3dvWVhKeVlYa3NJQ2RwYm1SbGVDY3BLU0I3WEc0Z0lDQWdjbVZ6ZFd4MExtbHVaR1Y0SUQwZ1lYSnlZWGt1YVc1a1pYZzdYRzRnSUNBZ2NtVnpkV3gwTG1sdWNIVjBJRDBnWVhKeVlYa3VhVzV3ZFhRN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnBibWwwUTJ4dmJtVkJjbkpoZVR0Y2JpSXNJblpoY2lCamJHOXVaVUZ5Y21GNVFuVm1abVZ5SUQwZ2NtVnhkV2x5WlNnbkxpOWZZMnh2Ym1WQmNuSmhlVUoxWm1abGNpY3BPMXh1WEc0dktpcGNiaUFxSUVOeVpXRjBaWE1nWVNCamJHOXVaU0J2WmlCZ1pHRjBZVlpwWlhkZ0xseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdaR0YwWVZacFpYY2dWR2hsSUdSaGRHRWdkbWxsZHlCMGJ5QmpiRzl1WlM1Y2JpQXFJRUJ3WVhKaGJTQjdZbTl2YkdWaGJuMGdXMmx6UkdWbGNGMGdVM0JsWTJsbWVTQmhJR1JsWlhBZ1kyeHZibVV1WEc0Z0tpQkFjbVYwZFhKdWN5QjdUMkpxWldOMGZTQlNaWFIxY201eklIUm9aU0JqYkc5dVpXUWdaR0YwWVNCMmFXVjNMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQmpiRzl1WlVSaGRHRldhV1YzS0dSaGRHRldhV1YzTENCcGMwUmxaWEFwSUh0Y2JpQWdkbUZ5SUdKMVptWmxjaUE5SUdselJHVmxjQ0EvSUdOc2IyNWxRWEp5WVhsQ2RXWm1aWElvWkdGMFlWWnBaWGN1WW5WbVptVnlLU0E2SUdSaGRHRldhV1YzTG1KMVptWmxjanRjYmlBZ2NtVjBkWEp1SUc1bGR5QmtZWFJoVm1sbGR5NWpiMjV6ZEhKMVkzUnZjaWhpZFdabVpYSXNJR1JoZEdGV2FXVjNMbUo1ZEdWUFptWnpaWFFzSUdSaGRHRldhV1YzTG1KNWRHVk1aVzVuZEdncE8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdOc2IyNWxSR0YwWVZacFpYYzdYRzRpTENJdktpb2dWWE5sWkNCMGJ5QnRZWFJqYUNCZ1VtVm5SWGh3WUNCbWJHRm5jeUJtY205dElIUm9aV2x5SUdOdlpYSmpaV1FnYzNSeWFXNW5JSFpoYkhWbGN5NGdLaTljYm5aaGNpQnlaVVpzWVdkeklEMGdMMXhjZHlva0x6dGNibHh1THlvcVhHNGdLaUJEY21WaGRHVnpJR0VnWTJ4dmJtVWdiMllnWUhKbFoyVjRjR0F1WEc0Z0tseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCeVpXZGxlSEFnVkdobElISmxaMlY0Y0NCMGJ5QmpiRzl1WlM1Y2JpQXFJRUJ5WlhSMWNtNXpJSHRQWW1wbFkzUjlJRkpsZEhWeWJuTWdkR2hsSUdOc2IyNWxaQ0J5WldkbGVIQXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHTnNiMjVsVW1WblJYaHdLSEpsWjJWNGNDa2dlMXh1SUNCMllYSWdjbVZ6ZFd4MElEMGdibVYzSUhKbFoyVjRjQzVqYjI1emRISjFZM1J2Y2loeVpXZGxlSEF1YzI5MWNtTmxMQ0J5WlVac1lXZHpMbVY0WldNb2NtVm5aWGh3S1NrN1hHNGdJSEpsYzNWc2RDNXNZWE4wU1c1a1pYZ2dQU0J5WldkbGVIQXViR0Z6ZEVsdVpHVjRPMXh1SUNCeVpYUjFjbTRnY21WemRXeDBPMXh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHTnNiMjVsVW1WblJYaHdPMXh1SWl3aWRtRnlJRk41YldKdmJDQTlJSEpsY1hWcGNtVW9KeTR2WDFONWJXSnZiQ2NwTzF4dVhHNHZLaW9nVlhObFpDQjBieUJqYjI1MlpYSjBJSE41YldKdmJITWdkRzhnY0hKcGJXbDBhWFpsY3lCaGJtUWdjM1J5YVc1bmN5NGdLaTljYm5aaGNpQnplVzFpYjJ4UWNtOTBieUE5SUZONWJXSnZiQ0EvSUZONWJXSnZiQzV3Y205MGIzUjVjR1VnT2lCMWJtUmxabWx1WldRc1hHNGdJQ0FnYzNsdFltOXNWbUZzZFdWUFppQTlJSE41YldKdmJGQnliM1J2SUQ4Z2MzbHRZbTlzVUhKdmRHOHVkbUZzZFdWUFppQTZJSFZ1WkdWbWFXNWxaRHRjYmx4dUx5b3FYRzRnS2lCRGNtVmhkR1Z6SUdFZ1kyeHZibVVnYjJZZ2RHaGxJR0J6ZVcxaWIyeGdJRzlpYW1WamRDNWNiaUFxWEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJSE41YldKdmJDQlVhR1VnYzNsdFltOXNJRzlpYW1WamRDQjBieUJqYkc5dVpTNWNiaUFxSUVCeVpYUjFjbTV6SUh0UFltcGxZM1I5SUZKbGRIVnlibk1nZEdobElHTnNiMjVsWkNCemVXMWliMndnYjJKcVpXTjBMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQmpiRzl1WlZONWJXSnZiQ2h6ZVcxaWIyd3BJSHRjYmlBZ2NtVjBkWEp1SUhONWJXSnZiRlpoYkhWbFQyWWdQeUJQWW1wbFkzUW9jM2x0WW05c1ZtRnNkV1ZQWmk1allXeHNLSE41YldKdmJDa3BJRG9nZTMwN1hHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWTJ4dmJtVlRlVzFpYjJ3N1hHNGlMQ0oyWVhJZ1kyeHZibVZCY25KaGVVSjFabVpsY2lBOUlISmxjWFZwY21Vb0p5NHZYMk5zYjI1bFFYSnlZWGxDZFdabVpYSW5LU3hjYmlBZ0lDQmpiRzl1WlVSaGRHRldhV1YzSUQwZ2NtVnhkV2x5WlNnbkxpOWZZMnh2Ym1WRVlYUmhWbWxsZHljcExGeHVJQ0FnSUdOc2IyNWxVbVZuUlhod0lEMGdjbVZ4ZFdseVpTZ25MaTlmWTJ4dmJtVlNaV2RGZUhBbktTeGNiaUFnSUNCamJHOXVaVk41YldKdmJDQTlJSEpsY1hWcGNtVW9KeTR2WDJOc2IyNWxVM2x0WW05c0p5a3NYRzRnSUNBZ1kyeHZibVZVZVhCbFpFRnljbUY1SUQwZ2NtVnhkV2x5WlNnbkxpOWZZMnh2Ym1WVWVYQmxaRUZ5Y21GNUp5azdYRzVjYmk4cUtpQmdUMkpxWldOMEkzUnZVM1J5YVc1bllDQnlaWE4xYkhRZ2NtVm1aWEpsYm1ObGN5NGdLaTljYm5aaGNpQmliMjlzVkdGbklEMGdKMXR2WW1wbFkzUWdRbTl2YkdWaGJsMG5MRnh1SUNBZ0lHUmhkR1ZVWVdjZ1BTQW5XMjlpYW1WamRDQkVZWFJsWFNjc1hHNGdJQ0FnYldGd1ZHRm5JRDBnSjF0dlltcGxZM1FnVFdGd1hTY3NYRzRnSUNBZ2JuVnRZbVZ5VkdGbklEMGdKMXR2WW1wbFkzUWdUblZ0WW1WeVhTY3NYRzRnSUNBZ2NtVm5aWGh3VkdGbklEMGdKMXR2WW1wbFkzUWdVbVZuUlhod1hTY3NYRzRnSUNBZ2MyVjBWR0ZuSUQwZ0oxdHZZbXBsWTNRZ1UyVjBYU2NzWEc0Z0lDQWdjM1J5YVc1blZHRm5JRDBnSjF0dlltcGxZM1FnVTNSeWFXNW5YU2NzWEc0Z0lDQWdjM2x0WW05c1ZHRm5JRDBnSjF0dlltcGxZM1FnVTNsdFltOXNYU2M3WEc1Y2JuWmhjaUJoY25KaGVVSjFabVpsY2xSaFp5QTlJQ2RiYjJKcVpXTjBJRUZ5Y21GNVFuVm1abVZ5WFNjc1hHNGdJQ0FnWkdGMFlWWnBaWGRVWVdjZ1BTQW5XMjlpYW1WamRDQkVZWFJoVm1sbGQxMG5MRnh1SUNBZ0lHWnNiMkYwTXpKVVlXY2dQU0FuVzI5aWFtVmpkQ0JHYkc5aGRETXlRWEp5WVhsZEp5eGNiaUFnSUNCbWJHOWhkRFkwVkdGbklEMGdKMXR2WW1wbFkzUWdSbXh2WVhRMk5FRnljbUY1WFNjc1hHNGdJQ0FnYVc1ME9GUmhaeUE5SUNkYmIySnFaV04wSUVsdWREaEJjbkpoZVYwbkxGeHVJQ0FnSUdsdWRERTJWR0ZuSUQwZ0oxdHZZbXBsWTNRZ1NXNTBNVFpCY25KaGVWMG5MRnh1SUNBZ0lHbHVkRE15VkdGbklEMGdKMXR2WW1wbFkzUWdTVzUwTXpKQmNuSmhlVjBuTEZ4dUlDQWdJSFZwYm5RNFZHRm5JRDBnSjF0dlltcGxZM1FnVldsdWREaEJjbkpoZVYwbkxGeHVJQ0FnSUhWcGJuUTRRMnhoYlhCbFpGUmhaeUE5SUNkYmIySnFaV04wSUZWcGJuUTRRMnhoYlhCbFpFRnljbUY1WFNjc1hHNGdJQ0FnZFdsdWRERTJWR0ZuSUQwZ0oxdHZZbXBsWTNRZ1ZXbHVkREUyUVhKeVlYbGRKeXhjYmlBZ0lDQjFhVzUwTXpKVVlXY2dQU0FuVzI5aWFtVmpkQ0JWYVc1ME16SkJjbkpoZVYwbk8xeHVYRzR2S2lwY2JpQXFJRWx1YVhScFlXeHBlbVZ6SUdGdUlHOWlhbVZqZENCamJHOXVaU0JpWVhObFpDQnZiaUJwZEhNZ1lIUnZVM1J5YVc1blZHRm5ZQzVjYmlBcVhHNGdLaUFxS2s1dmRHVTZLaW9nVkdocGN5Qm1kVzVqZEdsdmJpQnZibXg1SUhOMWNIQnZjblJ6SUdOc2IyNXBibWNnZG1Gc2RXVnpJSGRwZEdnZ2RHRm5jeUJ2Wmx4dUlDb2dZRUp2YjJ4bFlXNWdMQ0JnUkdGMFpXQXNJR0JGY25KdmNtQXNJR0JOWVhCZ0xDQmdUblZ0WW1WeVlDd2dZRkpsWjBWNGNHQXNJR0JUWlhSZ0xDQnZjaUJnVTNSeWFXNW5ZQzVjYmlBcVhHNGdLaUJBY0hKcGRtRjBaVnh1SUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUc5aWFtVmpkQ0JVYUdVZ2IySnFaV04wSUhSdklHTnNiMjVsTGx4dUlDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIUmhaeUJVYUdVZ1lIUnZVM1J5YVc1blZHRm5ZQ0J2WmlCMGFHVWdiMkpxWldOMElIUnZJR05zYjI1bExseHVJQ29nUUhCaGNtRnRJSHRpYjI5c1pXRnVmU0JiYVhORVpXVndYU0JUY0dWamFXWjVJR0VnWkdWbGNDQmpiRzl1WlM1Y2JpQXFJRUJ5WlhSMWNtNXpJSHRQWW1wbFkzUjlJRkpsZEhWeWJuTWdkR2hsSUdsdWFYUnBZV3hwZW1Wa0lHTnNiMjVsTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJwYm1sMFEyeHZibVZDZVZSaFp5aHZZbXBsWTNRc0lIUmhaeXdnYVhORVpXVndLU0I3WEc0Z0lIWmhjaUJEZEc5eUlEMGdiMkpxWldOMExtTnZibk4wY25WamRHOXlPMXh1SUNCemQybDBZMmdnS0hSaFp5a2dlMXh1SUNBZ0lHTmhjMlVnWVhKeVlYbENkV1ptWlhKVVlXYzZYRzRnSUNBZ0lDQnlaWFIxY200Z1kyeHZibVZCY25KaGVVSjFabVpsY2lodlltcGxZM1FwTzF4dVhHNGdJQ0FnWTJGelpTQmliMjlzVkdGbk9seHVJQ0FnSUdOaGMyVWdaR0YwWlZSaFp6cGNiaUFnSUNBZ0lISmxkSFZ5YmlCdVpYY2dRM1J2Y2lncmIySnFaV04wS1R0Y2JseHVJQ0FnSUdOaGMyVWdaR0YwWVZacFpYZFVZV2M2WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZMnh2Ym1WRVlYUmhWbWxsZHlodlltcGxZM1FzSUdselJHVmxjQ2s3WEc1Y2JpQWdJQ0JqWVhObElHWnNiMkYwTXpKVVlXYzZJR05oYzJVZ1pteHZZWFEyTkZSaFp6cGNiaUFnSUNCallYTmxJR2x1ZERoVVlXYzZJR05oYzJVZ2FXNTBNVFpVWVdjNklHTmhjMlVnYVc1ME16SlVZV2M2WEc0Z0lDQWdZMkZ6WlNCMWFXNTBPRlJoWnpvZ1kyRnpaU0IxYVc1ME9FTnNZVzF3WldSVVlXYzZJR05oYzJVZ2RXbHVkREUyVkdGbk9pQmpZWE5sSUhWcGJuUXpNbFJoWnpwY2JpQWdJQ0FnSUhKbGRIVnliaUJqYkc5dVpWUjVjR1ZrUVhKeVlYa29iMkpxWldOMExDQnBjMFJsWlhBcE8xeHVYRzRnSUNBZ1kyRnpaU0J0WVhCVVlXYzZYRzRnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRU4wYjNJN1hHNWNiaUFnSUNCallYTmxJRzUxYldKbGNsUmhaenBjYmlBZ0lDQmpZWE5sSUhOMGNtbHVaMVJoWnpwY2JpQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1EzUnZjaWh2WW1wbFkzUXBPMXh1WEc0Z0lDQWdZMkZ6WlNCeVpXZGxlSEJVWVdjNlhHNGdJQ0FnSUNCeVpYUjFjbTRnWTJ4dmJtVlNaV2RGZUhBb2IySnFaV04wS1R0Y2JseHVJQ0FnSUdOaGMyVWdjMlYwVkdGbk9seHVJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QkRkRzl5TzF4dVhHNGdJQ0FnWTJGelpTQnplVzFpYjJ4VVlXYzZYRzRnSUNBZ0lDQnlaWFIxY200Z1kyeHZibVZUZVcxaWIyd29iMkpxWldOMEtUdGNiaUFnZlZ4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR2x1YVhSRGJHOXVaVUo1VkdGbk8xeHVJaXdpZG1GeUlHZGxkRlJoWnlBOUlISmxjWFZwY21Vb0p5NHZYMmRsZEZSaFp5Y3BMRnh1SUNBZ0lHbHpUMkpxWldOMFRHbHJaU0E5SUhKbGNYVnBjbVVvSnk0dmFYTlBZbXBsWTNSTWFXdGxKeWs3WEc1Y2JpOHFLaUJnVDJKcVpXTjBJM1J2VTNSeWFXNW5ZQ0J5WlhOMWJIUWdjbVZtWlhKbGJtTmxjeTRnS2k5Y2JuWmhjaUJ0WVhCVVlXY2dQU0FuVzI5aWFtVmpkQ0JOWVhCZEp6dGNibHh1THlvcVhHNGdLaUJVYUdVZ1ltRnpaU0JwYlhCc1pXMWxiblJoZEdsdmJpQnZaaUJnWHk1cGMwMWhjR0FnZDJsMGFHOTFkQ0JPYjJSbExtcHpJRzl3ZEdsdGFYcGhkR2x2Ym5NdVhHNGdLbHh1SUNvZ1FIQnlhWFpoZEdWY2JpQXFJRUJ3WVhKaGJTQjdLbjBnZG1Gc2RXVWdWR2hsSUhaaGJIVmxJSFJ2SUdOb1pXTnJMbHh1SUNvZ1FISmxkSFZ5Ym5NZ2UySnZiMnhsWVc1OUlGSmxkSFZ5Ym5NZ1lIUnlkV1ZnSUdsbUlHQjJZV3gxWldBZ2FYTWdZU0J0WVhBc0lHVnNjMlVnWUdaaGJITmxZQzVjYmlBcUwxeHVablZ1WTNScGIyNGdZbUZ6WlVselRXRndLSFpoYkhWbEtTQjdYRzRnSUhKbGRIVnliaUJwYzA5aWFtVmpkRXhwYTJVb2RtRnNkV1VwSUNZbUlHZGxkRlJoWnloMllXeDFaU2tnUFQwZ2JXRndWR0ZuTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR0poYzJWSmMwMWhjRHRjYmlJc0luWmhjaUJpWVhObFNYTk5ZWEFnUFNCeVpYRjFhWEpsS0NjdUwxOWlZWE5sU1hOTllYQW5LU3hjYmlBZ0lDQmlZWE5sVlc1aGNua2dQU0J5WlhGMWFYSmxLQ2N1TDE5aVlYTmxWVzVoY25rbktTeGNiaUFnSUNCdWIyUmxWWFJwYkNBOUlISmxjWFZwY21Vb0p5NHZYMjV2WkdWVmRHbHNKeWs3WEc1Y2JpOHFJRTV2WkdVdWFuTWdhR1ZzY0dWeUlISmxabVZ5Wlc1alpYTXVJQ292WEc1MllYSWdibTlrWlVselRXRndJRDBnYm05a1pWVjBhV3dnSmlZZ2JtOWtaVlYwYVd3dWFYTk5ZWEE3WEc1Y2JpOHFLbHh1SUNvZ1EyaGxZMnR6SUdsbUlHQjJZV3gxWldBZ2FYTWdZMnhoYzNOcFptbGxaQ0JoY3lCaElHQk5ZWEJnSUc5aWFtVmpkQzVjYmlBcVhHNGdLaUJBYzNSaGRHbGpYRzRnS2lCQWJXVnRZbVZ5VDJZZ1gxeHVJQ29nUUhOcGJtTmxJRFF1TXk0d1hHNGdLaUJBWTJGMFpXZHZjbmtnVEdGdVoxeHVJQ29nUUhCaGNtRnRJSHNxZlNCMllXeDFaU0JVYUdVZ2RtRnNkV1VnZEc4Z1kyaGxZMnN1WEc0Z0tpQkFjbVYwZFhKdWN5QjdZbTl2YkdWaGJuMGdVbVYwZFhKdWN5QmdkSEoxWldBZ2FXWWdZSFpoYkhWbFlDQnBjeUJoSUcxaGNDd2daV3h6WlNCZ1ptRnNjMlZnTGx4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxWEc0Z0tpQmZMbWx6VFdGd0tHNWxkeUJOWVhBcE8xeHVJQ29nTHk4Z1BUNGdkSEoxWlZ4dUlDcGNiaUFxSUY4dWFYTk5ZWEFvYm1WM0lGZGxZV3ROWVhBcE8xeHVJQ29nTHk4Z1BUNGdabUZzYzJWY2JpQXFMMXh1ZG1GeUlHbHpUV0Z3SUQwZ2JtOWtaVWx6VFdGd0lEOGdZbUZ6WlZWdVlYSjVLRzV2WkdWSmMwMWhjQ2tnT2lCaVlYTmxTWE5OWVhBN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdhWE5OWVhBN1hHNGlMQ0oyWVhJZ1oyVjBWR0ZuSUQwZ2NtVnhkV2x5WlNnbkxpOWZaMlYwVkdGbkp5a3NYRzRnSUNBZ2FYTlBZbXBsWTNSTWFXdGxJRDBnY21WeGRXbHlaU2duTGk5cGMwOWlhbVZqZEV4cGEyVW5LVHRjYmx4dUx5b3FJR0JQWW1wbFkzUWpkRzlUZEhKcGJtZGdJSEpsYzNWc2RDQnlaV1psY21WdVkyVnpMaUFxTDF4dWRtRnlJSE5sZEZSaFp5QTlJQ2RiYjJKcVpXTjBJRk5sZEYwbk8xeHVYRzR2S2lwY2JpQXFJRlJvWlNCaVlYTmxJR2x0Y0d4bGJXVnVkR0YwYVc5dUlHOW1JR0JmTG1selUyVjBZQ0IzYVhSb2IzVjBJRTV2WkdVdWFuTWdiM0IwYVcxcGVtRjBhVzl1Y3k1Y2JpQXFYRzRnS2lCQWNISnBkbUYwWlZ4dUlDb2dRSEJoY21GdElIc3FmU0IyWVd4MVpTQlVhR1VnZG1Gc2RXVWdkRzhnWTJobFkyc3VYRzRnS2lCQWNtVjBkWEp1Y3lCN1ltOXZiR1ZoYm4wZ1VtVjBkWEp1Y3lCZ2RISjFaV0FnYVdZZ1lIWmhiSFZsWUNCcGN5QmhJSE5sZEN3Z1pXeHpaU0JnWm1Gc2MyVmdMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQmlZWE5sU1hOVFpYUW9kbUZzZFdVcElIdGNiaUFnY21WMGRYSnVJR2x6VDJKcVpXTjBUR2xyWlNoMllXeDFaU2tnSmlZZ1oyVjBWR0ZuS0haaGJIVmxLU0E5UFNCelpYUlVZV2M3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdZbUZ6WlVselUyVjBPMXh1SWl3aWRtRnlJR0poYzJWSmMxTmxkQ0E5SUhKbGNYVnBjbVVvSnk0dlgySmhjMlZKYzFObGRDY3BMRnh1SUNBZ0lHSmhjMlZWYm1GeWVTQTlJSEpsY1hWcGNtVW9KeTR2WDJKaGMyVlZibUZ5ZVNjcExGeHVJQ0FnSUc1dlpHVlZkR2xzSUQwZ2NtVnhkV2x5WlNnbkxpOWZibTlrWlZWMGFXd25LVHRjYmx4dUx5b2dUbTlrWlM1cWN5Qm9aV3h3WlhJZ2NtVm1aWEpsYm1ObGN5NGdLaTljYm5aaGNpQnViMlJsU1hOVFpYUWdQU0J1YjJSbFZYUnBiQ0FtSmlCdWIyUmxWWFJwYkM1cGMxTmxkRHRjYmx4dUx5b3FYRzRnS2lCRGFHVmphM01nYVdZZ1lIWmhiSFZsWUNCcGN5QmpiR0Z6YzJsbWFXVmtJR0Z6SUdFZ1lGTmxkR0FnYjJKcVpXTjBMbHh1SUNwY2JpQXFJRUJ6ZEdGMGFXTmNiaUFxSUVCdFpXMWlaWEpQWmlCZlhHNGdLaUJBYzJsdVkyVWdOQzR6TGpCY2JpQXFJRUJqWVhSbFoyOXllU0JNWVc1blhHNGdLaUJBY0dGeVlXMGdleXA5SUhaaGJIVmxJRlJvWlNCMllXeDFaU0IwYnlCamFHVmpheTVjYmlBcUlFQnlaWFIxY201eklIdGliMjlzWldGdWZTQlNaWFIxY201eklHQjBjblZsWUNCcFppQmdkbUZzZFdWZ0lHbHpJR0VnYzJWMExDQmxiSE5sSUdCbVlXeHpaV0F1WEc0Z0tpQkFaWGhoYlhCc1pWeHVJQ3BjYmlBcUlGOHVhWE5UWlhRb2JtVjNJRk5sZENrN1hHNGdLaUF2THlBOVBpQjBjblZsWEc0Z0tseHVJQ29nWHk1cGMxTmxkQ2h1WlhjZ1YyVmhhMU5sZENrN1hHNGdLaUF2THlBOVBpQm1ZV3h6WlZ4dUlDb3ZYRzUyWVhJZ2FYTlRaWFFnUFNCdWIyUmxTWE5UWlhRZ1B5QmlZWE5sVlc1aGNua29ibTlrWlVselUyVjBLU0E2SUdKaGMyVkpjMU5sZER0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnBjMU5sZER0Y2JpSXNJblpoY2lCVGRHRmpheUE5SUhKbGNYVnBjbVVvSnk0dlgxTjBZV05ySnlrc1hHNGdJQ0FnWVhKeVlYbEZZV05vSUQwZ2NtVnhkV2x5WlNnbkxpOWZZWEp5WVhsRllXTm9KeWtzWEc0Z0lDQWdZWE56YVdkdVZtRnNkV1VnUFNCeVpYRjFhWEpsS0NjdUwxOWhjM05wWjI1V1lXeDFaU2NwTEZ4dUlDQWdJR0poYzJWQmMzTnBaMjRnUFNCeVpYRjFhWEpsS0NjdUwxOWlZWE5sUVhOemFXZHVKeWtzWEc0Z0lDQWdZbUZ6WlVGemMybG5ia2x1SUQwZ2NtVnhkV2x5WlNnbkxpOWZZbUZ6WlVGemMybG5ia2x1Snlrc1hHNGdJQ0FnWTJ4dmJtVkNkV1ptWlhJZ1BTQnlaWEYxYVhKbEtDY3VMMTlqYkc5dVpVSjFabVpsY2ljcExGeHVJQ0FnSUdOdmNIbEJjbkpoZVNBOUlISmxjWFZwY21Vb0p5NHZYMk52Y0hsQmNuSmhlU2NwTEZ4dUlDQWdJR052Y0hsVGVXMWliMnh6SUQwZ2NtVnhkV2x5WlNnbkxpOWZZMjl3ZVZONWJXSnZiSE1uS1N4Y2JpQWdJQ0JqYjNCNVUzbHRZbTlzYzBsdUlEMGdjbVZ4ZFdseVpTZ25MaTlmWTI5d2VWTjViV0p2YkhOSmJpY3BMRnh1SUNBZ0lHZGxkRUZzYkV0bGVYTWdQU0J5WlhGMWFYSmxLQ2N1TDE5blpYUkJiR3hMWlhsekp5a3NYRzRnSUNBZ1oyVjBRV3hzUzJWNWMwbHVJRDBnY21WeGRXbHlaU2duTGk5ZloyVjBRV3hzUzJWNWMwbHVKeWtzWEc0Z0lDQWdaMlYwVkdGbklEMGdjbVZ4ZFdseVpTZ25MaTlmWjJWMFZHRm5KeWtzWEc0Z0lDQWdhVzVwZEVOc2IyNWxRWEp5WVhrZ1BTQnlaWEYxYVhKbEtDY3VMMTlwYm1sMFEyeHZibVZCY25KaGVTY3BMRnh1SUNBZ0lHbHVhWFJEYkc5dVpVSjVWR0ZuSUQwZ2NtVnhkV2x5WlNnbkxpOWZhVzVwZEVOc2IyNWxRbmxVWVdjbktTeGNiaUFnSUNCcGJtbDBRMnh2Ym1WUFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwxOXBibWwwUTJ4dmJtVlBZbXBsWTNRbktTeGNiaUFnSUNCcGMwRnljbUY1SUQwZ2NtVnhkV2x5WlNnbkxpOXBjMEZ5Y21GNUp5a3NYRzRnSUNBZ2FYTkNkV1ptWlhJZ1BTQnlaWEYxYVhKbEtDY3VMMmx6UW5WbVptVnlKeWtzWEc0Z0lDQWdhWE5OWVhBZ1BTQnlaWEYxYVhKbEtDY3VMMmx6VFdGd0p5a3NYRzRnSUNBZ2FYTlBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMMmx6VDJKcVpXTjBKeWtzWEc0Z0lDQWdhWE5UWlhRZ1BTQnlaWEYxYVhKbEtDY3VMMmx6VTJWMEp5a3NYRzRnSUNBZ2EyVjVjeUE5SUhKbGNYVnBjbVVvSnk0dmEyVjVjeWNwTEZ4dUlDQWdJR3RsZVhOSmJpQTlJSEpsY1hWcGNtVW9KeTR2YTJWNWMwbHVKeWs3WEc1Y2JpOHFLaUJWYzJWa0lIUnZJR052YlhCdmMyVWdZbWwwYldGemEzTWdabTl5SUdOc2IyNXBibWN1SUNvdlhHNTJZWElnUTB4UFRrVmZSRVZGVUY5R1RFRkhJRDBnTVN4Y2JpQWdJQ0JEVEU5T1JWOUdURUZVWDBaTVFVY2dQU0F5TEZ4dUlDQWdJRU5NVDA1RlgxTlpUVUpQVEZOZlJreEJSeUE5SURRN1hHNWNiaThxS2lCZ1QySnFaV04wSTNSdlUzUnlhVzVuWUNCeVpYTjFiSFFnY21WbVpYSmxibU5sY3k0Z0tpOWNiblpoY2lCaGNtZHpWR0ZuSUQwZ0oxdHZZbXBsWTNRZ1FYSm5kVzFsYm5SelhTY3NYRzRnSUNBZ1lYSnlZWGxVWVdjZ1BTQW5XMjlpYW1WamRDQkJjbkpoZVYwbkxGeHVJQ0FnSUdKdmIyeFVZV2NnUFNBblcyOWlhbVZqZENCQ2IyOXNaV0Z1WFNjc1hHNGdJQ0FnWkdGMFpWUmhaeUE5SUNkYmIySnFaV04wSUVSaGRHVmRKeXhjYmlBZ0lDQmxjbkp2Y2xSaFp5QTlJQ2RiYjJKcVpXTjBJRVZ5Y205eVhTY3NYRzRnSUNBZ1puVnVZMVJoWnlBOUlDZGJiMkpxWldOMElFWjFibU4wYVc5dVhTY3NYRzRnSUNBZ1oyVnVWR0ZuSUQwZ0oxdHZZbXBsWTNRZ1IyVnVaWEpoZEc5eVJuVnVZM1JwYjI1ZEp5eGNiaUFnSUNCdFlYQlVZV2NnUFNBblcyOWlhbVZqZENCTllYQmRKeXhjYmlBZ0lDQnVkVzFpWlhKVVlXY2dQU0FuVzI5aWFtVmpkQ0JPZFcxaVpYSmRKeXhjYmlBZ0lDQnZZbXBsWTNSVVlXY2dQU0FuVzI5aWFtVmpkQ0JQWW1wbFkzUmRKeXhjYmlBZ0lDQnlaV2RsZUhCVVlXY2dQU0FuVzI5aWFtVmpkQ0JTWldkRmVIQmRKeXhjYmlBZ0lDQnpaWFJVWVdjZ1BTQW5XMjlpYW1WamRDQlRaWFJkSnl4Y2JpQWdJQ0J6ZEhKcGJtZFVZV2NnUFNBblcyOWlhbVZqZENCVGRISnBibWRkSnl4Y2JpQWdJQ0J6ZVcxaWIyeFVZV2NnUFNBblcyOWlhbVZqZENCVGVXMWliMnhkSnl4Y2JpQWdJQ0IzWldGclRXRndWR0ZuSUQwZ0oxdHZZbXBsWTNRZ1YyVmhhMDFoY0Ywbk8xeHVYRzUyWVhJZ1lYSnlZWGxDZFdabVpYSlVZV2NnUFNBblcyOWlhbVZqZENCQmNuSmhlVUoxWm1abGNsMG5MRnh1SUNBZ0lHUmhkR0ZXYVdWM1ZHRm5JRDBnSjF0dlltcGxZM1FnUkdGMFlWWnBaWGRkSnl4Y2JpQWdJQ0JtYkc5aGRETXlWR0ZuSUQwZ0oxdHZZbXBsWTNRZ1JteHZZWFF6TWtGeWNtRjVYU2NzWEc0Z0lDQWdabXh2WVhRMk5GUmhaeUE5SUNkYmIySnFaV04wSUVac2IyRjBOalJCY25KaGVWMG5MRnh1SUNBZ0lHbHVkRGhVWVdjZ1BTQW5XMjlpYW1WamRDQkpiblE0UVhKeVlYbGRKeXhjYmlBZ0lDQnBiblF4TmxSaFp5QTlJQ2RiYjJKcVpXTjBJRWx1ZERFMlFYSnlZWGxkSnl4Y2JpQWdJQ0JwYm5Rek1sUmhaeUE5SUNkYmIySnFaV04wSUVsdWRETXlRWEp5WVhsZEp5eGNiaUFnSUNCMWFXNTBPRlJoWnlBOUlDZGJiMkpxWldOMElGVnBiblE0UVhKeVlYbGRKeXhjYmlBZ0lDQjFhVzUwT0VOc1lXMXdaV1JVWVdjZ1BTQW5XMjlpYW1WamRDQlZhVzUwT0VOc1lXMXdaV1JCY25KaGVWMG5MRnh1SUNBZ0lIVnBiblF4TmxSaFp5QTlJQ2RiYjJKcVpXTjBJRlZwYm5ReE5rRnljbUY1WFNjc1hHNGdJQ0FnZFdsdWRETXlWR0ZuSUQwZ0oxdHZZbXBsWTNRZ1ZXbHVkRE15UVhKeVlYbGRKenRjYmx4dUx5b3FJRlZ6WldRZ2RHOGdhV1JsYm5ScFpua2dZSFJ2VTNSeWFXNW5WR0ZuWUNCMllXeDFaWE1nYzNWd2NHOXlkR1ZrSUdKNUlHQmZMbU5zYjI1bFlDNGdLaTljYm5aaGNpQmpiRzl1WldGaWJHVlVZV2R6SUQwZ2UzMDdYRzVqYkc5dVpXRmliR1ZVWVdkelcyRnlaM05VWVdkZElEMGdZMnh2Ym1WaFlteGxWR0ZuYzF0aGNuSmhlVlJoWjEwZ1BWeHVZMnh2Ym1WaFlteGxWR0ZuYzF0aGNuSmhlVUoxWm1abGNsUmhaMTBnUFNCamJHOXVaV0ZpYkdWVVlXZHpXMlJoZEdGV2FXVjNWR0ZuWFNBOVhHNWpiRzl1WldGaWJHVlVZV2R6VzJKdmIyeFVZV2RkSUQwZ1kyeHZibVZoWW14bFZHRm5jMXRrWVhSbFZHRm5YU0E5WEc1amJHOXVaV0ZpYkdWVVlXZHpXMlpzYjJGME16SlVZV2RkSUQwZ1kyeHZibVZoWW14bFZHRm5jMXRtYkc5aGREWTBWR0ZuWFNBOVhHNWpiRzl1WldGaWJHVlVZV2R6VzJsdWREaFVZV2RkSUQwZ1kyeHZibVZoWW14bFZHRm5jMXRwYm5ReE5sUmhaMTBnUFZ4dVkyeHZibVZoWW14bFZHRm5jMXRwYm5Rek1sUmhaMTBnUFNCamJHOXVaV0ZpYkdWVVlXZHpXMjFoY0ZSaFoxMGdQVnh1WTJ4dmJtVmhZbXhsVkdGbmMxdHVkVzFpWlhKVVlXZGRJRDBnWTJ4dmJtVmhZbXhsVkdGbmMxdHZZbXBsWTNSVVlXZGRJRDFjYm1Oc2IyNWxZV0pzWlZSaFozTmJjbVZuWlhod1ZHRm5YU0E5SUdOc2IyNWxZV0pzWlZSaFozTmJjMlYwVkdGblhTQTlYRzVqYkc5dVpXRmliR1ZVWVdkelczTjBjbWx1WjFSaFoxMGdQU0JqYkc5dVpXRmliR1ZVWVdkelczTjViV0p2YkZSaFoxMGdQVnh1WTJ4dmJtVmhZbXhsVkdGbmMxdDFhVzUwT0ZSaFoxMGdQU0JqYkc5dVpXRmliR1ZVWVdkelczVnBiblE0UTJ4aGJYQmxaRlJoWjEwZ1BWeHVZMnh2Ym1WaFlteGxWR0ZuYzF0MWFXNTBNVFpVWVdkZElEMGdZMnh2Ym1WaFlteGxWR0ZuYzF0MWFXNTBNekpVWVdkZElEMGdkSEoxWlR0Y2JtTnNiMjVsWVdKc1pWUmhaM05iWlhKeWIzSlVZV2RkSUQwZ1kyeHZibVZoWW14bFZHRm5jMXRtZFc1alZHRm5YU0E5WEc1amJHOXVaV0ZpYkdWVVlXZHpXM2RsWVd0TllYQlVZV2RkSUQwZ1ptRnNjMlU3WEc1Y2JpOHFLbHh1SUNvZ1ZHaGxJR0poYzJVZ2FXMXdiR1Z0Wlc1MFlYUnBiMjRnYjJZZ1lGOHVZMnh2Ym1WZ0lHRnVaQ0JnWHk1amJHOXVaVVJsWlhCZ0lIZG9hV05vSUhSeVlXTnJjMXh1SUNvZ2RISmhkbVZ5YzJWa0lHOWlhbVZqZEhNdVhHNGdLbHh1SUNvZ1FIQnlhWFpoZEdWY2JpQXFJRUJ3WVhKaGJTQjdLbjBnZG1Gc2RXVWdWR2hsSUhaaGJIVmxJSFJ2SUdOc2IyNWxMbHh1SUNvZ1FIQmhjbUZ0SUh0aWIyOXNaV0Z1ZlNCaWFYUnRZWE5ySUZSb1pTQmlhWFJ0WVhOcklHWnNZV2R6TGx4dUlDb2dJREVnTFNCRVpXVndJR05zYjI1bFhHNGdLaUFnTWlBdElFWnNZWFIwWlc0Z2FXNW9aWEpwZEdWa0lIQnliM0JsY25ScFpYTmNiaUFxSUNBMElDMGdRMnh2Ym1VZ2MzbHRZbTlzYzF4dUlDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdXMk4xYzNSdmJXbDZaWEpkSUZSb1pTQm1kVzVqZEdsdmJpQjBieUJqZFhOMGIyMXBlbVVnWTJ4dmJtbHVaeTVjYmlBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCYmEyVjVYU0JVYUdVZ2EyVjVJRzltSUdCMllXeDFaV0F1WEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ1cyOWlhbVZqZEYwZ1ZHaGxJSEJoY21WdWRDQnZZbXBsWTNRZ2IyWWdZSFpoYkhWbFlDNWNiaUFxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0JiYzNSaFkydGRJRlJ5WVdOcmN5QjBjbUYyWlhKelpXUWdiMkpxWldOMGN5QmhibVFnZEdobGFYSWdZMnh2Ym1VZ1kyOTFiblJsY25CaGNuUnpMbHh1SUNvZ1FISmxkSFZ5Ym5NZ2V5cDlJRkpsZEhWeWJuTWdkR2hsSUdOc2IyNWxaQ0IyWVd4MVpTNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1ltRnpaVU5zYjI1bEtIWmhiSFZsTENCaWFYUnRZWE5yTENCamRYTjBiMjFwZW1WeUxDQnJaWGtzSUc5aWFtVmpkQ3dnYzNSaFkyc3BJSHRjYmlBZ2RtRnlJSEpsYzNWc2RDeGNiaUFnSUNBZ0lHbHpSR1ZsY0NBOUlHSnBkRzFoYzJzZ0ppQkRURTlPUlY5RVJVVlFYMFpNUVVjc1hHNGdJQ0FnSUNCcGMwWnNZWFFnUFNCaWFYUnRZWE5ySUNZZ1EweFBUa1ZmUmt4QlZGOUdURUZITEZ4dUlDQWdJQ0FnYVhOR2RXeHNJRDBnWW1sMGJXRnpheUFtSUVOTVQwNUZYMU5aVFVKUFRGTmZSa3hCUnp0Y2JseHVJQ0JwWmlBb1kzVnpkRzl0YVhwbGNpa2dlMXh1SUNBZ0lISmxjM1ZzZENBOUlHOWlhbVZqZENBL0lHTjFjM1J2YldsNlpYSW9kbUZzZFdVc0lHdGxlU3dnYjJKcVpXTjBMQ0J6ZEdGamF5a2dPaUJqZFhOMGIyMXBlbVZ5S0haaGJIVmxLVHRjYmlBZ2ZWeHVJQ0JwWmlBb2NtVnpkV3gwSUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4dUlDQjlYRzRnSUdsbUlDZ2hhWE5QWW1wbFkzUW9kbUZzZFdVcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhaaGJIVmxPMXh1SUNCOVhHNGdJSFpoY2lCcGMwRnljaUE5SUdselFYSnlZWGtvZG1Gc2RXVXBPMXh1SUNCcFppQW9hWE5CY25JcElIdGNiaUFnSUNCeVpYTjFiSFFnUFNCcGJtbDBRMnh2Ym1WQmNuSmhlU2gyWVd4MVpTazdYRzRnSUNBZ2FXWWdLQ0ZwYzBSbFpYQXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmpiM0I1UVhKeVlYa29kbUZzZFdVc0lISmxjM1ZzZENrN1hHNGdJQ0FnZlZ4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhaaGNpQjBZV2NnUFNCblpYUlVZV2NvZG1Gc2RXVXBMRnh1SUNBZ0lDQWdJQ0JwYzBaMWJtTWdQU0IwWVdjZ1BUMGdablZ1WTFSaFp5QjhmQ0IwWVdjZ1BUMGdaMlZ1VkdGbk8xeHVYRzRnSUNBZ2FXWWdLR2x6UW5WbVptVnlLSFpoYkhWbEtTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHTnNiMjVsUW5WbVptVnlLSFpoYkhWbExDQnBjMFJsWlhBcE8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2RHRm5JRDA5SUc5aWFtVmpkRlJoWnlCOGZDQjBZV2NnUFQwZ1lYSm5jMVJoWnlCOGZDQW9hWE5HZFc1aklDWW1JQ0Z2WW1wbFkzUXBLU0I3WEc0Z0lDQWdJQ0J5WlhOMWJIUWdQU0FvYVhOR2JHRjBJSHg4SUdselJuVnVZeWtnUHlCN2ZTQTZJR2x1YVhSRGJHOXVaVTlpYW1WamRDaDJZV3gxWlNrN1hHNGdJQ0FnSUNCcFppQW9JV2x6UkdWbGNDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdhWE5HYkdGMFhHNGdJQ0FnSUNBZ0lDQWdQeUJqYjNCNVUzbHRZbTlzYzBsdUtIWmhiSFZsTENCaVlYTmxRWE56YVdkdVNXNG9jbVZ6ZFd4MExDQjJZV3gxWlNrcFhHNGdJQ0FnSUNBZ0lDQWdPaUJqYjNCNVUzbHRZbTlzY3loMllXeDFaU3dnWW1GelpVRnpjMmxuYmloeVpYTjFiSFFzSUhaaGJIVmxLU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHbG1JQ2doWTJ4dmJtVmhZbXhsVkdGbmMxdDBZV2RkS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdlltcGxZM1FnUHlCMllXeDFaU0E2SUh0OU8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2NtVnpkV3gwSUQwZ2FXNXBkRU5zYjI1bFFubFVZV2NvZG1Gc2RXVXNJSFJoWnl3Z2FYTkVaV1Z3S1R0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnTHk4Z1EyaGxZMnNnWm05eUlHTnBjbU4xYkdGeUlISmxabVZ5Wlc1alpYTWdZVzVrSUhKbGRIVnliaUJwZEhNZ1kyOXljbVZ6Y0c5dVpHbHVaeUJqYkc5dVpTNWNiaUFnYzNSaFkyc2dmSHdnS0hOMFlXTnJJRDBnYm1WM0lGTjBZV05yS1R0Y2JpQWdkbUZ5SUhOMFlXTnJaV1FnUFNCemRHRmpheTVuWlhRb2RtRnNkV1VwTzF4dUlDQnBaaUFvYzNSaFkydGxaQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQnpkR0ZqYTJWa08xeHVJQ0I5WEc0Z0lITjBZV05yTG5ObGRDaDJZV3gxWlN3Z2NtVnpkV3gwS1R0Y2JseHVJQ0JwWmlBb2FYTlRaWFFvZG1Gc2RXVXBLU0I3WEc0Z0lDQWdkbUZzZFdVdVptOXlSV0ZqYUNobWRXNWpkR2x2YmloemRXSldZV3gxWlNrZ2UxeHVJQ0FnSUNBZ2NtVnpkV3gwTG1Ga1pDaGlZWE5sUTJ4dmJtVW9jM1ZpVm1Gc2RXVXNJR0pwZEcxaGMyc3NJR04xYzNSdmJXbDZaWElzSUhOMVlsWmhiSFZsTENCMllXeDFaU3dnYzNSaFkyc3BLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZTQmxiSE5sSUdsbUlDaHBjMDFoY0NoMllXeDFaU2twSUh0Y2JpQWdJQ0IyWVd4MVpTNW1iM0pGWVdOb0tHWjFibU4wYVc5dUtITjFZbFpoYkhWbExDQnJaWGtwSUh0Y2JpQWdJQ0FnSUhKbGMzVnNkQzV6WlhRb2EyVjVMQ0JpWVhObFEyeHZibVVvYzNWaVZtRnNkV1VzSUdKcGRHMWhjMnNzSUdOMWMzUnZiV2w2WlhJc0lHdGxlU3dnZG1Gc2RXVXNJSE4wWVdOcktTazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0IyWVhJZ2EyVjVjMFoxYm1NZ1BTQnBjMFoxYkd4Y2JpQWdJQ0EvSUNocGMwWnNZWFFnUHlCblpYUkJiR3hMWlhselNXNGdPaUJuWlhSQmJHeExaWGx6S1Z4dUlDQWdJRG9nS0dselJteGhkQ0EvSUd0bGVYTkpiaUE2SUd0bGVYTXBPMXh1WEc0Z0lIWmhjaUJ3Y205d2N5QTlJR2x6UVhKeUlEOGdkVzVrWldacGJtVmtJRG9nYTJWNWMwWjFibU1vZG1Gc2RXVXBPMXh1SUNCaGNuSmhlVVZoWTJnb2NISnZjSE1nZkh3Z2RtRnNkV1VzSUdaMWJtTjBhVzl1S0hOMVlsWmhiSFZsTENCclpYa3BJSHRjYmlBZ0lDQnBaaUFvY0hKdmNITXBJSHRjYmlBZ0lDQWdJR3RsZVNBOUlITjFZbFpoYkhWbE8xeHVJQ0FnSUNBZ2MzVmlWbUZzZFdVZ1BTQjJZV3gxWlZ0clpYbGRPMXh1SUNBZ0lIMWNiaUFnSUNBdkx5QlNaV04xY25OcGRtVnNlU0J3YjNCMWJHRjBaU0JqYkc5dVpTQW9jM1Z6WTJWd2RHbGliR1VnZEc4Z1kyRnNiQ0J6ZEdGamF5QnNhVzFwZEhNcExseHVJQ0FnSUdGemMybG5ibFpoYkhWbEtISmxjM1ZzZEN3Z2EyVjVMQ0JpWVhObFEyeHZibVVvYzNWaVZtRnNkV1VzSUdKcGRHMWhjMnNzSUdOMWMzUnZiV2w2WlhJc0lHdGxlU3dnZG1Gc2RXVXNJSE4wWVdOcktTazdYRzRnSUgwcE8xeHVJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdKaGMyVkRiRzl1WlR0Y2JpSXNJblpoY2lCaVlYTmxRMnh2Ym1VZ1BTQnlaWEYxYVhKbEtDY3VMMTlpWVhObFEyeHZibVVuS1R0Y2JseHVMeW9xSUZWelpXUWdkRzhnWTI5dGNHOXpaU0JpYVhSdFlYTnJjeUJtYjNJZ1kyeHZibWx1Wnk0Z0tpOWNiblpoY2lCRFRFOU9SVjlUV1UxQ1QweFRYMFpNUVVjZ1BTQTBPMXh1WEc0dktpcGNiaUFxSUVOeVpXRjBaWE1nWVNCemFHRnNiRzkzSUdOc2IyNWxJRzltSUdCMllXeDFaV0F1WEc0Z0tseHVJQ29nS2lwT2IzUmxPaW9xSUZSb2FYTWdiV1YwYUc5a0lHbHpJR3h2YjNObGJIa2dZbUZ6WldRZ2IyNGdkR2hsWEc0Z0tpQmJjM1J5ZFdOMGRYSmxaQ0JqYkc5dVpTQmhiR2R2Y21sMGFHMWRLR2gwZEhCek9pOHZiV1J1TG1sdkwxTjBjblZqZEhWeVpXUmZZMnh2Ym1WZllXeG5iM0pwZEdodEtWeHVJQ29nWVc1a0lITjFjSEJ2Y25SeklHTnNiMjVwYm1jZ1lYSnlZWGx6TENCaGNuSmhlU0JpZFdabVpYSnpMQ0JpYjI5c1pXRnVjeXdnWkdGMFpTQnZZbXBsWTNSekxDQnRZWEJ6TEZ4dUlDb2diblZ0WW1WeWN5d2dZRTlpYW1WamRHQWdiMkpxWldOMGN5d2djbVZuWlhobGN5d2djMlYwY3l3Z2MzUnlhVzVuY3l3Z2MzbHRZbTlzY3l3Z1lXNWtJSFI1Y0dWa1hHNGdLaUJoY25KaGVYTXVJRlJvWlNCdmQyNGdaVzUxYldWeVlXSnNaU0J3Y205d1pYSjBhV1Z6SUc5bUlHQmhjbWQxYldWdWRITmdJRzlpYW1WamRITWdZWEpsSUdOc2IyNWxaRnh1SUNvZ1lYTWdjR3hoYVc0Z2IySnFaV04wY3k0Z1FXNGdaVzF3ZEhrZ2IySnFaV04wSUdseklISmxkSFZ5Ym1Wa0lHWnZjaUIxYm1Oc2IyNWxZV0pzWlNCMllXeDFaWE1nYzNWamFGeHVJQ29nWVhNZ1pYSnliM0lnYjJKcVpXTjBjeXdnWm5WdVkzUnBiMjV6TENCRVQwMGdibTlrWlhNc0lHRnVaQ0JYWldGclRXRndjeTVjYmlBcVhHNGdLaUJBYzNSaGRHbGpYRzRnS2lCQWJXVnRZbVZ5VDJZZ1gxeHVJQ29nUUhOcGJtTmxJREF1TVM0d1hHNGdLaUJBWTJGMFpXZHZjbmtnVEdGdVoxeHVJQ29nUUhCaGNtRnRJSHNxZlNCMllXeDFaU0JVYUdVZ2RtRnNkV1VnZEc4Z1kyeHZibVV1WEc0Z0tpQkFjbVYwZFhKdWN5QjdLbjBnVW1WMGRYSnVjeUIwYUdVZ1kyeHZibVZrSUhaaGJIVmxMbHh1SUNvZ1FITmxaU0JmTG1Oc2IyNWxSR1ZsY0Z4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxWEc0Z0tpQjJZWElnYjJKcVpXTjBjeUE5SUZ0N0lDZGhKem9nTVNCOUxDQjdJQ2RpSnpvZ01pQjlYVHRjYmlBcVhHNGdLaUIyWVhJZ2MyaGhiR3h2ZHlBOUlGOHVZMnh2Ym1Vb2IySnFaV04wY3lrN1hHNGdLaUJqYjI1emIyeGxMbXh2WnloemFHRnNiRzkzV3pCZElEMDlQU0J2WW1wbFkzUnpXekJkS1R0Y2JpQXFJQzh2SUQwK0lIUnlkV1ZjYmlBcUwxeHVablZ1WTNScGIyNGdZMnh2Ym1Vb2RtRnNkV1VwSUh0Y2JpQWdjbVYwZFhKdUlHSmhjMlZEYkc5dVpTaDJZV3gxWlN3Z1EweFBUa1ZmVTFsTlFrOU1VMTlHVEVGSEtUdGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCamJHOXVaVHRjYmlJc0luWmhjaUJqY21WaGRHVlhjbUZ3SUQwZ2NtVnhkV2x5WlNnbkxpOWZZM0psWVhSbFYzSmhjQ2NwTzF4dVhHNHZLaW9nVlhObFpDQjBieUJqYjIxd2IzTmxJR0pwZEcxaGMydHpJR1p2Y2lCbWRXNWpkR2x2YmlCdFpYUmhaR0YwWVM0Z0tpOWNiblpoY2lCWFVrRlFYME5WVWxKWlgwWk1RVWNnUFNBNE8xeHVYRzR2S2lwY2JpQXFJRU55WldGMFpYTWdZU0JtZFc1amRHbHZiaUIwYUdGMElHRmpZMlZ3ZEhNZ1lYSm5kVzFsYm5SeklHOW1JR0JtZFc1allDQmhibVFnWldsMGFHVnlJR2x1ZG05clpYTmNiaUFxSUdCbWRXNWpZQ0J5WlhSMWNtNXBibWNnYVhSeklISmxjM1ZzZEN3Z2FXWWdZWFFnYkdWaGMzUWdZR0Z5YVhSNVlDQnVkVzFpWlhJZ2IyWWdZWEpuZFcxbGJuUnpJR2hoZG1WY2JpQXFJR0psWlc0Z2NISnZkbWxrWldRc0lHOXlJSEpsZEhWeWJuTWdZU0JtZFc1amRHbHZiaUIwYUdGMElHRmpZMlZ3ZEhNZ2RHaGxJSEpsYldGcGJtbHVaeUJnWm5WdVkyQmNiaUFxSUdGeVozVnRaVzUwY3l3Z1lXNWtJSE52SUc5dUxpQlVhR1VnWVhKcGRIa2diMllnWUdaMWJtTmdJRzFoZVNCaVpTQnpjR1ZqYVdacFpXUWdhV1lnWUdaMWJtTXViR1Z1WjNSb1lGeHVJQ29nYVhNZ2JtOTBJSE4xWm1acFkybGxiblF1WEc0Z0tseHVJQ29nVkdobElHQmZMbU4xY25KNUxuQnNZV05sYUc5c1pHVnlZQ0IyWVd4MVpTd2dkMmhwWTJnZ1pHVm1ZWFZzZEhNZ2RHOGdZRjlnSUdsdUlHMXZibTlzYVhSb2FXTWdZblZwYkdSekxGeHVJQ29nYldGNUlHSmxJSFZ6WldRZ1lYTWdZU0J3YkdGalpXaHZiR1JsY2lCbWIzSWdjSEp2ZG1sa1pXUWdZWEpuZFcxbGJuUnpMbHh1SUNwY2JpQXFJQ29xVG05MFpUb3FLaUJVYUdseklHMWxkR2h2WkNCa2IyVnpiaWQwSUhObGRDQjBhR1VnWENKc1pXNW5kR2hjSWlCd2NtOXdaWEowZVNCdlppQmpkWEp5YVdWa0lHWjFibU4wYVc5dWN5NWNiaUFxWEc0Z0tpQkFjM1JoZEdsalhHNGdLaUJBYldWdFltVnlUMllnWDF4dUlDb2dRSE5wYm1ObElESXVNQzR3WEc0Z0tpQkFZMkYwWldkdmNua2dSblZ1WTNScGIyNWNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdaMWJtTWdWR2hsSUdaMWJtTjBhVzl1SUhSdklHTjFjbko1TGx4dUlDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlGdGhjbWwwZVQxbWRXNWpMbXhsYm1kMGFGMGdWR2hsSUdGeWFYUjVJRzltSUdCbWRXNWpZQzVjYmlBcUlFQndZWEpoYlMwZ2UwOWlhbVZqZEgwZ1cyZDFZWEprWFNCRmJtRmliR1Z6SUhWelpTQmhjeUJoYmlCcGRHVnlZWFJsWlNCbWIzSWdiV1YwYUc5a2N5QnNhV3RsSUdCZkxtMWhjR0F1WEc0Z0tpQkFjbVYwZFhKdWN5QjdSblZ1WTNScGIyNTlJRkpsZEhWeWJuTWdkR2hsSUc1bGR5QmpkWEp5YVdWa0lHWjFibU4wYVc5dUxseHVJQ29nUUdWNFlXMXdiR1ZjYmlBcVhHNGdLaUIyWVhJZ1lXSmpJRDBnWm5WdVkzUnBiMjRvWVN3Z1lpd2dZeWtnZTF4dUlDb2dJQ0J5WlhSMWNtNGdXMkVzSUdJc0lHTmRPMXh1SUNvZ2ZUdGNiaUFxWEc0Z0tpQjJZWElnWTNWeWNtbGxaQ0E5SUY4dVkzVnljbmtvWVdKaktUdGNiaUFxWEc0Z0tpQmpkWEp5YVdWa0tERXBLRElwS0RNcE8xeHVJQ29nTHk4Z1BUNGdXekVzSURJc0lETmRYRzRnS2x4dUlDb2dZM1Z5Y21sbFpDZ3hMQ0F5S1NnektUdGNiaUFxSUM4dklEMCtJRnN4TENBeUxDQXpYVnh1SUNwY2JpQXFJR04xY25KcFpXUW9NU3dnTWl3Z015azdYRzRnS2lBdkx5QTlQaUJiTVN3Z01pd2dNMTFjYmlBcVhHNGdLaUF2THlCRGRYSnlhV1ZrSUhkcGRHZ2djR3hoWTJWb2IyeGtaWEp6TGx4dUlDb2dZM1Z5Y21sbFpDZ3hLU2hmTENBektTZ3lLVHRjYmlBcUlDOHZJRDArSUZzeExDQXlMQ0F6WFZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJqZFhKeWVTaG1kVzVqTENCaGNtbDBlU3dnWjNWaGNtUXBJSHRjYmlBZ1lYSnBkSGtnUFNCbmRXRnlaQ0EvSUhWdVpHVm1hVzVsWkNBNklHRnlhWFI1TzF4dUlDQjJZWElnY21WemRXeDBJRDBnWTNKbFlYUmxWM0poY0NobWRXNWpMQ0JYVWtGUVgwTlZVbEpaWDBaTVFVY3NJSFZ1WkdWbWFXNWxaQ3dnZFc1a1pXWnBibVZrTENCMWJtUmxabWx1WldRc0lIVnVaR1ZtYVc1bFpDd2dkVzVrWldacGJtVmtMQ0JoY21sMGVTazdYRzRnSUhKbGMzVnNkQzV3YkdGalpXaHZiR1JsY2lBOUlHTjFjbko1TG5Cc1lXTmxhRzlzWkdWeU8xeHVJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVmVnh1WEc0dkx5QkJjM05wWjI0Z1pHVm1ZWFZzZENCd2JHRmpaV2h2YkdSbGNuTXVYRzVqZFhKeWVTNXdiR0ZqWldodmJHUmxjaUE5SUh0OU8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR04xY25KNU8xeHVJaXdpZG1GeUlHSmhjMlZIWlhSVVlXY2dQU0J5WlhGMWFYSmxLQ2N1TDE5aVlYTmxSMlYwVkdGbkp5a3NYRzRnSUNBZ2FYTlBZbXBsWTNSTWFXdGxJRDBnY21WeGRXbHlaU2duTGk5cGMwOWlhbVZqZEV4cGEyVW5LU3hjYmlBZ0lDQnBjMUJzWVdsdVQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOXBjMUJzWVdsdVQySnFaV04wSnlrN1hHNWNiaThxS2lCZ1QySnFaV04wSTNSdlUzUnlhVzVuWUNCeVpYTjFiSFFnY21WbVpYSmxibU5sY3k0Z0tpOWNiblpoY2lCa2IyMUZlR05VWVdjZ1BTQW5XMjlpYW1WamRDQkVUMDFGZUdObGNIUnBiMjVkSnl4Y2JpQWdJQ0JsY25KdmNsUmhaeUE5SUNkYmIySnFaV04wSUVWeWNtOXlYU2M3WEc1Y2JpOHFLbHh1SUNvZ1EyaGxZMnR6SUdsbUlHQjJZV3gxWldBZ2FYTWdZVzRnWUVWeWNtOXlZQ3dnWUVWMllXeEZjbkp2Y21Bc0lHQlNZVzVuWlVWeWNtOXlZQ3dnWUZKbFptVnlaVzVqWlVWeWNtOXlZQ3hjYmlBcUlHQlRlVzUwWVhoRmNuSnZjbUFzSUdCVWVYQmxSWEp5YjNKZ0xDQnZjaUJnVlZKSlJYSnliM0pnSUc5aWFtVmpkQzVjYmlBcVhHNGdLaUJBYzNSaGRHbGpYRzRnS2lCQWJXVnRZbVZ5VDJZZ1gxeHVJQ29nUUhOcGJtTmxJRE11TUM0d1hHNGdLaUJBWTJGMFpXZHZjbmtnVEdGdVoxeHVJQ29nUUhCaGNtRnRJSHNxZlNCMllXeDFaU0JVYUdVZ2RtRnNkV1VnZEc4Z1kyaGxZMnN1WEc0Z0tpQkFjbVYwZFhKdWN5QjdZbTl2YkdWaGJuMGdVbVYwZFhKdWN5QmdkSEoxWldBZ2FXWWdZSFpoYkhWbFlDQnBjeUJoYmlCbGNuSnZjaUJ2WW1wbFkzUXNJR1ZzYzJVZ1lHWmhiSE5sWUM1Y2JpQXFJRUJsZUdGdGNHeGxYRzRnS2x4dUlDb2dYeTVwYzBWeWNtOXlLRzVsZHlCRmNuSnZjaWs3WEc0Z0tpQXZMeUE5UGlCMGNuVmxYRzRnS2x4dUlDb2dYeTVwYzBWeWNtOXlLRVZ5Y205eUtUdGNiaUFxSUM4dklEMCtJR1poYkhObFhHNGdLaTljYm1aMWJtTjBhVzl1SUdselJYSnliM0lvZG1Gc2RXVXBJSHRjYmlBZ2FXWWdLQ0ZwYzA5aWFtVmpkRXhwYTJVb2RtRnNkV1VwS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0I5WEc0Z0lIWmhjaUIwWVdjZ1BTQmlZWE5sUjJWMFZHRm5LSFpoYkhWbEtUdGNiaUFnY21WMGRYSnVJSFJoWnlBOVBTQmxjbkp2Y2xSaFp5QjhmQ0IwWVdjZ1BUMGdaRzl0UlhoalZHRm5JSHg4WEc0Z0lDQWdLSFI1Y0dWdlppQjJZV3gxWlM1dFpYTnpZV2RsSUQwOUlDZHpkSEpwYm1jbklDWW1JSFI1Y0dWdlppQjJZV3gxWlM1dVlXMWxJRDA5SUNkemRISnBibWNuSUNZbUlDRnBjMUJzWVdsdVQySnFaV04wS0haaGJIVmxLU2s3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdhWE5GY25KdmNqdGNiaUlzSW5aaGNpQm5aWFJVWVdjZ1BTQnlaWEYxYVhKbEtDY3VMMTluWlhSVVlXY25LU3hjYmlBZ0lDQnBjMDlpYW1WamRFeHBhMlVnUFNCeVpYRjFhWEpsS0NjdUwybHpUMkpxWldOMFRHbHJaU2NwTzF4dVhHNHZLaW9nWUU5aWFtVmpkQ04wYjFOMGNtbHVaMkFnY21WemRXeDBJSEpsWm1WeVpXNWpaWE11SUNvdlhHNTJZWElnZDJWaGEwMWhjRlJoWnlBOUlDZGJiMkpxWldOMElGZGxZV3ROWVhCZEp6dGNibHh1THlvcVhHNGdLaUJEYUdWamEzTWdhV1lnWUhaaGJIVmxZQ0JwY3lCamJHRnpjMmxtYVdWa0lHRnpJR0VnWUZkbFlXdE5ZWEJnSUc5aWFtVmpkQzVjYmlBcVhHNGdLaUJBYzNSaGRHbGpYRzRnS2lCQWJXVnRZbVZ5VDJZZ1gxeHVJQ29nUUhOcGJtTmxJRFF1TXk0d1hHNGdLaUJBWTJGMFpXZHZjbmtnVEdGdVoxeHVJQ29nUUhCaGNtRnRJSHNxZlNCMllXeDFaU0JVYUdVZ2RtRnNkV1VnZEc4Z1kyaGxZMnN1WEc0Z0tpQkFjbVYwZFhKdWN5QjdZbTl2YkdWaGJuMGdVbVYwZFhKdWN5QmdkSEoxWldBZ2FXWWdZSFpoYkhWbFlDQnBjeUJoSUhkbFlXc2diV0Z3TENCbGJITmxJR0JtWVd4elpXQXVYRzRnS2lCQVpYaGhiWEJzWlZ4dUlDcGNiaUFxSUY4dWFYTlhaV0ZyVFdGd0tHNWxkeUJYWldGclRXRndLVHRjYmlBcUlDOHZJRDArSUhSeWRXVmNiaUFxWEc0Z0tpQmZMbWx6VjJWaGEwMWhjQ2h1WlhjZ1RXRndLVHRjYmlBcUlDOHZJRDArSUdaaGJITmxYRzRnS2k5Y2JtWjFibU4wYVc5dUlHbHpWMlZoYTAxaGNDaDJZV3gxWlNrZ2UxeHVJQ0J5WlhSMWNtNGdhWE5QWW1wbFkzUk1hV3RsS0haaGJIVmxLU0FtSmlCblpYUlVZV2NvZG1Gc2RXVXBJRDA5SUhkbFlXdE5ZWEJVWVdjN1hHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnYVhOWFpXRnJUV0Z3TzF4dUlpd2lkbUZ5SUdKaGMyVkRiRzl1WlNBOUlISmxjWFZwY21Vb0p5NHZYMkpoYzJWRGJHOXVaU2NwTEZ4dUlDQWdJR0poYzJWSmRHVnlZWFJsWlNBOUlISmxjWFZwY21Vb0p5NHZYMkpoYzJWSmRHVnlZWFJsWlNjcE8xeHVYRzR2S2lvZ1ZYTmxaQ0IwYnlCamIyMXdiM05sSUdKcGRHMWhjMnR6SUdadmNpQmpiRzl1YVc1bkxpQXFMMXh1ZG1GeUlFTk1UMDVGWDBSRlJWQmZSa3hCUnlBOUlERTdYRzVjYmk4cUtseHVJQ29nUTNKbFlYUmxjeUJoSUdaMWJtTjBhVzl1SUhSb1lYUWdhVzUyYjJ0bGN5QmdablZ1WTJBZ2QybDBhQ0IwYUdVZ1lYSm5kVzFsYm5SeklHOW1JSFJvWlNCamNtVmhkR1ZrWEc0Z0tpQm1kVzVqZEdsdmJpNGdTV1lnWUdaMWJtTmdJR2x6SUdFZ2NISnZjR1Z5ZEhrZ2JtRnRaU3dnZEdobElHTnlaV0YwWldRZ1puVnVZM1JwYjI0Z2NtVjBkWEp1Y3lCMGFHVmNiaUFxSUhCeWIzQmxjblI1SUhaaGJIVmxJR1p2Y2lCaElHZHBkbVZ1SUdWc1pXMWxiblF1SUVsbUlHQm1kVzVqWUNCcGN5QmhiaUJoY25KaGVTQnZjaUJ2WW1wbFkzUXNJSFJvWlZ4dUlDb2dZM0psWVhSbFpDQm1kVzVqZEdsdmJpQnlaWFIxY201eklHQjBjblZsWUNCbWIzSWdaV3hsYldWdWRITWdkR2hoZENCamIyNTBZV2x1SUhSb1pTQmxjWFZwZG1Gc1pXNTBYRzRnS2lCemIzVnlZMlVnY0hKdmNHVnlkR2xsY3l3Z2IzUm9aWEozYVhObElHbDBJSEpsZEhWeWJuTWdZR1poYkhObFlDNWNiaUFxWEc0Z0tpQkFjM1JoZEdsalhHNGdLaUJBYzJsdVkyVWdOQzR3TGpCY2JpQXFJRUJ0WlcxaVpYSlBaaUJmWEc0Z0tpQkFZMkYwWldkdmNua2dWWFJwYkZ4dUlDb2dRSEJoY21GdElIc3FmU0JiWm5WdVl6MWZMbWxrWlc1MGFYUjVYU0JVYUdVZ2RtRnNkV1VnZEc4Z1kyOXVkbVZ5ZENCMGJ5QmhJR05oYkd4aVlXTnJMbHh1SUNvZ1FISmxkSFZ5Ym5NZ2UwWjFibU4wYVc5dWZTQlNaWFIxY201eklIUm9aU0JqWVd4c1ltRmpheTVjYmlBcUlFQmxlR0Z0Y0d4bFhHNGdLbHh1SUNvZ2RtRnlJSFZ6WlhKeklEMGdXMXh1SUNvZ0lDQjdJQ2QxYzJWeUp6b2dKMkpoY201bGVTY3NJQ2RoWjJVbk9pQXpOaXdnSjJGamRHbDJaU2M2SUhSeWRXVWdmU3hjYmlBcUlDQWdleUFuZFhObGNpYzZJQ2RtY21Wa0p5d2dJQ0FuWVdkbEp6b2dOREFzSUNkaFkzUnBkbVVuT2lCbVlXeHpaU0I5WEc0Z0tpQmRPMXh1SUNwY2JpQXFJQzh2SUZSb1pTQmdYeTV0WVhSamFHVnpZQ0JwZEdWeVlYUmxaU0J6YUc5eWRHaGhibVF1WEc0Z0tpQmZMbVpwYkhSbGNpaDFjMlZ5Y3l3Z1h5NXBkR1Z5WVhSbFpTaDdJQ2QxYzJWeUp6b2dKMkpoY201bGVTY3NJQ2RoWTNScGRtVW5PaUIwY25WbElIMHBLVHRjYmlBcUlDOHZJRDArSUZ0N0lDZDFjMlZ5SnpvZ0oySmhjbTVsZVNjc0lDZGhaMlVuT2lBek5pd2dKMkZqZEdsMlpTYzZJSFJ5ZFdVZ2ZWMWNiaUFxWEc0Z0tpQXZMeUJVYUdVZ1lGOHViV0YwWTJobGMxQnliM0JsY25SNVlDQnBkR1Z5WVhSbFpTQnphRzl5ZEdoaGJtUXVYRzRnS2lCZkxtWnBiSFJsY2loMWMyVnljeXdnWHk1cGRHVnlZWFJsWlNoYkozVnpaWEluTENBblpuSmxaQ2RkS1NrN1hHNGdLaUF2THlBOVBpQmJleUFuZFhObGNpYzZJQ2RtY21Wa0p5d2dKMkZuWlNjNklEUXdJSDFkWEc0Z0tseHVJQ29nTHk4Z1ZHaGxJR0JmTG5CeWIzQmxjblI1WUNCcGRHVnlZWFJsWlNCemFHOXlkR2hoYm1RdVhHNGdLaUJmTG0xaGNDaDFjMlZ5Y3l3Z1h5NXBkR1Z5WVhSbFpTZ25kWE5sY2ljcEtUdGNiaUFxSUM4dklEMCtJRnNuWW1GeWJtVjVKeXdnSjJaeVpXUW5YVnh1SUNwY2JpQXFJQzh2SUVOeVpXRjBaU0JqZFhOMGIyMGdhWFJsY21GMFpXVWdjMmh2Y25Sb1lXNWtjeTVjYmlBcUlGOHVhWFJsY21GMFpXVWdQU0JmTG5keVlYQW9YeTVwZEdWeVlYUmxaU3dnWm5WdVkzUnBiMjRvYVhSbGNtRjBaV1VzSUdaMWJtTXBJSHRjYmlBcUlDQWdjbVYwZFhKdUlDRmZMbWx6VW1WblJYaHdLR1oxYm1NcElEOGdhWFJsY21GMFpXVW9ablZ1WXlrZ09pQm1kVzVqZEdsdmJpaHpkSEpwYm1jcElIdGNiaUFxSUNBZ0lDQnlaWFIxY200Z1puVnVZeTUwWlhOMEtITjBjbWx1WnlrN1hHNGdLaUFnSUgwN1hHNGdLaUI5S1R0Y2JpQXFYRzRnS2lCZkxtWnBiSFJsY2loYkoyRmlZeWNzSUNka1pXWW5YU3dnTDJWbUx5azdYRzRnS2lBdkx5QTlQaUJiSjJSbFppZGRYRzRnS2k5Y2JtWjFibU4wYVc5dUlHbDBaWEpoZEdWbEtHWjFibU1wSUh0Y2JpQWdjbVYwZFhKdUlHSmhjMlZKZEdWeVlYUmxaU2gwZVhCbGIyWWdablZ1WXlBOVBTQW5ablZ1WTNScGIyNG5JRDhnWm5WdVl5QTZJR0poYzJWRGJHOXVaU2htZFc1akxDQkRURTlPUlY5RVJVVlFYMFpNUVVjcEtUdGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCcGRHVnlZWFJsWlR0Y2JpSXNJblpoY2lCVGVXMWliMndnUFNCeVpYRjFhWEpsS0NjdUwxOVRlVzFpYjJ3bktTeGNiaUFnSUNCcGMwRnlaM1Z0Wlc1MGN5QTlJSEpsY1hWcGNtVW9KeTR2YVhOQmNtZDFiV1Z1ZEhNbktTeGNiaUFnSUNCcGMwRnljbUY1SUQwZ2NtVnhkV2x5WlNnbkxpOXBjMEZ5Y21GNUp5azdYRzVjYmk4cUtpQkNkV2xzZEMxcGJpQjJZV3gxWlNCeVpXWmxjbVZ1WTJWekxpQXFMMXh1ZG1GeUlITndjbVZoWkdGaWJHVlRlVzFpYjJ3Z1BTQlRlVzFpYjJ3Z1B5QlRlVzFpYjJ3dWFYTkRiMjVqWVhSVGNISmxZV1JoWW14bElEb2dkVzVrWldacGJtVmtPMXh1WEc0dktpcGNiaUFxSUVOb1pXTnJjeUJwWmlCZ2RtRnNkV1ZnSUdseklHRWdabXhoZEhSbGJtRmliR1VnWUdGeVozVnRaVzUwYzJBZ2IySnFaV04wSUc5eUlHRnljbUY1TGx4dUlDcGNiaUFxSUVCd2NtbDJZWFJsWEc0Z0tpQkFjR0Z5WVcwZ2V5cDlJSFpoYkhWbElGUm9aU0IyWVd4MVpTQjBieUJqYUdWamF5NWNiaUFxSUVCeVpYUjFjbTV6SUh0aWIyOXNaV0Z1ZlNCU1pYUjFjbTV6SUdCMGNuVmxZQ0JwWmlCZ2RtRnNkV1ZnSUdseklHWnNZWFIwWlc1aFlteGxMQ0JsYkhObElHQm1ZV3h6WldBdVhHNGdLaTljYm1aMWJtTjBhVzl1SUdselJteGhkSFJsYm1GaWJHVW9kbUZzZFdVcElIdGNiaUFnY21WMGRYSnVJR2x6UVhKeVlYa29kbUZzZFdVcElIeDhJR2x6UVhKbmRXMWxiblJ6S0haaGJIVmxLU0I4ZkZ4dUlDQWdJQ0VoS0hOd2NtVmhaR0ZpYkdWVGVXMWliMndnSmlZZ2RtRnNkV1VnSmlZZ2RtRnNkV1ZiYzNCeVpXRmtZV0pzWlZONWJXSnZiRjBwTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR2x6Um14aGRIUmxibUZpYkdVN1hHNGlMQ0oyWVhJZ1lYSnlZWGxRZFhOb0lEMGdjbVZ4ZFdseVpTZ25MaTlmWVhKeVlYbFFkWE5vSnlrc1hHNGdJQ0FnYVhOR2JHRjBkR1Z1WVdKc1pTQTlJSEpsY1hWcGNtVW9KeTR2WDJselJteGhkSFJsYm1GaWJHVW5LVHRjYmx4dUx5b3FYRzRnS2lCVWFHVWdZbUZ6WlNCcGJYQnNaVzFsYm5SaGRHbHZiaUJ2WmlCZ1h5NW1iR0YwZEdWdVlDQjNhWFJvSUhOMWNIQnZjblFnWm05eUlISmxjM1J5YVdOMGFXNW5JR1pzWVhSMFpXNXBibWN1WEc0Z0tseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUlFQndZWEpoYlNCN1FYSnlZWGw5SUdGeWNtRjVJRlJvWlNCaGNuSmhlU0IwYnlCbWJHRjBkR1Z1TGx4dUlDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlHUmxjSFJvSUZSb1pTQnRZWGhwYlhWdElISmxZM1Z5YzJsdmJpQmtaWEIwYUM1Y2JpQXFJRUJ3WVhKaGJTQjdZbTl2YkdWaGJuMGdXM0J5WldScFkyRjBaVDFwYzBac1lYUjBaVzVoWW14bFhTQlVhR1VnWm5WdVkzUnBiMjRnYVc1MmIydGxaQ0J3WlhJZ2FYUmxjbUYwYVc5dUxseHVJQ29nUUhCaGNtRnRJSHRpYjI5c1pXRnVmU0JiYVhOVGRISnBZM1JkSUZKbGMzUnlhV04wSUhSdklIWmhiSFZsY3lCMGFHRjBJSEJoYzNNZ1lIQnlaV1JwWTJGMFpXQWdZMmhsWTJ0ekxseHVJQ29nUUhCaGNtRnRJSHRCY25KaGVYMGdXM0psYzNWc2REMWJYVjBnVkdobElHbHVhWFJwWVd3Z2NtVnpkV3gwSUhaaGJIVmxMbHh1SUNvZ1FISmxkSFZ5Ym5NZ2UwRnljbUY1ZlNCU1pYUjFjbTV6SUhSb1pTQnVaWGNnWm14aGRIUmxibVZrSUdGeWNtRjVMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQmlZWE5sUm14aGRIUmxiaWhoY25KaGVTd2daR1Z3ZEdnc0lIQnlaV1JwWTJGMFpTd2dhWE5UZEhKcFkzUXNJSEpsYzNWc2RDa2dlMXh1SUNCMllYSWdhVzVrWlhnZ1BTQXRNU3hjYmlBZ0lDQWdJR3hsYm1kMGFDQTlJR0Z5Y21GNUxteGxibWQwYUR0Y2JseHVJQ0J3Y21Wa2FXTmhkR1VnZkh3Z0tIQnlaV1JwWTJGMFpTQTlJR2x6Um14aGRIUmxibUZpYkdVcE8xeHVJQ0J5WlhOMWJIUWdmSHdnS0hKbGMzVnNkQ0E5SUZ0ZEtUdGNibHh1SUNCM2FHbHNaU0FvS3l0cGJtUmxlQ0E4SUd4bGJtZDBhQ2tnZTF4dUlDQWdJSFpoY2lCMllXeDFaU0E5SUdGeWNtRjVXMmx1WkdWNFhUdGNiaUFnSUNCcFppQW9aR1Z3ZEdnZ1BpQXdJQ1ltSUhCeVpXUnBZMkYwWlNoMllXeDFaU2twSUh0Y2JpQWdJQ0FnSUdsbUlDaGtaWEIwYUNBK0lERXBJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1VtVmpkWEp6YVhabGJIa2dabXhoZEhSbGJpQmhjbkpoZVhNZ0tITjFjMk5sY0hScFlteGxJSFJ2SUdOaGJHd2djM1JoWTJzZ2JHbHRhWFJ6S1M1Y2JpQWdJQ0FnSUNBZ1ltRnpaVVpzWVhSMFpXNG9kbUZzZFdVc0lHUmxjSFJvSUMwZ01Td2djSEpsWkdsallYUmxMQ0JwYzFOMGNtbGpkQ3dnY21WemRXeDBLVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJR0Z5Y21GNVVIVnphQ2h5WlhOMWJIUXNJSFpoYkhWbEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tDRnBjMU4wY21samRDa2dlMXh1SUNBZ0lDQWdjbVZ6ZFd4MFczSmxjM1ZzZEM1c1pXNW5kR2hkSUQwZ2RtRnNkV1U3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWW1GelpVWnNZWFIwWlc0N1hHNGlMQ0oyWVhJZ1ltRnpaVVpzWVhSMFpXNGdQU0J5WlhGMWFYSmxLQ2N1TDE5aVlYTmxSbXhoZEhSbGJpY3BPMXh1WEc0dktpcGNiaUFxSUVac1lYUjBaVzV6SUdCaGNuSmhlV0FnWVNCemFXNW5iR1VnYkdWMlpXd2daR1ZsY0M1Y2JpQXFYRzRnS2lCQWMzUmhkR2xqWEc0Z0tpQkFiV1Z0WW1WeVQyWWdYMXh1SUNvZ1FITnBibU5sSURBdU1TNHdYRzRnS2lCQVkyRjBaV2R2Y25rZ1FYSnlZWGxjYmlBcUlFQndZWEpoYlNCN1FYSnlZWGw5SUdGeWNtRjVJRlJvWlNCaGNuSmhlU0IwYnlCbWJHRjBkR1Z1TGx4dUlDb2dRSEpsZEhWeWJuTWdlMEZ5Y21GNWZTQlNaWFIxY201eklIUm9aU0J1WlhjZ1pteGhkSFJsYm1Wa0lHRnljbUY1TGx4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxWEc0Z0tpQmZMbVpzWVhSMFpXNG9XekVzSUZzeUxDQmJNeXdnV3pSZFhTd2dOVjFkS1R0Y2JpQXFJQzh2SUQwK0lGc3hMQ0F5TENCYk15d2dXelJkWFN3Z05WMWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1pteGhkSFJsYmloaGNuSmhlU2tnZTF4dUlDQjJZWElnYkdWdVozUm9JRDBnWVhKeVlYa2dQVDBnYm5Wc2JDQS9JREFnT2lCaGNuSmhlUzVzWlc1bmRHZzdYRzRnSUhKbGRIVnliaUJzWlc1bmRHZ2dQeUJpWVhObFJteGhkSFJsYmloaGNuSmhlU3dnTVNrZ09pQmJYVHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1iR0YwZEdWdU8xeHVJaXdpZG1GeUlHWnNZWFIwWlc0Z1BTQnlaWEYxYVhKbEtDY3VMMlpzWVhSMFpXNG5LU3hjYmlBZ0lDQnZkbVZ5VW1WemRDQTlJSEpsY1hWcGNtVW9KeTR2WDI5MlpYSlNaWE4wSnlrc1hHNGdJQ0FnYzJWMFZHOVRkSEpwYm1jZ1BTQnlaWEYxYVhKbEtDY3VMMTl6WlhSVWIxTjBjbWx1WnljcE8xeHVYRzR2S2lwY2JpQXFJRUVnYzNCbFkybGhiR2w2WldRZ2RtVnljMmx2YmlCdlppQmdZbUZ6WlZKbGMzUmdJSGRvYVdOb0lHWnNZWFIwWlc1eklIUm9aU0J5WlhOMElHRnljbUY1TGx4dUlDcGNiaUFxSUVCd2NtbDJZWFJsWEc0Z0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQm1kVzVqSUZSb1pTQm1kVzVqZEdsdmJpQjBieUJoY0hCc2VTQmhJSEpsYzNRZ2NHRnlZVzFsZEdWeUlIUnZMbHh1SUNvZ1FISmxkSFZ5Ym5NZ2UwWjFibU4wYVc5dWZTQlNaWFIxY201eklIUm9aU0J1WlhjZ1puVnVZM1JwYjI0dVhHNGdLaTljYm1aMWJtTjBhVzl1SUdac1lYUlNaWE4wS0daMWJtTXBJSHRjYmlBZ2NtVjBkWEp1SUhObGRGUnZVM1J5YVc1bktHOTJaWEpTWlhOMEtHWjFibU1zSUhWdVpHVm1hVzVsWkN3Z1pteGhkSFJsYmlrc0lHWjFibU1nS3lBbkp5azdYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1pteGhkRkpsYzNRN1hHNGlMQ0oyWVhJZ1kzSmxZWFJsVjNKaGNDQTlJSEpsY1hWcGNtVW9KeTR2WDJOeVpXRjBaVmR5WVhBbktTeGNiaUFnSUNCbWJHRjBVbVZ6ZENBOUlISmxjWFZwY21Vb0p5NHZYMlpzWVhSU1pYTjBKeWs3WEc1Y2JpOHFLaUJWYzJWa0lIUnZJR052YlhCdmMyVWdZbWwwYldGemEzTWdabTl5SUdaMWJtTjBhVzl1SUcxbGRHRmtZWFJoTGlBcUwxeHVkbUZ5SUZkU1FWQmZVa1ZCVWtkZlJreEJSeUE5SURJMU5qdGNibHh1THlvcVhHNGdLaUJEY21WaGRHVnpJR0VnWm5WdVkzUnBiMjRnZEdoaGRDQnBiblp2YTJWeklHQm1kVzVqWUNCM2FYUm9JR0Z5WjNWdFpXNTBjeUJoY25KaGJtZGxaQ0JoWTJOdmNtUnBibWRjYmlBcUlIUnZJSFJvWlNCemNHVmphV1pwWldRZ1lHbHVaR1Y0WlhOZ0lIZG9aWEpsSUhSb1pTQmhjbWQxYldWdWRDQjJZV3gxWlNCaGRDQjBhR1VnWm1seWMzUWdhVzVrWlhnZ2FYTmNiaUFxSUhCeWIzWnBaR1ZrSUdGeklIUm9aU0JtYVhKemRDQmhjbWQxYldWdWRDd2dkR2hsSUdGeVozVnRaVzUwSUhaaGJIVmxJR0YwSUhSb1pTQnpaV052Ym1RZ2FXNWtaWGdnYVhOY2JpQXFJSEJ5YjNacFpHVmtJR0Z6SUhSb1pTQnpaV052Ym1RZ1lYSm5kVzFsYm5Rc0lHRnVaQ0J6YnlCdmJpNWNiaUFxWEc0Z0tpQkFjM1JoZEdsalhHNGdLaUJBYldWdFltVnlUMllnWDF4dUlDb2dRSE5wYm1ObElETXVNQzR3WEc0Z0tpQkFZMkYwWldkdmNua2dSblZ1WTNScGIyNWNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdaMWJtTWdWR2hsSUdaMWJtTjBhVzl1SUhSdklISmxZWEp5WVc1blpTQmhjbWQxYldWdWRITWdabTl5TGx4dUlDb2dRSEJoY21GdElIc3VMaTRvYm5WdFltVnlmRzUxYldKbGNsdGRLWDBnYVc1a1pYaGxjeUJVYUdVZ1lYSnlZVzVuWldRZ1lYSm5kVzFsYm5RZ2FXNWtaWGhsY3k1Y2JpQXFJRUJ5WlhSMWNtNXpJSHRHZFc1amRHbHZibjBnVW1WMGRYSnVjeUIwYUdVZ2JtVjNJR1oxYm1OMGFXOXVMbHh1SUNvZ1FHVjRZVzF3YkdWY2JpQXFYRzRnS2lCMllYSWdjbVZoY21kbFpDQTlJRjh1Y21WaGNtY29ablZ1WTNScGIyNG9ZU3dnWWl3Z1l5a2dlMXh1SUNvZ0lDQnlaWFIxY200Z1cyRXNJR0lzSUdOZE8xeHVJQ29nZlN3Z1d6SXNJREFzSURGZEtUdGNiaUFxWEc0Z0tpQnlaV0Z5WjJWa0tDZGlKeXdnSjJNbkxDQW5ZU2NwWEc0Z0tpQXZMeUE5UGlCYkoyRW5MQ0FuWWljc0lDZGpKMTFjYmlBcUwxeHVkbUZ5SUhKbFlYSm5JRDBnWm14aGRGSmxjM1FvWm5WdVkzUnBiMjRvWm5WdVl5d2dhVzVrWlhobGN5a2dlMXh1SUNCeVpYUjFjbTRnWTNKbFlYUmxWM0poY0NobWRXNWpMQ0JYVWtGUVgxSkZRVkpIWDBaTVFVY3NJSFZ1WkdWbWFXNWxaQ3dnZFc1a1pXWnBibVZrTENCMWJtUmxabWx1WldRc0lHbHVaR1Y0WlhNcE8xeHVmU2s3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2NtVmhjbWM3WEc0aUxDSjJZWElnWVhKeVlYbE5ZWEFnUFNCeVpYRjFhWEpsS0NjdUwxOWhjbkpoZVUxaGNDY3BMRnh1SUNBZ0lHTnZjSGxCY25KaGVTQTlJSEpsY1hWcGNtVW9KeTR2WDJOdmNIbEJjbkpoZVNjcExGeHVJQ0FnSUdselFYSnlZWGtnUFNCeVpYRjFhWEpsS0NjdUwybHpRWEp5WVhrbktTeGNiaUFnSUNCcGMxTjViV0p2YkNBOUlISmxjWFZwY21Vb0p5NHZhWE5UZVcxaWIyd25LU3hjYmlBZ0lDQnpkSEpwYm1kVWIxQmhkR2dnUFNCeVpYRjFhWEpsS0NjdUwxOXpkSEpwYm1kVWIxQmhkR2duS1N4Y2JpQWdJQ0IwYjB0bGVTQTlJSEpsY1hWcGNtVW9KeTR2WDNSdlMyVjVKeWtzWEc0Z0lDQWdkRzlUZEhKcGJtY2dQU0J5WlhGMWFYSmxLQ2N1TDNSdlUzUnlhVzVuSnlrN1hHNWNiaThxS2x4dUlDb2dRMjl1ZG1WeWRITWdZSFpoYkhWbFlDQjBieUJoSUhCeWIzQmxjblI1SUhCaGRHZ2dZWEp5WVhrdVhHNGdLbHh1SUNvZ1FITjBZWFJwWTF4dUlDb2dRRzFsYldKbGNrOW1JRjljYmlBcUlFQnphVzVqWlNBMExqQXVNRnh1SUNvZ1FHTmhkR1ZuYjNKNUlGVjBhV3hjYmlBcUlFQndZWEpoYlNCN0tuMGdkbUZzZFdVZ1ZHaGxJSFpoYkhWbElIUnZJR052Ym5abGNuUXVYRzRnS2lCQWNtVjBkWEp1Y3lCN1FYSnlZWGw5SUZKbGRIVnlibk1nZEdobElHNWxkeUJ3Y205d1pYSjBlU0J3WVhSb0lHRnljbUY1TGx4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxWEc0Z0tpQmZMblJ2VUdGMGFDZ25ZUzVpTG1NbktUdGNiaUFxSUM4dklEMCtJRnNuWVNjc0lDZGlKeXdnSjJNblhWeHVJQ3BjYmlBcUlGOHVkRzlRWVhSb0tDZGhXekJkTG1JdVl5Y3BPMXh1SUNvZ0x5OGdQVDRnV3lkaEp5d2dKekFuTENBbllpY3NJQ2RqSjExY2JpQXFMMXh1Wm5WdVkzUnBiMjRnZEc5UVlYUm9LSFpoYkhWbEtTQjdYRzRnSUdsbUlDaHBjMEZ5Y21GNUtIWmhiSFZsS1NrZ2UxeHVJQ0FnSUhKbGRIVnliaUJoY25KaGVVMWhjQ2gyWVd4MVpTd2dkRzlMWlhrcE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCcGMxTjViV0p2YkNoMllXeDFaU2tnUHlCYmRtRnNkV1ZkSURvZ1kyOXdlVUZ5Y21GNUtITjBjbWx1WjFSdlVHRjBhQ2gwYjFOMGNtbHVaeWgyWVd4MVpTa3BLVHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjBiMUJoZEdnN1hHNGlMQ0p0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHRjYmlBZ0oyRnllU2M2SUhKbGNYVnBjbVVvSnk0dUwyRnllU2NwTEZ4dUlDQW5ZWE56YVdkdUp6b2djbVZ4ZFdseVpTZ25MaTR2WDJKaGMyVkJjM05wWjI0bktTeGNiaUFnSjJOc2IyNWxKem9nY21WeGRXbHlaU2duTGk0dlkyeHZibVVuS1N4Y2JpQWdKMk4xY25KNUp6b2djbVZ4ZFdseVpTZ25MaTR2WTNWeWNua25LU3hjYmlBZ0oyWnZja1ZoWTJnbk9pQnlaWEYxYVhKbEtDY3VMaTlmWVhKeVlYbEZZV05vSnlrc1hHNGdJQ2RwYzBGeWNtRjVKem9nY21WeGRXbHlaU2duTGk0dmFYTkJjbkpoZVNjcExGeHVJQ0FuYVhORmNuSnZjaWM2SUhKbGNYVnBjbVVvSnk0dUwybHpSWEp5YjNJbktTeGNiaUFnSjJselJuVnVZM1JwYjI0bk9pQnlaWEYxYVhKbEtDY3VMaTlwYzBaMWJtTjBhVzl1Snlrc1hHNGdJQ2RwYzFkbFlXdE5ZWEFuT2lCeVpYRjFhWEpsS0NjdUxpOXBjMWRsWVd0TllYQW5LU3hjYmlBZ0oybDBaWEpoZEdWbEp6b2djbVZ4ZFdseVpTZ25MaTR2YVhSbGNtRjBaV1VuS1N4Y2JpQWdKMnRsZVhNbk9pQnlaWEYxYVhKbEtDY3VMaTlmWW1GelpVdGxlWE1uS1N4Y2JpQWdKM0psWVhKbkp6b2djbVZ4ZFdseVpTZ25MaTR2Y21WaGNtY25LU3hjYmlBZ0ozUnZTVzUwWldkbGNpYzZJSEpsY1hWcGNtVW9KeTR1TDNSdlNXNTBaV2RsY2ljcExGeHVJQ0FuZEc5UVlYUm9Kem9nY21WeGRXbHlaU2duTGk0dmRHOVFZWFJvSnlsY2JuMDdYRzRpTENKMllYSWdZbUZ6WlVOdmJuWmxjblFnUFNCeVpYRjFhWEpsS0NjdUwxOWlZWE5sUTI5dWRtVnlkQ2NwTEZ4dUlDQWdJSFYwYVd3Z1BTQnlaWEYxYVhKbEtDY3VMMTkxZEdsc0p5azdYRzVjYmk4cUtseHVJQ29nUTI5dWRtVnlkSE1nWUdaMWJtTmdJRzltSUdCdVlXMWxZQ0IwYnlCaGJpQnBiVzExZEdGaWJHVWdZWFYwYnkxamRYSnlhV1ZrSUdsMFpYSmhkR1ZsTFdacGNuTjBJR1JoZEdFdGJHRnpkRnh1SUNvZ2RtVnljMmx2YmlCM2FYUm9JR052Ym5abGNuTnBiMjRnWUc5d2RHbHZibk5nSUdGd2NHeHBaV1F1SUVsbUlHQnVZVzFsWUNCcGN5QmhiaUJ2WW1wbFkzUWdhWFJ6SUcxbGRHaHZaSE5jYmlBcUlIZHBiR3dnWW1VZ1kyOXVkbVZ5ZEdWa0xseHVJQ3BjYmlBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCdVlXMWxJRlJvWlNCdVlXMWxJRzltSUhSb1pTQm1kVzVqZEdsdmJpQjBieUIzY21Gd0xseHVJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnVzJaMWJtTmRJRlJvWlNCbWRXNWpkR2x2YmlCMGJ5QjNjbUZ3TGx4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlGdHZjSFJwYjI1elhTQlVhR1VnYjNCMGFXOXVjeUJ2WW1wbFkzUXVJRk5sWlNCZ1ltRnpaVU52Ym5abGNuUmdJR1p2Y2lCdGIzSmxJR1JsZEdGcGJITXVYRzRnS2lCQWNtVjBkWEp1Y3lCN1JuVnVZM1JwYjI1OFQySnFaV04wZlNCU1pYUjFjbTV6SUhSb1pTQmpiMjUyWlhKMFpXUWdablZ1WTNScGIyNGdiM0lnYjJKcVpXTjBMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQmpiMjUyWlhKMEtHNWhiV1VzSUdaMWJtTXNJRzl3ZEdsdmJuTXBJSHRjYmlBZ2NtVjBkWEp1SUdKaGMyVkRiMjUyWlhKMEtIVjBhV3dzSUc1aGJXVXNJR1oxYm1Nc0lHOXdkR2x2Ym5NcE8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdOdmJuWmxjblE3WEc0aUxDSXZLaXBjYmlBcUlFTnlaV0YwWlhNZ1lXNGdZWEp5WVhrZ2QybDBhQ0JoYkd3Z1ptRnNjMlY1SUhaaGJIVmxjeUJ5WlcxdmRtVmtMaUJVYUdVZ2RtRnNkV1Z6SUdCbVlXeHpaV0FzSUdCdWRXeHNZQ3hjYmlBcUlHQXdZQ3dnWUZ3aVhDSmdMQ0JnZFc1a1pXWnBibVZrWUN3Z1lXNWtJR0JPWVU1Z0lHRnlaU0JtWVd4elpYa3VYRzRnS2x4dUlDb2dRSE4wWVhScFkxeHVJQ29nUUcxbGJXSmxjazltSUY5Y2JpQXFJRUJ6YVc1alpTQXdMakV1TUZ4dUlDb2dRR05oZEdWbmIzSjVJRUZ5Y21GNVhHNGdLaUJBY0dGeVlXMGdlMEZ5Y21GNWZTQmhjbkpoZVNCVWFHVWdZWEp5WVhrZ2RHOGdZMjl0Y0dGamRDNWNiaUFxSUVCeVpYUjFjbTV6SUh0QmNuSmhlWDBnVW1WMGRYSnVjeUIwYUdVZ2JtVjNJR0Z5Y21GNUlHOW1JR1pwYkhSbGNtVmtJSFpoYkhWbGN5NWNiaUFxSUVCbGVHRnRjR3hsWEc0Z0tseHVJQ29nWHk1amIyMXdZV04wS0Zzd0xDQXhMQ0JtWVd4elpTd2dNaXdnSnljc0lETmRLVHRjYmlBcUlDOHZJRDArSUZzeExDQXlMQ0F6WFZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJqYjIxd1lXTjBLR0Z5Y21GNUtTQjdYRzRnSUhaaGNpQnBibVJsZUNBOUlDMHhMRnh1SUNBZ0lDQWdiR1Z1WjNSb0lEMGdZWEp5WVhrZ1BUMGdiblZzYkNBL0lEQWdPaUJoY25KaGVTNXNaVzVuZEdnc1hHNGdJQ0FnSUNCeVpYTkpibVJsZUNBOUlEQXNYRzRnSUNBZ0lDQnlaWE4xYkhRZ1BTQmJYVHRjYmx4dUlDQjNhR2xzWlNBb0t5dHBibVJsZUNBOElHeGxibWQwYUNrZ2UxeHVJQ0FnSUhaaGNpQjJZV3gxWlNBOUlHRnljbUY1VzJsdVpHVjRYVHRjYmlBZ0lDQnBaaUFvZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJSEpsYzNWc2RGdHlaWE5KYm1SbGVDc3JYU0E5SUhaaGJIVmxPMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQnlaWFIxY200Z2NtVnpkV3gwTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR052YlhCaFkzUTdYRzRpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUh0Y2JpQWdKMk5oY0NjNklHWmhiSE5sTEZ4dUlDQW5ZM1Z5Y25rbk9pQm1ZV3h6WlN4Y2JpQWdKMlpwZUdWa0p6b2dabUZzYzJVc1hHNGdJQ2RwYlcxMWRHRmliR1VuT2lCbVlXeHpaU3hjYmlBZ0ozSmxZWEpuSnpvZ1ptRnNjMlZjYm4wN1hHNGlMQ0oyWVhJZ1kyOXVkbVZ5ZENBOUlISmxjWFZwY21Vb0p5NHZZMjl1ZG1WeWRDY3BMRnh1SUNBZ0lHWjFibU1nUFNCamIyNTJaWEowS0NkamIyMXdZV04wSnl3Z2NtVnhkV2x5WlNnbkxpNHZZMjl0Y0dGamRDY3BMQ0J5WlhGMWFYSmxLQ2N1TDE5bVlXeHpaVTl3ZEdsdmJuTW5LU2s3WEc1Y2JtWjFibU11Y0d4aFkyVm9iMnhrWlhJZ1BTQnlaWEYxYVhKbEtDY3VMM0JzWVdObGFHOXNaR1Z5SnlrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU03WEc0aUxDSjJZWElnVEc5a1lYTm9WM0poY0hCbGNpQTlJSEpsY1hWcGNtVW9KeTR2WDB4dlpHRnphRmR5WVhCd1pYSW5LU3hjYmlBZ0lDQm1iR0YwVW1WemRDQTlJSEpsY1hWcGNtVW9KeTR2WDJac1lYUlNaWE4wSnlrc1hHNGdJQ0FnWjJWMFJHRjBZU0E5SUhKbGNYVnBjbVVvSnk0dlgyZGxkRVJoZEdFbktTeGNiaUFnSUNCblpYUkdkVzVqVG1GdFpTQTlJSEpsY1hWcGNtVW9KeTR2WDJkbGRFWjFibU5PWVcxbEp5a3NYRzRnSUNBZ2FYTkJjbkpoZVNBOUlISmxjWFZwY21Vb0p5NHZhWE5CY25KaGVTY3BMRnh1SUNBZ0lHbHpUR0Y2YVdGaWJHVWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGMweGhlbWxoWW14bEp5azdYRzVjYmk4cUtpQkZjbkp2Y2lCdFpYTnpZV2RsSUdOdmJuTjBZVzUwY3k0Z0tpOWNiblpoY2lCR1ZVNURYMFZTVWs5U1gxUkZXRlFnUFNBblJYaHdaV04wWldRZ1lTQm1kVzVqZEdsdmJpYzdYRzVjYmk4cUtpQlZjMlZrSUhSdklHTnZiWEJ2YzJVZ1ltbDBiV0Z6YTNNZ1ptOXlJR1oxYm1OMGFXOXVJRzFsZEdGa1lYUmhMaUFxTDF4dWRtRnlJRmRTUVZCZlExVlNVbGxmUmt4QlJ5QTlJRGdzWEc0Z0lDQWdWMUpCVUY5UVFWSlVTVUZNWDBaTVFVY2dQU0F6TWl4Y2JpQWdJQ0JYVWtGUVgwRlNXVjlHVEVGSElEMGdNVEk0TEZ4dUlDQWdJRmRTUVZCZlVrVkJVa2RmUmt4QlJ5QTlJREkxTmp0Y2JseHVMeW9xWEc0Z0tpQkRjbVZoZEdWeklHRWdZRjh1Wm14dmQyQWdiM0lnWUY4dVpteHZkMUpwWjJoMFlDQm1kVzVqZEdsdmJpNWNiaUFxWEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ29nUUhCaGNtRnRJSHRpYjI5c1pXRnVmU0JiWm5KdmJWSnBaMmgwWFNCVGNHVmphV1o1SUdsMFpYSmhkR2x1WnlCbWNtOXRJSEpwWjJoMElIUnZJR3hsWm5RdVhHNGdLaUJBY21WMGRYSnVjeUI3Um5WdVkzUnBiMjU5SUZKbGRIVnlibk1nZEdobElHNWxkeUJtYkc5M0lHWjFibU4wYVc5dUxseHVJQ292WEc1bWRXNWpkR2x2YmlCamNtVmhkR1ZHYkc5M0tHWnliMjFTYVdkb2RDa2dlMXh1SUNCeVpYUjFjbTRnWm14aGRGSmxjM1FvWm5WdVkzUnBiMjRvWm5WdVkzTXBJSHRjYmlBZ0lDQjJZWElnYkdWdVozUm9JRDBnWm5WdVkzTXViR1Z1WjNSb0xGeHVJQ0FnSUNBZ0lDQnBibVJsZUNBOUlHeGxibWQwYUN4Y2JpQWdJQ0FnSUNBZ2NISmxjbVZ4SUQwZ1RHOWtZWE5vVjNKaGNIQmxjaTV3Y205MGIzUjVjR1V1ZEdoeWRUdGNibHh1SUNBZ0lHbG1JQ2htY205dFVtbG5hSFFwSUh0Y2JpQWdJQ0FnSUdaMWJtTnpMbkpsZG1WeWMyVW9LVHRjYmlBZ0lDQjlYRzRnSUNBZ2QyaHBiR1VnS0dsdVpHVjRMUzBwSUh0Y2JpQWdJQ0FnSUhaaGNpQm1kVzVqSUQwZ1puVnVZM05iYVc1a1pYaGRPMXh1SUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJtZFc1aklDRTlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaEdWVTVEWDBWU1VrOVNYMVJGV0ZRcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2FXWWdLSEJ5WlhKbGNTQW1KaUFoZDNKaGNIQmxjaUFtSmlCblpYUkdkVzVqVG1GdFpTaG1kVzVqS1NBOVBTQW5kM0poY0hCbGNpY3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlIZHlZWEJ3WlhJZ1BTQnVaWGNnVEc5a1lYTm9WM0poY0hCbGNpaGJYU3dnZEhKMVpTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUdsdVpHVjRJRDBnZDNKaGNIQmxjaUEvSUdsdVpHVjRJRG9nYkdWdVozUm9PMXh1SUNBZ0lIZG9hV3hsSUNncksybHVaR1Y0SUR3Z2JHVnVaM1JvS1NCN1hHNGdJQ0FnSUNCbWRXNWpJRDBnWm5WdVkzTmJhVzVrWlhoZE8xeHVYRzRnSUNBZ0lDQjJZWElnWm5WdVkwNWhiV1VnUFNCblpYUkdkVzVqVG1GdFpTaG1kVzVqS1N4Y2JpQWdJQ0FnSUNBZ0lDQmtZWFJoSUQwZ1puVnVZMDVoYldVZ1BUMGdKM2R5WVhCd1pYSW5JRDhnWjJWMFJHRjBZU2htZFc1aktTQTZJSFZ1WkdWbWFXNWxaRHRjYmx4dUlDQWdJQ0FnYVdZZ0tHUmhkR0VnSmlZZ2FYTk1ZWHBwWVdKc1pTaGtZWFJoV3pCZEtTQW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVnN4WFNBOVBTQW9WMUpCVUY5QlVsbGZSa3hCUnlCOElGZFNRVkJmUTFWU1VsbGZSa3hCUnlCOElGZFNRVkJmVUVGU1ZFbEJURjlHVEVGSElId2dWMUpCVUY5U1JVRlNSMTlHVEVGSEtTQW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lXUmhkR0ZiTkYwdWJHVnVaM1JvSUNZbUlHUmhkR0ZiT1YwZ1BUMGdNVnh1SUNBZ0lDQWdJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ0lDQjNjbUZ3Y0dWeUlEMGdkM0poY0hCbGNsdG5aWFJHZFc1alRtRnRaU2hrWVhSaFd6QmRLVjB1WVhCd2JIa29kM0poY0hCbGNpd2daR0YwWVZzelhTazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQjNjbUZ3Y0dWeUlEMGdLR1oxYm1NdWJHVnVaM1JvSUQwOUlERWdKaVlnYVhOTVlYcHBZV0pzWlNobWRXNWpLU2xjYmlBZ0lDQWdJQ0FnSUNBL0lIZHlZWEJ3WlhKYlpuVnVZMDVoYldWZEtDbGNiaUFnSUNBZ0lDQWdJQ0E2SUhkeVlYQndaWEl1ZEdoeWRTaG1kVzVqS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdkbUZ5SUdGeVozTWdQU0JoY21kMWJXVnVkSE1zWEc0Z0lDQWdJQ0FnSUNBZ2RtRnNkV1VnUFNCaGNtZHpXekJkTzF4dVhHNGdJQ0FnSUNCcFppQW9kM0poY0hCbGNpQW1KaUJoY21kekxteGxibWQwYUNBOVBTQXhJQ1ltSUdselFYSnlZWGtvZG1Gc2RXVXBLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIzY21Gd2NHVnlMbkJzWVc1MEtIWmhiSFZsS1M1MllXeDFaU2dwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnZG1GeUlHbHVaR1Y0SUQwZ01DeGNiaUFnSUNBZ0lDQWdJQ0J5WlhOMWJIUWdQU0JzWlc1bmRHZ2dQeUJtZFc1amMxdHBibVJsZUYwdVlYQndiSGtvZEdocGN5d2dZWEpuY3lrZ09pQjJZV3gxWlR0Y2JseHVJQ0FnSUNBZ2QyaHBiR1VnS0NzcmFXNWtaWGdnUENCc1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVnpkV3gwSUQwZ1puVnVZM05iYVc1a1pYaGRMbU5oYkd3b2RHaHBjeXdnY21WemRXeDBLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNGdJQ0FnZlR0Y2JpQWdmU2s3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdZM0psWVhSbFJteHZkenRjYmlJc0luWmhjaUJqY21WaGRHVkdiRzkzSUQwZ2NtVnhkV2x5WlNnbkxpOWZZM0psWVhSbFJteHZkeWNwTzF4dVhHNHZLaXBjYmlBcUlFTnlaV0YwWlhNZ1lTQm1kVzVqZEdsdmJpQjBhR0YwSUhKbGRIVnlibk1nZEdobElISmxjM1ZzZENCdlppQnBiblp2YTJsdVp5QjBhR1VnWjJsMlpXNGdablZ1WTNScGIyNXpYRzRnS2lCM2FYUm9JSFJvWlNCZ2RHaHBjMkFnWW1sdVpHbHVaeUJ2WmlCMGFHVWdZM0psWVhSbFpDQm1kVzVqZEdsdmJpd2dkMmhsY21VZ1pXRmphQ0J6ZFdOalpYTnphWFpsWEc0Z0tpQnBiblp2WTJGMGFXOXVJR2x6SUhOMWNIQnNhV1ZrSUhSb1pTQnlaWFIxY200Z2RtRnNkV1VnYjJZZ2RHaGxJSEJ5WlhacGIzVnpMbHh1SUNwY2JpQXFJRUJ6ZEdGMGFXTmNiaUFxSUVCdFpXMWlaWEpQWmlCZlhHNGdLaUJBYzJsdVkyVWdNeTR3TGpCY2JpQXFJRUJqWVhSbFoyOXllU0JWZEdsc1hHNGdLaUJBY0dGeVlXMGdleTR1TGloR2RXNWpkR2x2Ym54R2RXNWpkR2x2Ymx0ZEtYMGdXMloxYm1OelhTQlVhR1VnWm5WdVkzUnBiMjV6SUhSdklHbHVkbTlyWlM1Y2JpQXFJRUJ5WlhSMWNtNXpJSHRHZFc1amRHbHZibjBnVW1WMGRYSnVjeUIwYUdVZ2JtVjNJR052YlhCdmMybDBaU0JtZFc1amRHbHZiaTVjYmlBcUlFQnpaV1VnWHk1bWJHOTNVbWxuYUhSY2JpQXFJRUJsZUdGdGNHeGxYRzRnS2x4dUlDb2dablZ1WTNScGIyNGdjM0YxWVhKbEtHNHBJSHRjYmlBcUlDQWdjbVYwZFhKdUlHNGdLaUJ1TzF4dUlDb2dmVnh1SUNwY2JpQXFJSFpoY2lCaFpHUlRjWFZoY21VZ1BTQmZMbVpzYjNjb1cxOHVZV1JrTENCemNYVmhjbVZkS1R0Y2JpQXFJR0ZrWkZOeGRXRnlaU2d4TENBeUtUdGNiaUFxSUM4dklEMCtJRGxjYmlBcUwxeHVkbUZ5SUdac2IzY2dQU0JqY21WaGRHVkdiRzkzS0NrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdabXh2ZHp0Y2JpSXNJblpoY2lCamIyNTJaWEowSUQwZ2NtVnhkV2x5WlNnbkxpOWpiMjUyWlhKMEp5a3NYRzRnSUNBZ1puVnVZeUE5SUdOdmJuWmxjblFvSjJac2IzY25MQ0J5WlhGMWFYSmxLQ2N1TGk5bWJHOTNKeWtwTzF4dVhHNW1kVzVqTG5Cc1lXTmxhRzlzWkdWeUlEMGdjbVZ4ZFdseVpTZ25MaTl3YkdGalpXaHZiR1JsY2ljcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqTzF4dUlpd2lkbUZ5SUdKaGMyVkZZV05vSUQwZ2NtVnhkV2x5WlNnbkxpOWZZbUZ6WlVWaFkyZ25LU3hjYmlBZ0lDQnBjMEZ5Y21GNVRHbHJaU0E5SUhKbGNYVnBjbVVvSnk0dmFYTkJjbkpoZVV4cGEyVW5LVHRjYmx4dUx5b3FYRzRnS2lCVWFHVWdZbUZ6WlNCcGJYQnNaVzFsYm5SaGRHbHZiaUJ2WmlCZ1h5NXRZWEJnSUhkcGRHaHZkWFFnYzNWd2NHOXlkQ0JtYjNJZ2FYUmxjbUYwWldVZ2MyaHZjblJvWVc1a2N5NWNiaUFxWEc0Z0tpQkFjSEpwZG1GMFpWeHVJQ29nUUhCaGNtRnRJSHRCY25KaGVYeFBZbXBsWTNSOUlHTnZiR3hsWTNScGIyNGdWR2hsSUdOdmJHeGxZM1JwYjI0Z2RHOGdhWFJsY21GMFpTQnZkbVZ5TGx4dUlDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdhWFJsY21GMFpXVWdWR2hsSUdaMWJtTjBhVzl1SUdsdWRtOXJaV1FnY0dWeUlHbDBaWEpoZEdsdmJpNWNiaUFxSUVCeVpYUjFjbTV6SUh0QmNuSmhlWDBnVW1WMGRYSnVjeUIwYUdVZ2JtVjNJRzFoY0hCbFpDQmhjbkpoZVM1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnWW1GelpVMWhjQ2hqYjJ4c1pXTjBhVzl1TENCcGRHVnlZWFJsWlNrZ2UxeHVJQ0IyWVhJZ2FXNWtaWGdnUFNBdE1TeGNiaUFnSUNBZ0lISmxjM1ZzZENBOUlHbHpRWEp5WVhsTWFXdGxLR052Ykd4bFkzUnBiMjRwSUQ4Z1FYSnlZWGtvWTI5c2JHVmpkR2x2Ymk1c1pXNW5kR2dwSURvZ1cxMDdYRzVjYmlBZ1ltRnpaVVZoWTJnb1kyOXNiR1ZqZEdsdmJpd2dablZ1WTNScGIyNG9kbUZzZFdVc0lHdGxlU3dnWTI5c2JHVmpkR2x2YmlrZ2UxeHVJQ0FnSUhKbGMzVnNkRnNySzJsdVpHVjRYU0E5SUdsMFpYSmhkR1ZsS0haaGJIVmxMQ0JyWlhrc0lHTnZiR3hsWTNScGIyNHBPMXh1SUNCOUtUdGNiaUFnY21WMGRYSnVJSEpsYzNWc2REdGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCaVlYTmxUV0Z3TzF4dUlpd2lMeW9xWEc0Z0tpQlVhR1VnWW1GelpTQnBiWEJzWlcxbGJuUmhkR2x2YmlCdlppQmdYeTV6YjNKMFFubGdJSGRvYVdOb0lIVnpaWE1nWUdOdmJYQmhjbVZ5WUNCMGJ5QmtaV1pwYm1VZ2RHaGxYRzRnS2lCemIzSjBJRzl5WkdWeUlHOW1JR0JoY25KaGVXQWdZVzVrSUhKbGNHeGhZMlZ6SUdOeWFYUmxjbWxoSUc5aWFtVmpkSE1nZDJsMGFDQjBhR1ZwY2lCamIzSnlaWE53YjI1a2FXNW5YRzRnS2lCMllXeDFaWE11WEc0Z0tseHVJQ29nUUhCeWFYWmhkR1ZjYmlBcUlFQndZWEpoYlNCN1FYSnlZWGw5SUdGeWNtRjVJRlJvWlNCaGNuSmhlU0IwYnlCemIzSjBMbHh1SUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym4wZ1kyOXRjR0Z5WlhJZ1ZHaGxJR1oxYm1OMGFXOXVJSFJ2SUdSbFptbHVaU0J6YjNKMElHOXlaR1Z5TGx4dUlDb2dRSEpsZEhWeWJuTWdlMEZ5Y21GNWZTQlNaWFIxY201eklHQmhjbkpoZVdBdVhHNGdLaTljYm1aMWJtTjBhVzl1SUdKaGMyVlRiM0owUW5rb1lYSnlZWGtzSUdOdmJYQmhjbVZ5S1NCN1hHNGdJSFpoY2lCc1pXNW5kR2dnUFNCaGNuSmhlUzVzWlc1bmRHZzdYRzVjYmlBZ1lYSnlZWGt1YzI5eWRDaGpiMjF3WVhKbGNpazdYRzRnSUhkb2FXeGxJQ2hzWlc1bmRHZ3RMU2tnZTF4dUlDQWdJR0Z5Y21GNVcyeGxibWQwYUYwZ1BTQmhjbkpoZVZ0c1pXNW5kR2hkTG5aaGJIVmxPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQmhjbkpoZVR0Y2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JpWVhObFUyOXlkRUo1TzF4dUlpd2lkbUZ5SUdselUzbHRZbTlzSUQwZ2NtVnhkV2x5WlNnbkxpOXBjMU41YldKdmJDY3BPMXh1WEc0dktpcGNiaUFxSUVOdmJYQmhjbVZ6SUhaaGJIVmxjeUIwYnlCemIzSjBJSFJvWlcwZ2FXNGdZWE5qWlc1a2FXNW5JRzl5WkdWeUxseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaUJBY0dGeVlXMGdleXA5SUhaaGJIVmxJRlJvWlNCMllXeDFaU0IwYnlCamIyMXdZWEpsTGx4dUlDb2dRSEJoY21GdElIc3FmU0J2ZEdobGNpQlVhR1VnYjNSb1pYSWdkbUZzZFdVZ2RHOGdZMjl0Y0dGeVpTNWNiaUFxSUVCeVpYUjFjbTV6SUh0dWRXMWlaWEo5SUZKbGRIVnlibk1nZEdobElITnZjblFnYjNKa1pYSWdhVzVrYVdOaGRHOXlJR1p2Y2lCZ2RtRnNkV1ZnTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJqYjIxd1lYSmxRWE5qWlc1a2FXNW5LSFpoYkhWbExDQnZkR2hsY2lrZ2UxeHVJQ0JwWmlBb2RtRnNkV1VnSVQwOUlHOTBhR1Z5S1NCN1hHNGdJQ0FnZG1GeUlIWmhiRWx6UkdWbWFXNWxaQ0E5SUhaaGJIVmxJQ0U5UFNCMWJtUmxabWx1WldRc1hHNGdJQ0FnSUNBZ0lIWmhiRWx6VG5Wc2JDQTlJSFpoYkhWbElEMDlQU0J1ZFd4c0xGeHVJQ0FnSUNBZ0lDQjJZV3hKYzFKbFpteGxlR2wyWlNBOUlIWmhiSFZsSUQwOVBTQjJZV3gxWlN4Y2JpQWdJQ0FnSUNBZ2RtRnNTWE5UZVcxaWIyd2dQU0JwYzFONWJXSnZiQ2gyWVd4MVpTazdYRzVjYmlBZ0lDQjJZWElnYjNSb1NYTkVaV1pwYm1Wa0lEMGdiM1JvWlhJZ0lUMDlJSFZ1WkdWbWFXNWxaQ3hjYmlBZ0lDQWdJQ0FnYjNSb1NYTk9kV3hzSUQwZ2IzUm9aWElnUFQwOUlHNTFiR3dzWEc0Z0lDQWdJQ0FnSUc5MGFFbHpVbVZtYkdWNGFYWmxJRDBnYjNSb1pYSWdQVDA5SUc5MGFHVnlMRnh1SUNBZ0lDQWdJQ0J2ZEdoSmMxTjViV0p2YkNBOUlHbHpVM2x0WW05c0tHOTBhR1Z5S1R0Y2JseHVJQ0FnSUdsbUlDZ29JVzkwYUVselRuVnNiQ0FtSmlBaGIzUm9TWE5UZVcxaWIyd2dKaVlnSVhaaGJFbHpVM2x0WW05c0lDWW1JSFpoYkhWbElENGdiM1JvWlhJcElIeDhYRzRnSUNBZ0lDQWdJQ2gyWVd4SmMxTjViV0p2YkNBbUppQnZkR2hKYzBSbFptbHVaV1FnSmlZZ2IzUm9TWE5TWldac1pYaHBkbVVnSmlZZ0lXOTBhRWx6VG5Wc2JDQW1KaUFoYjNSb1NYTlRlVzFpYjJ3cElIeDhYRzRnSUNBZ0lDQWdJQ2gyWVd4SmMwNTFiR3dnSmlZZ2IzUm9TWE5FWldacGJtVmtJQ1ltSUc5MGFFbHpVbVZtYkdWNGFYWmxLU0I4ZkZ4dUlDQWdJQ0FnSUNBb0lYWmhiRWx6UkdWbWFXNWxaQ0FtSmlCdmRHaEpjMUpsWm14bGVHbDJaU2tnZkh4Y2JpQWdJQ0FnSUNBZ0lYWmhiRWx6VW1WbWJHVjRhWFpsS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnTVR0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0NnaGRtRnNTWE5PZFd4c0lDWW1JQ0YyWVd4SmMxTjViV0p2YkNBbUppQWhiM1JvU1hOVGVXMWliMndnSmlZZ2RtRnNkV1VnUENCdmRHaGxjaWtnZkh4Y2JpQWdJQ0FnSUNBZ0tHOTBhRWx6VTNsdFltOXNJQ1ltSUhaaGJFbHpSR1ZtYVc1bFpDQW1KaUIyWVd4SmMxSmxabXhsZUdsMlpTQW1KaUFoZG1Gc1NYTk9kV3hzSUNZbUlDRjJZV3hKYzFONWJXSnZiQ2tnZkh4Y2JpQWdJQ0FnSUNBZ0tHOTBhRWx6VG5Wc2JDQW1KaUIyWVd4SmMwUmxabWx1WldRZ0ppWWdkbUZzU1hOU1pXWnNaWGhwZG1VcElIeDhYRzRnSUNBZ0lDQWdJQ2doYjNSb1NYTkVaV1pwYm1Wa0lDWW1JSFpoYkVselVtVm1iR1Y0YVhabEtTQjhmRnh1SUNBZ0lDQWdJQ0FoYjNSb1NYTlNaV1pzWlhocGRtVXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQXRNVHRjYmlBZ0lDQjlYRzRnSUgxY2JpQWdjbVYwZFhKdUlEQTdYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1kyOXRjR0Z5WlVGelkyVnVaR2x1Wnp0Y2JpSXNJblpoY2lCamIyMXdZWEpsUVhOalpXNWthVzVuSUQwZ2NtVnhkV2x5WlNnbkxpOWZZMjl0Y0dGeVpVRnpZMlZ1WkdsdVp5Y3BPMXh1WEc0dktpcGNiaUFxSUZWelpXUWdZbmtnWUY4dWIzSmtaWEpDZVdBZ2RHOGdZMjl0Y0dGeVpTQnRkV3gwYVhCc1pTQndjbTl3WlhKMGFXVnpJRzltSUdFZ2RtRnNkV1VnZEc4Z1lXNXZkR2hsY2x4dUlDb2dZVzVrSUhOMFlXSnNaU0J6YjNKMElIUm9aVzB1WEc0Z0tseHVJQ29nU1dZZ1lHOXlaR1Z5YzJBZ2FYTWdkVzV6Y0dWamFXWnBaV1FzSUdGc2JDQjJZV3gxWlhNZ1lYSmxJSE52Y25SbFpDQnBiaUJoYzJObGJtUnBibWNnYjNKa1pYSXVJRTkwYUdWeWQybHpaU3hjYmlBcUlITndaV05wWm5rZ1lXNGdiM0prWlhJZ2IyWWdYQ0prWlhOalhDSWdabTl5SUdSbGMyTmxibVJwYm1jZ2IzSWdYQ0poYzJOY0lpQm1iM0lnWVhOalpXNWthVzVuSUhOdmNuUWdiM0prWlhKY2JpQXFJRzltSUdOdmNuSmxjM0J2Ym1ScGJtY2dkbUZzZFdWekxseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdiMkpxWldOMElGUm9aU0J2WW1wbFkzUWdkRzhnWTI5dGNHRnlaUzVjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCdmRHaGxjaUJVYUdVZ2IzUm9aWElnYjJKcVpXTjBJSFJ2SUdOdmJYQmhjbVV1WEc0Z0tpQkFjR0Z5WVcwZ2UySnZiMnhsWVc1YlhYeHpkSEpwYm1kYlhYMGdiM0prWlhKeklGUm9aU0J2Y21SbGNpQjBieUJ6YjNKMElHSjVJR1p2Y2lCbFlXTm9JSEJ5YjNCbGNuUjVMbHh1SUNvZ1FISmxkSFZ5Ym5NZ2UyNTFiV0psY24wZ1VtVjBkWEp1Y3lCMGFHVWdjMjl5ZENCdmNtUmxjaUJwYm1ScFkyRjBiM0lnWm05eUlHQnZZbXBsWTNSZ0xseHVJQ292WEc1bWRXNWpkR2x2YmlCamIyMXdZWEpsVFhWc2RHbHdiR1VvYjJKcVpXTjBMQ0J2ZEdobGNpd2diM0prWlhKektTQjdYRzRnSUhaaGNpQnBibVJsZUNBOUlDMHhMRnh1SUNBZ0lDQWdiMkpxUTNKcGRHVnlhV0VnUFNCdlltcGxZM1F1WTNKcGRHVnlhV0VzWEc0Z0lDQWdJQ0J2ZEdoRGNtbDBaWEpwWVNBOUlHOTBhR1Z5TG1OeWFYUmxjbWxoTEZ4dUlDQWdJQ0FnYkdWdVozUm9JRDBnYjJKcVEzSnBkR1Z5YVdFdWJHVnVaM1JvTEZ4dUlDQWdJQ0FnYjNKa1pYSnpUR1Z1WjNSb0lEMGdiM0prWlhKekxteGxibWQwYUR0Y2JseHVJQ0IzYUdsc1pTQW9LeXRwYm1SbGVDQThJR3hsYm1kMGFDa2dlMXh1SUNBZ0lIWmhjaUJ5WlhOMWJIUWdQU0JqYjIxd1lYSmxRWE5qWlc1a2FXNW5LRzlpYWtOeWFYUmxjbWxoVzJsdVpHVjRYU3dnYjNSb1EzSnBkR1Z5YVdGYmFXNWtaWGhkS1R0Y2JpQWdJQ0JwWmlBb2NtVnpkV3gwS1NCN1hHNGdJQ0FnSUNCcFppQW9hVzVrWlhnZ1BqMGdiM0prWlhKelRHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVpYTjFiSFE3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0IyWVhJZ2IzSmtaWElnUFNCdmNtUmxjbk5iYVc1a1pYaGRPMXh1SUNBZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZENBcUlDaHZjbVJsY2lBOVBTQW5aR1Z6WXljZ1B5QXRNU0E2SURFcE8xeHVJQ0FnSUgxY2JpQWdmVnh1SUNBdkx5QkdhWGhsY3lCaGJpQmdRWEp5WVhramMyOXlkR0FnWW5WbklHbHVJSFJvWlNCS1V5QmxibWRwYm1VZ1pXMWlaV1JrWldRZ2FXNGdRV1J2WW1VZ1lYQndiR2xqWVhScGIyNXpYRzRnSUM4dklIUm9ZWFFnWTJGMWMyVnpJR2wwTENCMWJtUmxjaUJqWlhKMFlXbHVJR05wY21OMWJYTjBZVzVqWlhNc0lIUnZJSEJ5YjNacFpHVWdkR2hsSUhOaGJXVWdkbUZzZFdVZ1ptOXlYRzRnSUM4dklHQnZZbXBsWTNSZ0lHRnVaQ0JnYjNSb1pYSmdMaUJUWldVZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwycGhjMmhyWlc1aGN5OTFibVJsY25OamIzSmxMM0IxYkd3dk1USTBOMXh1SUNBdkx5Qm1iM0lnYlc5eVpTQmtaWFJoYVd4ekxseHVJQ0F2TDF4dUlDQXZMeUJVYUdseklHRnNjMjhnWlc1emRYSmxjeUJoSUhOMFlXSnNaU0J6YjNKMElHbHVJRlk0SUdGdVpDQnZkR2hsY2lCbGJtZHBibVZ6TGx4dUlDQXZMeUJUWldVZ2FIUjBjSE02THk5aWRXZHpMbU5vY205dGFYVnRMbTl5Wnk5d0wzWTRMMmx6YzNWbGN5OWtaWFJoYVd3L2FXUTlPVEFnWm05eUlHMXZjbVVnWkdWMFlXbHNjeTVjYmlBZ2NtVjBkWEp1SUc5aWFtVmpkQzVwYm1SbGVDQXRJRzkwYUdWeUxtbHVaR1Y0TzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR052YlhCaGNtVk5kV3gwYVhCc1pUdGNiaUlzSW5aaGNpQmhjbkpoZVUxaGNDQTlJSEpsY1hWcGNtVW9KeTR2WDJGeWNtRjVUV0Z3Snlrc1hHNGdJQ0FnWW1GelpVZGxkQ0E5SUhKbGNYVnBjbVVvSnk0dlgySmhjMlZIWlhRbktTeGNiaUFnSUNCaVlYTmxTWFJsY21GMFpXVWdQU0J5WlhGMWFYSmxLQ2N1TDE5aVlYTmxTWFJsY21GMFpXVW5LU3hjYmlBZ0lDQmlZWE5sVFdGd0lEMGdjbVZ4ZFdseVpTZ25MaTlmWW1GelpVMWhjQ2NwTEZ4dUlDQWdJR0poYzJWVGIzSjBRbmtnUFNCeVpYRjFhWEpsS0NjdUwxOWlZWE5sVTI5eWRFSjVKeWtzWEc0Z0lDQWdZbUZ6WlZWdVlYSjVJRDBnY21WeGRXbHlaU2duTGk5ZlltRnpaVlZ1WVhKNUp5a3NYRzRnSUNBZ1kyOXRjR0Z5WlUxMWJIUnBjR3hsSUQwZ2NtVnhkV2x5WlNnbkxpOWZZMjl0Y0dGeVpVMTFiSFJwY0d4bEp5a3NYRzRnSUNBZ2FXUmxiblJwZEhrZ1BTQnlaWEYxYVhKbEtDY3VMMmxrWlc1MGFYUjVKeWtzWEc0Z0lDQWdhWE5CY25KaGVTQTlJSEpsY1hWcGNtVW9KeTR2YVhOQmNuSmhlU2NwTzF4dVhHNHZLaXBjYmlBcUlGUm9aU0JpWVhObElHbHRjR3hsYldWdWRHRjBhVzl1SUc5bUlHQmZMbTl5WkdWeVFubGdJSGRwZEdodmRYUWdjR0Z5WVcwZ1ozVmhjbVJ6TGx4dUlDcGNiaUFxSUVCd2NtbDJZWFJsWEc0Z0tpQkFjR0Z5WVcwZ2UwRnljbUY1ZkU5aWFtVmpkSDBnWTI5c2JHVmpkR2x2YmlCVWFHVWdZMjlzYkdWamRHbHZiaUIwYnlCcGRHVnlZWFJsSUc5MlpYSXVYRzRnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1VzExOFQySnFaV04wVzExOGMzUnlhVzVuVzExOUlHbDBaWEpoZEdWbGN5QlVhR1VnYVhSbGNtRjBaV1Z6SUhSdklITnZjblFnWW5rdVhHNGdLaUJBY0dGeVlXMGdlM04wY21sdVoxdGRmU0J2Y21SbGNuTWdWR2hsSUhOdmNuUWdiM0prWlhKeklHOW1JR0JwZEdWeVlYUmxaWE5nTGx4dUlDb2dRSEpsZEhWeWJuTWdlMEZ5Y21GNWZTQlNaWFIxY201eklIUm9aU0J1WlhjZ2MyOXlkR1ZrSUdGeWNtRjVMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQmlZWE5sVDNKa1pYSkNlU2hqYjJ4c1pXTjBhVzl1TENCcGRHVnlZWFJsWlhNc0lHOXlaR1Z5Y3lrZ2UxeHVJQ0JwWmlBb2FYUmxjbUYwWldWekxteGxibWQwYUNrZ2UxeHVJQ0FnSUdsMFpYSmhkR1ZsY3lBOUlHRnljbUY1VFdGd0tHbDBaWEpoZEdWbGN5d2dablZ1WTNScGIyNG9hWFJsY21GMFpXVXBJSHRjYmlBZ0lDQWdJR2xtSUNocGMwRnljbUY1S0dsMFpYSmhkR1ZsS1NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1puVnVZM1JwYjI0b2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ltRnpaVWRsZENoMllXeDFaU3dnYVhSbGNtRjBaV1V1YkdWdVozUm9JRDA5UFNBeElEOGdhWFJsY21GMFpXVmJNRjBnT2lCcGRHVnlZWFJsWlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lISmxkSFZ5YmlCcGRHVnlZWFJsWlR0Y2JpQWdJQ0I5S1R0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNCcGRHVnlZWFJsWlhNZ1BTQmJhV1JsYm5ScGRIbGRPMXh1SUNCOVhHNWNiaUFnZG1GeUlHbHVaR1Y0SUQwZ0xURTdYRzRnSUdsMFpYSmhkR1ZsY3lBOUlHRnljbUY1VFdGd0tHbDBaWEpoZEdWbGN5d2dZbUZ6WlZWdVlYSjVLR0poYzJWSmRHVnlZWFJsWlNrcE8xeHVYRzRnSUhaaGNpQnlaWE4xYkhRZ1BTQmlZWE5sVFdGd0tHTnZiR3hsWTNScGIyNHNJR1oxYm1OMGFXOXVLSFpoYkhWbExDQnJaWGtzSUdOdmJHeGxZM1JwYjI0cElIdGNiaUFnSUNCMllYSWdZM0pwZEdWeWFXRWdQU0JoY25KaGVVMWhjQ2hwZEdWeVlYUmxaWE1zSUdaMWJtTjBhVzl1S0dsMFpYSmhkR1ZsS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYVhSbGNtRjBaV1VvZG1Gc2RXVXBPMXh1SUNBZ0lIMHBPMXh1SUNBZ0lISmxkSFZ5YmlCN0lDZGpjbWwwWlhKcFlTYzZJR055YVhSbGNtbGhMQ0FuYVc1a1pYZ25PaUFySzJsdVpHVjRMQ0FuZG1Gc2RXVW5PaUIyWVd4MVpTQjlPMXh1SUNCOUtUdGNibHh1SUNCeVpYUjFjbTRnWW1GelpWTnZjblJDZVNoeVpYTjFiSFFzSUdaMWJtTjBhVzl1S0c5aWFtVmpkQ3dnYjNSb1pYSXBJSHRjYmlBZ0lDQnlaWFIxY200Z1kyOXRjR0Z5WlUxMWJIUnBjR3hsS0c5aWFtVmpkQ3dnYjNSb1pYSXNJRzl5WkdWeWN5azdYRzRnSUgwcE8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdKaGMyVlBjbVJsY2tKNU8xeHVJaXdpZG1GeUlHSmhjMlZHYkdGMGRHVnVJRDBnY21WeGRXbHlaU2duTGk5ZlltRnpaVVpzWVhSMFpXNG5LU3hjYmlBZ0lDQmlZWE5sVDNKa1pYSkNlU0E5SUhKbGNYVnBjbVVvSnk0dlgySmhjMlZQY21SbGNrSjVKeWtzWEc0Z0lDQWdZbUZ6WlZKbGMzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5aVlYTmxVbVZ6ZENjcExGeHVJQ0FnSUdselNYUmxjbUYwWldWRFlXeHNJRDBnY21WeGRXbHlaU2duTGk5ZmFYTkpkR1Z5WVhSbFpVTmhiR3duS1R0Y2JseHVMeW9xWEc0Z0tpQkRjbVZoZEdWeklHRnVJR0Z5Y21GNUlHOW1JR1ZzWlcxbGJuUnpMQ0J6YjNKMFpXUWdhVzRnWVhOalpXNWthVzVuSUc5eVpHVnlJR0o1SUhSb1pTQnlaWE4xYkhSeklHOW1YRzRnS2lCeWRXNXVhVzVuSUdWaFkyZ2daV3hsYldWdWRDQnBiaUJoSUdOdmJHeGxZM1JwYjI0Z2RHaHlkU0JsWVdOb0lHbDBaWEpoZEdWbExpQlVhR2x6SUcxbGRHaHZaRnh1SUNvZ2NHVnlabTl5YlhNZ1lTQnpkR0ZpYkdVZ2MyOXlkQ3dnZEdoaGRDQnBjeXdnYVhRZ2NISmxjMlZ5ZG1WeklIUm9aU0J2Y21sbmFXNWhiQ0J6YjNKMElHOXlaR1Z5SUc5bVhHNGdLaUJsY1hWaGJDQmxiR1Z0Wlc1MGN5NGdWR2hsSUdsMFpYSmhkR1ZsY3lCaGNtVWdhVzUyYjJ0bFpDQjNhWFJvSUc5dVpTQmhjbWQxYldWdWREb2dLSFpoYkhWbEtTNWNiaUFxWEc0Z0tpQkFjM1JoZEdsalhHNGdLaUJBYldWdFltVnlUMllnWDF4dUlDb2dRSE5wYm1ObElEQXVNUzR3WEc0Z0tpQkFZMkYwWldkdmNua2dRMjlzYkdWamRHbHZibHh1SUNvZ1FIQmhjbUZ0SUh0QmNuSmhlWHhQWW1wbFkzUjlJR052Ykd4bFkzUnBiMjRnVkdobElHTnZiR3hsWTNScGIyNGdkRzhnYVhSbGNtRjBaU0J2ZG1WeUxseHVJQ29nUUhCaGNtRnRJSHN1TGk0b1JuVnVZM1JwYjI1OFJuVnVZM1JwYjI1YlhTbDlJRnRwZEdWeVlYUmxaWE05VzE4dWFXUmxiblJwZEhsZFhWeHVJQ29nSUZSb1pTQnBkR1Z5WVhSbFpYTWdkRzhnYzI5eWRDQmllUzVjYmlBcUlFQnlaWFIxY201eklIdEJjbkpoZVgwZ1VtVjBkWEp1Y3lCMGFHVWdibVYzSUhOdmNuUmxaQ0JoY25KaGVTNWNiaUFxSUVCbGVHRnRjR3hsWEc0Z0tseHVJQ29nZG1GeUlIVnpaWEp6SUQwZ1cxeHVJQ29nSUNCN0lDZDFjMlZ5SnpvZ0oyWnlaV1FuTENBZ0lDZGhaMlVuT2lBME9DQjlMRnh1SUNvZ0lDQjdJQ2QxYzJWeUp6b2dKMkpoY201bGVTY3NJQ2RoWjJVbk9pQXpOaUI5TEZ4dUlDb2dJQ0I3SUNkMWMyVnlKem9nSjJaeVpXUW5MQ0FnSUNkaFoyVW5PaUF6TUNCOUxGeHVJQ29nSUNCN0lDZDFjMlZ5SnpvZ0oySmhjbTVsZVNjc0lDZGhaMlVuT2lBek5DQjlYRzRnS2lCZE8xeHVJQ3BjYmlBcUlGOHVjMjl5ZEVKNUtIVnpaWEp6TENCYlpuVnVZM1JwYjI0b2J5a2dleUJ5WlhSMWNtNGdieTUxYzJWeU95QjlYU2s3WEc0Z0tpQXZMeUE5UGlCdlltcGxZM1J6SUdadmNpQmJXeWRpWVhKdVpYa25MQ0F6Tmwwc0lGc25ZbUZ5Ym1WNUp5d2dNelJkTENCYkoyWnlaV1FuTENBME9GMHNJRnNuWm5KbFpDY3NJRE13WFYxY2JpQXFYRzRnS2lCZkxuTnZjblJDZVNoMWMyVnljeXdnV3lkMWMyVnlKeXdnSjJGblpTZGRLVHRjYmlBcUlDOHZJRDArSUc5aWFtVmpkSE1nWm05eUlGdGJKMkpoY201bGVTY3NJRE0wWFN3Z1d5ZGlZWEp1WlhrbkxDQXpObDBzSUZzblpuSmxaQ2NzSURNd1hTd2dXeWRtY21Wa0p5d2dORGhkWFZ4dUlDb3ZYRzUyWVhJZ2MyOXlkRUo1SUQwZ1ltRnpaVkpsYzNRb1puVnVZM1JwYjI0b1kyOXNiR1ZqZEdsdmJpd2dhWFJsY21GMFpXVnpLU0I3WEc0Z0lHbG1JQ2hqYjJ4c1pXTjBhVzl1SUQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdXMTA3WEc0Z0lIMWNiaUFnZG1GeUlHeGxibWQwYUNBOUlHbDBaWEpoZEdWbGN5NXNaVzVuZEdnN1hHNGdJR2xtSUNoc1pXNW5kR2dnUGlBeElDWW1JR2x6U1hSbGNtRjBaV1ZEWVd4c0tHTnZiR3hsWTNScGIyNHNJR2wwWlhKaGRHVmxjMXN3WFN3Z2FYUmxjbUYwWldWeld6RmRLU2tnZTF4dUlDQWdJR2wwWlhKaGRHVmxjeUE5SUZ0ZE8xeHVJQ0I5SUdWc2MyVWdhV1lnS0d4bGJtZDBhQ0ErSURJZ0ppWWdhWE5KZEdWeVlYUmxaVU5oYkd3b2FYUmxjbUYwWldWeld6QmRMQ0JwZEdWeVlYUmxaWE5iTVYwc0lHbDBaWEpoZEdWbGMxc3lYU2twSUh0Y2JpQWdJQ0JwZEdWeVlYUmxaWE1nUFNCYmFYUmxjbUYwWldWeld6QmRYVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdZbUZ6WlU5eVpHVnlRbmtvWTI5c2JHVmpkR2x2Yml3Z1ltRnpaVVpzWVhSMFpXNG9hWFJsY21GMFpXVnpMQ0F4S1N3Z1cxMHBPMXh1ZlNrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdjMjl5ZEVKNU8xeHVJaXdpZG1GeUlHTnZiblpsY25RZ1BTQnlaWEYxYVhKbEtDY3VMMk52Ym5abGNuUW5LU3hjYmlBZ0lDQm1kVzVqSUQwZ1kyOXVkbVZ5ZENnbmMyOXlkRUo1Snl3Z2NtVnhkV2x5WlNnbkxpNHZjMjl5ZEVKNUp5a3BPMXh1WEc1bWRXNWpMbkJzWVdObGFHOXNaR1Z5SUQwZ2NtVnhkV2x5WlNnbkxpOXdiR0ZqWldodmJHUmxjaWNwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpPMXh1SWl3aUx5b3FYRzRnS2lCVWFHbHpJR1oxYm1OMGFXOXVJR2x6SUd4cGEyVWdZR0Z5Y21GNVNXNWpiSFZrWlhOZ0lHVjRZMlZ3ZENCMGFHRjBJR2wwSUdGalkyVndkSE1nWVNCamIyMXdZWEpoZEc5eUxseHVJQ3BjYmlBcUlFQndjbWwyWVhSbFhHNGdLaUJBY0dGeVlXMGdlMEZ5Y21GNWZTQmJZWEp5WVhsZElGUm9aU0JoY25KaGVTQjBieUJwYm5Od1pXTjBMbHh1SUNvZ1FIQmhjbUZ0SUhzcWZTQjBZWEpuWlhRZ1ZHaGxJSFpoYkhWbElIUnZJSE5sWVhKamFDQm1iM0l1WEc0Z0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQmpiMjF3WVhKaGRHOXlJRlJvWlNCamIyMXdZWEpoZEc5eUlHbHVkbTlyWldRZ2NHVnlJR1ZzWlcxbGJuUXVYRzRnS2lCQWNtVjBkWEp1Y3lCN1ltOXZiR1ZoYm4wZ1VtVjBkWEp1Y3lCZ2RISjFaV0FnYVdZZ1lIUmhjbWRsZEdBZ2FYTWdabTkxYm1Rc0lHVnNjMlVnWUdaaGJITmxZQzVjYmlBcUwxeHVablZ1WTNScGIyNGdZWEp5WVhsSmJtTnNkV1JsYzFkcGRHZ29ZWEp5WVhrc0lIWmhiSFZsTENCamIyMXdZWEpoZEc5eUtTQjdYRzRnSUhaaGNpQnBibVJsZUNBOUlDMHhMRnh1SUNBZ0lDQWdiR1Z1WjNSb0lEMGdZWEp5WVhrZ1BUMGdiblZzYkNBL0lEQWdPaUJoY25KaGVTNXNaVzVuZEdnN1hHNWNiaUFnZDJocGJHVWdLQ3NyYVc1a1pYZ2dQQ0JzWlc1bmRHZ3BJSHRjYmlBZ0lDQnBaaUFvWTI5dGNHRnlZWFJ2Y2loMllXeDFaU3dnWVhKeVlYbGJhVzVrWlhoZEtTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JoY25KaGVVbHVZMngxWkdWelYybDBhRHRjYmlJc0luWmhjaUJUWlhRZ1BTQnlaWEYxYVhKbEtDY3VMMTlUWlhRbktTeGNiaUFnSUNCdWIyOXdJRDBnY21WeGRXbHlaU2duTGk5dWIyOXdKeWtzWEc0Z0lDQWdjMlYwVkc5QmNuSmhlU0E5SUhKbGNYVnBjbVVvSnk0dlgzTmxkRlJ2UVhKeVlYa25LVHRjYmx4dUx5b3FJRlZ6WldRZ1lYTWdjbVZtWlhKbGJtTmxjeUJtYjNJZ2RtRnlhVzkxY3lCZ1RuVnRZbVZ5WUNCamIyNXpkR0Z1ZEhNdUlDb3ZYRzUyWVhJZ1NVNUdTVTVKVkZrZ1BTQXhJQzhnTUR0Y2JseHVMeW9xWEc0Z0tpQkRjbVZoZEdWeklHRWdjMlYwSUc5aWFtVmpkQ0J2WmlCZ2RtRnNkV1Z6WUM1Y2JpQXFYRzRnS2lCQWNISnBkbUYwWlZ4dUlDb2dRSEJoY21GdElIdEJjbkpoZVgwZ2RtRnNkV1Z6SUZSb1pTQjJZV3gxWlhNZ2RHOGdZV1JrSUhSdklIUm9aU0J6WlhRdVhHNGdLaUJBY21WMGRYSnVjeUI3VDJKcVpXTjBmU0JTWlhSMWNtNXpJSFJvWlNCdVpYY2djMlYwTGx4dUlDb3ZYRzUyWVhJZ1kzSmxZWFJsVTJWMElEMGdJU2hUWlhRZ0ppWWdLREVnTHlCelpYUlViMEZ5Y21GNUtHNWxkeUJUWlhRb1d5d3RNRjBwS1ZzeFhTa2dQVDBnU1U1R1NVNUpWRmtwSUQ4Z2JtOXZjQ0E2SUdaMWJtTjBhVzl1S0haaGJIVmxjeWtnZTF4dUlDQnlaWFIxY200Z2JtVjNJRk5sZENoMllXeDFaWE1wTzF4dWZUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JqY21WaGRHVlRaWFE3WEc0aUxDSjJZWElnVTJWMFEyRmphR1VnUFNCeVpYRjFhWEpsS0NjdUwxOVRaWFJEWVdOb1pTY3BMRnh1SUNBZ0lHRnljbUY1U1c1amJIVmtaWE1nUFNCeVpYRjFhWEpsS0NjdUwxOWhjbkpoZVVsdVkyeDFaR1Z6Snlrc1hHNGdJQ0FnWVhKeVlYbEpibU5zZFdSbGMxZHBkR2dnUFNCeVpYRjFhWEpsS0NjdUwxOWhjbkpoZVVsdVkyeDFaR1Z6VjJsMGFDY3BMRnh1SUNBZ0lHTmhZMmhsU0dGeklEMGdjbVZ4ZFdseVpTZ25MaTlmWTJGamFHVklZWE1uS1N4Y2JpQWdJQ0JqY21WaGRHVlRaWFFnUFNCeVpYRjFhWEpsS0NjdUwxOWpjbVZoZEdWVFpYUW5LU3hjYmlBZ0lDQnpaWFJVYjBGeWNtRjVJRDBnY21WeGRXbHlaU2duTGk5ZmMyVjBWRzlCY25KaGVTY3BPMXh1WEc0dktpb2dWWE5sWkNCaGN5QjBhR1VnYzJsNlpTQjBieUJsYm1GaWJHVWdiR0Z5WjJVZ1lYSnlZWGtnYjNCMGFXMXBlbUYwYVc5dWN5NGdLaTljYm5aaGNpQk1RVkpIUlY5QlVsSkJXVjlUU1ZwRklEMGdNakF3TzF4dVhHNHZLaXBjYmlBcUlGUm9aU0JpWVhObElHbHRjR3hsYldWdWRHRjBhVzl1SUc5bUlHQmZMblZ1YVhGQ2VXQWdkMmwwYUc5MWRDQnpkWEJ3YjNKMElHWnZjaUJwZEdWeVlYUmxaU0J6YUc5eWRHaGhibVJ6TGx4dUlDcGNiaUFxSUVCd2NtbDJZWFJsWEc0Z0tpQkFjR0Z5WVcwZ2UwRnljbUY1ZlNCaGNuSmhlU0JVYUdVZ1lYSnlZWGtnZEc4Z2FXNXpjR1ZqZEM1Y2JpQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJRnRwZEdWeVlYUmxaVjBnVkdobElHbDBaWEpoZEdWbElHbHVkbTlyWldRZ2NHVnlJR1ZzWlcxbGJuUXVYRzRnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCYlkyOXRjR0Z5WVhSdmNsMGdWR2hsSUdOdmJYQmhjbUYwYjNJZ2FXNTJiMnRsWkNCd1pYSWdaV3hsYldWdWRDNWNiaUFxSUVCeVpYUjFjbTV6SUh0QmNuSmhlWDBnVW1WMGRYSnVjeUIwYUdVZ2JtVjNJR1IxY0d4cFkyRjBaU0JtY21WbElHRnljbUY1TGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJpWVhObFZXNXBjU2hoY25KaGVTd2dhWFJsY21GMFpXVXNJR052YlhCaGNtRjBiM0lwSUh0Y2JpQWdkbUZ5SUdsdVpHVjRJRDBnTFRFc1hHNGdJQ0FnSUNCcGJtTnNkV1JsY3lBOUlHRnljbUY1U1c1amJIVmtaWE1zWEc0Z0lDQWdJQ0JzWlc1bmRHZ2dQU0JoY25KaGVTNXNaVzVuZEdnc1hHNGdJQ0FnSUNCcGMwTnZiVzF2YmlBOUlIUnlkV1VzWEc0Z0lDQWdJQ0J5WlhOMWJIUWdQU0JiWFN4Y2JpQWdJQ0FnSUhObFpXNGdQU0J5WlhOMWJIUTdYRzVjYmlBZ2FXWWdLR052YlhCaGNtRjBiM0lwSUh0Y2JpQWdJQ0JwYzBOdmJXMXZiaUE5SUdaaGJITmxPMXh1SUNBZ0lHbHVZMngxWkdWeklEMGdZWEp5WVhsSmJtTnNkV1JsYzFkcGRHZzdYRzRnSUgxY2JpQWdaV3h6WlNCcFppQW9iR1Z1WjNSb0lENDlJRXhCVWtkRlgwRlNVa0ZaWDFOSldrVXBJSHRjYmlBZ0lDQjJZWElnYzJWMElEMGdhWFJsY21GMFpXVWdQeUJ1ZFd4c0lEb2dZM0psWVhSbFUyVjBLR0Z5Y21GNUtUdGNiaUFnSUNCcFppQW9jMlYwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYzJWMFZHOUJjbkpoZVNoelpYUXBPMXh1SUNBZ0lIMWNiaUFnSUNCcGMwTnZiVzF2YmlBOUlHWmhiSE5sTzF4dUlDQWdJR2x1WTJ4MVpHVnpJRDBnWTJGamFHVklZWE03WEc0Z0lDQWdjMlZsYmlBOUlHNWxkeUJUWlhSRFlXTm9aVHRjYmlBZ2ZWeHVJQ0JsYkhObElIdGNiaUFnSUNCelpXVnVJRDBnYVhSbGNtRjBaV1VnUHlCYlhTQTZJSEpsYzNWc2REdGNiaUFnZlZ4dUlDQnZkWFJsY2pwY2JpQWdkMmhwYkdVZ0tDc3JhVzVrWlhnZ1BDQnNaVzVuZEdncElIdGNiaUFnSUNCMllYSWdkbUZzZFdVZ1BTQmhjbkpoZVZ0cGJtUmxlRjBzWEc0Z0lDQWdJQ0FnSUdOdmJYQjFkR1ZrSUQwZ2FYUmxjbUYwWldVZ1B5QnBkR1Z5WVhSbFpTaDJZV3gxWlNrZ09pQjJZV3gxWlR0Y2JseHVJQ0FnSUhaaGJIVmxJRDBnS0dOdmJYQmhjbUYwYjNJZ2ZId2dkbUZzZFdVZ0lUMDlJREFwSUQ4Z2RtRnNkV1VnT2lBd08xeHVJQ0FnSUdsbUlDaHBjME52YlcxdmJpQW1KaUJqYjIxd2RYUmxaQ0E5UFQwZ1kyOXRjSFYwWldRcElIdGNiaUFnSUNBZ0lIWmhjaUJ6WldWdVNXNWtaWGdnUFNCelpXVnVMbXhsYm1kMGFEdGNiaUFnSUNBZ0lIZG9hV3hsSUNoelpXVnVTVzVrWlhndExTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2MyVmxibHR6WldWdVNXNWtaWGhkSUQwOVBTQmpiMjF3ZFhSbFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuUnBiblZsSUc5MWRHVnlPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JwWmlBb2FYUmxjbUYwWldVcElIdGNiaUFnSUNBZ0lDQWdjMlZsYmk1d2RYTm9LR052YlhCMWRHVmtLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSEpsYzNWc2RDNXdkWE5vS0haaGJIVmxLVHRjYmlBZ0lDQjlYRzRnSUNBZ1pXeHpaU0JwWmlBb0lXbHVZMngxWkdWektITmxaVzRzSUdOdmJYQjFkR1ZrTENCamIyMXdZWEpoZEc5eUtTa2dlMXh1SUNBZ0lDQWdhV1lnS0hObFpXNGdJVDA5SUhKbGMzVnNkQ2tnZTF4dUlDQWdJQ0FnSUNCelpXVnVMbkIxYzJnb1kyOXRjSFYwWldRcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2NtVnpkV3gwTG5CMWMyZ29kbUZzZFdVcE8xeHVJQ0FnSUgxY2JpQWdmVnh1SUNCeVpYUjFjbTRnY21WemRXeDBPMXh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHSmhjMlZWYm1seE8xeHVJaXdpZG1GeUlHSmhjMlZKZEdWeVlYUmxaU0E5SUhKbGNYVnBjbVVvSnk0dlgySmhjMlZKZEdWeVlYUmxaU2NwTEZ4dUlDQWdJR0poYzJWVmJtbHhJRDBnY21WeGRXbHlaU2duTGk5ZlltRnpaVlZ1YVhFbktUdGNibHh1THlvcVhHNGdLaUJVYUdseklHMWxkR2h2WkNCcGN5QnNhV3RsSUdCZkxuVnVhWEZnSUdWNFkyVndkQ0IwYUdGMElHbDBJR0ZqWTJWd2RITWdZR2wwWlhKaGRHVmxZQ0IzYUdsamFDQnBjMXh1SUNvZ2FXNTJiMnRsWkNCbWIzSWdaV0ZqYUNCbGJHVnRaVzUwSUdsdUlHQmhjbkpoZVdBZ2RHOGdaMlZ1WlhKaGRHVWdkR2hsSUdOeWFYUmxjbWx2YmlCaWVTQjNhR2xqYUZ4dUlDb2dkVzVwY1hWbGJtVnpjeUJwY3lCamIyMXdkWFJsWkM0Z1ZHaGxJRzl5WkdWeUlHOW1JSEpsYzNWc2RDQjJZV3gxWlhNZ2FYTWdaR1YwWlhKdGFXNWxaQ0JpZVNCMGFHVmNiaUFxSUc5eVpHVnlJSFJvWlhrZ2IyTmpkWElnYVc0Z2RHaGxJR0Z5Y21GNUxpQlVhR1VnYVhSbGNtRjBaV1VnYVhNZ2FXNTJiMnRsWkNCM2FYUm9JRzl1WlNCaGNtZDFiV1Z1ZERwY2JpQXFJQ2gyWVd4MVpTa3VYRzRnS2x4dUlDb2dRSE4wWVhScFkxeHVJQ29nUUcxbGJXSmxjazltSUY5Y2JpQXFJRUJ6YVc1alpTQTBMakF1TUZ4dUlDb2dRR05oZEdWbmIzSjVJRUZ5Y21GNVhHNGdLaUJBY0dGeVlXMGdlMEZ5Y21GNWZTQmhjbkpoZVNCVWFHVWdZWEp5WVhrZ2RHOGdhVzV6Y0dWamRDNWNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUZ0cGRHVnlZWFJsWlQxZkxtbGtaVzUwYVhSNVhTQlVhR1VnYVhSbGNtRjBaV1VnYVc1MmIydGxaQ0J3WlhJZ1pXeGxiV1Z1ZEM1Y2JpQXFJRUJ5WlhSMWNtNXpJSHRCY25KaGVYMGdVbVYwZFhKdWN5QjBhR1VnYm1WM0lHUjFjR3hwWTJGMFpTQm1jbVZsSUdGeWNtRjVMbHh1SUNvZ1FHVjRZVzF3YkdWY2JpQXFYRzRnS2lCZkxuVnVhWEZDZVNoYk1pNHhMQ0F4TGpJc0lESXVNMTBzSUUxaGRHZ3VabXh2YjNJcE8xeHVJQ29nTHk4Z1BUNGdXekl1TVN3Z01TNHlYVnh1SUNwY2JpQXFJQzh2SUZSb1pTQmdYeTV3Y205d1pYSjBlV0FnYVhSbGNtRjBaV1VnYzJodmNuUm9ZVzVrTGx4dUlDb2dYeTUxYm1seFFua29XM3NnSjNnbk9pQXhJSDBzSUhzZ0ozZ25PaUF5SUgwc0lIc2dKM2duT2lBeElIMWRMQ0FuZUNjcE8xeHVJQ29nTHk4Z1BUNGdXM3NnSjNnbk9pQXhJSDBzSUhzZ0ozZ25PaUF5SUgxZFhHNGdLaTljYm1aMWJtTjBhVzl1SUhWdWFYRkNlU2hoY25KaGVTd2dhWFJsY21GMFpXVXBJSHRjYmlBZ2NtVjBkWEp1SUNoaGNuSmhlU0FtSmlCaGNuSmhlUzVzWlc1bmRHZ3BJRDhnWW1GelpWVnVhWEVvWVhKeVlYa3NJR0poYzJWSmRHVnlZWFJsWlNocGRHVnlZWFJsWlN3Z01pa3BJRG9nVzEwN1hHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnZFc1cGNVSjVPMXh1SWl3aWRtRnlJR052Ym5abGNuUWdQU0J5WlhGMWFYSmxLQ2N1TDJOdmJuWmxjblFuS1N4Y2JpQWdJQ0JtZFc1aklEMGdZMjl1ZG1WeWRDZ25kVzVwY1VKNUp5d2djbVZ4ZFdseVpTZ25MaTR2ZFc1cGNVSjVKeWtwTzF4dVhHNW1kVzVqTG5Cc1lXTmxhRzlzWkdWeUlEMGdjbVZ4ZFdseVpTZ25MaTl3YkdGalpXaHZiR1JsY2ljcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqTzF4dUlpd2lkbUZ5SUdKaGMyVkJjM05wWjI1V1lXeDFaU0E5SUhKbGNYVnBjbVVvSnk0dlgySmhjMlZCYzNOcFoyNVdZV3gxWlNjcExGeHVJQ0FnSUdKaGMyVkdiM0pQZDI0Z1BTQnlaWEYxYVhKbEtDY3VMMTlpWVhObFJtOXlUM2R1Snlrc1hHNGdJQ0FnWW1GelpVbDBaWEpoZEdWbElEMGdjbVZ4ZFdseVpTZ25MaTlmWW1GelpVbDBaWEpoZEdWbEp5azdYRzVjYmk4cUtseHVJQ29nVkdobElHOXdjRzl6YVhSbElHOW1JR0JmTG0xaGNGWmhiSFZsYzJBN0lIUm9hWE1nYldWMGFHOWtJR055WldGMFpYTWdZVzRnYjJKcVpXTjBJSGRwZEdnZ2RHaGxYRzRnS2lCellXMWxJSFpoYkhWbGN5QmhjeUJnYjJKcVpXTjBZQ0JoYm1RZ2EyVjVjeUJuWlc1bGNtRjBaV1FnWW5rZ2NuVnVibWx1WnlCbFlXTm9JRzkzYmlCbGJuVnRaWEpoWW14bFhHNGdLaUJ6ZEhKcGJtY2dhMlY1WldRZ2NISnZjR1Z5ZEhrZ2IyWWdZRzlpYW1WamRHQWdkR2h5ZFNCZ2FYUmxjbUYwWldWZ0xpQlVhR1VnYVhSbGNtRjBaV1VnYVhNZ2FXNTJiMnRsWkZ4dUlDb2dkMmwwYUNCMGFISmxaU0JoY21kMWJXVnVkSE02SUNoMllXeDFaU3dnYTJWNUxDQnZZbXBsWTNRcExseHVJQ3BjYmlBcUlFQnpkR0YwYVdOY2JpQXFJRUJ0WlcxaVpYSlBaaUJmWEc0Z0tpQkFjMmx1WTJVZ015NDRMakJjYmlBcUlFQmpZWFJsWjI5eWVTQlBZbXBsWTNSY2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnZZbXBsWTNRZ1ZHaGxJRzlpYW1WamRDQjBieUJwZEdWeVlYUmxJRzkyWlhJdVhHNGdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0JiYVhSbGNtRjBaV1U5WHk1cFpHVnVkR2wwZVYwZ1ZHaGxJR1oxYm1OMGFXOXVJR2x1ZG05clpXUWdjR1Z5SUdsMFpYSmhkR2x2Ymk1Y2JpQXFJRUJ5WlhSMWNtNXpJSHRQWW1wbFkzUjlJRkpsZEhWeWJuTWdkR2hsSUc1bGR5QnRZWEJ3WldRZ2IySnFaV04wTGx4dUlDb2dRSE5sWlNCZkxtMWhjRlpoYkhWbGMxeHVJQ29nUUdWNFlXMXdiR1ZjYmlBcVhHNGdLaUJmTG0xaGNFdGxlWE1vZXlBbllTYzZJREVzSUNkaUp6b2dNaUI5TENCbWRXNWpkR2x2YmloMllXeDFaU3dnYTJWNUtTQjdYRzRnS2lBZ0lISmxkSFZ5YmlCclpYa2dLeUIyWVd4MVpUdGNiaUFxSUgwcE8xeHVJQ29nTHk4Z1BUNGdleUFuWVRFbk9pQXhMQ0FuWWpJbk9pQXlJSDFjYmlBcUwxeHVablZ1WTNScGIyNGdiV0Z3UzJWNWN5aHZZbXBsWTNRc0lHbDBaWEpoZEdWbEtTQjdYRzRnSUhaaGNpQnlaWE4xYkhRZ1BTQjdmVHRjYmlBZ2FYUmxjbUYwWldVZ1BTQmlZWE5sU1hSbGNtRjBaV1VvYVhSbGNtRjBaV1VzSURNcE8xeHVYRzRnSUdKaGMyVkdiM0pQZDI0b2IySnFaV04wTENCbWRXNWpkR2x2YmloMllXeDFaU3dnYTJWNUxDQnZZbXBsWTNRcElIdGNiaUFnSUNCaVlYTmxRWE56YVdkdVZtRnNkV1VvY21WemRXeDBMQ0JwZEdWeVlYUmxaU2gyWVd4MVpTd2dhMlY1TENCdlltcGxZM1FwTENCMllXeDFaU2s3WEc0Z0lIMHBPMXh1SUNCeVpYUjFjbTRnY21WemRXeDBPMXh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHMWhjRXRsZVhNN1hHNGlMQ0oyWVhJZ1lYTnphV2R1Vm1Gc2RXVWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGMzTnBaMjVXWVd4MVpTY3BMRnh1SUNBZ0lHTmhjM1JRWVhSb0lEMGdjbVZ4ZFdseVpTZ25MaTlmWTJGemRGQmhkR2duS1N4Y2JpQWdJQ0JwYzBsdVpHVjRJRDBnY21WeGRXbHlaU2duTGk5ZmFYTkpibVJsZUNjcExGeHVJQ0FnSUdselQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOXBjMDlpYW1WamRDY3BMRnh1SUNBZ0lIUnZTMlY1SUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzlMWlhrbktUdGNibHh1THlvcVhHNGdLaUJVYUdVZ1ltRnpaU0JwYlhCc1pXMWxiblJoZEdsdmJpQnZaaUJnWHk1elpYUmdMbHh1SUNwY2JpQXFJRUJ3Y21sMllYUmxYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnYjJKcVpXTjBJRlJvWlNCdlltcGxZM1FnZEc4Z2JXOWthV1o1TGx4dUlDb2dRSEJoY21GdElIdEJjbkpoZVh4emRISnBibWQ5SUhCaGRHZ2dWR2hsSUhCaGRHZ2diMllnZEdobElIQnliM0JsY25SNUlIUnZJSE5sZEM1Y2JpQXFJRUJ3WVhKaGJTQjdLbjBnZG1Gc2RXVWdWR2hsSUhaaGJIVmxJSFJ2SUhObGRDNWNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUZ0amRYTjBiMjFwZW1WeVhTQlVhR1VnWm5WdVkzUnBiMjRnZEc4Z1kzVnpkRzl0YVhwbElIQmhkR2dnWTNKbFlYUnBiMjR1WEc0Z0tpQkFjbVYwZFhKdWN5QjdUMkpxWldOMGZTQlNaWFIxY201eklHQnZZbXBsWTNSZ0xseHVJQ292WEc1bWRXNWpkR2x2YmlCaVlYTmxVMlYwS0c5aWFtVmpkQ3dnY0dGMGFDd2dkbUZzZFdVc0lHTjFjM1J2YldsNlpYSXBJSHRjYmlBZ2FXWWdLQ0ZwYzA5aWFtVmpkQ2h2WW1wbFkzUXBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHOWlhbVZqZER0Y2JpQWdmVnh1SUNCd1lYUm9JRDBnWTJGemRGQmhkR2dvY0dGMGFDd2diMkpxWldOMEtUdGNibHh1SUNCMllYSWdhVzVrWlhnZ1BTQXRNU3hjYmlBZ0lDQWdJR3hsYm1kMGFDQTlJSEJoZEdndWJHVnVaM1JvTEZ4dUlDQWdJQ0FnYkdGemRFbHVaR1Y0SUQwZ2JHVnVaM1JvSUMwZ01TeGNiaUFnSUNBZ0lHNWxjM1JsWkNBOUlHOWlhbVZqZER0Y2JseHVJQ0IzYUdsc1pTQW9ibVZ6ZEdWa0lDRTlJRzUxYkd3Z0ppWWdLeXRwYm1SbGVDQThJR3hsYm1kMGFDa2dlMXh1SUNBZ0lIWmhjaUJyWlhrZ1BTQjBiMHRsZVNod1lYUm9XMmx1WkdWNFhTa3NYRzRnSUNBZ0lDQWdJRzVsZDFaaGJIVmxJRDBnZG1Gc2RXVTdYRzVjYmlBZ0lDQnBaaUFvYTJWNUlEMDlQU0FuWDE5d2NtOTBiMTlmSnlCOGZDQnJaWGtnUFQwOUlDZGpiMjV6ZEhKMVkzUnZjaWNnZkh3Z2EyVjVJRDA5UFNBbmNISnZkRzkwZVhCbEp5a2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHOWlhbVZqZER0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2FXNWtaWGdnSVQwZ2JHRnpkRWx1WkdWNEtTQjdYRzRnSUNBZ0lDQjJZWElnYjJKcVZtRnNkV1VnUFNCdVpYTjBaV1JiYTJWNVhUdGNiaUFnSUNBZ0lHNWxkMVpoYkhWbElEMGdZM1Z6ZEc5dGFYcGxjaUEvSUdOMWMzUnZiV2w2WlhJb2IySnFWbUZzZFdVc0lHdGxlU3dnYm1WemRHVmtLU0E2SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUdsbUlDaHVaWGRXWVd4MVpTQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lHNWxkMVpoYkhWbElEMGdhWE5QWW1wbFkzUW9iMkpxVm1Gc2RXVXBYRzRnSUNBZ0lDQWdJQ0FnUHlCdlltcFdZV3gxWlZ4dUlDQWdJQ0FnSUNBZ0lEb2dLR2x6U1c1a1pYZ29jR0YwYUZ0cGJtUmxlQ0FySURGZEtTQS9JRnRkSURvZ2UzMHBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCaGMzTnBaMjVXWVd4MVpTaHVaWE4wWldRc0lHdGxlU3dnYm1WM1ZtRnNkV1VwTzF4dUlDQWdJRzVsYzNSbFpDQTlJRzVsYzNSbFpGdHJaWGxkTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJ2WW1wbFkzUTdYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1ltRnpaVk5sZER0Y2JpSXNJblpoY2lCaVlYTmxVMlYwSUQwZ2NtVnhkV2x5WlNnbkxpOWZZbUZ6WlZObGRDY3BPMXh1WEc0dktpcGNiaUFxSUZObGRITWdkR2hsSUhaaGJIVmxJR0YwSUdCd1lYUm9ZQ0J2WmlCZ2IySnFaV04wWUM0Z1NXWWdZU0J3YjNKMGFXOXVJRzltSUdCd1lYUm9ZQ0JrYjJWemJpZDBJR1Y0YVhOMExGeHVJQ29nYVhRbmN5QmpjbVZoZEdWa0xpQkJjbkpoZVhNZ1lYSmxJR055WldGMFpXUWdabTl5SUcxcGMzTnBibWNnYVc1a1pYZ2djSEp2Y0dWeWRHbGxjeUIzYUdsc1pTQnZZbXBsWTNSelhHNGdLaUJoY21VZ1kzSmxZWFJsWkNCbWIzSWdZV3hzSUc5MGFHVnlJRzFwYzNOcGJtY2djSEp2Y0dWeWRHbGxjeTRnVlhObElHQmZMbk5sZEZkcGRHaGdJSFJ2SUdOMWMzUnZiV2w2WlZ4dUlDb2dZSEJoZEdoZ0lHTnlaV0YwYVc5dUxseHVJQ3BjYmlBcUlDb3FUbTkwWlRvcUtpQlVhR2x6SUcxbGRHaHZaQ0J0ZFhSaGRHVnpJR0J2WW1wbFkzUmdMbHh1SUNwY2JpQXFJRUJ6ZEdGMGFXTmNiaUFxSUVCdFpXMWlaWEpQWmlCZlhHNGdLaUJBYzJsdVkyVWdNeTQzTGpCY2JpQXFJRUJqWVhSbFoyOXllU0JQWW1wbFkzUmNiaUFxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J2WW1wbFkzUWdWR2hsSUc5aWFtVmpkQ0IwYnlCdGIyUnBabmt1WEc0Z0tpQkFjR0Z5WVcwZ2UwRnljbUY1ZkhOMGNtbHVaMzBnY0dGMGFDQlVhR1VnY0dGMGFDQnZaaUIwYUdVZ2NISnZjR1Z5ZEhrZ2RHOGdjMlYwTGx4dUlDb2dRSEJoY21GdElIc3FmU0IyWVd4MVpTQlVhR1VnZG1Gc2RXVWdkRzhnYzJWMExseHVJQ29nUUhKbGRIVnlibk1nZTA5aWFtVmpkSDBnVW1WMGRYSnVjeUJnYjJKcVpXTjBZQzVjYmlBcUlFQmxlR0Z0Y0d4bFhHNGdLbHh1SUNvZ2RtRnlJRzlpYW1WamRDQTlJSHNnSjJFbk9pQmJleUFuWWljNklIc2dKMk1uT2lBeklIMGdmVjBnZlR0Y2JpQXFYRzRnS2lCZkxuTmxkQ2h2WW1wbFkzUXNJQ2RoV3pCZExtSXVZeWNzSURRcE8xeHVJQ29nWTI5dWMyOXNaUzVzYjJjb2IySnFaV04wTG1GYk1GMHVZaTVqS1R0Y2JpQXFJQzh2SUQwK0lEUmNiaUFxWEc0Z0tpQmZMbk5sZENodlltcGxZM1FzSUZzbmVDY3NJQ2N3Snl3Z0oza25MQ0FuZWlkZExDQTFLVHRjYmlBcUlHTnZibk52YkdVdWJHOW5LRzlpYW1WamRDNTRXekJkTG5rdWVpazdYRzRnS2lBdkx5QTlQaUExWEc0Z0tpOWNibVoxYm1OMGFXOXVJSE5sZENodlltcGxZM1FzSUhCaGRHZ3NJSFpoYkhWbEtTQjdYRzRnSUhKbGRIVnliaUJ2WW1wbFkzUWdQVDBnYm5Wc2JDQS9JRzlpYW1WamRDQTZJR0poYzJWVFpYUW9iMkpxWldOMExDQndZWFJvTENCMllXeDFaU2s3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdjMlYwTzF4dUlpd2laWGh3YjNKMElHUmxabUYxYkhRZ1hDSmtZWFJoT21sdFlXZGxMM04yWnl0NGJXd3NKVE5EYzNabkpUSXdlRzFzYm5NbE0wUWxNakpvZEhSd0pUTkJKVEpHSlRKR2QzZDNMbmN6TG05eVp5VXlSakl3TURBbE1rWnpkbWNsTWpJbE1qQm9aV2xuYUhRbE0wUWxNakl4T0NVeU1pVXlNSFpwWlhkQ2IzZ2xNMFFsTWpJd0pUSXdNQ1V5TURFNEpUSXdNVGdsTWpJbE1qQjNhV1IwYUNVelJDVXlNakU0SlRJeUpUTkZKVEl3SlRJd0pUTkRaR1ZtY3lVelJTVXlNQ1V5TUNVeU1DVXlNQ1V6UTNOMGVXeGxKVE5GSlRJd0pUSXdKVEl3SlRJd0pUSXdKVEl3TG1acGJHd2xNakFsTjBJbE1qQWxNakFsTWpBbE1qQWxNakFsTWpBbE1qQWxNakJtYVd4c0pUTkJKVEl3SlRJek5rVTJSVFpGSlROQ0pUSXdKVEl3SlRJd0pUSXdKVEl3SlRJd0pUZEVKVEl3SlRJd0pUSXdKVEl3SlROREpUSkdjM1I1YkdVbE0wVWxNakFsTWpBbE0wTWxNa1prWldaekpUTkZKVEl3SlRJd0pUTkRkR2wwYkdVbE0wVlRKVEl3UVd4bGNuUkRhWEpqYkdVbE1qQXhPQ1V5TUU0bE0wTWxNa1owYVhSc1pTVXpSU1V5TUNVeU1DVXpRM0psWTNRbE1qQnBaQ1V6UkNVeU1rTmhiblpoY3lVeU1pVXlNR1pwYkd3bE0wUWxNaklsTWpObVpqRXpaR01sTWpJbE1qQnZjR0ZqYVhSNUpUTkVKVEl5TUNVeU1pVXlNSGRwWkhSb0pUTkVKVEl5TVRnbE1qSWxNakJvWldsbmFIUWxNMFFsTWpJeE9DVXlNaVV5TUNVeVJpVXpSU1V6UTNCaGRHZ2xNakJqYkdGemN5VXpSQ1V5TW1acGJHd2xNaklsTWpCa0pUTkVKVEl5VFRjdU9EUTFOVFVsTWtNeE1pNDRPRFl4T0dFeExqRXpOREU0SlRKRE1TNHhNelF4T0NVeVF6QWxNa013SlRKRE1TVXlRekV1TVRFMk1TMHhMakUxTVRrMWNTNHdOREl0TGpBd01EWTBMakE0TXpreExqQXdNVGM0WVRFdU1URTJKVEpETVM0eE1UWWxNa013SlRKRE1DVXlRekVsTWtNeExqSWxNa014TGpFMU1ERTNKVEpETVM0d09UQTJOU1V5UXpFdU1Ea3dOalVsTWtNd0pUSkRNQ1V5UXpFdE1TNHlKVEpETVM0eE1UWTJNU1V5UXpFdU1Ea3dPQ1V5UXpFdU1Ea3dPQ1V5UXpBbE1rTXdKVEpETVMweExqSXRNUzR4TVRZMk1WcE5NVEF1TURZeU5TVXlRelF1TXprM056RmhMakl3TnpreUxqSXdOemt5SlRKRE1DVXlRekFsTWtNeEpUSkRMakE1T1RZMkxqRTRNMVkxTGpZeU1qRXlZekFsTWtNeExqUXdNRE0wTFM0eU9ETXlNaVV5UXpNdU9UZ3dNelF0TGpNek16QTFKVEpETkM0ME9EQTJOeVV5UXpBbE1rTXVNRFE1T0RRdExqQXhOamM0TGpBNU9UWTNMUzR4TVRZNU5TNHdPVGsyTjBnNExqTTNPV0V1TVRFd05qa3VNVEV3TmprbE1rTXdKVEpETUNVeVF6RXRMakV4TmprMUxTNHdPVGsyTjJNdExqQXpNekExTFM0ME5qWTNPQzB1TXkwekxqQXpNRFV0TGpNdE5DNDBNekE0TkZZMExqWXpNRFpoTGpFM056TXVNVGMzTXlVeVF6QWxNa013SlRKRE1TVXlReTR3T0RNek9TMHVNVGd6TURZbE1rTXlMamc0TWpZeUpUSkRNaTQ0T0RJMk1pVXlRekFsTWtNd0pUSkRNU1V5UXpFdU1EQXdNVGN0TGpJd01ETXpRVE11TWpjME16VWxNa016TGpJM05ETTFKVEpETUNVeVF6QWxNa014SlRKRE1UQXVNRFl5TlNVeVF6UXVNemszTnpGYVRURTNMalV3TURBMUpUSkRPVUU0TGpVd01EQTFKVEpET0M0MU1EQXdOU1V5UXpBbE1rTXhKVEpETVNVeVF6a2xNa011TlVnNVFUZ3VOVEF3TURnbE1rTTRMalV3TURBNEpUSkRNQ1V5UXpBbE1rTXhKVEpETVRjdU5UQXdNRFVsTWtNNVdrMHhOUzQyTnpRNE5DVXlRemxCTmk0Mk56UTROU1V5UXpZdU5qYzBPRFVsTWtNd0pUSkRNU1V5UXpBbE1rTTVKVEpETVRVdU5qYzBPRWc1UVRZdU5qYzBOemtsTWtNMkxqWTNORGM1SlRKRE1DVXlRekFsTWtNd0pUSkRNVFV1TmpjME9EUWxNa001V2lVeU1pVXlNQ1V5UmlVelJTVXpReVV5Um5OMlp5VXpSVndpSWl3aVpYaHdiM0owSUdSbFptRjFiSFFnWENKa1lYUmhPbWx0WVdkbEwzTjJaeXQ0Yld3c0pUTkRjM1puSlRJd2VHMXNibk1sTTBRbE1qSm9kSFJ3SlROQkpUSkdKVEpHZDNkM0xuY3pMbTl5WnlVeVJqSXdNREFsTWtaemRtY2xNaklsTWpCb1pXbG5hSFFsTTBRbE1qSXhPQ1V5TWlVeU1IWnBaWGRDYjNnbE0wUWxNakl3SlRJd01DVXlNREU0SlRJd01UZ2xNaklsTWpCM2FXUjBhQ1V6UkNVeU1qRTRKVEl5SlRORkpUSXdKVEl3SlRORFpHVm1jeVV6UlNVeU1DVXlNQ1V5TUNVeU1DVXpRM04wZVd4bEpUTkZKVEl3SlRJd0pUSXdKVEl3SlRJd0pUSXdMbUVsTWpBbE4wSWxNakFsTWpBbE1qQWxNakFsTWpBbE1qQWxNakFsTWpCbWFXeHNKVE5CSlRJd0pUSXpOa1UyUlRaRkpUTkNKVEl3SlRJd0pUSXdKVEl3SlRJd0pUSXdKVGRFSlRJd0pUSXdKVEl3SlRJd0pUTkRKVEpHYzNSNWJHVWxNMFVsTWpBbE1qQWxNME1sTWtaa1pXWnpKVE5GSlRJd0pUSXdKVE5EZEdsMGJHVWxNMFZUSlRJd1EyOXNiM0pRWVd4bGRIUmxKVEl3TVRnbE1qQk9KVE5ESlRKR2RHbDBiR1VsTTBVbE1qQWxNakFsTTBOeVpXTjBKVEl3YVdRbE0wUWxNakpEWVc1MllYTWxNaklsTWpCbWFXeHNKVE5FSlRJeUpUSXpabVl4TTJSakpUSXlKVEl3YjNCaFkybDBlU1V6UkNVeU1qQWxNaklsTWpCM2FXUjBhQ1V6UkNVeU1qRTRKVEl5SlRJd2FHVnBaMmgwSlRORUpUSXlNVGdsTWpJbE1qQWxNa1lsTTBVbE0wTndZWFJvSlRJd1kyeGhjM01sTTBRbE1qSmhKVEl5SlRJd1pDVXpSQ1V5TWsweE1TNDRNRGNsTWtNekxqQTNNalZqTFRJdU1UZzFOUzB1TXpVdE5DNDFNRE1sTWtNd0xUUXVPREkwSlRKRE1TNHdORFpoTVM0eE5EWWxNa014TGpFME5pVXlRekFsTWtNd0pUSkRNQ1V5UXk0Mk5EY2xNa014TGpRMU5FRXhMalUwT1NVeVF6RXVOVFE1SlRKRE1DVXlRekFsTWtNeEpUSkRPQzR4T1RrMUpUSkROeTQ0TkROaE1TNDBNVFEwT1NVeVF6RXVOREUwTkRrbE1rTXdKVEpETUNVeVF6RXRNUzQxTmpJMUxqVTJNME0wTGpjMk15VXlRemN1T1RNeU5TVXlRekl1Tmprd05TVXlRell1T1RZMUxqazVORFVsTWtNNExqVTNPRFV0TGpVMUpUSkRNVEF1TURVdU1EYzVKVEpETVRJdU1qTXpKVEpETVM0MU56Y2xNa014TXk0ME1qRmhNVEV1TnlVeVF6RXhMamNsTWtNd0pUSkRNQ1V5UXpBbE1rTTNMakkxTmpVbE1rTXlMall6TjJNMExqYzVNeVV5UXpBbE1rTTVMakEyTmpVdE1pNDRNalUxSlRKRE9TNHdOalkxTFRZdU5UVTRRekUzTGprbE1rTTFMamN5TVNVeVF6RTBMak14TmlVeVF6TXVORGN4TlNVeVF6RXhMamd3TnlVeVF6TXVNRGN5TlZwdExUY3VORFlsTWtNeE1DNDJOVFJoTVM0NUpUSkRNUzQ1SlRKRE1DVXlRekVsTWtNeEpUSkRNUzQ1TFRFdU9VRXhMamtsTWtNeExqa2xNa013SlRKRE1DVXlRekVsTWtNMExqTTBOeVV5UXpFekxqY3lOalZhYlRrdU5qUXpMVGd1TURFM1lURXVNalVsTWtNeExqSTFKVEpETUNVeVF6RWxNa014TFRFdU1qVWxNa014TGpJMVFURXVNalVsTWtNeExqSTFKVEpETUNVeVF6QWxNa014SlRKRE1UTXVPVGtsTWtNMUxqY3dPVFZhYlMwMUxqTTFNU1V5UXprdU1EZGhNUzQzT0RBMUpUSkRNUzQzT0RBMUpUSkRNQ1V5UXpFbE1rTXhKVEpETVM0M056azFMVEV1TnpneU5WWXhNMEV4TGpjNEpUSkRNUzQzT0NVeVF6QWxNa013SlRKRE1TVXlRemd1TmpNNUpUSkRNVFF1TnpjNU5WcHRNeTQ0T1RVdExqYzBPR0V4TGpVd016VWxNa014TGpVd016VWxNa013SlRKRE1TVXlRekVsTWtNeExqVXdNUzB4TGpVd04zWXVNREExUVRFdU5UQXlORGtsTWtNeExqVXdNalE1SlRKRE1DVXlRekFsTWtNeEpUSkRNVEl1TlRNMEpUSkRNVFF1TURNeE5WcE5NVFVsTWtNeE1TNHlPR0V4TGpNek56VWxNa014TGpNek56VWxNa013SlRKRE1TVXlRekVsTWtNeExqTXpOeTB4TGpNek9IWXVNREF3TlVFeExqTXpOeVV5UXpFdU16TTNKVEpETUNVeVF6QWxNa014SlRKRE1UVXVNREF3TlNVeVF6RXhMakk0V2lVeU1pVXlNQ1V5UmlVelJTVXpReVV5Um5OMlp5VXpSVndpSWl3aVpYaHdiM0owSUdSbFptRjFiSFFnWENKa1lYUmhPbWx0WVdkbEwzTjJaeXQ0Yld3c0pUTkRjM1puSlRJd2VHMXNibk1sTTBRbE1qSm9kSFJ3SlROQkpUSkdKVEpHZDNkM0xuY3pMbTl5WnlVeVJqSXdNREFsTWtaemRtY2xNaklsTWpCb1pXbG5hSFFsTTBRbE1qSXhPQ1V5TWlVeU1IWnBaWGRDYjNnbE0wUWxNakl3SlRJd01DVXlNREU0SlRJd01UZ2xNaklsTWpCM2FXUjBhQ1V6UkNVeU1qRTRKVEl5SlRORkpUSXdKVEl3SlRORFpHVm1jeVV6UlNVeU1DVXlNQ1V5TUNVeU1DVXpRM04wZVd4bEpUTkZKVEl3SlRJd0pUSXdKVEl3SlRJd0pUSXdMbVpwYkd3bE1qQWxOMElsTWpBbE1qQWxNakFsTWpBbE1qQWxNakFsTWpBbE1qQm1hV3hzSlROQkpUSXdKVEl6TmtVMlJUWkZKVE5DSlRJd0pUSXdKVEl3SlRJd0pUSXdKVEl3SlRkRUpUSXdKVEl3SlRJd0pUSXdKVE5ESlRKR2MzUjViR1VsTTBVbE1qQWxNakFsTTBNbE1rWmtaV1p6SlRORkpUSXdKVEl3SlRORGRHbDBiR1VsTTBWVEpUSXdRM0p2Y0NVeU1ERTRKVEl3VGlVelF5VXlSblJwZEd4bEpUTkZKVEl3SlRJd0pUTkRjbVZqZENVeU1HbGtKVE5FSlRJeVEyRnVkbUZ6SlRJeUpUSXdabWxzYkNVelJDVXlNaVV5TTJabU1UTmtZeVV5TWlVeU1HOXdZV05wZEhrbE0wUWxNakl3SlRJeUpUSXdkMmxrZEdnbE0wUWxNakl4T0NVeU1pVXlNR2hsYVdkb2RDVXpSQ1V5TWpFNEpUSXlKVEl3SlRKR0pUTkZKVE5EY0dGMGFDVXlNR05zWVhOekpUTkVKVEl5Wm1sc2JDVXlNaVV5TUdRbE0wUWxNakpOTVRJbE1rTXhNV2d5VmpRdU5XRXVOUzQxSlRKRE1DVXlRekFsTWtNd0xTNDFMUzQxU0RkV05tZzFXaVV5TWlVeU1DVXlSaVV6UlNVeU1DVXlNQ1V6UTNCaGRHZ2xNakJqYkdGemN5VXpSQ1V5TW1acGJHd2xNaklsTWpCa0pUTkVKVEl5VFRZbE1rTXhNbFl4TGpWQkxqVXVOU1V5UXpBbE1rTXdKVEpETUNVeVF6VXVOU1V5UXpGb0xURmhMalV1TlNVeVF6QWxNa013SlRKRE1DMHVOUzQxVmpSSU1TNDFZUzQxTGpVbE1rTXdKVEpETUNVeVF6QXRMalV1TlhZeFlTNDFMalVsTWtNd0pUSkRNQ1V5UXpBbE1rTXVOUzQxU0RSMk55NDFZUzQxTGpVbE1rTXdKVEpETUNVeVF6QWxNa011TlM0MVNERXlkakl1TldFdU5TNDFKVEpETUNVeVF6QWxNa013SlRKRExqVXVOV2d4WVM0MUxqVWxNa013SlRKRE1DVXlRekFsTWtNdU5TMHVOVll4TkdneUxqVmhMalV1TlNVeVF6QWxNa013SlRKRE1DVXlReTQxTFM0MWRpMHhZUzQxTGpVbE1rTXdKVEpETUNVeVF6QXRMalV0TGpWYUpUSXlKVEl3SlRKR0pUTkZKVE5ESlRKR2MzWm5KVE5GWENJaUxDSmxlSEJ2Y25RZ1pHVm1ZWFZzZENCY0ltUmhkR0U2YVcxaFoyVXZjM1puSzNodGJDd2xNME56ZG1jbE1qQjRiV3h1Y3lVelJDVXlNbWgwZEhBbE0wRWxNa1lsTWtaM2QzY3Vkek11YjNKbkpUSkdNakF3TUNVeVJuTjJaeVV5TWlVeU1HaGxhV2RvZENVelJDVXlNakU0SlRJeUpUSXdkbWxsZDBKdmVDVXpSQ1V5TWpBbE1qQXdKVEl3TVRnbE1qQXhPQ1V5TWlVeU1IZHBaSFJvSlRORUpUSXlNVGdsTWpJbE0wVWxNakFsTWpBbE0wTmtaV1p6SlRORkpUSXdKVEl3SlRJd0pUSXdKVE5EYzNSNWJHVWxNMFVsTWpBbE1qQWxNakFsTWpBbE1qQWxNakF1Wm1sc2JDVXlNQ1UzUWlVeU1DVXlNQ1V5TUNVeU1DVXlNQ1V5TUNVeU1DVXlNR1pwYkd3bE0wRWxNakFsTWpNMlJUWkZOa1VsTTBJbE1qQWxNakFsTWpBbE1qQWxNakFsTWpBbE4wUWxNakFsTWpBbE1qQWxNakFsTTBNbE1rWnpkSGxzWlNVelJTVXlNQ1V5TUNVelF5VXlSbVJsWm5NbE0wVWxNakFsTWpBbE0wTjBhWFJzWlNVelJWTWxNakJFY21GM0pUSXdNVGdsTWpCT0pUTkRKVEpHZEdsMGJHVWxNMFVsTWpBbE1qQWxNME55WldOMEpUSXdhV1FsTTBRbE1qSkRZVzUyWVhNbE1qSWxNakJtYVd4c0pUTkVKVEl5SlRJelptWXhNMlJqSlRJeUpUSXdiM0JoWTJsMGVTVXpSQ1V5TWpBbE1qSWxNakIzYVdSMGFDVXpSQ1V5TWpFNEpUSXlKVEl3YUdWcFoyaDBKVE5FSlRJeU1UZ2xNaklsTWpBbE1rWWxNMFVsTTBOd1lYUm9KVEl3WTJ4aGMzTWxNMFFsTWpKbWFXeHNKVEl5SlRJd1pDVXpSQ1V5TWsweE1DNHlNamNsTWtNMEpUSkRNaTQxTkRJbE1rTXhNUzQyT0RaaExqUTVOaTQwT1RZbE1rTXdKVEpETUNVeVF6QXRMakV5TlRVdU1qRXdOVXd4TGpBeU56VWxNa014Tmk0MU5XTXRMakExTnk0eE9EZ3VNakk1TlM0ME1qVXVNemt4TlM0ME1qVmhMakUxTlRnM0xqRTFOVGczSlRKRE1DVXlRekFsTWtNd0pUSkRMakF6TVMwdU1EQXpZeTR4TXpndExqQXpNaVV5UXpNdU9UTXpOUzB4TGpFM01pVXlRelF1TmpVMU5TMHhMak00T1dFdU5Ea3lMalE1TWlVeVF6QWxNa013SlRKRE1DVXlReTR5TURjMUxTNHhNalZNTVRRbE1rTTNMamMzTWxwTk5TNDNKVEpETVRRdU5qVTRZeTB4TGpBNE1EVXVNekkwTlMweUxqUXpNUzQzTXpJMUxUTXVNelkwTlNVeVF6RXVNREV4VERNdU16UWxNa014TWk0ek1EUmFKVEl5SlRJd0pUSkdKVE5GSlRJd0pUSXdKVE5EY0dGMGFDVXlNR05zWVhOekpUTkVKVEl5Wm1sc2JDVXlNaVV5TUdRbE0wUWxNakpOTVRZdU56Z3pOU1V5UXpRdU1TVXlRekV6TGprbE1rTXhMakl4Tm1FdU5qQTNOVEV1TmpBM05URWxNa013SlRKRE1DVXlRekF0TGpRek15MHVNVGMyTlVneE15NDBOV0V1TmpnMkxqWTROaVV5UXpBbE1rTXdKVEpETUMwdU5EWXpOUzR5TURNMWJDMHlMakExSlRKRE1pNHdOVXd4TkM0M01EZ2xNa00zTGpBMk5EVnNNaTR3TlMweUxqQTFZUzQyT0RZdU5qZzJKVEpETUNVeVF6QWxNa013SlRKRExqSXRMalEwTVRWQkxqWXhNaTQyTVRJbE1rTXdKVEpETUNVeVF6QWxNa014Tmk0M09ETTFKVEpETkM0eFdpVXlNaVV5TUNVeVJpVXpSU1V6UXlVeVJuTjJaeVV6UlZ3aUlpd2laWGh3YjNKMElHUmxabUYxYkhRZ1hDSmtZWFJoT21sdFlXZGxMM04yWnl0NGJXd3NKVE5EYzNabkpUSXdlRzFzYm5NbE0wUWxNakpvZEhSd0pUTkJKVEpHSlRKR2QzZDNMbmN6TG05eVp5VXlSakl3TURBbE1rWnpkbWNsTWpJbE1qQm9aV2xuYUhRbE0wUWxNakl4T0NVeU1pVXlNSFpwWlhkQ2IzZ2xNMFFsTWpJd0pUSXdNQ1V5TURFNEpUSXdNVGdsTWpJbE1qQjNhV1IwYUNVelJDVXlNakU0SlRJeUpUTkZKVEl3SlRJd0pUTkRaR1ZtY3lVelJTVXlNQ1V5TUNVeU1DVXlNQ1V6UTNOMGVXeGxKVE5GSlRJd0pUSXdKVEl3SlRJd0pUSXdKVEl3TG1acGJHd2xNakFsTjBJbE1qQWxNakFsTWpBbE1qQWxNakFsTWpBbE1qQWxNakJtYVd4c0pUTkJKVEl3SlRJek5rVTJSVFpGSlROQ0pUSXdKVEl3SlRJd0pUSXdKVEl3SlRJd0pUZEVKVEl3SlRJd0pUSXdKVEl3SlROREpUSkdjM1I1YkdVbE0wVWxNakFsTWpBbE0wTWxNa1prWldaekpUTkZKVEl3SlRJd0pUTkRkR2wwYkdVbE0wVlRKVEl3UldScGRFbHVUR2xuYUhRbE1qQXhPQ1V5TUU0bE0wTWxNa1owYVhSc1pTVXpSU1V5TUNVeU1DVXpRM0psWTNRbE1qQnBaQ1V6UkNVeU1rTmhiblpoY3lVeU1pVXlNR1pwYkd3bE0wUWxNaklsTWpObVpqRXpaR01sTWpJbE1qQnZjR0ZqYVhSNUpUTkVKVEl5TUNVeU1pVXlNSGRwWkhSb0pUTkVKVEl5TVRnbE1qSWxNakJvWldsbmFIUWxNMFFsTWpJeE9DVXlNaVV5TUNVeVJpVXpSU1V6UTNCaGRHZ2xNakJqYkdGemN5VXpSQ1V5TW1acGJHd2xNaklsTWpCa0pUTkVKVEl5VFRFM0xqZ3lNalVsTWtNNExqTTBNalVsTWtNeE5TNDJOakExSlRKRE5pNHhPREZoTGpRMU5pNDBOVFlsTWtNd0pUSkRNQ1V5UXpBdExqTXlOUzB1TVRNeU5XZ3RMakF4TkdFdU5URTNORGd1TlRFM05EZ2xNa013SlRKRE1DVXlRekF0TGpNMUxqRTFiQzAzTGpZeE5pVXlRemN1TmpJeFlTNHpOamd1TXpZNEpUSkRNQ1V5UXpBbE1rTXdMUzR3T1RRdU1UVTNOV3d0TVM0eU1qSWxNa016TGpZM1l5MHVNRFF5TlM0eE5ERXVNVGN5TlM0ek1Ua3VNamswTGpNeE9Xd3VNREl6TFM0d01ESTFZeTR4TURNMUxTNHdNalFsTWtNekxqRXpMVEV1TURVNUpUSkRNeTQyTnpJdE1TNHlNakpoTGpNMk5qVXpMak0yTmpVekpUSkRNQ1V5UXpBbE1rTXdKVEpETGpFMU5TMHVNRGt6TlV3eE55NDRKVEpET1M0d01qazFZUzQxTVRVdU5URTFKVEpETUNVeVF6QWxNa013SlRKRExqRTFMUzR6TXpGQkxqUTFPQzQwTlRnbE1rTXdKVEpETUNVeVF6QWxNa014Tnk0NE1qSTFKVEpET0M0ek5ESTFXbTB0TVRBdU9EQXpKVEpET0M0Mk5EUXVPVGc1TFRJdU56VTVOU1V5UXpFdU56Y2xNa014TGpjMk5UVkRPQzQ1TmpnbE1rTXhOaTR5TXpZbE1rTTNMamN4T1RVbE1rTXhOaTQzTnpjMUpUSkROeTR3TVRrMUpUSkRNVFl1T1RnMk5Wb2xNaklsTWpBbE1rWWxNMFVsTWpBbE1qQWxNME53WVhSb0pUSXdZMnhoYzNNbE0wUWxNakptYVd4c0pUSXlKVEl3WkNVelJDVXlNazB4TXk0MUpUSkRNVWd4TGpWaExqVXVOU1V5UXpBbE1rTXdKVEpETUMwdU5TNDFkakV5WVM0MUxqVWxNa013SlRKRE1DVXlRekFsTWtNdU5TNDFTRFl1TURNNE5Xd3VNVEV5TlMwdU16TTVZVEV1TXpVbE1rTXhMak0xSlRKRE1DVXlRekFsTWtNeEpUSkRMak16TmkwdU5UVk1OaTQySlRKRE1UTklNbFl5U0RFelZqWXVOVGd6YkRFdE1WWXhMalZCTGpVdU5TVXlRekFsTWtNd0pUSkRNQ1V5UXpFekxqVWxNa014V2lVeU1pVXlNQ1V5UmlVelJTVXpReVV5Um5OMlp5VXpSVndpSWl3aVpYaHdiM0owSUdSbFptRjFiSFFnWENKa1lYUmhPbWx0WVdkbEwzTjJaeXQ0Yld3c0pUTkRjM1puSlRJd2VHMXNibk1sTTBRbE1qSm9kSFJ3SlROQkpUSkdKVEpHZDNkM0xuY3pMbTl5WnlVeVJqSXdNREFsTWtaemRtY2xNaklsTWpCb1pXbG5hSFFsTTBRbE1qSXhPQ1V5TWlVeU1IWnBaWGRDYjNnbE0wUWxNakl3SlRJd01DVXlNREU0SlRJd01UZ2xNaklsTWpCM2FXUjBhQ1V6UkNVeU1qRTRKVEl5SlRORkpUSXdKVEl3SlRORFpHVm1jeVV6UlNVeU1DVXlNQ1V5TUNVeU1DVXpRM04wZVd4bEpUTkZKVEl3SlRJd0pUSXdKVEl3SlRJd0pUSXdMbUVsTWpBbE4wSWxNakFsTWpBbE1qQWxNakFsTWpBbE1qQWxNakFsTWpCbWFXeHNKVE5CSlRJd0pUSXpOa1UyUlRaRkpUTkNKVEl3SlRJd0pUSXdKVEl3SlRJd0pUSXdKVGRFSlRJd0pUSXdKVEl3SlRJd0pUTkRKVEpHYzNSNWJHVWxNMFVsTWpBbE1qQWxNME1sTWtaa1pXWnpKVE5GSlRJd0pUSXdKVE5EZEdsMGJHVWxNMFZUSlRJd1NXMXdiM0owSlRJd01UZ2xNakJPSlROREpUSkdkR2wwYkdVbE0wVWxNakFsTWpBbE0wTnlaV04wSlRJd2FXUWxNMFFsTWpKRFlXNTJZWE1sTWpJbE1qQm1hV3hzSlRORUpUSXlKVEl6Wm1ZeE0yUmpKVEl5SlRJd2IzQmhZMmwwZVNVelJDVXlNakFsTWpJbE1qQjNhV1IwYUNVelJDVXlNakU0SlRJeUpUSXdhR1ZwWjJoMEpUTkVKVEl5TVRnbE1qSWxNakFsTWtZbE0wVWxNME53WVhSb0pUSXdZMnhoYzNNbE0wUWxNakpoSlRJeUpUSXdaQ1V6UkNVeU1rMHhOaTQxSlRKRE1VZzFMalZoTGpVdU5TVXlRekFsTWtNd0pUSkRNQzB1TlM0MWRqTmhMalV1TlNVeVF6QWxNa013SlRKRE1DVXlReTQxTGpWb01VRXVOUzQxSlRKRE1DVXlRekFsTWtNd0pUSkROeVV5UXpRdU5WWXphRGhXTVRWSU4xWXhNeTQxWVM0MUxqVWxNa013SlRKRE1DVXlRekF0TGpVdExqVm9MVEZoTGpVdU5TVXlRekFsTWtNd0pUSkRNQzB1TlM0MWRqTmhMalV1TlNVeVF6QWxNa013SlRKRE1DVXlReTQxTGpWb01URmhMalV1TlNVeVF6QWxNa013SlRKRE1DVXlReTQxTFM0MVZqRXVOVUV1TlM0MUpUSkRNQ1V5UXpBbE1rTXdKVEpETVRZdU5TVXlRekZhSlRJeUpUSXdKVEpHSlRORkpUSXdKVEl3SlRORGNHRjBhQ1V5TUdOc1lYTnpKVE5FSlRJeVlTVXlNaVV5TUdRbE0wUWxNakpOT0NVeVF6RXlMalpoTGpRdU5DVXlRekFsTWtNd0pUSkRNQ1V5UXk0MExqUXVNemt6TlRJdU16a3pOVElsTWtNd0pUSkRNQ1V5UXpBbE1rTXVNall6TlMwdU1Xd3pMamMyTWkwekxqY3lNalZoTGpJMUxqSTFKVEpETUNVeVF6QWxNa013SlRKRE1DMHVNelZNT0M0Mk5qWWxNa00xTGpGQkxqTTVNelV5TGpNNU16VXlKVEpETUNVeVF6QWxNa013SlRKRE9DNDBNREkxSlRKRE5XRXVOQzQwSlRKRE1DVXlRekFsTWtNd0xTNDBMalJXT0VneExqVmhMalV1TlNVeVF6QWxNa013SlRKRE1DMHVOUzQxZGpGaExqVXVOU1V5UXpBbE1rTXdKVEpETUNVeVF5NDFMalZJT0ZvbE1qSWxNakFsTWtZbE0wVWxNME1sTWtaemRtY2xNMFZjSWlJc0ltVjRjRzl5ZENCa1pXWmhkV3gwSUZ3aVpHRjBZVHBwYldGblpTOXpkbWNyZUcxc0xDVXpRM04yWnlVeU1IaHRiRzV6SlRORUpUSXlhSFIwY0NVelFTVXlSaVV5Um5kM2R5NTNNeTV2Y21jbE1rWXlNREF3SlRKR2MzWm5KVEl5SlRJd2FHVnBaMmgwSlRORUpUSXlNVGdsTWpJbE1qQjJhV1YzUW05NEpUTkVKVEl5TUNVeU1EQWxNakF4T0NVeU1ERTRKVEl5SlRJd2QybGtkR2dsTTBRbE1qSXhPQ1V5TWlVelJTVXlNQ1V5TUNVelEyUmxabk1sTTBVbE1qQWxNakFsTWpBbE1qQWxNME56ZEhsc1pTVXpSU1V5TUNVeU1DVXlNQ1V5TUNVeU1DVXlNQzVoSlRJd0pUZENKVEl3SlRJd0pUSXdKVEl3SlRJd0pUSXdKVEl3SlRJd1ptbHNiQ1V6UVNVeU1DVXlNelpGTmtVMlJTVXpRaVV5TUNVeU1DVXlNQ1V5TUNVeU1DVXlNQ1UzUkNVeU1DVXlNQ1V5TUNVeU1DVXpReVV5Um5OMGVXeGxKVE5GSlRJd0pUSXdKVE5ESlRKR1pHVm1jeVV6UlNVeU1DVXlNQ1V6UTNScGRHeGxKVE5GVXlVeU1FeGhlV1Z5Y3lVeU1ERTRKVEl3VGlVelF5VXlSblJwZEd4bEpUTkZKVEl3SlRJd0pUTkRjbVZqZENVeU1HbGtKVE5FSlRJeVEyRnVkbUZ6SlRJeUpUSXdabWxzYkNVelJDVXlNaVV5TTJabU1UTmtZeVV5TWlVeU1HOXdZV05wZEhrbE0wUWxNakl3SlRJeUpUSXdkMmxrZEdnbE0wUWxNakl4T0NVeU1pVXlNR2hsYVdkb2RDVXpSQ1V5TWpFNEpUSXlKVEl3SlRKR0pUTkZKVE5EY0dGMGFDVXlNR05zWVhOekpUTkVKVEl5WVNVeU1pVXlNR1FsTTBRbE1qSk5NVFF1TVRRMEpUSkRPUzQ1TmprbE1rTTVMakl5TkRVbE1rTXhNeTR6T0RJMVlTNHpPVFExTGpNNU5EVWxNa013SlRKRE1DVXlRekV0TGpRMUpUSkRNRXd6TGpnMU5pVXlRemt1T1RZNUxqa3lPU1V5UXpFeVlTNHhNalUxTGpFeU5UVWxNa013SlRKRE1DVXlRekFsTWtNd0pUSkRMakl3TlRWc055NDVNalVsTWtNMUxqVmhMakkxTnpVdU1qVTNOU1V5UXpBbE1rTXdKVEpETUNVeVF5NHlPVElsTWtNd2JEY3VPVEkxTFRVdU5XRXVNVEkxTlM0eE1qVTFKVEpETUNVeVF6QWxNa013SlRKRE1DMHVNakExTlZvbE1qSWxNakFsTWtZbE0wVWxNakFsTWpBbE0wTndZWFJvSlRJd1kyeGhjM01sTTBRbE1qSmhKVEl5SlRJd1pDVXpSQ1V5TWswNExqZzFKVEpETVRFdU5EazBMamt5T1NVeVF6WmhMakV5TkRVdU1USTBOU1V5UXpBbE1rTXdKVEpETVNVeVF6QXRMakl3TlV3NExqZzFMakk1TjJFdU1qWTFMakkyTlNVeVF6QWxNa013SlRKRE1TVXlReTR6SlRKRE1HdzNMamt5TVNVeVF6VXVORGsyWVM0eE1qUTFMakV5TkRVbE1rTXdKVEpETUNVeVF6RWxNa013SlRKRExqSXdOVXc1TGpFMUpUSkRNVEV1TkRrMFFTNHlOalV1TWpZMUpUSkRNQ1V5UXpBbE1rTXhKVEpET0M0NE5TVXlRekV4TGpRNU5Gb2xNaklsTWpBbE1rWWxNMFVsTTBNbE1rWnpkbWNsTTBWY0lpSXNJbVY0Y0c5eWRDQmtaV1poZFd4MElGd2laR0YwWVRwcGJXRm5aUzl6ZG1jcmVHMXNMQ1V6UTNOMlp5VXlNSGh0Ykc1ekpUTkVKVEl5YUhSMGNDVXpRU1V5UmlVeVJuZDNkeTUzTXk1dmNtY2xNa1l5TURBd0pUSkdjM1puSlRJeUpUSXdhR1ZwWjJoMEpUTkVKVEl5TVRnbE1qSWxNakIyYVdWM1FtOTRKVE5FSlRJeU1DVXlNREFsTWpBeE9DVXlNREU0SlRJeUpUSXdkMmxrZEdnbE0wUWxNakl4T0NVeU1pVXpSU1V5TUNVeU1DVXpRMlJsWm5NbE0wVWxNakFsTWpBbE1qQWxNakFsTTBOemRIbHNaU1V6UlNVeU1DVXlNQ1V5TUNVeU1DVXlNQ1V5TUM1bWFXeHNKVEl3SlRkQ0pUSXdKVEl3SlRJd0pUSXdKVEl3SlRJd0pUSXdKVEl3Wm1sc2JDVXpRU1V5TUNVeU16WkZOa1UyUlNVelFpVXlNQ1V5TUNVeU1DVXlNQ1V5TUNVeU1DVTNSQ1V5TUNVeU1DVXlNQ1V5TUNVelF5VXlSbk4wZVd4bEpUTkZKVEl3SlRJd0pUTkRKVEpHWkdWbWN5VXpSU1V5TUNVeU1DVXpRM1JwZEd4bEpUTkZVeVV5TUU1bGQwbDBaVzBsTWpBeE9DVXlNRTRsTTBNbE1rWjBhWFJzWlNVelJTVXlNQ1V5TUNVelEzSmxZM1FsTWpCcFpDVXpSQ1V5TWtOaGJuWmhjeVV5TWlVeU1HWnBiR3dsTTBRbE1qSWxNak5tWmpFelpHTWxNaklsTWpCdmNHRmphWFI1SlRORUpUSXlNQ1V5TWlVeU1IZHBaSFJvSlRORUpUSXlNVGdsTWpJbE1qQm9aV2xuYUhRbE0wUWxNakl4T0NVeU1pVXlNQ1V5UmlVelJTVXpRM0JoZEdnbE1qQmpiR0Z6Y3lVelJDVXlNbVpwYkd3bE1qSWxNakJrSlRORUpUSXlUVEUxTGpVbE1rTXlTREl1TldFdU5TNDFKVEpETUNVeVF6QWxNa013TFM0MUxqVldPVWc0TGpWaExqVXVOU1V5UXpBbE1rTXdKVEpETVNVeVF5NDFMalZXTVRab05pNDFZUzQxTGpVbE1rTXdKVEpETUNVeVF6QWxNa011TlMwdU5WWXlMalZCTGpVdU5TVXlRekFsTWtNd0pUSkRNQ1V5UXpFMUxqVWxNa015V2lVeU1pVXlNQ1V5UmlVelJTVXlNQ1V5TUNVelEzQmhkR2dsTWpCamJHRnpjeVV6UkNVeU1tWnBiR3dsTWpJbE1qQmtKVE5FSlRJeVRUZ2xNa014TmtnM0xqazFOMkV1TlM0MUpUSkRNQ1V5UXpBbE1rTXhMUzR6TlRNMUxTNHhORFkxYkMwMUxqUTFOeTAxTGpRMU4wRXVOUzQxSlRKRE1DVXlRekFsTWtNeEpUSkRNaVV5UXpFd0xqQTBNMVl4TUVnNFdpVXlNaVV5TUNVeVJpVXpSU1V6UXlVeVJuTjJaeVV6UlZ3aUlpd2laWGh3YjNKMElHUmxabUYxYkhRZ1hDSmtZWFJoT21sdFlXZGxMM04yWnl0NGJXd3NKVE5EYzNabkpUSXdlRzFzYm5NbE0wUWxNakpvZEhSd0pUTkJKVEpHSlRKR2QzZDNMbmN6TG05eVp5VXlSakl3TURBbE1rWnpkbWNsTWpJbE1qQm9aV2xuYUhRbE0wUWxNakl4T0NVeU1pVXlNSFpwWlhkQ2IzZ2xNMFFsTWpJd0pUSXdNQ1V5TURFNEpUSXdNVGdsTWpJbE1qQjNhV1IwYUNVelJDVXlNakU0SlRJeUpUTkZKVEl3SlRJd0pUTkRaR1ZtY3lVelJTVXlNQ1V5TUNVeU1DVXlNQ1V6UTNOMGVXeGxKVE5GSlRJd0pUSXdKVEl3SlRJd0pUSXdKVEl3TG1FbE1qQWxOMElsTWpBbE1qQWxNakFsTWpBbE1qQWxNakFsTWpBbE1qQm1hV3hzSlROQkpUSXdKVEl6TmtVMlJUWkZKVE5DSlRJd0pUSXdKVEl3SlRJd0pUSXdKVEl3SlRkRUpUSXdKVEl3SlRJd0pUSXdKVE5ESlRKR2MzUjViR1VsTTBVbE1qQWxNakFsTTBNbE1rWmtaV1p6SlRORkpUSXdKVEl3SlRORGRHbDBiR1VsTTBWVEpUSXdUM0ppYVhRbE1qQXhPQ1V5TUU0bE0wTWxNa1owYVhSc1pTVXpSU1V5TUNVeU1DVXpRM0psWTNRbE1qQnBaQ1V6UkNVeU1rTmhiblpoY3lVeU1pVXlNR1pwYkd3bE0wUWxNaklsTWpObVpqRXpaR01sTWpJbE1qQnZjR0ZqYVhSNUpUTkVKVEl5TUNVeU1pVXlNSGRwWkhSb0pUTkVKVEl5TVRnbE1qSWxNakJvWldsbmFIUWxNMFFsTWpJeE9DVXlNaVV5TUNVeVJpVXpSU1V6UTNCaGRHZ2xNakJqYkdGemN5VXpSQ1V5TW1FbE1qSWxNakJrSlRORUpUSXlUVEV6TGpnM09EVWxNa00yTGprek5UVkJNeTQ1T1RFMUpUSkRNeTQ1T1RFMUpUSkRNQ1V5UXpBbE1rTXdKVEpETmk0ek5TVXlRelF1TXpjMFl5MHVNek14TFM0d01qVTFMUzQyTlRrdExqQTBOUzB1T1RjMExTNHdORFZETWk0Mk5USTFKVEpETkM0ek1qa3VOVGM0TlNVeVF6VXVNamMwTlM0eEpUSkROMk10TGpVeUpUSkRNUzQ0T0RRMUpUSkRNUzR3TVRrbE1rTTBMakU0TmlVeVF6TXVOamM0SlRKRE5TNDVOek5NTWk0ek5UUTFKVEpETVRRdU5qZ3dOVUV1TVRrd05TNHhPVEExSlRKRE1DVXlRekFsTWtNd0pUSkRNaTQxSlRKRE1UUXVPVGt6U0RndU9UVk1OaTR3TkRVbE1rTXhNQzQyTXpWaExqRTVNUzR4T1RFbE1rTXdKVEpETUNVeVF6QXRMak13TlMwdU1ERTJOVXcwTGpjMU5UVWxNa014TVM0NFl5MHlMakkxTFRFdU5EY3hMVE11TlMwekxqSTFMVE11TVRnMU5TMDBMak01TXpVdU1qWXhMUzQ1TkRRbE1rTXhMamMxTmkweExqVTFOQ1V5UXpNdU9EQTROUzB4TGpVMU5DNHlNRFUxSlRKRE1DVXlReTQwTWpFdU1ERTRMall6TXk0d016QTFRell1TURFeE5TVXlRelV1T1RJekpUSkROaVV5UXpVdU9UWWxNa00ySlRKRE5tRXpMams1TWpVbE1rTXpMams1TWpVbE1rTXdKVEpETUNVeVF6QWxNa00zTGpJek9EVWxNa015TGpNek1tTXlMaklsTWtNeExqUTJNRFVsTWtNekxqUXdORFVsTWtNekxqSXhOQ1V5UXpNdU1Ea3hKVEpETkM0ek5EVXRMakkyTURVdU9UUTBMVEV1TnpVMU5TVXlRekV1TlRVMExUTXVPREEzSlRKRE1TNDFOVFF0TGpJNE15VXlRekF0TGpVM05EVXRMakF4TlRVdExqZzNMUzR3TkRGaExqTTRNRFV1TXpnd05TVXlRekFsTWtNd0pUSkRNQzB1TkRFMU56RXVNelF4Tmpoc0xTNHdNREUzT1M0d016TTRNbll1TnpZMllTNHpPRFl1TXpnMkpUSkRNQ1V5UXpBbE1rTXdKVEpETGpNMU15NHpPRE0xWXk0ek1UZzFMakF5TlM0Mk16RXVNRE01TlM0NU16UTFMakF6T1RVbE1rTXlMamN5TlNVeVF6QWxNa00wTGpndExqazBOVFVsTWtNMUxqSTNOaTB5TGpZM01VTXhPQzR6TXpZMUpUSkRNVEV1TVRNNU5TVXlRekUyTGpZNU5DVXlRemd1TnpRME5TVXlRekV6TGpnM09EVWxNa00yTGprek5UVmFKVEl5SlRJd0pUSkdKVE5GSlROREpUSkdjM1puSlRORlhDSWlMQ0psZUhCdmNuUWdaR1ZtWVhWc2RDQmNJbVJoZEdFNmFXMWhaMlV2YzNabkszaHRiQ3dsTTBOemRtY2xNakI0Yld4dWN5VXpSQ1V5TW1oMGRIQWxNMEVsTWtZbE1rWjNkM2N1ZHpNdWIzSm5KVEpHTWpBd01DVXlSbk4yWnlVeU1pVXlNR2hsYVdkb2RDVXpSQ1V5TWpFNEpUSXlKVEl3ZG1sbGQwSnZlQ1V6UkNVeU1qQWxNakF3SlRJd01UZ2xNakF4T0NVeU1pVXlNSGRwWkhSb0pUTkVKVEl5TVRnbE1qSWxNMFVsTWpBbE1qQWxNME5rWldaekpUTkZKVEl3SlRJd0pUSXdKVEl3SlRORGMzUjViR1VsTTBVbE1qQWxNakFsTWpBbE1qQWxNakFsTWpBdVptbHNiQ1V5TUNVM1FpVXlNQ1V5TUNVeU1DVXlNQ1V5TUNVeU1DVXlNQ1V5TUdacGJHd2xNMEVsTWpBbE1qTTJSVFpGTmtVbE0wSWxNakFsTWpBbE1qQWxNakFsTWpBbE1qQWxOMFFsTWpBbE1qQWxNakFsTWpBbE0wTWxNa1p6ZEhsc1pTVXpSU1V5TUNVeU1DVXpReVV5Um1SbFpuTWxNMFVsTWpBbE1qQWxNME4wYVhSc1pTVXpSVk1sTWpCUWNtOXdaWEowYVdWekpUSXdNVGdsTWpCT0pUTkRKVEpHZEdsMGJHVWxNMFVsTWpBbE1qQWxNME55WldOMEpUSXdhV1FsTTBRbE1qSkRZVzUyWVhNbE1qSWxNakJtYVd4c0pUTkVKVEl5SlRJelptWXhNMlJqSlRJeUpUSXdiM0JoWTJsMGVTVXpSQ1V5TWpBbE1qSWxNakIzYVdSMGFDVXpSQ1V5TWpFNEpUSXlKVEl3YUdWcFoyaDBKVE5FSlRJeU1UZ2xNaklsTWpBbE1rWWxNMFVsTTBOd1lYUm9KVEl3WTJ4aGMzTWxNMFFsTWpKbWFXeHNKVEl5SlRJd1pDVXpSQ1V5TWsweE5pNDNOU1V5UXpOSU55NDVOV0V5TGpVbE1rTXlMalVsTWtNd0pUSkRNQ1V5UXpBdE5DNDVKVEpETUVneExqSTFRUzR5TlM0eU5TVXlRekFsTWtNd0pUSkRNQ1V5UXpFbE1rTXpMakkxZGk0MVFTNHlOUzR5TlNVeVF6QWxNa013SlRKRE1DVXlRekV1TWpVbE1rTTBhREV1T0dFeUxqVWxNa015TGpVbE1rTXdKVEpETUNVeVF6QWxNa00wTGprbE1rTXdhRGd1T0VFdU1qVXVNalVsTWtNd0pUSkRNQ1V5UXpBbE1rTXhOeVV5UXpNdU56VjJMUzQxUVM0eU5TNHlOU1V5UXpBbE1rTXdKVEpETUNVeVF6RTJMamMxSlRKRE0xcE5OUzQxSlRKRE5VRXhMalVsTWtNeExqVWxNa013SlRKRE1TVXlRekVsTWtNM0pUSkRNeTQxSlRKRE1TNDFKVEpETVM0MUpUSkRNQ1V5UXpBbE1rTXhKVEpETlM0MUpUSkROVm9sTWpJbE1qQWxNa1lsTTBVbE1qQWxNakFsTTBOd1lYUm9KVEl3WTJ4aGMzTWxNMFFsTWpKbWFXeHNKVEl5SlRJd1pDVXpSQ1V5TWsweE5pNDNOU1V5UXpFelNEa3VPVFZoTWk0MUpUSkRNaTQxSlRKRE1DVXlRekFsTWtNd0xUUXVPU1V5UXpCSU1TNHlOV0V1TWpVdU1qVWxNa013SlRKRE1DVXlRekF0TGpJMUxqSTFkaTQxWVM0eU5TNHlOU1V5UXpBbE1rTXdKVEpETUNVeVF5NHlOUzR5TldnekxqaGhNaTQxSlRKRE1pNDFKVEpETUNVeVF6QWxNa013SlRKRE5DNDVKVEpETUdnMkxqaGhMakkxTGpJMUpUSkRNQ1V5UXpBbE1rTXdKVEpETGpJMUxTNHlOWFl0TGpWQkxqSTFMakkxSlRKRE1DVXlRekFsTWtNd0pUSkRNVFl1TnpVbE1rTXhNMXBOTnk0MUpUSkRNVFZCTVM0MUpUSkRNUzQxSlRKRE1DVXlRekVsTWtNeEpUSkRPU1V5UXpFekxqVWxNa014TGpVbE1rTXhMalVsTWtNd0pUSkRNQ1V5UXpFbE1rTTNMalVsTWtNeE5Wb2xNaklsTWpBbE1rWWxNMFVsTWpBbE1qQWxNME53WVhSb0pUSXdZMnhoYzNNbE0wUWxNakptYVd4c0pUSXlKVEl3WkNVelJDVXlNazB4SlRKRE9DNHlOWFl1TlVFdU1qVXVNalVsTWtNd0pUSkRNQ1V5UXpBbE1rTXhMakkxSlRKRE9XZzRMamhoTWk0MUpUSkRNaTQxSlRKRE1DVXlRekFsTWtNd0pUSkROQzQ1SlRKRE1HZ3hMamhCTGpJMUxqSTFKVEpETUNVeVF6QWxNa013SlRKRE1UY2xNa000TGpjMWRpMHVOVUV1TWpVdU1qVWxNa013SlRKRE1DVXlRekFsTWtNeE5pNDNOU1V5UXpob0xURXVPR0V5TGpVbE1rTXlMalVsTWtNd0pUSkRNQ1V5UXpBdE5DNDVKVEpETUVneExqSTFRUzR5TlM0eU5TVXlRekFsTWtNd0pUSkRNQ1V5UXpFbE1rTTRMakkxV2sweE1TVXlRemd1TlVFeExqVWxNa014TGpVbE1rTXdKVEpETVNVeVF6RWxNa014TWk0MUpUSkRNVEFsTWtNeExqVWxNa014TGpVbE1rTXdKVEpETUNVeVF6RWxNa014TVNVeVF6Z3VOVm9sTWpJbE1qQWxNa1lsTTBVbE0wTWxNa1p6ZG1jbE0wVmNJaUlzSW1WNGNHOXlkQ0JrWldaaGRXeDBJRndpWkdGMFlUcHBiV0ZuWlM5emRtY3JlRzFzTENVelEzTjJaeVV5TUhodGJHNXpKVE5FSlRJeWFIUjBjQ1V6UVNVeVJpVXlSbmQzZHk1M015NXZjbWNsTWtZeU1EQXdKVEpHYzNabkpUSXlKVEl3YUdWcFoyaDBKVE5FSlRJeU1UZ2xNaklsTWpCMmFXVjNRbTk0SlRORUpUSXlNQ1V5TURBbE1qQXhPQ1V5TURFNEpUSXlKVEl3ZDJsa2RHZ2xNMFFsTWpJeE9DVXlNaVV6UlNVeU1DVXlNQ1V6UTJSbFpuTWxNMFVsTWpBbE1qQWxNakFsTWpBbE0wTnpkSGxzWlNVelJTVXlNQ1V5TUNVeU1DVXlNQ1V5TUNVeU1DNW1hV3hzSlRJd0pUZENKVEl3SlRJd0pUSXdKVEl3SlRJd0pUSXdKVEl3SlRJd1ptbHNiQ1V6UVNVeU1DVXlNelpGTmtVMlJTVXpRaVV5TUNVeU1DVXlNQ1V5TUNVeU1DVXlNQ1UzUkNVeU1DVXlNQ1V5TUNVeU1DVXpReVV5Um5OMGVXeGxKVE5GSlRJd0pUSXdKVE5ESlRKR1pHVm1jeVV6UlNVeU1DVXlNQ1V6UTNScGRHeGxKVE5GVXlVeU1GSmxjMmw2WlNVeU1ERTRKVEl3VGlVelF5VXlSblJwZEd4bEpUTkZKVEl3SlRJd0pUTkRjbVZqZENVeU1HbGtKVE5FSlRJeVEyRnVkbUZ6SlRJeUpUSXdabWxzYkNVelJDVXlNaVV5TTJabU1UTmtZeVV5TWlVeU1HOXdZV05wZEhrbE0wUWxNakl3SlRJeUpUSXdkMmxrZEdnbE0wUWxNakl4T0NVeU1pVXlNR2hsYVdkb2RDVXpSQ1V5TWpFNEpUSXlKVEl3SlRKR0pUTkZKVE5EY0dGMGFDVXlNR05zWVhOekpUTkVKVEl5Wm1sc2JDVXlNaVV5TUdRbE0wUWxNakpOTVRVdU5TVXlRekpJTWk0MVlTNDFMalVsTWtNd0pUSkRNQ1V5UXpBdExqVXVOWFl4TTJFdU5TNDFKVEpETUNVeVF6QWxNa013SlRKRExqVXVOV2d4TTJFdU5TNDFKVEpETUNVeVF6QWxNa013SlRKRExqVXRMalZXTWk0MVFTNDFMalVsTWtNd0pUSkRNQ1V5UXpBbE1rTXhOUzQxSlRKRE1scE5PU1V5UXpFd0xqUXhOR3d5TGpJd055MHlMakl3TnlVeVF6RXVNelkySlRKRE1TNHpOalpCTGpJMUxqSTFKVEpETUNVeVF6QWxNa013SlRKRE1UTWxNa001TGpNNU5qVldOVWc0TGpZd016VmhMakkxTGpJMUpUSkRNQ1V5UXpBbE1rTXdMUzR4TnpjdU5ESTNiREV1TXpZMkpUSkRNUzR6TmpaTU55NDFPRFlsTWtNNVNEUldORWd4TkZZeE5FZzVXaVV5TWlVeU1DVXlSaVV6UlNVelF5VXlSbk4yWnlVelJWd2lJaXdpWlhod2IzSjBJR1JsWm1GMWJIUWdYQ0prWVhSaE9tbHRZV2RsTDNOMlp5dDRiV3dzSlRORGMzWm5KVEl3ZUcxc2JuTWxNMFFsTWpKb2RIUndKVE5CSlRKR0pUSkdkM2QzTG5jekxtOXlaeVV5UmpJd01EQWxNa1p6ZG1jbE1qSWxNakJvWldsbmFIUWxNMFFsTWpJeE9DVXlNaVV5TUhacFpYZENiM2dsTTBRbE1qSXdKVEl3TUNVeU1ERTRKVEl3TVRnbE1qSWxNakIzYVdSMGFDVXpSQ1V5TWpFNEpUSXlKVE5GSlRJd0pUSXdKVE5EWkdWbWN5VXpSU1V5TUNVeU1DVXlNQ1V5TUNVelEzTjBlV3hsSlRORkpUSXdKVEl3SlRJd0pUSXdKVEl3SlRJd0xtWnBiR3dsTWpBbE4wSWxNakFsTWpBbE1qQWxNakFsTWpBbE1qQWxNakFsTWpCbWFXeHNKVE5CSlRJd0pUSXpOa1UyUlRaRkpUTkNKVEl3SlRJd0pUSXdKVEl3SlRJd0pUSXdKVGRFSlRJd0pUSXdKVEl3SlRJd0pUTkRKVEpHYzNSNWJHVWxNMFVsTWpBbE1qQWxNME1sTWtaa1pXWnpKVE5GSlRJd0pUSXdKVE5EZEdsMGJHVWxNMFZUSlRJd1VtOTBZWFJsVEdWbWRFOTFkR3hwYm1VbE1qQXhPQ1V5TUU0bE0wTWxNa1owYVhSc1pTVXpSU1V5TUNVeU1DVXpRM0psWTNRbE1qQnBaQ1V6UkNVeU1rTmhiblpoY3lVeU1pVXlNR1pwYkd3bE0wUWxNaklsTWpObVpqRXpaR01sTWpJbE1qQnZjR0ZqYVhSNUpUTkVKVEl5TUNVeU1pVXlNSGRwWkhSb0pUTkVKVEl5TVRnbE1qSWxNakJvWldsbmFIUWxNMFFsTWpJeE9DVXlNaVV5TUNVeVJpVXpSU1V6UTNCaGRHZ2xNakJqYkdGemN5VXpSQ1V5TW1acGJHd2xNaklsTWpCa0pUTkVKVEl5VFRFMkxqVWxNa00xU0RVdU5XRXVOUzQxSlRKRE1DVXlRekFsTWtNd0xTNDFMalYyTVRGaExqVXVOU1V5UXpBbE1rTXdKVEpETUNVeVF5NDFMalZvTVRGaExqVXVOU1V5UXpBbE1rTXdKVEpETUNVeVF5NDFMUzQxVmpVdU5VRXVOUzQxSlRKRE1DVXlRekFsTWtNd0pUSkRNVFl1TlNVeVF6VmFUVEUySlRKRE1UWklObFkyU0RFMldpVXlNaVV5TUNVeVJpVXpSU1V5TUNVeU1DVXpRM0JoZEdnbE1qQmpiR0Z6Y3lVelJDVXlNbVpwYkd3bE1qSWxNakJrSlRORUpUSXlUVE11TnpVbE1rTTNMalZvTFRGV05tRXpKVEpETXlVeVF6QWxNa013SlRKRE1TVXlRek10TTJneFlTNDFMalVsTWtNd0pUSkRNQ1V5UXpBbE1rTXVOUzB1TlZZeVlTNDFMalVsTWtNd0pUSkRNQ1V5UXpBdExqVXRMalZvTFRGQk5DNDFKVEpETkM0MUpUSkRNQ1V5UXpBbE1rTXdKVEpETVM0eU5TVXlRelpXTnk0MWFDMHhRUzR5TlM0eU5TVXlRekFsTWtNd0pUSkRNQ1V5UXpBbE1rTTNMamMxWVM0eU5EVXVNalExSlRKRE1DVXlRekFsTWtNd0pUSkRMakEzTXpVdU1UYzFUREV1T0RReUpUSkRPUzQ1TkRFMVlTNHlOUzR5TlNVeVF6QWxNa013SlRKRE1DVXlReTR6TVRZbE1rTXdURE11T1RJMk5TVXlRemN1T1RJMVFTNHlORFV1TWpRMUpUSkRNQ1V5UXpBbE1rTXdKVEpETkNVeVF6Y3VOelV1TWpVdU1qVWxNa013SlRKRE1DVXlRekFsTWtNekxqYzFKVEpETnk0MVdpVXlNaVV5TUNVeVJpVXpSU1V6UXlVeVJuTjJaeVV6UlZ3aUlpd2laWGh3YjNKMElHUmxabUYxYkhRZ1hDSmtZWFJoT21sdFlXZGxMM04yWnl0NGJXd3NKVE5EYzNabkpUSXdlRzFzYm5NbE0wUWxNakpvZEhSd0pUTkJKVEpHSlRKR2QzZDNMbmN6TG05eVp5VXlSakl3TURBbE1rWnpkbWNsTWpJbE1qQm9aV2xuYUhRbE0wUWxNakl4T0NVeU1pVXlNSFpwWlhkQ2IzZ2xNMFFsTWpJd0pUSXdNQ1V5TURFNEpUSXdNVGdsTWpJbE1qQjNhV1IwYUNVelJDVXlNakU0SlRJeUpUTkZKVEl3SlRJd0pUTkRaR1ZtY3lVelJTVXlNQ1V5TUNVeU1DVXlNQ1V6UTNOMGVXeGxKVE5GSlRJd0pUSXdKVEl3SlRJd0pUSXdKVEl3TG1acGJHd2xNakFsTjBJbE1qQWxNakFsTWpBbE1qQWxNakFsTWpBbE1qQWxNakJtYVd4c0pUTkJKVEl3SlRJek5rVTJSVFpGSlROQ0pUSXdKVEl3SlRJd0pUSXdKVEl3SlRJd0pUZEVKVEl3SlRJd0pUSXdKVEl3SlROREpUSkdjM1I1YkdVbE0wVWxNakFsTWpBbE0wTWxNa1prWldaekpUTkZKVEl3SlRJd0pUTkRkR2wwYkdVbE0wVlRKVEl3VTJGMlpWUnZUR2xuYUhRbE1qQXhPQ1V5TUU0bE0wTWxNa1owYVhSc1pTVXpSU1V5TUNVeU1DVXpRM0psWTNRbE1qQnBaQ1V6UkNVeU1rTmhiblpoY3lVeU1pVXlNR1pwYkd3bE0wUWxNaklsTWpObVpqRXpaR01sTWpJbE1qQnZjR0ZqYVhSNUpUTkVKVEl5TUNVeU1pVXlNSGRwWkhSb0pUTkVKVEl5TVRnbE1qSWxNakJvWldsbmFIUWxNMFFsTWpJeE9DVXlNaVV5TUNVeVJpVXpSU1V6UTNCaGRHZ2xNakJqYkdGemN5VXpSQ1V5TW1acGJHd2xNaklsTWpCa0pUTkVKVEl5VFRFMkxqVWxNa00wU0RFelZqVm9NMVl4TlVneVZqVklOVlkwU0RFdU5XRXVOUzQxSlRKRE1DVXlRekFsTWtNd0xTNDFMalYyTVRGaExqVXVOU1V5UXpBbE1rTXdKVEpETUNVeVF5NDFMalZvTVRWaExqVXVOU1V5UXpBbE1rTXdKVEpETUNVeVF5NDFMUzQxVmpRdU5VRXVOUzQxSlRKRE1DVXlRekFsTWtNd0pUSkRNVFl1TlNVeVF6UmFKVEl5SlRJd0pUSkdKVE5GSlRJd0pUSXdKVE5EY0dGMGFDVXlNR05zWVhOekpUTkVKVEl5Wm1sc2JDVXlNaVV5TUdRbE0wUWxNakpOTVRJdU16azJOU1V5UXpkSU1UQldMakkxUVM0eU5TNHlOU1V5UXpBbE1rTXdKVEpETUNVeVF6a3VOelVsTWtNd1NEZ3VNalZCTGpJMUxqSTFKVEpETUNVeVF6QWxNa013SlRKRE9DVXlReTR5TlZZM1NEVXVOakF6TldFdU1qVXVNalVsTWtNd0pUSkRNQ1V5UXpBdExqRTNOalV1TkRJM1REa2xNa014TVd3ekxqVTNNeTB6TGpVM00wRXVNalV1TWpVbE1rTXdKVEpETUNVeVF6QWxNa014TWk0ek9UWTFKVEpETjFvbE1qSWxNakFsTWtZbE0wVWxNME1sTWtaemRtY2xNMFZjSWlJc0ltVjRjRzl5ZENCa1pXWmhkV3gwSUZ3aVpHRjBZVHBwYldGblpTOXpkbWNyZUcxc0xDVXpRM04yWnlVeU1IaHRiRzV6SlRORUpUSXlhSFIwY0NVelFTVXlSaVV5Um5kM2R5NTNNeTV2Y21jbE1rWXlNREF3SlRKR2MzWm5KVEl5SlRJd2FHVnBaMmgwSlRORUpUSXlNVGdsTWpJbE1qQjJhV1YzUW05NEpUTkVKVEl5TUNVeU1EQWxNakF4T0NVeU1ERTRKVEl5SlRJd2QybGtkR2dsTTBRbE1qSXhPQ1V5TWlVelJTVXlNQ1V5TUNVelEyUmxabk1sTTBVbE1qQWxNakFsTWpBbE1qQWxNME56ZEhsc1pTVXpSU1V5TUNVeU1DVXlNQ1V5TUNVeU1DVXlNQzVoSlRJd0pUZENKVEl3SlRJd0pUSXdKVEl3SlRJd0pUSXdKVEl3SlRJd1ptbHNiQ1V6UVNVeU1DVXlNelpGTmtVMlJTVXpRaVV5TUNVeU1DVXlNQ1V5TUNVeU1DVXlNQ1UzUkNVeU1DVXlNQ1V5TUNVeU1DVXpReVV5Um5OMGVXeGxKVE5GSlRJd0pUSXdKVE5ESlRKR1pHVm1jeVV6UlNVeU1DVXlNQ1V6UTNScGRHeGxKVE5GVXlVeU1GUmxlSFFsTWpBeE9DVXlNRTRsTTBNbE1rWjBhWFJzWlNVelJTVXlNQ1V5TUNVelEzSmxZM1FsTWpCcFpDVXpSQ1V5TWtOaGJuWmhjeVV5TWlVeU1HWnBiR3dsTTBRbE1qSWxNak5tWmpFelpHTWxNaklsTWpCdmNHRmphWFI1SlRORUpUSXlNQ1V5TWlVeU1IZHBaSFJvSlRORUpUSXlNVGdsTWpJbE1qQm9aV2xuYUhRbE0wUWxNakl4T0NVeU1pVXlNQ1V5UmlVelJTVXpRM0JoZEdnbE1qQmpiR0Z6Y3lVelJDVXlNbUVsTWpJbE1qQmtKVE5FSlRJeVRUSXVOU1V5UXpKaExqVXVOU1V5UXpBbE1rTXdKVEpETUMwdU5TNDFkak5oTGpVdU5TVXlRekFsTWtNd0pUSkRNQ1V5UXk0MUxqVm9NVUV1TlM0MUpUSkRNQ1V5UXpBbE1rTXdKVEpETkNVeVF6VXVOVlkwU0RoV01UUklOaTQxWVM0MUxqVWxNa013SlRKRE1DVXlRekF0TGpVdU5YWXhZUzQxTGpVbE1rTXdKVEpETUNVeVF6QWxNa011TlM0MWFEVmhMalV1TlNVeVF6QWxNa013SlRKRE1DVXlReTQxTFM0MWRpMHhZUzQxTGpVbE1rTXdKVEpETUNVeVF6QXRMalV0TGpWSU1UQldOR2cwVmpVdU5XRXVOUzQxSlRKRE1DVXlRekFsTWtNd0pUSkRMalV1TldneFlTNDFMalVsTWtNd0pUSkRNQ1V5UXpBbE1rTXVOUzB1TlhZdE0yRXVOUzQxSlRKRE1DVXlRekFsTWtNd0xTNDFMUzQxV2lVeU1pVXlNQ1V5UmlVelJTVXpReVV5Um5OMlp5VXpSVndpSWl3aVpYaHdiM0owSUdSbFptRjFiSFFnWENKa1lYUmhPbWx0WVdkbEwzTjJaeXQ0Yld3c0pUTkRjM1puSlRJd2VHMXNibk1sTTBRbE1qSm9kSFJ3SlROQkpUSkdKVEpHZDNkM0xuY3pMbTl5WnlVeVJqSXdNREFsTWtaemRtY2xNaklsTWpCb1pXbG5hSFFsTTBRbE1qSXhPQ1V5TWlVeU1IWnBaWGRDYjNnbE0wUWxNakl3SlRJd01DVXlNREU0SlRJd01UZ2xNaklsTWpCM2FXUjBhQ1V6UkNVeU1qRTRKVEl5SlRORkpUSXdKVEl3SlRORFpHVm1jeVV6UlNVeU1DVXlNQ1V5TUNVeU1DVXpRM04wZVd4bEpUTkZKVEl3SlRJd0pUSXdKVEl3SlRJd0pUSXdMbUVsTWpBbE4wSWxNakFsTWpBbE1qQWxNakFsTWpBbE1qQWxNakFsTWpCbWFXeHNKVE5CSlRJd0pUSXpOa1UyUlRaRkpUTkNKVEl3SlRJd0pUSXdKVEl3SlRJd0pUSXdKVGRFSlRJd0pUSXdKVEl3SlRJd0pUTkRKVEpHYzNSNWJHVWxNMFVsTWpBbE1qQWxNME1sTWtaa1pXWnpKVE5GSlRJd0pUSXdKVE5EZEdsMGJHVWxNMFZUSlRJd1ZtbGtaVzlQZFhSc2FXNWxKVEl3TVRnbE1qQk9KVE5ESlRKR2RHbDBiR1VsTTBVbE1qQWxNakFsTTBOeVpXTjBKVEl3YVdRbE0wUWxNakpEWVc1MllYTWxNaklsTWpCbWFXeHNKVE5FSlRJeUpUSXpabVl4TTJSakpUSXlKVEl3YjNCaFkybDBlU1V6UkNVeU1qQWxNaklsTWpCM2FXUjBhQ1V6UkNVeU1qRTRKVEl5SlRJd2FHVnBaMmgwSlRORUpUSXlNVGdsTWpJbE1qQWxNa1lsTTBVbE0wTndZWFJvSlRJd1kyeGhjM01sTTBRbE1qSmhKVEl5SlRJd1pDVXpSQ1V5TWsweE5TNDFKVEpETWtneUxqVmhMalV1TlNVeVF6QWxNa013SlRKRE1DMHVOUzQxZGpFellTNDFMalVsTWtNd0pUSkRNQ1V5UXpBbE1rTXVOUzQxYURFellTNDFMalVsTWtNd0pUSkRNQ1V5UXpBbE1rTXVOUzB1TlZZeUxqVkJMalV1TlNVeVF6QWxNa013SlRKRE1DVXlRekUxTGpVbE1rTXlXazAxSlRKRE1UUXVOelZoTGpJMUxqSTFKVEpETUNVeVF6QWxNa014TFM0eU5TNHlOVWd6TGpJMVFTNHlOUzR5TlNVeVF6QWxNa013SlRKRE1TVXlRek1sTWtNeE5DNDNOWFl0TVM0MVFTNHlOUzR5TlNVeVF6QWxNa013SlRKRE1TVXlRek11TWpVbE1rTXhNMmd4TGpWaExqSTFMakkxSlRKRE1DVXlRekFsTWtNeEpUSkRMakkxTGpJMVdtMHdMVE11TXpVellTNHlOUzR5TlNVeVF6QWxNa013SlRKRE1TMHVNalV1TWpWSU15NHlOV0V1TWpVdU1qVWxNa013SlRKRE1DVXlRekV0TGpJMUxTNHlOWFl0TVM0MVlTNHlOUzR5TlNVeVF6QWxNa013SlRKRE1TVXlReTR5TlMwdU1qVm9NUzQxWVM0eU5TNHlOU1V5UXpBbE1rTXdKVEpETVNVeVF5NHlOUzR5TlZwTk5TVXlRemd1TVRBellTNHlOUzR5TlNVeVF6QWxNa013SlRKRE1TMHVNalV1TWpWSU15NHlOVUV1TWpVdU1qVWxNa013SlRKRE1DVXlRekVsTWtNekpUSkRPQzR4TUROMkxURXVOV0V1TWpVdU1qVWxNa013SlRKRE1DVXlRekVsTWtNdU1qVXRMakkxYURFdU5XRXVNalV1TWpVbE1rTXdKVEpETUNVeVF6RWxNa011TWpVdU1qVmFUVFVsTWtNMExqYzFRUzR5TlM0eU5TVXlRekFsTWtNd0pUSkRNU1V5UXpRdU56VWxNa00xU0RNdU1qVkJMakkxTGpJMUpUSkRNQ1V5UXpBbE1rTXhKVEpETXlVeVF6UXVOelZXTXk0eU5VRXVNalV1TWpVbE1rTXdKVEpETUNVeVF6RWxNa016TGpJMUpUSkRNMmd4TGpWQkxqSTFMakkxSlRKRE1DVXlRekFsTWtNeEpUSkROU1V5UXpNdU1qVmFUVEV5SlRKRE1UVklObFl4TUdnMldtMHdMVGRJTmxZemFEWmFiVE1sTWtNMkxqYzFZUzR5TlM0eU5TVXlRekFsTWtNd0pUSkRNUzB1TWpVdU1qVm9MVEV1TldFdU1qVXVNalVsTWtNd0pUSkRNQ1V5UXpFdExqSTFMUzR5TlhZdE1TNDFZUzR5TlM0eU5TVXlRekFsTWtNd0pUSkRNU1V5UXk0eU5TMHVNalZvTVM0MVlTNHlOUzR5TlNVeVF6QWxNa013SlRKRE1TVXlReTR5TlM0eU5WcHRNQzB6TGpNMU0yRXVNalV1TWpVbE1rTXdKVEpETUNVeVF6RXRMakkxTGpJMWFDMHhMalZoTGpJMUxqSTFKVEpETUNVeVF6QWxNa014TFM0eU5TMHVNalYyTFRFdU5XRXVNalV1TWpVbE1rTXdKVEpETUNVeVF6RWxNa011TWpVdExqSTFhREV1TldFdU1qVXVNalVsTWtNd0pUSkRNQ1V5UXpFbE1rTXVNalV1TWpWYWJUQXRNeTR5T1RSaExqSTFMakkxSlRKRE1DVXlRekFsTWtNeExTNHlOUzR5TldndE1TNDFZUzR5TlM0eU5TVXlRekFsTWtNd0pUSkRNUzB1TWpVdExqSTFkaTB4TGpWaExqSTFMakkxSlRKRE1DVXlRekFsTWtNeEpUSkRMakkxTFM0eU5XZ3hMalZoTGpJMUxqSTFKVEpETUNVeVF6QWxNa014SlRKRExqSTFMakkxV2sweE5TVXlRelF1TnpWaExqSTFMakkxSlRKRE1DVXlRekFsTWtNeExTNHlOUzR5TldndE1TNDFRUzR5TlM0eU5TVXlRekFsTWtNd0pUSkRNU1V5UXpFekpUSkROQzQzTlZZekxqSTFRUzR5TlM0eU5TVXlRekFsTWtNd0pUSkRNU1V5UXpFekxqSTFKVEpETTJneExqVmhMakkxTGpJMUpUSkRNQ1V5UXpBbE1rTXhKVEpETGpJMUxqSTFXaVV5TWlVeU1DVXlSaVV6UlNVelF5VXlSbk4yWnlVelJWd2lJaXdpTHlvcVhHNGdLaUJEYjNCNWNtbG5hSFFnTWpBeU15QkJaRzlpWlZ4dUlDb2dRV3hzSUZKcFoyaDBjeUJTWlhObGNuWmxaQzVjYmlBcVhHNGdLaUJPVDFSSlEwVTZJRUZrYjJKbElIQmxjbTFwZEhNZ2VXOTFJSFJ2SUhWelpTd2diVzlrYVdaNUxDQmhibVFnWkdsemRISnBZblYwWlNCMGFHbHpJR1pwYkdVZ2FXNWNiaUFxSUdGalkyOXlaR0Z1WTJVZ2QybDBhQ0IwYUdVZ2RHVnliWE1nYjJZZ2RHaGxJRUZrYjJKbElHeHBZMlZ1YzJVZ1lXZHlaV1Z0Wlc1MElHRmpZMjl0Y0dGdWVXbHVaMXh1SUNvZ2FYUXVYRzRnS2k5Y2JseHVMeW9xWEc0Z0tpQnBiWEJ2Y25SeklIUm9aU0JsWkdsMGN5QmhibVFnWVdOMGFYWnBkR2xsY3lCcFkyOXVjMXh1SUNvdlhHNXBiWEJ2Y25RZ2RXNXJibTkzYmlCbWNtOXRJQ2N1TGk4dUxpOWhjM05sZEhNdmMzWm5MMkZzWlhKMExXTnBjbU5zWlMxa1lYSnJMbk4yWnljN1hHNXBiWEJ2Y25RZ1kyOXNiM0pCWkdwMWMzUmxiV1Z1ZEhNZ1puSnZiU0FuTGk0dkxpNHZZWE56WlhSekwzTjJaeTlqYjJ4dmNpMXdZV3hsZEhSbExXUmhjbXN1YzNabkp6dGNibWx0Y0c5eWRDQmpjbTl3Y0dWa0lHWnliMjBnSnk0dUx5NHVMMkZ6YzJWMGN5OXpkbWN2WTNKdmNDMWtZWEpyTG5OMlp5YzdYRzVwYlhCdmNuUWdaSEpoZDJsdVp5Qm1jbTl0SUNjdUxpOHVMaTloYzNObGRITXZjM1puTDJSeVlYY3RaR0Z5YXk1emRtY25PMXh1YVcxd2IzSjBJR1ZrYVhSbFpDQm1jbTl0SUNjdUxpOHVMaTloYzNObGRITXZjM1puTDJWa2FYUXRhVzR0YkdsbmFIUXRaR0Z5YXk1emRtY25PMXh1YVcxd2IzSjBJRzl3Wlc1bFpDQm1jbTl0SUNjdUxpOHVMaTloYzNObGRITXZjM1puTDJsdGNHOXlkQzFrWVhKckxuTjJaeWM3WEc1cGJYQnZjblFnWTI5dFltbHVaV1JCYzNObGRITWdabkp2YlNBbkxpNHZMaTR2WVhOelpYUnpMM04yWnk5c1lYbGxjbk10WkdGeWF5NXpkbWNuTzF4dWFXMXdiM0owSUdOeVpXRjBaV1FnWm5KdmJTQW5MaTR2TGk0dllYTnpaWFJ6TDNOMlp5OXVaWGN0YVhSbGJTMWtZWEpyTG5OMlp5YzdYRzVwYlhCdmNuUWdkR2h5WldWa0lHWnliMjBnSnk0dUx5NHVMMkZ6YzJWMGN5OXpkbWN2YjNKaWFYUXRaR0Z5YXk1emRtY25PMXh1YVcxd2IzSjBJR1pwYkhSbGNtVmtJR1p5YjIwZ0p5NHVMeTR1TDJGemMyVjBjeTl6ZG1jdmNISnZjR1Z5ZEdsbGN5MWtZWEpyTG5OMlp5YzdYRzVwYlhCdmNuUWdjbVZ6YVhwbFpDQm1jbTl0SUNjdUxpOHVMaTloYzNObGRITXZjM1puTDNKbGMybDZaUzFrWVhKckxuTjJaeWM3WEc1cGJYQnZjblFnYjNKcFpXNTBZWFJwYjI0Z1puSnZiU0FuTGk0dkxpNHZZWE56WlhSekwzTjJaeTl5YjNSaGRHVXRiR1ZtZEMxdmRYUnNhVzVsTFdSaGNtc3VjM1puSnp0Y2JtbHRjRzl5ZENCd2JHRmpaV1FnWm5KdmJTQW5MaTR2TGk0dllYTnpaWFJ6TDNOMlp5OXpZWFpsTFhSdkxXeHBaMmgwTFdSaGNtc3VjM1puSnp0Y2JtbHRjRzl5ZENCMFpYaDBJR1p5YjIwZ0p5NHVMeTR1TDJGemMyVjBjeTl6ZG1jdmRHVjRkQzFrWVhKckxuTjJaeWM3WEc1cGJYQnZjblFnWVc1cGJXRjBhVzl1Vm1sa1pXOGdabkp2YlNBbkxpNHZMaTR2WVhOelpYUnpMM04yWnk5MmFXUmxieTF2ZFhSc2FXNWxMV1JoY21zdWMzWm5KenRjYmx4dVpYaHdiM0owSUdOdmJuTjBJR2xqYjI1eklEMGdlMXh1SUNBbll6SndZUzVqYjJ4dmNsOWhaR3AxYzNSdFpXNTBjeWM2SUdOdmJHOXlRV1JxZFhOMFpXMWxiblJ6TEZ4dUlDQW5Zekp3WVM1amNtVmhkR1ZrSnpvZ1kzSmxZWFJsWkN4Y2JpQWdKMk15Y0dFdVkzSnZjSEJsWkNjNklHTnliM0J3WldRc1hHNGdJQ2RqTW5CaExtUnlZWGRwYm1jbk9pQmtjbUYzYVc1bkxGeHVJQ0FuWXpKd1lTNWxaR2wwWldRbk9pQmxaR2wwWldRc1hHNGdJQ2RqTW5CaExtWnBiSFJsY21Wa0p6b2dabWxzZEdWeVpXUXNYRzRnSUNkak1uQmhMbTl3Wlc1bFpDYzZJRzl3Wlc1bFpDeGNiaUFnSjJNeWNHRXViM0pwWlc1MFlYUnBiMjRuT2lCdmNtbGxiblJoZEdsdmJpeGNiaUFnSjJNeWNHRXVjR3hoWTJWa0p6b2djR3hoWTJWa0xGeHVJQ0FuWXpKd1lTNXlaWE5wZW1Wa0p6b2djbVZ6YVhwbFpDeGNiaUFnSjJNeWNHRXVkVzVyYm05M2JpYzZJSFZ1YTI1dmQyNHNYRzRnSUNkamIyMHVZV1J2WW1VdU0yUW5PaUIwYUhKbFpXUXNYRzRnSUNkamIyMHVZV1J2WW1VdVlXNXBiV0YwYVc5dVgzWnBaR1Z2SnpvZ1lXNXBiV0YwYVc5dVZtbGtaVzhzWEc0Z0lDZGpiMjB1WVdSdlltVXVZMjl0WW1sdVpXUmZZWE56YzJWMGN5YzZJR052YldKcGJtVmtRWE56WlhSekxGeHVJQ0FuWTI5dExtRmtiMkpsTG5SbGVIUW5PaUIwWlhoMExGeHVmVHRjYmlJc0lpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElESXdNaklnUVdSdlltVmNiaUFxSUVGc2JDQlNhV2RvZEhNZ1VtVnpaWEoyWldRdVhHNGdLbHh1SUNvZ1RrOVVTVU5GT2lCQlpHOWlaU0J3WlhKdGFYUnpJSGx2ZFNCMGJ5QjFjMlVzSUcxdlpHbG1lU3dnWVc1a0lHUnBjM1J5YVdKMWRHVWdkR2hwY3lCbWFXeGxJR2x1WEc0Z0tpQmhZMk52Y21SaGJtTmxJSGRwZEdnZ2RHaGxJSFJsY20xeklHOW1JSFJvWlNCQlpHOWlaU0JzYVdObGJuTmxJR0ZuY21WbGJXVnVkQ0JoWTJOdmJYQmhibmxwYm1kY2JpQXFJR2wwTGx4dUlDb3ZYRzVjYm1sdGNHOXlkQ0I3SUVGamRHbHZiaXdnUXpKd1lVRmpkR2x2Ym5OQmMzTmxjblJwYjI0Z2ZTQm1jbTl0SUNkQVl6SndZUzloWkc5aVpTMTBiMjlzYTJsMEp6dGNibWx0Y0c5eWRDQmtaV0oxWnlCbWNtOXRJQ2RrWldKMVp5YzdYRzVwYlhCdmNuUWdaV0ZqYUNCbWNtOXRJQ2RzYjJSaGMyZ3ZaV0ZqYUNjN1hHNXBiWEJ2Y25RZ1kyOXRjR0ZqZENCbWNtOXRJQ2RzYjJSaGMyZ3ZabkF2WTI5dGNHRmpkQ2M3WEc1cGJYQnZjblFnWm14dmR5Qm1jbTl0SUNkc2IyUmhjMmd2Wm5BdlpteHZkeWM3WEc1cGJYQnZjblFnYzI5eWRFSjVJR1p5YjIwZ0oyeHZaR0Z6YUM5bWNDOXpiM0owUW5rbk8xeHVhVzF3YjNKMElIVnVhWEZDZVNCbWNtOXRJQ2RzYjJSaGMyZ3ZabkF2ZFc1cGNVSjVKenRjYm1sdGNHOXlkQ0J0WVhCTFpYbHpJR1p5YjIwZ0oyeHZaR0Z6YUM5dFlYQkxaWGx6Snp0Y2JtbHRjRzl5ZENCdFpYSm5aU0JtY205dElDZHNiMlJoYzJndmJXVnlaMlVuTzF4dWFXMXdiM0owSUhObGRDQm1jbTl0SUNkc2IyUmhjMmd2YzJWMEp6dGNibWx0Y0c5eWRDQXFJR0Z6SUd4dlkyRnNaWE1nWm5KdmJTQW5MaTR2TGk0dmFURTRiaTlwYm1SbGVDYzdYRzVwYlhCdmNuUWdleUJFYjNkdWJHOWhaR1Z5SUgwZ1puSnZiU0FuTGk0dmJHbGlMMlJ2ZDI1c2IyRmtaWEluTzF4dWFXMXdiM0owSUhzZ2FXTnZibk1nZlNCbWNtOXRJQ2N1TGk5c2FXSXZhV052YmljN1hHNXBiWEJ2Y25RZ2V5Qk5ZVzVwWm1WemRDQjlJR1p5YjIwZ0p5NHVMMjFoYm1sbVpYTjBKenRjYmx4dVkyOXVjM1FnWkdKbklEMGdaR1ZpZFdjb0oyTXljR0U2YzJWc1pXTjBiM0k2WldScGRITkJibVJCWTNScGRtbDBlU2NwTzF4dVhHNHZMeUJOWVd0bElITjFjbVVnZDJVZ2RYQmtZWFJsSUhSb1pTQnJaWGx6SUhSdklHTnZibVp2Y20wZ2RHOGdRa05RSURRM0lIUmhaM05jYm1OdmJuTjBJR0pqY0RRM1RXRndjR2x1WnlBOUlHMWhjRXRsZVhNb2JHOWpZV3hsY3lCaGN5QlNaV052Y21ROGMzUnlhVzVuTENCaGJuaytMQ0FvWHl3Z2EyVjVLU0E5UGx4dUlDQnJaWGt1Y21Wd2JHRmpaU2duWHljc0lDY3RKeWtzWEc0cE8xeHVYRzVwYm5SbGNtWmhZMlVnUVdSdlltVkVhV04wYVc5dVlYSjVRWE56WlhKMGFXOXVSR0YwWVNCN1hHNGdJSFZ5YkRvZ2MzUnlhVzVuTzF4dWZWeHVYRzVrWldOc1lYSmxJRzF2WkhWc1pTQW5MaTR2WVhOelpYSjBhVzl1Y3ljZ2UxeHVJQ0JwYm5SbGNtWmhZMlVnUlhoMFpXNWtaV1JCYzNObGNuUnBiMjV6SUh0Y2JpQWdJQ0FuWVdSdlltVXVaR2xqZEdsdmJtRnllU2M2SUVGa2IySmxSR2xqZEdsdmJtRnllVUZ6YzJWeWRHbHZia1JoZEdFN1hHNGdJQ0FnSjJOdmJTNWhaRzlpWlM1a2FXTjBhVzl1WVhKNUp6b2dRV1J2WW1WRWFXTjBhVzl1WVhKNVFYTnpaWEowYVc5dVJHRjBZVHRjYmlBZ2ZWeHVmVnh1WEc1amIyNXpkQ0JFUlVaQlZVeFVYMHhQUTBGTVJTQTlJQ2RsYmkxVlV5YzdYRzVqYjI1emRDQlZUa05CVkVWSFQxSkpXa1ZFWDBsRUlEMGdKMVZPUTBGVVJVZFBVa2xhUlVRbk8xeHVYRzVwYm5SbGNtWmhZMlVnUVdOMGFXOXVSR2xqZEdsdmJtRnllVWwwWlcwZ2UxeHVJQ0JzWVdKbGJEb2djM1J5YVc1bk8xeHVJQ0JrWlhOamNtbHdkR2x2YmpvZ2MzUnlhVzVuTzF4dWZWeHVYRzVsZUhCdmNuUWdhVzUwWlhKbVlXTmxJRlJ5WVc1emJHRjBaV1JFYVdOMGFXOXVZWEo1UTJGMFpXZHZjbmtnZTF4dUlDQnBaRG9nYzNSeWFXNW5PMXh1SUNCcFkyOXVPaUJ6ZEhKcGJtY2dmQ0J1ZFd4c08xeHVJQ0JzWVdKbGJEb2djM1J5YVc1bk8xeHVJQ0JrWlhOamNtbHdkR2x2YmpvZ2MzUnlhVzVuTzF4dWZWeHVYRzVsZUhCdmNuUWdkSGx3WlNCSlkyOXVWbUZ5YVdGdWRDQTlJQ2RzYVdkb2RDY2dmQ0FuWkdGeWF5YzdYRzVjYm1WNGNHOXlkQ0JwYm5SbGNtWmhZMlVnUVdSdlltVkVhV04wYVc5dVlYSjVJSHRjYmlBZ1kyRjBaV2R2Y21sbGN6b2dlMXh1SUNBZ0lGdGpZWFJsWjI5eWVVbGtPaUJ6ZEhKcGJtZGRPaUJCWkc5aVpVUnBZM1JwYjI1aGNubERZWFJsWjI5eWVUdGNiaUFnZlR0Y2JpQWdZV04wYVc5dWN6b2dlMXh1SUNBZ0lGdGhZM1JwYjI1SlpEb2djM1J5YVc1blhUb2dRV1J2WW1WRWFXTjBhVzl1WVhKNVFXTjBhVzl1TzF4dUlDQjlPMXh1ZlZ4dVpYaHdiM0owSUdsdWRHVnlabUZqWlNCQlpHOWlaVVJwWTNScGIyNWhjbmxEWVhSbFoyOXllU0I3WEc0Z0lHbGpiMjQ2SUhOMGNtbHVaenRjYmlBZ2JHRmlaV3h6T2lCN1hHNGdJQ0FnVzJ4dlkyRnNaVG9nYzNSeWFXNW5YVG9nYzNSeWFXNW5PMXh1SUNCOU8xeHVJQ0JrWlhOamNtbHdkR2x2Ym5NNklIdGNiaUFnSUNCYmJHOWpZV3hsT2lCemRISnBibWRkT2lCemRISnBibWM3WEc0Z0lIMDdYRzU5WEc1Y2JtVjRjRzl5ZENCcGJuUmxjbVpoWTJVZ1FXUnZZbVZFYVdOMGFXOXVZWEo1UVdOMGFXOXVJSHRjYmlBZ2JHRmlaV3h6T2lCN1hHNGdJQ0FnVzJsemIweGhibWREYjJSbE9pQnpkSEpwYm1kZE9pQnpkSEpwYm1jN1hHNGdJSDA3WEc0Z0lHTmhkR1ZuYjNKNU9pQnpkSEpwYm1jN1hHNTlYRzVjYm1WNGNHOXlkQ0JwYm5SbGNtWmhZMlVnUldScGRFTmhkR1ZuYjNKNUlIdGNiaUFnYVdRNklITjBjbWx1Wnp0Y2JpQWdhV052YmpvZ2MzUnlhVzVuTzF4dUlDQnNZV0psYkRvZ2MzUnlhVzVuTzF4dUlDQmtaWE5qY21sd2RHbHZiam9nYzNSeWFXNW5PMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFZGxkSE1nWVNCc2FYTjBJRzltSUhSeVlXNXpiR0YwYVc5dWN5Qm1iM0lnZEdobElISmxjWFZsYzNSbFpDQnNiMk5oYkdVdUlFRnVlU0J0YVhOemFXNW5JSFJ5WVc1emJHRjBhVzl1Y3lCcGJpQnZkR2hsY2lCc2IyTmhiR1Z6WEc0Z0tpQjNhV3hzSUdKbElHWnBiR3hsWkNCcGJpQjNhWFJvSUdWdWRISnBaWE1nWm5KdmJTQjBhR1VnUkVWR1FWVk1WRjlNVDBOQlRFVXVYRzRnS2x4dUlDb2dRSEJoY21GdElHeHZZMkZzWlNBdElFSkRVQzAwTnlCc2IyTmhiR1VnWTI5a1pTQW9aUzVuTGlCZ1pXNHRWVk5nTENCZ1puSXRSbEpnS1NCMGJ5QnlaWEYxWlhOMElHeHZZMkZzYVhwbFpDQnpkSEpwYm1kekxDQnBaaUJoZG1GcGJHRmliR1ZjYmlBcUwxeHVablZ1WTNScGIyNGdaMlYwVkhKaGJuTnNZWFJwYjI1elJtOXlURzlqWVd4bEtHeHZZMkZzWlRvZ2MzUnlhVzVuSUQwZ1JFVkdRVlZNVkY5TVQwTkJURVVwSUh0Y2JpQWdZMjl1YzNRZ1pHVm1ZWFZzZEZObGRDQTlJQ2hpWTNBME4wMWhjSEJwYm1kYlJFVkdRVlZNVkY5TVQwTkJURVZkUHk1elpXeGxZM1J2Y25OY2JpQWdJQ0EvTG1Wa2FYUnpRVzVrUVdOMGFYWnBkSGtnUHo4Z2UzMHBJR0Z6SUZKbFkyOXlaRHh6ZEhKcGJtY3NJRUZqZEdsdmJrUnBZM1JwYjI1aGNubEpkR1Z0UGp0Y2JpQWdZMjl1YzNRZ2NtVnhkV1Z6ZEdWa1UyVjBJRDBnS0dKamNEUTNUV0Z3Y0dsdVoxdHNiMk5oYkdWZFB5NXpaV3hsWTNSdmNuTS9MbVZrYVhSelFXNWtRV04wYVhacGRIa2dQejljYmlBZ0lDQjdmU2tnWVhNZ1VtVmpiM0prUEhOMGNtbHVaeXdnUVdOMGFXOXVSR2xqZEdsdmJtRnllVWwwWlcwK08xeHVYRzRnSUdsbUlDaHNiMk5oYkdVZ1BUMDlJRVJGUmtGVlRGUmZURTlEUVV4RktTQjdYRzRnSUNBZ2NtVjBkWEp1SUdSbFptRjFiSFJUWlhRN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2JXVnlaMlVvZTMwc0lHUmxabUYxYkhSVFpYUXNJSEpsY1hWbGMzUmxaRk5sZENrN1hHNTlYRzVjYmk4cUtseHVJQ29nUjJWMGN5QmhJR3hwYzNRZ2IyWWdZMkYwWldkdmNtbDZaV1FnWVdOMGFXOXVjeXdnWkdWeWFYWmxaQ0JtY205dElIUm9aU0J3Y205MmFXUmxaQ0J0WVc1cFptVnpkQ2R6SUdCak1uQmhMbUZqZEdsdmJtQWdZWE56WlhKMGFXOXVYRzRnS2lCaGJtUWdZU0JrYVdOMGFXOXVZWEo1SUdGemMyVnlkR2x2Yml3Z2FXWWdZWFpoYVd4aFlteGxMaUJKWmlCaElHUnBZM1JwYjI1aGNua2dhWE1nYVc1amRXUmxaQ3dnZEdocGN5Qm1kVzVqZEdsdmJpQjNhV3hzSUdsdWFYUnBZWFJsWEc0Z0tpQmhiaUJJVkZSUUlISmxjWFZsYzNRZ2RHOGdabVYwWTJnZ2RHaGxJR1JwWTNScGIyNWhjbmtnWkdGMFlTNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2JXRnVhV1psYzNRZ0xTQk5ZVzVwWm1WemRDQjBieUJrWlhKcGRtVWdaR0YwWVNCbWNtOXRYRzRnS2lCQWNHRnlZVzBnYkc5allXeGxJQzBnUWtOUUxUUTNJR3h2WTJGc1pTQmpiMlJsSUNobExtY3VJR0JsYmkxVlUyQXNJR0JtY2kxR1VtQXBJSFJ2SUhKbGNYVmxjM1FnYkc5allXeHBlbVZrSUhOMGNtbHVaM01zSUdsbUlHRjJZV2xzWVdKc1pWeHVJQ29nUUhCaGNtRnRJR2xqYjI1V1lYSnBZVzUwSUMwZ1VtVnhkV1Z6ZEhNZ2FXTnZiaUIyWVhKcFlXNTBJQ2hsTG1jdUlHQnNhV2RvZEdBc0lHQmtZWEpyWUNrc0lHbG1JR0YyWVdsc1lXSnNaVnh1SUNvZ1FISmxkSFZ5Ym5NZ1RHbHpkQ0J2WmlCMGNtRnVjMnhoZEdWa0lHRmpkR2x2YmlCallYUmxaMjl5YVdWelhHNGdLaTljYm1WNGNHOXlkQ0JoYzNsdVl5Qm1kVzVqZEdsdmJpQnpaV3hsWTNSRlpHbDBjMEZ1WkVGamRHbDJhWFI1S0Z4dUlDQnRZVzVwWm1WemREb2dUV0Z1YVdabGMzUXNYRzRnSUd4dlkyRnNaVG9nYzNSeWFXNW5JRDBnUkVWR1FWVk1WRjlNVDBOQlRFVXNYRzRnSUdsamIyNVdZWEpwWVc1ME9pQkpZMjl1Vm1GeWFXRnVkQ0E5SUNka1lYSnJKeXhjYmlrNklGQnliMjFwYzJVOFZISmhibk5zWVhSbFpFUnBZM1JwYjI1aGNubERZWFJsWjI5eWVWdGRJSHdnYm5Wc2JENGdlMXh1SUNCamIyNXpkQ0JrYVdOMGFXOXVZWEo1UVhOelpYSjBhVzl1SUQxY2JpQWdJQ0J0WVc1cFptVnpkQzVoYzNObGNuUnBiMjV6TG1kbGRDZ25ZMjl0TG1Ga2IySmxMbVJwWTNScGIyNWhjbmtuS1Zzd1hTQS9QMXh1SUNBZ0lHMWhibWxtWlhOMExtRnpjMlZ5ZEdsdmJuTXVaMlYwS0NkaFpHOWlaUzVrYVdOMGFXOXVZWEo1SnlsYk1GMDdYRzVjYmlBZ1kyOXVjM1FnVzJGamRHbHZia0Z6YzJWeWRHbHZibDBnUFNCdFlXNXBabVZ6ZEM1aGMzTmxjblJwYjI1ekxtZGxkQ2duWXpKd1lTNWhZM1JwYjI1ekp5azdYRzVjYmlBZ2FXWWdLQ0ZoWTNScGIyNUJjM05sY25ScGIyNHBJSHRjYmlBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ2ZWeHVYRzRnSUdsbUlDaGthV04wYVc5dVlYSjVRWE56WlhKMGFXOXVLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHZGxkRkJvYjNSdmMyaHZjRU5oZEdWbmIzSnBlbVZrUVdOMGFXOXVjeWhjYmlBZ0lDQWdJR0ZqZEdsdmJrRnpjMlZ5ZEdsdmJpNWtZWFJoTG1GamRHbHZibk1zWEc0Z0lDQWdJQ0JrYVdOMGFXOXVZWEo1UVhOelpYSjBhVzl1TG1SaGRHRXVkWEpzTEZ4dUlDQWdJQ0FnYkc5allXeGxMRnh1SUNBZ0lDQWdhV052YmxaaGNtbGhiblFzWEc0Z0lDQWdLVHRjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJuWlhSRE1uQmhRMkYwWldkdmNtbDZaV1JCWTNScGIyNXpLR0ZqZEdsdmJrRnpjMlZ5ZEdsdmJpd2diRzlqWVd4bEtUdGNibjFjYmx4dVlYTjVibU1nWm5WdVkzUnBiMjRnWjJWMFVHaHZkRzl6YUc5d1EyRjBaV2R2Y21sNlpXUkJZM1JwYjI1ektGeHVJQ0JoWTNScGIyNXpPaUJCWTNScGIyNWJYU3hjYmlBZ1pHbGpkR2x2Ym1GeWVWVnliRG9nYzNSeWFXNW5MRnh1SUNCc2IyTmhiR1VnUFNCRVJVWkJWVXhVWDB4UFEwRk1SU3hjYmlBZ2FXTnZibFpoY21saGJuUTZJRWxqYjI1V1lYSnBZVzUwSUQwZ0oyUmhjbXNuTEZ4dUtUb2dVSEp2YldselpUeFVjbUZ1YzJ4aGRHVmtSR2xqZEdsdmJtRnllVU5oZEdWbmIzSjVXMTArSUh0Y2JpQWdZMjl1YzNRZ1pHbGpkR2x2Ym1GeWVTQTlJR0YzWVdsMElFUnZkMjVzYjJGa1pYSXVZMkZqYUdWa1IyVjBTbk52Ymp4QlpHOWlaVVJwWTNScGIyNWhjbmsrS0Z4dUlDQWdJR1JwWTNScGIyNWhjbmxWY213c1hHNGdJQ2s3WEc1Y2JpQWdZMjl1YzNRZ1kyRjBaV2R2Y21sbGN5QTlJSEJ5YjJObGMzTkRZWFJsWjI5eWFXVnpLRnh1SUNBZ0lHRmpkR2x2Ym5NdWJXRndLQ2hoWTNScGIyNHBJRDArWEc0Z0lDQWdJQ0IwY21GdWMyeGhkR1ZCWTNScGIyNU9ZVzFsS0Z4dUlDQWdJQ0FnSUNCa2FXTjBhVzl1WVhKNUxGeHVJQ0FnSUNBZ0lDQXZMeUJVVDBSUE9pQlVhR2x6SUhOb2IzVnNaQ0JpWlNCeVpYTnZiSFpsWkNCdmJtTmxJSGRsSUhKbFkyOXVZMmxzWlNCa2FXTjBhVzl1WVhKNUlHUmxabWx1YVhScGIyNXpYRzRnSUNBZ0lDQWdJR0ZqZEdsdmJpNXdZWEpoYldWMFpYSnpQeTV1WVcxbElEOC9JR0ZqZEdsdmJpNWhZM1JwYjI0c1hHNGdJQ0FnSUNBZ0lHeHZZMkZzWlN4Y2JpQWdJQ0FnSUNBZ2FXTnZibFpoY21saGJuUXNYRzRnSUNBZ0lDQXBMRnh1SUNBZ0lDa3NYRzRnSUNrN1hHNWNiaUFnY21WMGRYSnVJR05oZEdWbmIzSnBaWE03WEc1OVhHNWNibWx1ZEdWeVptRmpaU0JCWkc5aVpVTnZiWEJoZEVGamRHbHZiaUJsZUhSbGJtUnpJRUZqZEdsdmJpQjdYRzRnSUdsa09pQnpkSEpwYm1jN1hHNGdJSEJoY21GdFpYUmxjbk02SUh0Y2JpQWdJQ0J1WVcxbE9pQnVaWFpsY2p0Y2JpQWdJQ0FuWTI5dExtRmtiMkpsTG1samIyNG5PaUJ6ZEhKcGJtYzdYRzRnSUNBZ1pHVnpZM0pwY0hScGIyNDZJSE4wY21sdVp6dGNiaUFnZlR0Y2JuMWNibHh1ZEhsd1pTQlBkbVZ5Y21sa1pVeHZZMkZzYVhwaGRHbHZiazFoY0NBOUlGSmxZMjl5WkR4emRISnBibWNzSUdGdWVUNDdYRzUwZVhCbElFOTJaWEp5YVdSbElEMGdVbVZqYjNKa1BITjBjbWx1Wnl3Z1QzWmxjbkpwWkdWTWIyTmhiR2w2WVhScGIyNU5ZWEErTzF4dVhHNXBiblJsY21aaFkyVWdUM1psY25KcFpHVkJZM1JwYjI1TllYQWdlMXh1SUNCaFkzUnBiMjV6T2lCUGRtVnljbWxrWlV4dlkyRnNhWHBoZEdsdmJrMWhjRnRkTzF4dWZWeHVYRzR2S2lwY2JpQXFJRWRsZEhNZ1lTQnNhWE4wSUc5bUlHRmpkR2x2YmlCallYUmxaMjl5YVdWekxDQmtaWEpwZG1Wa0lHWnliMjBnZEdobElIQnliM1pwWkdWa0lHMWhibWxtWlhOMEozTWdZR015Y0dFdVlXTjBhVzl1WUNCaGMzTmxjblJwYjI0dVhHNGdLaUJVYUdseklIZHBiR3dnWVd4emJ5Qm9ZVzVrYkdVZ2RISmhibk5zWVhScGIyNXpJR0o1SUhCeWIzWnBaR2x1WnlCaElHeHZZMkZzWlM0Z1ZHaHBjeUIzYjNKcmN5Qm1iM0lnYzNSaGJtUmhjbVFnUXpKUVFTQmhZM1JwYjI0Z1lYTnpaWEowYVc5dVhHNGdLaUJrWVhSaElHOXViSGt1WEc0Z0tseHVJQ29nUUhCaGNtRnRJR0ZqZEdsdmJuTkJjM05sY25ScGIyNGdMU0JCWTNScGIyNGdZWE56WlhKMGFXOXVJR1JoZEdGY2JpQXFJRUJ3WVhKaGJTQnNiMk5oYkdVZ0xTQkNRMUF0TkRjZ2JHOWpZV3hsSUdOdlpHVWdLR1V1Wnk0Z1lHVnVMVlZUWUN3Z1lHWnlMVVpTWUNrZ2RHOGdjbVZ4ZFdWemRDQnNiMk5oYkdsNlpXUWdjM1J5YVc1bmN5d2dhV1lnWVhaaGFXeGhZbXhsWEc0Z0tpQkFjbVYwZFhKdWN5Qk1hWE4wSUc5bUlIUnlZVzV6YkdGMFpXUWdZV04wYVc5dUlHTmhkR1ZuYjNKcFpYTmNiaUFxTDF4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdkbGRFTXljR0ZEWVhSbFoyOXlhWHBsWkVGamRHbHZibk1vWEc0Z0lHRmpkR2x2Ym5OQmMzTmxjblJwYjI0NklFTXljR0ZCWTNScGIyNXpRWE56WlhKMGFXOXVMRnh1SUNCc2IyTmhiR1U2SUhOMGNtbHVaeUE5SUVSRlJrRlZURlJmVEU5RFFVeEZMRnh1S1RvZ1ZISmhibk5zWVhSbFpFUnBZM1JwYjI1aGNubERZWFJsWjI5eWVWdGRJSHRjYmlBZ1kyOXVjM1FnWVdOMGFXOXVjeUE5SUdGamRHbHZibk5CYzNObGNuUnBiMjR1WkdGMFlTNWhZM1JwYjI1eklHRnpJRUZrYjJKbFEyOXRjR0YwUVdOMGFXOXVXMTA3WEc0Z0lHTnZibk4wSUhSeVlXNXpiR0YwYVc5dWN5QTlJR2RsZEZSeVlXNXpiR0YwYVc5dWMwWnZja3h2WTJGc1pTaHNiMk5oYkdVcE8xeHVJQ0JqYjI1emRDQnZkbVZ5Y21sa1pYTWdQU0FvWVdOMGFXOXVjMEZ6YzJWeWRHbHZiaTVrWVhSaExtMWxkR0ZrWVhSaFB5NXNiMk5oYkdsNllYUnBiMjV6SUQ4L1hHNGdJQ0FnVzEwcElHRnpJRTkyWlhKeWFXUmxXMTA3WEc1Y2JpQWdZMjl1YzNRZ2IzWmxjbkpwWkdWUFltbzZJRTkyWlhKeWFXUmxRV04wYVc5dVRXRndJRDBnZXlCaFkzUnBiMjV6T2lCYlhTQjlPMXh1SUNBdkx5QlVhR1VnYzNCbFl5Qm9ZWE1nWVc0Z1lYSnlZWGtnYjJZZ2IySnFaV04wY3l3Z1lXNWtJR1ZoWTJnZ2IySnFaV04wSUdOaGJpQm9ZWFpsSUcxMWJIUnBjR3hsSUdWdWRISnBaWE5jYmlBZ0x5OGdiMllnY0dGMGFDQnJaWGx6SUhSdklHOTJaWEp5YVdSbGN5d2dkMmhwWTJnZ2FYTWdkMmg1SUhkbElHaGhkbVVnZEc4Z2FHRjJaU0JoSUc1bGMzUmxaQ0JsWVdOb0xseHVJQ0JsWVdOb0tHOTJaWEp5YVdSbGN5d2dLRzkyWlhKeWFXUmxLU0E5UGlCN1hHNGdJQ0FnWldGamFDaHZkbVZ5Y21sa1pTd2dLSFJ5WVc1emJHRjBhVzl1VFdGd0xDQndZWFJvS1NBOVBpQjdYRzRnSUNBZ0lDQmpiMjV6ZENCMllXd2dQU0IwY21GdWMyeGhkR2x2YmsxaGNGdHNiMk5oYkdWZE8xeHVJQ0FnSUNBZ2FXWWdLSFpoYkNrZ2UxeHVJQ0FnSUNBZ0lDQnpaWFFvYjNabGNuSnBaR1ZQWW1vc0lIQmhkR2dzSUhaaGJDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzRnSUgwcE8xeHVYRzRnSUdOdmJuTjBJSFJ5WVc1emJHRjBaV1JCWTNScGIyNXpJRDBnWVdOMGFXOXVjeTV0WVhBb0tHRmpkR2x2Yml3Z2FXUjRLU0E5UGlCN1hHNGdJQ0FnWTI5dWMzUWdZV04wYVc5dVQzWmxjbkpwWkdWeklEMGdiM1psY25KcFpHVlBZbW91WVdOMGFXOXVjMXRwWkhoZElEOC9JSHQ5TzF4dUlDQWdJR052Ym5OMElHRmpkR2x2YmxSeVlXNXpiR0YwYVc5dWN5QTlJSFJ5WVc1emJHRjBhVzl1YzF0aFkzUnBiMjR1WVdOMGFXOXVYVHRjYmlBZ0lDQmpiMjV6ZENCcFkyOXVTV1E2SUhOMGNtbHVaeUE5SUdGamRHbHZiaTVoWTNScGIyNDdYRzRnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUM4dklFbHVZMngxWkdVZ2IzSnBaMmx1WVd3Z1NVUmNiaUFnSUNBZ0lHbGtPaUJoWTNScGIyNHVZV04wYVc5dUxGeHVJQ0FnSUNBZ0x5OGdSMlYwSUdsamIyNGdabkp2YlNCd1lYSmhiV1YwWlhKeklHbG1JSFJvWlhrZ1pYaHBjM1JjYmlBZ0lDQWdJR2xqYjI0NlhHNGdJQ0FnSUNBZ0lHRmpkR2x2Ymk1d1lYSmhiV1YwWlhKelB5NWJKMk52YlM1aFpHOWlaUzVwWTI5dUoxMGdQejljYmlBZ0lDQWdJQ0FnYVdOdmJuTmJhV052Ymtsa0lHRnpJR3RsZVc5bUlIUjVjR1Z2WmlCcFkyOXVjMTBzWEc0Z0lDQWdJQ0F2THlCVmMyVWdiM1psY25KcFpHVWdhV1lnWVhaaGFXeGhZbXhsTENCcFppQnViM1FzSUhSb1pXNGdabUZzYkNCaVlXTnJJSFJ2SUhSeVlXNXpiR0YwYVc5dVhHNGdJQ0FnSUNCc1lXSmxiRG9nWVdOMGFXOXVUM1psY25KcFpHVnpMbUZqZEdsdmJpQS9QeUJoWTNScGIyNVVjbUZ1YzJ4aGRHbHZibk11YkdGaVpXd3NYRzRnSUNBZ0lDQXZMeUJWYzJVZ2IzWmxjbkpwWkdVZ2FXWWdZWFpoYVd4aFlteGxMQ0JwWmlCdWIzUXNJSFJvWlc0Z1ptRnNiQ0JpWVdOcklIUnZJSFJ5WVc1emJHRjBhVzl1WEc0Z0lDQWdJQ0JrWlhOamNtbHdkR2x2YmpwY2JpQWdJQ0FnSUNBZ1lXTjBhVzl1VDNabGNuSnBaR1Z6UHk1d1lYSmhiV1YwWlhKelB5NWtaWE5qY21sd2RHbHZiaUEvUDF4dUlDQWdJQ0FnSUNCaFkzUnBiMjVVY21GdWMyeGhkR2x2Ym5NdVpHVnpZM0pwY0hScGIyNHNYRzRnSUNBZ2ZTQmhjeUJVY21GdWMyeGhkR1ZrUkdsamRHbHZibUZ5ZVVOaGRHVm5iM0o1TzF4dUlDQjlLVHRjYmx4dUlDQnlaWFIxY200Z2NISnZZMlZ6YzBOaGRHVm5iM0pwWlhNb2RISmhibk5zWVhSbFpFRmpkR2x2Ym5NcE8xeHVmVnh1WEc0dktpcGNiaUFxSUZCcGNHVnNhVzVsSUhSdklHTnZiblpsY25RZ1kyRjBaV2R2Y21sbGN5Qm1jbTl0SUhSb1pTQmthV04wYVc5dVlYSjVJR2x1ZEc4Z1lTQnpkSEoxWTNSMWNtVWdjM1ZwZEdGaWJHVWdabTl5SUhSb1pWeHVJQ29nWldScGRITWdZVzVrSUdGamRHbDJhWFI1SUhkbFlpQmpiMjF3YjI1bGJuUXVJRlJvYVhNZ1lXeHpieUJ0WVd0bGN5QnpkWEpsSUhSb1pTQmpZWFJsWjI5eWFXVnpJR0Z5WlNCMWJtbHhkV1VnWVc1a0lITnZjblJsWkM1Y2JpQXFMMXh1WTI5dWMzUWdjSEp2WTJWemMwTmhkR1ZuYjNKcFpYTWdQU0JtYkc5M0tGeHVJQ0JqYjIxd1lXTjBMRnh1SUNCMWJtbHhRbms4UldScGRFTmhkR1ZuYjNKNVBpZ29ZMkYwWldkdmNua3BJRDArSUdOaGRHVm5iM0o1TG1sa0tTeGNiaUFnYzI5eWRFSjVLQ2hqWVhSbFoyOXllU2tnUFQ0Z1kyRjBaV2R2Y25rdWJHRmlaV3dwTEZ4dUtUdGNibHh1THlvcVhHNGdLaUJWYzJWeklIUm9aU0JrYVdOMGFXOXVZWEo1SUhSdklIUnlZVzV6YkdGMFpTQmhiaUJoWTNScGIyNGdibUZ0WlNCcGJuUnZJR05oZEdWbmIzSjVJR2x1Wm05eWJXRjBhVzl1WEc0Z0tpOWNibVoxYm1OMGFXOXVJSFJ5WVc1emJHRjBaVUZqZEdsdmJrNWhiV1VvWEc0Z0lHUnBZM1JwYjI1aGNuazZJRUZrYjJKbFJHbGpkR2x2Ym1GeWVTeGNiaUFnWVdOMGFXOXVTV1E2SUhOMGNtbHVaeXhjYmlBZ2JHOWpZV3hsT2lCemRISnBibWNzWEc0Z0lHbGpiMjVXWVhKcFlXNTBPaUJKWTI5dVZtRnlhV0Z1ZEN4Y2JpazZJRlJ5WVc1emJHRjBaV1JFYVdOMGFXOXVZWEo1UTJGMFpXZHZjbmtnZkNCdWRXeHNJSHRjYmlBZ1kyOXVjM1FnWTJGMFpXZHZjbmxKWkNBOUlHUnBZM1JwYjI1aGNua3VZV04wYVc5dWMxdGhZM1JwYjI1SlpGMC9MbU5oZEdWbmIzSjVJRDgvSUZWT1EwRlVSVWRQVWtsYVJVUmZTVVE3WEc0Z0lHbG1JQ2hqWVhSbFoyOXllVWxrSUQwOVBTQlZUa05CVkVWSFQxSkpXa1ZFWDBsRUtTQjdYRzRnSUNBZ1pHSm5LQ2REYjNWc1pDQnViM1FnWm1sdVpDQmpZWFJsWjI5eWVTQm1iM0lnWVdOMGFXOXVTV1FuTENCaFkzUnBiMjVKWkNrN1hHNGdJSDFjYmlBZ1kyOXVjM1FnWTJGMFpXZHZjbmtnUFNCa2FXTjBhVzl1WVhKNUxtTmhkR1ZuYjNKcFpYTmJZMkYwWldkdmNubEpaRjA3WEc0Z0lHbG1JQ2hqWVhSbFoyOXllU2tnZTF4dUlDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQnBaRG9nWTJGMFpXZHZjbmxKWkN4Y2JpQWdJQ0FnSUdsamIyNDZJR05oZEdWbmIzSjVMbWxqYjI0L0xuSmxjR3hoWTJVb0ozdDJZWEpwWVc1MGZTY3NJR2xqYjI1V1lYSnBZVzUwS1NBL1B5QnVkV3hzTEZ4dUlDQWdJQ0FnYkdGaVpXdzZJR05oZEdWbmIzSjVMbXhoWW1Wc2MxdHNiMk5oYkdWZExGeHVJQ0FnSUNBZ1pHVnpZM0pwY0hScGIyNDZJR05oZEdWbmIzSjVMbVJsYzJOeWFYQjBhVzl1YzF0c2IyTmhiR1ZkTEZ4dUlDQWdJSDA3WEc0Z0lIMWNiaUFnY21WMGRYSnVJRzUxYkd3N1hHNTlYRzRpTENJdktpcGNiaUFxSUVOdmNIbHlhV2RvZENBeU1ESXpJRUZrYjJKbFhHNGdLaUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGx4dUlDcGNiaUFxSUU1UFZFbERSVG9nUVdSdlltVWdjR1Z5YldsMGN5QjViM1VnZEc4Z2RYTmxMQ0J0YjJScFpua3NJR0Z1WkNCa2FYTjBjbWxpZFhSbElIUm9hWE1nWm1sc1pTQnBibHh1SUNvZ1lXTmpiM0prWVc1alpTQjNhWFJvSUhSb1pTQjBaWEp0Y3lCdlppQjBhR1VnUVdSdlltVWdiR2xqWlc1elpTQmhaM0psWlcxbGJuUWdZV05qYjIxd1lXNTVhVzVuWEc0Z0tpQnBkQzVjYmlBcUwxeHVYRzVwYlhCdmNuUWdkSGx3WlNCN0lFMWhibWxtWlhOMElIMGdabkp2YlNBbkxpNHZiV0Z1YVdabGMzUW5PMXh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYzJWc1pXTjBSbTl5YldGMGRHVmtSMlZ1WlhKaGRHOXlLRzFoYm1sbVpYTjBPaUJOWVc1cFptVnpkQ2tnZTF4dUlDQmpiMjV6ZENCMllXeDFaU0E5SUcxaGJtbG1aWE4wTG1Oc1lXbHRSMlZ1WlhKaGRHOXlPMXh1SUNBdkx5QlhaU0JoY21VZ2MzUnlhWEJ3YVc1bklIQmhjbVZ1ZEdobGMybHpJSE52SUhSb1lYUWdZVzU1SUhabGNuTnBiMjRnYldGMFkyaGxjeUJwYmlCMGFHVnlaU0JrYjI0bmRDQnBibVpzZFdWdVkyVWdkR2hsSUhSbGMzUmNiaUFnWTI5dWMzUWdkMmwwYUc5MWRGQmhjbVZ1Y3lBOUlIWmhiSFZsTG5KbGNHeGhZMlVvTDF4Y0tGdGVLVjBxWEZ3cEwyY3NJQ2NuS1R0Y2JpQWdhV1lnS0M5Y1hITXJYRnhrSzF4Y0xseGNaQ2hjWEM1Y1hHUXBLbHhjY3lzdkxuUmxjM1FvZDJsMGFHOTFkRkJoY21WdWN5a3BJSHRjYmlBZ0lDQXZMeUJQYkdRdGMzUjViR1VnS0ZoTlVDQkJaMlZ1ZENrZ2MzUnlhVzVuSUNodFlYUmphQ0J6Y0dGalpTQXJJSFpsY25OcGIyNHBYRzRnSUNBZ2NtVjBkWEp1SUhaaGJIVmxMbk53YkdsMEtDY29KeWxiTUYwL0xuUnlhVzBvS1R0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNBdkx5QlZjMlZ5TFVGblpXNTBJSE4wY21sdVoxeHVJQ0FnSUM4dklGTndiR2wwSUdKNUlITndZV05sSUNoMGFHVWdVa1pESUhWelpYTWdkR2hsSUhOd1lXTmxJR0Z6SUdFZ2MyVndZWEpoZEc5eUtWeHVJQ0FnSUdOdmJuTjBJR1pwY25OMFNYUmxiU0E5SUhkcGRHaHZkWFJRWVhKbGJuTXVjM0JzYVhRb0wxeGNjeXN2S1Q4dVd6QmRJRDgvSUNjbk8xeHVJQ0FnSUM4dklGQmhjbk5sSUhCeWIyUjFZM1FnYm1GdFpTQm1jbTl0SUhabGNuTnBiMjVjYmlBZ0lDQXZMeUJCWkc5aVpWOVFhRzkwYjNOb2IzQXZNak11TXk0eElDMCtJRnRCWkc5aVpWOVFhRzkwYjNOb2IzQXNJREl6TGpNdU1WMWNiaUFnSUNCamIyNXpkQ0JiY0hKdlpIVmpkQ3dnZG1WeWMybHZibDBnUFNCbWFYSnpkRWwwWlcwdWMzQnNhWFFvSnk4bktUdGNiaUFnSUNBdkx5QlNaWEJzWVdObElIVnVaR1Z5YzJOdmNtVnpJSGRwZEdnZ2MzQmhZMlZ6WEc0Z0lDQWdMeThnUVdSdlltVmZVR2h2ZEc5emFHOXdJQzArSUVGa2IySmxJRkJvYjNSdmMyaHZjRnh1SUNBZ0lHTnZibk4wSUdadmNtMWhkSFJsWkZCeWIyUjFZM1FnUFNCd2NtOWtkV04wTG5KbGNHeGhZMlVvTDE4dlp5d2dKeUFuS1R0Y2JpQWdJQ0JwWmlBb2RtVnljMmx2YmlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdBa2UyWnZjbTFoZEhSbFpGQnliMlIxWTNSOUlDUjdkbVZ5YzJsdmJuMWdPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnWm05eWJXRjBkR1ZrVUhKdlpIVmpkRHRjYmlBZ2ZWeHVmVnh1SWl3aUx5b3FYRzRnS2lCRGIzQjVjbWxuYUhRZ01qQXlNeUJCWkc5aVpWeHVJQ29nUVd4c0lGSnBaMmgwY3lCU1pYTmxjblpsWkM1Y2JpQXFYRzRnS2lCT1QxUkpRMFU2SUVGa2IySmxJSEJsY20xcGRITWdlVzkxSUhSdklIVnpaU3dnYlc5a2FXWjVMQ0JoYm1RZ1pHbHpkSEpwWW5WMFpTQjBhR2x6SUdacGJHVWdhVzVjYmlBcUlHRmpZMjl5WkdGdVkyVWdkMmwwYUNCMGFHVWdkR1Z5YlhNZ2IyWWdkR2hsSUVGa2IySmxJR3hwWTJWdWMyVWdZV2R5WldWdFpXNTBJR0ZqWTI5dGNHRnVlV2x1WjF4dUlDb2dhWFF1WEc0Z0tpOWNibHh1YVcxd2IzSjBJSFI1Y0dVZ2UxeHVJQ0JCWTNScGIyNVdNU3hjYmlBZ1FYTnpaWEowYVc5dUxGeHVJQ0JETW5CaFFXTjBhVzl1YzBGemMyVnlkR2x2Yml4Y2JpQWdUV0Z1YVdabGMzUkJjM05sY25ScGIyNHNYRzU5SUdaeWIyMGdKMEJqTW5CaEwyRmtiMkpsTFhSdmIyeHJhWFFuTzF4dWFXMXdiM0owSUhSNWNHVWdleUJOWVc1cFptVnpkQ0I5SUdaeWIyMGdKeTR1TDIxaGJtbG1aWE4wSnp0Y2JseHVZMjl1YzNRZ1oyVnVRV2xFYVdkcGRHRnNVMjkxY21ObFZIbHdaWE1nUFNCYlhHNGdJQ2RvZEhSd09pOHZZM1l1YVhCMFl5NXZjbWN2Ym1WM2MyTnZaR1Z6TDJScFoybDBZV3h6YjNWeVkyVjBlWEJsTDNSeVlXbHVaV1JCYkdkdmNtbDBhRzFwWTAxbFpHbGhKeXhjYmlBZ0oyaDBkSEJ6T2k4dlkzWXVhWEIwWXk1dmNtY3ZibVYzYzJOdlpHVnpMMlJwWjJsMFlXeHpiM1Z5WTJWMGVYQmxMM1J5WVdsdVpXUkJiR2R2Y21sMGFHMXBZMDFsWkdsaEp5eGNiaUFnSjJoMGRIQTZMeTlqZGk1cGNIUmpMbTl5Wnk5dVpYZHpZMjlrWlhNdlpHbG5hWFJoYkhOdmRYSmpaWFI1Y0dVdlkyOXRjRzl6YVhSbFYybDBhRlJ5WVdsdVpXUkJiR2R2Y21sMGFHMXBZMDFsWkdsaEp5eGNiaUFnSjJoMGRIQnpPaTh2WTNZdWFYQjBZeTV2Y21jdmJtVjNjMk52WkdWekwyUnBaMmwwWVd4emIzVnlZMlYwZVhCbEwyTnZiWEJ2YzJsMFpWZHBkR2hVY21GcGJtVmtRV3huYjNKcGRHaHRhV05OWldScFlTY3NYRzVkTzF4dVhHNW1kVzVqZEdsdmJpQm1iM0p0WVhSSFpXNUJhVVJwWjJsMFlXeFRiM1Z5WTJWVWVYQmxjeWgwZVhCbE9pQnpkSEpwYm1jcElIdGNiaUFnY21WMGRYSnVJSFI1Y0dVdWMzVmljM1J5YVc1bktIUjVjR1V1YkdGemRFbHVaR1Y0VDJZb0p5OG5LU0FySURFcE8xeHVmVnh1WEc1bGVIQnZjblFnZEhsd1pTQk1aV2RoWTNsQmMzTmxjblJwYjI0Z1BTQkJjM05sY25ScGIyNDhYRzRnSUNkamIyMHVZV1J2WW1VdVoyVnVaWEpoZEdsMlpTMWhhU2NzWEc0Z0lIdGNiaUFnSUNCa1pYTmpjbWx3ZEdsdmJqb2djM1J5YVc1bk8xeHVJQ0FnSUhabGNuTnBiMjQ2SUhOMGNtbHVaenRjYmlBZ0lDQndjbTl0Y0hRL09pQnpkSEpwYm1jN1hHNGdJSDFjYmo0N1hHNWNibVY0Y0c5eWRDQjBlWEJsSUVkbGJrRnBRWE56WlhKMGFXOXVJRDBnVFdGdWFXWmxjM1JCYzNObGNuUnBiMjRnZkNCTVpXZGhZM2xCYzNObGNuUnBiMjQ3WEc1Y2JtVjRjRzl5ZENCcGJuUmxjbVpoWTJVZ1IyVnVaWEpoZEdsMlpVbHVabThnZTF4dUlDQmhjM05sY25ScGIyNDZJRWRsYmtGcFFYTnpaWEowYVc5dU8xeHVJQ0JoWTNScGIyNC9PaUJCWTNScGIyNVdNVHRjYmlBZ2RIbHdaVHBjYmlBZ0lDQjhJQ2RzWldkaFkza25YRzRnSUNBZ2ZDQW5kSEpoYVc1bFpFRnNaMjl5YVhSb2JXbGpUV1ZrYVdFblhHNGdJQ0FnZkNBblkyOXRjRzl6YVhSbFYybDBhRlJ5WVdsdVpXUkJiR2R2Y21sMGFHMXBZMDFsWkdsaEp6dGNiaUFnYzI5bWRIZGhjbVZCWjJWdWREb2djM1J5YVc1bk8xeHVmVnh1WEc0dktpcGNiaUFxSUVkbGRITWdZVzU1SUdkbGJtVnlZWFJwZG1VZ1FVa2dhVzVtYjNKdFlYUnBiMjRnWm5KdmJTQjBhR1VnYldGdWFXWmxjM1F1WEc0Z0tseHVJQ29nUUhCaGNtRnRJRzFoYm1sbVpYTjBJQzBnVFdGdWFXWmxjM1FnZEc4Z1pHVnlhWFpsSUdSaGRHRWdabkp2YlZ4dUlDb3ZYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdjMlZzWldOMFIyVnVaWEpoZEdsMlpVbHVabThvWEc0Z0lHMWhibWxtWlhOME9pQk5ZVzVwWm1WemRDeGNiaWs2SUVkbGJtVnlZWFJwZG1WSmJtWnZXMTBnZkNCdWRXeHNJSHRjYmlBZ1kyOXVjM1FnWkdGMFlTQTlJRzFoYm1sbVpYTjBMbUZ6YzJWeWRHbHZibk11WkdGMFlTNXlaV1IxWTJVOFIyVnVaWEpoZEdsMlpVbHVabTliWFQ0b1hHNGdJQ0FnS0dGall5d2dZWE56WlhKMGFXOXVPaUJCYzNObGNuUnBiMjQ4WVc1NUxDQmhibmsrS1NBOVBpQjdYRzRnSUNBZ0lDQXZMeUJEYUdWamF5Qm1iM0lnYkdWbllXTjVJR0Z6YzJWeWRHbHZibHh1SUNBZ0lDQWdhV1lnS0dGemMyVnlkR2x2Ymk1c1lXSmxiQ0E5UFQwZ0oyTnZiUzVoWkc5aVpTNW5aVzVsY21GMGFYWmxMV0ZwSnlrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCN0lHUmxjMk55YVhCMGFXOXVMQ0IyWlhKemFXOXVJSDBnUFNBb1lYTnpaWEowYVc5dUlHRnpJRXhsWjJGamVVRnpjMlZ5ZEdsdmJpa3VaR0YwWVR0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYzI5bWRIZGhjbVZCWjJWdWRDQTlJRnRrWlhOamNtbHdkR2x2Yml3Z2RtVnljMmx2YmwxY2JpQWdJQ0FnSUNBZ0lDQXViV0Z3S0NoNEtTQTlQaUI0UHk1MGNtbHRLQ2tnUHo4Z0p5Y3BYRzRnSUNBZ0lDQWdJQ0FnTG1wdmFXNG9KeUFuS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ0Y2JpQWdJQ0FnSUNBZ0lDQXVMaTVoWTJNc1hHNGdJQ0FnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1lYTnpaWEowYVc5dUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dKMnhsWjJGamVTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNCemIyWjBkMkZ5WlVGblpXNTBPaUJ6YjJaMGQyRnlaVUZuWlc1MExGeHVJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUYwN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDOHZJRU5vWldOcklHWnZjaUJoWTNScGIyNXpJSFl4SUdGemMyVnlkR2x2Ymx4dUlDQWdJQ0FnYVdZZ0tHRnpjMlZ5ZEdsdmJpNXNZV0psYkNBOVBUMGdKMk15Y0dFdVlXTjBhVzl1Y3ljcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2V5QmhZM1JwYjI1eklIMGdQU0FvWVhOelpYSjBhVzl1SUdGeklFTXljR0ZCWTNScGIyNXpRWE56WlhKMGFXOXVLUzVrWVhSaE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCblpXNUJhVUZqZEdsdmJuTTZJRWRsYm1WeVlYUnBkbVZKYm1adlcxMGdQU0JoWTNScGIyNXpMbkpsWkhWalpUeEhaVzVsY21GMGFYWmxTVzVtYjF0ZFBpaGNiaUFnSUNBZ0lDQWdJQ0FvWVdOMGFXOXVRV05qTENCaFkzUnBiMjQ2SUVGamRHbHZibFl4S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0I3SUdScFoybDBZV3hUYjNWeVkyVlVlWEJsSUgwZ1BTQmhZM1JwYjI0N1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdScFoybDBZV3hUYjNWeVkyVlVlWEJsSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdkbGJrRnBSR2xuYVhSaGJGTnZkWEpqWlZSNWNHVnpMbWx1WTJ4MVpHVnpLR1JwWjJsMFlXeFRiM1Z5WTJWVWVYQmxLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHRmpkR2x2YmtGall5NXdkWE5vS0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGMzTmxjblJwYjI0c1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXTjBhVzl1T2lCaFkzUnBiMjRzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dabTl5YldGMFIyVnVRV2xFYVdkcGRHRnNVMjkxY21ObFZIbHdaWE1vWkdsbmFYUmhiRk52ZFhKalpWUjVjR1VwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOdlpuUjNZWEpsUVdkbGJuUTZJR0ZqZEdsdmJpNXpiMlowZDJGeVpVRm5aVzUwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdGeklFZGxibVZ5WVhScGRtVkpibVp2S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHRmpkR2x2YmtGall6dGNiaUFnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lGdGRMRnh1SUNBZ0lDQWdJQ0FwTzF4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCYkxpNHVZV05qTENBdUxpNW5aVzVCYVVGamRHbHZibk5kTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnWVdOak8xeHVJQ0FnSUgwc1hHNGdJQ0FnVzEwc1hHNGdJQ2s3WEc1Y2JpQWdjbVYwZFhKdUlHUmhkR0V1YkdWdVozUm9JRDhnWkdGMFlTQTZJRzUxYkd3N1hHNTlYRzRpTENJdktpcGNiaUFxSUVOdmNIbHlhV2RvZENBeU1ESXlJRUZrYjJKbFhHNGdLaUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGx4dUlDcGNiaUFxSUU1UFZFbERSVG9nUVdSdlltVWdjR1Z5YldsMGN5QjViM1VnZEc4Z2RYTmxMQ0J0YjJScFpua3NJR0Z1WkNCa2FYTjBjbWxpZFhSbElIUm9hWE1nWm1sc1pTQnBibHh1SUNvZ1lXTmpiM0prWVc1alpTQjNhWFJvSUhSb1pTQjBaWEp0Y3lCdlppQjBhR1VnUVdSdlltVWdiR2xqWlc1elpTQmhaM0psWlcxbGJuUWdZV05qYjIxd1lXNTVhVzVuWEc0Z0tpQnBkQzVjYmlBcUwxeHVYRzVwYlhCdmNuUWdleUJCZFhSb2IzSWdmU0JtY205dElDZEFZekp3WVM5aFpHOWlaUzEwYjI5c2EybDBKenRjYm1sdGNHOXlkQ0I3SUUxaGJtbG1aWE4wSUgwZ1puSnZiU0FuTGk0dmJXRnVhV1psYzNRbk8xeHVYRzR2S2lwY2JpQXFJRWRsZEhNZ2RHaGxJSEJ5YjJSMVkyVnlJRzltSUhSb2FYTWdiV0Z1YVdabGMzUXNJR1JsY21sMlpXUWdabkp2YlNCcGRITWdZSE4wWkhNdWMyTm9aVzFoTFc5eVp5NURjbVZoZEdsMlpWZHZjbXRnSUdGemMyVnlkR2x2Yml3Z2FXWWdZWFpoYVd4aFlteGxYRzRnS2x4dUlDb2dRSEJoY21GdElHMWhibWxtWlhOMElDMGdUV0Z1YVdabGMzUWdkRzhnWkdWeWFYWmxJR1JoZEdFZ1puSnZiVnh1SUNvdlhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2MyVnNaV04wVUhKdlpIVmpaWElvYldGdWFXWmxjM1E2SUUxaGJtbG1aWE4wS1RvZ1FYVjBhRzl5SUh3Z2JuVnNiQ0I3WEc0Z0lHTnZibk4wSUZ0amQwRnpjMlZ5ZEdsdmJsMGdQU0J0WVc1cFptVnpkQzVoYzNObGNuUnBiMjV6TG1kbGRDZ25jM1JrY3k1elkyaGxiV0V0YjNKbkxrTnlaV0YwYVhabFYyOXlheWNwTzF4dVhHNGdJR2xtSUNnaFkzZEJjM05sY25ScGIyNHBJSHRjYmlBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ2ZWeHVYRzRnSUdOdmJuTjBJSEJ5YjJSMVkyVnlJRDBnWTNkQmMzTmxjblJwYjI0dVpHRjBZUzVoZFhSb2IzSS9MbVpwYm1Rb1hHNGdJQ0FnS0hncElEMCtJQ0Y0TG1oaGMwOTNibEJ5YjNCbGNuUjVLQ2RBYVdRbktTeGNiaUFnS1R0Y2JseHVJQ0J5WlhSMWNtNGdjSEp2WkhWalpYSWdQejhnYm5Wc2JEdGNibjFjYmlJc0lpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElESXdNaklnUVdSdlltVmNiaUFxSUVGc2JDQlNhV2RvZEhNZ1VtVnpaWEoyWldRdVhHNGdLbHh1SUNvZ1RrOVVTVU5GT2lCQlpHOWlaU0J3WlhKdGFYUnpJSGx2ZFNCMGJ5QjFjMlVzSUcxdlpHbG1lU3dnWVc1a0lHUnBjM1J5YVdKMWRHVWdkR2hwY3lCbWFXeGxJR2x1WEc0Z0tpQmhZMk52Y21SaGJtTmxJSGRwZEdnZ2RHaGxJSFJsY20xeklHOW1JSFJvWlNCQlpHOWlaU0JzYVdObGJuTmxJR0ZuY21WbGJXVnVkQ0JoWTJOdmJYQmhibmxwYm1kY2JpQXFJR2wwTGx4dUlDb3ZYRzVjYm1sdGNHOXlkQ0I3SUVGMWRHaHZjaUI5SUdaeWIyMGdKMEJqTW5CaEwyRmtiMkpsTFhSdmIyeHJhWFFuTzF4dWFXMXdiM0owSUhzZ1RXRnVhV1psYzNRZ2ZTQm1jbTl0SUNjdUxpOXRZVzVwWm1WemRDYzdYRzVjYmk4cUtseHVJQ29nUjJWMGN5QmhibmtnYzI5amFXRnNJR0ZqWTI5MWJuUnpJR0Z6YzI5amFXRjBaV1FnZDJsMGFDQjBhR1VnY0hKdlpIVmpaWElnYjJZZ2RHaHBjeUJ0WVc1cFptVnpkQ3dnWkdWeWFYWmxaQ0JtY205dElHbDBjMXh1SUNvZ1lITjBaSE11YzJOb1pXMWhMVzl5Wnk1RGNtVmhkR2wyWlZkdmNtdGdJR0Z6YzJWeWRHbHZiaXdnYVdZZ1lYWmhhV3hoWW14bFhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUcxaGJtbG1aWE4wSUMwZ1RXRnVhV1psYzNRZ2RHOGdaR1Z5YVhabElHUmhkR0VnWm5KdmJWeHVJQ292WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYzJWc1pXTjBVMjlqYVdGc1FXTmpiM1Z1ZEhNb2JXRnVhV1psYzNRNklFMWhibWxtWlhOMEtUb2dRWFYwYUc5eVcxMGdmQ0J1ZFd4c0lIdGNiaUFnWTI5dWMzUWdXMk4zUVhOelpYSjBhVzl1WFNBOUlHMWhibWxtWlhOMExtRnpjMlZ5ZEdsdmJuTXVaMlYwS0NkemRHUnpMbk5qYUdWdFlTMXZjbWN1UTNKbFlYUnBkbVZYYjNKckp5azdYRzVjYmlBZ2FXWWdLQ0ZqZDBGemMyVnlkR2x2YmlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0I5WEc1Y2JpQWdZMjl1YzNRZ2MyOWphV0ZzUVdOamIzVnVkSE1nUFNCamQwRnpjMlZ5ZEdsdmJpNWtZWFJoTG1GMWRHaHZjajh1Wm1sc2RHVnlLQ2g0S1NBOVBseHVJQ0FnSUhndWFHRnpUM2R1VUhKdmNHVnlkSGtvSjBCcFpDY3BMRnh1SUNBcE8xeHVYRzRnSUhKbGRIVnliaUJ6YjJOcFlXeEJZMk52ZFc1MGN6dGNibjFjYmlJc0lpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElESXdNaklnUVdSdlltVmNiaUFxSUVGc2JDQlNhV2RvZEhNZ1VtVnpaWEoyWldRdVhHNGdLbHh1SUNvZ1RrOVVTVU5GT2lCQlpHOWlaU0J3WlhKdGFYUnpJSGx2ZFNCMGJ5QjFjMlVzSUcxdlpHbG1lU3dnWVc1a0lHUnBjM1J5YVdKMWRHVWdkR2hwY3lCbWFXeGxJR2x1WEc0Z0tpQmhZMk52Y21SaGJtTmxJSGRwZEdnZ2RHaGxJSFJsY20xeklHOW1JSFJvWlNCQlpHOWlaU0JzYVdObGJuTmxJR0ZuY21WbGJXVnVkQ0JoWTJOdmJYQmhibmxwYm1kY2JpQXFJR2wwTGx4dUlDb3ZYRzVjYm1sdGNHOXlkQ0I3SUZaaGJHbGtZWFJwYjI1VGRHRjBkWE1nZlNCbWNtOXRJQ2RBWXpKd1lTOWhaRzlpWlMxMGIyOXNhMmwwSnp0Y2JtbHRjRzl5ZENCN0lHaGhjMFZ5Y205eVUzUmhkSFZ6TENCb1lYTlBkR2R3VTNSaGRIVnpJSDBnWm5KdmJTQW5MaTlzYVdJdmRtRnNhV1JoZEdsdmJsTjBZWFIxY3ljN1hHNXBiWEJ2Y25RZ2V5Qk5ZVzVwWm1WemRGTjBiM0psSUgwZ1puSnZiU0FuTGk5dFlXNXBabVZ6ZEZOMGIzSmxKenRjYm1sdGNHOXlkQ0I3SUhObGJHVmpkRVZrYVhSelFXNWtRV04wYVhacGRIa2dmU0JtY205dElDY3VMM05sYkdWamRHOXljeTl6Wld4bFkzUkZaR2wwYzBGdVpFRmpkR2wyYVhSNUp6dGNibWx0Y0c5eWRDQjdJSE5sYkdWamRFWnZjbTFoZEhSbFpFZGxibVZ5WVhSdmNpQjlJR1p5YjIwZ0p5NHZjMlZzWldOMGIzSnpMM05sYkdWamRFWnZjbTFoZEhSbFpFZGxibVZ5WVhSdmNpYzdYRzVwYlhCdmNuUWdlMXh1SUNCSFpXNWxjbUYwYVhabFNXNW1ieXhjYmlBZ2MyVnNaV04wUjJWdVpYSmhkR2wyWlVsdVptOHNYRzU5SUdaeWIyMGdKeTR2YzJWc1pXTjBiM0p6TDNObGJHVmpkRWRsYm1WeVlYUnBkbVZKYm1adkp6dGNibWx0Y0c5eWRDQjdJSE5sYkdWamRGQnliMlIxWTJWeUlIMGdabkp2YlNBbkxpOXpaV3hsWTNSdmNuTXZjMlZzWldOMFVISnZaSFZqWlhJbk8xeHVhVzF3YjNKMElIc2djMlZzWldOMFUyOWphV0ZzUVdOamIzVnVkSE1nZlNCbWNtOXRJQ2N1TDNObGJHVmpkRzl5Y3k5elpXeGxZM1JUYjJOcFlXeEJZMk52ZFc1MGN5YzdYRzVjYm1SbFkyeGhjbVVnYlc5a2RXeGxJQ2N1TDJGemMyVnlkR2x2Ym5NbklIdGNiaUFnYVc1MFpYSm1ZV05sSUVWNGRHVnVaR1ZrUVhOelpYSjBhVzl1Y3lCN1hHNGdJQ0FnSjJGa2IySmxMbUpsZEdFbk9pQjdYRzRnSUNBZ0lDQjJaWEp6YVc5dU9pQnpkSEpwYm1jN1hHNGdJQ0FnZlR0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ2RIbHdaU0JGY25KdmNsTjBZWFIxY3lBOUlDZHZkR2R3SnlCOElDZGxjbkp2Y2ljZ2ZDQnVkV3hzTzF4dVhHNHZLaXBjYmlBcUlFMWhibWxtWlhOMElISmxjSEpsYzJWdWRHRjBhVzl1SUhOMWFYUmhZbXhsSUdadmNpQjFjMlVnZDJsMGFDQmpNbkJoTFhkakxseHVJQ292WEc1bGVIQnZjblFnYVc1MFpYSm1ZV05sSUV3eVRXRnVhV1psYzNSVGRHOXlaU0I3WEc0Z0lHbHVaM0psWkdsbGJuUnpPaUJNTWtsdVozSmxaR2xsYm5SYlhUdGNiaUFnWm05eWJXRjBPaUJ6ZEhKcGJtYzdYRzRnSUhScGRHeGxPaUJ6ZEhKcGJtYzdYRzRnSUhOcFoyNWhkSFZ5WlRvZ1RESlRhV2R1WVhSMWNtVWdmQ0J1ZFd4c08xeHVJQ0JqYkdGcGJVZGxibVZ5WVhSdmNqb2dUREpEYkdGcGJVZGxibVZ5WVhSdmNqdGNiaUFnY0hKdlpIVmpaWEk2SUV3eVVISnZaSFZqWlhJZ2ZDQnVkV3hzTzF4dUlDQnpiMk5wWVd4QlkyTnZkVzUwY3pvZ1RESlRiMk5wWVd4QlkyTnZkVzUwVzEwZ2ZDQnVkV3hzTzF4dUlDQjBhSFZ0WW01aGFXdzZJSE4wY21sdVp5QjhJRzUxYkd3N1hHNGdJR1ZrYVhSelFXNWtRV04wYVhacGRIazZJRXd5UldScGRITkJibVJCWTNScGRtbDBlVnRkSUh3Z2JuVnNiRHRjYmlBZ1oyVnVaWEpoZEdsMlpVbHVabTg2SUVkbGJtVnlZWFJwZG1WSmJtWnZXMTBnZkNCdWRXeHNPMXh1SUNCcGMwSmxkR0U2SUdKdmIyeGxZVzQ3WEc0Z0lHVnljbTl5T2lCRmNuSnZjbE4wWVhSMWN6dGNiaUFnZG1Gc2FXUmhkR2x2YmxOMFlYUjFjem9nVm1Gc2FXUmhkR2x2YmxOMFlYUjFjMXRkTzF4dWZWeHVYRzVsZUhCdmNuUWdhVzUwWlhKbVlXTmxJRXd5U1c1bmNtVmthV1Z1ZENCN1hHNGdJSFJwZEd4bE9pQnpkSEpwYm1jN1hHNGdJR1p2Y20xaGREb2djM1J5YVc1bk8xeHVJQ0IwYUhWdFltNWhhV3c2SUhOMGNtbHVaeUI4SUc1MWJHdzdYRzRnSUdoaGMwMWhibWxtWlhOME9pQmliMjlzWldGdU8xeHVJQ0JsY25KdmNqb2dSWEp5YjNKVGRHRjBkWE03WEc0Z0lIWmhiR2xrWVhScGIyNVRkR0YwZFhNNklGWmhiR2xrWVhScGIyNVRkR0YwZFhOYlhUdGNibjFjYmx4dVpYaHdiM0owSUdsdWRHVnlabUZqWlNCTU1sTnBaMjVoZEhWeVpTQjdYRzRnSUdsemMzVmxjam9nYzNSeWFXNW5JSHdnYm5Wc2JEdGNiaUFnYVhOdlJHRjBaVk4wY21sdVp6b2djM1J5YVc1bklId2diblZzYkR0Y2JuMWNibHh1Wlhod2IzSjBJR2x1ZEdWeVptRmpaU0JNTWtOc1lXbHRSMlZ1WlhKaGRHOXlJSHRjYmlBZ2RtRnNkV1U2SUhOMGNtbHVaenRjYmlBZ2NISnZaSFZqZERvZ2MzUnlhVzVuTzF4dWZWeHVYRzVsZUhCdmNuUWdhVzUwWlhKbVlXTmxJRXd5VUhKdlpIVmpaWElnZTF4dUlDQW5RSFI1Y0dVbk9pQnpkSEpwYm1jN1hHNGdJRzVoYldVNklITjBjbWx1Wnp0Y2JpQWdhV1JsYm5ScFptbGxjam9nYzNSeWFXNW5PMXh1ZlZ4dVhHNWxlSEJ2Y25RZ2FXNTBaWEptWVdObElFd3lVMjlqYVdGc1FXTmpiM1Z1ZENCN1hHNGdJQ2RBZEhsd1pTYzZJSE4wY21sdVp6dGNiaUFnSjBCcFpDYzZJSE4wY21sdVp5QjhJSFZ1WkdWbWFXNWxaRHRjYmlBZ2JtRnRaVG9nYzNSeWFXNW5PMXh1SUNCcFpHVnVkR2xtYVdWeU9pQnpkSEpwYm1jN1hHNTlYRzVjYm1WNGNHOXlkQ0JwYm5SbGNtWmhZMlVnVERKRlpHbDBjMEZ1WkVGamRHbDJhWFI1SUh0Y2JpQWdhV1E2SUhOMGNtbHVaenRjYmlBZ2FXTnZiam9nYzNSeWFXNW5JSHdnYm5Wc2JEdGNiaUFnYkdGaVpXdzZJSE4wY21sdVp6dGNiaUFnWkdWelkzSnBjSFJwYjI0NklITjBjbWx1Wnp0Y2JuMWNibHh1Wlhod2IzSjBJSFI1Y0dVZ1JHbHpjRzl6WVdKc1pVd3lUV0Z1YVdabGMzUlRkRzl5WlNBOUlIdGNiaUFnYldGdWFXWmxjM1JUZEc5eVpUb2dUREpOWVc1cFptVnpkRk4wYjNKbE8xeHVJQ0JrYVhOd2IzTmxPaUFvS1NBOVBpQjJiMmxrTzF4dWZUdGNibHh1THlvcVhHNGdLaUJEY21WaGRHVnpJR0VnYldGdWFXWmxjM1FnYzNSdmNtVWdjbVZ3Y21WelpXNTBZWFJwYjI0Z2MzVnBkR0ZpYkdVZ1ptOXlJSFZ6WlNCM2FYUm9JR015Y0dFdGQyTXVYRzRnS2x4dUlDb2dRSEJoY21GdElHMWhibWxtWlhOMFUzUnZjbVVnTFNCak1uQmhJRzFoYm1sbVpYTjBJSE4wYjNKbElHOWlhbVZqZEZ4dUlDb2dRSEJoY21GdElHeHZZMkZzWlNBdElFSkRVQ0EwTnlCc2IyTmhiR1VnYzNSeWFXNW5JR1p2Y2lCMGNtRnVjMnhoZEdsdVp5QmxaR2wwY3lBbUlHRmpkR2wyYVhSNUlHRmpkR2x2Ym5OY2JpQXFMMXh1Wlhod2IzSjBJR0Z6ZVc1aklHWjFibU4wYVc5dUlHTnlaV0YwWlV3eVRXRnVhV1psYzNSVGRHOXlaU2hjYmlBZ2JXRnVhV1psYzNSVGRHOXlaVG9nVFdGdWFXWmxjM1JUZEc5eVpTeGNiaUFnYkc5allXeGxQem9nYzNSeWFXNW5MRnh1S1RvZ1VISnZiV2x6WlR4RWFYTndiM05oWW14bFRESk5ZVzVwWm1WemRGTjBiM0psUGlCN1hHNGdJR052Ym5OMElHUnBjM0J2YzJWeWN6b2dLQ2dwSUQwK0lIWnZhV1FwVzEwZ1BTQmJYVHRjYmlBZ1kyOXVjM1FnWVdOMGFYWmxUV0Z1YVdabGMzUWdQU0J0WVc1cFptVnpkRk4wYjNKbExtRmpkR2wyWlUxaGJtbG1aWE4wTzF4dVhHNGdJR052Ym5OMElHbHVaM0psWkdsbGJuUnpPaUJNTWtsdVozSmxaR2xsYm5SYlhTQTlJR0ZqZEdsMlpVMWhibWxtWlhOMExtbHVaM0psWkdsbGJuUnpMbTFoY0NoY2JpQWdJQ0FvYVc1bmNtVmthV1Z1ZENrZ1BUNGdlMXh1SUNBZ0lDQWdZMjl1YzNRZ2RHaDFiV0p1WVdsc0lEMGdhVzVuY21Wa2FXVnVkQzUwYUhWdFltNWhhV3cvTG1kbGRGVnliQ2dwTzF4dVhHNGdJQ0FnSUNCcFppQW9kR2gxYldKdVlXbHNLU0I3WEc0Z0lDQWdJQ0FnSUdScGMzQnZjMlZ5Y3k1d2RYTm9LSFJvZFcxaWJtRnBiQzVrYVhOd2IzTmxLVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJQ0FnZEdsMGJHVTZJR2x1WjNKbFpHbGxiblF1ZEdsMGJHVXNYRzRnSUNBZ0lDQWdJR1p2Y20xaGREb2dhVzVuY21Wa2FXVnVkQzVtYjNKdFlYUXNYRzRnSUNBZ0lDQWdJSFJvZFcxaWJtRnBiRG9nZEdoMWJXSnVZV2xzUHk1MWNtd2dQejhnYm5Wc2JDeGNiaUFnSUNBZ0lDQWdhR0Z6VFdGdWFXWmxjM1E2SUNFaGFXNW5jbVZrYVdWdWRDNXRZVzVwWm1WemRDeGNiaUFnSUNBZ0lDQWdaWEp5YjNJNklHZGxkRVZ5Y205eVUzUmhkSFZ6S0dsdVozSmxaR2xsYm5RdWRtRnNhV1JoZEdsdmJsTjBZWFIxY3lrc1hHNGdJQ0FnSUNBZ0lIWmhiR2xrWVhScGIyNVRkR0YwZFhNNklHbHVaM0psWkdsbGJuUXVkbUZzYVdSaGRHbHZibE4wWVhSMWN5eGNiaUFnSUNBZ0lIMDdYRzRnSUNBZ2ZTeGNiaUFnS1R0Y2JseHVJQ0JqYjI1emRDQndjbTlrZFdObGNpQTlJSE5sYkdWamRGQnliMlIxWTJWeUtHRmpkR2wyWlUxaGJtbG1aWE4wS1R0Y2JseHVJQ0JqYjI1emRDQmxaR2wwYzBGdVpFRmpkR2wyYVhSNUlEMGdZWGRoYVhRZ2MyVnNaV04wUldScGRITkJibVJCWTNScGRtbDBlU2hoWTNScGRtVk5ZVzVwWm1WemRDd2diRzlqWVd4bEtUdGNibHh1SUNCamIyNXpkQ0J6YjJOcFlXeEJZMk52ZFc1MGN5QTlYRzRnSUNBZ2MyVnNaV04wVTI5amFXRnNRV05qYjNWdWRITW9ZV04wYVhabFRXRnVhV1psYzNRcFB5NXRZWEFvS0hOdlkybGhiRUZqWTI5MWJuUXBJRDArSUNoN1hHNGdJQ0FnSUNBblFIUjVjR1VuT2lCemIyTnBZV3hCWTJOdmRXNTBXeWRBZEhsd1pTZGRMRnh1SUNBZ0lDQWdKMEJwWkNjNklITnZZMmxoYkVGalkyOTFiblJiSjBCcFpDZGRMRnh1SUNBZ0lDQWdibUZ0WlRvZ2MyOWphV0ZzUVdOamIzVnVkQzV1WVcxbExGeHVJQ0FnSUNBZ2FXUmxiblJwWm1sbGNqb2djMjlqYVdGc1FXTmpiM1Z1ZEM1cFpHVnVkR2xtYVdWeUxGeHVJQ0FnSUgwcEtTQS9QeUJ1ZFd4c08xeHVYRzRnSUdOdmJuTjBJSFJvZFcxaWJtRnBiQ0E5SUdGamRHbDJaVTFoYm1sbVpYTjBMblJvZFcxaWJtRnBiRDh1WjJWMFZYSnNLQ2s3WEc1Y2JpQWdhV1lnS0hSb2RXMWlibUZwYkNrZ2UxeHVJQ0FnSUdScGMzQnZjMlZ5Y3k1d2RYTm9LSFJvZFcxaWJtRnBiQzVrYVhOd2IzTmxLVHRjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUI3WEc0Z0lDQWdiV0Z1YVdabGMzUlRkRzl5WlRvZ2UxeHVJQ0FnSUNBZ2FXNW5jbVZrYVdWdWRITXNYRzRnSUNBZ0lDQm1iM0p0WVhRNklHRmpkR2wyWlUxaGJtbG1aWE4wTG1admNtMWhkQ3hjYmlBZ0lDQWdJSFJwZEd4bE9pQmhZM1JwZG1WTllXNXBabVZ6ZEM1MGFYUnNaU3hjYmlBZ0lDQWdJSE5wWjI1aGRIVnlaVG9nWVdOMGFYWmxUV0Z1YVdabGMzUXVjMmxuYm1GMGRYSmxTVzVtYjF4dUlDQWdJQ0FnSUNBL0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsemMzVmxjam9nWVdOMGFYWmxUV0Z1YVdabGMzUXVjMmxuYm1GMGRYSmxTVzVtYnk1cGMzTjFaWElnUHo4Z2JuVnNiQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHpiMFJoZEdWVGRISnBibWM2SUdGamRHbDJaVTFoYm1sbVpYTjBMbk5wWjI1aGRIVnlaVWx1Wm04dWRHbHRaU0EvUHlCdWRXeHNMRnh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ09pQnVkV3hzTEZ4dUlDQWdJQ0FnWTJ4aGFXMUhaVzVsY21GMGIzSTZJSHRjYmlBZ0lDQWdJQ0FnZG1Gc2RXVTZJR0ZqZEdsMlpVMWhibWxtWlhOMExtTnNZV2x0UjJWdVpYSmhkRzl5TEZ4dUlDQWdJQ0FnSUNCd2NtOWtkV04wT2lCelpXeGxZM1JHYjNKdFlYUjBaV1JIWlc1bGNtRjBiM0lvWVdOMGFYWmxUV0Z1YVdabGMzUXBMRnh1SUNBZ0lDQWdmU3hjYmlBZ0lDQWdJSEJ5YjJSMVkyVnlPaUJ3Y205a2RXTmxjbHh1SUNBZ0lDQWdJQ0EvSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2RBZEhsd1pTYzZJSEJ5YjJSMVkyVnlXeWRBZEhsd1pTZGRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JtRnRaVG9nY0hKdlpIVmpaWEl1Ym1GdFpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdsa1pXNTBhV1pwWlhJNklIQnliMlIxWTJWeUxtbGtaVzUwYVdacFpYSXNYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBNklHNTFiR3dzWEc0Z0lDQWdJQ0J6YjJOcFlXeEJZMk52ZFc1MGN5eGNiaUFnSUNBZ0lHVmthWFJ6UVc1a1FXTjBhWFpwZEhrc1hHNGdJQ0FnSUNCblpXNWxjbUYwYVhabFNXNW1iem9nYzJWc1pXTjBSMlZ1WlhKaGRHbDJaVWx1Wm04b1lXTjBhWFpsVFdGdWFXWmxjM1FwTEZ4dUlDQWdJQ0FnZEdoMWJXSnVZV2xzT2lCMGFIVnRZbTVoYVd3L0xuVnliQ0EvUHlCdWRXeHNMRnh1SUNBZ0lDQWdhWE5DWlhSaE9pQWhJV0ZqZEdsMlpVMWhibWxtWlhOMExtRnpjMlZ5ZEdsdmJuTXVaMlYwS0NkaFpHOWlaUzVpWlhSaEp5ay9MbHN3WFQ4dVpHRjBZUzUyWlhKemFXOXVMRnh1SUNBZ0lDQWdaWEp5YjNJNklHZGxkRVZ5Y205eVUzUmhkSFZ6S0cxaGJtbG1aWE4wVTNSdmNtVXVkbUZzYVdSaGRHbHZibE4wWVhSMWN5a3NYRzRnSUNBZ0lDQjJZV3hwWkdGMGFXOXVVM1JoZEhWek9pQnRZVzVwWm1WemRGTjBiM0psTG5aaGJHbGtZWFJwYjI1VGRHRjBkWE1zWEc0Z0lDQWdmU3hjYmlBZ0lDQmthWE53YjNObE9pQW9LU0E5UGlCN1hHNGdJQ0FnSUNCa2FYTndiM05sY25NdVptOXlSV0ZqYUNnb1pHbHpjRzl6WlNrZ1BUNGdaR2x6Y0c5elpTZ3BLVHRjYmlBZ0lDQjlMRnh1SUNCOU8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCblpYUkZjbkp2Y2xOMFlYUjFjeWgyWVd4cFpHRjBhVzl1VTNSaGRIVnpPaUJXWVd4cFpHRjBhVzl1VTNSaGRIVnpXMTBwT2lCRmNuSnZjbE4wWVhSMWN5QjdYRzRnSUhKbGRIVnliaUJvWVhOUGRHZHdVM1JoZEhWektIWmhiR2xrWVhScGIyNVRkR0YwZFhNcFhHNGdJQ0FnUHlBbmIzUm5jQ2RjYmlBZ0lDQTZJR2hoYzBWeWNtOXlVM1JoZEhWektIWmhiR2xrWVhScGIyNVRkR0YwZFhNcFhHNGdJQ0FnUHlBblpYSnliM0luWEc0Z0lDQWdPaUJ1ZFd4c08xeHVmVnh1SWwwc0ltNWhiV1Z6SWpwYkluSmxjWFZwY21Va0pEQWlMQ0pzYVhOMFEyRmphR1ZEYkdWaGNpSXNJbVZ4SWl3aVlYTnpiMk5KYm1SbGVFOW1JaXdpYkdsemRFTmhZMmhsUkdWc1pYUmxJaXdpYkdsemRFTmhZMmhsUjJWMElpd2liR2x6ZEVOaFkyaGxTR0Z6SWl3aWJHbHpkRU5oWTJobFUyVjBJaXdpY21WeGRXbHlaU1FrTVNJc0luSmxjWFZwY21Va0pESWlMQ0p5WlhGMWFYSmxKQ1F6SWl3aWNtVnhkV2x5WlNRa05DSXNJa3hwYzNSRFlXTm9aU0lzSW5OMFlXTnJRMnhsWVhJaUxDSnpkR0ZqYTBSbGJHVjBaU0lzSW5OMFlXTnJSMlYwSWl3aWMzUmhZMnRJWVhNaUxDSm1jbVZsUjJ4dlltRnNJaXdpWjJ4dlltRnNJaXdpY205dmRDSXNJbE41YldKdmJDSXNJbTlpYW1WamRGQnliM1J2SWl3aWFHRnpUM2R1VUhKdmNHVnlkSGtpTENKdVlYUnBkbVZQWW1wbFkzUlViMU4wY21sdVp5SXNJbk41YlZSdlUzUnlhVzVuVkdGbklpd2laMlYwVW1GM1ZHRm5JaXdpYjJKcVpXTjBWRzlUZEhKcGJtY2lMQ0ppWVhObFIyVjBWR0ZuSWl3aWFYTlBZbXBsWTNRaUxDSm1kVzVqVkdGbklpd2laMlZ1VkdGbklpd2lhWE5HZFc1amRHbHZiaUlzSW1OdmNtVktjMFJoZEdFaUxDSnBjMDFoYzJ0bFpDSXNJbVoxYm1OUWNtOTBieUlzSW1aMWJtTlViMU4wY21sdVp5SXNJblJ2VTI5MWNtTmxJaXdpWW1GelpVbHpUbUYwYVhabElpd2laMlYwVm1Gc2RXVWlMQ0puWlhST1lYUnBkbVVpTENKTllYQWlMQ0p1WVhScGRtVkRjbVZoZEdVaUxDSm9ZWE5vUTJ4bFlYSWlMQ0pvWVhOb1JHVnNaWFJsSWl3aVNFRlRTRjlWVGtSRlJrbE9SVVFpTENKb1lYTm9SMlYwSWl3aWFHRnphRWhoY3lJc0ltaGhjMmhUWlhRaUxDSklZWE5vSWl3aWJXRndRMkZqYUdWRGJHVmhjaUlzSW1selMyVjVZV0pzWlNJc0ltZGxkRTFoY0VSaGRHRWlMQ0p0WVhCRFlXTm9aVVJsYkdWMFpTSXNJbTFoY0VOaFkyaGxSMlYwSWl3aWJXRndRMkZqYUdWSVlYTWlMQ0p0WVhCRFlXTm9aVk5sZENJc0lrMWhjRU5oWTJobElpd2ljM1JoWTJ0VFpYUWlMQ0p5WlhGMWFYSmxKQ1ExSWl3aVUzUmhZMnNpTENKa1pXWnBibVZRY205d1pYSjBlU0lzSW1KaGMyVkJjM05wWjI1V1lXeDFaU0lzSW1GemMybG5iazFsY21kbFZtRnNkV1VpTENKamNtVmhkR1ZDWVhObFJtOXlJaXdpWW1GelpVWnZjaUlzSWxWcGJuUTRRWEp5WVhraUxDSmpiRzl1WlVGeWNtRjVRblZtWm1WeUlpd2lZMnh2Ym1WVWVYQmxaRUZ5Y21GNUlpd2lZMjl3ZVVGeWNtRjVJaXdpWW1GelpVTnlaV0YwWlNJc0ltOTJaWEpCY21jaUxDSm5aWFJRY205MGIzUjVjR1VpTENKcGMxQnliM1J2ZEhsd1pTSXNJbWx1YVhSRGJHOXVaVTlpYW1WamRDSXNJbWx6VDJKcVpXTjBUR2xyWlNJc0ltRnlaM05VWVdjaUxDSmlZWE5sU1hOQmNtZDFiV1Z1ZEhNaUxDSndjbTl3WlhKMGVVbHpSVzUxYldWeVlXSnNaU0lzSW1selFYSm5kVzFsYm5Seklpd2lhWE5CY25KaGVTSXNJazFCV0Y5VFFVWkZYMGxPVkVWSFJWSWlMQ0pwYzB4bGJtZDBhQ0lzSW1selFYSnlZWGxNYVd0bElpd2lhWE5CY25KaGVVeHBhMlZQWW1wbFkzUWlMQ0p2WW1wbFkzUlVZV2NpTENKcGMxQnNZV2x1VDJKcVpXTjBJaXdpWVhKeVlYbFVZV2NpTENKaWIyOXNWR0ZuSWl3aVpHRjBaVlJoWnlJc0ltVnljbTl5VkdGbklpd2liV0Z3VkdGbklpd2liblZ0WW1WeVZHRm5JaXdpY21WblpYaHdWR0ZuSWl3aWMyVjBWR0ZuSWl3aWMzUnlhVzVuVkdGbklpd2lkMlZoYTAxaGNGUmhaeUlzSW1GeWNtRjVRblZtWm1WeVZHRm5JaXdpWkdGMFlWWnBaWGRVWVdjaUxDSm1iRzloZERNeVZHRm5JaXdpWm14dllYUTJORlJoWnlJc0ltbHVkRGhVWVdjaUxDSnBiblF4TmxSaFp5SXNJbWx1ZERNeVZHRm5JaXdpZFdsdWREaFVZV2NpTENKMWFXNTBPRU5zWVcxd1pXUlVZV2NpTENKMWFXNTBNVFpVWVdjaUxDSjFhVzUwTXpKVVlXY2lMQ0ppWVhObFNYTlVlWEJsWkVGeWNtRjVJaXdpWW1GelpWVnVZWEo1SWl3aWJtOWtaVlYwYVd3aUxDSnBjMVI1Y0dWa1FYSnlZWGtpTENKellXWmxSMlYwSWl3aVlYTnphV2R1Vm1Gc2RXVWlMQ0pqYjNCNVQySnFaV04wSWl3aVltRnpaVlJwYldWeklpd2lhWE5KYm1SbGVDSXNJbWx6UW5WbVptVnlJaXdpWVhKeVlYbE1hV3RsUzJWNWN5SXNJbTVoZEdsMlpVdGxlWE5KYmlJc0ltSmhjMlZMWlhselNXNGlMQ0pyWlhselNXNGlMQ0owYjFCc1lXbHVUMkpxWldOMElpd2lZMnh2Ym1WQ2RXWm1aWElpTENKeVpYRjFhWEpsSkNRMklpd2ljbVZ4ZFdseVpTUWtOeUlzSW5KbGNYVnBjbVVrSkRnaUxDSnlaWEYxYVhKbEpDUTVJaXdpY21WeGRXbHlaU1FrTVRBaUxDSnlaWEYxYVhKbEpDUXhNU0lzSW5KbGNYVnBjbVVrSkRFeUlpd2ljbVZ4ZFdseVpTUWtNVE1pTENKeVpYRjFhWEpsSkNReE5DSXNJbUpoYzJWTlpYSm5aVVJsWlhBaUxDSmlZWE5sVFdWeVoyVWlMQ0pwWkdWdWRHbDBlU0lzSW1Gd2NHeDVJaXdpYm1GMGFYWmxUV0Y0SWl3aWIzWmxjbEpsYzNRaUxDSmpiMjV6ZEdGdWRDSXNJbUpoYzJWVFpYUlViMU4wY21sdVp5SXNJbk5vYjNKMFQzVjBJaXdpYzJWMFZHOVRkSEpwYm1jaUxDSmlZWE5sVW1WemRDSXNJbWx6U1hSbGNtRjBaV1ZEWVd4c0lpd2lZM0psWVhSbFFYTnphV2R1WlhJaUxDSmtZbWNpTENKdFpYSm5aU0lzSW1OeVpXRjBaVlJvZFcxaWJtRnBiQ0lzSW01aGRHbDJaVXRsZVhNaUxDSmlZWE5sUzJWNWN5SXNJbXRsZVhNaUxDSmlZWE5sUm05eVQzZHVJaXdpWVhKeVlYbFRiMjFsSWl3aVEwOU5VRUZTUlY5UVFWSlVTVUZNWDBaTVFVY2lMQ0pEVDAxUVFWSkZYMVZPVDFKRVJWSkZSRjlHVEVGSElpd2laWEYxWVd4QmNuSmhlWE1pTENKdFlYQlViMEZ5Y21GNUlpd2ljM2x0WW05c1ZHRm5JaXdpYzNsdFltOXNVSEp2ZEc4aUxDSnplVzFpYjJ4V1lXeDFaVTltSWl3aVpYRjFZV3hDZVZSaFp5SXNJbUZ5Y21GNVVIVnphQ0lzSW1KaGMyVkhaWFJCYkd4TFpYbHpJaXdpWVhKeVlYbEdhV3gwWlhJaUxDSnpkSFZpUVhKeVlYa2lMQ0p1WVhScGRtVkhaWFJUZVcxaWIyeHpJaXdpWjJWMFUzbHRZbTlzY3lJc0ltZGxkRUZzYkV0bGVYTWlMQ0psY1hWaGJFOWlhbVZqZEhNaUxDSkVZWFJoVm1sbGR5SXNJbEJ5YjIxcGMyVWlMQ0pYWldGclRXRndJaXdpWjJWMFZHRm5JaXdpWW1GelpVbHpSWEYxWVd4RVpXVndJaXdpWW1GelpVbHpSWEYxWVd3aUxDSmlZWE5sU1hOTllYUmphQ0lzSW1selUzUnlhV04wUTI5dGNHRnlZV0pzWlNJc0ltZGxkRTFoZEdOb1JHRjBZU0lzSW0xaGRHTm9aWE5UZEhKcFkzUkRiMjF3WVhKaFlteGxJaXdpWW1GelpVMWhkR05vWlhNaUxDSnBjMU41YldKdmJDSXNJbWx6UzJWNUlpd2lSbFZPUTE5RlVsSlBVbDlVUlZoVUlpd2liV1Z0YjJsNlpTSXNJbTFsYlc5cGVtVkRZWEJ3WldRaUxDSnpkSEpwYm1kVWIxQmhkR2dpTENKaGNuSmhlVTFoY0NJc0lrbE9Sa2xPU1ZSWklpd2lZbUZ6WlZSdlUzUnlhVzVuSWl3aWRHOVRkSEpwYm1jaUxDSmpZWE4wVUdGMGFDSXNJblJ2UzJWNUlpd2lZbUZ6WlVkbGRDSXNJbWRsZENJc0ltSmhjMlZJWVhOSmJpSXNJbWhoYzFCaGRHZ2lMQ0pvWVhOSmJpSXNJbUpoYzJWTllYUmphR1Z6VUhKdmNHVnlkSGtpTENKaVlYTmxVSEp2Y0dWeWRIa2lMQ0ppWVhObFVISnZjR1Z5ZEhsRVpXVndJaXdpY0hKdmNHVnlkSGtpTENKaVlYTmxTWFJsY21GMFpXVWlMQ0p3UkdWbVpYSWlMQ0p0WVhCQloyVkRiR1ZoYm1WeUlpd2laR2x6ZENJc0ltMXBiV2xqUm00aUxDSkZlSEJwY25sTllYQWlMQ0p0WVhCV1lXeDFaWE1pTENKaGNuSmhlVVZoWTJnaUxDSmpjbVZoZEdWQ1lYTmxSV0ZqYUNJc0ltSmhjMlZGWVdOb0lpd2lZMkZ6ZEVaMWJtTjBhVzl1SWl3aVltRnpaVU52Ym5abGNuUWlMQ0ppWVhObFUyVjBSR0YwWVNJc0ltTnlaV0YwWlVOMGIzSWlMQ0pYVWtGUVgwSkpUa1JmUmt4QlJ5SXNJbU55WldGMFpVSnBibVFpTENKamIyMXdiM05sUVhKbmN5SXNJbU52YlhCdmMyVkJjbWR6VW1sbmFIUWlMQ0pqYjNWdWRFaHZiR1JsY25NaUxDSnpaWFJFWVhSaElpd2laMlYwVjNKaGNFUmxkR0ZwYkhNaUxDSnBibk5sY25SWGNtRndSR1YwWVdsc2N5SXNJbGRTUVZCZlFrbE9SRjlMUlZsZlJreEJSeUlzSWxkU1FWQmZRMVZTVWxsZlJreEJSeUlzSWxkU1FWQmZRMVZTVWxsZlVrbEhTRlJmUmt4QlJ5SXNJbGRTUVZCZlVFRlNWRWxCVEY5R1RFRkhJaXdpVjFKQlVGOVFRVkpVU1VGTVgxSkpSMGhVWDBaTVFVY2lMQ0pYVWtGUVgwRlNXVjlHVEVGSElpd2lWMUpCVUY5U1JVRlNSMTlHVEVGSElpd2lWMUpCVUY5R1RFbFFYMFpNUVVjaUxDSjFjR1JoZEdWWGNtRndSR1YwWVdsc2N5SXNJbk5sZEZkeVlYQlViMU4wY21sdVp5SXNJbGRTUVZCZlExVlNVbGxmUWs5VlRrUmZSa3hCUnlJc0ltTnlaV0YwWlZKbFkzVnljbmtpTENKblpYUkliMnhrWlhJaUxDSnVZWFJwZG1WTmFXNGlMQ0p5Wlc5eVpHVnlJaXdpVUV4QlEwVklUMHhFUlZJaUxDSnlaWEJzWVdObFNHOXNaR1Z5Y3lJc0ltTnlaV0YwWlVoNVluSnBaQ0lzSW1OeVpXRjBaVU4xY25KNUlpd2lZM0psWVhSbFVHRnlkR2xoYkNJc0ltMWxjbWRsUkdGMFlTSXNJblJ5YVcxdFpXUkZibVJKYm1SbGVDSXNJbUpoYzJWVWNtbHRJaXdpZEc5T2RXMWlaWElpTENKMGIwWnBibWwwWlNJc0luUnZTVzUwWldkbGNpSXNJbU55WldGMFpWZHlZWEFpTENKaVlYTmxRWE56YVdkdUlpd2lZbUZ6WlVGemMybG5ia2x1SWl3aVkyOXdlVk41YldKdmJITWlMQ0puWlhSVGVXMWliMnh6U1c0aUxDSmpiM0I1VTNsdFltOXNjMGx1SWl3aVoyVjBRV3hzUzJWNWMwbHVJaXdpYVc1cGRFTnNiMjVsUVhKeVlYa2lMQ0pqYkc5dVpVUmhkR0ZXYVdWM0lpd2lZMnh2Ym1WU1pXZEZlSEFpTENKamJHOXVaVk41YldKdmJDSXNJbWx1YVhSRGJHOXVaVUo1VkdGbklpd2lZbUZ6WlVselRXRndJaXdpYVhOTllYQWlMQ0ppWVhObFNYTlRaWFFpTENKcGMxTmxkQ0lzSW5KbGNYVnBjbVVrSkRFMUlpd2ljbVZ4ZFdseVpTUWtNVFlpTENKeVpYRjFhWEpsSkNReE55SXNJbkpsY1hWcGNtVWtKREU0SWl3aWNtVnhkV2x5WlNRa01Ua2lMQ0p5WlhGMWFYSmxKQ1F5TUNJc0luSmxjWFZwY21Va0pESXhJaXdpUTB4UFRrVmZSRVZGVUY5R1RFRkhJaXdpUTB4UFRrVmZVMWxOUWs5TVUxOUdURUZISWl3aVltRnpaVU5zYjI1bElpd2lZMjl1ZG1WeWRDSXNJbVoxYm1NaUxDSmlZWE5sVTJWMElpd2liV0Z3UzJWNWN5SXNJbk5sZENKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenREUVVsQkxFbEJRVWtzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXp0QlFVTmlMRU5CUVVFc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTm1MRU5CUVVFc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTm1MRU5CUVVFc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTm1MRU5CUVVFc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTmtMRU5CUVVFc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEUxQlFVMHNRMEZCUXp0QlFVTnVRanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4RFFVRkJMRVZCUVdNc1IwRkJSeXhUUVVGVExFZEJRVWNzUlVGQlJTeFBRVUZQTEVWQlFVVTdRVUZEZUVNc1IwRkJSU3hQUVVGUExFZEJRVWNzVDBGQlR5eEpRVUZKTEVWQlFVVXNRMEZCUXp0QlFVTXhRaXhIUVVGRkxFbEJRVWtzU1VGQlNTeEhRVUZITEU5QlFVOHNSMEZCUnl4RFFVRkRPMGRCUTNSQ0xFbEJRVWtzU1VGQlNTeExRVUZMTEZGQlFWRXNTVUZCU1N4SFFVRkhMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUlVGQlJUdEJRVU16UXl4TFFVRkpMRTlCUVU4c1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBsQlEyNUNMRTFCUVUwc1NVRkJTU3hKUVVGSkxFdEJRVXNzVVVGQlVTeEpRVUZKTEZGQlFWRXNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSVHRCUVVOcVJDeExRVUZKTEU5QlFVOHNUMEZCVHl4RFFVRkRMRWxCUVVrc1IwRkJSeXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NVVUZCVVN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wbEJRM0JFTzBkQlEwUXNUVUZCVFN4SlFVRkpMRXRCUVVzN1FVRkRha0lzUzBGQlNTeDFSRUZCZFVRN1FVRkRNMFFzVDBGQlRTeEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJRenRCUVVONlFpeEpRVUZITEVOQlFVTTdRVUZEU2l4RlFVRkRMRU5CUVVNN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1EwRkRRU3hUUVVGVExFdEJRVXNzUTBGQlF5eEhRVUZITEVWQlFVVTdRVUZEY0VJc1IwRkJSU3hIUVVGSExFZEJRVWNzVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUTNCQ0xFZEJRVVVzU1VGQlNTeEhRVUZITEVOQlFVTXNUVUZCVFN4SFFVRkhMRWRCUVVjc1JVRkJSVHRCUVVONFFpeExRVUZKTEU5QlFVODdTVUZEVWp0QlFVTklMRWRCUVVVc1NVRkJTU3hMUVVGTExFZEJRVWNzYTBsQlFXdEpMRU5CUVVNc1NVRkJTVHRCUVVOeVNpeExRVUZKTEVkQlFVYzdRVUZEVUN4SlFVRkhMRU5CUVVNN1IwRkRSaXhKUVVGSkxFTkJRVU1zUzBGQlN5eEZRVUZGTzBGQlEyUXNTMEZCU1N4UFFVRlBPMGxCUTFJN1IwRkRSQ3hKUVVGSkxFTkJRVU1zUjBGQlJ5eFZRVUZWTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03UVVGREwwSXNSMEZCUlN4SlFVRkpMRWxCUVVrc1IwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4SlFVRkpMRVZCUVVVc1YwRkJWeXhGUVVGRkxFTkJRVU03UVVGRE9VTXNSMEZCUlN4UlFVRlJMRWxCUVVrN1MwRkRWaXhMUVVGTExFOUJRVThzUTBGQlF6dExRVU5pTEV0QlFVc3NUVUZCVFN4RFFVRkRPMHRCUTFvc1MwRkJTeXhMUVVGTExFTkJRVU03UzBGRFdDeExRVUZMTEVsQlFVa3NRMEZCUXp0QlFVTmtMRXRCUVVrc1MwRkJTeXhIUVVGSE8wRkJRMW9zVDBGQlRTeFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1MwRkRaaXhMUVVGTExFOUJRVThzUTBGQlF6dExRVU5pTEV0QlFVc3NUVUZCVFN4RFFVRkRPMEZCUTJoQ0xFdEJRVWtzUzBGQlN5eEhRVUZITzBGQlExb3NUMEZCVFN4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03UzBGRFppeExRVUZMTEUxQlFVMHNRMEZCUXp0TFFVTmFMRXRCUVVzc1MwRkJTeXhEUVVGRE8wRkJRMllzUzBGQlNTeExRVUZMTEVkQlFVYzdRVUZEV2l4UFFVRk5MRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dExRVU5tTEV0QlFVc3NUMEZCVHl4RFFVRkRPMHRCUTJJc1MwRkJTeXhOUVVGTkxFTkJRVU03UzBGRFdpeExRVUZMTEV0QlFVc3NRMEZCUXp0TFFVTllMRXRCUVVzc1NVRkJTU3hEUVVGRE8wRkJRMlFzUzBGQlNTeExRVUZMTEVkQlFVYzdRVUZEV2l4UFFVRk5MRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dExRVU5tTEV0QlFVc3NVMEZCVXl4RFFVRkRPMHRCUTJZc1MwRkJTeXhSUVVGUkxFTkJRVU03UzBGRFpDeExRVUZMTEUxQlFVMHNRMEZCUXp0TFFVTmFMRXRCUVVzc1MwRkJTeXhEUVVGRE8wRkJRMllzUzBGQlNTeExRVUZMTEVkQlFVYzdRVUZEV2l4UFFVRk5MRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dExRVU5tTEV0QlFVc3NVMEZCVXl4RFFVRkRPMHRCUTJZc1MwRkJTeXhSUVVGUkxFTkJRVU03UzBGRFpDeExRVUZMTEUxQlFVMHNRMEZCUXp0TFFVTmFMRXRCUVVzc1MwRkJTeXhEUVVGRE8wRkJRMllzUzBGQlNTeExRVUZMTEVkQlFVYzdRVUZEV2l4UFFVRk5MRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dExRVU5tTEV0QlFVc3NZMEZCWXl4RFFVRkRPMHRCUTNCQ0xFdEJRVXNzWVVGQllTeERRVUZETzB0QlEyNUNMRXRCUVVzc1QwRkJUeXhEUVVGRE8wdEJRMklzUzBGQlN5eE5RVUZOTEVOQlFVTTdRVUZEYUVJc1MwRkJTU3hMUVVGTExFbEJRVWs3VDBGRFVDeFBRVUZQTEVOQlFVTXNRMEZCUXp0TFFVTllPMDlCUTBVc1QwRkJUeXhUUVVGVExFTkJRVU03U1VGRGNFSTdSVUZEUmp0QlFVTkVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0RFFVTkJMRk5CUVZNc1VVRkJVU3hEUVVGRExFVkJRVVVzUlVGQlJUdEhRVU53UWl4SlFVRkpMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRPMEZCUXpOQ0xFZEJRVVVzU1VGQlNTeExRVUZMTEVsQlFVa3NRMEZCUXl4RlFVRkZPMHRCUTJRc1QwRkJUeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNc1IwRkJSeXhIUVVGSExFTkJRVU03U1VGRGFrTTdRVUZEU0N4SFFVRkZMRWxCUVVrc1MwRkJTeXhKUVVGSkxFTkJRVU1zUlVGQlJUdExRVU5rTEU5QlFVOHNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETEVkQlFVY3NSMEZCUnl4RFFVRkRPMGxCUTJwRE8wRkJRMGdzUjBGQlJTeEpRVUZKTEV0QlFVc3NTVUZCU1N4RFFVRkRMRVZCUVVVN1MwRkRaQ3hQUVVGUExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNSVUZCUlN4SFFVRkhMRU5CUVVNc1EwRkJReXhIUVVGSExFZEJRVWNzUTBGQlF6dEpRVU5xUXp0QlFVTklMRWRCUVVVc1NVRkJTU3hMUVVGTExFbEJRVWtzUTBGQlF5eEZRVUZGTzB0QlEyUXNUMEZCVHl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4SFFVRkhMRU5CUVVNN1NVRkRha003UVVGRFNDeEhRVUZGTEU5QlFVOHNSVUZCUlN4SFFVRkhMRWxCUVVrc1EwRkJRenRGUVVOc1FqdEJRVU5FTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdERRVU5CTEZOQlFWTXNUMEZCVHl4RFFVRkRMRVZCUVVVc1JVRkJSVHRIUVVOdVFpeEpRVUZKTEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzBGQlF6TkNMRWRCUVVVc1NVRkJTU3hMUVVGTExFbEJRVWtzUTBGQlF5eEZRVUZGTzB0QlEyUXNUMEZCVHl4TlFVRk5MRU5CUVVNc1JVRkJSU3hGUVVGRkxFdEJRVXNzUlVGQlJTeERRVUZETEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1NVRkRjRU03UVVGRFNDeEhRVUZGTEVsQlFVa3NTMEZCU3l4SlFVRkpMRU5CUVVNc1JVRkJSVHRMUVVOa0xFOUJRVThzVFVGQlRTeERRVUZETEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1EwRkJReXhGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETzBsQlEzSkRPMEZCUTBnc1IwRkJSU3hKUVVGSkxFdEJRVXNzU1VGQlNTeERRVUZETEVWQlFVVTdTMEZEWkN4UFFVRlBMRTFCUVUwc1EwRkJReXhGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEVOQlFVTXNSVUZCUlN4UlFVRlJMRU5CUVVNc1EwRkJRenRKUVVOMlF6dEJRVU5JTEVkQlFVVXNTVUZCU1N4TFFVRkxMRWxCUVVrc1EwRkJReXhGUVVGRk8wdEJRMlFzVDBGQlR5eE5RVUZOTEVOQlFVTXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hEUVVGRExFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTTdTVUZEZGtNN1FVRkRTQ3hIUVVGRkxFOUJRVThzUlVGQlJTeEhRVUZITEV0QlFVc3NRMEZCUXp0RlFVTnVRanRCUVVORU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRMEZEUVN4VFFVRlRMRTFCUVUwc1EwRkJReXhGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEVOQlFVTXNSVUZCUlN4SlFVRkpMRVZCUVVVN1IwRkRiRU1zU1VGQlNTeFJRVUZSTEVkQlFVY3NTMEZCU3l4SlFVRkpMRU5CUVVNc1IwRkJSeXhIUVVGSExFTkJRVU03UjBGRGFFTXNUMEZCVHl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4SFFVRkhMRWRCUVVjc1NVRkJTU3hKUVVGSkxGRkJRVkVzUjBGQlJ5eEhRVUZITEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkRha1VzUlVGQlFUczdPenRCUTJoTFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVeXhMUVVGTExFTkJRVU1zUjBGQlJ5eEZRVUZGTzBGQlEzQkNMRU5CUVVNc1YwRkJWeXhEUVVGRExFdEJRVXNzUjBGQlJ5eFhRVUZYTEVOQlFVTTdRVUZEYWtNc1EwRkJReXhYUVVGWExFTkJRVU1zVDBGQlR5eEhRVUZITEZkQlFWY3NRMEZCUXp0QlFVTnVReXhEUVVGRExGZEJRVmNzUTBGQlF5eE5RVUZOTEVkQlFVY3NUVUZCVFN4RFFVRkRPMEZCUXpkQ0xFTkJRVU1zVjBGQlZ5eERRVUZETEU5QlFVOHNSMEZCUnl4UFFVRlBMRU5CUVVNN1FVRkRMMElzUTBGQlF5eFhRVUZYTEVOQlFVTXNUVUZCVFN4SFFVRkhMRTFCUVUwc1EwRkJRenRCUVVNM1FpeERRVUZETEZkQlFWY3NRMEZCUXl4UFFVRlBMRWRCUVVjc1QwRkJUeXhEUVVGRE8wRkJReTlDTEVOQlFVTXNWMEZCVnl4RFFVRkRMRkZCUVZFc1IwRkJSMEVzVjBGQllTeERRVUZETzBGQlEzUkRMRU5CUVVNc1YwRkJWeXhEUVVGRExFOUJRVThzUjBGQlJ5eFBRVUZQTEVOQlFVTTdRVUZETDBJN1FVRkRRU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExFZEJRVWNzU1VGQlNUdEJRVU5xUXl4RlFVRkZMRmRCUVZjc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRPVUlzUlVGQlJTeERRVUZETEVOQlFVTTdRVUZEU2p0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUTBGQlF5eFhRVUZYTEVOQlFVTXNTMEZCU3l4SFFVRkhMRVZCUVVVc1EwRkJRenRCUVVONFFpeERRVUZETEZkQlFWY3NRMEZCUXl4TFFVRkxMRWRCUVVjc1JVRkJSU3hEUVVGRE8wRkJRM2hDTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFTkJRVU1zVjBGQlZ5eERRVUZETEZWQlFWVXNSMEZCUnl4RlFVRkZMRU5CUVVNN1FVRkROMEk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hEUVVGRExGTkJRVk1zVjBGQlZ5eERRVUZETEZOQlFWTXNSVUZCUlR0QlFVTnFReXhGUVVGRkxFbEJRVWtzU1VGQlNTeEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTm1PMEZCUTBFc1JVRkJSU3hMUVVGTExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1UwRkJVeXhEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlR0QlFVTTNReXhIUVVGSExFbEJRVWtzUjBGQlJ5eERRVUZETEVOQlFVTXNTVUZCU1N4SlFVRkpMRU5CUVVNc1NVRkJTU3hKUVVGSkxFbEJRVWtzVTBGQlV5eERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVONlJDeEhRVUZITEVsQlFVa3NTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkRZaXhIUVVGSE8wRkJRMGc3UVVGRFFTeEZRVUZGTEU5QlFVOHNWMEZCVnl4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRmRCUVZjc1EwRkJReXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdRVUZEZUVVc1JVRkJSVHRCUVVOR0xFTkJRVU1zVjBGQlZ5eERRVUZETEZkQlFWY3NSMEZCUnl4WFFVRlhMRU5CUVVNN1FVRkRka003UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFTkJRVU1zVTBGQlV5eFhRVUZYTEVOQlFVTXNVMEZCVXl4RlFVRkZPMEZCUTJwRExFVkJRVVVzU1VGQlNTeFJRVUZSTEVOQlFVTTdRVUZEWml4RlFVRkZMRWxCUVVrc1kwRkJZeXhIUVVGSExFbEJRVWtzUTBGQlF6dEJRVU0xUWl4RlFVRkZMRWxCUVVrc1pVRkJaU3hEUVVGRE8wRkJRM1JDTEVWQlFVVXNTVUZCU1N4WlFVRlpMRU5CUVVNN1FVRkRia0k3UVVGRFFTeEZRVUZGTEZOQlFWTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1NVRkJTU3hGUVVGRk8wRkJRekZDTzBGQlEwRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFOUJRVThzUlVGQlJUdEJRVU4yUWl4SlFVRkpMRTlCUVU4N1FVRkRXQ3hKUVVGSk8wRkJRMG83UVVGRFFTeEhRVUZITEUxQlFVMHNTVUZCU1N4SFFVRkhMRXRCUVVzc1EwRkJRenRCUVVOMFFqdEJRVU5CTzBGQlEwRXNSMEZCUnl4TlFVRk5MRWxCUVVrc1IwRkJSeXhOUVVGTkxFTkJRVU1zU1VGQlNTeEpRVUZKTEVWQlFVVXNRMEZCUXl4RFFVRkRPMEZCUTI1RExFZEJRVWNzVFVGQlRTeEZRVUZGTEVkQlFVY3NTVUZCU1N4SlFVRkpMRkZCUVZFc1NVRkJTU3hKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU40UXl4SFFVRkhMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzUlVGQlJTeERRVUZETzBGQlEyeENMRWRCUVVjc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eFJRVUZSTEVOQlFVTTdRVUZEZUVJc1IwRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXp0QlFVTndRaXhIUVVGSExGRkJRVkVzUjBGQlJ5eEpRVUZKTEVOQlFVTTdRVUZEYmtJN1FVRkRRU3hIUVVGSExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4WFFVRlhMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTNwRE8wRkJRMEVzUjBGQlJ5eEpRVUZKTEU5QlFVOHNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExGRkJRVkVzUlVGQlJUdEJRVU53UXp0QlFVTkJMRWxCUVVrc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0QlFVTjJRaXhKUVVGSk8wRkJRMG83UVVGRFFUdEJRVU5CTEVkQlFVY3NTVUZCU1N4TFFVRkxMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRMnBDTEVkQlFVY3NTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1pVRkJaU3hGUVVGRkxFTkJRVU1zUzBGQlN5eEZRVUZGTEUxQlFVMHNTMEZCU3p0QlFVTnFSVHRCUVVOQkxFbEJRVWtzU1VGQlNTeExRVUZMTEV0QlFVc3NTVUZCU1N4RlFVRkZPMEZCUTNoQ0xFdEJRVXNzVDBGQlR5eEhRVUZITEVOQlFVTTdRVUZEYUVJc1MwRkJTenRCUVVOTUxFbEJRVWtzUzBGQlN5eEZRVUZGTEVOQlFVTTdRVUZEV2l4SlFVRkpMRTFCUVUwc1UwRkJVeXhIUVVGSExGZEJRVmNzUTBGQlF5eFZRVUZWTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1FVRkRja1FzU1VGQlNTeEpRVUZKTEU5QlFVOHNVMEZCVXl4TFFVRkxMRlZCUVZVc1JVRkJSVHRCUVVONlF5eExRVUZMTEUxQlFVMHNSMEZCUnl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU0zUWl4TFFVRkxMRXRCUVVzc1IwRkJSeXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlN4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVOMlF6dEJRVU5CTzBGQlEwRXNTMEZCU3l4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTXpRaXhMUVVGTExFdEJRVXNzUlVGQlJTeERRVUZETzBGQlEySXNTMEZCU3p0QlFVTk1MRWxCUVVrc1QwRkJUeXhMUVVGTExFTkJRVU03UVVGRGFrSXNTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkRUanRCUVVOQk8wRkJRMEVzUjBGQlJ5eFhRVUZYTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdRVUZETTBNN1FVRkRRU3hIUVVGSExFMUJRVTBzUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRWxCUVVrc1YwRkJWeXhEUVVGRExFZEJRVWNzUTBGQlF6dEJRVU0zUXl4SFFVRkhMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMEZCUXpOQ0xFZEJRVWM3UVVGRFNEdEJRVU5CTEVWQlFVVXNTMEZCU3l4RFFVRkRMRk5CUVZNc1IwRkJSeXhUUVVGVExFTkJRVU03UVVGRE9VSXNSVUZCUlN4TFFVRkxMRU5CUVVNc1UwRkJVeXhIUVVGSExGZEJRVmNzUTBGQlF5eFRRVUZUTEVWQlFVVXNRMEZCUXp0QlFVTTFReXhGUVVGRkxFdEJRVXNzUTBGQlF5eExRVUZMTEVkQlFVY3NWMEZCVnl4RFFVRkRMRmRCUVZjc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF6dEJRVU51UkN4RlFVRkZMRXRCUVVzc1EwRkJReXhOUVVGTkxFZEJRVWNzVFVGQlRTeERRVUZETzBGQlEzaENMRVZCUVVVc1MwRkJTeXhEUVVGRExFOUJRVThzUjBGQlJ5eFhRVUZYTEVOQlFVTXNUMEZCVHl4RFFVRkRPMEZCUTNSRE8wRkJRMEVzUlVGQlJTeE5RVUZOTEVOQlFVTXNZMEZCWXl4RFFVRkRMRXRCUVVzc1JVRkJSU3hUUVVGVExFVkJRVVU3UVVGRE1VTXNSMEZCUnl4VlFVRlZMRVZCUVVVc1NVRkJTVHRCUVVOdVFpeEhRVUZITEZsQlFWa3NSVUZCUlN4TFFVRkxPMEZCUTNSQ0xFZEJRVWNzUjBGQlJ5eEZRVUZGTEUxQlFVMDdRVUZEWkN4SlFVRkpMRWxCUVVrc1kwRkJZeXhMUVVGTExFbEJRVWtzUlVGQlJUdEJRVU5xUXl4TFFVRkxMRTlCUVU4c1kwRkJZeXhEUVVGRE8wRkJRek5DTEV0QlFVczdRVUZEVEN4SlFVRkpMRWxCUVVrc1pVRkJaU3hMUVVGTExGZEJRVmNzUTBGQlF5eFZRVUZWTEVWQlFVVTdRVUZEY0VRc1MwRkJTeXhsUVVGbExFZEJRVWNzVjBGQlZ5eERRVUZETEZWQlFWVXNRMEZCUXp0QlFVTTVReXhMUVVGTExGbEJRVmtzUjBGQlJ5eFhRVUZYTEVOQlFVTXNUMEZCVHl4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRE8wRkJRMjVFTEV0QlFVczdRVUZEVER0QlFVTkJMRWxCUVVrc1QwRkJUeXhaUVVGWkxFTkJRVU03UVVGRGVFSXNTVUZCU1R0QlFVTktMRWRCUVVjc1IwRkJSeXhGUVVGRkxFTkJRVU1zU1VGQlNUdEJRVU5pTEVsQlFVa3NZMEZCWXl4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVOMlFpeEpRVUZKTzBGQlEwb3NSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRURHRCUVVOQk8wRkJRMEVzUlVGQlJTeEpRVUZKTEU5QlFVOHNWMEZCVnl4RFFVRkRMRWxCUVVrc1MwRkJTeXhWUVVGVkxFVkJRVVU3UVVGRE9VTXNSMEZCUnl4WFFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBGQlF6TkNMRWRCUVVjN1FVRkRTRHRCUVVOQkxFVkJRVVVzVDBGQlR5eExRVUZMTEVOQlFVTTdRVUZEWml4RlFVRkZPMEZCUTBZN1FVRkRRU3hEUVVGRExGTkJRVk1zVFVGQlRTeERRVUZETEZOQlFWTXNSVUZCUlN4VFFVRlRMRVZCUVVVN1FVRkRka01zUlVGQlJTeE5RVUZOTEZGQlFWRXNSMEZCUnl4WFFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zU1VGQlNTeFBRVUZQTEZOQlFWTXNTMEZCU3l4WFFVRlhMRWRCUVVjc1IwRkJSeXhIUVVGSExGTkJRVk1zUTBGQlF5eEhRVUZITEZOQlFWTXNRMEZCUXl4RFFVRkRPMEZCUTJ4SUxFVkJRVVVzVVVGQlVTeERRVUZETEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRE8wRkJRekZDTEVWQlFVVXNUMEZCVHl4UlFVRlJMRU5CUVVNN1FVRkRiRUlzUlVGQlJUdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeERRVUZETEZOQlFWTXNUVUZCVFN4RFFVRkRMRlZCUVZVc1JVRkJSVHRCUVVNM1FpeEZRVUZGTEZkQlFWY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU03UVVGREwwSXNSVUZCUlN4WFFVRlhMRU5CUVVNc1ZVRkJWU3hIUVVGSExGVkJRVlVzUTBGQlF6dEJRVU4wUXp0QlFVTkJMRVZCUVVVc1YwRkJWeXhEUVVGRExFdEJRVXNzUjBGQlJ5eEZRVUZGTEVOQlFVTTdRVUZEZWtJc1JVRkJSU3hYUVVGWExFTkJRVU1zUzBGQlN5eEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTjZRanRCUVVOQkxFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdRVUZEVWl4RlFVRkZMRTFCUVUwc1MwRkJTeXhIUVVGSExFTkJRVU1zVDBGQlR5eFZRVUZWTEV0QlFVc3NVVUZCVVN4SFFVRkhMRlZCUVZVc1IwRkJSeXhGUVVGRkxFVkJRVVVzUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMEZCUTI1R0xFVkJRVVVzVFVGQlRTeEhRVUZITEVkQlFVY3NTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJRenRCUVVNelFqdEJRVU5CTEVWQlFVVXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eEhRVUZITEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVN1FVRkROVUlzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRk8wRkJRMnhDTzBGQlEwRXNTVUZCU1N4VFFVRlRPMEZCUTJJc1NVRkJTVHRCUVVOS08wRkJRMEVzUjBGQlJ5eFZRVUZWTEVkQlFVY3NTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eExRVUZMTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRMME03UVVGRFFTeEhRVUZITEVsQlFVa3NWVUZCVlN4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFZEJRVWNzUlVGQlJUdEJRVU01UWl4SlFVRkpMRmRCUVZjc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NUVUZCVFN4RFFVRkRMRWRCUVVjc1IwRkJSeXhWUVVGVkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRGVFVXNTVUZCU1N4TlFVRk5PMEZCUTFZc1NVRkJTU3hYUVVGWExFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRTFCUVUwc1EwRkJReXhIUVVGSExFZEJRVWNzVlVGQlZTeEhRVUZITEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRMMFFzU1VGQlNUdEJRVU5LTEVkQlFVYzdRVUZEU0N4RlFVRkZPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4RFFVRkRMRk5CUVZNc1QwRkJUeXhIUVVGSE8wRkJRM0JDTEVWQlFVVXNUVUZCVFN4VlFVRlZMRWRCUVVjN1FVRkRja0lzUjBGQlJ5eEhRVUZITEZkQlFWY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExGZEJRVmNzUTBGQlF6dEJRVU40UXl4SFFVRkhMRWRCUVVjc1YwRkJWeXhEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExGTkJRVk1zU1VGQlNTeEhRVUZITEVkQlFVY3NVMEZCVXl4RFFVRkRPMEZCUXpGRkxFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRaQ3hGUVVGRkxGZEJRVmNzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkRla0lzUlVGQlJTeFBRVUZQTEZWQlFWVXNRMEZCUXp0QlFVTndRaXhGUVVGRk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFTkJRVU1zVTBGQlV5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RlFVRkZPMEZCUTNoQ0xFVkJRVVVzU1VGQlNTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVU1zUzBGQlN5eEhRVUZITEVWQlFVVTdRVUZEY2tNc1IwRkJSeXhQUVVGUExFbEJRVWtzUTBGQlF6dEJRVU5tTEVkQlFVYzdRVUZEU0R0QlFVTkJMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRFVpeEZRVUZGTEVsQlFVa3NSMEZCUnl4RFFVRkRPMEZCUTFZN1FVRkRRU3hGUVVGRkxFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4SFFVRkhMRWRCUVVjc1YwRkJWeXhEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4SFFVRkhMRWRCUVVjc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUdEJRVU0xUkN4SFFVRkhMRWxCUVVrc1YwRkJWeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVU3UVVGRGVFTXNTVUZCU1N4UFFVRlBMRXRCUVVzc1EwRkJRenRCUVVOcVFpeEpRVUZKTzBGQlEwb3NSMEZCUnp0QlFVTklPMEZCUTBFc1JVRkJSU3hMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNSMEZCUnl4SFFVRkhMRmRCUVZjc1EwRkJReXhMUVVGTExFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVTXNSMEZCUnl4SFFVRkhMRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVU3UVVGRE5VUXNSMEZCUnl4SlFVRkpMRmRCUVZjc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRk8wRkJRM2hETEVsQlFVa3NUMEZCVHl4SlFVRkpMRU5CUVVNN1FVRkRhRUlzU1VGQlNUdEJRVU5LTEVkQlFVYzdRVUZEU0R0QlFVTkJMRVZCUVVVc1QwRkJUeXhMUVVGTExFTkJRVU03UVVGRFppeEZRVUZGTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVOQlFVTXNVMEZCVXl4WFFVRlhMRU5CUVVNc1RVRkJUU3hGUVVGRk8wRkJRemxDTEVWQlFVVXNUMEZCVHl4TlFVRk5MRU5CUVVNc1VVRkJVU3hGUVVGRk8wRkJRekZDTEVsQlFVa3NVMEZCVXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hOUVVGTkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVNNVF5eEpRVUZKTEU5QlFVOHNRMEZCUXl4VFFVRlRMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRE5VSXNSVUZCUlR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4RFFVRkRMRk5CUVZNc1RVRkJUU3hEUVVGRExFZEJRVWNzUlVGQlJUdEJRVU4wUWl4RlFVRkZMRWxCUVVrc1IwRkJSeXhaUVVGWkxFdEJRVXNzUlVGQlJUdEJRVU0xUWl4SFFVRkhMRTlCUVU4c1IwRkJSeXhEUVVGRExFdEJRVXNzU1VGQlNTeEhRVUZITEVOQlFVTXNUMEZCVHl4RFFVRkRPMEZCUTI1RExFZEJRVWM3UVVGRFNDeEZRVUZGTEU5QlFVOHNSMEZCUnl4RFFVRkRPMEZCUTJJc1JVRkJSVHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4RFFVRkRMRk5CUVZNc1QwRkJUeXhIUVVGSE8wRkJRM0JDTEVWQlFVVXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXgxU1VGQmRVa3NRMEZCUXl4RFFVRkRPMEZCUTNoS0xFVkJRVVU3UVVGRFJqdEJRVU5CTEVOQlFVTXNWMEZCVnl4RFFVRkRMRTFCUVUwc1EwRkJReXhYUVVGWExFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXp0QlFVTjRRenRCUVVOQkxFTkJRVU1zVDBGQlR5eFhRVUZYTEVOQlFVTTdRVUZEY0VJc1EwRkJRenRCUVVORU8wRkJRMEVzU1VGQlFTeE5RVUZqTEVkQlFVY3NTMEZCU3pzN096czdRVU12VVhSQ08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1ZVRkJRU3hIUVVGeFFpeFZRVUZWTEVOQlFVTTdRVUZEYUVNc1EwRkJRU3hQUVVGQkxFTkJRVUVzU1VGQlFTeEhRVUZsTEVsQlFVa3NRMEZCUXp0QlFVTndRaXhEUVVGQkxFOUJRVUVzUTBGQlFTeEpRVUZCTEVkQlFXVXNTVUZCU1N4RFFVRkRPMEZCUTNCQ0xFTkJRVUVzVDBGQlFTeERRVUZCTEZOQlFVRXNSMEZCYjBJc1UwRkJVeXhEUVVGRE8wTkJRemxDTEU5QlFXdENMRU5CUVVFc1QwRkJRU3hIUVVGQkxGbEJRVmtzUlVGQlJTeERRVUZETzBGQlEycERMRU5CUVVFc1QwRkJRU3hEUVVGQkxFOUJRVUVzUjBGQmEwSXNRMEZCUXl4TlFVRk5PMEZCUTNwQ0xFVkJRVU1zU1VGQlNTeE5RVUZOTEVkQlFVY3NTMEZCU3l4RFFVRkRPMEZCUTNCQ08wRkJRMEVzUlVGQlF5eFBRVUZQTEUxQlFVMDdSMEZEV2l4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRk8wbEJRMW9zVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXp0QlFVTnFRaXhKUVVGSExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNkVWxCUVhWSkxFTkJRVU1zUTBGQlF6dEpRVU4wU2p0QlFVTklMRWRCUVVVc1EwRkJRenRCUVVOSUxFVkJRVU1zUjBGQlJ5eERRVUZETzBGQlEwdzdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHREUVVOQkxFOUJRV2xDTEVOQlFVRXNUVUZCUVN4SFFVRkJPMEZCUTJwQ0xFVkJRVU1zVTBGQlV6dEJRVU5XTEVWQlFVTXNVMEZCVXp0QlFVTldMRVZCUVVNc1UwRkJVenRCUVVOV0xFVkJRVU1zVTBGQlV6dEJRVU5XTEVWQlFVTXNVMEZCVXp0QlFVTldMRVZCUVVNc1UwRkJVenRCUVVOV0xFVkJRVU1zVTBGQlV6dEJRVU5XTEVWQlFVTXNVMEZCVXp0QlFVTldMRVZCUVVNc1UwRkJVenRCUVVOV0xFVkJRVU1zVTBGQlV6dEJRVU5XTEVWQlFVTXNVMEZCVXp0QlFVTldMRVZCUVVNc1UwRkJVenRCUVVOV0xFVkJRVU1zVTBGQlV6dEJRVU5XTEVWQlFVTXNVMEZCVXp0QlFVTldMRVZCUVVNc1UwRkJVenRCUVVOV0xFVkJRVU1zVTBGQlV6dEJRVU5XTEVWQlFVTXNVMEZCVXp0QlFVTldMRVZCUVVNc1UwRkJVenRCUVVOV0xFVkJRVU1zVTBGQlV6dEJRVU5XTEVWQlFVTXNVMEZCVXp0QlFVTldMRVZCUVVNc1UwRkJVenRCUVVOV0xFVkJRVU1zVTBGQlV6dEJRVU5XTEVWQlFVTXNVMEZCVXp0QlFVTldMRVZCUVVNc1UwRkJVenRCUVVOV0xFVkJRVU1zVTBGQlV6dEJRVU5XTEVWQlFVTXNVMEZCVXp0QlFVTldMRVZCUVVNc1UwRkJVenRCUVVOV0xFVkJRVU1zVTBGQlV6dEJRVU5XTEVWQlFVTXNVMEZCVXp0QlFVTldMRVZCUVVNc1UwRkJVenRCUVVOV0xFVkJRVU1zVTBGQlV6dEJRVU5XTEVWQlFVTXNVMEZCVXp0QlFVTldMRVZCUVVNc1UwRkJVenRCUVVOV0xFVkJRVU1zVTBGQlV6dEJRVU5XTEVWQlFVTXNVMEZCVXp0QlFVTldMRVZCUVVNc1UwRkJVenRCUVVOV0xFVkJRVU1zVTBGQlV6dEJRVU5XTEVWQlFVTXNVMEZCVXp0QlFVTldMRVZCUVVNc1UwRkJVenRCUVVOV0xFVkJRVU1zVTBGQlV6dEJRVU5XTEVWQlFVTXNVMEZCVXp0QlFVTldMRVZCUVVNc1UwRkJVenRCUVVOV0xFVkJRVU1zVTBGQlV6dEJRVU5XTEVWQlFVTXNVMEZCVXp0QlFVTldMRVZCUVVNc1UwRkJVenRCUVVOV0xFVkJRVU1zVTBGQlV6dEJRVU5XTEVWQlFVTXNVMEZCVXp0QlFVTldMRVZCUVVNc1UwRkJVenRCUVVOV0xFVkJRVU1zVTBGQlV6dEJRVU5XTEVWQlFVTXNVMEZCVXp0QlFVTldMRVZCUVVNc1UwRkJVenRCUVVOV0xFVkJRVU1zVTBGQlV6dEJRVU5XTEVWQlFVTXNVMEZCVXp0QlFVTldMRVZCUVVNc1UwRkJVenRCUVVOV0xFVkJRVU1zVTBGQlV6dEJRVU5XTEVWQlFVTXNVMEZCVXp0QlFVTldMRVZCUVVNc1UwRkJVenRCUVVOV0xFVkJRVU1zVTBGQlV6dEJRVU5XTEVWQlFVTXNVMEZCVXp0QlFVTldMRVZCUVVNc1UwRkJVenRCUVVOV0xFVkJRVU1zVTBGQlV6dEJRVU5XTEVWQlFVTXNVMEZCVXp0QlFVTldMRVZCUVVNc1UwRkJVenRCUVVOV0xFVkJRVU1zVTBGQlV6dEJRVU5XTEVWQlFVTXNVMEZCVXp0QlFVTldMRVZCUVVNc1UwRkJVenRCUVVOV0xFVkJRVU1zVTBGQlV6dEJRVU5XTEVWQlFVTXNVMEZCVXp0QlFVTldMRVZCUVVNc1UwRkJVenRCUVVOV0xFVkJRVU1zVTBGQlV6dEJRVU5XTEVWQlFVTXNVMEZCVXp0QlFVTldMRVZCUVVNc1UwRkJVenRCUVVOV0xFVkJRVU1zVTBGQlV6dEJRVU5XTEVWQlFVTXNVMEZCVXp0QlFVTldMRVZCUVVNc1UwRkJVenRCUVVOV0xFVkJRVU1zVTBGQlV6dEJRVU5XTEVWQlFVTXNRMEZCUXp0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1EwRkJRU3hUUVVGVExGTkJRVk1zUjBGQlJ6dEJRVU55UWp0QlFVTkJPMEZCUTBFN1JVRkRReXhKUVVGSkxFOUJRVThzVFVGQlRTeExRVUZMTEZkQlFWY3NTVUZCU1N4TlFVRk5MRU5CUVVNc1QwRkJUeXhMUVVGTExFMUJRVTBzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4TFFVRkxMRlZCUVZVc1NVRkJTU3hOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4RlFVRkZPMGRCUTNKSUxFOUJRVThzU1VGQlNTeERRVUZETzBkQlExbzdRVUZEUmp0QlFVTkJPMFZCUTBNc1NVRkJTU3hQUVVGUExGTkJRVk1zUzBGQlN5eFhRVUZYTEVsQlFVa3NVMEZCVXl4RFFVRkRMRk5CUVZNc1NVRkJTU3hUUVVGVExFTkJRVU1zVTBGQlV5eERRVUZETEZkQlFWY3NSVUZCUlN4RFFVRkRMRXRCUVVzc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4RlFVRkZPMGRCUTJoSkxFOUJRVThzUzBGQlN5eERRVUZETzBkQlEySTdRVUZEUmp0QlFVTkJPMEZCUTBFN1JVRkRReXhQUVVGUExFTkJRVU1zVDBGQlR5eFJRVUZSTEV0QlFVc3NWMEZCVnl4SlFVRkpMRkZCUVZFc1EwRkJReXhsUVVGbExFbEJRVWtzVVVGQlVTeERRVUZETEdWQlFXVXNRMEZCUXl4TFFVRkxMRWxCUVVrc1VVRkJVU3hEUVVGRExHVkJRV1VzUTBGQlF5eExRVUZMTEVOQlFVTXNaMEpCUVdkQ08wRkJRM3BLTzBGQlEwRXNTVUZCUnl4UFFVRlBMRTFCUVUwc1MwRkJTeXhYUVVGWExFbEJRVWtzVFVGQlRTeERRVUZETEU5QlFVOHNTMEZCU3l4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFOUJRVThzUzBGQlN5eE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRk5CUVZNc1NVRkJTU3hOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRja2s3UVVGRFFUdEJRVU5CTEVsQlFVY3NUMEZCVHl4VFFVRlRMRXRCUVVzc1YwRkJWeXhKUVVGSkxGTkJRVk1zUTBGQlF5eFRRVUZUTEVsQlFVa3NVMEZCVXl4RFFVRkRMRk5CUVZNc1EwRkJReXhYUVVGWExFVkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zU1VGQlNTeFJRVUZSTEVOQlFVTXNUVUZCVFN4RFFVRkRMRVZCUVVVc1JVRkJSU3hGUVVGRkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTTdRVUZEZWtvN1NVRkRSeXhQUVVGUExGTkJRVk1zUzBGQlN5eFhRVUZYTEVsQlFVa3NVMEZCVXl4RFFVRkRMRk5CUVZNc1NVRkJTU3hUUVVGVExFTkJRVU1zVTBGQlV5eERRVUZETEZkQlFWY3NSVUZCUlN4RFFVRkRMRXRCUVVzc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4RFFVRkRMRU5CUVVNN1JVRkROVWc3UVVGRFJEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHREUVVOQkxGTkJRVk1zVlVGQlZTeERRVUZETEVsQlFVa3NSVUZCUlR0QlFVTXhRaXhGUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFZEJRVWNzU1VGQlNTeEhRVUZITEVWQlFVVTdSMEZEY0VNc1NVRkJTU3hEUVVGRExGTkJRVk03UVVGRGFFSXNTVUZCUnl4SlFVRkpMRU5CUVVNc1UwRkJVeXhIUVVGSExFdEJRVXNzUjBGQlJ5eEhRVUZITEVOQlFVTTdSMEZET1VJc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU5VTEVsQlFVY3NTVUZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhMUVVGTExFZEJRVWNzUjBGQlJ5eERRVUZETzBGQlEyaERMRWRCUVVVc1IwRkJSeXhIUVVGSExFMUJRVTBzUTBGQlF5eFBRVUZQTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU16UXp0QlFVTkJMRVZCUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVWQlFVVTdRVUZEZEVJc1IwRkJSU3hQUVVGUE8wZEJRMUE3UVVGRFJqdEZRVU5ETEUxQlFVMHNRMEZCUXl4SFFVRkhMRk5CUVZNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETzBGQlEyeERMRVZCUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3huUWtGQlowSXNRMEZCUXl4RFFVRkRPMEZCUTNoRE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSVUZCUXl4SlFVRkpMRXRCUVVzc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRFppeEZRVUZETEVsQlFVa3NTMEZCU3l4SFFVRkhMRU5CUVVNc1EwRkJRenRGUVVOa0xFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1lVRkJZU3hGUVVGRkxFdEJRVXNzU1VGQlNUdEJRVU42UXl4SFFVRkZMRWxCUVVrc1MwRkJTeXhMUVVGTExFbEJRVWtzUlVGQlJUdEJRVU4wUWl4SlFVRkhMRTlCUVU4N1NVRkRVRHRIUVVORUxFdEJRVXNzUlVGQlJTeERRVUZETzBGQlExWXNSMEZCUlN4SlFVRkpMRXRCUVVzc1MwRkJTeXhKUVVGSkxFVkJRVVU3UVVGRGRFSTdRVUZEUVR0SlFVTkhMRXRCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU03U1VGRFpEdEJRVU5JTEVkQlFVVXNRMEZCUXl4RFFVRkRPMEZCUTBvN1JVRkRReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03UlVGRGVrSTdRVUZEUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRMEZEUVN4UFFVRmpMRU5CUVVFc1IwRkJRU3hIUVVGQkxFOUJRVThzUTBGQlF5eExRVUZMTEVsQlFVa3NUMEZCVHl4RFFVRkRMRWRCUVVjc1MwRkJTeXhOUVVGTkxFVkJRVVVzUTBGQlF5eERRVUZETzBGQlEzcEVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBOQlEwRXNVMEZCVXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVGRk8wRkJRekZDTEVWQlFVTXNTVUZCU1R0SFFVTklMRWxCUVVrc1ZVRkJWU3hGUVVGRk8wbEJRMllzVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc1QwRkJUeXhGUVVGRkxGVkJRVlVzUTBGQlF5eERRVUZETzBGQlEyaEVMRWxCUVVjc1RVRkJUVHRKUVVOT0xFOUJRVThzUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8wbEJRM0JETzBkQlEwUXNRMEZCUXl4UFFVRlBMRXRCUVVzc1JVRkJSVHRCUVVOcVFqdEJRVU5CTzBkQlEwVTdSVUZEUkR0QlFVTkVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNRMEZCUVN4VFFVRlRMRWxCUVVrc1IwRkJSenRGUVVObUxFbEJRVWtzUTBGQlF5eERRVUZETzBGQlExQXNSVUZCUXl4SlFVRkpPMGRCUTBnc1EwRkJReXhIUVVGSExFOUJRVThzUTBGQlF5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8wZEJRM0pETEVOQlFVTXNUMEZCVHl4TFFVRkxMRVZCUVVVN1FVRkRha0k3UVVGRFFUdEhRVU5GTzBGQlEwWTdRVUZEUVR0QlFVTkJMRVZCUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zU1VGQlNTeFBRVUZQTEU5QlFVOHNTMEZCU3l4WFFVRlhMRWxCUVVrc1MwRkJTeXhKUVVGSkxFOUJRVThzUlVGQlJUdEJRVU12UkN4SFFVRkZMRU5CUVVNc1IwRkJSeXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXp0SFFVTjBRanRCUVVOR08wVkJRME1zVDBGQlR5eERRVUZETEVOQlFVTTdSVUZEVkR0QlFVTkVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFTkJRVUVzVTBGQlV5eFpRVUZaTEVkQlFVYzdRVUZEZUVJc1JVRkJReXhKUVVGSk8wRkJRMHc3UVVGRFFUdEhRVU5GTEU5QlFVOHNXVUZCV1N4RFFVRkRPMGRCUTNCQ0xFTkJRVU1zVDBGQlR5eExRVUZMTEVWQlFVVTdRVUZEYWtJN1FVRkRRVHRIUVVORk8wVkJRMFE3UVVGRFJEdEJRVU5CTEVOQlFVRXNUVUZCUVN4RFFVRkJMRTlCUVVFc1IwRkJhVUpCTEUxQlFXMUNMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03UVVGRE9VTTdRVUZEUVN4RFFVRkJMRTFCUVUwc1EwRkJReXhWUVVGVkxFTkJRVU1zUjBGQlJ5eE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRPMEZCUTNCRE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4RFFVRkJMRlZCUVZVc1EwRkJReXhEUVVGRExFZEJRVWNzVlVGQlZTeERRVUZETEVWQlFVVTdRVUZETlVJc1JVRkJReXhKUVVGSk8wRkJRMHdzUjBGQlJTeFBRVUZQTEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03UjBGRGVrSXNRMEZCUXl4UFFVRlBMRXRCUVVzc1JVRkJSVHRCUVVOcVFpeEhRVUZGTEU5QlFVOHNPRUpCUVRoQ0xFZEJRVWNzUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXp0SFFVTjBSRHRGUVVORUxFTkJRVUU3T3pzN08wRkROVkZFT3pzN096czdPMEZCVDBjN1FVRkpSeXhOUVVGUExIZENRVUY1UWl4VFFVRlJMRXRCUVVzc1EwRkJRVHRCUVVOcVJDeEpRVUZCTEZkQlFVRXNSMEZCUVR0UlFVTkZMRXRCUVVzc1EwRkRTQ3g1U0VGQmVVZ3NRMEZETVVnc1EwRkJRenRSUVVOR0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhKUVVGSkxFTkJRVU03UzBGRGJrTTdRVUZEUml4RFFVRkJPMEZCWjBKTExFMUJRVThzZDBKQlFYbENMRk5CUVZFc1MwRkJTeXhEUVVGQk8wRkJTMnBFTEVsQlFVRXNWMEZCUVN4RFFVRlpMRWRCUVZjc1JVRkJSU3hIUVVGdlFpeEZRVUZGTEU5QlFYTkNMRVZCUVVFN1FVRkRia1VzVVVGQlFTeExRVUZMTEVOQlFVTXNRMEZCYlVNc1owTkJRVUVzUlVGQlFTeEhRVUZITEVWQlFVVXNSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJRenRSUVVONlJDeEpRVUZKTEVOQlFVTXNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZETzBGQlEyeERMRkZCUVVFc1NVRkJTU3hEUVVGRExFZEJRVWNzUjBGQlJ5eEhRVUZITEVOQlFVTTdRVUZEWml4UlFVRkJMRWxCUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzUjBGQlJ5eERRVUZETzB0QlEzSkNPMEZCUTBZc1EwRkJRVHRCUVVWTExFMUJRVThzYVVKQlFXdENMRk5CUVZFc1MwRkJTeXhEUVVGQk8wRkJRekZETEVsQlFVRXNWMEZCUVN4SFFVRkJPMUZCUTBVc1MwRkJTeXhEUVVGRExFTkJRWE5DTEc5Q1FVRkJMRU5CUVVFc1EwRkJReXhEUVVGRE8xRkJRemxDTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eEpRVUZKTEVOQlFVTTdTMEZEYmtNN1FVRkRSaXhEUVVGQk8wRkJSVXNzVFVGQlR5eHZRa0ZCY1VJc1UwRkJVU3hMUVVGTExFTkJRVUU3UVVGSE4wTXNTVUZCUVN4WFFVRkJMRU5CUVZrc1VVRkJaMElzUlVGQlFUdFJRVU14UWl4TFFVRkxMRU5CUVVNc1EwRkJhME1zWjBOQlFVRXNRMEZCUVN4RFFVRkRMRU5CUVVNN1VVRkRNVU1zU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFbEJRVWtzUTBGQlF6dEJRVU5zUXl4UlFVRkJMRWxCUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzVVVGQlVTeERRVUZETzB0QlF6RkNPMEZCUTBZc1EwRkJRVHRCUVVWTExFMUJRVThzWVVGQll5eFRRVUZSTEV0QlFVc3NRMEZCUVR0QlFVdDBReXhKUVVGQkxGZEJRVUVzUTBGQldTeEhRVUZYTEVWQlFVVXNSMEZCYjBJc1JVRkJSU3hQUVVGelFpeEZRVUZCTzBGQlEyNUZMRkZCUVVFc1MwRkJTeXhEUVVGRExFTkJRV2xETERoQ1FVRkJMRVZCUVVFc1IwRkJSeXhGUVVGRkxFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTTdVVUZEZGtRc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWxCUVVrc1EwRkJRenRCUVVOc1F5eFJRVUZCTEVsQlFVa3NRMEZCUXl4SFFVRkhMRWRCUVVjc1IwRkJSeXhEUVVGRE8wRkJRMllzVVVGQlFTeEpRVUZKTEVOQlFVTXNVVUZCVVN4SFFVRkhMRWRCUVVjc1EwRkJRenRMUVVOeVFqdEJRVU5HTEVOQlFVRTdRVUZYU3l4TlFVRlBMREJDUVVFeVFpeFRRVUZSTEV0QlFVc3NRMEZCUVR0QlFVTnVSQ3hKUVVGQkxGZEJRVUVzUjBGQlFUdFJRVU5GTEV0QlFVc3NRMEZCUXl4RFFVRTBSQ3d3UkVGQlFTeERRVUZCTEVOQlFVTXNRMEZCUXp0UlFVTndSU3hKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRE8wdEJRMjVETzBGQlEwWXNRMEZCUVR0QlFVVkxMRTFCUVU4c2EwSkJRVzFDTEZOQlFWRXNTMEZCU3l4RFFVRkJPMEZCU3pORExFbEJRVUVzVjBGQlFTeERRVUZaTEdGQlFUUkNMRWxCUVVrc1JVRkJRVHRCUVVNeFF5eFJRVUZCTEVsQlFVa3NWVUZCVlN4RlFVRkZPMWxCUTJRc1MwRkJTeXhEUVVGRExFZEJRVWNzYTBKQlFXdENMRU5CUVVNc1YwRkJWeXhEUVVGUkxFdEJRVUVzUlVGQlFTeFZRVUZWTEVOQlFVVXNRMEZCUVN4RFFVRkRMRU5CUVVNN1FVRkRPVVFzVTBGQlFUdEJRVUZOTEdGQlFVRTdRVUZEVEN4WlFVRkJMRXRCUVVzc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRenRCUVVOMlF5eFRRVUZCTzFGQlEwUXNTVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEVsQlFVa3NRMEZCUXp0QlFVTnNReXhSUVVGQkxFbEJRVWtzUTBGQlF5eFZRVUZWTEVkQlFVY3NWVUZCVlN4RFFVRkRPMHRCUXpsQ096dEJRVlpOTEd0Q1FVRlhMRU5CUVVFc1YwRkJRU3hIUVVGSExEQkRRVUV3UXl4RFFVRkRPMEZCWVRWRUxFMUJRVThzTWtKQlFUUkNMRk5CUVZFc1MwRkJTeXhEUVVGQk8wRkJSM0JFTEVsQlFVRXNWMEZCUVN4RFFVRlpMR2RDUVVGM1FpeEZRVUZCTzBGQlEyeERMRkZCUVVFc1MwRkJTeXhEUVVGRExFTkJRVUVzTmtOQlFVRXNSVUZCWjBRc1owSkJRV2RDTEVOQlFVRXNRMEZCUlN4RFFVRkRMRU5CUVVNN1VVRkRNVVVzU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFbEJRVWtzUTBGQlF6dEJRVU5zUXl4UlFVRkJMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNSMEZCUnl4blFrRkJaMElzUTBGQlF6dExRVU14UXp0QlFVTkdMRU5CUVVFN1FVRkZTeXhOUVVGUExHZENRVUZwUWl4VFFVRlJMRXRCUVVzc1EwRkJRVHRCUVVONlF5eEpRVUZCTEZkQlFVRXNRMEZCV1N4UFFVRnpRaXhGUVVGQk8wRkJRMmhETEZGQlFVRXNTMEZCU3l4RFFVRkRMRU5CUVVFc2IwSkJRVUVzUTBGQmMwSXNSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJRenRSUVVOMlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZETzB0QlEyNURPMEZCUTBZc1EwRkJRVHRCUVdkQ1N5eE5RVUZQTEdkQ1FVRnBRaXhUUVVGUkxFdEJRVXNzUTBGQlFUdEJRVU42UXl4SlFVRkJMRmRCUVVFc1EwRkJXU3hQUVVGelFpeEZRVUZCTzBGQlEyaERMRkZCUVVFc1MwRkJTeXhEUVVGRExFTkJRVUVzTmtKQlFVRXNRMEZCSzBJc1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlF6dFJRVU5vUkN4SlFVRkpMRU5CUVVNc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNTVUZCU1N4RFFVRkRPMHRCUTI1RE8wRkJRMFlzUTBGQlFUdEJRVVZMTEUxQlFVOHNhVUpCUVd0Q0xGTkJRVkVzUzBGQlN5eERRVUZCTzBGQlF6RkRMRWxCUVVFc1YwRkJRU3hEUVVGWkxFOUJRWE5DTEVWQlFVRTdRVUZEYUVNc1VVRkJRU3hMUVVGTExFTkJRVU1zUTBGQlFTdzJRa0ZCUVN4RFFVRXJRaXhGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZETzFGQlEyaEVMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4SlFVRkpMRU5CUVVNN1MwRkRia003UVVGRFJpeERRVUZCTzBGQlJVc3NUVUZCVHl4eFFrRkJjMElzVTBGQlVTeExRVUZMTEVOQlFVRTdRVUZET1VNc1NVRkJRU3hYUVVGQkxFTkJRVmtzVDBGQmMwSXNSVUZCUVR0QlFVTm9ReXhSUVVGQkxFdEJRVXNzUTBGQlF5eERRVUZCTEc5RFFVRkJMRU5CUVhORExFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTTdVVUZEZGtRc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWxCUVVrc1EwRkJRenRMUVVOdVF6dEJRVU5HTEVOQlFVRTdRVUZGU3l4TlFVRlBMREpDUVVFMFFpeFRRVUZSTEV0QlFVc3NRMEZCUVR0QlFVTndSQ3hKUVVGQkxGZEJRVUVzUTBGQldTeFBRVUZ6UWl4RlFVRkJPMEZCUTJoRExGRkJRVUVzUzBGQlN5eERRVU5JTEVOQlFVRXNlVWRCUVVFc1EwRkJNa2NzUlVGRE0wY3NUMEZCVHl4RFFVTlNMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRE8wdEJRMjVETzBGQlEwWXNRMEZCUVR0QlFVVkxMRTFCUVU4c01FSkJRVEpDTEZOQlFWRXNTMEZCU3l4RFFVRkJPMGxCUjI1RUxGZEJRVmtzUTBGQlFTeFZRVUZ6UWl4RlFVRkZMRTlCUVhOQ0xFVkJRVUU3UVVGRGVFUXNVVUZCUVN4TFFVRkxMRU5CUVVNc1EwRkJRU3dyUTBGQlFTeERRVUZwUkN4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRE8xRkJRMnhGTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eEpRVUZKTEVOQlFVTTdRVUZEYkVNc1VVRkJRU3hKUVVGSkxFTkJRVU1zVlVGQlZTeEhRVUZITEZWQlFWVXNRMEZCUXp0TFFVTTVRanRCUVVOR096dEJRMjVNUkRzN096czdPenRCUVU5SE8wRkJTVWdzVFVGQlRTeGxRVUZsTEVkQlFVYzdTVUZEZEVJc1lVRkJZVHRKUVVOaUxFMUJRVTA3U1VGRFRpeFpRVUZaTzBsQlExb3NZMEZCWXp0SlFVTmtMRmxCUVZrN1NVRkRXaXhoUVVGaE8wbEJRMklzVDBGQlR6dERRVU5TTEVOQlFVTTdRVUZGUmpzN096czdRVUZMUnp0VFFVTmhMRmxCUVZrc1IwRkJRVHRCUVVNeFFpeEpRVUZCTEU5QlFVOHNaVUZCWlN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkRha1FzUTBGQlF6dEJRVVZFT3p0QlFVVkhPMU5CUTJFc2JVSkJRVzFDTEVkQlFVRTdTVUZEYWtNc1NVRkJTU3hEUVVGRExGbEJRVmtzUlVGQlJTeEZRVUZGTzFGQlEyNUNMRTFCUVUwc1NVRkJTU3gzUWtGQmQwSXNSVUZCUlN4RFFVRkRPMEZCUTNSRExFdEJRVUU3UVVGRFNEczdRVU4wUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRWE5SUVR0QlFVTlBMRk5CUVZNc2MwSkJRWE5DTEVOQlFVTXNVVUZCVVN4RlFVRkZMRXRCUVVzc1JVRkJSU3hKUVVGSkxFVkJRVVVzUTBGQlF5eEZRVUZGTzBGQlEycEZMRWxCUVVrc1NVRkJTU3hKUVVGSkxFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RlFVRkZMRTFCUVUwc1NVRkJTU3hUUVVGVExFTkJRVU1zSzBOQlFTdERMRU5CUVVNc1EwRkJRenRCUVVOcVJ5eEpRVUZKTEVsQlFVa3NUMEZCVHl4TFFVRkxMRXRCUVVzc1ZVRkJWU3hIUVVGSExGRkJRVkVzUzBGQlN5eExRVUZMTEVsQlFVa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEZGQlFWRXNRMEZCUXl4RlFVRkZMRTFCUVUwc1NVRkJTU3hUUVVGVExFTkJRVU1zTUVWQlFUQkZMRU5CUVVNc1EwRkJRenRCUVVOMlRDeEpRVUZKTEU5QlFVOHNTVUZCU1N4TFFVRkxMRWRCUVVjc1IwRkJSeXhEUVVGRExFZEJRVWNzU1VGQlNTeExRVUZMTEVkQlFVY3NSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1MwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1FVRkRiRWNzUTBGQlF6dEJRVU5FTzBGQlEwOHNVMEZCVXl4elFrRkJjMElzUTBGQlF5eFJRVUZSTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hKUVVGSkxFVkJRVVVzUTBGQlF5eEZRVUZGTzBGQlEzaEZMRWxCUVVrc1NVRkJTU3hKUVVGSkxFdEJRVXNzUjBGQlJ5eEZRVUZGTEUxQlFVMHNTVUZCU1N4VFFVRlRMRU5CUVVNc1owTkJRV2RETEVOQlFVTXNRMEZCUXp0QlFVTTFSU3hKUVVGSkxFbEJRVWtzU1VGQlNTeExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMRU5CUVVNc1JVRkJSU3hOUVVGTkxFbEJRVWtzVTBGQlV5eERRVUZETEN0RFFVRXJReXhEUVVGRExFTkJRVU03UVVGRGFrY3NTVUZCU1N4SlFVRkpMRTlCUVU4c1MwRkJTeXhMUVVGTExGVkJRVlVzUjBGQlJ5eFJRVUZSTEV0QlFVc3NTMEZCU3l4SlFVRkpMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4UlFVRlJMRU5CUVVNc1JVRkJSU3hOUVVGTkxFbEJRVWtzVTBGQlV5eERRVUZETEhsRlFVRjVSU3hEUVVGRExFTkJRVU03UVVGRGRFd3NTVUZCU1N4UFFVRlBMRU5CUVVNc1NVRkJTU3hMUVVGTExFZEJRVWNzUjBGQlJ5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSU3hMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRXRCUVVzc1IwRkJSeXhMUVVGTExFZEJRVWNzUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4UlFVRlJMRVZCUVVVc1MwRkJTeXhEUVVGRExFZEJRVWNzUzBGQlN5eERRVUZETzBGQlF6bEhPenM3T3pzN096czdPMEZEZUZKQkxGTkJRVk5ETEdkQ1FVRmpMRWRCUVVjN1FVRkRNVUlzUlVGQlJTeEpRVUZKTEVOQlFVTXNVVUZCVVN4SFFVRkhMRVZCUVVVc1EwRkJRenRCUVVOeVFpeEZRVUZGTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRMmhDTEVOQlFVTTdRVUZEUkR0QlFVTkJMRWxCUVVFc1pVRkJZeXhIUVVGSFFTeG5Ra0ZCWXpzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOdlFpOUNMRk5CUVZORExFbEJRVVVzUTBGQlF5eExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZPMEZCUXpGQ0xFVkJRVVVzVDBGQlR5eExRVUZMTEV0QlFVc3NTMEZCU3l4TFFVRkxMRXRCUVVzc1MwRkJTeXhMUVVGTExFbEJRVWtzUzBGQlN5eExRVUZMTEV0QlFVc3NRMEZCUXl4RFFVRkRPMEZCUTJwRkxFTkJRVU03UVVGRFJEdEJRVU5CTEVsQlFVRXNTVUZCWXl4SFFVRkhRU3hKUVVGRk96dEJRM0JEYmtJc1NVRkJTVUVzU1VGQlJTeEhRVUZIUml4SlFVRmxMRU5CUVVNN1FVRkRla0k3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVTBGQlUwY3NZMEZCV1N4RFFVRkRMRXRCUVVzc1JVRkJSU3hIUVVGSExFVkJRVVU3UVVGRGJFTXNSVUZCUlN4SlFVRkpMRTFCUVUwc1IwRkJSeXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZETzBGQlF6VkNMRVZCUVVVc1QwRkJUeXhOUVVGTkxFVkJRVVVzUlVGQlJUdEJRVU51UWl4SlFVRkpMRWxCUVVsRUxFbEJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUjBGQlJ5eERRVUZETEVWQlFVVTdRVUZEYmtNc1RVRkJUU3hQUVVGUExFMUJRVTBzUTBGQlF6dEJRVU53UWl4TFFVRkxPMEZCUTB3c1IwRkJSenRCUVVOSUxFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTmFMRU5CUVVNN1FVRkRSRHRCUVVOQkxFbEJRVUVzWVVGQll5eEhRVUZIUXl4alFVRlpPenRCUTNCQ04wSXNTVUZCU1VFc1kwRkJXU3hIUVVGSFNDeGhRVUV3UWl4RFFVRkRPMEZCUXpsRE8wRkJRMEU3UVVGRFFTeEpRVUZKTEZWQlFWVXNSMEZCUnl4TFFVRkxMRU5CUVVNc1UwRkJVeXhEUVVGRE8wRkJRMnBETzBGQlEwRTdRVUZEUVN4SlFVRkpMRTFCUVUwc1IwRkJSeXhWUVVGVkxFTkJRVU1zVFVGQlRTeERRVUZETzBGQlF5OUNPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVMGtzYVVKQlFXVXNRMEZCUXl4SFFVRkhMRVZCUVVVN1FVRkRPVUlzUlVGQlJTeEpRVUZKTEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1VVRkJVVHRCUVVNeFFpeE5RVUZOTEV0QlFVc3NSMEZCUjBRc1kwRkJXU3hEUVVGRExFbEJRVWtzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTjBRenRCUVVOQkxFVkJRVVVzU1VGQlNTeExRVUZMTEVkQlFVY3NRMEZCUXl4RlFVRkZPMEZCUTJwQ0xFbEJRVWtzVDBGQlR5eExRVUZMTEVOQlFVTTdRVUZEYWtJc1IwRkJSenRCUVVOSUxFVkJRVVVzU1VGQlNTeFRRVUZUTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRGJFTXNSVUZCUlN4SlFVRkpMRXRCUVVzc1NVRkJTU3hUUVVGVExFVkJRVVU3UVVGRE1VSXNTVUZCU1N4SlFVRkpMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU03UVVGRFppeEhRVUZITEUxQlFVMDdRVUZEVkN4SlFVRkpMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEV0QlFVc3NSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOb1F5eEhRVUZITzBGQlEwZ3NSVUZCUlN4RlFVRkZMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU03UVVGRFpDeEZRVUZGTEU5QlFVOHNTVUZCU1N4RFFVRkRPMEZCUTJRc1EwRkJRenRCUVVORU8wRkJRMEVzU1VGQlFTeG5Ra0ZCWXl4SFFVRkhReXhwUWtGQlpUczdRVU5zUTJoRExFbEJRVWxFTEdOQlFWa3NSMEZCUjBnc1lVRkJNRUlzUTBGQlF6dEJRVU01UXp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRk5CUVZOTExHTkJRVmtzUTBGQlF5eEhRVUZITEVWQlFVVTdRVUZETTBJc1JVRkJSU3hKUVVGSkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVVUZCVVR0QlFVTXhRaXhOUVVGTkxFdEJRVXNzUjBGQlIwWXNZMEZCV1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU4wUXp0QlFVTkJMRVZCUVVVc1QwRkJUeXhMUVVGTExFZEJRVWNzUTBGQlF5eEhRVUZITEZOQlFWTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEYUVRc1EwRkJRenRCUVVORU8wRkJRMEVzU1VGQlFTeGhRVUZqTEVkQlFVZEZMR05CUVZrN08wRkRiRUkzUWl4SlFVRkpSaXhqUVVGWkxFZEJRVWRJTEdGQlFUQkNMRU5CUVVNN1FVRkRPVU03UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFRRVUZUVFN4alFVRlpMRU5CUVVNc1IwRkJSeXhGUVVGRk8wRkJRek5DTEVWQlFVVXNUMEZCVDBnc1kwRkJXU3hEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNSMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU03UVVGREwwTXNRMEZCUXp0QlFVTkVPMEZCUTBFc1NVRkJRU3hoUVVGakxFZEJRVWRITEdOQlFWazdPMEZEWmpkQ0xFbEJRVWtzV1VGQldTeEhRVUZIVGl4aFFVRXdRaXhEUVVGRE8wRkJRemxETzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRUeXhqUVVGWkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEV0QlFVc3NSVUZCUlR0QlFVTnNReXhGUVVGRkxFbEJRVWtzU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4UlFVRlJPMEZCUXpGQ0xFMUJRVTBzUzBGQlN5eEhRVUZITEZsQlFWa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRGRFTTdRVUZEUVN4RlFVRkZMRWxCUVVrc1MwRkJTeXhIUVVGSExFTkJRVU1zUlVGQlJUdEJRVU5xUWl4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF6dEJRVU5vUWl4SlFVRkpMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVNMVFpeEhRVUZITEUxQlFVMDdRVUZEVkN4SlFVRkpMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNN1FVRkRNMElzUjBGQlJ6dEJRVU5JTEVWQlFVVXNUMEZCVHl4SlFVRkpMRU5CUVVNN1FVRkRaQ3hEUVVGRE8wRkJRMFE3UVVGRFFTeEpRVUZCTEdGQlFXTXNSMEZCUjBFc1kwRkJXVHM3UVVONlFqZENMRWxCUVVrc1kwRkJZeXhIUVVGSFVDeGxRVUUwUWp0QlFVTnFSQ3hKUVVGSkxHVkJRV1VzUjBGQlIxRXNaMEpCUVRaQ08wRkJRMjVFTEVsQlFVa3NXVUZCV1N4SFFVRkhReXhoUVVFd1FqdEJRVU0zUXl4SlFVRkpMRmxCUVZrc1IwRkJSME1zWVVGQk1FSTdRVUZETjBNc1NVRkJTU3haUVVGWkxFZEJRVWRETEdGQlFUQkNMRU5CUVVNN1FVRkRPVU03UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk5ETEZkQlFWTXNRMEZCUXl4UFFVRlBMRVZCUVVVN1FVRkROVUlzUlVGQlJTeEpRVUZKTEV0QlFVc3NSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRhRUlzVFVGQlRTeE5RVUZOTEVkQlFVY3NUMEZCVHl4SlFVRkpMRWxCUVVrc1IwRkJSeXhEUVVGRExFZEJRVWNzVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXp0QlFVTndSRHRCUVVOQkxFVkJRVVVzU1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRPMEZCUTJZc1JVRkJSU3hQUVVGUExFVkJRVVVzUzBGQlN5eEhRVUZITEUxQlFVMHNSVUZCUlR0QlFVTXpRaXhKUVVGSkxFbEJRVWtzUzBGQlN5eEhRVUZITEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRCUVVNdlFpeEpRVUZKTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRMnBETEVkQlFVYzdRVUZEU0N4RFFVRkRPMEZCUTBRN1FVRkRRVHRCUVVOQlFTeFhRVUZUTEVOQlFVTXNVMEZCVXl4RFFVRkRMRXRCUVVzc1IwRkJSeXhqUVVGakxFTkJRVU03UVVGRE0wTkJMRmRCUVZNc1EwRkJReXhUUVVGVExFTkJRVU1zVVVGQlVTeERRVUZETEVkQlFVY3NaVUZCWlN4RFFVRkRPMEZCUTJoRVFTeFhRVUZUTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVjc1IwRkJSeXhaUVVGWkxFTkJRVU03UVVGRGRrTkJMRmRCUVZNc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eEhRVUZITEZsQlFWa3NRMEZCUXp0QlFVTjJRMEVzVjBGQlV5eERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRWRCUVVjc1dVRkJXU3hEUVVGRE8wRkJRM1pETzBGQlEwRXNTVUZCUVN4VlFVRmpMRWRCUVVkQkxGZEJRVk03TzBGREwwSXhRaXhKUVVGSlFTeFhRVUZUTEVkQlFVZGFMRlZCUVhWQ0xFTkJRVU03UVVGRGVFTTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZOQlFWTmhMRmxCUVZVc1IwRkJSenRCUVVOMFFpeEZRVUZGTEVsQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1NVRkJTVVFzVjBGQlV5eERRVUZETzBGQlEyaERMRVZCUVVVc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEYUVJc1EwRkJRenRCUVVORU8wRkJRMEVzU1VGQlFTeFhRVUZqTEVkQlFVZERMRmxCUVZVN096czdPenM3T3pzN096dEJRMHd6UWl4VFFVRlRReXhoUVVGWExFTkJRVU1zUjBGQlJ5eEZRVUZGTzBGQlF6RkNMRVZCUVVVc1NVRkJTU3hKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEZGQlFWRTdRVUZETVVJc1RVRkJUU3hOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRMjVETzBGQlEwRXNSVUZCUlN4SlFVRkpMRU5CUVVNc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTTdRVUZEZUVJc1JVRkJSU3hQUVVGUExFMUJRVTBzUTBGQlF6dEJRVU5vUWl4RFFVRkRPMEZCUTBRN1FVRkRRU3hKUVVGQkxGbEJRV01zUjBGQlIwRXNZVUZCVnpzN096czdPenM3T3pzN08wRkRValZDTEZOQlFWTkRMRlZCUVZFc1EwRkJReXhIUVVGSExFVkJRVVU3UVVGRGRrSXNSVUZCUlN4UFFVRlBMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUTJoRExFTkJRVU03UVVGRFJEdEJRVU5CTEVsQlFVRXNVMEZCWXl4SFFVRkhRU3hWUVVGUk96czdPenM3T3pzN096czdRVU5LZWtJc1UwRkJVME1zVlVGQlVTeERRVUZETEVkQlFVY3NSVUZCUlR0QlFVTjJRaXhGUVVGRkxFOUJRVThzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRGFFTXNRMEZCUXp0QlFVTkVPMEZCUTBFc1NVRkJRU3hUUVVGakxFZEJRVWRCTEZWQlFWRTdPenM3UVVOYWVrSXNTVUZCU1VNc1dVRkJWU3hIUVVGSExFOUJRVTlETEdOQlFVMHNTVUZCU1N4UlFVRlJMRWxCUVVsQkxHTkJRVTBzU1VGQlNVRXNZMEZCVFN4RFFVRkRMRTFCUVUwc1MwRkJTeXhOUVVGTkxFbEJRVWxCTEdOQlFVMHNRMEZCUXp0QlFVTXpSanRCUVVOQkxFbEJRVUVzVjBGQll5eEhRVUZIUkN4WlFVRlZPenRCUTBnelFpeEpRVUZKTEZWQlFWVXNSMEZCUjJwQ0xGZEJRWGRDTEVOQlFVTTdRVUZETVVNN1FVRkRRVHRCUVVOQkxFbEJRVWtzVVVGQlVTeEhRVUZITEU5QlFVOHNTVUZCU1N4SlFVRkpMRkZCUVZFc1NVRkJTU3hKUVVGSkxFbEJRVWtzU1VGQlNTeERRVUZETEUxQlFVMHNTMEZCU3l4TlFVRk5MRWxCUVVrc1NVRkJTU3hEUVVGRE8wRkJRMnBHTzBGQlEwRTdRVUZEUVN4SlFVRkpiVUlzVFVGQlNTeEhRVUZITEZWQlFWVXNTVUZCU1N4UlFVRlJMRWxCUVVrc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eEZRVUZGTEVOQlFVTTdRVUZETDBRN1FVRkRRU3hKUVVGQkxFdEJRV01zUjBGQlIwRXNUVUZCU1RzN096czdPenM3UTBOU2NrSXNTVUZCU1N4SlFVRkpMRWRCUVVkdVFpeExRVUZyUWl4RFFVRkRPMEZCUXpsQ08wRkJRMEU3UVVGRFFTeERRVUZCTEVsQlFVa3NUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU03UVVGRGVrSTdRVUZEUVN4RFFVRkJMRTlCUVdNc1IwRkJSeXhOUVVGTkxFTkJRVUU3T3pzN1FVTk1ka0lzU1VGQlNXOUNMRkZCUVUwc1IwRkJSM0JDTEdOQlFVRXNSVUZCYjBJc1EwRkJRenRCUVVOc1F6dEJRVU5CTzBGQlEwRXNTVUZCU1hGQ0xHRkJRVmNzUjBGQlJ5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRPMEZCUTI1RE8wRkJRMEU3UVVGRFFTeEpRVUZKUXl4blFrRkJZeXhIUVVGSFJDeGhRVUZYTEVOQlFVTXNZMEZCWXl4RFFVRkRPMEZCUTJoRU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWxCUVVsRkxITkNRVUZ2UWl4SFFVRkhSaXhoUVVGWExFTkJRVU1zVVVGQlVTeERRVUZETzBGQlEyaEVPMEZCUTBFN1FVRkRRU3hKUVVGSlJ5eG5Ra0ZCWXl4SFFVRkhTaXhSUVVGTkxFZEJRVWRCTEZGQlFVMHNRMEZCUXl4WFFVRlhMRWRCUVVjc1UwRkJVeXhEUVVGRE8wRkJRemRFTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFRRVUZUU3l4WFFVRlRMRU5CUVVNc1MwRkJTeXhGUVVGRk8wRkJRekZDTEVWQlFVVXNTVUZCU1N4TFFVRkxMRWRCUVVkSUxHZENRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1JVRkJSVVVzWjBKQlFXTXNRMEZCUXp0QlFVTjRSQ3hOUVVGTkxFZEJRVWNzUjBGQlJ5eExRVUZMTEVOQlFVTkJMR2RDUVVGakxFTkJRVU1zUTBGQlF6dEJRVU5zUXp0QlFVTkJMRVZCUVVVc1NVRkJTVHRCUVVOT0xFbEJRVWtzUzBGQlN5eERRVUZEUVN4blFrRkJZeXhEUVVGRExFZEJRVWNzVTBGQlV5eERRVUZETzBGQlEzUkRMRWxCUVVrc1NVRkJTU3hSUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZETzBGQlEzaENMRWRCUVVjc1EwRkJReXhQUVVGUExFTkJRVU1zUlVGQlJTeEZRVUZGTzBGQlEyaENPMEZCUTBFc1JVRkJSU3hKUVVGSkxFMUJRVTBzUjBGQlIwUXNjMEpCUVc5Q0xFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMEZCUTJoRUxFVkJRVVVzU1VGQlNTeFJRVUZSTEVWQlFVVTdRVUZEYUVJc1NVRkJTU3hKUVVGSkxFdEJRVXNzUlVGQlJUdEJRVU5tTEUxQlFVMHNTMEZCU3l4RFFVRkRReXhuUWtGQll5eERRVUZETEVkQlFVY3NSMEZCUnl4RFFVRkRPMEZCUTJ4RExFdEJRVXNzVFVGQlRUdEJRVU5ZTEUxQlFVMHNUMEZCVHl4TFFVRkxMRU5CUVVOQkxHZENRVUZqTEVOQlFVTXNRMEZCUXp0QlFVTnVReXhMUVVGTE8wRkJRMHdzUjBGQlJ6dEJRVU5JTEVWQlFVVXNUMEZCVHl4TlFVRk5MRU5CUVVNN1FVRkRhRUlzUTBGQlF6dEJRVU5FTzBGQlEwRXNTVUZCUVN4VlFVRmpMRWRCUVVkRExGZEJRVk03T3pzN1FVTTFRekZDTEVsQlFVbEtMR0ZCUVZjc1IwRkJSeXhOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETzBGQlEyNURPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVsQlFVa3NiMEpCUVc5Q0xFZEJRVWRCTEdGQlFWY3NRMEZCUXl4UlFVRlJMRU5CUVVNN1FVRkRhRVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk5MTEdkQ1FVRmpMRU5CUVVNc1MwRkJTeXhGUVVGRk8wRkJReTlDTEVWQlFVVXNUMEZCVHl4dlFrRkJiMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRNVU1zUTBGQlF6dEJRVU5FTzBGQlEwRXNTVUZCUVN4bFFVRmpMRWRCUVVkQkxHZENRVUZqT3p0QlEzSkNMMElzU1VGQlNVNHNVVUZCVFN4SFFVRkhjRUlzWTBGQmIwSXNSVUZCUVR0QlFVTnFReXhKUVVGSkxGTkJRVk1zUjBGQlIxRXNWVUZCZFVJN1FVRkRka01zU1VGQlNTeGpRVUZqTEVkQlFVZERMR1ZCUVRSQ0xFTkJRVU03UVVGRGJFUTdRVUZEUVR0QlFVTkJMRWxCUVVrc1QwRkJUeXhIUVVGSExHVkJRV1U3UVVGRE4wSXNTVUZCU1N4WlFVRlpMRWRCUVVjc2IwSkJRVzlDTEVOQlFVTTdRVUZEZUVNN1FVRkRRVHRCUVVOQkxFbEJRVWtzWTBGQll5eEhRVUZIVnl4UlFVRk5MRWRCUVVkQkxGRkJRVTBzUTBGQlF5eFhRVUZYTEVkQlFVY3NVMEZCVXl4RFFVRkRPMEZCUXpkRU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hUUVVGVFR5eFpRVUZWTEVOQlFVTXNTMEZCU3l4RlFVRkZPMEZCUXpOQ0xFVkJRVVVzU1VGQlNTeExRVUZMTEVsQlFVa3NTVUZCU1N4RlFVRkZPMEZCUTNKQ0xFbEJRVWtzVDBGQlR5eExRVUZMTEV0QlFVc3NVMEZCVXl4SFFVRkhMRmxCUVZrc1IwRkJSeXhQUVVGUExFTkJRVU03UVVGRGVFUXNSMEZCUnp0QlFVTklMRVZCUVVVc1QwRkJUeXhEUVVGRExHTkJRV01zU1VGQlNTeGpRVUZqTEVsQlFVa3NUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJRenRCUVVNelJDeE5RVUZOTEZOQlFWTXNRMEZCUXl4TFFVRkxMRU5CUVVNN1FVRkRkRUlzVFVGQlRTeGpRVUZqTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkROVUlzUTBGQlF6dEJRVU5FTzBGQlEwRXNTVUZCUVN4WFFVRmpMRWRCUVVkQkxGbEJRVlU3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOR00wSXNVMEZCVTBNc1ZVRkJVU3hEUVVGRExFdEJRVXNzUlVGQlJUdEJRVU42UWl4RlFVRkZMRWxCUVVrc1NVRkJTU3hIUVVGSExFOUJRVThzUzBGQlN5eERRVUZETzBGQlF6RkNMRVZCUVVVc1QwRkJUeXhMUVVGTExFbEJRVWtzU1VGQlNTeExRVUZMTEVsQlFVa3NTVUZCU1N4UlFVRlJMRWxCUVVrc1NVRkJTU3hKUVVGSkxGVkJRVlVzUTBGQlF5eERRVUZETzBGQlEyNUZMRU5CUVVNN1FVRkRSRHRCUVVOQkxFbEJRVUVzVlVGQll5eEhRVUZIUVN4VlFVRlJPenRCUXpsQ2VrSXNTVUZCU1VRc1dVRkJWU3hIUVVGSE0wSXNWMEZCZDBJN1FVRkRla01zU1VGQlNUUkNMRlZCUVZFc1IwRkJSM0JDTEZWQlFYRkNMRU5CUVVNN1FVRkRja003UVVGRFFUdEJRVU5CTEVsQlFVa3NVVUZCVVN4SFFVRkhMSGRDUVVGM1FqdEJRVU4yUXl4SlFVRkpjVUlzVTBGQlR5eEhRVUZITEcxQ1FVRnRRanRCUVVOcVF5eEpRVUZKUXl4UlFVRk5MRWRCUVVjc05FSkJRVFJDTzBGQlEzcERMRWxCUVVrc1VVRkJVU3hIUVVGSExHZENRVUZuUWl4RFFVRkRPMEZCUTJoRE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk5ETEZsQlFWVXNRMEZCUXl4TFFVRkxMRVZCUVVVN1FVRkRNMElzUlVGQlJTeEpRVUZKTEVOQlFVTklMRlZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJUdEJRVU40UWl4SlFVRkpMRTlCUVU4c1MwRkJTeXhEUVVGRE8wRkJRMnBDTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFc1JVRkJSU3hKUVVGSkxFZEJRVWNzUjBGQlIwUXNXVUZCVlN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8wRkJRemxDTEVWQlFVVXNUMEZCVHl4SFFVRkhMRWxCUVVsRkxGTkJRVThzU1VGQlNTeEhRVUZITEVsQlFVbERMRkZCUVUwc1NVRkJTU3hIUVVGSExFbEJRVWtzVVVGQlVTeEpRVUZKTEVkQlFVY3NTVUZCU1N4UlFVRlJMRU5CUVVNN1FVRkRMMFVzUTBGQlF6dEJRVU5FTzBGQlEwRXNTVUZCUVN4WlFVRmpMRWRCUVVkRExGbEJRVlU3TzBGRGNFTXpRaXhKUVVGSldpeE5RVUZKTEVkQlFVZHVRaXhMUVVGclFpeERRVUZETzBGQlF6bENPMEZCUTBFN1FVRkRRU3hKUVVGSlowTXNXVUZCVlN4SFFVRkhZaXhOUVVGSkxFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1EwRkJRenRCUVVNMVF6dEJRVU5CTEVsQlFVRXNWMEZCWXl4SFFVRkhZU3haUVVGVk96dEJRMHd6UWl4SlFVRkpMRlZCUVZVc1IwRkJSMmhETEZkQlFYZENMRU5CUVVNN1FVRkRNVU03UVVGRFFUdEJRVU5CTEVsQlFVa3NWVUZCVlN4SlFVRkpMRmRCUVZjN1FVRkROMElzUlVGQlJTeEpRVUZKTEVkQlFVY3NSMEZCUnl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzU1VGQlNTeFZRVUZWTEVOQlFVTXNTVUZCU1N4SlFVRkpMRlZCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeEpRVUZKTEVWQlFVVXNRMEZCUXl4RFFVRkRPMEZCUXpOR0xFVkJRVVVzVDBGQlR5eEhRVUZITEVsQlFVa3NaMEpCUVdkQ0xFZEJRVWNzUjBGQlJ5eEpRVUZKTEVWQlFVVXNRMEZCUXp0QlFVTTNReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzBGQlEwdzdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZOQlFWTnBReXhWUVVGUkxFTkJRVU1zU1VGQlNTeEZRVUZGTzBGQlEzaENMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU1zVlVGQlZTeExRVUZMTEZWQlFWVXNTVUZCU1N4SlFVRkpMRU5CUVVNc1EwRkJRenRCUVVNNVF5eERRVUZETzBGQlEwUTdRVUZEUVN4SlFVRkJMRk5CUVdNc1IwRkJSMEVzVlVGQlVUczdPenRCUTJ4Q2VrSXNTVUZCU1VNc1YwRkJVeXhIUVVGSExGRkJRVkVzUTBGQlF5eFRRVUZUTEVOQlFVTTdRVUZEYmtNN1FVRkRRVHRCUVVOQkxFbEJRVWxETEdOQlFWa3NSMEZCUjBRc1YwRkJVeXhEUVVGRExGRkJRVkVzUTBGQlF6dEJRVU4wUXp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNVMEZCVTBVc1ZVRkJVU3hEUVVGRExFbEJRVWtzUlVGQlJUdEJRVU40UWl4RlFVRkZMRWxCUVVrc1NVRkJTU3hKUVVGSkxFbEJRVWtzUlVGQlJUdEJRVU53UWl4SlFVRkpMRWxCUVVrN1FVRkRVaXhOUVVGTkxFOUJRVTlFTEdOQlFWa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRGNrTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhGUVVGRkxFVkJRVVU3UVVGRGJFSXNTVUZCU1N4SlFVRkpPMEZCUTFJc1RVRkJUU3hSUVVGUkxFbEJRVWtzUjBGQlJ5eEZRVUZGTEVWQlFVVTdRVUZEZWtJc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eEZRVUZGTEVWQlFVVTdRVUZEYkVJc1IwRkJSenRCUVVOSUxFVkJRVVVzVDBGQlR5eEZRVUZGTEVOQlFVTTdRVUZEV2l4RFFVRkRPMEZCUTBRN1FVRkRRU3hKUVVGQkxGTkJRV01zUjBGQlIwTXNWVUZCVVRzN1FVTjZRbnBDTEVsQlFVbE1MRmxCUVZVc1IwRkJSeTlDTEZsQlFYVkNPMEZCUTNoRExFbEJRVWtzVVVGQlVTeEhRVUZIVVN4VFFVRnpRanRCUVVOeVF5eEpRVUZKYjBJc1ZVRkJVU3hIUVVGSGJrSXNWVUZCY1VJN1FVRkRjRU1zU1VGQlNUSkNMRlZCUVZFc1IwRkJSekZDTEZOQlFYTkNMRU5CUVVNN1FVRkRkRU03UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWxCUVVrc1dVRkJXU3hIUVVGSExIRkNRVUZ4UWl4RFFVRkRPMEZCUTNwRE8wRkJRMEU3UVVGRFFTeEpRVUZKTEZsQlFWa3NSMEZCUnl3MlFrRkJOa0lzUTBGQlF6dEJRVU5xUkR0QlFVTkJPMEZCUTBFc1NVRkJTWGRDTEZkQlFWTXNSMEZCUnl4UlFVRlJMRU5CUVVNc1UwRkJVenRCUVVOc1F5eEpRVUZKWWl4aFFVRlhMRWRCUVVjc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF6dEJRVU51UXp0QlFVTkJPMEZCUTBFc1NVRkJTV01zWTBGQldTeEhRVUZIUkN4WFFVRlRMRU5CUVVNc1VVRkJVU3hEUVVGRE8wRkJRM1JETzBGQlEwRTdRVUZEUVN4SlFVRkpXaXhuUWtGQll5eEhRVUZIUkN4aFFVRlhMRU5CUVVNc1kwRkJZeXhEUVVGRE8wRkJRMmhFTzBGQlEwRTdRVUZEUVN4SlFVRkpMRlZCUVZVc1IwRkJSeXhOUVVGTkxFTkJRVU1zUjBGQlJ6dEJRVU16UWl4RlFVRkZZeXhqUVVGWkxFTkJRVU1zU1VGQlNTeERRVUZEWWl4blFrRkJZeXhEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEZsQlFWa3NSVUZCUlN4TlFVRk5MRU5CUVVNN1FVRkRha1VzUjBGQlJ5eFBRVUZQTEVOQlFVTXNkMFJCUVhkRUxFVkJRVVVzVDBGQlR5eERRVUZETEVkQlFVY3NSMEZCUnp0QlFVTnVSaXhEUVVGRExFTkJRVU03UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFRRVUZUWlN4alFVRlpMRU5CUVVNc1MwRkJTeXhGUVVGRk8wRkJRemRDTEVWQlFVVXNTVUZCU1N4RFFVRkRWQ3hWUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXhGUVVGRk8wRkJRek5ETEVsQlFVa3NUMEZCVHl4TFFVRkxMRU5CUVVNN1FVRkRha0lzUjBGQlJ6dEJRVU5JTEVWQlFVVXNTVUZCU1N4UFFVRlBMRWRCUVVkSExGbEJRVlVzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4VlFVRlZMRWRCUVVjc1dVRkJXU3hEUVVGRE8wRkJRemxFTEVWQlFVVXNUMEZCVHl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRFN5eFZRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOMlF5eERRVUZETzBGQlEwUTdRVUZEUVN4SlFVRkJMR0ZCUVdNc1IwRkJSME1zWTBGQldUczdPenM3T3pzN096czdRVU4wUXpkQ0xGTkJRVk5ETEZWQlFWRXNRMEZCUXl4TlFVRk5MRVZCUVVVc1IwRkJSeXhGUVVGRk8wRkJReTlDTEVWQlFVVXNUMEZCVHl4TlFVRk5MRWxCUVVrc1NVRkJTU3hIUVVGSExGTkJRVk1zUjBGQlJ5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRiRVFzUTBGQlF6dEJRVU5FTzBGQlEwRXNTVUZCUVN4VFFVRmpMRWRCUVVkQkxGVkJRVkU3TzBGRFducENMRWxCUVVrc1dVRkJXU3hIUVVGSGRFTXNZVUZCTUVJN1FVRkROME1zU1VGQlNTeFJRVUZSTEVkQlFVZFJMRk5CUVhOQ0xFTkJRVU03UVVGRGRFTTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNVMEZCVXl0Q0xGZEJRVk1zUTBGQlF5eE5RVUZOTEVWQlFVVXNSMEZCUnl4RlFVRkZPMEZCUTJoRExFVkJRVVVzU1VGQlNTeExRVUZMTEVkQlFVY3NVVUZCVVN4RFFVRkRMRTFCUVUwc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU53UXl4RlFVRkZMRTlCUVU4c1dVRkJXU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEV0QlFVc3NSMEZCUnl4VFFVRlRMRU5CUVVNN1FVRkRha1FzUTBGQlF6dEJRVU5FTzBGQlEwRXNTVUZCUVN4VlFVRmpMRWRCUVVkQkxGZEJRVk03TzBGRGFFSXhRaXhKUVVGSlFTeFhRVUZUTEVkQlFVZDJReXhWUVVGMVFqdEJRVU4yUXl4SlFVRkpiVUlzVFVGQlNTeEhRVUZIV0N4TFFVRnJRaXhEUVVGRE8wRkJRemxDTzBGQlEwRTdRVUZEUVN4SlFVRkpaME1zUzBGQlJ5eEhRVUZIUkN4WFFVRlRMRU5CUVVOd1FpeE5RVUZKTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRha003UVVGRFFTeEpRVUZCTEVsQlFXTXNSMEZCUjNGQ0xFdEJRVWM3TzBGRFRuQkNMRWxCUVVsRUxGZEJRVk1zUjBGQlIzWkRMRlZCUVhWQ0xFTkJRVU03UVVGRGVFTTdRVUZEUVR0QlFVTkJMRWxCUVVsNVF5eGpRVUZaTEVkQlFVZEdMRmRCUVZNc1EwRkJReXhOUVVGTkxFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTTdRVUZETDBNN1FVRkRRU3hKUVVGQkxHRkJRV01zUjBGQlIwVXNZMEZCV1RzN1FVTk1OMElzU1VGQlNVRXNZMEZCV1N4SFFVRkhla01zWVVGQk1FSXNRMEZCUXp0QlFVTTVRenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVekJETEZkQlFWTXNSMEZCUnp0QlFVTnlRaXhGUVVGRkxFbEJRVWtzUTBGQlF5eFJRVUZSTEVkQlFVZEVMR05CUVZrc1IwRkJSMEVzWTBGQldTeERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJRenRCUVVONlJDeEZRVUZGTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRMmhDTEVOQlFVTTdRVUZEUkR0QlFVTkJMRWxCUVVFc1ZVRkJZeXhIUVVGSFF5eFhRVUZUT3pzN096czdPenM3T3pzN08wRkRTakZDTEZOQlFWTkRMRmxCUVZVc1EwRkJReXhIUVVGSExFVkJRVVU3UVVGRGVrSXNSVUZCUlN4SlFVRkpMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRTlCUVU4c1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTXhSQ3hGUVVGRkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVsQlFVa3NUVUZCVFN4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRE9VSXNSVUZCUlN4UFFVRlBMRTFCUVUwc1EwRkJRenRCUVVOb1FpeERRVUZETzBGQlEwUTdRVUZEUVN4SlFVRkJMRmRCUVdNc1IwRkJSMEVzV1VGQlZUczdRVU5vUWpOQ0xFbEJRVWxHTEdOQlFWa3NSMEZCUjNwRExHRkJRVEJDTEVOQlFVTTdRVUZET1VNN1FVRkRRVHRCUVVOQkxFbEJRVWswUXl4blFrRkJZeXhIUVVGSExESkNRVUV5UWl4RFFVRkRPMEZCUTJwRU8wRkJRMEU3UVVGRFFTeEpRVUZKZGtJc1lVRkJWeXhIUVVGSExFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTTdRVUZEYmtNN1FVRkRRVHRCUVVOQkxFbEJRVWxETEdkQ1FVRmpMRWRCUVVkRUxHRkJRVmNzUTBGQlF5eGpRVUZqTEVOQlFVTTdRVUZEYUVRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hUUVVGVGQwSXNVMEZCVHl4RFFVRkRMRWRCUVVjc1JVRkJSVHRCUVVOMFFpeEZRVUZGTEVsQlFVa3NTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU03UVVGRE0wSXNSVUZCUlN4SlFVRkpTaXhqUVVGWkxFVkJRVVU3UVVGRGNFSXNTVUZCU1N4SlFVRkpMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZETTBJc1NVRkJTU3hQUVVGUExFMUJRVTBzUzBGQlMwY3NaMEpCUVdNc1IwRkJSeXhUUVVGVExFZEJRVWNzVFVGQlRTeERRVUZETzBGQlF6RkVMRWRCUVVjN1FVRkRTQ3hGUVVGRkxFOUJRVTkwUWl4blFrRkJZeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVXNSMEZCUnl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEZOQlFWTXNRMEZCUXp0QlFVTm9SU3hEUVVGRE8wRkJRMFE3UVVGRFFTeEpRVUZCTEZGQlFXTXNSMEZCUjNWQ0xGTkJRVTg3TzBGRE4wSjRRaXhKUVVGSlNpeGpRVUZaTEVkQlFVZDZReXhoUVVFd1FpeERRVUZETzBGQlF6bERPMEZCUTBFN1FVRkRRU3hKUVVGSmNVSXNZVUZCVnl4SFFVRkhMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU03UVVGRGJrTTdRVUZEUVR0QlFVTkJMRWxCUVVsRExHZENRVUZqTEVkQlFVZEVMR0ZCUVZjc1EwRkJReXhqUVVGakxFTkJRVU03UVVGRGFFUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRlVUlzVTBGQlR5eERRVUZETEVkQlFVY3NSVUZCUlR0QlFVTjBRaXhGUVVGRkxFbEJRVWtzU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNN1FVRkRNMElzUlVGQlJTeFBRVUZQVEN4alFVRlpMRWxCUVVrc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eExRVUZMTEZOQlFWTXNTVUZCU1c1Q0xHZENRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU51Uml4RFFVRkRPMEZCUTBRN1FVRkRRU3hKUVVGQkxGRkJRV01zUjBGQlIzZENMRk5CUVU4N08wRkRkRUo0UWl4SlFVRkpMRmxCUVZrc1IwRkJSemxETEdGQlFUQkNMRU5CUVVNN1FVRkRPVU03UVVGRFFUdEJRVU5CTEVsQlFVa3NZMEZCWXl4SFFVRkhMREpDUVVFeVFpeERRVUZETzBGQlEycEVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hUUVVGVEswTXNVMEZCVHl4RFFVRkRMRWRCUVVjc1JVRkJSU3hMUVVGTExFVkJRVVU3UVVGRE4wSXNSVUZCUlN4SlFVRkpMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETzBGQlF6TkNMRVZCUVVVc1NVRkJTU3hEUVVGRExFbEJRVWtzU1VGQlNTeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEY2tNc1JVRkJSU3hKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4WlFVRlpMRWxCUVVrc1MwRkJTeXhMUVVGTExGTkJRVk1zU1VGQlNTeGpRVUZqTEVkQlFVY3NTMEZCU3l4RFFVRkRPMEZCUXpkRkxFVkJRVVVzVDBGQlR5eEpRVUZKTEVOQlFVTTdRVUZEWkN4RFFVRkRPMEZCUTBRN1FVRkRRU3hKUVVGQkxGRkJRV01zUjBGQlIwRXNVMEZCVHpzN1FVTjBRbmhDTEVsQlFVa3NVMEZCVXl4SFFVRkhMME1zVlVGQmRVSTdRVUZEZGtNc1NVRkJTU3hWUVVGVkxFZEJRVWRSTEZkQlFYZENPMEZCUTNwRExFbEJRVWtzVDBGQlR5eEhRVUZIUXl4UlFVRnhRanRCUVVOdVF5eEpRVUZKTEU5QlFVOHNSMEZCUjBNc1VVRkJjVUk3UVVGRGJrTXNTVUZCU1N4UFFVRlBMRWRCUVVkRExGRkJRWEZDTEVOQlFVTTdRVUZEY0VNN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRk5CUVZOeFF5eE5RVUZKTEVOQlFVTXNUMEZCVHl4RlFVRkZPMEZCUTNaQ0xFVkJRVVVzU1VGQlNTeExRVUZMTEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUTJoQ0xFMUJRVTBzVFVGQlRTeEhRVUZITEU5QlFVOHNTVUZCU1N4SlFVRkpMRWRCUVVjc1EwRkJReXhIUVVGSExFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTTdRVUZEY0VRN1FVRkRRU3hGUVVGRkxFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXp0QlFVTm1MRVZCUVVVc1QwRkJUeXhGUVVGRkxFdEJRVXNzUjBGQlJ5eE5RVUZOTEVWQlFVVTdRVUZETTBJc1NVRkJTU3hKUVVGSkxFdEJRVXNzUjBGQlJ5eFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRMMElzU1VGQlNTeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOcVF5eEhRVUZITzBGQlEwZ3NRMEZCUXp0QlFVTkVPMEZCUTBFN1FVRkRRVUVzVFVGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4TFFVRkxMRWRCUVVjc1UwRkJVeXhEUVVGRE8wRkJRMnBEUVN4TlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExGRkJRVkVzUTBGQlF5eEhRVUZITEZWQlFWVXNRMEZCUXp0QlFVTjBRMEVzVFVGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRWRCUVVjc1QwRkJUeXhEUVVGRE8wRkJRemRDUVN4TlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUjBGQlJ5eFBRVUZQTEVOQlFVTTdRVUZETjBKQkxFMUJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4SFFVRkhMRTlCUVU4c1EwRkJRenRCUVVNM1FqdEJRVU5CTEVsQlFVRXNTMEZCWXl4SFFVRkhRU3hOUVVGSk96dEJReTlDY2tJc1NVRkJTU3hKUVVGSkxFZEJRVWRvUkN4TFFVRnJRanRCUVVNM1FpeEpRVUZKV1N4WFFVRlRMRWRCUVVkS0xGVkJRWFZDTzBGQlEzWkRMRWxCUVVsblF5eExRVUZITEVkQlFVY3ZRaXhKUVVGcFFpeERRVUZETzBGQlF6VkNPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRkME1zWlVGQllTeEhRVUZITzBGQlEzcENMRVZCUVVVc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEYUVJc1JVRkJSU3hKUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITzBGQlEyeENMRWxCUVVrc1RVRkJUU3hGUVVGRkxFbEJRVWtzU1VGQlNUdEJRVU53UWl4SlFVRkpMRXRCUVVzc1JVRkJSU3hMUVVGTFZDeExRVUZITEVsQlFVazFRaXhYUVVGVExFTkJRVU03UVVGRGFrTXNTVUZCU1N4UlFVRlJMRVZCUVVVc1NVRkJTU3hKUVVGSk8wRkJRM1JDTEVkQlFVY3NRMEZCUXp0QlFVTktMRU5CUVVNN1FVRkRSRHRCUVVOQkxFbEJRVUVzWTBGQll5eEhRVUZIY1VNc1pVRkJZVHM3T3pzN096czdPenRCUTJJNVFpeFRRVUZUUXl4WFFVRlRMRU5CUVVNc1MwRkJTeXhGUVVGRk8wRkJRekZDTEVWQlFVVXNTVUZCU1N4SlFVRkpMRWRCUVVjc1QwRkJUeXhMUVVGTExFTkJRVU03UVVGRE1VSXNSVUZCUlN4UFFVRlBMRU5CUVVNc1NVRkJTU3hKUVVGSkxGRkJRVkVzU1VGQlNTeEpRVUZKTEVsQlFVa3NVVUZCVVN4SlFVRkpMRWxCUVVrc1NVRkJTU3hSUVVGUkxFbEJRVWtzU1VGQlNTeEpRVUZKTEZOQlFWTTdRVUZEZGtZc1QwRkJUeXhMUVVGTExFdEJRVXNzVjBGQlZ6dEJRVU0xUWl4UFFVRlBMRXRCUVVzc1MwRkJTeXhKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU4yUWl4RFFVRkRPMEZCUTBRN1FVRkRRU3hKUVVGQkxGVkJRV01zUjBGQlIwRXNWMEZCVXpzN1FVTmtNVUlzU1VGQlNTeFRRVUZUTEVkQlFVZHNSQ3hWUVVGMVFpeERRVUZETzBGQlEzaERPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRk5CUVZOdFJDeFpRVUZWTEVOQlFVTXNSMEZCUnl4RlFVRkZMRWRCUVVjc1JVRkJSVHRCUVVNNVFpeEZRVUZGTEVsQlFVa3NTVUZCU1N4SFFVRkhMRWRCUVVjc1EwRkJReXhSUVVGUkxFTkJRVU03UVVGRE1VSXNSVUZCUlN4UFFVRlBMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU03UVVGRGRrSXNUVUZCVFN4SlFVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExFbEJRVWtzVVVGQlVTeEhRVUZITEZGQlFWRXNSMEZCUnl4TlFVRk5MRU5CUVVNN1FVRkRkRVFzVFVGQlRTeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRPMEZCUTJZc1EwRkJRenRCUVVORU8wRkJRMEVzU1VGQlFTeFhRVUZqTEVkQlFVZEJMRmxCUVZVN08wRkRha0l6UWl4SlFVRkpRU3haUVVGVkxFZEJRVWR1UkN4WFFVRjNRaXhEUVVGRE8wRkJRekZETzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNVMEZCVTI5RUxHZENRVUZqTEVOQlFVTXNSMEZCUnl4RlFVRkZPMEZCUXpkQ0xFVkJRVVVzU1VGQlNTeE5RVUZOTEVkQlFVZEVMRmxCUVZVc1EwRkJReXhKUVVGSkxFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRGNFUXNSVUZCUlN4SlFVRkpMRU5CUVVNc1NVRkJTU3hKUVVGSkxFMUJRVTBzUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUXpsQ0xFVkJRVVVzVDBGQlR5eE5RVUZOTEVOQlFVTTdRVUZEYUVJc1EwRkJRenRCUVVORU8wRkJRMEVzU1VGQlFTeGxRVUZqTEVkQlFVZERMR2RDUVVGak96dEJRMnBDTDBJc1NVRkJTVVFzV1VGQlZTeEhRVUZIYmtRc1YwRkJkMElzUTBGQlF6dEJRVU14UXp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRk5CUVZOeFJDeGhRVUZYTEVOQlFVTXNSMEZCUnl4RlFVRkZPMEZCUXpGQ0xFVkJRVVVzVDBGQlQwWXNXVUZCVlN4RFFVRkRMRWxCUVVrc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRlRU1zUTBGQlF6dEJRVU5FTzBGQlEwRXNTVUZCUVN4WlFVRmpMRWRCUVVkRkxHRkJRVmM3TzBGRFpqVkNMRWxCUVVsR0xGbEJRVlVzUjBGQlIyNUVMRmRCUVhkQ0xFTkJRVU03UVVGRE1VTTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRjMFFzWVVGQlZ5eERRVUZETEVkQlFVY3NSVUZCUlR0QlFVTXhRaXhGUVVGRkxFOUJRVTlJTEZsQlFWVXNRMEZCUXl4SlFVRkpMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUTNoRExFTkJRVU03UVVGRFJEdEJRVU5CTEVsQlFVRXNXVUZCWXl4SFFVRkhSeXhoUVVGWE96dEJRMlkxUWl4SlFVRkpMRlZCUVZVc1IwRkJSM1JFTEZkQlFYZENMRU5CUVVNN1FVRkRNVU03UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZOQlFWTjFSQ3hoUVVGWExFTkJRVU1zUjBGQlJ5eEZRVUZGTEV0QlFVc3NSVUZCUlR0QlFVTnFReXhGUVVGRkxFbEJRVWtzU1VGQlNTeEhRVUZITEZWQlFWVXNRMEZCUXl4SlFVRkpMRVZCUVVVc1IwRkJSeXhEUVVGRE8wRkJRMnhETEUxQlFVMHNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU03UVVGRGRrSTdRVUZEUVN4RlFVRkZMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMEZCUTNaQ0xFVkJRVVVzU1VGQlNTeERRVUZETEVsQlFVa3NTVUZCU1N4SlFVRkpMRU5CUVVNc1NVRkJTU3hKUVVGSkxFbEJRVWtzUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUTNwRExFVkJRVVVzVDBGQlR5eEpRVUZKTEVOQlFVTTdRVUZEWkN4RFFVRkRPMEZCUTBRN1FVRkRRU3hKUVVGQkxGbEJRV01zUjBGQlIwRXNZVUZCVnpzN1FVTnlRalZDTEVsQlFVa3NZVUZCWVN4SFFVRkhka1FzWTBGQk1rSTdRVUZETDBNc1NVRkJTU3hqUVVGakxFZEJRVWRSTEdWQlFUUkNPMEZCUTJwRUxFbEJRVWtzVjBGQlZ5eEhRVUZIUXl4WlFVRjVRanRCUVVNelF5eEpRVUZKTEZkQlFWY3NSMEZCUjBNc1dVRkJlVUk3UVVGRE0wTXNTVUZCU1N4WFFVRlhMRWRCUVVkRExGbEJRWGxDTEVOQlFVTTdRVUZETlVNN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRk5CUVZNMlF5eFZRVUZSTEVOQlFVTXNUMEZCVHl4RlFVRkZPMEZCUXpOQ0xFVkJRVVVzU1VGQlNTeExRVUZMTEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUTJoQ0xFMUJRVTBzVFVGQlRTeEhRVUZITEU5QlFVOHNTVUZCU1N4SlFVRkpMRWRCUVVjc1EwRkJReXhIUVVGSExFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTTdRVUZEY0VRN1FVRkRRU3hGUVVGRkxFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXp0QlFVTm1MRVZCUVVVc1QwRkJUeXhGUVVGRkxFdEJRVXNzUjBGQlJ5eE5RVUZOTEVWQlFVVTdRVUZETTBJc1NVRkJTU3hKUVVGSkxFdEJRVXNzUjBGQlJ5eFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRMMElzU1VGQlNTeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOcVF5eEhRVUZITzBGQlEwZ3NRMEZCUXp0QlFVTkVPMEZCUTBFN1FVRkRRVUVzVlVGQlVTeERRVUZETEZOQlFWTXNRMEZCUXl4TFFVRkxMRWRCUVVjc1lVRkJZU3hEUVVGRE8wRkJRM3BEUVN4VlFVRlJMRU5CUVVNc1UwRkJVeXhEUVVGRExGRkJRVkVzUTBGQlF5eEhRVUZITEdOQlFXTXNRMEZCUXp0QlFVTTVRMEVzVlVGQlVTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRWRCUVVjc1YwRkJWeXhEUVVGRE8wRkJRM0pEUVN4VlFVRlJMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUjBGQlJ5eFhRVUZYTEVOQlFVTTdRVUZEY2tOQkxGVkJRVkVzUTBGQlF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4SFFVRkhMRmRCUVZjc1EwRkJRenRCUVVOeVF6dEJRVU5CTEVsQlFVRXNVMEZCWXl4SFFVRkhRU3hWUVVGUk96dEJReTlDZWtJc1NVRkJTVFZETEZkQlFWTXNSMEZCUjFvc1ZVRkJkVUk3UVVGRGRrTXNTVUZCU1hkRExFdEJRVWNzUjBGQlIyaERMRWxCUVdsQ08wRkJRek5DTEVsQlFVbG5SQ3hWUVVGUkxFZEJRVWN2UXl4VFFVRnpRaXhEUVVGRE8wRkJRM1JETzBGQlEwRTdRVUZEUVN4SlFVRkpMR2RDUVVGblFpeEhRVUZITEVkQlFVY3NRMEZCUXp0QlFVTXpRanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVTBGQlUyZEVMRlZCUVZFc1EwRkJReXhIUVVGSExFVkJRVVVzUzBGQlN5eEZRVUZGTzBGQlF6bENMRVZCUVVVc1NVRkJTU3hKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXp0QlFVTXpRaXhGUVVGRkxFbEJRVWtzU1VGQlNTeFpRVUZaTjBNc1YwRkJVeXhGUVVGRk8wRkJRMnBETEVsQlFVa3NTVUZCU1N4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF6dEJRVU01UWl4SlFVRkpMRWxCUVVrc1EwRkJRelJDTEV0QlFVY3NTMEZCU3l4TFFVRkxMRU5CUVVNc1RVRkJUU3hIUVVGSExHZENRVUZuUWl4SFFVRkhMRU5CUVVNc1EwRkJReXhGUVVGRk8wRkJRM1pFTEUxQlFVMHNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFZEJRVWNzUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUXk5Q0xFMUJRVTBzU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4RlFVRkZMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU03UVVGRE9VSXNUVUZCVFN4UFFVRlBMRWxCUVVrc1EwRkJRenRCUVVOc1FpeExRVUZMTzBGQlEwd3NTVUZCU1N4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eEpRVUZKWjBJc1ZVRkJVU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBGQlF5OURMRWRCUVVjN1FVRkRTQ3hGUVVGRkxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRE8wRkJRM1pDTEVWQlFVVXNTVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETzBGQlEzaENMRVZCUVVVc1QwRkJUeXhKUVVGSkxFTkJRVU03UVVGRFpDeERRVUZETzBGQlEwUTdRVUZEUVN4SlFVRkJMRk5CUVdNc1IwRkJSME1zVlVGQlVUczdRVU5xUTNwQ0xFbEJRVWtzVTBGQlV5eEhRVUZIZWtRc1ZVRkJkVUk3UVVGRGRrTXNTVUZCU1N4VlFVRlZMRWRCUVVkUkxGZEJRWGRDTzBGQlEzcERMRWxCUVVrc1YwRkJWeXhIUVVGSFF5eFpRVUY1UWp0QlFVTXpReXhKUVVGSkxGRkJRVkVzUjBGQlIwTXNVMEZCYzBJN1FVRkRja01zU1VGQlNTeFJRVUZSTEVkQlFVZERMRk5CUVhOQ08wRkJRM0pETEVsQlFVa3NVVUZCVVN4SFFVRkhLME1zVTBGQmMwSXNRMEZCUXp0QlFVTjBRenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVME1zVDBGQlN5eERRVUZETEU5QlFVOHNSVUZCUlR0QlFVTjRRaXhGUVVGRkxFbEJRVWtzU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1NVRkJTU3hUUVVGVExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdRVUZEY0VRc1JVRkJSU3hKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNN1FVRkRlRUlzUTBGQlF6dEJRVU5FTzBGQlEwRTdRVUZEUVVFc1QwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eExRVUZMTEVkQlFVY3NWVUZCVlN4RFFVRkRPMEZCUTI1RFFTeFBRVUZMTEVOQlFVTXNVMEZCVXl4RFFVRkRMRkZCUVZFc1EwRkJReXhIUVVGSExGZEJRVmNzUTBGQlF6dEJRVU40UTBFc1QwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVkQlFVY3NVVUZCVVN4RFFVRkRPMEZCUXk5Q1FTeFBRVUZMTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVjc1IwRkJSeXhSUVVGUkxFTkJRVU03UVVGREwwSkJMRTlCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eEhRVUZITEZGQlFWRXNRMEZCUXp0QlFVTXZRanRCUVVOQkxFbEJRVUVzVFVGQll5eEhRVUZIUVN4UFFVRkxPenRCUXpGQ2RFSXNTVUZCU1hCQ0xGZEJRVk1zUjBGQlIzWkRMRlZCUVhWQ0xFTkJRVU03UVVGRGVFTTdRVUZEUVN4SlFVRkpORVFzWjBKQlFXTXNTVUZCU1N4WFFVRlhPMEZCUTJwRExFVkJRVVVzU1VGQlNUdEJRVU5PTEVsQlFVa3NTVUZCU1N4SlFVRkpMRWRCUVVkeVFpeFhRVUZUTEVOQlFVTXNUVUZCVFN4RlFVRkZMR2RDUVVGblFpeERRVUZETEVOQlFVTTdRVUZEYmtRc1NVRkJTU3hKUVVGSkxFTkJRVU1zUlVGQlJTeEZRVUZGTEVWQlFVVXNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJRenRCUVVOeVFpeEpRVUZKTEU5QlFVOHNTVUZCU1N4RFFVRkRPMEZCUTJoQ0xFZEJRVWNzUTBGQlF5eFBRVUZQTEVOQlFVTXNSVUZCUlN4RlFVRkZPMEZCUTJoQ0xFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdRVUZEVER0QlFVTkJMRWxCUVVFc1pVRkJZeXhIUVVGSGNVSXNaMEpCUVdNN08wRkRWaTlDTEVsQlFVbEJMR2RDUVVGakxFZEJRVWMxUkN4bFFVRTBRaXhEUVVGRE8wRkJRMnhFTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNVMEZCVXpaRUxHbENRVUZsTEVOQlFVTXNUVUZCVFN4RlFVRkZMRWRCUVVjc1JVRkJSU3hMUVVGTExFVkJRVVU3UVVGRE4wTXNSVUZCUlN4SlFVRkpMRWRCUVVjc1NVRkJTU3hYUVVGWExFbEJRVWxFTEdkQ1FVRmpMRVZCUVVVN1FVRkROVU1zU1VGQlNVRXNaMEpCUVdNc1EwRkJReXhOUVVGTkxFVkJRVVVzUjBGQlJ5eEZRVUZGTzBGQlEyaERMRTFCUVUwc1kwRkJZeXhGUVVGRkxFbEJRVWs3UVVGRE1VSXNUVUZCVFN4WlFVRlpMRVZCUVVVc1NVRkJTVHRCUVVONFFpeE5RVUZOTEU5QlFVOHNSVUZCUlN4TFFVRkxPMEZCUTNCQ0xFMUJRVTBzVlVGQlZTeEZRVUZGTEVsQlFVazdRVUZEZEVJc1MwRkJTeXhEUVVGRExFTkJRVU03UVVGRFVDeEhRVUZITEUxQlFVMDdRVUZEVkN4SlFVRkpMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eExRVUZMTEVOQlFVTTdRVUZEZUVJc1IwRkJSenRCUVVOSUxFTkJRVU03UVVGRFJEdEJRVU5CTEVsQlFVRXNaMEpCUVdNc1IwRkJSME1zYVVKQlFXVTdPMEZEZUVKb1F5eEpRVUZKUVN4cFFrRkJaU3hIUVVGSE4wUXNaMEpCUVRaQ08wRkJRMjVFTEVsQlFVbEZMRWxCUVVVc1IwRkJSMDBzU1VGQlpTeERRVUZETzBGQlEzcENPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVM05FTEd0Q1FVRm5RaXhEUVVGRExFMUJRVTBzUlVGQlJTeEhRVUZITEVWQlFVVXNTMEZCU3l4RlFVRkZPMEZCUXpsRExFVkJRVVVzU1VGQlNTeERRVUZETEV0QlFVc3NTMEZCU3l4VFFVRlRMRWxCUVVrc1EwRkJRelZFTEVsQlFVVXNRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUzBGQlN5eERRVUZETzBGQlEzSkVMRTlCUVU4c1MwRkJTeXhMUVVGTExGTkJRVk1zU1VGQlNTeEZRVUZGTEVkQlFVY3NTVUZCU1N4TlFVRk5MRU5CUVVNc1EwRkJReXhGUVVGRk8wRkJRMnBFTEVsQlFVa3lSQ3hwUWtGQlpTeERRVUZETEUxQlFVMHNSVUZCUlN4SFFVRkhMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03UVVGRGVFTXNSMEZCUnp0QlFVTklMRU5CUVVNN1FVRkRSRHRCUVVOQkxFbEJRVUVzYVVKQlFXTXNSMEZCUjBNc2EwSkJRV2RDT3pzN096czdPenM3TzBGRFdtcERMRk5CUVZORExHVkJRV0VzUTBGQlF5eFRRVUZUTEVWQlFVVTdRVUZEYkVNc1JVRkJSU3hQUVVGUExGTkJRVk1zVFVGQlRTeEZRVUZGTEZGQlFWRXNSVUZCUlN4UlFVRlJMRVZCUVVVN1FVRkRPVU1zU1VGQlNTeEpRVUZKTEV0QlFVc3NSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRiRUlzVVVGQlVTeFJRVUZSTEVkQlFVY3NUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJRenRCUVVOcVF5eFJRVUZSTEV0QlFVc3NSMEZCUnl4UlFVRlJMRU5CUVVNc1RVRkJUU3hEUVVGRE8wRkJRMmhETEZGQlFWRXNUVUZCVFN4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU03UVVGRE9VSTdRVUZEUVN4SlFVRkpMRTlCUVU4c1RVRkJUU3hGUVVGRkxFVkJRVVU3UVVGRGNrSXNUVUZCVFN4SlFVRkpMRWRCUVVjc1IwRkJSeXhMUVVGTExFTkJRVU1zVTBGQlV5eEhRVUZITEUxQlFVMHNSMEZCUnl4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRE8wRkJRM0JFTEUxQlFVMHNTVUZCU1N4UlFVRlJMRU5CUVVNc1VVRkJVU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVkQlFVY3NSVUZCUlN4UlFVRlJMRU5CUVVNc1MwRkJTeXhMUVVGTExFVkJRVVU3UVVGRE5VUXNVVUZCVVN4TlFVRk5PMEZCUTJRc1QwRkJUenRCUVVOUUxFdEJRVXM3UVVGRFRDeEpRVUZKTEU5QlFVOHNUVUZCVFN4RFFVRkRPMEZCUTJ4Q0xFZEJRVWNzUTBGQlF6dEJRVU5LTEVOQlFVTTdRVUZEUkR0QlFVTkJMRWxCUVVFc1kwRkJZeXhIUVVGSFFTeGxRVUZoT3p0QlEzaENPVUlzU1VGQlNTeGhRVUZoTEVkQlFVY3ZSQ3hqUVVFeVFpeERRVUZETzBGQlEyaEVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFbEJRVWxuUlN4VFFVRlBMRWRCUVVjc1lVRkJZU3hGUVVGRkxFTkJRVU03UVVGRE9VSTdRVUZEUVN4SlFVRkJMRkZCUVdNc1IwRkJSMEVzVTBGQlR6czdPenM3UTBObWVFSXNTVUZCU1N4SlFVRkpMRWRCUVVkb1JTeExRVUZyUWl4RFFVRkRPMEZCUXpsQ08wRkJRMEU3UVVGRFFTeERRVUZCTEVsQlFVa3NWMEZCVnl4SFFVRnBReXhQUVVGUExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNVVUZCVVN4SlFVRkpMRTlCUVU4c1EwRkJRenRCUVVONFJqdEJRVU5CTzBGQlEwRXNRMEZCUVN4SlFVRkpMRlZCUVZVc1IwRkJSeXhYUVVGWExFbEJRVWtzVVVGQllTeEpRVUZKTEZGQlFWRXNTVUZCU1N4TlFVRk5MRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeEpRVUZKTEUxQlFVMHNRMEZCUXp0QlFVTnNSenRCUVVOQk8wTkJRMEVzU1VGQlNTeGhRVUZoTEVkQlFVY3NWVUZCVlN4SlFVRkpMRlZCUVZVc1EwRkJReXhQUVVGUExFdEJRVXNzVjBGQlZ5eERRVUZETzBGQlEzSkZPMEZCUTBFN1EwRkRRU3hKUVVGSkxFMUJRVTBzUjBGQlJ5eGhRVUZoTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhUUVVGVE8wdEJRMmhFTEZkQlFWY3NSMEZCUnl4TlFVRk5MRWRCUVVjc1RVRkJUU3hEUVVGRExGZEJRVmNzUjBGQlJ5eFRRVUZUTEVOQlFVTTdRVUZETVVRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1EwRkJRU3hUUVVGVExGZEJRVmNzUTBGQlF5eE5RVUZOTEVWQlFVVXNUVUZCVFN4RlFVRkZPMGRCUTI1RExFbEJRVWtzVFVGQlRTeEZRVUZGTzBGQlEyUXNTMEZCU1N4UFFVRlBMRTFCUVUwc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF6dEpRVU4yUWp0QlFVTklMRWRCUVVVc1NVRkJTU3hOUVVGTkxFZEJRVWNzVFVGQlRTeERRVUZETEUxQlFVMDdRVUZETlVJc1QwRkJUU3hOUVVGTkxFZEJRVWNzVjBGQlZ5eEhRVUZITEZkQlFWY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhKUVVGSkxFMUJRVTBzUTBGQlF5eFhRVUZYTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1FVRkRiRVk3UVVGRFFTeEhRVUZGTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03UjBGRGNFSXNUMEZCVHl4TlFVRk5MRU5CUVVNN1JVRkRaanRCUVVORU8wRkJRMEVzUTBGQlFTeE5RVUZCTEVOQlFVRXNUMEZCUVN4SFFVRnBRaXhYUVVGWExFTkJRVUU3T3p0QlEyeEROVUlzU1VGQlNXMUNMRTFCUVVrc1IwRkJSMjVDTEV0QlFXdENMRU5CUVVNN1FVRkRPVUk3UVVGRFFUdEJRVU5CTEVsQlFVbHBSU3haUVVGVkxFZEJRVWM1UXl4TlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRE8wRkJRMnBETzBGQlEwRXNTVUZCUVN4WFFVRmpMRWRCUVVjNFF5eFpRVUZWT3p0QlEwd3pRaXhKUVVGSlFTeFpRVUZWTEVkQlFVZHFSU3hYUVVGM1FpeERRVUZETzBGQlF6RkRPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRhMFVzYTBKQlFXZENMRU5CUVVNc1YwRkJWeXhGUVVGRk8wRkJRM1pETEVWQlFVVXNTVUZCU1N4TlFVRk5MRWRCUVVjc1NVRkJTU3hYUVVGWExFTkJRVU1zVjBGQlZ5eERRVUZETEZkQlFWY3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRCUVVOdVJTeEZRVUZGTEVsQlFVbEVMRmxCUVZVc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1VFc1dVRkJWU3hEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETEVOQlFVTTdRVUZETVVRc1JVRkJSU3hQUVVGUExFMUJRVTBzUTBGQlF6dEJRVU5vUWl4RFFVRkRPMEZCUTBRN1FVRkRRU3hKUVVGQkxHbENRVUZqTEVkQlFVZERMR3RDUVVGblFqczdRVU5tYWtNc1NVRkJTVUVzYTBKQlFXZENMRWRCUVVkc1JTeHBRa0ZCT0VJc1EwRkJRenRCUVVOMFJEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFRRVUZUYlVVc2FVSkJRV1VzUTBGQlF5eFZRVUZWTEVWQlFVVXNUVUZCVFN4RlFVRkZPMEZCUXpkRExFVkJRVVVzU1VGQlNTeE5RVUZOTEVkQlFVY3NUVUZCVFN4SFFVRkhSQ3hyUWtGQlowSXNRMEZCUXl4VlFVRlZMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzVlVGQlZTeERRVUZETEUxQlFVMHNRMEZCUXp0QlFVTm9SaXhGUVVGRkxFOUJRVThzU1VGQlNTeFZRVUZWTEVOQlFVTXNWMEZCVnl4RFFVRkRMRTFCUVUwc1JVRkJSU3hWUVVGVkxFTkJRVU1zVlVGQlZTeEZRVUZGTEZWQlFWVXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRCUVVOMFJpeERRVUZETzBGQlEwUTdRVUZEUVN4SlFVRkJMR2RDUVVGakxFZEJRVWRETEdsQ1FVRmxPenM3T3pzN096czdPenRCUTFCb1F5eFRRVUZUUXl4WFFVRlRMRU5CUVVNc1RVRkJUU3hGUVVGRkxFdEJRVXNzUlVGQlJUdEJRVU5zUXl4RlFVRkZMRWxCUVVrc1MwRkJTeXhIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU5vUWl4TlFVRk5MRTFCUVUwc1IwRkJSeXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETzBGQlF6ZENPMEZCUTBFc1JVRkJSU3hMUVVGTExFdEJRVXNzUzBGQlN5eEhRVUZITEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRMjVETEVWQlFVVXNUMEZCVHl4RlFVRkZMRXRCUVVzc1IwRkJSeXhOUVVGTkxFVkJRVVU3UVVGRE0wSXNTVUZCU1N4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMEZCUTJwRExFZEJRVWM3UVVGRFNDeEZRVUZGTEU5QlFVOHNTMEZCU3l4RFFVRkRPMEZCUTJZc1EwRkJRenRCUVVORU8wRkJRMEVzU1VGQlFTeFZRVUZqTEVkQlFVZEJMRmRCUVZNN08wRkRia0l4UWl4SlFVRkplRU1zVlVGQlVTeEhRVUZITlVJc1ZVRkJjVUlzUTBGQlF6dEJRVU55UXp0QlFVTkJPMEZCUTBFc1NVRkJTU3haUVVGWkxFZEJRVWNzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXp0QlFVTnFRenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hKUVVGSmNVVXNXVUZCVlN4SlFVRkpMRmRCUVZjN1FVRkROMElzUlVGQlJTeFRRVUZUTEUxQlFVMHNSMEZCUnl4RlFVRkZPMEZCUTNSQ0xFVkJRVVVzVDBGQlR5eFRRVUZUTEV0QlFVc3NSVUZCUlR0QlFVTjZRaXhKUVVGSkxFbEJRVWtzUTBGQlEzcERMRlZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJUdEJRVU14UWl4TlFVRk5MRTlCUVU4c1JVRkJSU3hEUVVGRE8wRkJRMmhDTEV0QlFVczdRVUZEVEN4SlFVRkpMRWxCUVVrc1dVRkJXU3hGUVVGRk8wRkJRM1JDTEUxQlFVMHNUMEZCVHl4WlFVRlpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03UVVGRGFrTXNTMEZCU3p0QlFVTk1MRWxCUVVrc1RVRkJUU3hEUVVGRExGTkJRVk1zUjBGQlJ5eExRVUZMTEVOQlFVTTdRVUZETjBJc1NVRkJTU3hKUVVGSkxFMUJRVTBzUjBGQlJ5eEpRVUZKTEUxQlFVMHNRMEZCUXp0QlFVTTFRaXhKUVVGSkxFMUJRVTBzUTBGQlF5eFRRVUZUTEVkQlFVY3NVMEZCVXl4RFFVRkRPMEZCUTJwRExFbEJRVWtzVDBGQlR5eE5RVUZOTEVOQlFVTTdRVUZEYkVJc1IwRkJSeXhEUVVGRE8wRkJRMG9zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0QlFVTk1PMEZCUTBFc1NVRkJRU3hYUVVGakxFZEJRVWQ1UXl4WlFVRlZPenM3T3pzN096czdPenRCUTNKQ00wSXNVMEZCVTBNc1UwRkJUeXhEUVVGRExFbEJRVWtzUlVGQlJTeFRRVUZUTEVWQlFVVTdRVUZEYkVNc1JVRkJSU3hQUVVGUExGTkJRVk1zUjBGQlJ5eEZRVUZGTzBGQlEzWkNMRWxCUVVrc1QwRkJUeXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRhRU1zUjBGQlJ5eERRVUZETzBGQlEwb3NRMEZCUXp0QlFVTkVPMEZCUTBFc1NVRkJRU3hSUVVGakxFZEJRVWRCTEZOQlFVODdPMEZEWkhoQ0xFbEJRVWxCTEZOQlFVOHNSMEZCUjNSRkxGRkJRWEZDTEVOQlFVTTdRVUZEY0VNN1FVRkRRVHRCUVVOQkxFbEJRVWwxUlN4alFVRlpMRWRCUVVkRUxGTkJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTXNZMEZCWXl4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRE8wRkJRekZFTzBGQlEwRXNTVUZCUVN4aFFVRmpMRWRCUVVkRExHTkJRVms3T3pzN1FVTktOMElzU1VGQlNXeEVMR0ZCUVZjc1IwRkJSeXhOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETzBGQlEyNURPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRiVVFzWVVGQlZ5eERRVUZETEV0QlFVc3NSVUZCUlR0QlFVTTFRaXhGUVVGRkxFbEJRVWtzU1VGQlNTeEhRVUZITEV0QlFVc3NTVUZCU1N4TFFVRkxMRU5CUVVNc1YwRkJWenRCUVVOMlF5eE5RVUZOTEV0QlFVc3NSMEZCUnl4RFFVRkRMRTlCUVU4c1NVRkJTU3hKUVVGSkxGVkJRVlVzU1VGQlNTeEpRVUZKTEVOQlFVTXNVMEZCVXl4TFFVRkxia1FzWVVGQlZ5eERRVUZETzBGQlF6TkZPMEZCUTBFc1JVRkJSU3hQUVVGUExFdEJRVXNzUzBGQlN5eExRVUZMTEVOQlFVTTdRVUZEZWtJc1EwRkJRenRCUVVORU8wRkJRMEVzU1VGQlFTeFpRVUZqTEVkQlFVZHRSQ3hoUVVGWE96dEJRMnBDTlVJc1NVRkJTVWdzV1VGQlZTeEhRVUZIY2tVc1YwRkJkMEk3UVVGRGVrTXNTVUZCU1hWRkxHTkJRVmtzUjBGQlJ5OUVMR0ZCUVRCQ08wRkJRemRETEVsQlFVbG5SU3hoUVVGWExFZEJRVWN2UkN4WlFVRjVRaXhEUVVGRE8wRkJRelZETzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFRRVUZUWjBVc2FVSkJRV1VzUTBGQlF5eE5RVUZOTEVWQlFVVTdRVUZEYWtNc1JVRkJSU3hQUVVGUExFTkJRVU1zVDBGQlR5eE5RVUZOTEVOQlFVTXNWMEZCVnl4SlFVRkpMRlZCUVZVc1NVRkJTU3hEUVVGRFJDeGhRVUZYTEVOQlFVTXNUVUZCVFN4RFFVRkRPMEZCUTNwRkxFMUJRVTFJTEZsQlFWVXNRMEZCUTBVc1kwRkJXU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzBGQlEzUkRMRTFCUVUwc1JVRkJSU3hEUVVGRE8wRkJRMVFzUTBGQlF6dEJRVU5FTzBGQlEwRXNTVUZCUVN4blFrRkJZeXhIUVVGSFJTeHBRa0ZCWlRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRFQyaERMRk5CUVZORExHTkJRVmtzUTBGQlF5eExRVUZMTEVWQlFVVTdRVUZETjBJc1JVRkJSU3hQUVVGUExFdEJRVXNzU1VGQlNTeEpRVUZKTEVsQlFVa3NUMEZCVHl4TFFVRkxMRWxCUVVrc1VVRkJVU3hEUVVGRE8wRkJRMjVFTEVOQlFVTTdRVUZEUkR0QlFVTkJMRWxCUVVFc1kwRkJZeXhIUVVGSFFTeGpRVUZaT3p0QlF6VkNOMElzU1VGQlNTOURMRmxCUVZVc1IwRkJSek5DTEZkQlFYZENPMEZCUTNwRExFbEJRVWt3UlN4alFVRlpMRWRCUVVkc1JTeGpRVUY1UWl4RFFVRkRPMEZCUXpkRE8wRkJRMEU3UVVGRFFTeEpRVUZKYlVVc1UwRkJUeXhIUVVGSExHOUNRVUZ2UWl4RFFVRkRPMEZCUTI1RE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hUUVVGVFF5eHBRa0ZCWlN4RFFVRkRMRXRCUVVzc1JVRkJSVHRCUVVOb1F5eEZRVUZGTEU5QlFVOUdMR05CUVZrc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTOURMRmxCUVZVc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNXZEVMRk5CUVU4c1EwRkJRenRCUVVNM1JDeERRVUZETzBGQlEwUTdRVUZEUVN4SlFVRkJMR2RDUVVGakxFZEJRVWRETEdsQ1FVRmxPenRCUTJwQ2FFTXNTVUZCU1N4bFFVRmxMRWRCUVVjMVJTeG5Ra0ZCTmtJN1FVRkRia1FzU1VGQlNUQkZMR05CUVZrc1IwRkJSMnhGTEdOQlFYbENMRU5CUVVNN1FVRkROME03UVVGRFFUdEJRVU5CTEVsQlFVbGhMR0ZCUVZjc1IwRkJSeXhOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETzBGQlEyNURPMEZCUTBFN1FVRkRRU3hKUVVGSlF5eG5Ra0ZCWXl4SFFVRkhSQ3hoUVVGWExFTkJRVU1zWTBGQll5eERRVUZETzBGQlEyaEVPMEZCUTBFN1FVRkRRU3hKUVVGSmQwUXNjMEpCUVc5Q0xFZEJRVWQ0UkN4aFFVRlhMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTTdRVUZETlVRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hKUVVGSmVVUXNZVUZCVnl4SFFVRkhMR1ZCUVdVc1EwRkJReXhYUVVGWExFVkJRVVVzVDBGQlR5eFRRVUZUTEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1IwRkJSeXhsUVVGbExFZEJRVWNzVTBGQlV5eExRVUZMTEVWQlFVVTdRVUZETVVjc1JVRkJSU3hQUVVGUFNpeGpRVUZaTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVsd1JDeG5Ra0ZCWXl4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFVkJRVVVzVVVGQlVTeERRVUZETzBGQlEzQkZMRWxCUVVrc1EwRkJRM1ZFTEhOQ1FVRnZRaXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVNN1FVRkRhRVFzUTBGQlF5eERRVUZETzBGQlEwWTdRVUZEUVN4SlFVRkJMR0ZCUVdNc1IwRkJSME1zWVVGQlZ6czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTmFOVUlzU1VGQlNVTXNVMEZCVHl4SFFVRkhMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU03UVVGRE5VSTdRVUZEUVN4SlFVRkJMRk5CUVdNc1IwRkJSMEVzVTBGQlR6czdPenRCUTNoQ2VFSXNTVUZCU1VNc2EwSkJRV2RDTEVkQlFVY3NaMEpCUVdkQ0xFTkJRVU03UVVGRGVFTTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNVMEZCVTBNc1ZVRkJVU3hEUVVGRExFdEJRVXNzUlVGQlJUdEJRVU42UWl4RlFVRkZMRTlCUVU4c1QwRkJUeXhMUVVGTExFbEJRVWtzVVVGQlVUdEJRVU5xUXl4SlFVRkpMRXRCUVVzc1IwRkJSeXhEUVVGRExFTkJRVU1zU1VGQlNTeExRVUZMTEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hMUVVGTExFbEJRVWxFTEd0Q1FVRm5RaXhEUVVGRE8wRkJRemxFTEVOQlFVTTdRVUZEUkR0QlFVTkJMRWxCUVVFc1ZVRkJZeXhIUVVGSFF5eFZRVUZST3p0QlEyeERla0lzU1VGQlNXeEVMRmxCUVZVc1IwRkJSeTlDTEZsQlFYVkNPMEZCUTNoRExFbEJRVWxwUml4VlFVRlJMRWRCUVVkNlJTeFZRVUZ4UWl4RFFVRkRPMEZCUTNKRE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hUUVVGVE1FVXNZVUZCVnl4RFFVRkRMRXRCUVVzc1JVRkJSVHRCUVVNMVFpeEZRVUZGTEU5QlFVOHNTMEZCU3l4SlFVRkpMRWxCUVVrc1NVRkJTVVFzVlVGQlVTeERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRGJFUXNXVUZCVlN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8wRkJRM1pGTEVOQlFVTTdRVUZEUkR0QlFVTkJMRWxCUVVFc1lVRkJZeXhIUVVGSGJVUXNZVUZCVnpzN1FVTm9RelZDTEVsQlFVbEJMR0ZCUVZjc1IwRkJSMnhHTEdGQlFYZENPMEZCUXpGRExFbEJRVWt3UlN4alFVRlpMRWRCUVVkc1JTeGpRVUY1UWl4RFFVRkRPMEZCUXpkRE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hUUVVGVE1rVXNiVUpCUVdsQ0xFTkJRVU1zUzBGQlN5eEZRVUZGTzBGQlEyeERMRVZCUVVVc1QwRkJUMVFzWTBGQldTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpVU3hoUVVGWExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdRVUZEYmtRc1EwRkJRenRCUVVORU8wRkJRMEVzU1VGQlFTeHRRa0ZCWXl4SFFVRkhReXh0UWtGQmFVSTdPenM3T3pzN096czdPenM3T3pzN096dEJRMjVDYkVNc1UwRkJVeXhUUVVGVExFZEJRVWM3UVVGRGNrSXNSVUZCUlN4UFFVRlBMRXRCUVVzc1EwRkJRenRCUVVObUxFTkJRVU03UVVGRFJEdEJRVU5CTEVsQlFVRXNWMEZCWXl4SFFVRkhMRk5CUVZNN096dERRMnBDTVVJc1NVRkJTU3hKUVVGSkxFZEJRVWR1Uml4TFFVRnJRanRMUVVONlFpeFRRVUZUTEVkQlFVZFJMRmRCUVhOQ0xFTkJRVU03UVVGRGRrTTdRVUZEUVR0QlFVTkJMRU5CUVVFc1NVRkJTU3hYUVVGWExFZEJRV2xETEU5QlFVOHNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhSUVVGUkxFbEJRVWtzVDBGQlR5eERRVUZETzBGQlEzaEdPMEZCUTBFN1FVRkRRU3hEUVVGQkxFbEJRVWtzVlVGQlZTeEhRVUZITEZkQlFWY3NTVUZCU1N4UlFVRmhMRWxCUVVrc1VVRkJVU3hKUVVGSkxFMUJRVTBzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRWxCUVVrc1RVRkJUU3hEUVVGRE8wRkJRMnhITzBGQlEwRTdRMEZEUVN4SlFVRkpMR0ZCUVdFc1IwRkJSeXhWUVVGVkxFbEJRVWtzVlVGQlZTeERRVUZETEU5QlFVOHNTMEZCU3l4WFFVRlhMRU5CUVVNN1FVRkRja1U3UVVGRFFUdERRVU5CTEVsQlFVa3NUVUZCVFN4SFFVRkhMR0ZCUVdFc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEZOQlFWTXNRMEZCUXp0QlFVTnlSRHRCUVVOQk8wTkJRMEVzU1VGQlNTeGpRVUZqTEVkQlFVY3NUVUZCVFN4SFFVRkhMRTFCUVUwc1EwRkJReXhSUVVGUkxFZEJRVWNzVTBGQlV5eERRVUZETzBGQlF6RkVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRU5CUVVFc1NVRkJTU3hSUVVGUkxFZEJRVWNzWTBGQll5eEpRVUZKTEZOQlFWTXNRMEZCUXp0QlFVTXpRenRCUVVOQkxFTkJRVUVzVFVGQlFTeERRVUZCTEU5QlFVRXNSMEZCYVVJc1VVRkJVU3hEUVVGQk96czdRVU55UTNwQ0xFbEJRVWx0UWl4WlFVRlZMRWRCUVVjelFpeFhRVUYzUWp0QlFVTjZReXhKUVVGSmRVVXNZMEZCV1N4SFFVRkhMMFFzWVVGQk1FSTdRVUZETjBNc1NVRkJTV3RGTEdOQlFWa3NSMEZCUjJwRkxHTkJRWGxDTEVOQlFVTTdRVUZETjBNN1FVRkRRVHRCUVVOQkxFbEJRVWt5UlN4WFFVRlRMRWRCUVVjc2FVSkJRV2xDTEVOQlFVTTdRVUZEYkVNN1FVRkRRVHRCUVVOQkxFbEJRVWtzVTBGQlV5eEhRVUZITEZGQlFWRXNRMEZCUXl4VFFVRlRPMEZCUTJ4RExFbEJRVWt2UkN4aFFVRlhMRWRCUVVjc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF6dEJRVU51UXp0QlFVTkJPMEZCUTBFc1NVRkJTU3haUVVGWkxFZEJRVWNzVTBGQlV5eERRVUZETEZGQlFWRXNRMEZCUXp0QlFVTjBRenRCUVVOQk8wRkJRMEVzU1VGQlNVTXNaMEpCUVdNc1IwRkJSMFFzWVVGQlZ5eERRVUZETEdOQlFXTXNRMEZCUXp0QlFVTm9SRHRCUVVOQk8wRkJRMEVzU1VGQlNTeG5Ra0ZCWjBJc1IwRkJSeXhaUVVGWkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMEZCUTJwRU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFRRVUZUWjBVc1pVRkJZU3hEUVVGRExFdEJRVXNzUlVGQlJUdEJRVU01UWl4RlFVRkZMRWxCUVVrc1EwRkJRMWdzWTBGQldTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMME1zV1VGQlZTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkplVVFzVjBGQlV5eEZRVUZGTzBGQlF6bEVMRWxCUVVrc1QwRkJUeXhMUVVGTExFTkJRVU03UVVGRGFrSXNSMEZCUnp0QlFVTklMRVZCUVVVc1NVRkJTU3hMUVVGTExFZEJRVWRpTEdOQlFWa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRCUVVOc1F5eEZRVUZGTEVsQlFVa3NTMEZCU3l4TFFVRkxMRWxCUVVrc1JVRkJSVHRCUVVOMFFpeEpRVUZKTEU5QlFVOHNTVUZCU1N4RFFVRkRPMEZCUTJoQ0xFZEJRVWM3UVVGRFNDeEZRVUZGTEVsQlFVa3NTVUZCU1N4SFFVRkhha1FzWjBKQlFXTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRkxHRkJRV0VzUTBGQlF5eEpRVUZKTEV0QlFVc3NRMEZCUXl4WFFVRlhMRU5CUVVNN1FVRkROVVVzUlVGQlJTeFBRVUZQTEU5QlFVOHNTVUZCU1N4SlFVRkpMRlZCUVZVc1NVRkJTU3hKUVVGSkxGbEJRVmtzU1VGQlNUdEJRVU14UkN4SlFVRkpMRmxCUVZrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NaMEpCUVdkQ0xFTkJRVU03UVVGRGFFUXNRMEZCUXp0QlFVTkVPMEZCUTBFc1NVRkJRU3hsUVVGakxFZEJRVWNyUkN4bFFVRmhPenRCUXpkRU9VSXNTVUZCU1RGRUxGbEJRVlVzUjBGQlJ6TkNMRmRCUVhkQ08wRkJRM3BETEVsQlFVbHBSaXhWUVVGUkxFZEJRVWQ2UlN4VlFVRnhRanRCUVVOd1F5eEpRVUZKYTBVc1kwRkJXU3hIUVVGSGFrVXNZMEZCZVVJc1EwRkJRenRCUVVNM1F6dEJRVU5CTzBGQlEwRXNTVUZCU1d0RkxGTkJRVThzUjBGQlJ5eHZRa0ZCYjBJN1FVRkRiRU1zU1VGQlNWY3NWVUZCVVN4SFFVRkhMR2RDUVVGblFqdEJRVU12UWl4SlFVRkpReXhUUVVGUExFZEJRVWNzYTBKQlFXdENPMEZCUTJoRExFbEJRVWxETEZOQlFVOHNSMEZCUnl4bFFVRmxPMEZCUXpkQ0xFbEJRVWxETEZWQlFWRXNSMEZCUnl4blFrRkJaMEk3UVVGREwwSXNTVUZCU1RWRUxGTkJRVThzUjBGQlJ5eHRRa0ZCYlVJN1FVRkRha01zU1VGQlNUWkVMRkZCUVUwc1IwRkJSeXhqUVVGak8wRkJRek5DTEVsQlFVbERMRmRCUVZNc1IwRkJSeXhwUWtGQmFVSTdRVUZEYWtNc1NVRkJTVkFzVjBGQlV5eEhRVUZITEdsQ1FVRnBRanRCUVVOcVF5eEpRVUZKVVN4WFFVRlRMRWRCUVVjc2FVSkJRV2xDTzBGQlEycERMRWxCUVVsRExGRkJRVTBzUjBGQlJ5eGpRVUZqTzBGQlF6TkNMRWxCUVVsRExGZEJRVk1zUjBGQlJ5eHBRa0ZCYVVJN1FVRkRha01zU1VGQlNVTXNXVUZCVlN4SFFVRkhMR3RDUVVGclFpeERRVUZETzBGQlEzQkRPMEZCUTBFc1NVRkJTVU1zWjBKQlFXTXNSMEZCUnl4elFrRkJjMEk3UVVGRE0wTXNTVUZCU1VNc1lVRkJWeXhIUVVGSExHMUNRVUZ0UWp0QlFVTnlReXhKUVVGSlF5eFpRVUZWTEVkQlFVY3NkVUpCUVhWQ08wRkJRM2hETEVsQlFVbERMRmxCUVZVc1IwRkJSeXgxUWtGQmRVSTdRVUZEZUVNc1NVRkJTVU1zVTBGQlR5eEhRVUZITEc5Q1FVRnZRanRCUVVOc1F5eEpRVUZKUXl4VlFVRlJMRWRCUVVjc2NVSkJRWEZDTzBGQlEzQkRMRWxCUVVsRExGVkJRVkVzUjBGQlJ5eHhRa0ZCY1VJN1FVRkRjRU1zU1VGQlNVTXNWVUZCVVN4SFFVRkhMSEZDUVVGeFFqdEJRVU53UXl4SlFVRkpReXhwUWtGQlpTeEhRVUZITERSQ1FVRTBRanRCUVVOc1JDeEpRVUZKUXl4WFFVRlRMRWRCUVVjc2MwSkJRWE5DTzBGQlEzUkRMRWxCUVVsRExGZEJRVk1zUjBGQlJ5eHpRa0ZCYzBJc1EwRkJRenRCUVVOMlF6dEJRVU5CTzBGQlEwRXNTVUZCU1N4alFVRmpMRWRCUVVjc1JVRkJSU3hEUVVGRE8wRkJRM2hDTEdOQlFXTXNRMEZCUTFJc1dVRkJWU3hEUVVGRExFZEJRVWNzWTBGQll5eERRVUZEUXl4WlFVRlZMRU5CUVVNN1FVRkRka1FzWTBGQll5eERRVUZEUXl4VFFVRlBMRU5CUVVNc1IwRkJSeXhqUVVGakxFTkJRVU5ETEZWQlFWRXNRMEZCUXp0QlFVTnNSQ3hqUVVGakxFTkJRVU5ETEZWQlFWRXNRMEZCUXl4SFFVRkhMR05CUVdNc1EwRkJRME1zVlVGQlVTeERRVUZETzBGQlEyNUVMR05CUVdNc1EwRkJRME1zYVVKQlFXVXNRMEZCUXl4SFFVRkhMR05CUVdNc1EwRkJRME1zVjBGQlV5eERRVUZETzBGQlF6TkVMR05CUVdNc1EwRkJRME1zVjBGQlV5eERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRPMEZCUTJwRExHTkJRV01zUTBGQlF5OUNMRk5CUVU4c1EwRkJReXhIUVVGSExHTkJRV01zUTBGQlExY3NWVUZCVVN4RFFVRkRPMEZCUTJ4RUxHTkJRV01zUTBGQlExVXNaMEpCUVdNc1EwRkJReXhIUVVGSExHTkJRV01zUTBGQlExUXNVMEZCVHl4RFFVRkRPMEZCUTNoRUxHTkJRV01zUTBGQlExVXNZVUZCVnl4RFFVRkRMRWRCUVVjc1kwRkJZeXhEUVVGRFZDeFRRVUZQTEVOQlFVTTdRVUZEY2tRc1kwRkJZeXhEUVVGRFF5eFZRVUZSTEVOQlFVTXNSMEZCUnl4alFVRmpMRU5CUVVNMVJDeFRRVUZQTEVOQlFVTTdRVUZEYkVRc1kwRkJZeXhEUVVGRE5rUXNVVUZCVFN4RFFVRkRMRWRCUVVjc1kwRkJZeXhEUVVGRFF5eFhRVUZUTEVOQlFVTTdRVUZEYkVRc1kwRkJZeXhEUVVGRFVDeFhRVUZUTEVOQlFVTXNSMEZCUnl4alFVRmpMRU5CUVVOUkxGZEJRVk1zUTBGQlF6dEJRVU55UkN4alFVRmpMRU5CUVVORExGRkJRVTBzUTBGQlF5eEhRVUZITEdOQlFXTXNRMEZCUTBNc1YwRkJVeXhEUVVGRE8wRkJRMnhFTEdOQlFXTXNRMEZCUTBNc1dVRkJWU3hEUVVGRExFZEJRVWNzUzBGQlN5eERRVUZETzBGQlEyNURPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRXU3hyUWtGQlowSXNRMEZCUXl4TFFVRkxMRVZCUVVVN1FVRkRha01zUlVGQlJTeFBRVUZQYWtNc1kwRkJXU3hEUVVGRExFdEJRVXNzUTBGQlF6dEJRVU0xUWl4SlFVRkpUeXhWUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhqUVVGakxFTkJRVU4wUkN4WlFVRlZMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU5zUlN4RFFVRkRPMEZCUTBRN1FVRkRRU3hKUVVGQkxHbENRVUZqTEVkQlFVZG5SaXhyUWtGQlowSTdPenM3T3pzN096czdPenM3T3pzN1EwTndSR3BETEZOQlFWTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1JVRkJSVHRIUVVOMlFpeFBRVUZQTEZOQlFWTXNTMEZCU3l4RlFVRkZPMEZCUTNwQ0xFdEJRVWtzVDBGQlR5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRka0lzU1VGQlJ5eERRVUZETzBWQlEwZzdRVUZEUkR0QlFVTkJMRU5CUVVFc1ZVRkJZeXhIUVVGSExGTkJRVk1zUTBGQlFUczdPenM3T3p0RFEySXhRaXhKUVVGSkxGVkJRVlVzUjBGQlJ6TkhMRmRCUVhkQ0xFTkJRVU03UVVGRE1VTTdRVUZEUVR0QlFVTkJMRU5CUVVFc1NVRkJTU3hYUVVGWExFZEJRV2xETEU5QlFVOHNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhSUVVGUkxFbEJRVWtzVDBGQlR5eERRVUZETzBGQlEzaEdPMEZCUTBFN1FVRkRRU3hEUVVGQkxFbEJRVWtzVlVGQlZTeEhRVUZITEZkQlFWY3NTVUZCU1N4UlFVRmhMRWxCUVVrc1VVRkJVU3hKUVVGSkxFMUJRVTBzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRWxCUVVrc1RVRkJUU3hEUVVGRE8wRkJRMnhITzBGQlEwRTdRMEZEUVN4SlFVRkpMR0ZCUVdFc1IwRkJSeXhWUVVGVkxFbEJRVWtzVlVGQlZTeERRVUZETEU5QlFVOHNTMEZCU3l4WFFVRlhMRU5CUVVNN1FVRkRja1U3UVVGRFFUdEJRVU5CTEVOQlFVRXNTVUZCU1N4WFFVRlhMRWRCUVVjc1lVRkJZU3hKUVVGSkxGVkJRVlVzUTBGQlF5eFBRVUZQTEVOQlFVTTdRVUZEZEVRN1FVRkRRVHREUVVOQkxFbEJRVWtzVVVGQlVTeEpRVUZKTEZkQlFWYzdRVUZETTBJc1IwRkJSU3hKUVVGSk8wRkJRMDQ3UVVGRFFTeExRVUZKTEVsQlFVa3NTMEZCU3l4SFFVRkhMRlZCUVZVc1NVRkJTU3hWUVVGVkxFTkJRVU1zVDBGQlR5eEpRVUZKTEZWQlFWVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETzBGQlEzSkdPMHRCUTBrc1NVRkJTU3hMUVVGTExFVkJRVVU3VDBGRFZDeFBRVUZQTEV0QlFVc3NRMEZCUXp0TlFVTmtPMEZCUTB3N1FVRkRRVHRCUVVOQkxFdEJRVWtzVDBGQlR5eFhRVUZYTEVsQlFVa3NWMEZCVnl4RFFVRkRMRTlCUVU4c1NVRkJTU3hYUVVGWExFTkJRVU1zVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMEZCUXpkRkxFbEJRVWNzUTBGQlF5eFBRVUZQTEVOQlFVTXNSVUZCUlN4RlFVRkZPMFZCUTJZc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGRFREdEJRVU5CTEVOQlFVRXNUVUZCUVN4RFFVRkJMRTlCUVVFc1IwRkJhVUlzVVVGQlVTeERRVUZCT3pzN1FVTTNRbnBDTEVsQlFVa3NaMEpCUVdkQ0xFZEJRVWRCTEdsQ1FVRTRRanRCUVVOeVJDeEpRVUZKTkVjc1YwRkJVeXhIUVVGSGNFY3NhVUpCUVhWQ0xFVkJRVUU3UVVGRGRrTXNTVUZCU1hGSExGVkJRVkVzUjBGQlIzQkhMR2xDUVVGelFpeERRVUZETzBGQlEzUkRPMEZCUTBFN1FVRkRRU3hKUVVGSkxHZENRVUZuUWl4SFFVRkhiMGNzVlVGQlVTeEpRVUZKUVN4VlFVRlJMRU5CUVVNc1dVRkJXU3hEUVVGRE8wRkJRM3BFTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVsQlFVbERMR05CUVZrc1IwRkJSeXhuUWtGQlowSXNSMEZCUjBZc1YwRkJVeXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRWRCUVVjc1owSkJRV2RDTEVOQlFVTTdRVUZEY2tZN1FVRkRRU3hKUVVGQkxHTkJRV01zUjBGQlIwVXNZMEZCV1RzN096czdPenM3T3pzN1FVTnNRamRDTEZOQlFWTkRMRk5CUVU4c1EwRkJReXhOUVVGTkxFVkJRVVVzUjBGQlJ5eEZRVUZGTzBGQlF6bENMRVZCUVVVc1NVRkJTU3hIUVVGSExFdEJRVXNzWVVGQllTeEpRVUZKTEU5QlFVOHNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExGVkJRVlVzUlVGQlJUdEJRVU5zUlN4SlFVRkpMRTlCUVU4N1FVRkRXQ3hIUVVGSE8wRkJRMGc3UVVGRFFTeEZRVUZGTEVsQlFVa3NSMEZCUnl4SlFVRkpMRmRCUVZjc1JVRkJSVHRCUVVNeFFpeEpRVUZKTEU5QlFVODdRVUZEV0N4SFFVRkhPMEZCUTBnN1FVRkRRU3hGUVVGRkxFOUJRVThzVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUTNKQ0xFTkJRVU03UVVGRFJEdEJRVU5CTEVsQlFVRXNVVUZCWXl4SFFVRkhRU3hUUVVGUE96dEJRM0JDZUVJc1NVRkJTV3hFTEdsQ1FVRmxMRWRCUVVjM1JDeG5Ra0ZCTmtJN1FVRkRia1FzU1VGQlNVVXNTVUZCUlN4SFFVRkhUU3hKUVVGbExFTkJRVU03UVVGRGVrSTdRVUZEUVR0QlFVTkJMRWxCUVVsaExHRkJRVmNzUjBGQlJ5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRPMEZCUTI1RE8wRkJRMEU3UVVGRFFTeEpRVUZKUXl4blFrRkJZeXhIUVVGSFJDeGhRVUZYTEVOQlFVTXNZMEZCWXl4RFFVRkRPMEZCUTJoRU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFRRVUZUTWtZc1lVRkJWeXhEUVVGRExFMUJRVTBzUlVGQlJTeEhRVUZITEVWQlFVVXNTMEZCU3l4RlFVRkZPMEZCUTNwRExFVkJRVVVzU1VGQlNTeFJRVUZSTEVkQlFVY3NUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRemRDTEVWQlFVVXNTVUZCU1N4RlFVRkZNVVlzWjBKQlFXTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRkxFZEJRVWNzUTBGQlF5eEpRVUZKY0VJc1NVRkJSU3hEUVVGRExGRkJRVkVzUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXp0QlFVTm9SU3hQUVVGUExFdEJRVXNzUzBGQlN5eFRRVUZUTEVsQlFVa3NSVUZCUlN4SFFVRkhMRWxCUVVrc1RVRkJUU3hEUVVGRExFTkJRVU1zUlVGQlJUdEJRVU5xUkN4SlFVRkpNa1FzYVVKQlFXVXNRMEZCUXl4TlFVRk5MRVZCUVVVc1IwRkJSeXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzBGQlEzaERMRWRCUVVjN1FVRkRTQ3hEUVVGRE8wRkJRMFE3UVVGRFFTeEpRVUZCTEZsQlFXTXNSMEZCUjIxRUxHRkJRVmM3TzBGRE0wSTFRaXhKUVVGSlFTeGhRVUZYTEVkQlFVZG9TQ3haUVVGNVFqdEJRVU16UXl4SlFVRkpOa1FzYVVKQlFXVXNSMEZCUjNKRUxHZENRVUUyUWl4RFFVRkRPMEZCUTNCRU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFRRVUZUZVVjc1dVRkJWU3hEUVVGRExFMUJRVTBzUlVGQlJTeExRVUZMTEVWQlFVVXNUVUZCVFN4RlFVRkZMRlZCUVZVc1JVRkJSVHRCUVVOMlJDeEZRVUZGTEVsQlFVa3NTMEZCU3l4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRE8wRkJRM1JDTEVWQlFVVXNUVUZCVFN4TFFVRkxMRTFCUVUwc1IwRkJSeXhGUVVGRkxFTkJRVU1zUTBGQlF6dEJRVU14UWp0QlFVTkJMRVZCUVVVc1NVRkJTU3hMUVVGTExFZEJRVWNzUTBGQlF5eERRVUZETzBGQlEyaENMRTFCUVUwc1RVRkJUU3hIUVVGSExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTTdRVUZETlVJN1FVRkRRU3hGUVVGRkxFOUJRVThzUlVGQlJTeExRVUZMTEVkQlFVY3NUVUZCVFN4RlFVRkZPMEZCUXpOQ0xFbEJRVWtzU1VGQlNTeEhRVUZITEVkQlFVY3NTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8wRkJRek5DTzBGQlEwRXNTVUZCU1N4SlFVRkpMRkZCUVZFc1IwRkJSeXhWUVVGVk8wRkJRemRDTEZGQlFWRXNWVUZCVlN4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1IwRkJSeXhGUVVGRkxFMUJRVTBzUlVGQlJTeE5RVUZOTEVOQlFVTTdRVUZEYWtVc1VVRkJVU3hUUVVGVExFTkJRVU03UVVGRGJFSTdRVUZEUVN4SlFVRkpMRWxCUVVrc1VVRkJVU3hMUVVGTExGTkJRVk1zUlVGQlJUdEJRVU5vUXl4TlFVRk5MRkZCUVZFc1IwRkJSeXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZETjBJc1MwRkJTenRCUVVOTUxFbEJRVWtzU1VGQlNTeExRVUZMTEVWQlFVVTdRVUZEWml4TlFVRk5jRVFzYVVKQlFXVXNRMEZCUXl4TlFVRk5MRVZCUVVVc1IwRkJSeXhGUVVGRkxGRkJRVkVzUTBGQlF5eERRVUZETzBGQlF6ZERMRXRCUVVzc1RVRkJUVHRCUVVOWUxFMUJRVTF0UkN4aFFVRlhMRU5CUVVNc1RVRkJUU3hGUVVGRkxFZEJRVWNzUlVGQlJTeFJRVUZSTEVOQlFVTXNRMEZCUXp0QlFVTjZReXhMUVVGTE8wRkJRMHdzUjBGQlJ6dEJRVU5JTEVWQlFVVXNUMEZCVHl4TlFVRk5MRU5CUVVNN1FVRkRhRUlzUTBGQlF6dEJRVU5FTzBGQlEwRXNTVUZCUVN4WFFVRmpMRWRCUVVkRExGbEJRVlU3T3pzN096czdPenM3T3p0QlF6bENNMElzVTBGQlUwTXNWMEZCVXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hSUVVGUkxFVkJRVVU3UVVGRGFFTXNSVUZCUlN4SlFVRkpMRXRCUVVzc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRGFFSXNUVUZCVFN4TlFVRk5MRWRCUVVjc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBGQlEzaENPMEZCUTBFc1JVRkJSU3hQUVVGUExFVkJRVVVzUzBGQlN5eEhRVUZITEVOQlFVTXNSVUZCUlR0QlFVTjBRaXhKUVVGSkxFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4UlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03UVVGRGNFTXNSMEZCUnp0QlFVTklMRVZCUVVVc1QwRkJUeXhOUVVGTkxFTkJRVU03UVVGRGFFSXNRMEZCUXp0QlFVTkVPMEZCUTBFc1NVRkJRU3hWUVVGakxFZEJRVWRCTEZkQlFWTTdPenM3UVVOc1FqRkNMRWxCUVVrc1owSkJRV2RDTEVkQlFVY3NaMEpCUVdkQ0xFTkJRVU03UVVGRGVFTTdRVUZEUVR0QlFVTkJMRWxCUVVrc1VVRkJVU3hIUVVGSExHdENRVUZyUWl4RFFVRkRPMEZCUTJ4RE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk5ETEZOQlFVOHNRMEZCUXl4TFFVRkxMRVZCUVVVc1RVRkJUU3hGUVVGRk8wRkJRMmhETEVWQlFVVXNTVUZCU1N4SlFVRkpMRWRCUVVjc1QwRkJUeXhMUVVGTExFTkJRVU03UVVGRE1VSXNSVUZCUlN4TlFVRk5MRWRCUVVjc1RVRkJUU3hKUVVGSkxFbEJRVWtzUjBGQlJ5eG5Ra0ZCWjBJc1IwRkJSeXhOUVVGTkxFTkJRVU03UVVGRGRFUTdRVUZEUVN4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRExFMUJRVTA3UVVGRGFrSXNTMEZCU3l4SlFVRkpMRWxCUVVrc1VVRkJVVHRCUVVOeVFpeFBRVUZQTEVsQlFVa3NTVUZCU1N4UlFVRlJMRWxCUVVrc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTJwRUxGTkJRVk1zUzBGQlN5eEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRXRCUVVzc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEV0QlFVc3NSMEZCUnl4TlFVRk5MRU5CUVVNc1EwRkJRenRCUVVONlJDeERRVUZETzBGQlEwUTdRVUZEUVN4SlFVRkJMRkZCUVdNc1IwRkJSMEVzVTBGQlR6czdRVU40UW5oQ0xFbEJRVWtzVTBGQlV5eEhRVUZIYmtnc1ZVRkJkVUk3UVVGRGRrTXNTVUZCU1RoRkxHRkJRVmNzUjBGQlIzUkZMR0ZCUVhkQ08wRkJRekZETEVsQlFVbDFSU3hUUVVGUExFZEJRVWQwUlN4VFFVRnZRanRCUVVOc1F5eEpRVUZKTWtjc1ZVRkJVU3hIUVVGSE1VY3NhMEpCUVhGQ08wRkJRM0JETEVsQlFVbDVSeXhUUVVGUExFZEJRVWQ0Unl4UlFVRnhRanRCUVVOdVF5eEpRVUZKYlVjc1kwRkJXU3hIUVVGSGNFUXNZMEZCZVVJc1EwRkJRenRCUVVNM1F6dEJRVU5CTzBGQlEwRXNTVUZCU1hKRExHRkJRVmNzUjBGQlJ5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRPMEZCUTI1RE8wRkJRMEU3UVVGRFFTeEpRVUZKUXl4blFrRkJZeXhIUVVGSFJDeGhRVUZYTEVOQlFVTXNZMEZCWXl4RFFVRkRPMEZCUTJoRU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk5uUnl4bFFVRmhMRU5CUVVNc1MwRkJTeXhGUVVGRkxGTkJRVk1zUlVGQlJUdEJRVU42UXl4RlFVRkZMRWxCUVVrc1MwRkJTeXhIUVVGSGRFTXNVMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJRenRCUVVNMVFpeE5RVUZOTEV0QlFVc3NSMEZCUnl4RFFVRkRMRXRCUVVzc1NVRkJTVVFzWVVGQlZ5eERRVUZETEV0QlFVc3NRMEZCUXp0QlFVTXhReXhOUVVGTkxFMUJRVTBzUjBGQlJ5eERRVUZETEV0QlFVc3NTVUZCU1N4RFFVRkRMRXRCUVVzc1NVRkJTWE5ETEZWQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNN1FVRkRiRVFzVFVGQlRTeE5RVUZOTEVkQlFVY3NRMEZCUXl4TFFVRkxMRWxCUVVrc1EwRkJReXhMUVVGTExFbEJRVWtzUTBGQlF5eE5RVUZOTEVsQlFVbE9MR05CUVZrc1EwRkJReXhMUVVGTExFTkJRVU03UVVGRGFrVXNUVUZCVFN4WFFVRlhMRWRCUVVjc1MwRkJTeXhKUVVGSkxFdEJRVXNzU1VGQlNTeE5RVUZOTEVsQlFVa3NUVUZCVFR0QlFVTjBSQ3hOUVVGTkxFMUJRVTBzUjBGQlJ5eFhRVUZYTEVkQlFVY3NVMEZCVXl4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGTkxFVkJRVVVzVFVGQlRTeERRVUZETEVkQlFVY3NSVUZCUlR0QlFVTnFSU3hOUVVGTkxFMUJRVTBzUjBGQlJ5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRPMEZCUXpkQ08wRkJRMEVzUlVGQlJTeExRVUZMTEVsQlFVa3NSMEZCUnl4SlFVRkpMRXRCUVVzc1JVRkJSVHRCUVVONlFpeEpRVUZKTEVsQlFVa3NRMEZCUXl4VFFVRlRMRWxCUVVsNFJpeG5Ra0ZCWXl4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFVkJRVVVzUjBGQlJ5eERRVUZETzBGQlEzSkVMRkZCUVZFc1JVRkJSU3hYUVVGWE8wRkJRM0pDTzBGQlEwRXNWMEZCVnl4SFFVRkhMRWxCUVVrc1VVRkJVVHRCUVVNeFFqdEJRVU5CTEZsQlFWa3NUVUZCVFN4TFFVRkxMRWRCUVVjc1NVRkJTU3hSUVVGUkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEZGQlFWRXNRMEZCUXl4RFFVRkRPMEZCUXpORU8wRkJRMEVzV1VGQldTeE5RVUZOTEV0QlFVc3NSMEZCUnl4SlFVRkpMRkZCUVZFc1NVRkJTU3hIUVVGSExFbEJRVWtzV1VGQldTeEpRVUZKTEVkQlFVY3NTVUZCU1N4WlFVRlpMRU5CUVVNc1EwRkJRenRCUVVOMFJqdEJRVU5CTEZkQlFWYzJSaXhUUVVGUExFTkJRVU1zUjBGQlJ5eEZRVUZGTEUxQlFVMHNRMEZCUXp0QlFVTXZRaXhUUVVGVExFTkJRVU1zUlVGQlJUdEJRVU5hTEUxQlFVMHNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU4yUWl4TFFVRkxPMEZCUTB3c1IwRkJSenRCUVVOSUxFVkJRVVVzVDBGQlR5eE5RVUZOTEVOQlFVTTdRVUZEYUVJc1EwRkJRenRCUVVORU8wRkJRMEVzU1VGQlFTeGpRVUZqTEVkQlFVZEZMR1ZCUVdFN096czdPenM3T3pzN096dEJRM1pET1VJc1UwRkJVME1zWTBGQldTeERRVUZETEUxQlFVMHNSVUZCUlR0QlFVTTVRaXhGUVVGRkxFbEJRVWtzVFVGQlRTeEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTnNRaXhGUVVGRkxFbEJRVWtzVFVGQlRTeEpRVUZKTEVsQlFVa3NSVUZCUlR0QlFVTjBRaXhKUVVGSkxFdEJRVXNzU1VGQlNTeEhRVUZITEVsQlFVa3NUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhGUVVGRk8wRkJRM0JETEUxQlFVMHNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU4yUWl4TFFVRkxPMEZCUTB3c1IwRkJSenRCUVVOSUxFVkJRVVVzVDBGQlR5eE5RVUZOTEVOQlFVTTdRVUZEYUVJc1EwRkJRenRCUVVORU8wRkJRMEVzU1VGQlFTeGhRVUZqTEVkQlFVZEJMR05CUVZrN08wRkRia0kzUWl4SlFVRkpNVVlzVlVGQlVTeEhRVUZITlVJc1ZVRkJjVUk3UVVGRGNFTXNTVUZCU1hkRkxHRkJRVmNzUjBGQlIyaEZMRmxCUVhsQ08wRkJRek5ETEVsQlFVa3NXVUZCV1N4SFFVRkhReXhoUVVFd1FpeERRVUZETzBGQlF6bERPMEZCUTBFN1FVRkRRU3hKUVVGSldTeGhRVUZYTEVkQlFVY3NUVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJRenRCUVVOdVF6dEJRVU5CTzBGQlEwRXNTVUZCU1VNc1owSkJRV01zUjBGQlIwUXNZVUZCVnl4RFFVRkRMR05CUVdNc1EwRkJRenRCUVVOb1JEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVTBGQlUydEhMRmxCUVZVc1EwRkJReXhOUVVGTkxFVkJRVVU3UVVGRE5VSXNSVUZCUlN4SlFVRkpMRU5CUVVNelJpeFZRVUZSTEVOQlFVTXNUVUZCVFN4RFFVRkRMRVZCUVVVN1FVRkRla0lzU1VGQlNTeFBRVUZQTEZsQlFWa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRCUVVOb1F5eEhRVUZITzBGQlEwZ3NSVUZCUlN4SlFVRkpMRTlCUVU4c1IwRkJSelJETEdGQlFWY3NRMEZCUXl4TlFVRk5MRU5CUVVNN1FVRkRia01zVFVGQlRTeE5RVUZOTEVkQlFVY3NSVUZCUlN4RFFVRkRPMEZCUTJ4Q08wRkJRMEVzUlVGQlJTeExRVUZMTEVsQlFVa3NSMEZCUnl4SlFVRkpMRTFCUVUwc1JVRkJSVHRCUVVNeFFpeEpRVUZKTEVsQlFVa3NSVUZCUlN4SFFVRkhMRWxCUVVrc1lVRkJZU3hMUVVGTExFOUJRVThzU1VGQlNTeERRVUZEYkVRc1owSkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJUdEJRVU51Uml4TlFVRk5MRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEZGtJc1MwRkJTenRCUVVOTUxFZEJRVWM3UVVGRFNDeEZRVUZGTEU5QlFVOHNUVUZCVFN4RFFVRkRPMEZCUTJoQ0xFTkJRVU03UVVGRFJEdEJRVU5CTEVsQlFVRXNWMEZCWXl4SFFVRkhhVWNzV1VGQlZUczdRVU5vUXpOQ0xFbEJRVWxHTEdWQlFXRXNSMEZCUjNKSUxHTkJRVEpDTzBGQlF5OURMRWxCUVVrc1ZVRkJWU3hIUVVGSFVTeFhRVUYzUWp0QlFVTjZReXhKUVVGSk1FVXNZVUZCVnl4SFFVRkhla1VzWVVGQmQwSXNRMEZCUXp0QlFVTXpRenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRLMGNzVVVGQlRTeERRVUZETEUxQlFVMHNSVUZCUlR0QlFVTjRRaXhGUVVGRkxFOUJRVTkwUXl4aFFVRlhMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWR0UXl4bFFVRmhMRU5CUVVNc1RVRkJUU3hGUVVGRkxFbEJRVWtzUTBGQlF5eEhRVUZITEZWQlFWVXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRCUVVOb1JpeERRVUZETzBGQlEwUTdRVUZEUVN4SlFVRkJMRkZCUVdNc1IwRkJSMGNzVVVGQlRUczdRVU12UW5aQ0xFbEJRVWxRTEZsQlFWVXNSMEZCUjJwSUxGZEJRWGRDTzBGQlEzcERMRWxCUVVsM1NDeFJRVUZOTEVkQlFVZG9TQ3hSUVVGdFFpeERRVUZETzBGQlEycERPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNVMEZCVTJsSUxHVkJRV0VzUTBGQlF5eExRVUZMTEVWQlFVVTdRVUZET1VJc1JVRkJSU3hQUVVGUFVpeFpRVUZWTEVOQlFVTXNTMEZCU3l4RlFVRkZUeXhSUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTXhReXhEUVVGRE8wRkJRMFE3UVVGRFFTeEpRVUZCTEdWQlFXTXNSMEZCUjBNc1pVRkJZVHM3UVVNdlFqbENMRWxCUVVrelJDeHJRa0ZCWjBJc1IwRkJSemxFTEdsQ1FVRTRRanRCUVVOeVJDeEpRVUZKTUVnc1lVRkJWeXhIUVVGSGJFZ3NiMEpCUVhsQ08wRkJRek5ETEVsQlFVa3lSQ3hwUWtGQlpTeEhRVUZITVVRc1owSkJRVFpDTzBGQlEyNUVMRWxCUVVreVJDeFhRVUZUTEVkQlFVY3hSQ3hWUVVGMVFqdEJRVU4yUXl4SlFVRkpLMFFzYVVKQlFXVXNSMEZCUnpsRUxHZENRVUUyUWp0QlFVTnVSQ3hKUVVGSmJVVXNZVUZCVnl4SFFVRkhjRUlzWVVGQmQwSTdRVUZETVVNc1NVRkJTWEZDTEZOQlFVOHNSMEZCUnpSRExGTkJRVzlDTzBGQlEyeERMRWxCUVVrc2FVSkJRV2xDTEVkQlFVZERMRzFDUVVFNFFqdEJRVU4wUkN4SlFVRkpVaXhWUVVGUkxFZEJRVWRUTEd0Q1FVRnhRanRCUVVOd1F5eEpRVUZKTEZWQlFWVXNSMEZCUjBNc1dVRkJkVUk3UVVGRGVFTXNTVUZCU1d4SExGVkJRVkVzUjBGQlIyMUhMRlZCUVhGQ08wRkJRM0JETEVsQlFVa3hReXhsUVVGaExFZEJRVWN5UXl4bFFVRXdRanRCUVVNNVF5eEpRVUZKYkVJc1kwRkJXU3hIUVVGSGJVSXNZMEZCZVVJN1FVRkROVU1zU1VGQlNXeENMRk5CUVU4c1IwRkJSMjFDTEZGQlFYRkNPMEZCUTI1RExFbEJRVWtzWVVGQllTeEhRVUZIUXl4bFFVRXdRaXhEUVVGRE8wRkJReTlETzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVTBGQlUwTXNaVUZCWVN4RFFVRkRMRTFCUVUwc1JVRkJSU3hOUVVGTkxFVkJRVVVzUjBGQlJ5eEZRVUZGTEZGQlFWRXNSVUZCUlN4VFFVRlRMRVZCUVVVc1ZVRkJWU3hGUVVGRkxFdEJRVXNzUlVGQlJUdEJRVU53Uml4RlFVRkZMRWxCUVVrc1VVRkJVU3hIUVVGSGNrSXNVMEZCVHl4RFFVRkRMRTFCUVUwc1JVRkJSU3hIUVVGSExFTkJRVU03UVVGRGNrTXNUVUZCVFN4UlFVRlJMRWRCUVVkQkxGTkJRVThzUTBGQlF5eE5RVUZOTEVWQlFVVXNSMEZCUnl4RFFVRkRPMEZCUTNKRExFMUJRVTBzVDBGQlR5eEhRVUZITEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03UVVGRGNFTTdRVUZEUVN4RlFVRkZMRWxCUVVrc1QwRkJUeXhGUVVGRk8wRkJRMllzU1VGQlNXcEVMR3RDUVVGblFpeERRVUZETEUxQlFVMHNSVUZCUlN4SFFVRkhMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU03UVVGRE0wTXNTVUZCU1N4UFFVRlBPMEZCUTFnc1IwRkJSenRCUVVOSUxFVkJRVVVzU1VGQlNTeFJRVUZSTEVkQlFVY3NWVUZCVlR0QlFVTXpRaXhOUVVGTkxGVkJRVlVzUTBGQlF5eFJRVUZSTEVWQlFVVXNVVUZCVVN4SFFVRkhMRWRCUVVjc1IwRkJSeXhGUVVGRkxFZEJRVWNzVFVGQlRTeEZRVUZGTEUxQlFVMHNSVUZCUlN4TFFVRkxMRU5CUVVNN1FVRkRka1VzVFVGQlRTeFRRVUZUTEVOQlFVTTdRVUZEYUVJN1FVRkRRU3hGUVVGRkxFbEJRVWtzVVVGQlVTeEhRVUZITEZGQlFWRXNTMEZCU3l4VFFVRlRMRU5CUVVNN1FVRkRlRU03UVVGRFFTeEZRVUZGTEVsQlFVa3NVVUZCVVN4RlFVRkZPMEZCUTJoQ0xFbEJRVWtzU1VGQlNTeExRVUZMTEVkQlFVZHBRaXhUUVVGUExFTkJRVU1zVVVGQlVTeERRVUZETzBGQlEycERMRkZCUVZFc1RVRkJUU3hIUVVGSExFTkJRVU1zUzBGQlN5eEpRVUZKY1VNc1ZVRkJVU3hEUVVGRExGRkJRVkVzUTBGQlF6dEJRVU0zUXl4UlFVRlJMRTlCUVU4c1IwRkJSeXhEUVVGRExFdEJRVXNzU1VGQlNTeERRVUZETEUxQlFVMHNTVUZCU1U0c1kwRkJXU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzBGQlF6bEVPMEZCUTBFc1NVRkJTU3hSUVVGUkxFZEJRVWNzVVVGQlVTeERRVUZETzBGQlEzaENMRWxCUVVrc1NVRkJTU3hMUVVGTExFbEJRVWtzVFVGQlRTeEpRVUZKTEU5QlFVOHNSVUZCUlR0QlFVTndReXhOUVVGTkxFbEJRVWt2UWl4VFFVRlBMRU5CUVVNc1VVRkJVU3hEUVVGRExFVkJRVVU3UVVGRE4wSXNVVUZCVVN4UlFVRlJMRWRCUVVjc1VVRkJVU3hEUVVGRE8wRkJRelZDTEU5QlFVODdRVUZEVUN4WFFVRlhMRWxCUVVrc2FVSkJRV2xDTEVOQlFVTXNVVUZCVVN4RFFVRkRMRVZCUVVVN1FVRkROVU1zVVVGQlVTeFJRVUZSTEVkQlFVZFlMRmRCUVZNc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dEJRVU4yUXl4UFFVRlBPMEZCUTFBc1YwRkJWeXhKUVVGSkxFMUJRVTBzUlVGQlJUdEJRVU4yUWl4UlFVRlJMRkZCUVZFc1IwRkJSeXhMUVVGTExFTkJRVU03UVVGRGVrSXNVVUZCVVN4UlFVRlJMRWRCUVVkelJDeGhRVUZYTEVOQlFVTXNVVUZCVVN4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJReTlETEU5QlFVODdRVUZEVUN4WFFVRlhMRWxCUVVrc1QwRkJUeXhGUVVGRk8wRkJRM2hDTEZGQlFWRXNVVUZCVVN4SFFVRkhMRXRCUVVzc1EwRkJRenRCUVVONlFpeFJRVUZSTEZGQlFWRXNSMEZCUjNaRUxHbENRVUZsTEVOQlFVTXNVVUZCVVN4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRMjVFTEU5QlFVODdRVUZEVUN4WFFVRlhPMEZCUTFnc1VVRkJVU3hSUVVGUkxFZEJRVWNzUlVGQlJTeERRVUZETzBGQlEzUkNMRTlCUVU4N1FVRkRVQ3hMUVVGTE8wRkJRMHdzVTBGQlV5eEpRVUZKYTBJc1pVRkJZU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKVUN4aFFVRlhMRU5CUVVNc1VVRkJVU3hEUVVGRExFVkJRVVU3UVVGREwwUXNUVUZCVFN4UlFVRlJMRWRCUVVjc1VVRkJVU3hEUVVGRE8wRkJRekZDTEUxQlFVMHNTVUZCU1VFc1lVRkJWeXhEUVVGRExGRkJRVkVzUTBGQlF5eEZRVUZGTzBGQlEycERMRkZCUVZFc1VVRkJVU3hIUVVGSExHRkJRV0VzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0QlFVTXpReXhQUVVGUE8wRkJRMUFzVjBGQlZ5eEpRVUZKTEVOQlFVTnNSQ3hWUVVGUkxFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NWVUZCVlN4RFFVRkRMRkZCUVZFc1EwRkJReXhGUVVGRk8wRkJRelZFTEZGQlFWRXNVVUZCVVN4SFFVRkhOa01zYVVKQlFXVXNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenRCUVVNM1F5eFBRVUZQTzBGQlExQXNTMEZCU3p0QlFVTk1MRk5CUVZNN1FVRkRWQ3hOUVVGTkxGRkJRVkVzUjBGQlJ5eExRVUZMTEVOQlFVTTdRVUZEZGtJc1MwRkJTenRCUVVOTUxFZEJRVWM3UVVGRFNDeEZRVUZGTEVsQlFVa3NVVUZCVVN4RlFVRkZPMEZCUTJoQ08wRkJRMEVzU1VGQlNTeExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRkZCUVZFc1JVRkJSU3hSUVVGUkxFTkJRVU1zUTBGQlF6dEJRVU5zUXl4SlFVRkpMRk5CUVZNc1EwRkJReXhSUVVGUkxFVkJRVVVzVVVGQlVTeEZRVUZGTEZGQlFWRXNSVUZCUlN4VlFVRlZMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03UVVGREwwUXNTVUZCU1N4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdRVUZET1VJc1IwRkJSenRCUVVOSUxFVkJRVVZZTEd0Q1FVRm5RaXhEUVVGRExFMUJRVTBzUlVGQlJTeEhRVUZITEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVNN1FVRkRNVU1zUTBGQlF6dEJRVU5FTzBGQlEwRXNTVUZCUVN4alFVRmpMRWRCUVVkelJTeGxRVUZoT3p0QlF6ZEdPVUlzU1VGQlNYcEZMRTlCUVVzc1IwRkJSek5FTEUxQlFXMUNPMEZCUXk5Q0xFbEJRVWtzWjBKQlFXZENMRWRCUVVkUkxHbENRVUU0UWp0QlFVTnlSQ3hKUVVGSmQwUXNVMEZCVHl4SFFVRkhka1FzVVVGQmNVSTdRVUZEYmtNc1NVRkJTU3hoUVVGaExFZEJRVWRETEdOQlFUSkNPMEZCUXk5RExFbEJRVWxyUWl4VlFVRlJMRWRCUVVkcVFpeFZRVUZ4UWp0QlFVTndReXhKUVVGSk5rY3NVVUZCVFN4SFFVRkhPVVFzVVVGQmJVSTdRVUZEYUVNc1NVRkJTU3hQUVVGUExFZEJRVWRwUlN4UlFVRnhRaXhEUVVGRE8wRkJRM0JETzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRk5CUVZOVkxGZEJRVk1zUTBGQlF5eE5RVUZOTEVWQlFVVXNUVUZCVFN4RlFVRkZMRkZCUVZFc1JVRkJSU3hWUVVGVkxFVkJRVVVzUzBGQlN5eEZRVUZGTzBGQlEyaEZMRVZCUVVVc1NVRkJTU3hOUVVGTkxFdEJRVXNzVFVGQlRTeEZRVUZGTzBGQlEzcENMRWxCUVVrc1QwRkJUenRCUVVOWUxFZEJRVWM3UVVGRFNDeEZRVUZGY2tVc1UwRkJUeXhEUVVGRExFMUJRVTBzUlVGQlJTeFRRVUZUTEZGQlFWRXNSVUZCUlN4SFFVRkhMRVZCUVVVN1FVRkRNVU1zU1VGQlNTeExRVUZMTEV0QlFVc3NTMEZCU3l4SFFVRkhMRWxCUVVsTUxFOUJRVXNzUTBGQlF5eERRVUZETzBGQlEycERMRWxCUVVrc1NVRkJTUzlDTEZWQlFWRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1JVRkJSVHRCUVVNMVFpeE5RVUZOTEdGQlFXRXNRMEZCUXl4TlFVRk5MRVZCUVVVc1RVRkJUU3hGUVVGRkxFZEJRVWNzUlVGQlJTeFJRVUZSTEVWQlFVVjVSeXhYUVVGVExFVkJRVVVzVlVGQlZTeEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMEZCUTJwR0xFdEJRVXM3UVVGRFRDeFRRVUZUTzBGQlExUXNUVUZCVFN4SlFVRkpMRkZCUVZFc1IwRkJSeXhWUVVGVk8wRkJReTlDTEZWQlFWVXNWVUZCVlN4RFFVRkRMRTlCUVU4c1EwRkJReXhOUVVGTkxFVkJRVVVzUjBGQlJ5eERRVUZETEVWQlFVVXNVVUZCVVN4SFFVRkhMRWRCUVVjc1IwRkJSeXhGUVVGRkxFZEJRVWNzVFVGQlRTeEZRVUZGTEUxQlFVMHNSVUZCUlN4TFFVRkxMRU5CUVVNN1FVRkRka1lzVlVGQlZTeFRRVUZUTEVOQlFVTTdRVUZEY0VJN1FVRkRRU3hOUVVGTkxFbEJRVWtzVVVGQlVTeExRVUZMTEZOQlFWTXNSVUZCUlR0QlFVTnNReXhSUVVGUkxGRkJRVkVzUjBGQlJ5eFJRVUZSTEVOQlFVTTdRVUZETlVJc1QwRkJUenRCUVVOUUxFMUJRVTBzWjBKQlFXZENMRU5CUVVNc1RVRkJUU3hGUVVGRkxFZEJRVWNzUlVGQlJTeFJRVUZSTEVOQlFVTXNRMEZCUXp0QlFVTTVReXhMUVVGTE8wRkJRMHdzUjBGQlJ5eEZRVUZGWWl4UlFVRk5MRU5CUVVNc1EwRkJRenRCUVVOaUxFTkJRVU03UVVGRFJEdEJRVU5CTEVsQlFVRXNWVUZCWXl4SFFVRkhZU3hYUVVGVE96czdPenM3T3pzN096czdPenM3T3pzN08wRkRla0l4UWl4VFFVRlRReXhWUVVGUkxFTkJRVU1zUzBGQlN5eEZRVUZGTzBGQlEzcENMRVZCUVVVc1QwRkJUeXhMUVVGTExFTkJRVU03UVVGRFppeERRVUZETzBGQlEwUTdRVUZEUVN4SlFVRkJMRlZCUVdNc1IwRkJSMEVzVlVGQlVUczdPenM3T3pzN096czdPenRCUTFaNlFpeFRRVUZUUXl4UFFVRkxMRU5CUVVNc1NVRkJTU3hGUVVGRkxFOUJRVThzUlVGQlJTeEpRVUZKTEVWQlFVVTdRVUZEY0VNc1JVRkJSU3hSUVVGUkxFbEJRVWtzUTBGQlF5eE5RVUZOTzBGQlEzSkNMRWxCUVVrc1MwRkJTeXhEUVVGRExFVkJRVVVzVDBGQlR5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8wRkJRM1JETEVsQlFVa3NTMEZCU3l4RFFVRkRMRVZCUVVVc1QwRkJUeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU12UXl4SlFVRkpMRXRCUVVzc1EwRkJReXhGUVVGRkxFOUJRVThzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRM2hFTEVsQlFVa3NTMEZCU3l4RFFVRkRMRVZCUVVVc1QwRkJUeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBGQlEycEZMRWRCUVVjN1FVRkRTQ3hGUVVGRkxFOUJRVThzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRGJrTXNRMEZCUXp0QlFVTkVPMEZCUTBFc1NVRkJRU3hOUVVGakxFZEJRVWRCTEU5QlFVczdPMEZEY0VKMFFpeEpRVUZKUVN4UFFVRkxMRWRCUVVkMlNTeE5RVUZ0UWl4RFFVRkRPMEZCUTJoRE8wRkJRMEU3UVVGRFFTeEpRVUZKZDBrc1YwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTTdRVUZEZWtJN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hUUVVGVFF5eFZRVUZSTEVOQlFVTXNTVUZCU1N4RlFVRkZMRXRCUVVzc1JVRkJSU3hUUVVGVExFVkJRVVU3UVVGRE1VTXNSVUZCUlN4TFFVRkxMRWRCUVVkRUxGZEJRVk1zUTBGQlF5eExRVUZMTEV0QlFVc3NVMEZCVXl4SlFVRkpMRWxCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eEpRVUZKTEV0QlFVc3NSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVONFJTeEZRVUZGTEU5QlFVOHNWMEZCVnp0QlFVTndRaXhKUVVGSkxFbEJRVWtzU1VGQlNTeEhRVUZITEZOQlFWTTdRVUZEZUVJc1VVRkJVU3hMUVVGTExFZEJRVWNzUTBGQlF5eERRVUZETzBGQlEyeENMRkZCUVZFc1RVRkJUU3hIUVVGSFFTeFhRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhMUVVGTExFVkJRVVVzUTBGQlF5eERRVUZETzBGQlEyeEVMRkZCUVZFc1MwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0QlFVTTVRanRCUVVOQkxFbEJRVWtzVDBGQlR5eEZRVUZGTEV0QlFVc3NSMEZCUnl4TlFVRk5MRVZCUVVVN1FVRkROMElzVFVGQlRTeExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eExRVUZMTEVOQlFVTXNRMEZCUXp0QlFVTjZReXhMUVVGTE8wRkJRMHdzU1VGQlNTeExRVUZMTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRaaXhKUVVGSkxFbEJRVWtzVTBGQlV5eEhRVUZITEV0QlFVc3NRMEZCUXl4TFFVRkxMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRGNrTXNTVUZCU1N4UFFVRlBMRVZCUVVVc1MwRkJTeXhIUVVGSExFdEJRVXNzUlVGQlJUdEJRVU0xUWl4TlFVRk5MRk5CUVZNc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRja01zUzBGQlN6dEJRVU5NTEVsQlFVa3NVMEZCVXl4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExGTkJRVk1zUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0QlFVTjRReXhKUVVGSkxFOUJRVTlFTEU5QlFVc3NRMEZCUXl4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxGTkJRVk1zUTBGQlF5eERRVUZETzBGQlEzaERMRWRCUVVjc1EwRkJRenRCUVVOS0xFTkJRVU03UVVGRFJEdEJRVU5CTEVsQlFVRXNVMEZCWXl4SFFVRkhSU3hWUVVGUk96czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEYUVKNlFpeFRRVUZUUXl4VlFVRlJMRU5CUVVNc1MwRkJTeXhGUVVGRk8wRkJRM3BDTEVWQlFVVXNUMEZCVHl4WFFVRlhPMEZCUTNCQ0xFbEJRVWtzVDBGQlR5eExRVUZMTEVOQlFVTTdRVUZEYWtJc1IwRkJSeXhEUVVGRE8wRkJRMG9zUTBGQlF6dEJRVU5FTzBGQlEwRXNTVUZCUVN4VlFVRmpMRWRCUVVkQkxGVkJRVkU3TzBGRGVrSjZRaXhKUVVGSkxGRkJRVkVzUjBGQlJ6RkpMRlZCUVhGQ08wRkJRM0JETEVsQlFVa3NZMEZCWXl4SFFVRkhVU3hsUVVFMFFqdEJRVU5xUkN4SlFVRkpPRWdzVlVGQlVTeEhRVUZITjBnc1ZVRkJjVUlzUTBGQlF6dEJRVU55UXp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SlFVRkphMGtzYVVKQlFXVXNSMEZCUnl4RFFVRkRMR05CUVdNc1IwRkJSMHdzVlVGQlVTeEhRVUZITEZOQlFWTXNTVUZCU1N4RlFVRkZMRTFCUVUwc1JVRkJSVHRCUVVNeFJTeEZRVUZGTEU5QlFVOHNZMEZCWXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hWUVVGVkxFVkJRVVU3UVVGRE1VTXNTVUZCU1N4alFVRmpMRVZCUVVVc1NVRkJTVHRCUVVONFFpeEpRVUZKTEZsQlFWa3NSVUZCUlN4TFFVRkxPMEZCUTNaQ0xFbEJRVWtzVDBGQlR5eEZRVUZGTEZGQlFWRXNRMEZCUXl4TlFVRk5MRU5CUVVNN1FVRkROMElzU1VGQlNTeFZRVUZWTEVWQlFVVXNTVUZCU1R0QlFVTndRaXhIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU5NTEVOQlFVTXNRMEZCUXp0QlFVTkdPMEZCUTBFc1NVRkJRU3huUWtGQll5eEhRVUZIU3l4cFFrRkJaVHM3T3p0QlEzQkNhRU1zU1VGQlNTeFRRVUZUTEVkQlFVY3NSMEZCUnp0QlFVTnVRaXhKUVVGSkxGRkJRVkVzUjBGQlJ5eEZRVUZGTEVOQlFVTTdRVUZEYkVJN1FVRkRRVHRCUVVOQkxFbEJRVWtzVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNN1FVRkRla0k3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFRRVUZUUXl4VlFVRlJMRU5CUVVNc1NVRkJTU3hGUVVGRk8wRkJRM2hDTEVWQlFVVXNTVUZCU1N4TFFVRkxMRWRCUVVjc1EwRkJRenRCUVVObUxFMUJRVTBzVlVGQlZTeEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTnlRanRCUVVOQkxFVkJRVVVzVDBGQlR5eFhRVUZYTzBGQlEzQkNMRWxCUVVrc1NVRkJTU3hMUVVGTExFZEJRVWNzVTBGQlV5eEZRVUZGTzBGQlF6TkNMRkZCUVZFc1UwRkJVeXhIUVVGSExGRkJRVkVzU1VGQlNTeExRVUZMTEVkQlFVY3NWVUZCVlN4RFFVRkRMRU5CUVVNN1FVRkRjRVE3UVVGRFFTeEpRVUZKTEZWQlFWVXNSMEZCUnl4TFFVRkxMRU5CUVVNN1FVRkRka0lzU1VGQlNTeEpRVUZKTEZOQlFWTXNSMEZCUnl4RFFVRkRMRVZCUVVVN1FVRkRka0lzVFVGQlRTeEpRVUZKTEVWQlFVVXNTMEZCU3l4SlFVRkpMRk5CUVZNc1JVRkJSVHRCUVVOb1F5eFJRVUZSTEU5QlFVOHNVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRelZDTEU5QlFVODdRVUZEVUN4TFFVRkxMRTFCUVUwN1FVRkRXQ3hOUVVGTkxFdEJRVXNzUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEYUVJc1MwRkJTenRCUVVOTUxFbEJRVWtzVDBGQlR5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRk5CUVZNc1JVRkJSU3hUUVVGVExFTkJRVU1zUTBGQlF6dEJRVU0xUXl4SFFVRkhMRU5CUVVNN1FVRkRTaXhEUVVGRE8wRkJRMFE3UVVGRFFTeEpRVUZCTEZOQlFXTXNSMEZCUjBFc1ZVRkJVVHM3UVVOd1EzcENMRWxCUVVrc1pVRkJaU3hIUVVGSE5Va3NaMEpCUVRaQ08wRkJRMjVFTEVsQlFVazBTU3hWUVVGUkxFZEJRVWR3U1N4VFFVRnpRaXhEUVVGRE8wRkJRM1JETzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVsQlFVbHhTU3hoUVVGWExFZEJRVWRFTEZWQlFWRXNRMEZCUXl4bFFVRmxMRU5CUVVNc1EwRkJRenRCUVVNMVF6dEJRVU5CTEVsQlFVRXNXVUZCWXl4SFFVRkhReXhoUVVGWE96dEJRMkkxUWl4SlFVRkpVQ3hWUVVGUkxFZEJRVWQwU1N4VlFVRnhRanRCUVVOd1F5eEpRVUZKTEZGQlFWRXNSMEZCUjFFc1UwRkJjMEk3UVVGRGNrTXNTVUZCU1hGSkxHRkJRVmNzUjBGQlIzQkpMRmxCUVhsQ0xFTkJRVU03UVVGRE5VTTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNVMEZCVTNGSkxGVkJRVkVzUTBGQlF5eEpRVUZKTEVWQlFVVXNTMEZCU3l4RlFVRkZPMEZCUXk5Q0xFVkJRVVVzVDBGQlQwUXNZVUZCVnl4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFVkJRVVVzUzBGQlN5eEZRVUZGVUN4VlFVRlJMRU5CUVVNc1JVRkJSU3hKUVVGSkxFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVTTdRVUZEYWtVc1EwRkJRenRCUVVORU8wRkJRMEVzU1VGQlFTeFRRVUZqTEVkQlFVZFJMRlZCUVZFN08wRkRhRUo2UWl4SlFVRkpOVWtzU1VGQlJTeEhRVUZIUml4SlFVRmxPMEZCUTNoQ0xFbEJRVWxyUml4aFFVRlhMRWRCUVVjeFJTeGhRVUYzUWp0QlFVTXhReXhKUVVGSk1rY3NVMEZCVHl4SFFVRkhNVWNzVVVGQmNVSTdRVUZEYmtNc1NVRkJTVzFDTEZWQlFWRXNSMEZCUjJ4Q0xGVkJRWEZDTEVOQlFVTTdRVUZEY2tNN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk54U1N4blFrRkJZeXhEUVVGRExFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNUVUZCVFN4RlFVRkZPMEZCUXpsRExFVkJRVVVzU1VGQlNTeERRVUZEYmtnc1ZVRkJVU3hEUVVGRExFMUJRVTBzUTBGQlF5eEZRVUZGTzBGQlEzcENMRWxCUVVrc1QwRkJUeXhMUVVGTExFTkJRVU03UVVGRGFrSXNSMEZCUnp0QlFVTklMRVZCUVVVc1NVRkJTU3hKUVVGSkxFZEJRVWNzVDBGQlR5eExRVUZMTEVOQlFVTTdRVUZETVVJc1JVRkJSU3hKUVVGSkxFbEJRVWtzU1VGQlNTeFJRVUZSTzBGQlEzUkNMRmRCUVZkelJDeGhRVUZYTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVscFF5eFRRVUZQTEVOQlFVTXNTMEZCU3l4RlFVRkZMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU03UVVGREwwUXNWMEZCVnl4SlFVRkpMRWxCUVVrc1VVRkJVU3hKUVVGSkxFdEJRVXNzU1VGQlNTeE5RVUZOTEVOQlFVTTdRVUZETDBNc1VVRkJVVHRCUVVOU0xFbEJRVWtzVDBGQlQycElMRWxCUVVVc1EwRkJReXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRjRU1zUjBGQlJ6dEJRVU5JTEVWQlFVVXNUMEZCVHl4TFFVRkxMRU5CUVVNN1FVRkRaaXhEUVVGRE8wRkJRMFE3UVVGRFFTeEpRVUZCTEdWQlFXTXNSMEZCUnpaSkxHZENRVUZqT3p0QlF6ZENMMElzU1VGQlNTeFJRVUZSTEVkQlFVY3ZTU3hUUVVGelFqdEJRVU55UXl4SlFVRkpMR05CUVdNc1IwRkJSMUVzWlVGQk5FSXNRMEZCUXp0QlFVTnNSRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVM2RKTEdkQ1FVRmpMRU5CUVVNc1VVRkJVU3hGUVVGRk8wRkJRMnhETEVWQlFVVXNUMEZCVHl4UlFVRlJMRU5CUVVNc1UwRkJVeXhOUVVGTkxFVkJRVVVzVDBGQlR5eEZRVUZGTzBGQlF6VkRMRWxCUVVrc1NVRkJTU3hMUVVGTExFZEJRVWNzUTBGQlF5eERRVUZETzBGQlEyeENMRkZCUVZFc1RVRkJUU3hIUVVGSExFOUJRVThzUTBGQlF5eE5RVUZOTzBGQlF5OUNMRkZCUVZFc1ZVRkJWU3hIUVVGSExFMUJRVTBzUjBGQlJ5eERRVUZETEVkQlFVY3NUMEZCVHl4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVU1zUjBGQlJ5eFRRVUZUTzBGQlEycEZMRkZCUVZFc1MwRkJTeXhIUVVGSExFMUJRVTBzUjBGQlJ5eERRVUZETEVkQlFVY3NUMEZCVHl4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExGTkJRVk1zUTBGQlF6dEJRVU53UkR0QlFVTkJMRWxCUVVrc1ZVRkJWU3hIUVVGSExFTkJRVU1zVVVGQlVTeERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRWxCUVVrc1QwRkJUeXhWUVVGVkxFbEJRVWtzVlVGQlZUdEJRVU40UlN4VFFVRlRMRTFCUVUwc1JVRkJSU3hGUVVGRkxGVkJRVlU3UVVGRE4wSXNVVUZCVVN4VFFVRlRMRU5CUVVNN1FVRkRiRUk3UVVGRFFTeEpRVUZKTEVsQlFVa3NTMEZCU3l4SlFVRkpMR05CUVdNc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFdEJRVXNzUTBGQlF5eEZRVUZGTzBGQlEyaEZMRTFCUVUwc1ZVRkJWU3hIUVVGSExFMUJRVTBzUjBGQlJ5eERRVUZETEVkQlFVY3NVMEZCVXl4SFFVRkhMRlZCUVZVc1EwRkJRenRCUVVOMlJDeE5RVUZOTEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRha0lzUzBGQlN6dEJRVU5NTEVsQlFVa3NUVUZCVFN4SFFVRkhMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dEJRVU0xUWl4SlFVRkpMRTlCUVU4c1JVRkJSU3hMUVVGTExFZEJRVWNzVFVGQlRTeEZRVUZGTzBGQlF6ZENMRTFCUVUwc1NVRkJTU3hOUVVGTkxFZEJRVWNzVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMEZCUTJ4RExFMUJRVTBzU1VGQlNTeE5RVUZOTEVWQlFVVTdRVUZEYkVJc1VVRkJVU3hSUVVGUkxFTkJRVU1zVFVGQlRTeEZRVUZGTEUxQlFVMHNSVUZCUlN4TFFVRkxMRVZCUVVVc1ZVRkJWU3hEUVVGRExFTkJRVU03UVVGRGNFUXNUMEZCVHp0QlFVTlFMRXRCUVVzN1FVRkRUQ3hKUVVGSkxFOUJRVThzVFVGQlRTeERRVUZETzBGQlEyeENMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRMHdzUTBGQlF6dEJRVU5FTzBGQlEwRXNTVUZCUVN4bFFVRmpMRWRCUVVkQkxHZENRVUZqT3p0QlEzQkRMMElzU1VGQlNTeFRRVUZUTEVkQlFVZG9TaXhWUVVGMVFqdEJRVU4yUXl4SlFVRkpMR05CUVdNc1IwRkJSMUVzWlVGQk5FSXNRMEZCUXp0QlFVTnNSRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTVUZCU1N4TFFVRkxMRWRCUVVjc1kwRkJZeXhEUVVGRExGTkJRVk1zVFVGQlRTeEZRVUZGTEUxQlFVMHNSVUZCUlN4UlFVRlJMRVZCUVVVN1FVRkRPVVFzUlVGQlJTeFRRVUZUTEVOQlFVTXNUVUZCVFN4RlFVRkZMRTFCUVUwc1JVRkJSU3hSUVVGUkxFTkJRVU1zUTBGQlF6dEJRVU4wUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOSU8wRkJRMEVzU1VGQlFTeFBRVUZqTEVkQlFVY3NTMEZCU3pzN1FVTjBRM1JDT3pzN096czdPMEZCVDBjN08wRkJUVWdzVFVGQlRYbEpMRXRCUVVjc1IwRkJSeXhMUVVGTExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1EwRkJRenRCUVVWd1F6czdPenRCUVVsSE8wMUJRMVVzVTBGQlV5eERRVUZCTzBsQlowSndRaXhYUVVGWkxFTkJRVUVzU1VGQmJVSXNSVUZCUlN4bFFVRnRReXhGUVVGQk8xRkJTbkJGTEdWQlFYRkNMRU5CUVVFc1IwRkJRU3hEUVVGQkxFbEJRVUVzUlVGQlFTeExRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJPMUZCUlhKQ0xEQkNRVUZyUXl4RFFVRkJMRWRCUVVFc1EwRkJRU3hKUVVGQkxFVkJRVUVzUzBGQlFTeERRVUZCTEVOQlFVRXNRMEZCUVR0QlFVZG9ReXhSUVVGQkxITkNRVUZCTEVOQlFVRXNTVUZCU1N4RlFVRkJMR1ZCUVVFc1JVRkJVeXhKUVVGSkxFVkJRVUVzUjBGQlFTeERRVUZCTEVOQlFVTTdVVUZEYkVJc2MwSkJRVUVzUTBGQlFTeEpRVUZKTERoQ1FVTkdMR1ZCUVdVc1NVRkJTU3hUUVVGVExFTkJRVU1zZDBKQlFYZENMRTFCUVVFc1EwRkJRenRMUVVONlJEdEJRVVZFT3pzN096czdPMEZCVDBjN1NVRkRTQ3hQUVVGUExHZENRVUZuUWl4RFFVRkRMRWxCUVZrc1JVRkJRVHRSUVVOc1F5eFBRVUZQTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdTMEZETTBJN1FVRkZSRHM3T3p0QlFVbEhPMGxCUTBnc1QwRkJUeXhsUVVGbExFTkJRVU1zU1VGQldTeEZRVUZCTzBGQlEycERMRkZCUVVFc1QwRkJUeXhKUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETzB0QlEzQkZPMEZCUlVRN096czdRVUZKUnp0SlFVTklMRTFCUVUwc1UwRkJVeXhEUVVGRExFdEJRV3RDTEVWQlFVRTdRVUZEYUVNc1VVRkJRVUVzUzBGQlJ5eERRVUZETEdkRVFVRm5SQ3hGUVVGRkxFdEJRVXNzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXpzN1VVRkZlRVVzVFVGQlRTeE5RVUZOTEVkQlFVY3NUVUZCVFN4elFrRkJRU3hEUVVGQkxFbEJRVWtzUlVGQlRTeGxRVUZCTEVWQlFVRXNSMEZCUVN4RFFVRkJMRU5CUVVNc1UwRkJVeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBGQlEycEVMRkZCUVVGQkxFdEJRVWNzUTBGQlF5d3JRa0ZCSzBJc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF6dEJRVU0zUXl4UlFVRkJMRTlCUVU4c1RVRkJUU3hEUVVGRE8wdEJRMlk3UVVGRlJEczdPenM3T3pzN08wRkJVMGM3U1VGRFNDeE5RVUZOTEZOQlFWTXNRMEZCUXl4TFFVRjVRaXhGUVVGQk8xRkJRM1pETEVsQlFVa3NUVUZCVFN4SFFVRjFRaXhKUVVGSkxFTkJRVU03VVVGRmRFTXNTVUZCU1N4TFFVRkxMRmxCUVZrc1YwRkJWeXhGUVVGRk8xbEJRMmhETEUxQlFVMHNSMEZCUnl4TFFVRkxMRU5CUVVNN1FVRkRhRUlzVTBGQlFUdGhRVUZOTEVsQlFVa3NTMEZCU3l4WlFVRlpMRWxCUVVrc1JVRkJSVHM3TzBGQlIyaERMRmxCUVVFc1RVRkJUU3hWUVVGVkxFZEJRVWNzVFVGQlRTeExRVUZMTEVOQlFVTXNWMEZCVnl4RlFVRkZMRU5CUVVNN1FVRkROME1zV1VGQlFTeEpRVUZKTEhOQ1FVRkJMRU5CUVVFc1NVRkJTU3hGUVVGcFFpd3dRa0ZCUVN4RlFVRkJMRWRCUVVFc1EwRkJRU3hIUVVGSExFTkJRVU1zUlVGQlJUdG5Ra0ZETjBJc1RVRkJUU3hIUVVGSExGVkJRVlVzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RlFVRkZMSE5DUVVGQkxFTkJRVUVzU1VGQlNTeEZRVUZwUWl3d1FrRkJRU3hGUVVGQkxFZEJRVUVzUTBGQlFTeERRVUZETEVOQlFVTTdRVUZEY2tRc1lVRkJRVHRCUVVGTkxHbENRVUZCTzJkQ1FVTk1MRTFCUVUwc1IwRkJSeXhWUVVGVkxFTkJRVU03UVVGRGNrSXNZVUZCUVR0QlFVTkdMRk5CUVVFN1VVRkZSQ3hKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTzFsQlExZ3NUVUZCVFN4SlFVRkpMR2xDUVVGcFFpeEZRVUZGTEVOQlFVTTdRVUZETDBJc1UwRkJRVHRCUVVWRUxGRkJRVUVzVDBGQlR5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8wdEJReTlDT3pzN1FVRjBSbVVzVTBGQlFTeERRVUZCTEdkQ1FVRm5RaXhIUVVGSE8wbEJRMnBETEZsQlFWazdTVUZEV2l4WFFVRlhPMGxCUTFnc1dVRkJXVHRKUVVOYUxHVkJRV1U3U1VGRFppeFhRVUZYTzBsQlExZ3NiVU5CUVcxRE8wTkJRM0JETEVOQlFVTTdRVUZGWXl4VFFVRjNRaXhEUVVGQkxIZENRVUZCTEVkQlFVY3NTMEZCU3pzN1FVTTVRbXhFT3pzN096czdPMEZCVDBjN08wRkJVVWdzVFVGQlRVRXNTMEZCUnl4SFFVRkhMRXRCUVVzc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4RFFVRkRPMEZCUTNKRExFMUJRVTBzVVVGQlVTeEhRVUZITEV0QlFVc3NRMEZCUXl4MVFrRkJkVUlzUTBGQlF5eERRVUZETzBGQmVVSm9SRHM3T3p0QlFVbEhPMDFCUTFVc1ZVRkJWU3hEUVVGQk8wbEJiVUp5UWl4WFFVRlpMRU5CUVVFc1NVRkJiVUlzUlVGQlJTeEpRVUZCTEVkQlFXMURMRVZCUVVVc1JVRkJRVHRSUVd4Q2RFVXNiVUpCUVRSQ0xFTkJRVUVzUjBGQlFTeERRVUZCTEVsQlFVRXNSVUZCUVN4TFFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQk8xRkJSVFZDTEdkQ1FVRnhRaXhEUVVGQkxFZEJRVUVzUTBGQlFTeEpRVUZCTEVWQlFVRXNTMEZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRVHRSUVVWeVFpeHhRa0ZCYzBJc1EwRkJRU3hIUVVGQkxFTkJRVUVzU1VGQlFTeEZRVUZCTEV0QlFVRXNRMEZCUVN4RFFVRkJMRU5CUVVFN1FVRmxjRUlzVVVGQlFTeHpRa0ZCUVN4RFFVRkJMRWxCUVVrc1JVRkJRU3h0UWtGQlFTeEZRVUZaTEVWQlFVVXNSMEZCUnl4elFrRkJRU3hEUVVGQkxGVkJRVlVzUlVGQlowSXNSVUZCUVN4RlFVRkJMRWRCUVVFc1JVRkJRU3d3UWtGQlFTeERRVUZCTEVWQlFVVXNSMEZCUnl4SlFVRkpMRVZCUVVVc1JVRkJRU3hIUVVGQkxFTkJRVUVzUTBGQlF6dEJRVU16UkN4UlFVRkJMSE5DUVVGQkxFTkJRVUVzU1VGQlNTeEZRVUZCTEdkQ1FVRkJMRVZCUVZNc1NVRkJTU3hGUVVGQkxFZEJRVUVzUTBGQlFTeERRVUZETzBGQlEyeENMRkZCUVVFc2MwSkJRVUVzUTBGQlFTeEpRVUZKTEVWQlFXTXNjVUpCUVVFc1JVRkJRU3hKUVVGSkxGTkJRVk1zUTBGQlF5eDFRa0ZCUVN4SlFVRkpMRVZCUVVFc1owSkJRVUVzUlVGQlFTeEhRVUZCTEVOQlFVMHNSVUZCUlN4elFrRkJRU3hEUVVGQkxFbEJRVWtzUlVGQlV5eHRRa0ZCUVN4RlFVRkJMRWRCUVVFc1EwRkJRU3hEUVVGRExGZEJRVmNzUTBGQlF5eE5RVUZCTEVOQlFVTTdTMEZEZUVVN1FVRkZSRHM3T3pzN096czdRVUZSUnp0SlFVTklMR0ZCUVdFc1VVRkJVU3hEUVVOdVFpeEhRVUZYTEVWQlExZ3NaVUZCZFVNc1JVRkJSU3hGUVVGQk8wRkJSWHBETEZGQlFVRkJMRXRCUVVjc1EwRkJReXhoUVVGaExFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTTdVVUZEZUVJc1NVRkJTVHRCUVVOR0xGbEJRVUVzVFVGQlRTeFhRVUZYTEVkQlFVY3NjMEpCUVVFc1EwRkJRU3hWUVVGVkxESkRRVUZ4UWl4RFFVRkRPMWxCUTNCRUxFMUJRVTBzU1VGQlNTeEhRVUZIUXl4UFFVRkxMRU5CUVVNc1JVRkJSU3hGUVVGRkxGZEJRVmNzUlVGQlJTeFpRVUZaTEVOQlFVTXNRMEZCUXpzN1dVRkZiRVFzVFVGQlRTeFJRVUZSTEVkQlExb3NTVUZCU1N4RFFVRkRMRlZCUVZVc1MwRkJTeXhYUVVGWExFTkJRVU1zVlVGQlZUdEJRVU14UXl4blFrRkJRU3hKUVVGSkxFTkJRVU1zVVVGQlVTeExRVUZMTEZkQlFWY3NRMEZCUXl4UlFVRlJMRU5CUVVNN1FVRkRla01zV1VGQlFTeE5RVUZOTEV0QlFVc3NSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFVkJRVVVzU1VGQlNTeERRVUZETEZGQlFWRXNTVUZCU1N4RlFVRkZMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdXVUZETDBRc1RVRkJUU3haUVVGWkxFZEJRVWNzVVVGQlVUdHJRa0ZEZWtJc1JVRkJSU3hQUVVGUExFVkJRVVVzUlVGQlJTeExRVUZMTEVWQlFVVXNRMEZCVXl4TlFVRkJMRVZCUVVFc1MwRkJTeXhEUVVGRkxFTkJRVUVzUlVGQlJTeEZRVUZGTzJ0Q1FVTjRReXhKUVVGSkxFTkJRVU03UVVGRFZDeFpRVUZCTEUxQlFVMHNSMEZCUnl4SFFVRkhMRTFCUVUwc1MwRkJTeXhEUVVGRExFZEJRVWNzUlVGQlJVRXNUMEZCU3l4RFFVRkRMRVZCUVVVc1JVRkJSU3hKUVVGSkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEZsQlFWa3NRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRlRVVzU1VGQlNTeEhRVUZITEVOQlFVTXNSVUZCUlN4RlFVRkZPMEZCUTFZc1owSkJRVUVzVDBGQlR5eEhRVUZITEVOQlFVTTdRVUZEV2l4aFFVRkJPMEZCUVUwc2FVSkJRVUU3UVVGRFRDeG5Ra0ZCUVN4TlFVRk5MRWxCUVVrc1lVRkJZU3hEUVVGRExFZEJRVWNzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTnVReXhoUVVGQk8wRkJRMFlzVTBGQlFUdEJRVUZETEZGQlFVRXNUMEZCVHl4SFFVRkhMRVZCUVVVN1FVRkRXaXhaUVVGQkxFMUJRVTBzU1VGQlNTeGhRVUZoTEVOQlFVTXNSMEZCUnl4RlFVRkZMRWxCUVVrc1JVRkJSU3hGUVVGRkxFdEJRVXNzUlVGQlJTeEhRVUZuUWl4RlFVRkZMRU5CUVVNc1EwRkJRenRCUVVOcVJTeFRRVUZCTzB0QlEwWTdRVUZGUkRzN096czdPenM3T3pzN08wRkJXVWM3U1VGRFNDeE5RVUZOTEU5QlFVOHNRMEZCUXl4SFFVRlhMRVZCUVVFN1FVRkRka0lzVVVGQlFVUXNTMEZCUnl4RFFVRkRMRmxCUVZrc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU4yUWl4UlFVRkJMRWxCUVVrc1IwRkJlVUlzUTBGQlF6dFJRVU01UWl4SlFVRkpMRmRCUVZjc1IwRkJhMElzU1VGQlNTeERRVUZETzFGQlEzUkRMRTFCUVUwc1lVRkJZU3hIUVVGSExITkNRVUZCTEVOQlFVRXNTVUZCU1N3eVFrRkJVeXhEUVVGRExGZEJRVmNzUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZGY0VRc1VVRkJRU3hKUVVGSkxHRkJRV0VzUlVGQlJUdFpRVU5xUWl4SlFVRkpPMEZCUTBZc1owSkJRVUVzUjBGQlJ5eEhRVUZITEUxQlFVMHNWVUZCVlN4RFFVRkRMRkZCUVZFc1EwRkJReXhIUVVGSExFVkJRVVU3UVVGRGJrTXNiMEpCUVVFc1VVRkJVU3hGUVVGRkxITkNRVUZCTEVOQlFVRXNTVUZCU1N4RlFVRkJMRzFDUVVGQkxFVkJRVUVzUjBGQlFTeERRVUZUTEVOQlFVTXNWMEZCVnp0QlFVTndReXhwUWtGQlFTeERRVUZETEVOQlFVTTdaMEpCUTBnc1YwRkJWeXhIUVVGSExFZEJRVWNzUTBGQlF5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGRE8wRkJRemxETEdkQ1FVRkJMRWxCUVVrc1IwRkJSeXhEUVVGRExFMUJRVTBzUzBGQlN5eEhRVUZITEVWQlFVVTdRVUZEZEVJc2IwSkJRVUZCTEV0QlFVY3NRMEZEUkN4eFJVRkJjVVVzUlVGRGNrVXNSMEZCUnl4RlFVTklMRWRCUVVjc1EwRkRTaXhEUVVGRE8wRkJRMGdzYVVKQlFVRTdRVUZCVFN4eFFrRkJRVHRCUVVOTUxHOUNRVUZCUVN4TFFVRkhMRU5CUTBRc0swVkJRU3RGTEVWQlF5OUZMRWRCUVVjc1JVRkRTQ3hIUVVGSExFTkJRMG9zUTBGQlF6dEJRVU5JTEdsQ1FVRkJPMEZCUTBZc1lVRkJRVHRCUVVGRExGbEJRVUVzVDBGQlR5eEhRVUZITEVWQlFVVTdRVUZEV2l4blFrRkJRVUVzUzBGQlJ5eERRVU5FTERaRlFVRTJSU3hGUVVNM1JTeEhRVUZITEVOQlEwb3NRMEZCUXp0QlFVTklMR0ZCUVVFN1FVRkRSaXhUUVVGQk8wRkJRVTBzWVVGQlFUdFpRVU5NUVN4TFFVRkhMRU5CUVVNc2FVUkJRV2xFTEVOQlFVTXNRMEZCUXp0QlFVTjRSQ3hUUVVGQk8xRkJSVVFzU1VGQlNTeERRVUZETEVkQlFVY3NSVUZCUlR0WlFVTlNMRWxCUVVrN096dG5Ra0ZIUml4TlFVRk5MRTlCUVU4c1IwRkJSeXhOUVVGTkxGVkJRVlVzUTBGQlF5eFJRVUZSTEVOQlFVTXNSMEZCUnl4RlFVRkZPMEZCUXpkRExHOUNRVUZCTEZkQlFWY3NSVUZCUlR0QlFVTllMSGRDUVVGQkxFMUJRVTBzUlVGQlJTeE5RVUZOTzBGQlEyWXNjVUpCUVVFN1FVRkRSaXhwUWtGQlFTeERRVUZETEVOQlFVTTdaMEpCUTBnc1YwRkJWeXhIUVVGSExFOUJRVThzUTBGQlF5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGRE8wRkJRMnhFTEdkQ1FVRkJRU3hMUVVGSExFTkJRVU1zTmtOQlFUWkRMRVZCUVVVc1IwRkJSeXhGUVVGRkxGZEJRVmNzUTBGQlF5eERRVUZETzBGQlEzUkZMR0ZCUVVFN1FVRkJReXhaUVVGQkxFOUJRVThzUjBGQlJ5eEZRVUZGTzJkQ1FVTmFRU3hMUVVGSExFTkJRMFFzZDBWQlFYZEZMRU5CUTNwRkxFTkJRVU03UVVGRFNDeGhRVUZCTzBGQlEwWXNVMEZCUVR0UlFVVkVMRWxCUVVrc1YwRkJWeXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEdWQlFXVXNRMEZCUXl4WFFVRlhMRU5CUVVNc1JVRkJSVHRCUVVNeFJDeFpRVUZCUVN4TFFVRkhMRU5CUVVNc2JVTkJRVzFETEVWQlFVVXNWMEZCVnl4RFFVRkRMRU5CUVVNN1FVRkRkRVFzV1VGQlFTeE5RVUZOTEVsQlFVa3NiMEpCUVc5Q0xFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTTdRVUZETjBNc1UwRkJRVHRSUVVWRUxFbEJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVTdXVUZEVWl4SFFVRkhMRWRCUVVjc1RVRkJUU3hWUVVGVkxFTkJRVU1zVVVGQlVTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUTNSRExGTkJRVUU3UVVGRlJDeFJRVUZCTEUxQlFVMHNTVUZCU1N4SFFVRkhMRTFCUVUwc1IwRkJSeXhEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETzFGQlJUbENMRWxCUVVrc1EwRkJReXhoUVVGaExFVkJRVVU3V1VGRGJFSkJMRXRCUVVjc1EwRkJReXhEUVVGcFJDd3JRMEZCUVN4RFFVRkJMRU5CUVVNc1EwRkJRenRCUVVOMlJDeFpRVUZCTEU5QlFVOHNTVUZCU1N4RFFVRkRPMEZCUTJJc1UwRkJRVHRCUVVWRUxGRkJRVUVzVFVGQlRTeE5RVUZOTEVkQlFVY3NUVUZCVFN4SlFVRkpMRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVU03UVVGRGVFTXNVVUZCUVN4TlFVRk5MRVZCUVVVc1MwRkJTeXhGUVVGRkxFZEJRVWNzVFVGQlRTeHpRa0ZCUVN4RFFVRkJMRWxCUVVrc1JVRkJRU3h4UWtGQlFTeEZRVUZCTEVkQlFVRXNRMEZCVnl4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dEJRVU14UkN4UlFVRkJMRWxCUVVrc1MwRkJTeXhGUVVGRk8wRkJRMVFzV1VGQlFVRXNTMEZCUnl4RFFVRkRMRFpDUVVFMlFpeEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUTNwRExGTkJRVUU3UVVGQlRTeGhRVUZCTzBGQlEwd3NXVUZCUVVFc1MwRkJSeXhEUVVGRExHZERRVUZuUXl4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRek5ETEZsQlFVRXNUMEZCVHl4SlFVRkpMRU5CUVVNN1FVRkRZaXhUUVVGQk96czdPenM3UVVGUFJDeFJRVUZCTEUxQlFVMHNZMEZCWXl4SFFVTnNRaXhIUVVGSExFTkJRVU1zVFVGQlRTeExRVUZMTEVkQlFVY3NTVUZCU1N4TlFVRk5MRU5CUVVNc1ZVRkJWU3hMUVVGTExIVkNRVUZCTEVsQlFVa3NSVUZCUVN4dFFrRkJRU3hGUVVGQkxFZEJRVUVzUTBGQlV5eERRVUZETEZkQlFWY3NSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkROVVVzVVVGQlFTeEpRVUZKTEdOQlFXTXNSVUZCUlR0WlFVTnNRa0VzUzBGQlJ5eERRVUZETEd0RFFVRnJReXhGUVVGRkxITkNRVUZCTEVOQlFVRXNTVUZCU1N4RlFVRlRMRzFDUVVGQkxFVkJRVUVzUjBGQlFTeERRVUZCTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1dVRkRia1VzVFVGQlRTeFBRVUZQTEVkQlFVY3NUVUZCVFN4VlFVRlZMRU5CUVVNc1VVRkJVU3hEUVVGRExFZEJRVWNzUlVGQlJUczdRVUZGTjBNc1owSkJRVUVzVlVGQlZTeEZRVUZGTEhOQ1FVRkJMRU5CUVVFc1NVRkJTU3d5UWtGQlV5eERRVUZETEZkQlFWY3NSMEZCUnl4RFFVRkRPMEZCUXpGRExHRkJRVUVzUTBGQlF5eERRVUZETzBGQlEwZ3NXVUZCUVN4TlFVRk5MRlZCUVZVc1IwRkJSeXhOUVVGTkxFOUJRVThzUTBGQlF5eFhRVUZYTEVWQlFVVXNRMEZCUXp0QlFVTXZReXhaUVVGQlFTeExRVUZITEVOQlEwUXNhVVJCUVdsRUxFVkJRMnBFTEZWQlFWVXNRMEZCUXl4VlFVRlZMRU5CUTNSQ0xFTkJRVU03UVVGRFJpeFpRVUZCTEU5QlFVOHNTVUZCU1N4SlFVRkpMRU5CUVVNc1EwRkJReXhOUVVGTkxFVkJRVVVzVlVGQlZTeERRVUZETEVWQlFVVXNSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETEVOQlFVTTdRVUZETlVRc1UwRkJRVHRCUVVWRUxGRkJRVUVzVDBGQlR5eEpRVUZKTEVOQlFVTTdTMEZEWWp0QlFVVkVPenM3TzBGQlNVYzdRVUZEU0N4SlFVRkJMR0ZCUVdFc1lVRkJZU3hEUVVGVkxFZEJRVmNzUlVGQlFUdFJRVU0zUXl4SlFVRkpMRU5CUVVNc2RVSkJRVUVzU1VGQlNTeEZRVUZCTEVWQlFVRXNSVUZCUVN4SFFVRkJMRVZCUVVFc2VVSkJRVUVzUTBGQlpTeERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSVHRCUVVOcVF5eFpRVUZCTEZGQlFWRXNRMEZCUXl4MVFrRkJkVUlzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXp0WlFVTjJReXhOUVVGTkxFZEJRVWNzUjBGQlJ5eE5RVUZOTEZWQlFWVXNRMEZCUXl4UlFVRlJMRU5CUVVNc1IwRkJSeXhGUVVGRk8wRkJRM3BETEdkQ1FVRkJMRmRCUVZjc1JVRkJSVHRCUVVOWUxHOUNRVUZCTEZkQlFWY3NSVUZCUlN4TlFVRk5PMEZCUTI1Q0xHOUNRVUZCTEU5QlFVOHNSVUZCUlR0QlFVTlFMSGRDUVVGQkxFMUJRVTBzUlVGQlJTeHJRa0ZCYTBJN1FVRkRNMElzY1VKQlFVRTdRVUZEUml4cFFrRkJRVHRCUVVOR0xHRkJRVUVzUTBGQlF5eERRVUZETzBGQlEwZ3NXVUZCUVN4TlFVRk5MRWxCUVVrc1IwRkJSeXhOUVVGTkxFZEJRVWNzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0QlFVTTVRaXhaUVVGQkxGRkJRVkVzUTBGQlF5eHZRa0ZCYjBJc1JVRkJSU3hIUVVGSExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdXVUZETVVNc2MwSkJRVUVzUTBGQlFTeEpRVUZKTEhGRFFVRmxMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0QlFVTndReXhUUVVGQk8wRkJSVVFzVVVGQlFTeFJRVUZSTEVOQlFVTXNPRUpCUVRoQ0xFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTTdVVUZET1VNc1QwRkJUeXh6UWtGQlFTeERRVUZCTEVsQlFVa3NSVUZCWlN4RlFVRkJMRVZCUVVFc1IwRkJRU3hGUVVGQkxIbENRVUZCTEVOQlFVRXNRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03UzBGRGNrTTdPenRCUVdoTlRTeDVRa0ZCYVVJc1IwRkJRU3hGUVVGQkxFdEJRVUVzUlVGQlFTeEpRVUZKTEVkQlFVY3NSVUZCWlN4RlFVRkRMRU5CUVVFN1FVRkZlRU1zTUVKQlFYRkRMRWRCUVVFc1JVRkJRU3hMUVVGQkxFVkJRVUU3UVVGRE1VTXNVVUZCUVN4WFFVRlhMRVZCUVVVc1EwRkJRenRMUVVObUxFVkJRVU1zUTBGQlFUdEJRVVZMTEN0Q1FVRnpReXhIUVVGQkxFVkJRVUVzUzBGQlFTeEZRVUZCTzBGQlF6TkRMRkZCUVVFc1ZVRkJWU3hGUVVGRkxFTkJRVU03UVVGRFlpeFJRVUZCTEZGQlFWRXNSVUZCUlN4VFFVRlRPMEZCUTI1Q0xGRkJRVUVzVjBGQlZ5eEZRVUZGTEVWQlFVVTdTMEZEYUVJc1JVRkJRenM3UVVNdlJFbzdPenM3T3pzN1FVRlBSenRCUVZWSExGTkJRVlVzVlVGQlZTeERRVUZETEVsQlFWVXNSVUZCUVR0QlFVTnVReXhKUVVGQkxFOUJRVThzU1VGQlNTeERRVUZETzBGQlEyUTdPMEZEYmtKQk96czdPenM3TzBGQlQwYzdRVUZuUWtnN1FVRkRUU3hUUVVGVkxHZENRVUZuUWl4RFFVRkRMR1ZCUVdkRExFVkJRVUU3UVVGREwwUXNTVUZCUVN4SlFVRkpMRWxCUVVrc1IwRkJSeXhKUVVGSkxFdEJRVXNzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0SlFVTjZRaXhKUVVGSkxFdEJRVXNzUjBGQlJ5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJReXhEUVVGRE8wRkJSWHBETEVsQlFVRXNTMEZCU3l4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEV0QlFVc3NRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVU3TzBGQlJYSkRMRkZCUVVFc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMR1ZCUVdVc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTTFReXhMUVVGQk8wRkJSVVFzU1VGQlFTeFBRVUZQTEVsQlFVa3NRMEZCUXp0QlFVTmtPenRCUTJ4RFFUczdPenM3T3p0QlFVOUhPMEZCVjBnN096czdPMEZCUzBjN1FVRkRSeXhUUVVGVkxHMUNRVUZ0UWl4RFFVRkRMRk5CUVdsQ0xFVkJRVUU3UVVGRGJrUXNTVUZCUVN4TlFVRk5MRTFCUVUwc1IwRkJSeXhKUVVGSkxFMUJRVTBzUTBGQlF5eFRRVUZUTEVWQlFVVXNSVUZCUlN4SlFVRkpMRVZCUVVVc1VVRkJVU3hGUVVGRkxFTkJRVU1zUTBGQlF6dEpRVU42UkN4SlFVRkpMRTlCUVU4c1IwRkJSeXhMUVVGTExFTkJRVU03UVVGRmNFSXNTVUZCUVN4TlFVRk5MRTlCUVU4c1IwRkJOa0lzVDBGQlR5eFBRVUZQTEV0QlFVazdRVUZETVVRc1VVRkJRU3hOUVVGTkxFTkJRVU1zVjBGQlZ5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMUZCUXpWQ0xFOUJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVTTdVVUZGWml4UFFVRlBMRWxCUVVrc1QwRkJUeXhEUVVGRExFTkJRVU1zVDBGQlR5eEZRVUZGTEUxQlFVMHNTMEZCU1R0QlFVTnlReXhaUVVGQkxFMUJRVTBzUTBGQlF5eFRRVUZUTEVkQlFVY3NWVUZCVlN4RFFVRXJRaXhGUVVGQk8wRkJRekZFTEdkQ1FVRkJMRWxCUVVrc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEV0QlFVc3NVMEZCVXl4RlFVRkZPMEZCUXpkQ0xHOUNRVUZCTEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBGQlEzUkNMR2xDUVVGQk8wRkJRVTBzY1VKQlFVRTdiMEpCUTB3c1RVRkJUU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTjRReXhwUWtGQlFUdG5Ra0ZEUkN4UFFVRlBMRWRCUVVjc1MwRkJTeXhEUVVGRE8wRkJRMnhDTEdGQlFVTXNRMEZCUXp0QlFVVkdMRmxCUVVFc1RVRkJUU3hEUVVGRExFOUJRVThzUjBGQlJ5eFZRVUZWTEVOQlFVTXNSVUZCUVR0blFrRkRNVUlzVDBGQlR5eEhRVUZITEV0QlFVc3NRMEZCUXp0blFrRkRhRUlzVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTFvc1lVRkJReXhEUVVGRE8wRkJRMG9zVTBGQlF5eERRVUZETEVOQlFVTTdRVUZEVEN4TFFVRkRMRU5CUVVNN1FVRkZSaXhKUVVGQkxFMUJRVTBzVTBGQlV5eEhRVUVyUWl4TlFVRk5MRTlCUVU4c1EwRkJRenRKUVVVMVJDeE5RVUZOTEZOQlFWTXNSMEZCSzBJc1RVRkJUU3hOUVVGTkxFTkJRVU1zVTBGQlV5eEZRVUZGTEVOQlFVTTdTVUZGZGtVc1QwRkJUenRSUVVOTUxFOUJRVTg3VVVGRFVDeFRRVUZUTzFGQlExUXNVMEZCVXp0TFFVTldMRU5CUVVNN1FVRkRTanM3UVVNeFJFRTdPenM3T3pzN1FVRlBSenRCUVd0Q1NEczdPenM3UVVGTFJ6dEJRVU5ITEZOQlFWVXNaMEpCUVdkQ0xFTkJRVU1zVFVGQmQwSXNSVUZCUVR0SlFVTjJSQ3hOUVVGTkxFOUJRVThzUjBGQmIwSXNSVUZCUlN4RFFVRkRPMGxCUTNCRExFMUJRVTBzUzBGQlN5eEhRVUZYTEVWQlFVVXNRMEZCUXp0QlFVTjZRanM3T3pzN1FVRkxSenRKUVVOSUxFMUJRVTBzVTBGQlV5eEhRVUZITEUxQlFVczdRVUZEY2tJc1VVRkJRU3hMUVVGTExFMUJRVTBzVFVGQlRTeEpRVUZKTEU5QlFVOHNSVUZCUlR0QlFVTTFRaXhaUVVGQkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RlFVRkZPMEZCUVVVc1owSkJRVUVzVDBGQlR5eE5RVUZOTEVOQlFVTTdRVUZEZUVNc1UwRkJRVHRCUVVORUxGRkJRVUVzU1VGQlNTeFBRVUZQTEVOQlFVTXNUVUZCVFN4SFFVRkhMRTFCUVUwc1EwRkJReXhWUVVGVkxFVkJRVVU3V1VGRGRFTXNUVUZCVFN4VFFVRlRMRWRCUVVjc2JVSkJRVzFDTEVOQlFVTXNUVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRE8wRkJRM2hFTEZsQlFVRXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF6dEJRVU40UWl4WlFVRkJMRTlCUVU4c1UwRkJVeXhEUVVGRE8wRkJRMnhDTEZOQlFVRTdRVUZEUkN4UlFVRkJMRTlCUVU4c1NVRkJTU3hEUVVGRE8wRkJRMlFzUzBGQlF5eERRVUZETzBGQlJVWTdPenRCUVVkSE8wRkJRMGdzU1VGQlFTeE5RVUZOTEZWQlFWVXNSMEZCUnl4WlFVRlhPMEZCUXpWQ0xGRkJRVUVzVFVGQlRTeE5RVUZOTEVkQlFVY3NVMEZCVXl4RlFVRkZMRU5CUVVNN1VVRkZNMElzU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlR0WlFVTllMRTlCUVU4N1FVRkRVaXhUUVVGQk8wRkJSVVFzVVVGQlFTeE5RVUZOTEVsQlFVa3NSMEZCUnl4TFFVRkxMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU03VVVGRmVrSXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSVHRaUVVOVUxFOUJRVTg3UVVGRFVpeFRRVUZCTzFGQlJVUXNTVUZCU1R0WlFVTkdMRTFCUVUwc1RVRkJUU3hIUVVGSExFMUJRVTBzVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03UVVGRGJFUXNXVUZCUVN4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzBGQlEzUkNMRk5CUVVFN1FVRkJReXhSUVVGQkxFOUJRVThzUzBGQlN5eEZRVUZGTzBGQlEyUXNXVUZCUVN4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBGQlEzQkNMRk5CUVVFN1FVRkRTQ3hMUVVGRExFTkJRVU03UVVGRlJqczdPenM3TzBGQlRVYzdRVUZEU0N4SlFVRkJMRTFCUVUwc1QwRkJUeXhIUVVFd1FpeERRVUZETEUxQlFVMHNSVUZCUlN4SlFVRkpMRXRCUVVrN1VVRkRkRVFzVDBGQlR5eEpRVUZKTEU5QlFVOHNRMEZCUXl4RFFVRkRMRTlCUVU4c1JVRkJSU3hOUVVGTkxFdEJRVWs3V1VGRGNrTXNUVUZCVFN4SlFVRkpMRWRCUVVjc1ZVRkJWU3hEUVVGRE8wRkJRM1JDTEdkQ1FVRkJMRTlCUVU4c1JVRkJSVHR2UWtGRFVDeE5RVUZOTzI5Q1FVTk9MRWxCUVVrN1FVRkRUQ3hwUWtGQlFUdEJRVU5FTEdkQ1FVRkJMRTlCUVU4c1JVRkJSU3hEUVVGRExFdEJRVXNzUzBGQlNUdHZRa0ZEYWtJc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZET3p0QlFVVm1MRzlDUVVGQkxGVkJRVlVzUlVGQlJTeERRVUZETzJsQ1FVTmtPMEZCUTBRc1owSkJRVUVzVFVGQlRTeEZRVUZGTEVOQlFVTXNTMEZCU3l4TFFVRkpPMjlDUVVOb1FpeE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRaQ3h2UWtGQlFTeFZRVUZWTEVWQlFVVXNRMEZCUXp0cFFrRkRaRHRCUVVOR0xHRkJRVUVzUTBGQlF5eERRVUZETzBGQlJVZ3NXVUZCUVN4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBGQlJXcENMRmxCUVVFc1ZVRkJWU3hGUVVGRkxFTkJRVU03UVVGRFppeFRRVUZETEVOQlFVTXNRMEZCUXp0QlFVTk1MRXRCUVVNc1EwRkJRenRKUVVWR0xFMUJRVTBzVTBGQlV5eEhRVUUwUWl4TlFVRkxPMEZCUXpsRExGRkJRVUVzVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRTFCUVUwc1MwRkJTeXhOUVVGTkxFTkJRVU1zVTBGQlV5eEZRVUZGTEVOQlFVTXNRMEZCUXp0QlFVTnNSQ3hMUVVGRExFTkJRVU03U1VGRlJpeFBRVUZQTzFGQlEwd3NUMEZCVHp0UlFVTlFMRk5CUVZNN1MwRkRWaXhEUVVGRE8wRkJRMG83TzBGRGNFaEJPenM3T3pzN08wRkJUMGM3UVVGUFNDeE5RVUZOUVN4TFFVRkhMRWRCUVVjc1MwRkJTeXhEUVVGRExHTkJRV01zUTBGQlF5eERRVUZETzBGQlRXeERMR1ZCUVdVc0swSkJRU3RDTEVOQlF6VkRMRk5CUVdsQ0xFVkJRVUU3UVVGRmFrSXNTVUZCUVN4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExIZERRVUYzUXl4RlFVRkZMRk5CUVZNc1EwRkJReXhEUVVGRE8wRkJRMjVGTEVsQlFVRXNUVUZCVFN4RlFVRkZMRTFCUVUwc1JVRkJSU3hIUVVGSExFMUJRVTA3UVVGRGRrSXNhVVJCUVRaRExGTkJRVk1zUTBGRGRrUXNRMEZCUXp0SlFVVkdMRTlCUVU4N1FVRkRUQ3hSUVVGQkxFZEJRVWNzVFVGQlRUdEJRVU5VTEZGQlFVRXNUMEZCVHl4RlFVRkZMRTFCUVVzc1IwRkJSenRMUVVOc1FpeERRVUZETzBGQlEwb3NRMEZCUXp0QlFVVk5MR1ZCUVdVc2FVSkJRV2xDTEVOQlEzSkRMRTFCUVhkQ0xFVkJRVUU3TzBGQlIzaENMRWxCUVVFc1NVRkJTU3hQUVVGUExFMUJRVTBzUzBGQlN5eFhRVUZYTEVWQlFVVTdVVUZEYWtNc1QwRkJUeXdyUWtGQkswSXNRMEZEY0VNc1RVRkJUU3hEUVVGRExHbENRVUZwUWl4SlFVRkpMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRemRETEVOQlFVTTdRVUZEU0N4TFFVRkJPMGxCUlVRc1RVRkJUU3hIUVVGSExFZEJRVWNzVFVGQlRTeExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRE8wbEJSVEZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSVHRSUVVGRkxFMUJRVTBzU1VGQlNTeDNRa0ZCZDBJc1EwRkJReXhOUVVGTkxFTkJRVU1zVTBGQlV5eEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUlhaRkxFbEJRVUVzVFVGQlRTeEhRVUZITEVkQlFVY3NUVUZCVFN4SFFVRkhMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU03TzBsQlJUZENRU3hMUVVGSExFTkJRVU1zYlVOQlFXMURMRVZCUVVVc1RVRkJUU3hEUVVGRExGTkJRVk1zUlVGQlJTeEhRVUZITEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1FVRkZka1VzU1VGQlFTeE5RVUZOTEZWQlFWVXNSMEZCUnl4SlFVRkpMRWxCUVVrc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVWQlFVVXNTVUZCU1N4RlFVRkZMSGRDUVVGM1FpeEZRVUZGTEVOQlFVTXNRMEZCUXp0SlFVTjJSU3hOUVVGTkxGTkJRVk1zUjBGQlJ5eEhRVUZITEVOQlFVTXNaVUZCWlN4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8wbEJSV3hFTEUxQlFVMHNWVUZCVlN4SFFVRkhMR2RDUVVGblFpeERRVUZETzBGQlEyeERMRkZCUVVFc1IwRkJSeXhOUVVGTk8wRkJRMVFzVVVGQlFTeFRRVUZUTEVWQlFVVXNVMEZCVXp0QlFVTnlRaXhMUVVGQkxFTkJRVU1zUTBGQlF6dEJRVVZJTEVsQlFVRXNUVUZCVFN4SlFVRkpMRWRCUVZjN1FVRkRia0lzVVVGQlFTeFhRVUZYTEVWQlFVVXNUMEZCVHl4SFFVRkhMRWxCUVVrc1MwRkJTeXhWUVVGVkxFTkJRVU1zVDBGQlR5eERRVUZETEdGQlFXRXNSVUZCUlN4SlFVRkpMRU5CUVVNN1FVRkRka1VzVVVGQlFTeFpRVUZaTEVWQlFVVXNUMEZCVHl4SFFVRkhMRWxCUVVrc1MwRkJTeXhWUVVGVkxFTkJRVU1zVDBGQlR5eERRVUZETEdOQlFXTXNSVUZCUlN4SlFVRkpMRU5CUVVNN1FVRkRla1VzVVVGQlFTeFhRVUZYTEVWQlFVVXNUMEZCVHl4SFFVRkhMRWxCUVVrc1MwRkJTeXhWUVVGVkxFTkJRVU1zVDBGQlR5eERRVUZETEdGQlFXRXNSVUZCUlN4SlFVRkpMRU5CUVVNN1FVRkRka1VzVVVGQlFTeFRRVUZUTEVWQlFVVXNUMEZCVHl4SFFVRkhMRWxCUVVrc1MwRkJTeXhWUVVGVkxFTkJRVU1zVDBGQlR5eERRVUZETEZkQlFWY3NSVUZCUlN4SlFVRkpMRU5CUVVNN1FVRkRia1VzVVVGQlFTeHRRMEZCYlVNc1JVRkJSU3hQUVVGUExFZEJRVWNzU1VGQlNTeExRVU5xUkN4VlFVRlZMRU5CUVVNc1QwRkJUeXhEUVVGRExIRkRRVUZ4UXl4RlFVRkZMRWxCUVVrc1EwRkJRenRCUVVOcVJTeFJRVUZCTEZOQlFWTXNSVUZCUlN4UFFVRlBMRWRCUVVjc1NVRkJTU3hMUVVGTExGVkJRVlVzUTBGQlF5eFBRVUZQTEVOQlFVTXNWMEZCVnl4RlFVRkZMRWxCUVVrc1EwRkJRenRCUVVOdVJTeFJRVUZCTEZsQlFWa3NSVUZCUlN4UFFVRlBMRWRCUVVjc1NVRkJTU3hMUVVGTExGVkJRVlVzUTBGQlF5eFBRVUZQTEVOQlFVTXNZMEZCWXl4RlFVRkZMRWxCUVVrc1EwRkJRenRCUVVONlJTeFJRVUZCTEN0Q1FVRXJRaXhGUVVGRkxFOUJRVThzUjBGQlJ5eEpRVUZKTEV0QlF6ZERMRlZCUVZVc1EwRkJReXhQUVVGUExFTkJRVU1zYVVOQlFXbERMRVZCUVVVc1NVRkJTU3hEUVVGRE8wRkJRemRFTEZGQlFVRXNkMEpCUVhkQ0xFVkJRVVVzVDBGQlR5eEhRVUZITEVsQlFVa3NTMEZEZEVNc1ZVRkJWU3hEUVVGRExFOUJRVThzUTBGQlF5d3dRa0ZCTUVJc1JVRkJSU3hKUVVGSkxFTkJRVU03UzBGRGRrUXNRMEZCUXp0SlFVVkdMRTlCUVU4N1FVRkRUQ3hSUVVGQkxFZEJRVWNzU1VGQlNUdFJRVU5RTEU5QlFVOHNSVUZCUlN4TlFVRkxPMEZCUTFvc1dVRkJRU3hIUVVGSExFTkJRVU1zWlVGQlpTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMEZCUXk5Q0xGbEJRVUVzVDBGQlR5eFZRVUZWTEVOQlFVTXNVMEZCVXl4RlFVRkZMRU5CUVVNN1UwRkRMMEk3UzBGRFJpeERRVUZETzBGQlEwbzdPMEZEYkVaQk96czdPenM3TzBGQlQwYzdRVUZMU0N4TlFVRk5RU3hMUVVGSExFZEJRVWNzUzBGQlN5eERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRPMEZCUlM5Q096czdPenRCUVV0SE8wRkJRMGtzWlVGQlpTeFRRVUZUTEVOQlF6ZENMRWxCUVcxQ0xFVkJRMjVDTEZOQlFXbENMRVZCUVVFN08wRkJSMnBDTEVsQlFVRXNUVUZCVFN4VFFVRlRMRWRCUVVjc1EwRkJRU3hqUVVGQkxFTkJRVUVzYVVkQlFVRXNRMEZCUVN4WlFVRkJMRU5CUVVFc2FVZEJRVUVzUTBGQlFTeHBRa0ZCUVN4RFFVRkJMR2xIUVVGQkxFTkJRVUVzYzBKQlFVRXNRMEZCUVN4cFIwRkJRU3hEUVVGdlF5eERRVUZETzBGQlEzWkVMRWxCUVVFc1RVRkJUU3hoUVVGaExFZEJRVWNzVTBGQlV5eEhRVUZITEdsQ1FVRnBRaXhEUVVGRExFTkJRVU03UVVGRGNrUXNTVUZCUVVFc1MwRkJSeXhEUVVGRExHdERRVUZyUXl4RlFVRkZMRk5CUVZNc1JVRkJSVHRCUVVOcVJDeFJRVUZCTEdsQ1FVRnBRaXhGUVVGRkxHRkJRV0U3UVVGRGFrTXNTMEZCUVN4RFFVRkRMRU5CUVVNN1FVRkZTQ3hKUVVGQkxFMUJRVTBzVVVGQlVTeEhRVUZITEUxQlFVMHNTMEZCU3l4RFFVRkRMRk5CUVZNc1JVRkJSVHRCUVVOMFF5eFJRVUZCTEZOQlFWTXNSVUZCUlN4aFFVRmhPMEZCUTNwQ0xFdEJRVUVzUTBGQlF5eERRVUZETzBGQlEwZ3NTVUZCUVN4TlFVRk5MRTFCUVUwc1IwRkJSeXhOUVVGTkxGRkJRVkVzUTBGQlF5eFhRVUZYTEVWQlFVVXNRMEZCUXp0SlFVVTFRMEVzUzBGQlJ5eERRVUZETEhORVFVRnpSQ3hGUVVGRk8xRkJRekZFTEVsQlFVa3NSVUZCUlN4TlFVRk5MRU5CUVVNc1ZVRkJWVHRCUVVONFFpeExRVUZCTEVOQlFVTXNRMEZCUXp0SlFVVklMRTFCUVUwc1NVRkJTU3hIUVVGSExFMUJRVTBzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRKUVVVMVEwRXNTMEZCUnl4RFFVRkRMSE5DUVVGelFpeERRVUZETEVOQlFVTTdRVUZGTlVJc1NVRkJRU3hQUVVGUExFbEJRVWtzUTBGQlF6dEJRVU5rT3p0QlF6ZERRVHM3T3pzN096dEJRVTlITzBGQlowTklPenM3TzBGQlNVYzdRVUZEUnl4VFFVRlZMSFZDUVVGMVFpeERRVU55UXl4aFFVRXdRaXhGUVVGQk8wRkJSVEZDTEVsQlFVRXNUVUZCVFN4blFrRkJaMElzUjBGQlJ5eGhRVUZoTEVOQlFVTXNTVUZCU1N4RFFVTjZReXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRVZCUVVVc1VVRkJVU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVWQlFVVXNVVUZCVVN4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVOc1JDeERRVUZETzBsQlJVWXNUMEZCVHp0QlFVTk1MRkZCUVVFc1NVRkJTU3hGUVVGRkxHZENRVUZuUWp0QlFVVjBRaXhSUVVGQkxFZEJRVWNzUlVGQlJTeERRVUZETEV0QlFVc3NTMEZCU1RzN1FVRkZZaXhaUVVGQkxFOUJRVThzWjBKQlFXZENMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zU1VGQlNTeExRVUZMTEVsQlFVa3NRMEZCUXl4TFFVRkxMRXRCUVVzc1MwRkJTeXhEUVVGUkxFTkJRVU03VTBGRGRrVTdTMEZEUml4RFFVRkRPMEZCUTBvN08wRkRNMFJCT3pzN096czdPMEZCVDBjN1FVRk5TQ3hOUVVGTkxGZEJRVmNzUjBGQll5eFRRVUZUTEVOQlFVTTdRVUZGZWtNN08wRkJSVWM3UVVGRFNTeGxRVUZsTEVkQlFVY3NRMEZEZGtJc1NVRkJkMElzUlVGRGVFSXNXVUZCZFVJc1YwRkJWeXhGUVVGQk8wRkJSV3hETEVsQlFVRXNUVUZCVFN4TlFVRk5MRWRCUVVjc1NVRkJTU3haUVVGWkxGZEJRVmNzUjBGQlJ5eEpRVUZKTEVkQlFVY3NUVUZCVFN4SlFVRkpMRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVU03TzBGQlJUZEZMRWxCUVVFc1RVRkJUU3hQUVVGUExFZEJRVWNzVFVGQlRTeE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhUUVVGVExFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTTdRVUZET1VRc1NVRkJRU3hOUVVGTkxFOUJRVThzUjBGQlJ5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1ZVRkJWU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTTdPMGxCUlhCRUxFOUJRVThzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXNzVFVGQlRTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTI1RkxFTkJRVU03UVVGRlRTeGxRVUZsTEZWQlFWVXNRMEZET1VJc1NVRkJWU3hGUVVOV0xGbEJRWFZDTEZkQlFWY3NSVUZCUVR0SlFVVnNReXhOUVVGTkxFbEJRVWtzUjBGQlJ5eE5RVUZOTEVkQlFVY3NRMEZCUXl4SlFVRkpMRVZCUVVVc1UwRkJVeXhEUVVGRExFTkJRVU03UVVGRGVFTXNTVUZCUVN4TlFVRk5MRTFCUVUwc1IwRkJSeXhUUVVGVExFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTXNWMEZCVnl4RlFVRkZMRU5CUVVNc1QwRkJUeXhEUVVGRExFZEJRVWNzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXp0QlFVTnVSU3hKUVVGQkxFMUJRVTBzVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRXRCUVVzc1EwRkJRenRCUVVOb1JDeEpRVUZCTEU5QlFVOHNSMEZCUnl4TlFVRk5MRU5CUVVFc1EwRkJRU3hGUVVGSkxFbEJRVWtzUTBGQlNTeERRVUZCTEVWQlFVRXNUVUZCVFN4RlFVRkZMRU5CUVVNN1FVRkRka01zUTBGQlF6dEJRVVZOTEdWQlFXVXNiMEpCUVc5Q0xFTkJRM2hETEVsQlFWVXNSVUZEVml4VlFVRjVRaXhGUVVONlFpeFRRVUZCTEVkQlFYVkNMRmRCUVZjc1JVRkJRVHRCUVVWc1F5eEpRVUZCTEUxQlFVMHNUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxFdEJRVXNzUTBGQlF6dEpRVU5vUkN4TlFVRk5MRlZCUVZVc1IwRkJSeXhWUVVGVk8wRkJRek5DTEZWQlFVVXNRMEZCUVN4RlFVRkhMRlZCUVZVc1EwRkJReXhQUVVGUExFTkJRVU1zWjBKQlFXZENMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVWtzUTBGQlFTeEZRVUZCTEUxQlFVMHNRMEZCUlN4RFFVRkJPMVZCUTNoRUxFMUJRVTBzVlVGQlZTeERRVUZETEVsQlFVa3NSVUZCUlN4VFFVRlRMRU5CUVVNc1EwRkJRenRKUVVOMFF5eFBRVUZQTzFGQlEwd3NUVUZCVFN4RlFVRkZMRWxCUVVrc1EwRkJReXhKUVVGSk8xRkJRMnBDTEZWQlFWVTdTMEZEV0N4RFFVRkRPMEZCUTBvN08wRkRja1JCT3pzN096czdPMEZCVDBjN1FVRkpZU3hUUVVGQkxHbENRVUZwUWl4RFFVTXZRaXhMUVVGdlFpeEZRVU53UWl4VFFVRTBRaXhGUVVGQk8wbEJSVFZDTEUxQlFVMHNSVUZCUlN4TlFVRk5MRVZCUVVVc1NVRkJTU3hGUVVGRkxGVkJRVlVzUlVGQlJTeEhRVUZITEZOQlFWTXNTVUZCU1N4RlFVRkZMRU5CUVVNN1NVRkRja1FzVFVGQlRTeEpRVUZKTEVkQlFVY3NTMEZCU3l4RFFVRkRMRk5CUVZNc1IwRkJSeXhWUVVGVkxFTkJRVU1zUTBGQlF6dEJRVVV6UXl4SlFVRkJMRWxCUVVrc1NVRkJTU3hGUVVGRk8xRkJRMUlzVDBGQlR5eEpRVUZKTEVsQlFVa3NRMEZCUXl4RFFVRkRMRlZCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNSVUZCUlR0WlFVTjJReXhKUVVGSk8wRkJRMHdzVTBGQlFTeERRVUZETEVOQlFVTTdRVUZEU2l4TFFVRkJPMEZCUlVRc1NVRkJRU3hQUVVGUExFbEJRVWtzUTBGQlF6dEJRVU5rT3p0QlEzcENRVHM3T3pzN096dEJRVTlITzBGQmIwSklPenM3T3p0QlFVdEhPMEZCUTJFc1UwRkJRVVVzYVVKQlFXVXNRMEZETjBJc1lVRkJORUlzUlVGRE5VSXNhVUpCUVhGRExFVkJRVUU3U1VGRmNrTXNUVUZCVFN4SlFVRkpMRWRCUTFJc2FVSkJRV2xDTEVsQlFVa3NhVUpCUVdsQ0xFTkJRVU1zWVVGQllTeEZRVUZGTEdsQ1FVRnBRaXhEUVVGRExFTkJRVU03U1VGRk0wVXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSVHRCUVVOVUxGRkJRVUVzVDBGQlR5eEpRVUZKTEVOQlFVTTdRVUZEWWl4TFFVRkJPMGxCUlVRc1QwRkJUenRSUVVOTUxFbEJRVWs3VVVGRFNpeFhRVUZYTEVWQlFVVXNhVUpCUVdsQ0xFTkJRVU1zVFVGQlRUdEJRVVZ5UXl4UlFVRkJMRWxCUVVrc1JVRkJSU3hOUVVGTkxFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTTdRVUZGY2tJc1VVRkJRU3hOUVVGTkxFVkJRVVVzVFVGQlRTeDFRa0ZCZFVJc1EwRkJReXhKUVVGSkxFTkJRVU03UzBGRE5VTXNRMEZCUXp0QlFVTktMRU5CUVVNN1FVRkZaU3hUUVVGQkxIVkNRVUYxUWl4RFFVTnlReXhKUVVGVkxFVkJRMVlzVjBGQmJVSXNSVUZCUVR0SlFVVnVRaXhQUVVGUE8xRkJRMHdzU1VGQlNUdFJRVU5LTEZkQlFWYzdRVUZGV0N4UlFVRkJMRWxCUVVrc1JVRkJSU3hOUVVGTkxFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTTdRVUZGY2tJc1VVRkJRU3hOUVVGTkxFVkJRVVVzVFVGQlRTeDFRa0ZCZFVJc1EwRkJReXhKUVVGSkxFTkJRVU03UzBGRE5VTXNRMEZCUXp0QlFVTktMRU5CUVVNN1FVRkZTeXhUUVVGVkxITkNRVUZ6UWl4RFFVRkRMRWRCUVZjc1JVRkJRVHRKUVVOb1JDeFBRVUZQTzBGQlEwd3NVVUZCUVN4WFFVRlhMRVZCUVVVc1UwRkJVenRCUVVOMFFpeFJRVUZCTEUxQlFVMHNSVUZCUlN4UFFVRlBPMWxCUTJJc1IwRkJSenRCUVVOSUxGbEJRVUVzVDBGQlR5eEZRVUZGTEUxQlFVc3NSMEZCUnp0VFFVTnNRaXhEUVVGRE8wdEJRMGdzUTBGQlF6dEJRVU5LTEVOQlFVTTdRVUZGUkN4VFFVRlRMSFZDUVVGMVFpeERRVUZETEVsQlFWVXNSVUZCUVR0SlFVTjZReXhOUVVGTkxFZEJRVWNzUjBGQlJ5eEhRVUZITEVOQlFVTXNaVUZCWlN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wbEJSWFJETEU5QlFVODdVVUZEVEN4SFFVRkhPMUZCUTBnc1QwRkJUeXhGUVVGRkxFMUJRVTBzUjBGQlJ5eERRVUZETEdWQlFXVXNRMEZCUXl4SFFVRkhMRU5CUVVNN1MwRkRlRU1zUTBGQlF6dEJRVU5LT3p0QlEzSkdRVHM3T3pzN096dEJRVTlITzBGQmRVVklPenM3T3p0QlFVdEhPMEZCUTJFc1UwRkJRU3huUWtGQlowSXNRMEZET1VJc1kwRkJNRUlzUlVGRE1VSXNVVUZCYlVJc1JVRkJRVHRKUVVWdVFpeFBRVUZQTzFGQlEwd3NTMEZCU3l4RlFVRkZMR05CUVdNc1EwRkJReXhMUVVGTE8xRkJRek5DTEUxQlFVMHNSVUZCUlN4alFVRmpMRU5CUVVNc1RVRkJUVHRCUVVNM1FpeFJRVUZCTEZWQlFWVXNSVUZCUlN4alFVRmpMRU5CUVVNc1YwRkJWeXhKUVVGSkxFbEJRVWs3VVVGRE9VTXNWVUZCVlN4RlFVRkZMR05CUVdNc1EwRkJReXhYUVVGWE8wRkJRM1JETEZGQlFVRXNWVUZCVlN4RlFVRkZMR05CUVdNc1EwRkJReXhWUVVGVkxFbEJRVWtzU1VGQlNUdEJRVU0zUXl4UlFVRkJMRWxCUVVrc1JVRkJSU3hqUVVGakxFTkJRVU1zU1VGQlNTeEpRVUZKTEVsQlFVazdRVUZEYWtNc1VVRkJRU3haUVVGWkxFVkJRVVVzWTBGQll5eERRVUZETEZsQlFWa3NTVUZCU1N4SlFVRkpPMEZCUTJwRUxGRkJRVUVzWjBKQlFXZENMRVZCUVVVc1kwRkJZeXhEUVVGRExHbENRVUZwUWl4SlFVRkpMRVZCUVVVN1FVRkRlRVFzVVVGQlFTeFJRVUZSTEVWQlFVVXNZMEZCWXl4RFFVRkRMRkZCUVZFc1NVRkJTU3hKUVVGSk8xRkJRM3BETEZGQlFWRXNSVUZCUlN4UlFVRlJMRWxCUVVrc1NVRkJTVHRSUVVVeFFpeFRRVUZUTEVWQlFVVkJMR2xDUVVGbExFTkJRM2hDTEdOQlFXTXNRMEZCUXl4VFFVRlRMRVZCUTNoQ0xHTkJRV01zUTBGQlF5eFRRVUZUTEVOQlEzcENPMHRCUTBZc1EwRkJRenRCUVVOS096dEJRM3BIUVRzN096czdPenRCUVU5SE8wRkJNa1ZJT3pzN096dEJRVXRITzBGQlEyRXNVMEZCUVN4alFVRmpMRU5CUXpWQ0xGbEJRVFpDTEVWQlF6ZENMRk5CUVhOQ0xFVkJRVUU3UVVGRmRFSXNTVUZCUVN4TlFVRk5MRmRCUVZjc1IwRkJSeXhaUVVGWkxFTkJRVU1zVjBGQlZ5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMR05CUVdNc1MwRkRPVVFzWjBKQlFXZENMRU5CUTJRc1kwRkJZeXhGUVVOa0xHTkJRV01zUTBGQlF5eGxRVUZsTzBGQlF6VkNMRlZCUVVVc1UwRkJVeXhEUVVGRExHTkJRV01zUTBGQlF5eGxRVUZsTEVOQlFVTTdRVUZETTBNc1ZVRkJSU3hUUVVGVExFTkJRMlFzUTBGRFJpeERRVUZETzBsQlJVWXNUMEZCVHp0UlFVTk1MRXRCUVVzc1JVRkJSU3haUVVGWkxFTkJRVU1zUzBGQlN6dFJRVU42UWl4TlFVRk5MRVZCUVVVc1dVRkJXU3hEUVVGRExFMUJRVTA3UVVGRE0wSXNVVUZCUVN4TlFVRk5MRVZCUVVVc1dVRkJXU3hEUVVGRExFMUJRVTBzU1VGQlNTeEpRVUZKTzFGQlEyNURMR05CUVdNc1JVRkJSU3haUVVGWkxFTkJRVU1zWlVGQlpUdEJRVU0xUXl4UlFVRkJMRzFDUVVGdFFpeEZRVUZGTEZsQlFWa3NRMEZCUXl4eFFrRkJjVUlzU1VGQlNTeEpRVUZKTzFGQlF5OUVMRlZCUVZVc1JVRkJSU3haUVVGWkxFTkJRVU1zVjBGQlZ6dEJRVU53UXl4UlFVRkJMR0ZCUVdFc1JVRkJSU3haUVVGWkxFTkJRVU1zWTBGQll5eEpRVUZKTEVsQlFVazdRVUZEYkVRc1VVRkJRU3hYUVVGWExFVkJRVVVzV1VGQldTeERRVUZETEZkQlFWY3NTVUZCU1N4RlFVRkZPMUZCUXpORExGZEJRVmM3UVVGRFdDeFJRVUZCTEZWQlFWVXNSVUZCUlN4WlFVRlpMRU5CUVVNc1ZVRkJWU3hKUVVGSkxFVkJRVVU3UVVGRGVrTXNVVUZCUVN4TlFVRk5MRVZCUVVVc1NVRkJTVHRSUVVWYUxGTkJRVk1zUlVGQlJVRXNhVUpCUVdVc1EwRkJReXhaUVVGWkxFTkJRVU1zVTBGQlV5eEZRVUZGTEZsQlFWa3NRMEZCUXl4VFFVRlRMRU5CUVVNN1FVRkZNVVVzVVVGQlFTeFZRVUZWTEVWQlFVVXNkVUpCUVhWQ0xFTkJRVU1zV1VGQldTeERRVUZETEZWQlFWVXNRMEZCUXp0TFFVTTNSQ3hEUVVGRE8wRkJRMG83TzBGRGRFaEJPenM3T3pzN08wRkJUMGM3UVVGdlEwZ3NUVUZCVFVZc1MwRkJSeXhIUVVGSExFdEJRVXNzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhEUVVGRE8wRkJSWGhET3pzN096dEJRVXRITzBGQlEwY3NVMEZCVlN4dFFrRkJiVUlzUTBGRGFrTXNhVUpCUVhWRExFVkJRVUU3UVVGRmRrTXNTVUZCUVN4TlFVRk5MRk5CUVZNc1IwRkJSeXhsUVVGbExFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1EwRkJRenRKUVVWeVJDeFBRVUZQTzFGQlEwd3NVMEZCVXp0QlFVTlVMRkZCUVVFc1kwRkJZeXhGUVVGRkxGTkJRVk1zUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhsUVVGbExFTkJRVU03UVVGRE5VUXNVVUZCUVN4blFrRkJaMElzUlVGQlJTeHBRa0ZCYVVJc1JVRkJSU3hwUWtGQmFVSXNTVUZCU1N4RlFVRkZPMHRCUXpkRUxFTkJRVU03UVVGRFNpeERRVUZETzBGQlJVUTdPenM3TzBGQlMwYzdRVUZEU0N4VFFVRlRMR1ZCUVdVc1EwRkJReXhwUWtGQmRVTXNSVUZCUVR0SlFVTTVSQ3hOUVVGTkxFVkJRMG9zVTBGQlV5eEZRVUZGTEdkQ1FVRm5RaXhGUVVNelFpeGxRVUZsTEVWQlFVVXNkVUpCUVhWQ0xFZEJRM3BETEVkQlFVY3NhVUpCUVdsQ0xFTkJRVU03UVVGRGRFSXNTVUZCUVVFc1MwRkJSeXhEUVVGRExITkRRVUZ6UXl4RlFVRkZMR2xDUVVGcFFpeERRVUZETEVOQlFVTTdPenRCUVVzdlJDeEpRVUZCTEUxQlFVMHNTMEZCU3l4SFFVRjNRanRCUVVOcVF5eFJRVUZCTzBGQlEwVXNXVUZCUVN4SlFVRkpMRVZCUVVVc1owSkJRV2RDTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU03UVVGREwwTXNXVUZCUVN4TFFVRkxMRVZCUVVVc2RVSkJRWFZDTzBGQlF5OUNMRk5CUVVFN1MwRkRSaXhEUVVGRE8wbEJRMFlzVFVGQlRTeHJRa0ZCYTBJc1IwRkJkMElzUlVGQlJTeERRVUZETzBsQlJXNUVMRTlCUVU4c1MwRkJTeXhEUVVGRExFMUJRVTBzUlVGQlJUdEJRVU51UWl4UlFVRkJMRTFCUVUwc1QwRkJUeXhIUVVGSExFdEJRVXNzUTBGQlF5eEhRVUZITEVWQlFVY3NRMEZCUXp0QlFVTTNRaXhSUVVGQkxHdENRVUZyUWl4RFFVRkRMRTlCUVU4c1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6dEJRVVZ3UXl4UlFVRkJMRTFCUVUwc1JVRkJSU3hKUVVGSkxFVkJRVVVzWlVGQlpTeEZRVUZGTEVkQlFVY3NUMEZCVHl4RFFVRkRPMEZCUlRGRExGRkJRVUVzWlVGQlpTeEZRVUZGTEZkQlFWY3NSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJReXhGUVVGRkxHVkJRV1VzUlVGQlJTeFZRVUZWTEVWQlFVVXNTMEZCU1R0QlFVTjRSU3haUVVGQkxFbEJRVWtzVlVGQlZTeEZRVUZGTzBGQlEyUXNaMEpCUVVFc1NVRkJTU3hwUWtGQmFVSXNRMEZCUXl4VFFVRlRMRU5CUVVNc1ZVRkJWU3hEUVVGRExFVkJRVVU3YjBKQlF6TkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU03UVVGRFZDeDNRa0ZCUVN4SlFVRkpMRVZCUVVVc2FVSkJRV2xDTEVOQlFVTXNVMEZCVXl4RFFVRkRMRlZCUVZVc1EwRkJRenRCUVVNM1F5eDNRa0ZCUVN4TFFVRkxMRVZCUVVVc1ZVRkJWVHRCUVVOc1FpeHhRa0ZCUVN4RFFVRkRMRU5CUVVNN1FVRkRTaXhwUWtGQlFUdEJRVUZOTEhGQ1FVRkJPMEZCUTB3c2IwSkJRVUZCTEV0QlFVY3NRMEZCUXl3d1FrRkJNRUlzUlVGQlJTeFZRVUZWTEVOQlFVTXNRMEZCUXp0QlFVTTNReXhwUWtGQlFUdEJRVU5HTEdGQlFVRTdRVUZEU0N4VFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOS0xFdEJRVUU3U1VGRlJDeE5RVUZOTEdkQ1FVRm5RaXhIUVVGSExHdENRVUZyUWl4RFFVRkRMRTFCUVUwc1EwRkRhRVFzUTBGQlF5eFRRVUZUTEVWQlFVVXNhVUpCUVdsQ0xFdEJRVWs3VVVGREwwSXNUVUZCVFN4RlFVRkZMRWxCUVVrc1JVRkJSU3haUVVGWkxFVkJRVVVzUzBGQlN5eEZRVUZGTEVkQlFVY3NhVUpCUVdsQ0xFTkJRVU03UVVGRGVFUXNVVUZCUVVFc1MwRkJSeXhEUVVGRExEWkNRVUUyUWl4RlFVRkZMRmxCUVZrc1EwRkJReXhEUVVGRE8xRkJSV3BFTEUxQlFVMHNVVUZCVVN4SFFVRkhMR05CUVdNc1EwRkJReXhaUVVGWkxFVkJRVVVzVTBGQlV5eERRVUZETEVOQlFVTTdRVUZEZWtRc1VVRkJRU3hUUVVGVExFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NVVUZCVVN4RFFVRkRPMEZCUXpWQ0xGRkJRVUVzVDBGQlR5eFRRVUZUTEVOQlFVTTdTMEZEYkVJc1JVRkRSQ3hGUVVGcFFpeERRVU5zUWl4RFFVRkRPMGxCUlVZc1RVRkJUU3hoUVVGaExFZEJRVWNzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4RFFVRkRMRU5CUVVNN08wbEJSMnhGTEU5QlFVOHNZVUZCWVN4RFFVRkRMRTFCUVUwc1JVRkJSVHRCUVVNelFpeFJRVUZCTEUxQlFVMHNaVUZCWlN4SFFVRkhMR0ZCUVdFc1EwRkJReXhIUVVGSExFVkJRVWNzUTBGQlF6dFJRVVUzUXl4bFFVRmxMRU5CUVVNc1YwRkJWeXhGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZETEVWQlFVVXNVVUZCVVN4RlFVRkZMRXRCUVVrN1FVRkRjRVFzV1VGQlFTeEpRVUZKTEZGQlFWRXNSVUZCUlR0blFrRkRXaXhOUVVGTkxHZENRVUZuUWl4SFFVRkhMRkZCUVZFc1EwRkJRenRCUVVOc1F5eG5Ra0ZCUVN4blFrRkJaMElzUTBGQlF5eE5RVUZOTEVkQlFVY3NaVUZCWlN4RFFVRkRPMEZCUXpGRExHZENRVUZCTEdGQlFXRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNRMEZCUXp0QlFVTjBReXhoUVVGQk8wRkJRMGdzVTBGQlF5eERRVUZETEVOQlFVTTdRVUZEU2l4TFFVRkJPMEZCUlVRc1NVRkJRU3hQUVVGUExHZENRVUZuUWl4RFFVRkRPMEZCUXpGQ096dEJRM1pKUVN4SlFVRkpMRTlCUVU4c1IwRkJSMnBLTEZGQlFYRkNMRU5CUVVNN1FVRkRjRU03UVVGRFFUdEJRVU5CTEVsQlFVbHZTaXhaUVVGVkxFZEJRVWNzVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU03UVVGRE9VTTdRVUZEUVN4SlFVRkJMRmRCUVdNc1IwRkJSMEVzV1VGQlZUczdRVU5NTTBJc1NVRkJTU3hYUVVGWExFZEJRVWR3U2l4WlFVRjVRanRCUVVNelF5eEpRVUZKTEZWQlFWVXNSMEZCUjFFc1YwRkJkMElzUTBGQlF6dEJRVU14UXp0QlFVTkJPMEZCUTBFc1NVRkJTV0VzWVVGQlZ5eEhRVUZITEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNN1FVRkRia003UVVGRFFUdEJRVU5CTEVsQlFVbERMR2RDUVVGakxFZEJRVWRFTEdGQlFWY3NRMEZCUXl4alFVRmpMRU5CUVVNN1FVRkRhRVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk5uU1N4VlFVRlJMRU5CUVVNc1RVRkJUU3hGUVVGRk8wRkJRekZDTEVWQlFVVXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhOUVVGTkxFTkJRVU1zUlVGQlJUdEJRVU0xUWl4SlFVRkpMRTlCUVU4c1ZVRkJWU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzBGQlF6bENMRWRCUVVjN1FVRkRTQ3hGUVVGRkxFbEJRVWtzVFVGQlRTeEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTnNRaXhGUVVGRkxFdEJRVXNzU1VGQlNTeEhRVUZITEVsQlFVa3NUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhGUVVGRk8wRkJRMnhETEVsQlFVa3NTVUZCU1M5SUxHZENRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSU3hIUVVGSExFTkJRVU1zU1VGQlNTeEhRVUZITEVsQlFVa3NZVUZCWVN4RlFVRkZPMEZCUTJ4RkxFMUJRVTBzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVOMlFpeExRVUZMTzBGQlEwd3NSMEZCUnp0QlFVTklMRVZCUVVVc1QwRkJUeXhOUVVGTkxFTkJRVU03UVVGRGFFSXNRMEZCUXp0QlFVTkVPMEZCUTBFc1NVRkJRU3hUUVVGakxFZEJRVWNyU0N4VlFVRlJPenRCUXpkQ2VrSXNTVUZCU1N4aFFVRmhMRWRCUVVkeVNpeGpRVUV5UWp0QlFVTXZReXhKUVVGSkxGRkJRVkVzUjBGQlIxRXNVMEZCYzBJN1FVRkRja01zU1VGQlNUQkZMR0ZCUVZjc1IwRkJSM3BGTEdGQlFYZENMRU5CUVVNN1FVRkRNME03UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZOQlFWTTJTU3hOUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTzBGQlEzUkNMRVZCUVVVc1QwRkJUM0JGTEdGQlFWY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhoUVVGaExFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NVVUZCVVN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8wRkJRM2hGTEVOQlFVTTdRVUZEUkR0QlFVTkJMRWxCUVVFc1RVRkJZeXhIUVVGSGIwVXNUVUZCU1RzN1FVTndRM0pDTEVsQlFVa3NUMEZCVHl4SFFVRkhkRW9zVVVGQmNVSTdRVUZEYmtNc1NVRkJTWE5LTEUxQlFVa3NSMEZCUnpsSkxFMUJRV2xDTEVOQlFVTTdRVUZETjBJN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVeXRKTEZsQlFWVXNRMEZCUXl4TlFVRk5MRVZCUVVVc1VVRkJVU3hGUVVGRk8wRkJRM1JETEVWQlFVVXNUMEZCVHl4TlFVRk5MRWxCUVVrc1QwRkJUeXhEUVVGRExFMUJRVTBzUlVGQlJTeFJRVUZSTEVWQlFVVkVMRTFCUVVrc1EwRkJReXhEUVVGRE8wRkJRMjVFTEVOQlFVTTdRVUZEUkR0QlFVTkJMRWxCUVVFc1YwRkJZeXhIUVVGSFF5eFpRVUZWT3pzN096czdPenM3TzBORFpETkNMRWxCUVVrc1kwRkJZeXhIUVVGSExESkNRVUV5UWl4RFFVRkRPMEZCUTJwRU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UTBGRFFTeFRRVUZUTEZkQlFWY3NRMEZCUXl4TFFVRkxMRVZCUVVVN1IwRkRNVUlzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4SFFVRkhMRU5CUVVNc1MwRkJTeXhGUVVGRkxHTkJRV01zUTBGQlF5eERRVUZETzBkQlEzcERMRTlCUVU4c1NVRkJTU3hEUVVGRE8wVkJRMkk3UVVGRFJEdEJRVU5CTEVOQlFVRXNXVUZCWXl4SFFVRkhMRmRCUVZjc1EwRkJRVHM3T3pzN096czdPenM3T3pzN096czdPenM3UTBOVU5VSXNVMEZCVXl4WFFVRlhMRU5CUVVNc1MwRkJTeXhGUVVGRk8wZEJRekZDTEU5QlFVOHNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdSVUZEYWtNN1FVRkRSRHRCUVVOQkxFTkJRVUVzV1VGQll5eEhRVUZITEZkQlFWY3NRMEZCUVRzN096czdPenM3T3p0RFEySTFRaXhKUVVGSkxGRkJRVkVzUjBGQlIzWktMRk5CUVhOQ08wdEJRMnBETEZkQlFWY3NSMEZCUjFFc2JVSkJRWGxDTEVWQlFVRTdTMEZEZGtNc1YwRkJWeXhIUVVGSFF5eHRRa0ZCUVN4RlFVRjVRaXhEUVVGRE8wRkJRelZETzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdERRVU5CTEZOQlFWTXNVVUZCVVN4RFFVRkRMRTFCUVUwc1JVRkJSVHRCUVVNeFFpeEhRVUZGTEVsQlFVa3NTMEZCU3l4SFFVRkhMRU5CUVVNc1EwRkJRenRQUVVOV0xFMUJRVTBzUjBGQlJ5eE5RVUZOTEVsQlFVa3NTVUZCU1N4SFFVRkhMRU5CUVVNc1IwRkJSeXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETzBGQlEyeEVPMEZCUTBFc1IwRkJSU3hKUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEVsQlFVa3NVVUZCVVN4RFFVRkRPMEZCUXk5Q0xFZEJRVVVzVDBGQlR5eEZRVUZGTEV0QlFVc3NSMEZCUnl4TlFVRk5MRVZCUVVVN1MwRkRka0lzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU42UWp0RlFVTkdPMEZCUTBRN1FVRkRRVHRCUVVOQkxFTkJRVUVzVVVGQlVTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRWRCUVVjc1VVRkJVU3hEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVkQlFVY3NWMEZCVnl4RFFVRkRPMEZCUXk5RUxFTkJRVUVzVVVGQlVTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRWRCUVVjc1YwRkJWeXhEUVVGRE8wRkJRM0pETzBGQlEwRXNRMEZCUVN4VFFVRmpMRWRCUVVjc1VVRkJVU3hEUVVGQk96czdPenM3T3pzN096czdPenM3UVVOb1FucENMRk5CUVZNclNTeFhRVUZUTEVOQlFVTXNTMEZCU3l4RlFVRkZMRk5CUVZNc1JVRkJSVHRCUVVOeVF5eEZRVUZGTEVsQlFVa3NTMEZCU3l4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVOb1FpeE5RVUZOTEUxQlFVMHNSMEZCUnl4TFFVRkxMRWxCUVVrc1NVRkJTU3hIUVVGSExFTkJRVU1zUjBGQlJ5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRPMEZCUTJoRU8wRkJRMEVzUlVGQlJTeFBRVUZQTEVWQlFVVXNTMEZCU3l4SFFVRkhMRTFCUVUwc1JVRkJSVHRCUVVNelFpeEpRVUZKTEVsQlFVa3NVMEZCVXl4RFFVRkRMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RFFVRkRMRVZCUVVVN1FVRkRMME1zVFVGQlRTeFBRVUZQTEVsQlFVa3NRMEZCUXp0QlFVTnNRaXhMUVVGTE8wRkJRMHdzUjBGQlJ6dEJRVU5JTEVWQlFVVXNUMEZCVHl4TFFVRkxMRU5CUVVNN1FVRkRaaXhEUVVGRE8wRkJRMFE3UVVGRFFTeEpRVUZCTEZWQlFXTXNSMEZCUjBFc1YwRkJVenM3T3pzN096czdPenM3T3pzN096czdRVU5rTVVJc1EwRkJRU3hUUVVGVExGRkJRVkVzUTBGQlF5eExRVUZMTEVWQlFVVXNSMEZCUnl4RlFVRkZPMEZCUXpsQ0xFZEJRVVVzVDBGQlR5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wVkJRM1pDTzBGQlEwUTdRVUZEUVN4RFFVRkJMRk5CUVdNc1IwRkJSeXhSUVVGUkxFTkJRVUU3T3pzN1FVTmFla0lzU1VGQlNTeFJRVUZSTEVkQlFVZDRTaXhuUWtGQmMwSXNSVUZCUVR0QlFVTnlReXhKUVVGSkxGTkJRVk1zUjBGQlIxRXNWVUZCZFVJN1FVRkRka01zU1VGQlNTeFJRVUZSTEVkQlFVZERMR2RDUVVGQkxFVkJRWE5DTEVOQlFVTTdRVUZEZEVNN1FVRkRRVHRCUVVOQkxFbEJRVWxuU2l4elFrRkJiMElzUjBGQlJ5eERRVUZETzBGQlF6VkNMRWxCUVVsRExIZENRVUZ6UWl4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVNdlFqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVME1zWVVGQlZ5eERRVUZETEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1QwRkJUeXhGUVVGRkxGVkJRVlVzUlVGQlJTeFRRVUZUTEVWQlFVVXNTMEZCU3l4RlFVRkZPMEZCUXpGRkxFVkJRVVVzU1VGQlNTeFRRVUZUTEVkQlFVY3NUMEZCVHl4SFFVRkhSaXh6UWtGQmIwSTdRVUZEYUVRc1RVRkJUU3hUUVVGVExFZEJRVWNzUzBGQlN5eERRVUZETEUxQlFVMDdRVUZET1VJc1RVRkJUU3hUUVVGVExFZEJRVWNzUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXp0QlFVTXZRanRCUVVOQkxFVkJRVVVzU1VGQlNTeFRRVUZUTEVsQlFVa3NVMEZCVXl4SlFVRkpMRVZCUVVVc1UwRkJVeXhKUVVGSkxGTkJRVk1zUjBGQlJ5eFRRVUZUTEVOQlFVTXNSVUZCUlR0QlFVTjJSU3hKUVVGSkxFOUJRVThzUzBGQlN5eERRVUZETzBGQlEycENMRWRCUVVjN1FVRkRTRHRCUVVOQkxFVkJRVVVzU1VGQlNTeFZRVUZWTEVkQlFVY3NTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU53UXl4RlFVRkZMRWxCUVVrc1ZVRkJWU3hIUVVGSExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRjRU1zUlVGQlJTeEpRVUZKTEZWQlFWVXNTVUZCU1N4VlFVRlZMRVZCUVVVN1FVRkRhRU1zU1VGQlNTeFBRVUZQTEZWQlFWVXNTVUZCU1N4TFFVRkxMRWxCUVVrc1ZVRkJWU3hKUVVGSkxFdEJRVXNzUTBGQlF6dEJRVU4wUkN4SFFVRkhPMEZCUTBnc1JVRkJSU3hKUVVGSkxFdEJRVXNzUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEYUVJc1RVRkJUU3hOUVVGTkxFZEJRVWNzU1VGQlNUdEJRVU51UWl4TlFVRk5MRWxCUVVrc1IwRkJSeXhEUVVGRExFOUJRVThzUjBGQlIwTXNkMEpCUVhOQ0xFbEJRVWtzU1VGQlNTeFJRVUZSTEVkQlFVY3NVMEZCVXl4RFFVRkRPMEZCUXpORk8wRkJRMEVzUlVGQlJTeExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU14UWl4RlFVRkZMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zUzBGQlN5eEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMEZCUXpGQ08wRkJRMEU3UVVGRFFTeEZRVUZGTEU5QlFVOHNSVUZCUlN4TFFVRkxMRWRCUVVjc1UwRkJVeXhGUVVGRk8wRkJRemxDTEVsQlFVa3NTVUZCU1N4UlFVRlJMRWRCUVVjc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF6dEJRVU12UWl4UlFVRlJMRkZCUVZFc1IwRkJSeXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdRVUZEYUVNN1FVRkRRU3hKUVVGSkxFbEJRVWtzVlVGQlZTeEZRVUZGTzBGQlEzQkNMRTFCUVUwc1NVRkJTU3hSUVVGUkxFZEJRVWNzVTBGQlV6dEJRVU01UWl4VlFVRlZMRlZCUVZVc1EwRkJReXhSUVVGUkxFVkJRVVVzVVVGQlVTeEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUTBGQlF6dEJRVU53UlN4VlFVRlZMRlZCUVZVc1EwRkJReXhSUVVGUkxFVkJRVVVzVVVGQlVTeEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzBGQlEzSkZMRXRCUVVzN1FVRkRUQ3hKUVVGSkxFbEJRVWtzVVVGQlVTeExRVUZMTEZOQlFWTXNSVUZCUlR0QlFVTm9ReXhOUVVGTkxFbEJRVWtzVVVGQlVTeEZRVUZGTzBGQlEzQkNMRkZCUVZFc1UwRkJVenRCUVVOcVFpeFBRVUZQTzBGQlExQXNUVUZCVFN4TlFVRk5MRWRCUVVjc1MwRkJTeXhEUVVGRE8wRkJRM0pDTEUxQlFVMHNUVUZCVFR0QlFVTmFMRXRCUVVzN1FVRkRURHRCUVVOQkxFbEJRVWtzU1VGQlNTeEpRVUZKTEVWQlFVVTdRVUZEWkN4TlFVRk5MRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUzBGQlN5eEZRVUZGTEZOQlFWTXNVVUZCVVN4RlFVRkZMRkZCUVZFc1JVRkJSVHRCUVVONlJDeFpRVUZaTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hGUVVGRkxGRkJRVkVzUTBGQlF6dEJRVU42UXl4cFFrRkJhVUlzVVVGQlVTeExRVUZMTEZGQlFWRXNTVUZCU1N4VFFVRlRMRU5CUVVNc1VVRkJVU3hGUVVGRkxGRkJRVkVzUlVGQlJTeFBRVUZQTEVWQlFVVXNWVUZCVlN4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRExFVkJRVVU3UVVGRGRFY3NZMEZCWXl4UFFVRlBMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdRVUZEZWtNc1lVRkJZVHRCUVVOaUxGZEJRVmNzUTBGQlF5eEZRVUZGTzBGQlEyUXNVVUZCVVN4TlFVRk5MRWRCUVVjc1MwRkJTeXhEUVVGRE8wRkJRM1pDTEZGQlFWRXNUVUZCVFR0QlFVTmtMRTlCUVU4N1FVRkRVQ3hMUVVGTExFMUJRVTBzU1VGQlNUdEJRVU5tTEZWQlFWVXNVVUZCVVN4TFFVRkxMRkZCUVZFN1FVRkRMMElzV1VGQldTeFRRVUZUTEVOQlFVTXNVVUZCVVN4RlFVRkZMRkZCUVZFc1JVRkJSU3hQUVVGUExFVkJRVVVzVlVGQlZTeEZRVUZGTEV0QlFVc3NRMEZCUXp0QlFVTnlSU3hUUVVGVExFVkJRVVU3UVVGRFdDeE5RVUZOTEUxQlFVMHNSMEZCUnl4TFFVRkxMRU5CUVVNN1FVRkRja0lzVFVGQlRTeE5RVUZOTzBGQlExb3NTMEZCU3p0QlFVTk1MRWRCUVVjN1FVRkRTQ3hGUVVGRkxFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRCUVVONlFpeEZRVUZGTEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU42UWl4RlFVRkZMRTlCUVU4c1RVRkJUU3hEUVVGRE8wRkJRMmhDTEVOQlFVTTdRVUZEUkR0QlFVTkJMRWxCUVVFc1dVRkJZeXhIUVVGSFF5eGhRVUZYT3pzN096czdPenM3TzBGRE5VVTFRaXhUUVVGVFF5eFpRVUZWTEVOQlFVTXNSMEZCUnl4RlFVRkZPMEZCUTNwQ0xFVkJRVVVzU1VGQlNTeExRVUZMTEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUTJoQ0xFMUJRVTBzVFVGQlRTeEhRVUZITEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGREwwSTdRVUZEUVN4RlFVRkZMRWRCUVVjc1EwRkJReXhQUVVGUExFTkJRVU1zVTBGQlV5eExRVUZMTEVWQlFVVXNSMEZCUnl4RlFVRkZPMEZCUTI1RExFbEJRVWtzVFVGQlRTeERRVUZETEVWQlFVVXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTTdRVUZEYmtNc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRFRDeEZRVUZGTEU5QlFVOHNUVUZCVFN4RFFVRkRPMEZCUTJoQ0xFTkJRVU03UVVGRFJEdEJRVU5CTEVsQlFVRXNWMEZCWXl4SFFVRkhRU3haUVVGVk96czdPenM3T3pzN096czdPenM3TzBORFZqTkNMRk5CUVZNc1ZVRkJWU3hEUVVGRExFZEJRVWNzUlVGQlJUdEJRVU42UWl4SFFVRkZMRWxCUVVrc1MwRkJTeXhIUVVGSExFTkJRVU1zUTBGQlF6dFBRVU5XTEUxQlFVMHNSMEZCUnl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBGQlF5OUNPMEZCUTBFc1IwRkJSU3hIUVVGSExFTkJRVU1zVDBGQlR5eERRVUZETEZOQlFWTXNTMEZCU3l4RlFVRkZPMEZCUXpsQ0xFdEJRVWtzVFVGQlRTeERRVUZETEVWQlFVVXNTMEZCU3l4RFFVRkRMRWRCUVVjc1MwRkJTeXhEUVVGRE8wRkJRelZDTEVsQlFVY3NRMEZCUXl4RFFVRkRPMGRCUTBnc1QwRkJUeXhOUVVGTkxFTkJRVU03UlVGRFpqdEJRVU5FTzBGQlEwRXNRMEZCUVN4WFFVRmpMRWRCUVVjc1ZVRkJWU3hEUVVGQk96czdPMEZEYWtJelFpeEpRVUZKZUVrc1VVRkJUU3hIUVVGSGNFSXNZMEZCYjBJc1JVRkJRVHRCUVVOcVF5eEpRVUZKYVVVc1dVRkJWU3hIUVVGSGVrUXNWMEZCZDBJN1FVRkRla01zU1VGQlNTeEZRVUZGTEVkQlFVZERMRWxCUVdVN1FVRkRlRUlzU1VGQlNXdEtMR0ZCUVZjc1IwRkJSMnBLTEZsQlFYbENPMEZCUXpORExFbEJRVWtzVlVGQlZTeEhRVUZIUXl4WFFVRjNRanRCUVVONlF5eEpRVUZKTEZWQlFWVXNSMEZCUnl0RExHdENRVUZCTEVWQlFYZENMRU5CUVVNN1FVRkRNVU03UVVGRFFUdEJRVU5CTEVsQlFVa3JSaXh6UWtGQmIwSXNSMEZCUnl4RFFVRkRPMEZCUXpWQ0xFbEJRVWxETEhkQ1FVRnpRaXhIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU12UWp0QlFVTkJPMEZCUTBFc1NVRkJTVzVGTEZOQlFVOHNSMEZCUnl4clFrRkJhMEk3UVVGRGFFTXNTVUZCU1VNc1UwRkJUeXhIUVVGSExHVkJRV1U3UVVGRE4wSXNTVUZCU1VNc1ZVRkJVU3hIUVVGSExHZENRVUZuUWp0QlFVTXZRaXhKUVVGSlF5eFJRVUZOTEVkQlFVY3NZMEZCWXp0QlFVTXpRaXhKUVVGSlF5eFhRVUZUTEVkQlFVY3NhVUpCUVdsQ08wRkJRMnBETEVsQlFVbERMRmRCUVZNc1IwRkJSeXhwUWtGQmFVSTdRVUZEYWtNc1NVRkJTVU1zVVVGQlRTeEhRVUZITEdOQlFXTTdRVUZETTBJc1NVRkJTVU1zVjBGQlV5eEhRVUZITEdsQ1FVRnBRanRCUVVOcVF5eEpRVUZKSzBRc1YwRkJVeXhIUVVGSExHbENRVUZwUWl4RFFVRkRPMEZCUTJ4RE8wRkJRMEVzU1VGQlNUZEVMR2RDUVVGakxFZEJRVWNzYzBKQlFYTkNPMEZCUXpORExFbEJRVWxETEdGQlFWY3NSMEZCUnl4dFFrRkJiVUlzUTBGQlF6dEJRVU4wUXp0QlFVTkJPMEZCUTBFc1NVRkJTVFpFTEdGQlFWY3NSMEZCUnpGSkxGRkJRVTBzUjBGQlIwRXNVVUZCVFN4RFFVRkRMRk5CUVZNc1IwRkJSeXhUUVVGVE8wRkJRM1pFTEVsQlFVa3lTU3hsUVVGaExFZEJRVWRFTEdGQlFWY3NSMEZCUjBFc1lVRkJWeXhEUVVGRExFOUJRVThzUjBGQlJ5eFRRVUZUTEVOQlFVTTdRVUZEYkVVN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVMFVzV1VGQlZTeERRVUZETEUxQlFVMHNSVUZCUlN4TFFVRkxMRVZCUVVVc1IwRkJSeXhGUVVGRkxFOUJRVThzUlVGQlJTeFZRVUZWTEVWQlFVVXNVMEZCVXl4RlFVRkZMRXRCUVVzc1JVRkJSVHRCUVVNdlJTeEZRVUZGTEZGQlFWRXNSMEZCUnp0QlFVTmlMRWxCUVVrc1MwRkJTeTlFTEdGQlFWYzdRVUZEY0VJc1RVRkJUU3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEZWQlFWVXNTVUZCU1N4TFFVRkxMRU5CUVVNc1ZVRkJWVHRCUVVOb1JDeFhRVUZYTEUxQlFVMHNRMEZCUXl4VlFVRlZMRWxCUVVrc1MwRkJTeXhEUVVGRExGVkJRVlVzUTBGQlF5eEZRVUZGTzBGQlEyNUVMRkZCUVZFc1QwRkJUeXhMUVVGTExFTkJRVU03UVVGRGNrSXNUMEZCVHp0QlFVTlFMRTFCUVUwc1RVRkJUU3hIUVVGSExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTTdRVUZETjBJc1RVRkJUU3hMUVVGTExFZEJRVWNzUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXp0QlFVTXpRanRCUVVOQkxFbEJRVWtzUzBGQlMwUXNaMEpCUVdNN1FVRkRka0lzVFVGQlRTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRlZCUVZVc1NVRkJTU3hMUVVGTExFTkJRVU1zVlVGQlZUdEJRVU5vUkN4VlFVRlZMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWt2UWl4WlFVRlZMRU5CUVVNc1RVRkJUU3hEUVVGRExFVkJRVVVzU1VGQlNVRXNXVUZCVlN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFVkJRVVU3UVVGRGNrVXNVVUZCVVN4UFFVRlBMRXRCUVVzc1EwRkJRenRCUVVOeVFpeFBRVUZQTzBGQlExQXNUVUZCVFN4UFFVRlBMRWxCUVVrc1EwRkJRenRCUVVOc1FqdEJRVU5CTEVsQlFVa3NTMEZCUzNOQ0xGTkJRVThzUTBGQlF6dEJRVU5xUWl4SlFVRkpMRXRCUVV0RExGTkJRVThzUTBGQlF6dEJRVU5xUWl4SlFVRkpMRXRCUVV0SExGZEJRVk03UVVGRGJFSTdRVUZEUVR0QlFVTkJMRTFCUVUwc1QwRkJUeXhGUVVGRkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRCUVVOcVF6dEJRVU5CTEVsQlFVa3NTMEZCUzBZc1ZVRkJVVHRCUVVOcVFpeE5RVUZOTEU5QlFVOHNUVUZCVFN4RFFVRkRMRWxCUVVrc1NVRkJTU3hMUVVGTExFTkJRVU1zU1VGQlNTeEpRVUZKTEUxQlFVMHNRMEZCUXl4UFFVRlBMRWxCUVVrc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF6dEJRVU14UlR0QlFVTkJMRWxCUVVrc1MwRkJTMGNzVjBGQlV5eERRVUZETzBGQlEyNUNMRWxCUVVrc1MwRkJTMFVzVjBGQlV6dEJRVU5zUWp0QlFVTkJPMEZCUTBFN1FVRkRRU3hOUVVGTkxFOUJRVThzVFVGQlRTeExRVUZMTEV0QlFVc3NSMEZCUnl4RlFVRkZMRU5CUVVNc1EwRkJRenRCUVVOd1F6dEJRVU5CTEVsQlFVa3NTMEZCUzBvc1VVRkJUVHRCUVVObUxFMUJRVTBzU1VGQlNTeFBRVUZQTEVkQlFVY3NWVUZCVlN4RFFVRkRPMEZCUXk5Q08wRkJRMEVzU1VGQlNTeExRVUZMUnl4UlFVRk5PMEZCUTJZc1RVRkJUU3hKUVVGSkxGTkJRVk1zUjBGQlJ5eFBRVUZQTEVkQlFVYzBSQ3h6UWtGQmIwSXNRMEZCUXp0QlFVTnlSQ3hOUVVGTkxFOUJRVThzUzBGQlN5eFBRVUZQTEVkQlFVY3NWVUZCVlN4RFFVRkRMRU5CUVVNN1FVRkRlRU03UVVGRFFTeE5RVUZOTEVsQlFVa3NUVUZCVFN4RFFVRkRMRWxCUVVrc1NVRkJTU3hMUVVGTExFTkJRVU1zU1VGQlNTeEpRVUZKTEVOQlFVTXNVMEZCVXl4RlFVRkZPMEZCUTI1RUxGRkJRVkVzVDBGQlR5eExRVUZMTEVOQlFVTTdRVUZEY2tJc1QwRkJUenRCUVVOUU8wRkJRMEVzVFVGQlRTeEpRVUZKTEU5QlFVOHNSMEZCUnl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzBGQlEzUkRMRTFCUVUwc1NVRkJTU3hQUVVGUExFVkJRVVU3UVVGRGJrSXNVVUZCVVN4UFFVRlBMRTlCUVU4c1NVRkJTU3hMUVVGTExFTkJRVU03UVVGRGFFTXNUMEZCVHp0QlFVTlFMRTFCUVUwc1QwRkJUeXhKUVVGSlF5eDNRa0ZCYzBJc1EwRkJRenRCUVVONFF6dEJRVU5CTzBGQlEwRXNUVUZCVFN4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFMUJRVTBzUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXp0QlFVTXZRaXhOUVVGTkxFbEJRVWtzVFVGQlRTeEhRVUZIUXl4aFFVRlhMRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eEZRVUZGTEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1JVRkJSU3hQUVVGUExFVkJRVVVzVlVGQlZTeEZRVUZGTEZOQlFWTXNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRenRCUVVOMlJ5eE5RVUZOTEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dEJRVU01UWl4TlFVRk5MRTlCUVU4c1RVRkJUU3hEUVVGRE8wRkJRM0JDTzBGQlEwRXNTVUZCU1N4TFFVRkxSU3hYUVVGVE8wRkJRMnhDTEUxQlFVMHNTVUZCU1VVc1pVRkJZU3hGUVVGRk8wRkJRM3BDTEZGQlFWRXNUMEZCVDBFc1pVRkJZU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1VFc1pVRkJZU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0QlFVTjJSU3hQUVVGUE8wRkJRMUFzUjBGQlJ6dEJRVU5JTEVWQlFVVXNUMEZCVHl4TFFVRkxMRU5CUVVNN1FVRkRaaXhEUVVGRE8wRkJRMFE3UVVGRFFTeEpRVUZCTEZkQlFXTXNSMEZCUjBNc1dVRkJWVHM3T3pzN096czdPenM3T3pzN096czdRVU4yUnpOQ0xFTkJRVUVzVTBGQlV5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RlFVRkZMRTFCUVUwc1JVRkJSVHRCUVVOc1F5eEhRVUZGTEVsQlFVa3NTMEZCU3l4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVOb1FpeFBRVUZOTEUxQlFVMHNSMEZCUnl4TlFVRk5MRU5CUVVNc1RVRkJUVHRCUVVNMVFpeFBRVUZOTEUxQlFVMHNSMEZCUnl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRE8wRkJRelZDTzBGQlEwRXNSMEZCUlN4UFFVRlBMRVZCUVVVc1MwRkJTeXhIUVVGSExFMUJRVTBzUlVGQlJUdExRVU4yUWl4TFFVRkxMRU5CUVVNc1RVRkJUU3hIUVVGSExFdEJRVXNzUTBGQlF5eEhRVUZITEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRKUVVOMlF6dEhRVU5FTEU5QlFVOHNTMEZCU3l4RFFVRkRPMFZCUTJRN1FVRkRSRHRCUVVOQkxFTkJRVUVzVlVGQll5eEhRVUZITEZOQlFWTXNRMEZCUVRzN096dEJRMjVDTVVJc1NVRkJTVU1zVjBGQlV5eEhRVUZIYWtzc2FVSkJRWFZDTEVWQlFVRTdRVUZEZGtNc1NVRkJTU3RGTEZOQlFVOHNSMEZCUjNaRkxGTkJRVzlDTEVOQlFVTTdRVUZEYmtNN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVTBGQlV6QktMR2RDUVVGakxFTkJRVU1zVFVGQlRTeEZRVUZGTEZGQlFWRXNSVUZCUlN4WFFVRlhMRVZCUVVVN1FVRkRka1FzUlVGQlJTeEpRVUZKTEUxQlFVMHNSMEZCUnl4UlFVRlJMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03UVVGRGFFTXNSVUZCUlN4UFFVRlBia1lzVTBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRTFCUVUwc1IwRkJSMnRHTEZkQlFWTXNRMEZCUXl4TlFVRk5MRVZCUVVVc1YwRkJWeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTTdRVUZETTBVc1EwRkJRenRCUVVORU8wRkJRMEVzU1VGQlFTeGxRVUZqTEVkQlFVZERMR2RDUVVGak96czdPenM3T3pzN096czdRVU5XTDBJc1UwRkJVME1zWVVGQlZ5eERRVUZETEV0QlFVc3NSVUZCUlN4VFFVRlRMRVZCUVVVN1FVRkRka01zUlVGQlJTeEpRVUZKTEV0QlFVc3NSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRhRUlzVFVGQlRTeE5RVUZOTEVkQlFVY3NTMEZCU3l4SlFVRkpMRWxCUVVrc1IwRkJSeXhEUVVGRExFZEJRVWNzUzBGQlN5eERRVUZETEUxQlFVMDdRVUZETDBNc1RVRkJUU3hSUVVGUkxFZEJRVWNzUTBGQlF6dEJRVU5zUWl4TlFVRk5MRTFCUVUwc1IwRkJSeXhGUVVGRkxFTkJRVU03UVVGRGJFSTdRVUZEUVN4RlFVRkZMRTlCUVU4c1JVRkJSU3hMUVVGTExFZEJRVWNzVFVGQlRTeEZRVUZGTzBGQlF6TkNMRWxCUVVrc1NVRkJTU3hMUVVGTExFZEJRVWNzUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMEZCUXpkQ0xFbEJRVWtzU1VGQlNTeFRRVUZUTEVOQlFVTXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFTkJRVU1zUlVGQlJUdEJRVU40UXl4TlFVRk5MRTFCUVUwc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF5eEhRVUZITEV0QlFVc3NRMEZCUXp0QlFVTnFReXhMUVVGTE8wRkJRMHdzUjBGQlJ6dEJRVU5JTEVWQlFVVXNUMEZCVHl4TlFVRk5MRU5CUVVNN1FVRkRhRUlzUTBGQlF6dEJRVU5FTzBGQlEwRXNTVUZCUVN4WlFVRmpMRWRCUVVkQkxHRkJRVmM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEwNDFRaXhUUVVGVFF5eFhRVUZUTEVkQlFVYzdRVUZEY2tJc1JVRkJSU3hQUVVGUExFVkJRVVVzUTBGQlF6dEJRVU5hTEVOQlFVTTdRVUZEUkR0QlFVTkJMRWxCUVVFc1YwRkJZeXhIUVVGSFFTeFhRVUZUT3p0QlEzUkNNVUlzU1VGQlNTeFhRVUZYTEVkQlFVZHdTeXhaUVVGNVFqdEJRVU16UXl4SlFVRkpiMHNzVjBGQlV5eEhRVUZITlVvc1YwRkJjMElzUTBGQlF6dEJRVU4yUXp0QlFVTkJPMEZCUTBFc1NVRkJTV0VzWVVGQlZ5eEhRVUZITEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNN1FVRkRia003UVVGRFFUdEJRVU5CTEVsQlFVa3NiMEpCUVc5Q0xFZEJRVWRCTEdGQlFWY3NRMEZCUXl4dlFrRkJiMElzUTBGQlF6dEJRVU0xUkR0QlFVTkJPMEZCUTBFc1NVRkJTV2RLTEd0Q1FVRm5RaXhIUVVGSExFMUJRVTBzUTBGQlF5eHhRa0ZCY1VJc1EwRkJRenRCUVVOd1JEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzU1VGQlNVTXNXVUZCVlN4SFFVRkhMRU5CUVVORUxHdENRVUZuUWl4SFFVRkhSQ3hYUVVGVExFZEJRVWNzVTBGQlV5eE5RVUZOTEVWQlFVVTdRVUZEYkVVc1JVRkJSU3hKUVVGSkxFMUJRVTBzU1VGQlNTeEpRVUZKTEVWQlFVVTdRVUZEZEVJc1NVRkJTU3hQUVVGUExFVkJRVVVzUTBGQlF6dEJRVU5rTEVkQlFVYzdRVUZEU0N4RlFVRkZMRTFCUVUwc1IwRkJSeXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdRVUZETVVJc1JVRkJSU3hQUVVGUExGZEJRVmNzUTBGQlEwTXNhMEpCUVdkQ0xFTkJRVU1zVFVGQlRTeERRVUZETEVWQlFVVXNVMEZCVXl4TlFVRk5MRVZCUVVVN1FVRkRhRVVzU1VGQlNTeFBRVUZQTEc5Q1FVRnZRaXhEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN1FVRkRja1FzUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEVEN4RFFVRkRMRU5CUVVNN1FVRkRSanRCUVVOQkxFbEJRVUVzVjBGQll5eEhRVUZIUXl4WlFVRlZPenRCUXpkQ00wSXNTVUZCU1Vvc1owSkJRV01zUjBGQlIyeExMR1ZCUVRSQ08wRkJRMnBFTEVsQlFVbHpTeXhaUVVGVkxFZEJRVWM1U2l4WFFVRjNRanRCUVVONlF5eEpRVUZKT0Vrc1RVRkJTU3hIUVVGSE4wa3NUVUZCYVVJc1EwRkJRenRCUVVNM1FqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVTBGQlV6aEtMRmxCUVZVc1EwRkJReXhOUVVGTkxFVkJRVVU3UVVGRE5VSXNSVUZCUlN4UFFVRlBUQ3huUWtGQll5eERRVUZETEUxQlFVMHNSVUZCUlZvc1RVRkJTU3hGUVVGRlowSXNXVUZCVlN4RFFVRkRMRU5CUVVNN1FVRkRiRVFzUTBGQlF6dEJRVU5FTzBGQlEwRXNTVUZCUVN4WFFVRmpMRWRCUVVkRExGbEJRVlU3TzBGRFpqTkNMRWxCUVVsQkxGbEJRVlVzUjBGQlIzWkxMRmRCUVhkQ0xFTkJRVU03UVVGRE1VTTdRVUZEUVR0QlFVTkJMRWxCUVVsNVNpeHpRa0ZCYjBJc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRE4wSTdRVUZEUVR0QlFVTkJMRWxCUVVsd1NTeGhRVUZYTEVkQlFVY3NUVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJRenRCUVVOdVF6dEJRVU5CTzBGQlEwRXNTVUZCU1VNc1owSkJRV01zUjBGQlIwUXNZVUZCVnl4RFFVRkRMR05CUVdNc1EwRkJRenRCUVVOb1JEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVMjFLTEdOQlFWa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1MwRkJTeXhGUVVGRkxFOUJRVThzUlVGQlJTeFZRVUZWTEVWQlFVVXNVMEZCVXl4RlFVRkZMRXRCUVVzc1JVRkJSVHRCUVVNMVJTeEZRVUZGTEVsQlFVa3NVMEZCVXl4SFFVRkhMRTlCUVU4c1IwRkJSMllzYzBKQlFXOUNPMEZCUTJoRUxFMUJRVTBzVVVGQlVTeEhRVUZIWXl4WlFVRlZMRU5CUVVNc1RVRkJUU3hEUVVGRE8wRkJRMjVETEUxQlFVMHNVMEZCVXl4SFFVRkhMRkZCUVZFc1EwRkJReXhOUVVGTk8wRkJRMnBETEUxQlFVMHNVVUZCVVN4SFFVRkhRU3haUVVGVkxFTkJRVU1zUzBGQlN5eERRVUZETzBGQlEyeERMRTFCUVUwc1UwRkJVeXhIUVVGSExGRkJRVkVzUTBGQlF5eE5RVUZOTEVOQlFVTTdRVUZEYkVNN1FVRkRRU3hGUVVGRkxFbEJRVWtzVTBGQlV5eEpRVUZKTEZOQlFWTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1JVRkJSVHRCUVVNMVF5eEpRVUZKTEU5QlFVOHNTMEZCU3l4RFFVRkRPMEZCUTJwQ0xFZEJRVWM3UVVGRFNDeEZRVUZGTEVsQlFVa3NTMEZCU3l4SFFVRkhMRk5CUVZNc1EwRkJRenRCUVVONFFpeEZRVUZGTEU5QlFVOHNTMEZCU3l4RlFVRkZMRVZCUVVVN1FVRkRiRUlzU1VGQlNTeEpRVUZKTEVkQlFVY3NSMEZCUnl4UlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03UVVGRE9VSXNTVUZCU1N4SlFVRkpMRVZCUVVVc1UwRkJVeXhIUVVGSExFZEJRVWNzU1VGQlNTeExRVUZMTEVkQlFVZHFTaXhuUWtGQll5eERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVU1zUlVGQlJUdEJRVU4yUlN4TlFVRk5MRTlCUVU4c1MwRkJTeXhEUVVGRE8wRkJRMjVDTEV0QlFVczdRVUZEVEN4SFFVRkhPMEZCUTBnN1FVRkRRU3hGUVVGRkxFbEJRVWtzVlVGQlZTeEhRVUZITEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03UVVGRGNrTXNSVUZCUlN4SlFVRkpMRlZCUVZVc1IwRkJSeXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMEZCUTNCRExFVkJRVVVzU1VGQlNTeFZRVUZWTEVsQlFVa3NWVUZCVlN4RlFVRkZPMEZCUTJoRExFbEJRVWtzVDBGQlR5eFZRVUZWTEVsQlFVa3NTMEZCU3l4SlFVRkpMRlZCUVZVc1NVRkJTU3hOUVVGTkxFTkJRVU03UVVGRGRrUXNSMEZCUnp0QlFVTklMRVZCUVVVc1NVRkJTU3hOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETzBGQlEzQkNMRVZCUVVVc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eE5RVUZOTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRNMElzUlVGQlJTeExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF6dEJRVU16UWp0QlFVTkJMRVZCUVVVc1NVRkJTU3hSUVVGUkxFZEJRVWNzVTBGQlV5eERRVUZETzBGQlF6TkNMRVZCUVVVc1QwRkJUeXhGUVVGRkxFdEJRVXNzUjBGQlJ5eFRRVUZUTEVWQlFVVTdRVUZET1VJc1NVRkJTU3hIUVVGSExFZEJRVWNzVVVGQlVTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMEZCUXpGQ0xFbEJRVWtzU1VGQlNTeFJRVUZSTEVkQlFVY3NUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJRenRCUVVNNVFpeFJRVUZSTEZGQlFWRXNSMEZCUnl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRE9VSTdRVUZEUVN4SlFVRkpMRWxCUVVrc1ZVRkJWU3hGUVVGRk8wRkJRM0JDTEUxQlFVMHNTVUZCU1N4UlFVRlJMRWRCUVVjc1UwRkJVenRCUVVNNVFpeFZRVUZWTEZWQlFWVXNRMEZCUXl4UlFVRlJMRVZCUVVVc1VVRkJVU3hGUVVGRkxFZEJRVWNzUlVGQlJTeExRVUZMTEVWQlFVVXNUVUZCVFN4RlFVRkZMRXRCUVVzc1EwRkJRenRCUVVOdVJTeFZRVUZWTEZWQlFWVXNRMEZCUXl4UlFVRlJMRVZCUVVVc1VVRkJVU3hGUVVGRkxFZEJRVWNzUlVGQlJTeE5RVUZOTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRE8wRkJRM0JGTEV0QlFVczdRVUZEVER0QlFVTkJMRWxCUVVrc1NVRkJTU3hGUVVGRkxGRkJRVkVzUzBGQlN5eFRRVUZUTzBGQlEyaERMR0ZCUVdFc1VVRkJVU3hMUVVGTExGRkJRVkVzU1VGQlNTeFRRVUZUTEVOQlFVTXNVVUZCVVN4RlFVRkZMRkZCUVZFc1JVRkJSU3hQUVVGUExFVkJRVVVzVlVGQlZTeEZRVUZGTEV0QlFVc3NRMEZCUXp0QlFVTXZSaXhaUVVGWkxGRkJRVkU3UVVGRGNFSXNVMEZCVXl4RlFVRkZPMEZCUTFnc1RVRkJUU3hOUVVGTkxFZEJRVWNzUzBGQlN5eERRVUZETzBGQlEzSkNMRTFCUVUwc1RVRkJUVHRCUVVOYUxFdEJRVXM3UVVGRFRDeEpRVUZKTEZGQlFWRXNTMEZCU3l4UlFVRlJMRWRCUVVjc1IwRkJSeXhKUVVGSkxHRkJRV0VzUTBGQlF5eERRVUZETzBGQlEyeEVMRWRCUVVjN1FVRkRTQ3hGUVVGRkxFbEJRVWtzVFVGQlRTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZPMEZCUXpOQ0xFbEJRVWtzU1VGQlNTeFBRVUZQTEVkQlFVY3NUVUZCVFN4RFFVRkRMRmRCUVZjN1FVRkRjRU1zVVVGQlVTeFBRVUZQTEVkQlFVY3NTMEZCU3l4RFFVRkRMRmRCUVZjc1EwRkJRenRCUVVOd1F6dEJRVU5CTzBGQlEwRXNTVUZCU1N4SlFVRkpMRTlCUVU4c1NVRkJTU3hQUVVGUE8wRkJRekZDTEZOQlFWTXNZVUZCWVN4SlFVRkpMRTFCUVUwc1NVRkJTU3hoUVVGaExFbEJRVWtzUzBGQlN5eERRVUZETzBGQlF6TkVMRkZCUVZFc1JVRkJSU3hQUVVGUExFOUJRVThzU1VGQlNTeFZRVUZWTEVsQlFVa3NUMEZCVHl4WlFVRlpMRTlCUVU4N1FVRkRjRVVzVlVGQlZTeFBRVUZQTEU5QlFVOHNTVUZCU1N4VlFVRlZMRWxCUVVrc1QwRkJUeXhaUVVGWkxFOUJRVThzUTBGQlF5eEZRVUZGTzBGQlEzWkZMRTFCUVUwc1RVRkJUU3hIUVVGSExFdEJRVXNzUTBGQlF6dEJRVU55UWl4TFFVRkxPMEZCUTB3c1IwRkJSenRCUVVOSUxFVkJRVVVzUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8wRkJRekZDTEVWQlFVVXNTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBGQlEzcENMRVZCUVVVc1QwRkJUeXhOUVVGTkxFTkJRVU03UVVGRGFFSXNRMEZCUXp0QlFVTkVPMEZCUTBFc1NVRkJRU3hoUVVGakxFZEJRVWRyU2l4alFVRlpPenRCUTNwR04wSXNTVUZCU1dwSkxGZEJRVk1zUjBGQlIzWkRMRlZCUVhWQ08wRkJRM1pETEVsQlFVbHRRaXhOUVVGSkxFZEJRVWRZTEV0QlFXdENMRU5CUVVNN1FVRkRPVUk3UVVGRFFUdEJRVU5CTEVsQlFVbHBTeXhWUVVGUkxFZEJRVWRzU1N4WFFVRlRMRU5CUVVOd1FpeE5RVUZKTEVWQlFVVXNWVUZCVlN4RFFVRkRMRU5CUVVNN1FVRkRNME03UVVGRFFTeEpRVUZCTEZOQlFXTXNSMEZCUjNOS0xGVkJRVkU3TzBGRFRucENMRWxCUVVsc1NTeFhRVUZUTEVkQlFVZDJReXhWUVVGMVFqdEJRVU4yUXl4SlFVRkpiVUlzVFVGQlNTeEhRVUZIV0N4TFFVRnJRaXhEUVVGRE8wRkJRemxDTzBGQlEwRTdRVUZEUVN4SlFVRkphMHNzVTBGQlR5eEhRVUZIYmtrc1YwRkJVeXhEUVVGRGNFSXNUVUZCU1N4RlFVRkZMRk5CUVZNc1EwRkJReXhEUVVGRE8wRkJRM3BETzBGQlEwRXNTVUZCUVN4UlFVRmpMRWRCUVVkMVNpeFRRVUZQT3pzN096czdPenREUTA1NFFpeEpRVUZKTEZOQlFWTXNSMEZCUnpGTExGVkJRWFZDTzB0QlEyNURMRWxCUVVrc1IwRkJSMUVzUzBGQmEwSXNRMEZCUXp0QlFVTTVRanRCUVVOQk8wTkJRMEVzU1VGQlNTeEhRVUZITEVkQlFVY3NVMEZCVXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU5xUXp0QlFVTkJMRU5CUVVFc1NVRkJZeXhIUVVGSExFZEJRVWNzUTBGQlFUczdPenRCUTA1d1FpeEpRVUZKTEZOQlFWTXNSMEZCUjFJc1ZVRkJkVUk3UVVGRGRrTXNTVUZCU1cxQ0xFMUJRVWtzUjBGQlIxZ3NTMEZCYTBJc1EwRkJRenRCUVVNNVFqdEJRVU5CTzBGQlEwRXNTVUZCU1cxTExGTkJRVThzUjBGQlJ5eFRRVUZUTEVOQlFVTjRTaXhOUVVGSkxFVkJRVVVzVTBGQlV5eERRVUZETEVOQlFVTTdRVUZEZWtNN1FVRkRRU3hKUVVGQkxGRkJRV01zUjBGQlIzZEtMRk5CUVU4N08wRkRUbmhDTEVsQlFVa3NVVUZCVVN4SFFVRkhNMHNzVTBGQmMwSTdRVUZEY2tNc1NVRkJTWGRETEV0QlFVY3NSMEZCUjJoRExFbEJRV2xDTzBGQlF6TkNMRWxCUVVsclN5eFRRVUZQTEVkQlFVZHFTeXhSUVVGeFFqdEJRVU51UXl4SlFVRkpMRWRCUVVjc1IwRkJSME1zVjBGQmFVSXNSVUZCUVR0QlFVTXpRaXhKUVVGSmFVc3NVMEZCVHl4SFFVRkhhRXNzVVVGQmNVSTdRVUZEYmtNc1NVRkJTV2RDTEZsQlFWVXNSMEZCUnl0Q0xGZEJRWGRDTzBGQlEzcERMRWxCUVVrc1VVRkJVU3hIUVVGSGFVVXNVMEZCYzBJc1EwRkJRenRCUVVOMFF6dEJRVU5CTzBGQlEwRXNTVUZCU1dwRExGRkJRVTBzUjBGQlJ5eGpRVUZqTzBGQlF6TkNMRWxCUVVsT0xGZEJRVk1zUjBGQlJ5eHBRa0ZCYVVJN1FVRkRha01zU1VGQlNTeFZRVUZWTEVkQlFVY3NhMEpCUVd0Q08wRkJRMjVETEVsQlFVbFRMRkZCUVUwc1IwRkJSeXhqUVVGak8wRkJRek5DTEVsQlFVbEZMRmxCUVZVc1IwRkJSeXhyUWtGQmEwSXNRMEZCUXp0QlFVTndRenRCUVVOQkxFbEJRVWxGTEdGQlFWY3NSMEZCUnl4dFFrRkJiVUlzUTBGQlF6dEJRVU4wUXp0QlFVTkJPMEZCUTBFc1NVRkJTU3hyUWtGQmEwSXNSMEZCUnl4UlFVRlJMRU5CUVVNc1VVRkJVU3hEUVVGRE8wRkJRek5ETEVsQlFVa3NZVUZCWVN4SFFVRkhMRkZCUVZFc1EwRkJRM3BFTEV0QlFVY3NRMEZCUXp0QlFVTnFReXhKUVVGSkxHbENRVUZwUWl4SFFVRkhMRkZCUVZFc1EwRkJRMnRKTEZOQlFVOHNRMEZCUXp0QlFVTjZReXhKUVVGSkxHRkJRV0VzUjBGQlJ5eFJRVUZSTEVOQlFVTXNSMEZCUnl4RFFVRkRPMEZCUTJwRExFbEJRVWtzYVVKQlFXbENMRWRCUVVjc1VVRkJVU3hEUVVGRFF5eFRRVUZQTEVOQlFVTXNRMEZCUXp0QlFVTXhRenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1NVRkJTVU1zVVVGQlRTeEhRVUZIYWtvc1dVRkJWU3hEUVVGRE8wRkJRM2hDTzBGQlEwRTdRVUZEUVN4SlFVRkpMRU5CUVVNc1VVRkJVU3hKUVVGSmFVb3NVVUZCVFN4RFFVRkRMRWxCUVVrc1VVRkJVU3hEUVVGRExFbEJRVWtzVjBGQlZ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTVE5GTEdGQlFWYzdRVUZEZUVVc1MwRkJTM3BFTEV0QlFVY3NTVUZCU1c5SkxGRkJRVTBzUTBGQlF5eEpRVUZKY0Vrc1MwRkJSeXhEUVVGRExFbEJRVWxyUkN4UlFVRk5MRU5CUVVNN1FVRkRkRU1zUzBGQlMyZEdMRk5CUVU4c1NVRkJTVVVzVVVGQlRTeERRVUZEUml4VFFVRlBMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU1zU1VGQlNTeFZRVUZWTEVOQlFVTTdRVUZEZUVRc1MwRkJTeXhIUVVGSExFbEJRVWxGTEZGQlFVMHNRMEZCUXl4SlFVRkpMRWRCUVVjc1EwRkJReXhKUVVGSkwwVXNVVUZCVFN4RFFVRkRPMEZCUTNSRExFdEJRVXM0UlN4VFFVRlBMRWxCUVVsRExGRkJRVTBzUTBGQlF5eEpRVUZKUkN4VFFVRlBMRU5CUVVNc1NVRkJTVFZGTEZsQlFWVXNRMEZCUXl4RlFVRkZPMEZCUTNCRUxFVkJRVVUyUlN4UlFVRk5MRWRCUVVjc1UwRkJVeXhMUVVGTExFVkJRVVU3UVVGRE0wSXNTVUZCU1N4SlFVRkpMRTFCUVUwc1IwRkJSMnBLTEZsQlFWVXNRMEZCUXl4TFFVRkxMRU5CUVVNN1FVRkRiRU1zVVVGQlVTeEpRVUZKTEVkQlFVY3NUVUZCVFN4SlFVRkplVVFzVjBGQlV5eEhRVUZITEV0QlFVc3NRMEZCUXl4WFFVRlhMRWRCUVVjc1UwRkJVenRCUVVOc1JTeFJRVUZSTEZWQlFWVXNSMEZCUnl4SlFVRkpMRWRCUVVjc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTm9SRHRCUVVOQkxFbEJRVWtzU1VGQlNTeFZRVUZWTEVWQlFVVTdRVUZEY0VJc1RVRkJUU3hSUVVGUkxGVkJRVlU3UVVGRGVFSXNVVUZCVVN4TFFVRkxMR3RDUVVGclFpeEZRVUZGTEU5QlFVOWhMR0ZCUVZjc1EwRkJRenRCUVVOd1JDeFJRVUZSTEV0QlFVc3NZVUZCWVN4RlFVRkZMRTlCUVU5UUxGRkJRVTBzUTBGQlF6dEJRVU14UXl4UlFVRlJMRXRCUVVzc2FVSkJRV2xDTEVWQlFVVXNUMEZCVHl4VlFVRlZMRU5CUVVNN1FVRkRiRVFzVVVGQlVTeExRVUZMTEdGQlFXRXNSVUZCUlN4UFFVRlBSeXhSUVVGTkxFTkJRVU03UVVGRE1VTXNVVUZCVVN4TFFVRkxMR2xDUVVGcFFpeEZRVUZGTEU5QlFVOUZMRmxCUVZVc1EwRkJRenRCUVVOc1JDeFBRVUZQTzBGQlExQXNTMEZCU3p0QlFVTk1MRWxCUVVrc1QwRkJUeXhOUVVGTkxFTkJRVU03UVVGRGJFSXNSMEZCUnl4RFFVRkRPMEZCUTBvc1EwRkJRenRCUVVORU8wRkJRMEVzU1VGQlFTeFBRVUZqTEVkQlFVYzJSU3hSUVVGTk96dEJRM3BFZGtJc1NVRkJTV3BJTEU5QlFVc3NSMEZCUnpORUxFMUJRVzFDTzBGQlF5OUNMRWxCUVVrc1YwRkJWeXhIUVVGSFVTeFpRVUY1UWp0QlFVTXpReXhKUVVGSkxGVkJRVlVzUjBGQlIwTXNWMEZCZDBJN1FVRkRla01zU1VGQlNTeFpRVUZaTEVkQlFVZERMR0ZCUVRCQ08wRkJRemRETEVsQlFVbHJTeXhSUVVGTkxFZEJRVWRxU3l4UFFVRnZRanRCUVVOcVF5eEpRVUZKYjBVc1UwRkJUeXhIUVVGSGNrSXNVMEZCYjBJN1FVRkRiRU1zU1VGQlNUQkVMRlZCUVZFc1IwRkJSMDhzYTBKQlFYRkNPMEZCUTNCRExFbEJRVWtzV1VGQldTeEhRVUZIUXl4alFVRjVRaXhEUVVGRE8wRkJRemRETzBGQlEwRTdRVUZEUVN4SlFVRkpOa0lzYzBKQlFXOUNMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRemRDTzBGQlEwRTdRVUZEUVN4SlFVRkpPVVVzVTBGQlR5eEhRVUZITEc5Q1FVRnZRanRCUVVOc1F5eEpRVUZKVnl4VlFVRlJMRWRCUVVjc1owSkJRV2RDTzBGQlF5OUNMRWxCUVVsR0xGZEJRVk1zUjBGQlJ5eHBRa0ZCYVVJc1EwRkJRenRCUVVOc1F6dEJRVU5CTzBGQlEwRXNTVUZCU1M5RUxHRkJRVmNzUjBGQlJ5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRPMEZCUTI1RE8wRkJRMEU3UVVGRFFTeEpRVUZKUXl4blFrRkJZeXhIUVVGSFJDeGhRVUZYTEVOQlFVTXNZMEZCWXl4RFFVRkRPMEZCUTJoRU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRk5CUVZOM1NpeHBRa0ZCWlN4RFFVRkRMRTFCUVUwc1JVRkJSU3hMUVVGTExFVkJRVVVzVDBGQlR5eEZRVUZGTEZWQlFWVXNSVUZCUlN4VFFVRlRMRVZCUVVVc1MwRkJTeXhGUVVGRk8wRkJReTlGTEVWQlFVVXNTVUZCU1N4UlFVRlJMRWRCUVVjNVJpeFRRVUZQTEVOQlFVTXNUVUZCVFN4RFFVRkRPMEZCUTJoRExFMUJRVTBzVVVGQlVTeEhRVUZIUVN4VFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRE8wRkJReTlDTEUxQlFVMHNUVUZCVFN4SFFVRkhMRkZCUVZFc1IwRkJSMDhzVlVGQlVTeEhRVUZIYzBZc1VVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF6dEJRVU51UkN4TlFVRk5MRTFCUVUwc1IwRkJSeXhSUVVGUkxFZEJRVWQwUml4VlFVRlJMRWRCUVVkelJpeFJRVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRia1E3UVVGRFFTeEZRVUZGTEUxQlFVMHNSMEZCUnl4TlFVRk5MRWxCUVVscVJ5eFRRVUZQTEVkQlFVZFRMRmRCUVZNc1IwRkJSeXhOUVVGTkxFTkJRVU03UVVGRGJFUXNSVUZCUlN4TlFVRk5MRWRCUVVjc1RVRkJUU3hKUVVGSlZDeFRRVUZQTEVkQlFVZFRMRmRCUVZNc1IwRkJSeXhOUVVGTkxFTkJRVU03UVVGRGJFUTdRVUZEUVN4RlFVRkZMRWxCUVVrc1VVRkJVU3hIUVVGSExFMUJRVTBzU1VGQlNVRXNWMEZCVXp0QlFVTndReXhOUVVGTkxGRkJRVkVzUjBGQlJ5eE5RVUZOTEVsQlFVbEJMRmRCUVZNN1FVRkRjRU1zVFVGQlRTeFRRVUZUTEVkQlFVY3NUVUZCVFN4SlFVRkpMRTFCUVUwc1EwRkJRenRCUVVOdVF6dEJRVU5CTEVWQlFVVXNTVUZCU1N4VFFVRlRMRWxCUVVsblF5eFZRVUZSTEVOQlFVTXNUVUZCVFN4RFFVRkRMRVZCUVVVN1FVRkRja01zU1VGQlNTeEpRVUZKTEVOQlFVTkJMRlZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJUdEJRVU14UWl4TlFVRk5MRTlCUVU4c1MwRkJTeXhEUVVGRE8wRkJRMjVDTEV0QlFVczdRVUZEVEN4SlFVRkpMRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU03UVVGRGNFSXNTVUZCU1N4UlFVRlJMRWRCUVVjc1MwRkJTeXhEUVVGRE8wRkJRM0pDTEVkQlFVYzdRVUZEU0N4RlFVRkZMRWxCUVVrc1UwRkJVeXhKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTzBGQlF6bENMRWxCUVVrc1MwRkJTeXhMUVVGTExFdEJRVXNzUjBGQlJ5eEpRVUZKZWtRc1QwRkJTeXhEUVVGRExFTkJRVU03UVVGRGFrTXNTVUZCU1N4UFFVRlBMRU5CUVVNc1VVRkJVU3hKUVVGSkxGbEJRVmtzUTBGQlF5eE5RVUZOTEVOQlFVTTdRVUZETlVNc1VVRkJVU3hYUVVGWExFTkJRVU1zVFVGQlRTeEZRVUZGTEV0QlFVc3NSVUZCUlN4UFFVRlBMRVZCUVVVc1ZVRkJWU3hGUVVGRkxGTkJRVk1zUlVGQlJTeExRVUZMTEVOQlFVTTdRVUZEZWtVc1VVRkJVU3hWUVVGVkxFTkJRVU1zVFVGQlRTeEZRVUZGTEV0QlFVc3NSVUZCUlN4TlFVRk5MRVZCUVVVc1QwRkJUeXhGUVVGRkxGVkJRVlVzUlVGQlJTeFRRVUZUTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRha1lzUjBGQlJ6dEJRVU5JTEVWQlFVVXNTVUZCU1N4RlFVRkZMRTlCUVU4c1IwRkJSemhHTEhOQ1FVRnZRaXhEUVVGRExFVkJRVVU3UVVGRGVrTXNTVUZCU1N4SlFVRkpMRmxCUVZrc1IwRkJSeXhSUVVGUkxFbEJRVWx1U1N4blFrRkJZeXhEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNZVUZCWVN4RFFVRkRPMEZCUXpkRkxGRkJRVkVzV1VGQldTeEhRVUZITEZGQlFWRXNTVUZCU1VFc1owSkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZMR0ZCUVdFc1EwRkJReXhEUVVGRE8wRkJRemRGTzBGQlEwRXNTVUZCU1N4SlFVRkpMRmxCUVZrc1NVRkJTU3haUVVGWkxFVkJRVVU3UVVGRGRFTXNUVUZCVFN4SlFVRkpMRmxCUVZrc1IwRkJSeXhaUVVGWkxFZEJRVWNzVFVGQlRTeERRVUZETEV0QlFVc3NSVUZCUlN4SFFVRkhMRTFCUVUwN1FVRkRMMFFzVlVGQlZTeFpRVUZaTEVkQlFVY3NXVUZCV1N4SFFVRkhMRXRCUVVzc1EwRkJReXhMUVVGTExFVkJRVVVzUjBGQlJ5eExRVUZMTEVOQlFVTTdRVUZET1VRN1FVRkRRU3hOUVVGTkxFdEJRVXNzUzBGQlN5eExRVUZMTEVkQlFVY3NTVUZCU1hGRExFOUJRVXNzUTBGQlF5eERRVUZETzBGQlEyNURMRTFCUVUwc1QwRkJUeXhUUVVGVExFTkJRVU1zV1VGQldTeEZRVUZGTEZsQlFWa3NSVUZCUlN4UFFVRlBMRVZCUVVVc1ZVRkJWU3hGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzBGQlF5OUZMRXRCUVVzN1FVRkRUQ3hIUVVGSE8wRkJRMGdzUlVGQlJTeEpRVUZKTEVOQlFVTXNVMEZCVXl4RlFVRkZPMEZCUTJ4Q0xFbEJRVWtzVDBGQlR5eExRVUZMTEVOQlFVTTdRVUZEYWtJc1IwRkJSenRCUVVOSUxFVkJRVVVzUzBGQlN5eExRVUZMTEV0QlFVc3NSMEZCUnl4SlFVRkpRU3hQUVVGTExFTkJRVU1zUTBGQlF6dEJRVU12UWl4RlFVRkZMRTlCUVU4c1dVRkJXU3hEUVVGRExFMUJRVTBzUlVGQlJTeExRVUZMTEVWQlFVVXNUMEZCVHl4RlFVRkZMRlZCUVZVc1JVRkJSU3hUUVVGVExFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTTdRVUZETlVVc1EwRkJRenRCUVVORU8wRkJRMEVzU1VGQlFTeG5Ra0ZCWXl4SFFVRkhhMGdzYVVKQlFXVTdPMEZEYkVab1F5eEpRVUZKTEdWQlFXVXNSMEZCUnpkTExHZENRVUUyUWp0QlFVTnVSQ3hKUVVGSk1FVXNZMEZCV1N4SFFVRkhiRVVzWTBGQmVVSXNRMEZCUXp0QlFVTTNRenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRjMHNzWVVGQlZ5eERRVUZETEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1QwRkJUeXhGUVVGRkxGVkJRVlVzUlVGQlJTeExRVUZMTEVWQlFVVTdRVUZETDBRc1JVRkJSU3hKUVVGSkxFdEJRVXNzUzBGQlN5eExRVUZMTEVWQlFVVTdRVUZEZGtJc1NVRkJTU3hQUVVGUExFbEJRVWtzUTBGQlF6dEJRVU5vUWl4SFFVRkhPMEZCUTBnc1JVRkJSU3hKUVVGSkxFdEJRVXNzU1VGQlNTeEpRVUZKTEVsQlFVa3NTMEZCU3l4SlFVRkpMRWxCUVVrc1MwRkJTeXhEUVVGRGNFY3NZMEZCV1N4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU5CTEdOQlFWa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhGUVVGRk8wRkJRM2hHTEVsQlFVa3NUMEZCVHl4TFFVRkxMRXRCUVVzc1MwRkJTeXhKUVVGSkxFdEJRVXNzUzBGQlN5eExRVUZMTEVOQlFVTTdRVUZET1VNc1IwRkJSenRCUVVOSUxFVkJRVVVzVDBGQlR5eGxRVUZsTEVOQlFVTXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hQUVVGUExFVkJRVVVzVlVGQlZTeEZRVUZGYjBjc1lVRkJWeXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzBGQlEyaEdMRU5CUVVNN1FVRkRSRHRCUVVOQkxFbEJRVUVzV1VGQll5eEhRVUZIUVN4aFFVRlhPenRCUXpOQ05VSXNTVUZCU1c1SUxFOUJRVXNzUjBGQlJ6TkVMRTFCUVcxQ08wRkJReTlDTEVsQlFVazRTeXhoUVVGWExFZEJRVWQwU3l4WlFVRjVRaXhEUVVGRE8wRkJRelZETzBGQlEwRTdRVUZEUVN4SlFVRkphVW9zYzBKQlFXOUNMRWRCUVVjc1EwRkJRenRCUVVNMVFpeEpRVUZKUXl4M1FrRkJjMElzUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZETDBJN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk54UWl4aFFVRlhMRU5CUVVNc1RVRkJUU3hGUVVGRkxFMUJRVTBzUlVGQlJTeFRRVUZUTEVWQlFVVXNWVUZCVlN4RlFVRkZPMEZCUXpWRUxFVkJRVVVzU1VGQlNTeExRVUZMTEVkQlFVY3NVMEZCVXl4RFFVRkRMRTFCUVUwN1FVRkRPVUlzVFVGQlRTeE5RVUZOTEVkQlFVY3NTMEZCU3p0QlFVTndRaXhOUVVGTkxGbEJRVmtzUjBGQlJ5eERRVUZETEZWQlFWVXNRMEZCUXp0QlFVTnFRenRCUVVOQkxFVkJRVVVzU1VGQlNTeE5RVUZOTEVsQlFVa3NTVUZCU1N4RlFVRkZPMEZCUTNSQ0xFbEJRVWtzVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXp0QlFVTnVRaXhIUVVGSE8wRkJRMGdzUlVGQlJTeE5RVUZOTEVkQlFVY3NUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8wRkJRekZDTEVWQlFVVXNUMEZCVHl4TFFVRkxMRVZCUVVVc1JVRkJSVHRCUVVOc1FpeEpRVUZKTEVsQlFVa3NTVUZCU1N4SFFVRkhMRk5CUVZNc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU5vUXl4SlFVRkpMRWxCUVVrc1EwRkJReXhaUVVGWkxFbEJRVWtzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTm9ReXhaUVVGWkxFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNTMEZCU3l4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBGQlEzWkRMRmxCUVZrc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NUVUZCVFN4RFFVRkRPMEZCUTJoRExGVkJRVlU3UVVGRFZpeE5RVUZOTEU5QlFVOHNTMEZCU3l4RFFVRkRPMEZCUTI1Q0xFdEJRVXM3UVVGRFRDeEhRVUZITzBGQlEwZ3NSVUZCUlN4UFFVRlBMRVZCUVVVc1MwRkJTeXhIUVVGSExFMUJRVTBzUlVGQlJUdEJRVU16UWl4SlFVRkpMRWxCUVVrc1IwRkJSeXhUUVVGVExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdRVUZETlVJc1NVRkJTU3hKUVVGSkxFZEJRVWNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTNKQ0xGRkJRVkVzVVVGQlVTeEhRVUZITEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNN1FVRkRPVUlzVVVGQlVTeFJRVUZSTEVkQlFVY3NTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRek5DTzBGQlEwRXNTVUZCU1N4SlFVRkpMRmxCUVZrc1NVRkJTU3hKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVTdRVUZEYWtNc1RVRkJUU3hKUVVGSkxGRkJRVkVzUzBGQlN5eFRRVUZUTEVsQlFVa3NSVUZCUlN4SFFVRkhMRWxCUVVrc1RVRkJUU3hEUVVGRExFVkJRVVU3UVVGRGRFUXNVVUZCVVN4UFFVRlBMRXRCUVVzc1EwRkJRenRCUVVOeVFpeFBRVUZQTzBGQlExQXNTMEZCU3l4TlFVRk5PMEZCUTFnc1RVRkJUU3hKUVVGSkxFdEJRVXNzUjBGQlJ5eEpRVUZKY0Vnc1QwRkJTeXhEUVVGRE8wRkJRelZDTEUxQlFVMHNTVUZCU1N4VlFVRlZMRVZCUVVVN1FVRkRkRUlzVVVGQlVTeEpRVUZKTEUxQlFVMHNSMEZCUnl4VlFVRlZMRU5CUVVNc1VVRkJVU3hGUVVGRkxGRkJRVkVzUlVGQlJTeEhRVUZITEVWQlFVVXNUVUZCVFN4RlFVRkZMRTFCUVUwc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU5vUml4UFFVRlBPMEZCUTFBc1RVRkJUU3hKUVVGSkxFVkJRVVVzVFVGQlRTeExRVUZMTEZOQlFWTTdRVUZEYUVNc1kwRkJZMjFJTEdGQlFWY3NRMEZCUXl4UlFVRlJMRVZCUVVVc1VVRkJVU3hGUVVGRmNrSXNjMEpCUVc5Q0xFZEJRVWRETEhkQ1FVRnpRaXhGUVVGRkxGVkJRVlVzUlVGQlJTeExRVUZMTEVOQlFVTTdRVUZETDBjc1kwRkJZeXhOUVVGTk8wRkJRM0JDTEZkQlFWY3NSVUZCUlR0QlFVTmlMRkZCUVZFc1QwRkJUeXhMUVVGTExFTkJRVU03UVVGRGNrSXNUMEZCVHp0QlFVTlFMRXRCUVVzN1FVRkRUQ3hIUVVGSE8wRkJRMGdzUlVGQlJTeFBRVUZQTEVsQlFVa3NRMEZCUXp0QlFVTmtMRU5CUVVNN1FVRkRSRHRCUVVOQkxFbEJRVUVzV1VGQll5eEhRVUZIY1VJc1lVRkJWenM3UVVNM1JEVkNMRWxCUVVsdVNpeFZRVUZSTEVkQlFVYzFRaXhWUVVGeFFpeERRVUZETzBGQlEzSkRPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRk5CUVZOblRDeHZRa0ZCYTBJc1EwRkJReXhMUVVGTExFVkJRVVU3UVVGRGJrTXNSVUZCUlN4UFFVRlBMRXRCUVVzc1MwRkJTeXhMUVVGTExFbEJRVWtzUTBGQlEzQktMRlZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU0zUXl4RFFVRkRPMEZCUTBRN1FVRkRRU3hKUVVGQkxHMUNRVUZqTEVkQlFVZHZTaXh2UWtGQmEwSTdPMEZEWkc1RExFbEJRVWxCTEc5Q1FVRnJRaXhIUVVGSGFFd3NiVUpCUVdkRE8wRkJRM3BFTEVsQlFVbHpTaXhOUVVGSkxFZEJRVWM1U1N4TlFVRnBRaXhEUVVGRE8wRkJRemRDTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFRRVUZUZVVzc1kwRkJXU3hEUVVGRExFMUJRVTBzUlVGQlJUdEJRVU01UWl4RlFVRkZMRWxCUVVrc1RVRkJUU3hIUVVGSE0wSXNUVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJRenRCUVVNelFpeE5RVUZOTEUxQlFVMHNSMEZCUnl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRE8wRkJRemRDTzBGQlEwRXNSVUZCUlN4UFFVRlBMRTFCUVUwc1JVRkJSU3hGUVVGRk8wRkJRMjVDTEVsQlFVa3NTVUZCU1N4SFFVRkhMRWRCUVVjc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF6dEJRVU0xUWl4UlFVRlJMRXRCUVVzc1IwRkJSeXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZETlVJN1FVRkRRU3hKUVVGSkxFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1JVRkJSU3hMUVVGTExFVkJRVVV3UWl4dlFrRkJhMElzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUXpkRUxFZEJRVWM3UVVGRFNDeEZRVUZGTEU5QlFVOHNUVUZCVFN4RFFVRkRPMEZCUTJoQ0xFTkJRVU03UVVGRFJEdEJRVU5CTEVsQlFVRXNZVUZCWXl4SFFVRkhReXhqUVVGWk96czdPenM3T3pzN096czdRVU5rTjBJc1UwRkJVME1zZVVKQlFYVkNMRU5CUVVNc1IwRkJSeXhGUVVGRkxGRkJRVkVzUlVGQlJUdEJRVU5vUkN4RlFVRkZMRTlCUVU4c1UwRkJVeXhOUVVGTkxFVkJRVVU3UVVGRE1VSXNTVUZCU1N4SlFVRkpMRTFCUVUwc1NVRkJTU3hKUVVGSkxFVkJRVVU3UVVGRGVFSXNUVUZCVFN4UFFVRlBMRXRCUVVzc1EwRkJRenRCUVVOdVFpeExRVUZMTzBGQlEwd3NTVUZCU1N4UFFVRlBMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUzBGQlN5eFJRVUZSTzBGQlEyNURMRTlCUVU4c1VVRkJVU3hMUVVGTExGTkJRVk1zUzBGQlN5eEhRVUZITEVsQlFVa3NUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU14UkN4SFFVRkhMRU5CUVVNN1FVRkRTaXhEUVVGRE8wRkJRMFE3UVVGRFFTeEpRVUZCTEhkQ1FVRmpMRWRCUVVkQkxIbENRVUYxUWpzN1FVTnVRbmhETEVsQlFVa3NWMEZCVnl4SFFVRkhiRXdzV1VGQmVVSTdRVUZETTBNc1NVRkJTU3haUVVGWkxFZEJRVWRSTEdGQlFUQkNPMEZCUXpkRExFbEJRVWt3U3l4NVFrRkJkVUlzUjBGQlIzcExMSGRDUVVGeFF5eERRVUZETzBGQlEzQkZPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRNRXNzWVVGQlZ5eERRVUZETEUxQlFVMHNSVUZCUlR0QlFVTTNRaXhGUVVGRkxFbEJRVWtzVTBGQlV5eEhRVUZITEZsQlFWa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRCUVVOMlF5eEZRVUZGTEVsQlFVa3NVMEZCVXl4RFFVRkRMRTFCUVUwc1NVRkJTU3hEUVVGRExFbEJRVWtzVTBGQlV5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRk8wRkJRMmhFTEVsQlFVa3NUMEZCVDBRc2VVSkJRWFZDTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBGQlEzSkZMRWRCUVVjN1FVRkRTQ3hGUVVGRkxFOUJRVThzVTBGQlV5eE5RVUZOTEVWQlFVVTdRVUZETVVJc1NVRkJTU3hQUVVGUExFMUJRVTBzUzBGQlN5eE5RVUZOTEVsQlFVa3NWMEZCVnl4RFFVRkRMRTFCUVUwc1JVRkJSU3hOUVVGTkxFVkJRVVVzVTBGQlV5eERRVUZETEVOQlFVTTdRVUZEZGtVc1IwRkJSeXhEUVVGRE8wRkJRMG9zUTBGQlF6dEJRVU5FTzBGQlEwRXNTVUZCUVN4WlFVRmpMRWRCUVVkRExHRkJRVmM3TzBGRGNrSTFRaXhKUVVGSmVFb3NXVUZCVlN4SFFVRkhNMElzVjBGQmQwSTdRVUZEZWtNc1NVRkJTVEJGTEdOQlFWa3NSMEZCUjJ4RkxHTkJRWGxDTEVOQlFVTTdRVUZETjBNN1FVRkRRVHRCUVVOQkxFbEJRVWx4U2l4WFFVRlRMRWRCUVVjc2FVSkJRV2xDTEVOQlFVTTdRVUZEYkVNN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVM1ZDTEZWQlFWRXNRMEZCUXl4TFFVRkxMRVZCUVVVN1FVRkRla0lzUlVGQlJTeFBRVUZQTEU5QlFVOHNTMEZCU3l4SlFVRkpMRkZCUVZFN1FVRkRha01zUzBGQlN6RkhMR05CUVZrc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTOURMRmxCUVZVc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNXdEpMRmRCUVZNc1EwRkJReXhEUVVGRE8wRkJRelZFTEVOQlFVTTdRVUZEUkR0QlFVTkJMRWxCUVVFc1ZVRkJZeXhIUVVGSGRVSXNWVUZCVVRzN1FVTTFRbnBDTEVsQlFVbHlSeXhUUVVGUExFZEJRVWN2UlN4VFFVRnZRanRCUVVOc1F5eEpRVUZKYjB3c1ZVRkJVU3hIUVVGSE5Vc3NWVUZCY1VJc1EwRkJRenRCUVVOeVF6dEJRVU5CTzBGQlEwRXNTVUZCU1N4WlFVRlpMRWRCUVVjc2EwUkJRV3RFTzBGQlEzSkZMRWxCUVVrc1lVRkJZU3hIUVVGSExFOUJRVThzUTBGQlF6dEJRVU0xUWp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlROa3NzVDBGQlN5eERRVUZETEV0QlFVc3NSVUZCUlN4TlFVRk5MRVZCUVVVN1FVRkRPVUlzUlVGQlJTeEpRVUZKZEVjc1UwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5eEZRVUZGTzBGQlEzUkNMRWxCUVVrc1QwRkJUeXhMUVVGTExFTkJRVU03UVVGRGFrSXNSMEZCUnp0QlFVTklMRVZCUVVVc1NVRkJTU3hKUVVGSkxFZEJRVWNzVDBGQlR5eExRVUZMTEVOQlFVTTdRVUZETVVJc1JVRkJSU3hKUVVGSkxFbEJRVWtzU1VGQlNTeFJRVUZSTEVsQlFVa3NTVUZCU1N4SlFVRkpMRkZCUVZFc1NVRkJTU3hKUVVGSkxFbEJRVWtzVTBGQlV6dEJRVU12UkN4TlFVRk5MRXRCUVVzc1NVRkJTU3hKUVVGSkxFbEJRVWx4Unl4VlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRExFVkJRVVU3UVVGRGVFTXNTVUZCU1N4UFFVRlBMRWxCUVVrc1EwRkJRenRCUVVOb1FpeEhRVUZITzBGQlEwZ3NSVUZCUlN4UFFVRlBMR0ZCUVdFc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF6dEJRVU12UkN4TFFVRkxMRTFCUVUwc1NVRkJTU3hKUVVGSkxFbEJRVWtzUzBGQlN5eEpRVUZKTEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRMmhFTEVOQlFVTTdRVUZEUkR0QlFVTkJMRWxCUVVFc1RVRkJZeXhIUVVGSFF5eFBRVUZMT3p0QlF6VkNkRUlzU1VGQlNTeFJRVUZSTEVkQlFVZHlUQ3hUUVVGelFpeERRVUZETzBGQlEzUkRPMEZCUTBFN1FVRkRRU3hKUVVGSmMwd3NhVUpCUVdVc1IwRkJSeXh4UWtGQmNVSXNRMEZCUXp0QlFVTTFRenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hUUVVGVFF5eFRRVUZQTEVOQlFVTXNTVUZCU1N4RlFVRkZMRkZCUVZFc1JVRkJSVHRCUVVOcVF5eEZRVUZGTEVsQlFVa3NUMEZCVHl4SlFVRkpMRWxCUVVrc1ZVRkJWU3hMUVVGTExGRkJRVkVzU1VGQlNTeEpRVUZKTEVsQlFVa3NUMEZCVHl4UlFVRlJMRWxCUVVrc1ZVRkJWU3hEUVVGRExFVkJRVVU3UVVGRGVFWXNTVUZCU1N4TlFVRk5MRWxCUVVrc1UwRkJVeXhEUVVGRFJDeHBRa0ZCWlN4RFFVRkRMRU5CUVVNN1FVRkRla01zUjBGQlJ6dEJRVU5JTEVWQlFVVXNTVUZCU1N4UlFVRlJMRWRCUVVjc1YwRkJWenRCUVVNMVFpeEpRVUZKTEVsQlFVa3NTVUZCU1N4SFFVRkhMRk5CUVZNN1FVRkRlRUlzVVVGQlVTeEhRVUZITEVkQlFVY3NVVUZCVVN4SFFVRkhMRkZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRE4wUXNVVUZCVVN4TFFVRkxMRWRCUVVjc1VVRkJVU3hEUVVGRExFdEJRVXNzUTBGQlF6dEJRVU12UWp0QlFVTkJMRWxCUVVrc1NVRkJTU3hMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZPMEZCUTNoQ0xFMUJRVTBzVDBGQlR5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRelZDTEV0QlFVczdRVUZEVEN4SlFVRkpMRWxCUVVrc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRM2hETEVsQlFVa3NVVUZCVVN4RFFVRkRMRXRCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NSVUZCUlN4TlFVRk5MRU5CUVVNc1NVRkJTU3hMUVVGTExFTkJRVU03UVVGRGNrUXNTVUZCU1N4UFFVRlBMRTFCUVUwc1EwRkJRenRCUVVOc1FpeEhRVUZITEVOQlFVTTdRVUZEU2l4RlFVRkZMRkZCUVZFc1EwRkJReXhMUVVGTExFZEJRVWNzUzBGQlMwTXNVMEZCVHl4RFFVRkRMRXRCUVVzc1NVRkJTU3hSUVVGUkxFTkJRVU1zUTBGQlF6dEJRVU51UkN4RlFVRkZMRTlCUVU4c1VVRkJVU3hEUVVGRE8wRkJRMnhDTEVOQlFVTTdRVUZEUkR0QlFVTkJPMEZCUTBGQkxGTkJRVThzUTBGQlF5eExRVUZMTEVkQlFVY3NVVUZCVVN4RFFVRkRPMEZCUTNwQ08wRkJRMEVzU1VGQlFTeFRRVUZqTEVkQlFVZEJMRk5CUVU4N08wRkRlRVY0UWl4SlFVRkpMRTlCUVU4c1IwRkJSM1pNTEZOQlFXOUNMRU5CUVVNN1FVRkRia003UVVGRFFUdEJRVU5CTEVsQlFVa3NaMEpCUVdkQ0xFZEJRVWNzUjBGQlJ5eERRVUZETzBGQlF6TkNPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRk5CUVZOM1RDeGxRVUZoTEVOQlFVTXNTVUZCU1N4RlFVRkZPMEZCUXpkQ0xFVkJRVVVzU1VGQlNTeE5RVUZOTEVkQlFVY3NUMEZCVHl4RFFVRkRMRWxCUVVrc1JVRkJSU3hUUVVGVExFZEJRVWNzUlVGQlJUdEJRVU16UXl4SlFVRkpMRWxCUVVrc1MwRkJTeXhEUVVGRExFbEJRVWtzUzBGQlN5eG5Ra0ZCWjBJc1JVRkJSVHRCUVVONlF5eE5RVUZOTEV0QlFVc3NRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkJRenRCUVVOd1FpeExRVUZMTzBGQlEwd3NTVUZCU1N4UFFVRlBMRWRCUVVjc1EwRkJRenRCUVVObUxFZEJRVWNzUTBGQlF5eERRVUZETzBGQlEwdzdRVUZEUVN4RlFVRkZMRWxCUVVrc1MwRkJTeXhIUVVGSExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTTdRVUZETTBJc1JVRkJSU3hQUVVGUExFMUJRVTBzUTBGQlF6dEJRVU5vUWl4RFFVRkRPMEZCUTBRN1FVRkRRU3hKUVVGQkxHTkJRV01zUjBGQlIwRXNaVUZCWVRzN1FVTjZRamxDTEVsQlFVa3NZVUZCWVN4SFFVRkhlRXdzWTBGQk1rSXNRMEZCUXp0QlFVTm9SRHRCUVVOQk8wRkJRMEVzU1VGQlNTeFZRVUZWTEVkQlFVY3NhMGRCUVd0SExFTkJRVU03UVVGRGNFZzdRVUZEUVR0QlFVTkJMRWxCUVVrc1dVRkJXU3hIUVVGSExGVkJRVlVzUTBGQlF6dEJRVU01UWp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTVUZCU1hsTUxHTkJRVmtzUjBGQlJ5eGhRVUZoTEVOQlFVTXNVMEZCVXl4TlFVRk5MRVZCUVVVN1FVRkRiRVFzUlVGQlJTeEpRVUZKTEUxQlFVMHNSMEZCUnl4RlFVRkZMRU5CUVVNN1FVRkRiRUlzUlVGQlJTeEpRVUZKTEUxQlFVMHNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXNzUlVGQlJTeFZRVUZWTzBGQlF6TkRMRWxCUVVrc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0QlFVTndRaXhIUVVGSE8wRkJRMGdzUlVGQlJTeE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVZVc1JVRkJSU3hUUVVGVExFdEJRVXNzUlVGQlJTeE5RVUZOTEVWQlFVVXNTMEZCU3l4RlFVRkZMRk5CUVZNc1JVRkJSVHRCUVVOMlJTeEpRVUZKTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExGTkJRVk1zUTBGQlF5eFBRVUZQTEVOQlFVTXNXVUZCV1N4RlFVRkZMRWxCUVVrc1EwRkJReXhKUVVGSkxFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTI1R0xFZEJRVWNzUTBGQlF5eERRVUZETzBGQlEwd3NSVUZCUlN4UFFVRlBMRTFCUVUwc1EwRkJRenRCUVVOb1FpeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTklPMEZCUTBFc1NVRkJRU3hoUVVGakxFZEJRVWRCTEdOQlFWazdPenM3T3pzN096czdPenM3T3pzN096dEJRMnBDTjBJc1EwRkJRU3hUUVVGVExGRkJRVkVzUTBGQlF5eExRVUZMTEVWQlFVVXNVVUZCVVN4RlFVRkZPMEZCUTI1RExFZEJRVVVzU1VGQlNTeExRVUZMTEVkQlFVY3NRMEZCUXl4RFFVRkRPMDlCUTFZc1RVRkJUU3hIUVVGSExFdEJRVXNzU1VGQlNTeEpRVUZKTEVkQlFVY3NRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTk8wRkJReTlETEU5QlFVMHNUVUZCVFN4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dEJRVU0zUWp0QlFVTkJMRWRCUVVVc1QwRkJUeXhGUVVGRkxFdEJRVXNzUjBGQlJ5eE5RVUZOTEVWQlFVVTdRVUZETTBJc1MwRkJTU3hOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1NVRkRkRVE3UjBGRFJDeFBRVUZQTEUxQlFVMHNRMEZCUXp0RlFVTm1PMEZCUTBRN1FVRkRRU3hEUVVGQkxGTkJRV01zUjBGQlJ5eFJRVUZSTEVOQlFVRTdPenM3UVVOd1FucENMRWxCUVVseVN5eFJRVUZOTEVkQlFVZHdRaXhqUVVGdlFpeEZRVUZCTzBGQlEycERMRWxCUVVrd1RDeFZRVUZSTEVkQlFVZHNUQ3huUWtGQmMwSXNSVUZCUVR0QlFVTnlReXhKUVVGSmRVVXNVMEZCVHl4SFFVRkhkRVVzVTBGQmIwSTdRVUZEYkVNc1NVRkJTVEpMTEZWQlFWRXNSMEZCUnpGTExGVkJRWEZDTEVOQlFVTTdRVUZEY2tNN1FVRkRRVHRCUVVOQkxFbEJRVWxwVEN4VlFVRlJMRWRCUVVjc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU55UWp0QlFVTkJPMEZCUTBFc1NVRkJTVGRDTEdGQlFWY3NSMEZCUnpGSkxGRkJRVTBzUjBGQlIwRXNVVUZCVFN4RFFVRkRMRk5CUVZNc1IwRkJSeXhUUVVGVE8wRkJRM1pFTEVsQlFVa3NZMEZCWXl4SFFVRkhNRWtzWVVGQlZ5eEhRVUZIUVN4aFFVRlhMRU5CUVVNc1VVRkJVU3hIUVVGSExGTkJRVk1zUTBGQlF6dEJRVU53UlR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRPRUlzWTBGQldTeERRVUZETEV0QlFVc3NSVUZCUlR0QlFVTTNRanRCUVVOQkxFVkJRVVVzU1VGQlNTeFBRVUZQTEV0QlFVc3NTVUZCU1N4UlFVRlJMRVZCUVVVN1FVRkRhRU1zU1VGQlNTeFBRVUZQTEV0QlFVc3NRMEZCUXp0QlFVTnFRaXhIUVVGSE8wRkJRMGdzUlVGQlJTeEpRVUZKTjBjc1UwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5eEZRVUZGTzBGQlEzUkNPMEZCUTBFc1NVRkJTU3hQUVVGUE1rY3NWVUZCVVN4RFFVRkRMRXRCUVVzc1JVRkJSVVVzWTBGQldTeERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRPMEZCUXpsRExFZEJRVWM3UVVGRFNDeEZRVUZGTEVsQlFVbFNMRlZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJUdEJRVU4yUWl4SlFVRkpMRTlCUVU4c1kwRkJZeXhIUVVGSExHTkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRE8wRkJRelZFTEVkQlFVYzdRVUZEU0N4RlFVRkZMRWxCUVVrc1RVRkJUU3hKUVVGSkxFdEJRVXNzUjBGQlJ5eEZRVUZGTEVOQlFVTXNRMEZCUXp0QlFVTTFRaXhGUVVGRkxFOUJRVThzUTBGQlF5eE5RVUZOTEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1EwRkJReXhIUVVGSExFdEJRVXNzUzBGQlN5eERRVUZEVHl4VlFVRlJMRWxCUVVrc1NVRkJTU3hIUVVGSExFMUJRVTBzUTBGQlF6dEJRVU55UlN4RFFVRkRPMEZCUTBRN1FVRkRRU3hKUVVGQkxHRkJRV01zUjBGQlIwTXNZMEZCV1RzN1FVTndRemRDTEVsQlFVa3NXVUZCV1N4SFFVRkhOVXdzWVVGQk1FSXNRMEZCUXp0QlFVTTVRenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZOQlFWTTJUQ3hWUVVGUkxFTkJRVU1zUzBGQlN5eEZRVUZGTzBGQlEzcENMRVZCUVVVc1QwRkJUeXhMUVVGTExFbEJRVWtzU1VGQlNTeEhRVUZITEVWQlFVVXNSMEZCUnl4WlFVRlpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03UVVGRGJFUXNRMEZCUXp0QlFVTkVPMEZCUTBFc1NVRkJRU3hWUVVGakxFZEJRVWRCTEZWQlFWRTdPMEZETTBKNlFpeEpRVUZKT1Vjc1UwRkJUeXhIUVVGSEwwVXNVMEZCYjBJN1FVRkRiRU1zU1VGQlNYRk1MRTlCUVVzc1IwRkJSemRMTEUxQlFXMUNPMEZCUXk5Q0xFbEJRVWxwVEN4alFVRlpMRWRCUVVkb1RDeGhRVUV3UWp0QlFVTTNReXhKUVVGSmIwd3NWVUZCVVN4SFFVRkhia3dzVlVGQmNVSXNRMEZCUXp0QlFVTnlRenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hUUVVGVGIwd3NWVUZCVVN4RFFVRkRMRXRCUVVzc1JVRkJSU3hOUVVGTkxFVkJRVVU3UVVGRGFrTXNSVUZCUlN4SlFVRkpMMGNzVTBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4RlFVRkZPMEZCUTNSQ0xFbEJRVWtzVDBGQlR5eExRVUZMTEVOQlFVTTdRVUZEYWtJc1IwRkJSenRCUVVOSUxFVkJRVVVzVDBGQlQzTkhMRTlCUVVzc1EwRkJReXhMUVVGTExFVkJRVVVzVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSMGtzWTBGQldTeERRVUZEU1N4VlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU40UlN4RFFVRkRPMEZCUTBRN1FVRkRRU3hKUVVGQkxGTkJRV01zUjBGQlIwTXNWVUZCVVRzN1FVTndRbnBDTEVsQlFVbFdMRlZCUVZFc1IwRkJSM0JNTEZWQlFYRkNMRU5CUVVNN1FVRkRja003UVVGRFFUdEJRVU5CTEVsQlFVa3lUQ3hWUVVGUkxFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTnlRanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVMGtzVDBGQlN5eERRVUZETEV0QlFVc3NSVUZCUlR0QlFVTjBRaXhGUVVGRkxFbEJRVWtzVDBGQlR5eExRVUZMTEVsQlFVa3NVVUZCVVN4SlFVRkpXQ3hWUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEVWQlFVVTdRVUZEYmtRc1NVRkJTU3hQUVVGUExFdEJRVXNzUTBGQlF6dEJRVU5xUWl4SFFVRkhPMEZCUTBnc1JVRkJSU3hKUVVGSkxFMUJRVTBzU1VGQlNTeExRVUZMTEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkROVUlzUlVGQlJTeFBRVUZQTEVOQlFVTXNUVUZCVFN4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExFTkJRVU1zUjBGQlJ5eExRVUZMTEV0QlFVc3NRMEZCUTA4c1ZVRkJVU3hKUVVGSkxFbEJRVWtzUjBGQlJ5eE5RVUZOTEVOQlFVTTdRVUZEY2tVc1EwRkJRenRCUVVORU8wRkJRMEVzU1VGQlFTeE5RVUZqTEVkQlFVZEpMRTlCUVVzN096czdPenM3TzBORGNFSjBRaXhKUVVGSkxGRkJRVkVzUjBGQlJ5OU1MRk5CUVhOQ08wdEJRMnBETEV0QlFVc3NSMEZCUjFFc1RVRkJiVUlzUTBGQlF6dEJRVU5vUXp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4RFFVRkJMRk5CUVZNc1QwRkJUeXhEUVVGRExFMUJRVTBzUlVGQlJTeEpRVUZKTEVWQlFVVTdSMEZETjBJc1NVRkJTU3hIUVVGSExGRkJRVkVzUTBGQlF5eEpRVUZKTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN1FVRkRhRU03UjBGRFJTeEpRVUZKTEV0QlFVc3NSMEZCUnl4RFFVRkRPMEZCUTJZc1QwRkJUU3hOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXp0QlFVTXpRanRIUVVORkxFOUJRVThzVFVGQlRTeEpRVUZKTEVsQlFVa3NTVUZCU1N4TFFVRkxMRWRCUVVjc1RVRkJUU3hGUVVGRk8wRkJRek5ETEV0QlFVa3NUVUZCVFN4SFFVRkhMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRM1pETzBkQlEwUXNUMEZCVHl4RFFVRkRMRXRCUVVzc1NVRkJTU3hMUVVGTExFbEJRVWtzVFVGQlRTeEpRVUZKTEUxQlFVMHNSMEZCUnl4VFFVRlRMRU5CUVVNN1JVRkRlRVE3UVVGRFJEdEJRVU5CTEVOQlFVRXNVVUZCWXl4SFFVRkhMRTlCUVU4c1EwRkJRVHM3T3p0QlEzWkNlRUlzU1VGQlNYZE1MRk5CUVU4c1IwRkJSMmhOTEdWQlFVRXNSVUZCY1VJc1EwRkJRenRCUVVOd1F6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVTBGQlUybE5MRXRCUVVjc1EwRkJReXhOUVVGTkxFVkJRVVVzU1VGQlNTeEZRVUZGTEZsQlFWa3NSVUZCUlR0QlFVTjZReXhGUVVGRkxFbEJRVWtzVFVGQlRTeEhRVUZITEUxQlFVMHNTVUZCU1N4SlFVRkpMRWRCUVVjc1UwRkJVeXhIUVVGSFJDeFRRVUZQTEVOQlFVTXNUVUZCVFN4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRMnhGTEVWQlFVVXNUMEZCVHl4TlFVRk5MRXRCUVVzc1UwRkJVeXhIUVVGSExGbEJRVmtzUjBGQlJ5eE5RVUZOTEVOQlFVTTdRVUZEZEVRc1EwRkJRenRCUVVORU8wRkJRMEVzU1VGQlFTeExRVUZqTEVkQlFVZERMRXRCUVVjN096czdPenM3T3pzN08wRkRlRUp3UWl4VFFVRlRReXhYUVVGVExFTkJRVU1zVFVGQlRTeEZRVUZGTEVkQlFVY3NSVUZCUlR0QlFVTm9ReXhGUVVGRkxFOUJRVThzVFVGQlRTeEpRVUZKTEVsQlFVa3NTVUZCU1N4SFFVRkhMRWxCUVVrc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzBGQlEycEVMRU5CUVVNN1FVRkRSRHRCUVVOQkxFbEJRVUVzVlVGQll5eEhRVUZIUVN4WFFVRlRPenRCUTFveFFpeEpRVUZKU2l4VlFVRlJMRWRCUVVjNVRDeFRRVUZ6UWp0QlFVTnlReXhKUVVGSkxGZEJRVmNzUjBGQlIxRXNZVUZCZDBJN1FVRkRNVU1zU1VGQlNYVkZMRk5CUVU4c1IwRkJSM1JGTEZOQlFXOUNPMEZCUTJ4RExFbEJRVWt3Unl4VFFVRlBMRWRCUVVkNlJ5eFJRVUZ4UWp0QlFVTnVReXhKUVVGSkxGRkJRVkVzUjBGQlIwTXNWVUZCY1VJN1FVRkRjRU1zU1VGQlNXOU1MRTlCUVVzc1IwRkJSM0pKTEUxQlFXMUNMRU5CUVVNN1FVRkRhRU03UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFRRVUZUZVVrc1UwRkJUeXhEUVVGRExFMUJRVTBzUlVGQlJTeEpRVUZKTEVWQlFVVXNUMEZCVHl4RlFVRkZPMEZCUTNoRExFVkJRVVVzU1VGQlNTeEhRVUZIVEN4VlFVRlJMRU5CUVVNc1NVRkJTU3hGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETzBGQlEyaERPMEZCUTBFc1JVRkJSU3hKUVVGSkxFdEJRVXNzUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEYUVJc1RVRkJUU3hOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMDdRVUZETVVJc1RVRkJUU3hOUVVGTkxFZEJRVWNzUzBGQlN5eERRVUZETzBGQlEzSkNPMEZCUTBFc1JVRkJSU3hQUVVGUExFVkJRVVVzUzBGQlN5eEhRVUZITEUxQlFVMHNSVUZCUlR0QlFVTXpRaXhKUVVGSkxFbEJRVWtzUjBGQlJ5eEhRVUZIUXl4UFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEYWtNc1NVRkJTU3hKUVVGSkxFVkJRVVVzVFVGQlRTeEhRVUZITEUxQlFVMHNTVUZCU1N4SlFVRkpMRWxCUVVrc1QwRkJUeXhEUVVGRExFMUJRVTBzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXl4RlFVRkZPMEZCUXpWRUxFMUJRVTBzVFVGQlRUdEJRVU5hTEV0QlFVczdRVUZEVEN4SlFVRkpMRTFCUVUwc1IwRkJSeXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEZWtJc1IwRkJSenRCUVVOSUxFVkJRVVVzU1VGQlNTeE5RVUZOTEVsQlFVa3NSVUZCUlN4TFFVRkxMRWxCUVVrc1RVRkJUU3hGUVVGRk8wRkJRMjVETEVsQlFVa3NUMEZCVHl4TlFVRk5MRU5CUVVNN1FVRkRiRUlzUjBGQlJ6dEJRVU5JTEVWQlFVVXNUVUZCVFN4SFFVRkhMRTFCUVUwc1NVRkJTU3hKUVVGSkxFZEJRVWNzUTBGQlF5eEhRVUZITEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNN1FVRkRPVU1zUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXl4TlFVRk5MRWxCUVVrc1VVRkJVU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTlVVc1UwRkJUeXhEUVVGRExFZEJRVWNzUlVGQlJTeE5RVUZOTEVOQlFVTTdRVUZETjBRc1MwRkJTM0JETEZOQlFVOHNRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hYUVVGWExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTTNReXhEUVVGRE8wRkJRMFE3UVVGRFFTeEpRVUZCTEZGQlFXTXNSMEZCUjI5SUxGTkJRVTg3TzBGRGRFTjRRaXhKUVVGSkxGTkJRVk1zUjBGQlIyNU5MRlZCUVhWQ08wRkJRM1pETEVsQlFVa3NUMEZCVHl4SFFVRkhVU3hSUVVGeFFpeERRVUZETzBGQlEzQkRPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRk5CUVZNMFRDeFBRVUZMTEVOQlFVTXNUVUZCVFN4RlFVRkZMRWxCUVVrc1JVRkJSVHRCUVVNM1FpeEZRVUZGTEU5QlFVOHNUVUZCVFN4SlFVRkpMRWxCUVVrc1NVRkJTU3hQUVVGUExFTkJRVU1zVFVGQlRTeEZRVUZGTEVsQlFVa3NSVUZCUlN4VFFVRlRMRU5CUVVNc1EwRkJRenRCUVVNMVJDeERRVUZETzBGQlEwUTdRVUZEUVN4SlFVRkJMRTlCUVdNc1IwRkJSMEVzVDBGQlN6czdRVU5xUTNSQ0xFbEJRVWtzVjBGQlZ5eEhRVUZIY0Uwc1dVRkJlVUk3UVVGRE0wTXNTVUZCU1N4SFFVRkhMRWRCUVVkUkxFdEJRV2RDTzBGQlF6RkNMRWxCUVVrc1MwRkJTeXhIUVVGSFF5eFBRVUZyUWp0QlFVTTVRaXhKUVVGSk5Fc3NUMEZCU3l4SFFVRkhNMHNzVFVGQmJVSTdRVUZETDBJc1NVRkJTU3hyUWtGQmEwSXNSMEZCUjBNc2JVSkJRV2RETzBGQlEzcEVMRWxCUVVrc2RVSkJRWFZDTEVkQlFVY3JReXgzUWtGQmNVTTdRVUZEYmtVc1NVRkJTWEZKTEU5QlFVc3NSMEZCUjNCRkxFMUJRVzFDTEVOQlFVTTdRVUZEYUVNN1FVRkRRVHRCUVVOQkxFbEJRVWtzYjBKQlFXOUNMRWRCUVVjc1EwRkJRenRCUVVNMVFpeEpRVUZKTEhOQ1FVRnpRaXhIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU12UWp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRNRVVzY1VKQlFXMUNMRU5CUVVNc1NVRkJTU3hGUVVGRkxGRkJRVkVzUlVGQlJUdEJRVU0zUXl4RlFVRkZMRWxCUVVsb1FpeFBRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc2EwSkJRV3RDTEVOQlFVTXNVVUZCVVN4RFFVRkRMRVZCUVVVN1FVRkRia1FzU1VGQlNTeFBRVUZQTEhWQ1FVRjFRaXhEUVVGRFZTeFBRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU03UVVGRE1VUXNSMEZCUnp0QlFVTklMRVZCUVVVc1QwRkJUeXhUUVVGVExFMUJRVTBzUlVGQlJUdEJRVU14UWl4SlFVRkpMRWxCUVVrc1VVRkJVU3hIUVVGSExFZEJRVWNzUTBGQlF5eE5RVUZOTEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkRja01zU1VGQlNTeFBRVUZQTEVOQlFVTXNVVUZCVVN4TFFVRkxMRk5CUVZNc1NVRkJTU3hSUVVGUkxFdEJRVXNzVVVGQlVUdEJRVU16UkN4UlFVRlJMRXRCUVVzc1EwRkJReXhOUVVGTkxFVkJRVVVzU1VGQlNTeERRVUZETzBGQlF6TkNMRkZCUVZFc1YwRkJWeXhEUVVGRExGRkJRVkVzUlVGQlJTeFJRVUZSTEVWQlFVVXNiMEpCUVc5Q0xFZEJRVWNzYzBKQlFYTkNMRU5CUVVNc1EwRkJRenRCUVVOMlJpeEhRVUZITEVOQlFVTTdRVUZEU2l4RFFVRkRPMEZCUTBRN1FVRkRRU3hKUVVGQkxHOUNRVUZqTEVkQlFVZE5MSEZDUVVGdFFqczdPenM3T3pzN096dEJRM3BDY0VNc1UwRkJVME1zWTBGQldTeERRVUZETEVkQlFVY3NSVUZCUlR0QlFVTXpRaXhGUVVGRkxFOUJRVThzVTBGQlV5eE5RVUZOTEVWQlFVVTdRVUZETVVJc1NVRkJTU3hQUVVGUExFMUJRVTBzU1VGQlNTeEpRVUZKTEVkQlFVY3NVMEZCVXl4SFFVRkhMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU53UkN4SFFVRkhMRU5CUVVNN1FVRkRTaXhEUVVGRE8wRkJRMFE3UVVGRFFTeEpRVUZCTEdGQlFXTXNSMEZCUjBFc1kwRkJXVHM3UVVOaU4wSXNTVUZCU1N4UFFVRlBMRWRCUVVkMFRTeGxRVUZCTEVWQlFYRkNMRU5CUVVNN1FVRkRjRU03UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk4xVFN4clFrRkJaMElzUTBGQlF5eEpRVUZKTEVWQlFVVTdRVUZEYUVNc1JVRkJSU3hQUVVGUExGTkJRVk1zVFVGQlRTeEZRVUZGTzBGQlF6RkNMRWxCUVVrc1QwRkJUeXhQUVVGUExFTkJRVU1zVFVGQlRTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMEZCUTJwRExFZEJRVWNzUTBGQlF6dEJRVU5LTEVOQlFVTTdRVUZEUkR0QlFVTkJMRWxCUVVFc2FVSkJRV01zUjBGQlIwRXNhMEpCUVdkQ096dEJRMlpxUXl4SlFVRkpMRmxCUVZrc1IwRkJSM1pOTEdGQlFUQkNPMEZCUXpkRExFbEJRVWtzWjBKQlFXZENMRWRCUVVkUkxHbENRVUU0UWp0QlFVTnlSQ3hKUVVGSkxFdEJRVXNzUjBGQlIwTXNUVUZCYlVJN1FVRkRMMElzU1VGQlNYTk1MRTlCUVVzc1IwRkJSM0pNTEUxQlFXMUNMRU5CUVVNN1FVRkRhRU03UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRk5CUVZNNFRDeFZRVUZSTEVOQlFVTXNTVUZCU1N4RlFVRkZPMEZCUTNoQ0xFVkJRVVVzVDBGQlR5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1dVRkJXU3hEUVVGRFZDeFBRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhuUWtGQlowSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRCUVVNeFJTeERRVUZETzBGQlEwUTdRVUZEUVN4SlFVRkJMRlZCUVdNc1IwRkJSMU1zVlVGQlVUczdRVU12UW5wQ0xFbEJRVWtzVjBGQlZ5eEhRVUZIZUUwc1dVRkJlVUk3UVVGRE0wTXNTVUZCU1N4dFFrRkJiVUlzUjBGQlIxRXNiMEpCUVdsRE8wRkJRek5FTEVsQlFVazRTQ3hWUVVGUkxFZEJRVWMzU0N4VlFVRnhRanRCUVVOd1F5eEpRVUZKYzBVc1UwRkJUeXhIUVVGSGNrVXNVMEZCYjBJN1FVRkRiRU1zU1VGQlNTeFJRVUZSTEVkQlFVZERMRlZCUVhGQ0xFTkJRVU03UVVGRGNrTTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZOQlFWTTRUQ3hqUVVGWkxFTkJRVU1zUzBGQlN5eEZRVUZGTzBGQlF6ZENPMEZCUTBFN1FVRkRRU3hGUVVGRkxFbEJRVWtzVDBGQlR5eExRVUZMTEVsQlFVa3NWVUZCVlN4RlFVRkZPMEZCUTJ4RExFbEJRVWtzVDBGQlR5eExRVUZMTEVOQlFVTTdRVUZEYWtJc1IwRkJSenRCUVVOSUxFVkJRVVVzU1VGQlNTeExRVUZMTEVsQlFVa3NTVUZCU1N4RlFVRkZPMEZCUTNKQ0xFbEJRVWtzVDBGQlQyNUZMRlZCUVZFc1EwRkJRenRCUVVOd1FpeEhRVUZITzBGQlEwZ3NSVUZCUlN4SlFVRkpMRTlCUVU4c1MwRkJTeXhKUVVGSkxGRkJRVkVzUlVGQlJUdEJRVU5vUXl4SlFVRkpMRTlCUVU5MlJDeFRRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRPMEZCUTNwQ0xGRkJRVkVzYlVKQlFXMUNMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVNdlF5eFJRVUZSTEZkQlFWY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRCUVVNelFpeEhRVUZITzBGQlEwZ3NSVUZCUlN4UFFVRlBMRkZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU42UWl4RFFVRkRPMEZCUTBRN1FVRkRRU3hKUVVGQkxHRkJRV01zUjBGQlJ6QklMR05CUVZrN08wRkRPVUkzUWl4SlFVRkpOVWtzYVVKQlFXVXNSMEZCUnpkRUxHZENRVUUyUWp0QlFVTnVSQ3hKUVVGSmRVb3NXVUZCVlN4SFFVRkhMMGtzVjBGQmQwSTdRVUZEZWtNc1NVRkJTV2xOTEdOQlFWa3NSMEZCUjJoTkxHRkJRVEJDTEVOQlFVTTdRVUZET1VNN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk1zVTBGQlV5eERRVUZETEUxQlFVMHNSVUZCUlN4UlFVRlJMRVZCUVVVN1FVRkRja01zUlVGQlJTeEpRVUZKTEUxQlFVMHNSMEZCUnl4RlFVRkZMRU5CUVVNN1FVRkRiRUlzUlVGQlJTeFJRVUZSTEVkQlFVZG5UU3hqUVVGWkxFTkJRVU1zVVVGQlZ5eERRVUZETEVOQlFVTTdRVUZEZGtNN1FVRkRRU3hGUVVGRmJFUXNXVUZCVlN4RFFVRkRMRTFCUVUwc1JVRkJSU3hUUVVGVExFdEJRVXNzUlVGQlJTeEhRVUZITEVWQlFVVXNUVUZCVFN4RlFVRkZPMEZCUTJ4RUxFbEJRVWt4Uml4cFFrRkJaU3hEUVVGRExFMUJRVTBzUlVGQlJTeEhRVUZITEVWQlFVVXNVVUZCVVN4RFFVRkRMRXRCUVVzc1JVRkJSU3hIUVVGSExFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTXZSQ3hIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU5NTEVWQlFVVXNUMEZCVHl4TlFVRk5MRU5CUVVNN1FVRkRhRUlzUTBGQlF6dEJRVU5FTzBGQlEwRXNTVUZCUVN4WFFVRmpMRWRCUVVjc1UwRkJVenM3UVVONlF6RkNMRWxCUVVFMlNTeFJRVUZqTEVkQlFVY3NUVUZCVFR0QlFVTjJRaXhEUVVGRExFMUJRVTBzUjBGQlJ5eEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTm9RanRCUVVOQkxFTkJRVU1zUjBGQlJ5eERRVUZETEU5QlFVOHNSMEZCUnl4SlFVRkpMRTlCUVU4c1EwRkJReXhEUVVGRExFOUJRVThzUlVGQlJTeE5RVUZOTEV0QlFVczdRVUZEYUVRc1JVRkJSU3hIUVVGSExFTkJRVU1zVDBGQlR5eEhRVUZITEU5QlFVOHNRMEZCUXp0QlFVTjRRaXhGUVVGRkxFZEJRVWNzUTBGQlF5eE5RVUZOTEVkQlFVY3NUVUZCVFN4RFFVRkRPMEZCUTNSQ0xFVkJRVVVzUTBGQlF5eERRVUZETzBGQlEwbzdRVUZEUVN4RFFVRkRMRTlCUVU4c1IwRkJSeXhEUVVGRE8wRkJRMW9zUTBGQlF6czdRVU5VUkN4TlFVRk5MRTFCUVUwc1IwRkJSekZOTEZGQlFXdENMRU5CUVVNN1FVRkRiRU1zVTBGQlV6Sk5MR1ZCUVdFc1EwRkJReXhIUVVGSExFVkJRVVVzVVVGQlVTeEhRVUZITEZGQlFWRXNSVUZCUlR0QlFVTnFSQ3hKUVVGSkxFbEJRVWtzWVVGQllTeERRVUZETzBGQlEzUkNMRWxCUVVrc1NVRkJTU3hsUVVGbExFTkJRVU03UVVGRGVFSXNTVUZCU1N4SlFVRkpMR3RDUVVGclFpeERRVUZETzBGQlF6TkNMRWxCUVVrc1RVRkJUU3hQUVVGUExFZEJRVWNzV1VGQldUdEJRVU5vUXl4UlFVRlJMRWxCUVVrc1lVRkJZU3hMUVVGTExGTkJRVk1zUlVGQlJUdEJRVU42UXp0QlFVTkJMRmxCUVZrc1QwRkJUenRCUVVOdVFpeFRRVUZUTzBGQlExUXNVVUZCVVN4TlFVRk5MRlZCUVZVc1IwRkJSeXhQUVVGUExFbEJRVWtzUzBGQlN6dEJRVU16UXl4WlFVRlpMR3RDUVVGclFpeEhRVUZITEUxQlFVMHNSVUZCUlN4RFFVRkRPMEZCUXpGRExGbEJRVmtzVFVGQlRTeExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExGRkJRVkVzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJRenRCUVVONlJDeFpRVUZaTEVsQlFVa3NTMEZCU3l4SlFVRkpMRU5CUVVNc1JVRkJSVHRCUVVNMVFqdEJRVU5CTEdkQ1FVRm5RaXhIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRM0JETEdkQ1FVRm5RaXhyUWtGQmEwSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1EwRkJRenRCUVVNM1F5eG5Ra0ZCWjBJc1QwRkJUenRCUVVOMlFpeGhRVUZoTzBGQlEySTdRVUZEUVN4WlFVRlpMR0ZCUVdFc1IwRkJSeXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEY0VNc1dVRkJXU3hsUVVGbExFZEJRVWNzVlVGQlZTeERRVUZETEUxQlFVMDdRVUZETDBNN1FVRkRRU3huUWtGQlowSXNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTndReXhuUWtGQlowSXNTVUZCU1N4clFrRkJhMElzUlVGQlJUdEJRVU40UXl4dlFrRkJiMElzYTBKQlFXdENMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU03UVVGRGFrUXNhVUpCUVdsQ08wRkJRMnBDTEdGQlFXRXNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRenRCUVVOMFFqdEJRVU5CTEZsQlFWa3NTVUZCU1N4UFFVRlBMR1ZCUVdVc1EwRkJReXhMUVVGTExFdEJRVXNzVlVGQlZTeEZRVUZGTzBGQlF6ZEVPMEZCUTBFc1owSkJRV2RDTEdWQlFXVXNRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkJRenRCUVVONFF5eGhRVUZoTzBGQlEySXNXVUZCV1N4UFFVRlBMR3RDUVVGclFpeERRVUZETEU5QlFVOHNRMEZCUXp0QlFVTTVReXhUUVVGVExFTkJRVU03UVVGRFZpeFJRVUZSTEVsQlFVazdRVUZEV2l4WlFVRlpMRXRCUVVzc1RVRkJUU3hMUVVGTExFbEJRVWtzUjBGQlJ5eEZRVUZGTzBGQlEzSkRMR2RDUVVGblFpeE5RVUZOTEZWQlFWVXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRCUVVONFF5eGhRVUZoTzBGQlEySXNVMEZCVXp0QlFVTlVMRkZCUVZFc1QwRkJUeXhGUVVGRkxFVkJRVVU3UVVGRGJrSTdRVUZEUVN4VFFVRlRPMEZCUTFRc1VVRkJVU3hoUVVGaExFZEJRVWNzVTBGQlV5eERRVUZETzBGQlEyeERMRXRCUVVzc1EwRkJRenRCUVVOT0xFbEJRVWtzVFVGQlRTeExRVUZMTEVkQlFVY3NUVUZCVFR0QlFVTjRRaXhSUVVGUkxHRkJRV0VzUjBGQlJ5eFRRVUZUTEVOQlFVTTdRVUZEYkVNc1VVRkJVU3hKUVVGSkxHVkJRV1VzUzBGQlN5eFRRVUZUTEVWQlFVVTdRVUZETTBNc1dVRkJXU3haUVVGWkxFTkJRVU1zWlVGQlpTeERRVUZETEVOQlFVTTdRVUZETVVNc1dVRkJXU3hsUVVGbExFZEJRVWNzVTBGQlV5eERRVUZETzBGQlEzaERMRk5CUVZNN1FVRkRWQ3hSUVVGUkxFbEJRVWtzYTBKQlFXdENMRXRCUVVzc1UwRkJVeXhGUVVGRk8wRkJRemxETEZsQlFWa3NhMEpCUVd0Q0xFTkJRVU1zVFVGQlRTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMEZCUTJwRUxGbEJRVmtzYTBKQlFXdENMRWRCUVVjc1UwRkJVeXhEUVVGRE8wRkJRek5ETEZOQlFWTTdRVUZEVkN4TFFVRkxMRU5CUVVNN1FVRkRUaXhKUVVGSkxFMUJRVTBzVjBGQlZ5eEhRVUZITEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBGQlF6RkRMRWxCUVVrc1IwRkJSeXhEUVVGRExFZEJRVWNzUjBGQlJ5eERRVUZETEVkQlFVY3NSVUZCUlN4TFFVRkxMRXRCUVVzN1FVRkRPVUlzVVVGQlVTeEpRVUZKTEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVU3UVVGRE1VSTdRVUZEUVN4WlFVRlpMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZETlVJc1UwRkJVenRCUVVOVU8wRkJRMEVzVVVGQlVTeE5RVUZOTEUxQlFVMHNSMEZCUnl4WFFVRlhMRU5CUVVNc1IwRkJSeXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzBGQlF5OURPMEZCUTBFc1VVRkJVU3hKUVVGSkxHRkJRV0VzU1VGQlNTeGhRVUZoTEV0QlFVc3NSMEZCUnl4RlFVRkZPMEZCUTNCRUxGbEJRVmtzUzBGQlN5eEZRVUZGTEVOQlFVTTdRVUZEY0VJc1UwRkJVenRCUVVOVU8wRkJRMEVzVVVGQlVTeFBRVUZQTEVWQlFVVXNRMEZCUXp0QlFVTnNRaXhSUVVGUkxFOUJRVThzVFVGQlRTeERRVUZETzBGQlEzUkNMRXRCUVVzc1EwRkJRenRCUVVOT0xFbEJRVWtzVDBGQlR5eEZRVUZGTEVOQlFVTTdRVUZEWkN4SlFVRkpMRTlCUVU4c1IwRkJSeXhEUVVGRE8wRkJRMllzUTBGQlF6dEJRVU5FTEVsQlFVRkRMRTFCUVdNc1IwRkJSMFFzWlVGQllUczdRVU16UlRsQ0xFMUJRVTBzWVVGQllTeEhRVUZITTAwc1RVRkJNRUlzUTBGQlF6dEJRVU5xUkN4TlFVRk5MRk5CUVZNc1EwRkJRenRCUVVOb1FpeEpRVUZKTEZkQlFWY3NRMEZCUXl4TlFVRk5MRVZCUVVVc1NVRkJTU3hGUVVGRk8wRkJRemxDTEZGQlFWRXNTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhOUVVGTkxFTkJRVU03UVVGRE4wSXNVVUZCVVN4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExGZEJRVmNzUTBGQlF5eEhRVUZITEV0QlFVc3NRMEZCUXp0QlFVTjZReXhSUVVGUkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVY3NTVUZCU1N4SFFVRkhMRVZCUVVVc1EwRkJRenRCUVVNNVFqdEJRVU5CTEZGQlFWRXNZVUZCWVN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU5xUXl4UlFVRlJMRWxCUVVrc1NVRkJTU3hGUVVGRk8wRkJRMnhDTEZsQlFWa3NTMEZCU3l4TlFVRk5MRU5CUVVNc1IwRkJSeXhGUVVGRkxFdEJRVXNzUTBGQlF5eEpRVUZKTEVsQlFVa3NSVUZCUlR0QlFVTTNReXhuUWtGQlowSXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTTdRVUZEY2tNc1lVRkJZVHRCUVVOaUxGTkJRVk03UVVGRFZDeExRVUZMTzBGQlEwd3NTVUZCU1N4SlFVRkpMRWxCUVVrc1IwRkJSenRCUVVObUxGRkJRVkVzVDBGQlR5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJRenRCUVVNNVFpeExRVUZMTzBGQlEwd3NTVUZCU1N4TFFVRkxMRWRCUVVjN1FVRkRXaXhSUVVGUkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVNN1FVRkRNVUlzUzBGQlN6dEJRVU5NTEVsQlFVa3NUVUZCVFN4RFFVRkRMRWRCUVVjc1JVRkJSVHRCUVVOb1FpeFJRVUZSTEU5QlFVOHNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEY2tNc1MwRkJTenRCUVVOTUxFbEJRVWtzUjBGQlJ5eERRVUZETEVkQlFVY3NSVUZCUlR0QlFVTmlMRkZCUVZFc1QwRkJUeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVOc1F5eExRVUZMTzBGQlEwd3NTVUZCU1N4SFFVRkhMRU5CUVVNc1IwRkJSeXhGUVVGRk8wRkJRMklzVVVGQlVTeE5RVUZOTEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTjZReXhSUVVGUkxFbEJRVWtzUzBGQlN5eEZRVUZGTzBGQlEyNUNMRmxCUVZrc1QwRkJUeXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETzBGQlF6bENMRk5CUVZNN1FVRkRWQ3hSUVVGUkxFOUJRVTg3UVVGRFppeExRVUZMTzBGQlEwd3NTVUZCU1N4SFFVRkhMRU5CUVVNc1IwRkJSeXhGUVVGRkxFdEJRVXNzUlVGQlJUdEJRVU53UWl4UlFVRlJMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NSVUZCUlR0QlFVTXpRaXhaUVVGWkxFMUJRVTBzUlVGQlJTeEpRVUZKTEVOQlFVTXNSMEZCUnl4RlFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTA3UVVGRE5VTXNXVUZCV1N4SlFVRkpMRVZCUVVVc1MwRkJTenRCUVVOMlFpeFRRVUZUTEVOQlFVTXNRMEZCUXp0QlFVTllMRkZCUVZFc1QwRkJUeXhKUVVGSkxFTkJRVU03UVVGRGNFSXNTMEZCU3p0QlFVTk1MRWxCUVVrc1RVRkJUU3hIUVVGSE8wRkJRMklzVVVGQlVTeFBRVUZQTEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1NVRkJTU3hKUVVGSkxFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRCUVVONlJDeExRVUZMTzBGQlEwd3NTVUZCU1N4SlFVRkpMRWRCUVVjN1FVRkRXQ3hSUVVGUkxFOUJRVThzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJRenRCUVVOb1F5eExRVUZMTzBGQlEwd3NTVUZCU1N4UFFVRlBMRWRCUVVjN1FVRkRaQ3hSUVVGUkxFOUJRVThzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4SlFVRkpMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEY0VVc1MwRkJTenRCUVVOTUxFbEJRVWtzVDBGQlR5eERRVUZETEZWQlFWVXNSVUZCUlN4UFFVRlBMRVZCUVVVN1FVRkRha01zVVVGQlVTeExRVUZMTEUxQlFVMHNRMEZCUXl4SFFVRkhMRVZCUVVVc1MwRkJTeXhEUVVGRExFbEJRVWtzU1VGQlNTeERRVUZETEU5QlFVOHNSVUZCUlN4RlFVRkZPMEZCUTI1RUxGbEJRVmtzVlVGQlZTeERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMRVZCUVVVc1EwRkJReXhMUVVGTExFVkJRVVVzUjBGQlJ5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRNVVFzVTBGQlV6dEJRVU5VTEV0QlFVczdRVUZEVEN4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eEhRVUZITzBGQlEzaENMRkZCUVZFc1QwRkJUeXhKUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTEVOQlFVTTdRVUZET1VJc1MwRkJTenRCUVVOTUxFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNWVUZCVlN4RlFVRkZPMEZCUTJoRExGRkJRVkVzUzBGQlN5eE5RVUZOTEVsQlFVa3NTVUZCU1N4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUlVGQlJTeEZRVUZGTzBGQlEyaEVMRmxCUVZrc1RVRkJUU3hWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdRVUZEYmtNc1UwRkJVenRCUVVOVUxFdEJRVXM3UVVGRFRDeERRVUZETzBGQlEwUXNTVUZCUVN4SlFVRmpMRWRCUVVjc1UwRkJVenM3UVVOb1JURkNMRTFCUVUwc1dVRkJXU3hIUVVGSExFTkJRVU1zUlVGQlJTeEZRVUZGTEVsQlFVa3NSVUZCUlN4UlFVRlJMRVZCUVVVc2NVSkJRWEZDTEV0QlFVczdRVUZEY0VVN1FVRkRRVHRCUVVOQkxFTkJRVU1zU1VGQlNTeFJRVUZSTEV0QlFVc3NVVUZCVVN4SlFVRkpMRkZCUVZFc1MwRkJTeXhYUVVGWExFVkJRVVU3UVVGRGVFUXNSVUZCUlN4UFFVRlBPMEZCUTFRc1JVRkJSVHRCUVVOR08wRkJRMEU3UVVGRFFTeERRVUZETEVsQlFVa3NVVUZCVVN4TFFVRkxMRmRCUVZjc1NVRkJTU3hSUVVGUkxFdEJRVXNzVVVGQlVTeEZRVUZGTzBGQlEzaEVMRVZCUVVVc1QwRkJUenRCUVVOVUxFVkJRVVU3UVVGRFJqdEJRVU5CTEVOQlFVTXNUVUZCVFN4WlFVRlpMRWRCUVVjc1RVRkJUU3hEUVVGRExIZENRVUYzUWl4RFFVRkRMRVZCUVVVc1JVRkJSU3hSUVVGUkxFTkJRVU1zUTBGQlF6dEJRVU53UlN4RFFVRkRMRTFCUVUwc1kwRkJZeXhIUVVGSExFMUJRVTBzUTBGQlF5eDNRa0ZCZDBJc1EwRkJReXhKUVVGSkxFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTTdRVUZEZUVVN1FVRkRRU3hEUVVGRExFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNXVUZCV1N4RlFVRkZMR05CUVdNc1EwRkJReXhKUVVGSkxIRkNRVUZ4UWl4RlFVRkZPMEZCUXpsRkxFVkJRVVVzVDBGQlR6dEJRVU5VTEVWQlFVVTdRVUZEUmp0QlFVTkJMRU5CUVVNc1RVRkJUU3hEUVVGRExHTkJRV01zUTBGQlF5eEZRVUZGTEVWQlFVVXNVVUZCVVN4RlFVRkZMR05CUVdNc1EwRkJReXhEUVVGRE8wRkJRM0pFTEVOQlFVTXNRMEZCUXp0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVFVGQlRTeGxRVUZsTEVkQlFVY3NWVUZCVlN4WlFVRlpMRVZCUVVVc1kwRkJZeXhGUVVGRk8wRkJRMmhGTEVOQlFVTXNUMEZCVHl4WlFVRlpMRXRCUVVzc1UwRkJVeXhKUVVGSkxGbEJRVmtzUTBGQlF5eFpRVUZaTzBGQlF5OUVMRVZCUVVVc1dVRkJXU3hEUVVGRExGRkJRVkVzUzBGQlN5eGpRVUZqTEVOQlFVTXNVVUZCVVR0QlFVTnVSQ3hGUVVGRkxGbEJRVmtzUTBGQlF5eFZRVUZWTEV0QlFVc3NZMEZCWXl4RFFVRkRMRlZCUVZVN1FVRkRka1FzUlVGQlJTeFpRVUZaTEVOQlFVTXNXVUZCV1N4TFFVRkxMR05CUVdNc1EwRkJReXhaUVVGWk8wRkJRek5FTEVkQlFVY3NXVUZCV1N4RFFVRkRMRkZCUVZFc1NVRkJTU3haUVVGWkxFTkJRVU1zUzBGQlN5eExRVUZMTEdOQlFXTXNRMEZCUXl4TFFVRkxMRU5CUVVNN1FVRkRlRVVzUlVGQlJTeERRVUZETzBGQlEwZ3NRMEZCUXl4RFFVRkRPMEZCUTBZN1FVRkRRU3hOUVVGTkxHVkJRV1VzUjBGQlJ5eERRVUZETEVWQlFVVXNSVUZCUlN4SlFVRkpMRXRCUVVzN1FVRkRkRU1zUTBGQlF5eE5RVUZOTEdGQlFXRXNSMEZCUnl4TlFVRk5MRU5CUVVNc1kwRkJZeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBGQlEyNUVMRU5CUVVNc1NVRkJTU3hoUVVGaExFdEJRVXNzVFVGQlRTeERRVUZETEdOQlFXTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSVHRCUVVOc1JDeEZRVUZGTEU5QlFVODdRVUZEVkN4RlFVRkZPMEZCUTBZN1FVRkRRU3hEUVVGRExFMUJRVTBzUTBGQlF5eGpRVUZqTEVOQlFVTXNSVUZCUlN4RlFVRkZMR0ZCUVdFc1EwRkJReXhEUVVGRE8wRkJRekZETEVOQlFVTXNRMEZCUXp0QlFVTkdPMEZCUTBFc1RVRkJUU3hsUVVGbExFZEJRVWNzUTBGQlF5eFJRVUZSTEVWQlFVVXNVVUZCVVN4TFFVRkxMRU5CUVVNc1YwRkJWeXhGUVVGRkxGRkJRVkVzUTBGQlF5eEpRVUZKTEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVONFJqdEJRVU5CTEUxQlFVMHNhMEpCUVd0Q0xFZEJRVWNzVFVGQlRTeERRVUZETEhkQ1FVRjNRaXhEUVVGRExGRkJRVkVzUTBGQlF5eFRRVUZUTEVWQlFVVXNWVUZCVlN4RFFVRkRMRU5CUVVNN1FVRkRNMFlzVFVGQlRTeFpRVUZaTEVkQlFVY3NUVUZCVFN4RFFVRkRMSGRDUVVGM1FpeERRVUZETEZGQlFWRXNRMEZCUXl4VFFVRlRMRU5CUVVNc1VVRkJVU3hGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETzBGQlF6RkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVFVGQlRTeGpRVUZqTEVkQlFVY3NRMEZCUXl4RlFVRkZMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUzBGQlN6dEJRVU16UXl4RFFVRkRMRTFCUVUwc1VVRkJVU3hIUVVGSExFbEJRVWtzUzBGQlN5eEZRVUZGTEVkQlFVY3NSVUZCUlN4SFFVRkhMRU5CUVVNc1MwRkJTeXhGUVVGRkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVNNVJDeERRVUZETEUxQlFVMHNWMEZCVnl4SFFVRkhMR1ZCUVdVc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEZGQlFWRXNSVUZCUlN4SlFVRkpMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU1zUTBGQlF6dEJRVU16UlR0QlFVTkJMRU5CUVVNc1RVRkJUU3hEUVVGRExHTkJRV01zUTBGQlF5eFhRVUZYTEVWQlFVVXNUVUZCVFN4RlFVRkZMRmxCUVZrc1EwRkJReXhEUVVGRE8wRkJRekZFTEVOQlFVTXNUVUZCVFN4RFFVRkRMR05CUVdNc1EwRkJReXhGUVVGRkxFVkJRVVVzVlVGQlZTeEZRVUZGTEVOQlFVTXNSMEZCUnl4clFrRkJhMElzUlVGQlJTeExRVUZMTEVWQlFVVXNWMEZCVnl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOd1JpeERRVUZETEVOQlFVTTdRVUZEUmp0QlFVTmxMRk5CUVZNc1lVRkJZU3hEUVVGRExFVkJRVVVzUlVGQlJTeEpRVUZKTEVWQlFVVXNRMEZCUXl4eFFrRkJjVUlzUjBGQlJ5eExRVUZMTEVOQlFVTXNSMEZCUnl4RlFVRkZMRVZCUVVVN1FVRkRkRVlzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRE8wRkJRMjVDTzBGQlEwRXNRMEZCUXl4TFFVRkxMRTFCUVUwc1VVRkJVU3hKUVVGSkxFOUJRVThzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVN1FVRkRMME1zUlVGQlJTeFpRVUZaTEVOQlFVTXNSVUZCUlN4RlFVRkZMRWxCUVVrc1JVRkJSU3hSUVVGUkxFVkJRVVVzY1VKQlFYRkNMRU5CUVVNc1EwRkJRenRCUVVNeFJDeEZRVUZGTzBGQlEwWTdRVUZEUVN4RFFVRkRMR1ZCUVdVc1EwRkJReXhGUVVGRkxFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdRVUZETTBJc1EwRkJReXhqUVVGakxFTkJRVU1zUlVGQlJTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenRCUVVOb1F6dEJRVU5CTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNN1FVRkRXRHM3UVVOeVJVRXNUVUZCVFN4VlFVRlZMRWRCUVVjc1NVRkJTU3hQUVVGUExFVkJRVVVzUTBGQlF6dEJRVU5xUXp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFpTeFRRVUZUTEZGQlFWRXNRMEZCUXl4RlFVRkZMRVZCUVVVc1JVRkJSU3hSUVVGUkxFZEJRVWNzUTBGQlF5eERRVUZETEdGQlFXRXNRMEZCUXl4TFFVRkxMR0ZCUVdFc1JVRkJSU3hMUVVGTExFZEJRVWNzU1VGQlNTeEhRVUZITEVWQlFVVXNSMEZCUnl4SFFVRkhMRVZCUVVVc1JVRkJSVHRCUVVOcVNEdEJRVU5CTzBGQlEwRXNTVUZCU1N4TlFVRk5MRmxCUVZrc1IwRkJSeXhKUVVGSkxFZEJRVWNzUlVGQlJTeERRVUZETzBGQlEyNURMRWxCUVVrc1RVRkJUU3hSUVVGUkxFZEJRVWNzVlVGQlZTeEhRVUZITEZWQlFWVXNSVUZCUlR0QlFVTTVReXhSUVVGUkxFMUJRVTBzUjBGQlJ5eEhRVUZITEZGQlFWRXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRCUVVONlF5eFJRVUZSTEVsQlFVa3NXVUZCV1N4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJUdEJRVU51UXl4WlFVRlpMRTlCUVU4c1dVRkJXU3hEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTjZReXhUUVVGVE8wRkJRMVFzVVVGQlVTeE5RVUZOTEU5QlFVOHNSMEZCUnl4RFFVRkRMRmxCUVZrN1FVRkRja01zV1VGQldTeEpRVUZKTzBGQlEyaENMR2RDUVVGblFpeEpRVUZKTEV0QlFVc3NTVUZCU1N4TlFVRk5MRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVTdRVUZEYmtRc2IwSkJRVzlDTEZGQlFWRXNUVUZCVFN4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTzBGQlEyeEVMR2xDUVVGcFFqdEJRVU5xUWl4blFrRkJaMElzVFVGQlRTeFBRVUZQTEVkQlFVY3NSVUZCUlN4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFVkJRVVVzVlVGQlZTeERRVUZETEVOQlFVTTdRVUZETTBRc1owSkJRV2RDTEUxQlFVMHNUVUZCVFN4SFFVRkhMRTFCUVUwc1QwRkJUeXhEUVVGRE8wRkJRemRETEdkQ1FVRm5RaXhKUVVGSk8wRkJRM0JDTEc5Q1FVRnZRaXhQUVVGUExFMUJRVTBzUTBGQlF6dEJRVU5zUXl4cFFrRkJhVUk3UVVGRGFrSXNkMEpCUVhkQ08wRkJRM2hDTEc5Q1FVRnZRaXhKUVVGSkxFdEJRVXNzUlVGQlJUdEJRVU12UWl4M1FrRkJkMElzVFVGQlRTeExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF6dEJRVU55UkN4eFFrRkJjVUk3UVVGRGNrSXNhVUpCUVdsQ08wRkJRMnBDTEdGQlFXRTdRVUZEWWl4dlFrRkJiMEk3UVVGRGNFSXNaMEpCUVdkQ0xGbEJRVmtzUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRla01zWVVGQllUdEJRVU5pTEZOQlFWTXNSMEZCUnl4RFFVRkRPMEZCUTJJc1VVRkJVU3haUVVGWkxFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJRenRCUVVOMlF5eFJRVUZSTEU5QlFVOHNUMEZCVHl4RFFVRkRPMEZCUTNaQ0xFdEJRVXNzUTBGQlF6dEJRVU5PTEVsQlFVazJUU3hoUVVGUExFTkJRVU1zVVVGQlVTeEZRVUZGTEVWQlFVVXNSVUZCUlR0QlFVTXhRaXhSUVVGUkxIRkNRVUZ4UWl4RlFVRkZMRWxCUVVrN1FVRkRia01zUzBGQlN5eERRVUZETEVOQlFVTTdRVUZEVUN4SlFVRkpMRlZCUVZVc1EwRkJReXhIUVVGSExFTkJRVU1zVVVGQlVTeEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMEZCUTNCRExFbEJRVWtzVDBGQlR5eFJRVUZSTEVOQlFVTTdRVUZEY0VJN08wRkRMMFJCT3pzN096czdPMEZCVDBjN1FVRlBZU3hUUVVGQkxGVkJRVlVzUTBGQlF5eExRVUZoTEVWQlFVVXNVVUZCZDBJc1JVRkJRVHRKUVVOb1JTeE5RVUZOTEVsQlFVa3NSMEZCUnl4UlFVRlJMRU5CUVVNc1RVRkJUU3hEUVVGRExHVkJRV1VzUlVGQlJTeEhRVUZITEVWQlFVVXNTVUZCU1N4RFFVRkRPMGxCUlhoRUxFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVTdPMEZCUlZRc1VVRkJRU3hOUVVGTkxFbEJRVWtzUzBGQlN5eERRVUZETERKQ1FVRXlRaXhEUVVGRExFTkJRVU03UVVGRE9VTXNTMEZCUVR0QlFVVkVMRWxCUVVFc1RVRkJUU3hIUVVGSExFZEJRVWNzU1VGQlNTeEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkRNVUlzU1VGQlFTeEhRVUZITEVOQlFVTXNVVUZCVVN4SFFVRkhMRU5CUVVFc1ZVRkJRU3hEUVVGWkxFTkJRVU03U1VGRk5VSXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhSUVVGUkxFVkJRVVVzUlVGQlJTeExRVUZMTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWRCUVVjc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVOb1JTeERRVUZETzBGQlJVMHNaVUZCWlN4dlFrRkJiMElzUTBGRGVFTXNVVUZCWXl4RlFVTmtMRkZCUVhkQ0xFVkJRVUU3U1VGRmVFSXNUVUZCVFN4aFFVRmhMRWRCUVVjc1VVRkJVU3hEUVVGRExFMUJRVTBzUTBGQlF5eGxRVUZsTEVWQlFVVXNTVUZCU1N4RFFVRkRPMEZCUXpWRUxFbEJRVUVzVFVGQlRTeEZRVUZGTEZOQlFWTXNSVUZCUlN4SFFVRkhMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU03UVVGRmNFTXNTVUZCUVN4SlFVRkpMRU5CUVVNc1lVRkJZU3hGUVVGRkxFbEJRVWtzU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4TlFVRk5MRWxCUVVrc1EwRkJReXhUUVVGVExFVkJRVVU3UVVGREwwUXNVVUZCUVN4TlFVRk5MRWxCUVVrc2EwSkJRV3RDTEVOQlFVTXNRMEZCUVN4blFrRkJRU3hEUVVGclFpeERRVUZETEVOQlFVTTdRVUZEYkVRc1MwRkJRVHRCUVVWRUxFbEJRVUVzVFVGQlRTeEZRVUZGTEVsQlFVa3NSVUZCUlN4TlFVRk5MRVZCUVVVc1IwRkJSeXhoUVVGaExFTkJRVU03UVVGRGRrTXNTVUZCUVN4TlFVRk5MRWRCUVVjc1IwRkJSeXhEUVVGSExFVkJRVUVzU1VGQlNTeGxRVUZsTEVOQlFVTTdRVUZEYmtNc1NVRkJRU3hOUVVGTkxFZEJRVWNzUjBGQlJ5eE5RVUZOTEV0QlFVc3NRMEZCUXl4SFFVRkhMRVZCUVVVN1FVRkRNMElzVVVGQlFTeE5RVUZOTEVWQlFVVXNUVUZCVFR0UlFVTmtMRTlCUVU4c1JVRkJSU3hKUVVGSkxFOUJRVThzUTBGQlF6dEJRVU51UWl4WlFVRkJMRmRCUVZjc1JVRkJSU3hOUVVGTk8xbEJRMjVDTEdGQlFXRXNSVUZCUlN4RFFVRlZMRTlCUVVFc1JVRkJRU3hUUVVGVExFTkJRVVVzUTBGQlFUdFRRVU55UXl4RFFVRkRPMEZCUTBZc1VVRkJRU3hKUVVGSkxFVkJRVVVzVVVGQlVUdEJRVU5tTEV0QlFVRXNRMEZCUXl4RFFVRkRPMEZCUlVnc1NVRkJRU3hKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNSVUZCUlR0QlFVTllMRkZCUVVFc1RVRkJUU3hKUVVGSkxHRkJRV0VzUTBGQlF5eEhRVUZITEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRia01zUzBGQlFUdEJRVU5JT3p0QlEzSkVRVHM3T3pzN096dEJRVTlITzBGQlRVZ3NUVUZCVFRWRUxFdEJRVWNzUjBGQlJ5eExRVUZMTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUTBGQlF6dEJRVmR5UXl4VFFVRlRMRk5CUVZNc1EwRkRhRUlzUzBGQllTeEZRVU5pTEUxQlFXTXNSVUZEWkN4blFrRkJiVU1zU1VGQlNTeEZRVUZCTzBGQlJYWkRMRWxCUVVFc1NVRkJTU3hoUVVGaExFVkJRVVU3UVVGRGFrSXNVVUZCUVN4aFFVRmhMRU5CUVVNc1MwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlF6dEJRVU0xUWl4UlFVRkJMR0ZCUVdFc1EwRkJReXhOUVVGTkxFZEJRVWNzVFVGQlRTeERRVUZETzBGQlF6bENMRkZCUVVFc1QwRkJUeXhoUVVGaExFTkJRVU03UVVGRGRFSXNTMEZCUVR0QlFVVkVMRWxCUVVFc1QwRkJUeXhKUVVGSkxHVkJRV1VzUTBGQlF5eExRVUZMTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN1FVRkROVU1zUTBGQlF6dFRRVVZsTEcxQ1FVRnRRaXhEUVVOcVF5eFJRVUZuUWl4RlFVTm9RaXhUUVVGcFFpeEZRVU5xUWl4UFFVRjVRaXhGUVVGQk8wRkJSWHBDTEVsQlFVRXNUVUZCVFN4RlFVRkZMRTlCUVU4c1JVRkJSU3hIUVVGSExFOUJRVThzUTBGQlF6dEJRVU0xUWl4SlFVRkJMRWxCUVVrc1VVRkJVU3hIUVVGSExFOUJRVThzU1VGQlNTeFRRVUZUTEVkQlFVY3NUMEZCVHl4RlFVRkZPMEZCUXpkRExGRkJRVUVzVFVGQlRTeExRVUZMTEVkQlExUXNVVUZCVVN4SlFVRkpMRk5CUVZNc1IwRkJSeXhQUVVGUExFZEJRVWNzVVVGQlVTeEhRVUZITEU5QlFVOHNSMEZCUnl4VFFVRlRMRU5CUVVNN1VVRkRia1VzVDBGQlR6dFpRVU5NTEV0QlFVc3NSVUZCUlN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGRkJRVkVzUjBGQlJ5eExRVUZMTEVOQlFVTTdXVUZEYmtNc1RVRkJUU3hGUVVGRkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNVMEZCVXl4SFFVRkhMRXRCUVVzc1EwRkJRenRUUVVOMFF5eERRVUZETzBGQlEwZ3NTMEZCUVR0SlFVTkVMRTlCUVU4N1FVRkRUQ3hSUVVGQkxFdEJRVXNzUlVGQlJTeFJRVUZSTzBGQlEyWXNVVUZCUVN4TlFVRk5MRVZCUVVVc1UwRkJVenRMUVVOc1FpeERRVUZETzBGQlEwb3NRMEZCUXp0QlFVVkxMRk5CUVZVc1VVRkJVU3hEUVVGRExFdEJRV2RDTEVWQlFVRTdTVUZEZGtNc1NVRkJTU3hWUVVGVkxFZEJRVWNzUzBGQlN5eERRVUZETzBGQlEzWkNMRWxCUVVFc1MwRkJTeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVN1VVRkROME1zU1VGQlNTeExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFZEJRVWNzUlVGQlJUdFpRVU4yUWl4VlFVRlZMRWRCUVVjc1NVRkJTU3hEUVVGRE8xbEJRMnhDTEUxQlFVMDdRVUZEVUN4VFFVRkJPMEZCUTBZc1MwRkJRVHRCUVVORUxFbEJRVUZCTEV0QlFVY3NRMEZCUXl4alFVRmpMRVZCUVVVc1ZVRkJWU3hEUVVGRExFTkJRVU03UVVGRGFFTXNTVUZCUVN4UFFVRlBMRlZCUVZVc1EwRkJRenRCUVVOd1FpeERRVUZETzBGQlJVUTdRVUZEVHl4bFFVRmxMRmRCUVZjc1EwRkRMMElzU1VGQlZTeEZRVU5XTEU5QlFYbENMRVZCUTNwQ0xHRkJRVUVzUjBGQmJVTXNTVUZCU1N4RlFVRkJPMGxCUlhaRExFbEJRVWtzUzBGQlN5eEhRVUUwUWl4VFFVRlRMRU5CUVVNN1NVRkRMME1zU1VGQlNUdEJRVU5HTEZGQlFVRXNTMEZCU3l4SFFVRkhMRTFCUVUwc2FVSkJRV2xDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkRkRU1zVVVGQlFTeE5RVUZOTEVWQlFVVXNUMEZCVHl4RlFVRkZMRWRCUVVjc1QwRkJUeXhEUVVGRE8wRkJRelZDTEZGQlFVRXNUVUZCVFN4RlFVRkZMRXRCUVVzc1JVRkJSU3hOUVVGTkxFVkJRVVVzUjBGQlJ5eHRRa0ZCYlVJc1EwRkRNME1zUzBGQlN5eERRVUZETEV0QlFVc3NSVUZEV0N4TFFVRkxMRU5CUVVNc1RVRkJUU3hGUVVOYUxFOUJRVThzUTBGRFVpeERRVUZET3pzN1VVRkhSaXhOUVVGTkxFMUJRVTBzUjBGQlJ5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RlFVRkZMRTFCUVUwc1JVRkJSU3hoUVVGaExFTkJRVU1zUTBGQlF6dFJRVU4yUkN4TlFVRk5MRWRCUVVjc1IwRkJSeXhOUVVGTkxFTkJRVU1zVlVGQlZTeERRVUZETEVsQlFVa3NRMEZCTmtJc1EwRkJRenRCUVVOb1JTeFJRVUZCTEVkQlFVY3NRMEZCUXl4VFFVRlRMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNTMEZCU3l4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRE8wRkJRekZETEZGQlFVRXNUVUZCVFN4VFFVRlRMRWRCUVVjc1IwRkJSeXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRXRCUVVzc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF6dEJRVU40UkN4UlFVRkJMRTFCUVUwc1NVRkJTU3hIUVVGSExGRkJRVkVzUTBGQlF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4WFFVRlhMRWRCUVVjc1dVRkJXU3hEUVVGRE8wRkJSVGxFTEZGQlFVRXNTVUZCU1N4cFFrRkJhVUlzU1VGQlNTeFZRVUZWTEVsQlFVa3NUVUZCVFN4WlFVRlpMR1ZCUVdVc1JVRkJSVHRaUVVONFJVRXNTMEZCUnl4RFFVRkRMR2REUVVGblF5eERRVUZETEVOQlFVTTdPMWxCUlhSRExFOUJRVThzVFVGQlRTeERRVUZETEdGQlFXRXNRMEZCUXl4RlFVRkZMRWxCUVVrc1JVRkJSU3hQUVVGUExFVkJRVVVzUTBGQlF5eERRVUZETzBGQlEyaEVMRk5CUVVFN1lVRkJUU3hKUVVGSkxFMUJRVTBzV1VGQldTeHBRa0ZCYVVJc1JVRkJSVHRaUVVNNVEwRXNTMEZCUnl4RFFVRkRMSEZFUVVGeFJDeERRVUZETEVOQlFVTTdXVUZETTBRc1QwRkJUeXhOUVVGTkxFbEJRVWtzVDBGQlR5eERRVUZETEVOQlFVTXNUMEZCVHl4RlFVRkZMRTFCUVUwc1MwRkJTVHRCUVVNelF5eG5Ra0ZCUVN4UFFVRlBMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRMnhDTEVOQlFVTXNVVUZCVVN4TFFVRkpPMEZCUTFnc2IwSkJRVUVzU1VGQlNTeFJRVUZSTEVWQlFVVTdkMEpCUTFvc1QwRkJUeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzBGQlEyNUNMSEZDUVVGQk8wRkJRVTBzZVVKQlFVRTdkMEpCUTB3c1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBGQlEyUXNjVUpCUVVFN1FVRkRTQ3hwUWtGQlF5eEZRVU5FTEVsQlFVa3NSVUZEU2l4UFFVRlBMRU5CUTFJc1EwRkJRenRCUVVOS0xHRkJRVU1zUTBGQlF5eERRVUZETzBGQlEwb3NVMEZCUVR0QlFVRk5MR0ZCUVVFN1dVRkRUQ3hOUVVGTkxFbEJRVWtzWjBKQlFXZENMRU5CUVVNN1FVRkRla0lzWjBKQlFVRXNTMEZCU3l4RlFVRkZMRWxCUVVrc1MwRkJTeXhEUVVGRExESkNRVUV5UWl4RFFVRkRPMEZCUXpsRExHRkJRVUVzUTBGQlF5eERRVUZETzBGQlEwb3NVMEZCUVR0QlFVTkdMRXRCUVVFN1FVRkJReXhKUVVGQkxFOUJRVThzUjBGQldTeEZRVUZGTzFGQlEzSkNMRTFCUVUwc1NVRkJTU3huUWtGQlowSXNRMEZCUXl4RlFVRkZMRXRCUVVzc1JVRkJSU3hIUVVGSExFVkJRVVVzUTBGQlF5eERRVUZETzBGQlF6VkRMRXRCUVVFN1FVRkJVeXhaUVVGQk8xRkJRMUlzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4RFFVRkRPMEZCUTJoQ0xFdEJRVUU3UVVGRFNEczdRVU14U0VFN096czdPenM3UVVGUFJ6dEJRVTlJTEUxQlFVMHNaMEpCUVdkQ0xFZEJRVWM3U1VGRGRrSXNXVUZCV1R0SlFVTmFMRmRCUVZjN1NVRkRXQ3haUVVGWk8wbEJRMW9zWlVGQlpUdERRVU5vUWl4RFFVRkRPMEZCUlVZc1RVRkJUU3gzUWtGQmQwSXNSMEZCUnl4RFFVRkRMR1ZCUVdVc1EwRkJReXhEUVVGRE8wRkJSVFZETEdWQlFXVXNaVUZCWlN4RFFVTnVReXhKUVVGVkxFVkJRMVlzU1VGQmJVSXNSVUZEYmtJc1QwRkJlVUlzUlVGQlFUdEpRVVY2UWl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJUdEJRVU42UXl4UlFVRkJMRTFCUVUwc1NVRkJTU3d5UWtGQk1rSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRGJFUXNTMEZCUVR0SlFVVkVMRWxCUTBVc2FVSkJRV2xDTEVsQlFVa3NTVUZCU1R0UlFVTjZRaXhEUVVGRExIZENRVUYzUWl4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVWQlF6ZERPMUZCUTBFc1QwRkJUeXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEVsQlFVa3NSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJRenRCUVVONFF5eExRVUZCTzFOQlFVMHNTVUZEVEN4VlFVRlZMRWxCUVVrc1NVRkJTVHRSUVVOc1FpeERRVUZETEhkQ1FVRjNRaXhEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUXpkRE96dFJRVVZCTEUxQlFVMHNUVUZCVFN4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdVVUZEYUVRc1QwRkJUeXhYUVVGWExFTkJRVU1zU1VGQlNTeEZRVUZGTEU5QlFVOHNSVUZCUlN4TlFVRk5MRU5CUVVNc1EwRkJRenRCUVVNelF5eExRVUZCTzBGQlFVMHNVMEZCUVR0QlFVTk1MRkZCUVVFc1QwRkJUeXhKUVVGSkxFTkJRVU03UVVGRFlpeExRVUZCTzBGQlEwZzdPMEZETDBOQk96czdPenM3TzBGQlQwYzdRVUZ6UWtnc1RVRkJUVUVzUzBGQlJ5eEhRVUZITEV0QlFVc3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eERRVUZETzBGQk1FVTNRaXhOUVVGTkxHMUNRVUZ0UWl4SFFVRnhRanRCUVVOdVJDeEpRVUZCTEdsQ1FVRnBRaXhGUVVGRk8wRkJRMnBDTEZGQlFVRXNTVUZCU1N4RlFVRkZMQ3RDUVVFclFqdEJRVU55UXl4UlFVRkJMRTFCUVUwc1JVRkJSU3hsUVVGbE8wRkJRM2hDTEV0QlFVRTdRVUZEUkN4SlFVRkJMRmxCUVZrc1JVRkJSVHRCUVVOYUxGRkJRVUVzU1VGQlNTeEZRVUZGTEhOQ1FVRnpRanRCUVVNMVFpeFJRVUZCTEUxQlFVMHNSVUZCUlN4dlFrRkJiMEk3VVVGRE5VSXNhMEpCUVd0Q0xFVkJRVVVzU1VGQlNTeEhRVUZITEVsQlFVazdRVUZEYUVNc1MwRkJRVHRCUVVORUxFbEJRVUVzWlVGQlpTeEZRVUZGTzBGQlEyWXNVVUZCUVN4SlFVRkpMRVZCUVVVN1FVRkRTaXhaUVVGQkxFbEJRVWtzUlVGQlJTd3dRa0ZCTUVJN1FVRkRhRU1zV1VGQlFTeE5RVUZOTEVWQlFVVXNiMEpCUVc5Q08wRkJRemRDTEZOQlFVRTdRVUZEUkN4UlFVRkJMRWRCUVVjc1JVRkJSVHRCUVVOSUxGbEJRVUVzU1VGQlNTeEZRVUZGTEdsRFFVRnBRenRCUVVONFF5eFRRVUZCTzBGQlEwWXNTMEZCUVR0SlFVTkVMR0ZCUVdFc1JVRkJSU3hGUVVGRkxFZEJRVWNzU1VGQlNUdEJRVU40UWl4SlFVRkJMRk5CUVZNc1JVRkJSVHRCUVVOVUxGRkJRVUVzVDBGQlR5eEZRVUZGTEVsQlFVazdRVUZEWWl4UlFVRkJMRTlCUVU4c1JVRkJSU3hGUVVGRk8wRkJRMW9zUzBGQlFUdERRVU5HTEVOQlFVTTdRVUZGU3l4TlFVRk5MR2xDUVVGcFFpeEhRVUZsTzBGQlF6TkRMRWxCUVVFc1UwRkJVeXhGUVVGRkxFVkJRVVU3U1VGRFlpeG5Ra0ZCWjBJc1JVRkJSU3hEUVVGRExGVkJRVlVzUTBGQlF6dERRVU12UWl4RFFVRkRPMEZCUlVzc1pVRkJaU3huUWtGQlowSXNRMEZEY0VNc1dVRkJkMElzUlVGRGVFSXNWVUZCZVVVc1JVRkJRVHRCUVVWNlJTeEpRVUZCTEUxQlFVMHNZVUZCWVN4SFFVRkhMRmxCUVZrc1EwRkJReXhaUVVGWkxFTkJRVU03UVVGRmFFUXNTVUZCUVN4SlFVRkpMRU5CUVVNc1lVRkJZU3hGUVVGRkxFbEJRVWtzU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4TlFVRk5MRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zVTBGQlV5eEZRVUZGTzBGQlF6RkZMRkZCUVVFc1RVRkJUU3hKUVVGSkxHdENRVUZyUWl4RFFVRkRMRU5CUVVFc1lVRkJRU3hEUVVGbExFTkJRVU1zUTBGQlF6dEJRVU12UXl4TFFVRkJPMEZCUlVRc1NVRkJRU3hOUVVGTkxFVkJRVVVzU1VGQlNTeEZRVUZGTEUxQlFVMHNSVUZCUlN4SFFVRkhMR0ZCUVdFc1EwRkJRenRCUVVOMlF5eEpRVUZCTEUxQlFVMHNSMEZCUnl4SFFVRkhMRU5CUVVjc1JVRkJRU3hKUVVGSkxIZENRVUYzUWl4RFFVRkRPMEZCUXpWRExFbEJRVUVzVFVGQlRTeEhRVUZITEVkQlFVY3NUVUZCVFN4TFFVRkxMRU5CUVVNc1IwRkJSeXhGUVVGRk8xRkJRek5DTEU5QlFVOHNSVUZCUlN4SlFVRkpMRTlCUVU4c1EwRkJRenRCUVVOdVFpeFpRVUZCTEZkQlFWY3NSVUZCUlN4TlFVRk5PMEZCUTI1Q0xGbEJRVUVzWVVGQllTeEZRVUZGTEVOQlFVRXNUMEZCUVN4RlFVRlZMRlZCUVZVc1EwRkJReXhUUVVGVExFTkJRVVVzUTBGQlFUdFRRVU5vUkN4RFFVRkRPMEZCUTBnc1MwRkJRU3hEUVVGRExFTkJRVU03UVVGRlNDeEpRVUZCTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hGUVVGRk8wRkJRMWdzVVVGQlFTeE5RVUZOTEVsQlFVa3NZVUZCWVN4RFFVRkRMRWRCUVVjc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU51UXl4TFFVRkJPMEZCUlVRc1NVRkJRU3hOUVVGTkxFbEJRVWtzUjBGQlJ5eE5RVUZOTEVkQlFVY3NRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJRenRKUVVVNVFpeFBRVUZQTEVsQlFVa3NRMEZCUXl4UlFVRnJRaXhEUVVGRE8wRkJRMnBETEVOQlFVTTdRVUZGU3l4VFFVRlZMR2RDUVVGblFpeERRVUZETEZsQlFYZENMRVZCUVVFN1FVRkRka1FzU1VGQlFTeE5RVUZOTEU5QlFVOHNSMEZEV0N4WlFVRlpMRU5CUVVNc1dVRkJXU3hGUVVGRkxHdENRVUZyUWp0QlFVTTNReXhSUVVGQkxHMUNRVUZ0UWl4RFFVRkRMRmxCUVdFc1EwRkJReXhyUWtGQmEwSXNRMEZCUXp0SlFVTjJSQ3hKUVVGSkxFOUJRVThzUzBGQlN5eFJRVUZSTEVWQlFVVTdRVUZEZUVJc1VVRkJRU3hQUVVGUExGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhEUVVGRE8wRkJRMjVETEV0QlFVRTdVMEZCVFN4SlFVRkpMRU5CUVVNc1QwRkJUeXhGUVVGRk8wRkJRMjVDTEZGQlFVRXNUMEZCVHl4blFrRkJaMElzUTBGQlF6dEJRVU42UWl4TFFVRkJPMEZCUVUwc1UwRkJRVHRCUVVOTUxGRkJRVUVzVFVGQlRTeExRVUZMTEVkQlFVY3NTVUZCU1RaRUxFbEJRVk1zUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0UlFVTnlReXhQUVVGUExGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSU3hGUVVGRkxFdEJRVXNzUlVGQlJTeERRVUZETEVOQlFVTTdRVUZET1VNc1MwRkJRVHRCUVVOSUxFTkJRVU03UVVGRlpTeFRRVUZCTEZWQlFWVXNRMEZEZUVJc1ZVRkJjMElzUlVGRGRFSXNXVUZCT0VJN1FVRkRPVUk3UVVGRFFTeFRRVUZyUWl4RlFVRkJPMGxCUld4Q0xFMUJRVTBzV1VGQldTeEhRVUZsTlVRc1QwRkJTeXhEUVVGRExFVkJRVVVzUlVGQlJTeHRRa0ZCYlVJc1JVRkJSU3hWUVVGVkxFTkJRVU1zUTBGQlF6dEJRVU0xUlN4SlFVRkJMRTFCUVUwc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVkQlFVY3NXVUZCV1N4RFFVRkRPMEZCUTNCRExFbEJRVUVzVFVGQlRTeGpRVUZqTEVkQlFVY3NaMEpCUVdkQ0xFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTTdPMEZCUjNSRUxFbEJRVUVzU1VGQlNTeFRRVUZUTEVWQlFVVTdRVUZEWWl4UlFVRkJMR05CUVdNc1EwRkJReXhaUVVGWkxFVkJRVVVzUlVGQlJTeFRRVUZUTEVWQlFVVXNRMEZCUXl4RFFVRkRPMEZCUXpkRExFdEJRVUU3UVVGRlJDeEpRVUZCTEUxQlFVMHNUVUZCVFN4SFFVRkhMRTlCUTJJc1MwRkJWeXhGUVVOWUxGRkJRWGxDTEVWQlEzcENMRlZCUVhOQ0xFVkJRM1JDTEU5QlFYRkNMRXRCUTI1Q08xRkJRMFlzU1VGQlNUdFpRVU5HTEUxQlFVMHNSVUZEU2l4blFrRkJaMElzUlVGRGFFSXNZVUZCWVN4RlFVTmlMRlZCUVZVc1JVRkRWaXhSUVVGUkxFVkJRMUlzWjBKQlFXZENMRVZCUTJoQ0xHRkJRV0VzUjBGRFpDeEhRVUZIUVN4UFFVRkxMRU5CUVVNc1JVRkJSU3hGUVVGRkxHbENRVUZwUWl4RlFVRkZMRlZCUVZVc1EwRkJReXhEUVVGRE8xbEJRemRETEU5QlFVOHNWVUZCVlN4RFFVRkRMR0ZCUVdFc1EwRkJRenRaUVVOb1F5eFBRVUZQTEZWQlFWVXNRMEZCUXl4VlFVRlZMRU5CUVVNN1dVRkROMElzVDBGQlR5eFZRVUZWTEVOQlFVTXNVVUZCVVN4RFFVRkRPMWxCUXpOQ0xFOUJRVThzVlVGQlZTeERRVUZETEdkQ1FVRm5RaXhEUVVGRE8xbEJRMjVETEU5QlFVOHNWVUZCVlN4RFFVRkRMR0ZCUVdFc1EwRkJRenM3T3pzN096czdXVUZUYUVNc1RVRkJUU3huUWtGQlowSXNSMEZCUnl4TlFVRkxPMEZCUXpWQ0xHZENRVUZCTEVsQlFVa3NUMEZCVHl4RlFVRkZMRTFCUVUwc1JVRkJSU3hQUVVGUExFVkJRVVU3YjBKQlF6VkNMRTFCUVUwc1NVRkJTU3h4UWtGQmNVSXNSVUZCUlN4RFFVRkRPMEZCUTI1RExHbENRVUZCTzBGQlEwZ3NZVUZCUXl4RFFVRkRPMEZCUlVZc1dVRkJRU3hOUVVGTkxHTkJRV01zUjBGQlJ5eERRVUZETEZGQlFXdENMRXRCUVVrN1FVRkROVU1zWjBKQlFVRXNaMEpCUVdkQ0xFVkJRVVVzUTBGQlF6dEJRVU51UWl4blFrRkJRU3hWUVVGVkxFZEJRVWNzVVVGQlVTeERRVUZETEVOQlFVTTdRVUZEZWtJc1lVRkJReXhEUVVGRE8wRkJSVVlzV1VGQlFTeE5RVUZOTEZsQlFWa3NSMEZCUnl4RFFVRkRMRTFCUVd0Q0xFdEJRVWs3UVVGRE1VTXNaMEpCUVVFc1owSkJRV2RDTEVWQlFVVXNRMEZCUXp0QlFVTnVRaXhuUWtGQlFTeFJRVUZSTEVkQlFVY3NUVUZCVFN4RFFVRkRMRU5CUVVNN1FVRkRja0lzWVVGQlF5eERRVUZETzBGQlJVWXNXVUZCUVN4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNVVUZCVVN4RFFVRkRMRlZCUVZVc1EwRkJReXhGUVVGRk8yZENRVU14UXl4TlFVRk5MRWxCUVVrc01FSkJRVEJDTEVWQlFVVXNRMEZCUXp0QlFVTjRReXhoUVVGQk8wRkJSVVFzV1VGQlFTeE5RVUZOTEV0QlFVc3NSMEZCUnl4WFFVRlhMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU03V1VGRGFFTXNUVUZCVFN4VlFVRlZMRWRCUVVjc1RVRkJUU3hYUVVGWExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVkQlFVY3NTMEZCU3l4RFFVRkRPMEZCUTI1RUxGbEJRVUVzWTBGQll5eERRVUZETzBGQlEySXNaMEpCUVVFc1MwRkJTeXhGUVVGRkxFTkJRVU03UVVGRFVpeG5Ra0ZCUVN4TFFVRkxMRVZCUVVVc1lVRkJZVHRuUWtGRGNFSXNUMEZCVHl4RlFVRkZMRlZCUVZVc1JVRkJSVHRCUVVOMFFpeGhRVUZCTEVOQlFVTXNRMEZCUXp0WlFVVklMRTFCUVUwc1YwRkJWeXhIUVVGSExFMUJRVTBzWTBGQll5eERRVUZETEZsQlFWa3NSVUZCUlN4VlFVRlZMRU5CUVVNc1EwRkJRenRCUVVOdVJTeFpRVUZCTEUxQlFVMHNVVUZCVVN4SFFVRnRRanRCUVVNdlFpeG5Ra0ZCUVN4TlFVRk5MRVZCUVVVc1dVRkJXVHRCUVVOd1FpeG5Ra0ZCUVN4SlFVRkpMRVZCUVVVc1ZVRkJWVHRuUWtGRGFFSXNWMEZCVnp0aFFVTmFMRU5CUVVNN1FVRkRSaXhaUVVGQkxFMUJRVTBzWjBKQlFXZENMRWRCUTNCQ0xFOUJRVThzVlVGQlZTeEZRVUZGTEZOQlFWTXNTMEZCU3l4WFFVRlhPMnRDUVVONFF5eFZRVUZWTEVOQlFVTXNVMEZCVXp0QlFVTjBRaXhyUWtGQlJTeFJRVUZSTEVOQlFVTXNUVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJRenRCUVVWb1F5eFpRVUZCTEdOQlFXTXNRMEZCUXp0QlFVTmlMR2RDUVVGQkxFdEJRVXNzUlVGQlJTeEZRVUZGTzBGQlExUXNaMEpCUVVFc1MwRkJTeXhGUVVGRkxHdENRVUZyUWp0blFrRkRla0lzVDBGQlR5eEZRVUZGTEZWQlFWVXNSVUZCUlR0QlFVTjBRaXhoUVVGQkxFTkJRVU1zUTBGQlF6czdPMWxCU1Vnc1RVRkJUU3hUUVVGVExFZEJRVWNzWjBKQlFXZENPMnRDUVVNNVFpeE5RVUZOTEdWQlFXVXNRMEZCUXl4TFFVRkxMRVZCUVVVc1NVRkJTU3hGUVVGRkxHZENRVUZuUWl4RFFVRkRPMnRDUVVOd1JDeEpRVUZKTEVOQlFVTTdRVUZGVkN4WlFVRkJMR05CUVdNc1EwRkJRenRCUVVOaUxHZENRVUZCTEV0QlFVc3NSVUZCUlN4RlFVRkZPMEZCUTFRc1owSkJRVUVzUzBGQlN5eEZRVUZGTEcxQ1FVRnRRanRuUWtGRE1VSXNUMEZCVHl4RlFVRkZMRlZCUVZVc1JVRkJSVHRCUVVOMFFpeGhRVUZCTEVOQlFVTXNRMEZCUXp0QlFVVklMRmxCUVVFc1VVRkJVU3hEUVVGRExGZEJRVmNzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEVkQlFVY3NUMEZCVHl4SFFVRkhMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJSVEZGTEZsQlFVRXNTVUZCU1N4blFrRkJaMElzUTBGQlF5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkRMRVZCUVVVN1FVRkRkRU1zWjBKQlFVRXNVVUZCVVN4RFFVRkRMR2xDUVVGcFFpeEhRVUZITEZWQlFWVXNRMEZEY2tNc1VVRkJVU3hEUVVGRExGVkJRVlVzUTBGQlF5eExRVUZOTEVWQlF6RkNMRkZCUVZFc1EwRkRWQ3hEUVVGRE8wRkJRMGdzWVVGQlFUdFpRVVZFUkN4TFFVRkhMRU5CUVVNc2NVTkJRWEZETEVWQlFVVTdaMEpCUTNwRExFdEJRVXM3WjBKQlEwd3NVVUZCVVR0blFrRkRVaXhUUVVGVE8yZENRVU5VTEZGQlFWRTdRVUZEVkN4aFFVRkJMRU5CUVVNc1EwRkJRenM3V1VGSFNDeE5RVUZOTEUxQlFVMHNSMEZCUnl4TlFVRk5MRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRM0JETEVsQlFVa3NSVUZEU2l4TFFVRkxMRVZCUTB3c1VVRkJVU3hEUVVGRExGVkJRVlVzUlVGRGJrSXNVVUZCVVN4RFFVRkRMRmRCUVZjc1JVRkRjRUlzVTBGQlV5eEZRVU5VTEZGQlFWRXNRMEZEVkN4RFFVRkRPMEZCUlVZc1dVRkJRU3hqUVVGakxFTkJRVU03UVVGRFlpeG5Ra0ZCUVN4TFFVRkxMRVZCUVVVc1JVRkJSVHRCUVVOVUxHZENRVUZCTEV0QlFVc3NSVUZCUlN4blFrRkJaMEk3WjBKQlEzWkNMRTlCUVU4c1JVRkJSU3hWUVVGVkxFVkJRVVU3UVVGRGRFSXNZVUZCUVN4RFFVRkRMRU5CUVVNN1dVRkZTQ3haUVVGWkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdXVUZGY2tJc1NVRkJTU3huUWtGQlowSXNRMEZCUXl4UlFVRlJMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzWVVGQllTeExRVUZMTEV0QlFVc3NSVUZCUlRzN1owSkJSV3BGTEZWQlFWVXNRMEZCUXl4TlFVRkxPMEZCUTJRc2IwSkJRVUVzYjBKQlFXOUNMRU5CUVVNc1RVRkJUU3hEUVVGRExHTkJRV01zUlVGQlJTeFJRVUZSTEVOQlFVTTdlVUpCUTJ4RUxFbEJRVWtzUTBGQlF5eE5RVUZMTzBGQlExUXNkMEpCUVVFc1kwRkJZeXhEUVVGRE8wRkJRMklzTkVKQlFVRXNTMEZCU3l4RlFVRkZMRWRCUVVjN1FVRkRWaXcwUWtGQlFTeExRVUZMTEVWQlFVVXNWVUZCVlRzMFFrRkRha0lzVDBGQlR5eEZRVUZGTEZWQlFWVXNSVUZCUlR0QlFVTjBRaXg1UWtGQlFTeERRVUZETEVOQlFVTTdkMEpCUTBnc1owSkJRV2RDTEVsQlFVa3NRMEZCUXp0QlFVTjJRaXh4UWtGQlF5eERRVUZETzBGQlEwUXNlVUpCUVVFc1MwRkJTeXhEUVVGRExFTkJRVU1zUjBGQlJ5eExRVUZKTzBGQlEySXNkMEpCUVVFc1NVRkJTU3hoUVVGaExFVkJRVVU3UVVGRGFrSXNORUpCUVVFc1lVRkJZU3hIUVVGSExFZEJRVWNzUTBGQlF5eERRVUZETzBGQlEzUkNMSGxDUVVGQk8wRkJRVTBzTmtKQlFVRTdRVUZEVEN3MFFrRkJRU3hOUVVGTkxFZEJRVWNzUTBGQlF6dEJRVU5ZTEhsQ1FVRkJPMEZCUTBnc2NVSkJRVU1zUTBGQlF5eERRVUZETzBGQlExQXNhVUpCUVVNc1EwRkJReXhEUVVGRE8wRkJRMGdzWjBKQlFVRXNUMEZCVHl4TlFVRk5MRU5CUVVNN1FVRkRaaXhoUVVGQk8wRkJRVTBzYVVKQlFVRXNTVUZCU1N4blFrRkJaMElzUTBGQlF5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkRMRVZCUVVVN1owSkJRemRETEVsQlFVazdiMEpCUTBZc1RVRkJUU3h2UWtGQmIwSXNRMEZCUXl4TlFVRk5MRU5CUVVNc1kwRkJZeXhGUVVGRkxGRkJRVkVzUTBGQlF5eERRVUZETzI5Q1FVTTFSQ3huUWtGQlowSXNTVUZCU1N4RFFVRkRPMEZCUTNSQ0xHbENRVUZCTzBGQlFVTXNaMEpCUVVFc1QwRkJUeXhIUVVGSExFVkJRVVU3UVVGRFdpeHZRa0ZCUVN4aFFVRmhMRWRCUVVjc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRGNrSXNiMEpCUVVFc1RVRkJUU3hIUVVGSExFTkJRVU03UVVGRFdDeHBRa0ZCUVR0QlFVTkdMR0ZCUVVFN1FVRkZSQ3haUVVGQkxHTkJRV01zUTBGQlF6dEJRVU5pTEdkQ1FVRkJMRXRCUVVzc1JVRkJSU3hIUVVGSE8wRkJRMVlzWjBKQlFVRXNTMEZCU3l4RlFVRkZMRlZCUVZVN1owSkJRMnBDTEU5QlFVOHNSVUZCUlN4VlFVRlZMRVZCUVVVN1FVRkRkRUlzWVVGQlFTeERRVUZETEVOQlFVTTdRVUZGU0N4WlFVRkJMRTlCUVU4c1RVRkJUU3hEUVVGRE8wRkJRMllzVTBGQlFUdEJRVUZETEZGQlFVRXNUMEZCVHl4SFFVRlpMRVZCUVVVN1dVRkRja0lzVFVGQlRTeEpRVUZKTEdkQ1FVRm5RaXhEUVVGRExFVkJRVVVzUzBGQlN5eEZRVUZGTEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkROVU1zVTBGQlFUdEJRVU5JTEV0QlFVTXNRMEZCUXp0SlFVVkdMRTlCUVU4c1QwRkRUQ3hMUVVGWExFVkJRMWdzVVVGQmVVSXNSVUZEZWtJc1ZVRkJjMElzUzBGRGNFSTdRVUZEUml4UlFVRkJMRTFCUVUwc1QwRkJUeXhIUVVGSExGbEJRVmtzUTBGQlF5eGhRVUZoTEVOQlFVTTdRVUZETTBNc1VVRkJRU3hOUVVGTkxHZENRVUZuUWl4SFFVTndRaXhoUVVGaExFbEJRVWtzU1VGQlNTeEpRVUZKTEU5QlFVOHNWMEZCVnl4RFFVRkRMRTlCUVU4c1MwRkJTeXhWUVVGVkxFTkJRVU03VVVGRmNrVXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeEZRVUZGTzBGQlEzSkNMRmxCUVVFc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eDNSRUZCZDBRc1EwRkJReXhEUVVGRE8wRkJRM2hGTEZOQlFVRTdPMEZCUjBRc1VVRkJRU3hOUVVGTkxFMUJRVTBzUjBGRFZpeFBRVUZQTEVsQlFVa3NaMEpCUVdkQ0xFZEJRVWNzVjBGQlZ5eERRVUZETEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhUUVVGVExFTkJRVU03UVVGRmVrVXNVVUZCUVN4UFFVRlBMRTFCUVUwc1EwRkJReXhMUVVGTExFVkJRVVVzVVVGQlVTeEZRVUZGTEZWQlFWVXNSVUZCUlN4RlFVRkZMRTFCUVUwc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGRGVrUXNTMEZCUXl4RFFVRkRPMEZCUTBvN08wRkRibFpuUWl4VFFVRkJMSFZDUVVGMVFpeERRVU55UXl4VlFVRnpRaXhGUVVOMFFpeFpRVUU0UWl4RlFVRkJPenRKUVVjNVFpeE5RVUZOTEZsQlFWa3NSMEZCWlVNc1QwRkJTeXhEUVVGRExFVkJRVVVzUlVGQlJTeHRRa0ZCYlVJc1JVRkJSU3hWUVVGVkxFTkJRVU1zUTBGQlF6dEJRVU0xUlN4SlFVRkJMRTFCUVUwc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVkQlFVY3NXVUZCV1N4RFFVRkRPMGxCUlhCRExFOUJRVTg3UVVGRFREczdPenM3UVVGTFJ6dEJRVU5JTEZGQlFVRXNUVUZCVFN4blFrRkJaMElzUTBGQlF5eEZRVU55UWl4TFFVRkxMRVZCUTB3c1MwRkJTeXhGUVVOTUxGTkJRVk1zUlVGRFZDeFZRVUZWTEVWQlExWXNNa0pCUVRKQ0xFZEJRVWNzU1VGQlNTeEhRVU5hTEVWQlFVRTdRVUZEZEVJc1dVRkJRU3hKUVVGSkxGVkJRWE5DTEVOQlFVTTdXVUZGTTBJc1NVRkJTU3hMUVVGTExGbEJRVmtzU1VGQlNTeEZRVUZGTzJkQ1FVTjZRaXhWUVVGVkxFZEJRVWNzVFVGQlRTeEpRVUZKTEVOQlFVTXNkMEpCUVhkQ0xFTkJRVU1zU1VGQlNTeEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMmRDUVVNNVJDeEpRVUZKTEVOQlFVTXNWVUZCVlN4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFbEJRVWtzU1VGQlNTeERRVUZETERKQ1FVRXlRaXhGUVVGRk8yOUNRVU51UlN4TlFVRk5MRWxCUVVrc01rSkJRVEpDTEVWQlFVVXNRMEZCUXp0QlFVTjZReXhwUWtGQlFUczdRVUZGUkN4blFrRkJRU3hWUVVGVkxFTkJRVU1zU1VGQlNTeEhRVUZITEZWQlFWVXNTVUZCU1N4VlFVRlZMRU5CUVVNc1NVRkJTU3hKUVVGSkxFMUJRVTBzUTBGQlF5eFZRVUZWTEVWQlFVVXNRMEZCUXp0QlFVTjRSU3hoUVVGQk8wRkJRVTBzYVVKQlFVRTdRVUZEVEN4blFrRkJRU3hOUVVGTkxFMUJRVTBzUjBGQlJ5eE5RVUZOTEV0QlFVc3NRMEZCUXl4WFFVRlhMRVZCUVVVc1EwRkJRenRCUVVONlF5eG5Ra0ZCUVN4VlFVRlZMRWRCUVVjc1RVRkJUU3hKUVVGSkxFTkJRVU1zSzBKQlFTdENMRU5CUTNKRUxFbEJRVWtzUlVGRFNpeE5RVUZOTEVWQlEwNHNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkRXQ3hEUVVGRE8yZENRVU5HTEVsQlFVa3NRMEZCUXl4VlFVRlZMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zU1VGQlNTeEpRVUZKTEVOQlFVTXNNa0pCUVRKQ0xFVkJRVVU3YjBKQlEyNUZMRTFCUVUwc1NVRkJTU3d5UWtGQk1rSXNSVUZCUlN4RFFVRkRPMEZCUTNwRExHbENRVUZCT3p0QlFVVkVMR2RDUVVGQkxGVkJRVlVzUTBGQlF5eEpRVUZKTzBGQlEySXNiMEpCUVVFc1ZVRkJWU3hKUVVGSkxGVkJRVlVzUTBGQlF5eEpRVUZKTEV0QlFVc3NUVUZCVFN4VlFVRlZMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU01UkN4aFFVRkJPenRaUVVkRUxFMUJRVTBzVTBGQlV5eEhRVUZITmtRc1YwRkJVeXhEUVVONlFpeFZRVUZWTEVOQlFVTXNVMEZCVXl4RFFVRkRMRk5CUVZNc1NVRkJTU3hGUVVGRkxFVkJRM0JETEVOQlFVTXNVVUZCVVN4TFFVRkxMRlZCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNUVUZCVFN4RFFVTXZReXhEUVVGRE8wRkJSVVlzV1VGQlFTeFZRVUZWTEVOQlFVTXNVMEZCVXl4SFFVRkhMRVZCUVcxQ0xFTkJRVU03UVVGRE0wTXNXVUZCUVN4VlFVRlZMRU5CUVVNc1MwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlF6czdRVUZIZWtJc1dVRkJRU3hKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEZOQlFWTXNSVUZCUlR0blFrRkRla0lzVFVGQlRTeFBRVUZQTEVkQlFVY3NTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdRVUZEYUVRc1owSkJRVUVzVFVGQlRTeGhRVUZoT3p0blFrRkZha0lzVTBGQlV6czdjVUpCUlZJc1dVRkJXU3hEUVVGRExGTkJRVk1zU1VGQlNTeFRRVUZUTEV0QlFVc3NTMEZCU3l4SlFVRkpMRTlCUVU4N01FSkJRM0pFTEUxQlFVMHNaVUZCWlN4RFFVRkRMRXRCUVVzc1JVRkJSU3hKUVVGSkxFVkJRVVVzV1VGQldTeERRVUZETEZOQlFWTXNRMEZCUXpzd1FrRkRNVVFzU1VGQlNTeERRVUZETEVOQlFVTTdRVUZEV2l4blFrRkJRU3hKUVVGSkxHRkJRV0VzUlVGQlJUdHZRa0ZEYWtJc1RVRkJUU3hYUVVGWExFZEJRVWNzVFVGQlRTeHZRa0ZCYjBJc1EwRkROVU1zWVVGQllTeEZRVU5pTEZWQlFWVXNRMEZCUXl4WFFVRlhMRU5CUTNaQ0xFTkJRVU03UVVGRFJpeHZRa0ZCUVN4VlFVRlZMRU5CUVVNc1UwRkJVeXhIUVVGSExGZEJRVmNzUTBGQlF6dHZRa0ZEYmtNc1UwRkJVeXhEUVVGRExGZEJRVmNzUTBGQlF5eFZRVUZWTEVOQlFVTXNSMEZCUnl4TlFVRk5MR0ZCUVdFc1EwRkJReXhYUVVGWExFVkJRVVVzUTBGQlF6dEJRVU4yUlN4cFFrRkJRVHRCUVVOR0xHRkJRVUU3V1VGRlJDeFBRVUZQTzJkQ1FVTk1MRlZCUVZVN1owSkJRMVlzVTBGQlV6dGhRVU5XTEVOQlFVTTdVMEZEU0R0TFFVTkdMRU5CUVVNN1FVRkRTanM3T3pzN1RVTjBSbUVzWlVGQlpTeERRVUZCTzBGQlV6RkNMRWxCUVVFc1YwRkJWeXhUUVVGVExFZEJRVUU3VVVGRGJFSXNUMEZCVHl4RFFVRkJMR05CUVVFc1JVRkJhVUlzVDBGQlR5eERRVUZCTEVOQlFVVXNRMEZCUXp0TFFVTnVRenRKUVVWRUxGZEJRVmtzUTBGQlFTeGpRVUZyUXl4RlFVRkZMRTFCUVhGQ0xFVkJRVUU3TzFGQlZuSkZMREpDUVVGblF5eERRVUZCTEVkQlFVRXNRMEZCUVN4SlFVRkJMRVZCUVVFc1MwRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFUdFJRVVZvUXl4MVFrRkJkVUlzUTBGQlFTeEhRVUZCTEVOQlFVRXNTVUZCUVN4RlFVRkJMRXRCUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUU3UVVGRmRrSXNVVUZCUVN3MFFrRkJRU3hEUVVGQkxFZEJRVUVzUTBGQlFTeEpRVUZCTEVWQlFXMUVMRVZCUVVVc1EwRkJReXhEUVVGQk96czdPenM3T3pzN096czdVVUZ6UW5CRUxFMUJRVTBzWTBGQll5eEhRVUZITEdOQlFXTXNRMEZCUXl4bFFVRmxMRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBGQlEyNUZMRkZCUVVFc1kwRkJZeXhEUVVGRExFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1VVRkRMME1zWTBGQll5eERRVUZETEdWQlFXVXNSMEZCUnl4alFVRmpMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBGQlJURkVMRkZCUVVFc2MwSkJRVUVzUTBGQlFTeEpRVUZKTEVWQlFVRXNkVUpCUVVFc1JVRkJWeXhOUVVGTkxFVkJRVUVzUjBGQlFTeERRVUZCTEVOQlFVTTdRVUZEZEVJc1VVRkJRU3h6UWtGQlFTeERRVUZCTEVsQlFVa3NSVUZCUVN3eVFrRkJRU3hGUVVGbExHTkJRV01zUlVGQlFTeEhRVUZCTEVOQlFVRXNRMEZCUXp0TFFVTnVRenRCUVVWTkxFbEJRVUVzVjBGQlZ5eERRVUZETEUxQlFYRkNMRVZCUVVFN1FVRkRkRU1zVVVGQlFTeE5RVUZOTEVkQlFVY3NSMEZCUnl4TlFVRk5MRU5CUVVNc1ZVRkJWU3hGUVVGRkxFTkJRVU03UVVGRmFFTXNVVUZCUVN4SlFVRkpMRTlCUVU4c1RVRkJUU3hMUVVGTExGRkJRVkVzUlVGQlJUdEJRVU01UWl4WlFVRkJMSE5DUVVGQkxFTkJRVUVzU1VGQlNTeEZRVUZCTERKQ1FVRkJMRVZCUVVFc1IwRkJRU3hEUVVGWkxFTkJRVU1zUzBGQlN5eEhRVUZITEVOQlFVRXNSVUZCUnl4TlFVRk5MRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVWtzUTBGQlFTeEZRVUZCTEVkQlFVY3NSVUZCUlN4RFFVRkRPMEZCUXpORUxGTkJRVUU3UVVGRlJDeFJRVUZCTEhOQ1FVRkJMRU5CUVVFc1NVRkJTU3hGUVVGWkxESkNRVUZCTEVWQlFVRXNSMEZCUVN4RFFVRkJMRU5CUVVNc1MwRkJTeXhIUVVGSExFZEJRVWNzUTBGQlF6dExRVU01UWp0SlFVVk5MRTFCUVUwc1lVRkJZU3hEUVVGRExFdEJRWGxDTEVWQlFVRTdRVUZEYkVRc1VVRkJRU3hOUVVGTkxFVkJRVVVzVlVGQlZTeEZRVUZGTEVkQlFVY3NTMEZCU3l4RFFVRkRPMEZCUlRkQ0xGRkJRVUVzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4SlFVRkpMRVZCUVVVN1FVRkRjRUlzV1VGQlFTeE5RVUZOTEVsQlFVa3NNRUpCUVRCQ0xFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdRVUZEYkVRc1UwRkJRVHRSUVVWRUxFbEJRVWtzUTBGQlF5eHpRa0ZCUVN4RFFVRkJMRWxCUVVrc1JVRkJZU3cwUWtGQlFTeEZRVUZCTEVkQlFVRXNRMEZCUVN4RFFVRkRMR05CUVdNc1EwRkJReXhWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVTdXVUZEZEVRc2MwSkJRVUVzUTBGQlFTeEpRVUZKTEc5RFFVRmhMRU5CUVVNc1ZVRkJWU3hEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEV0QlFVc3NRMEZCUXp0QlFVTTFReXhUUVVGQk8wdEJRMFk3UVVGRlJDeEpRVUZCTEVsQlFWY3NWVUZCVlN4SFFVRkJPMUZCUTI1Q0xFOUJRVThzYzBKQlFVRXNRMEZCUVN4SlFVRkpMRVZCUVVFc01rSkJRVUVzUlVGQlFTeEhRVUZCTEVOQlFWa3NRMEZCUXp0TFFVTjZRanRCUVVWRUxFbEJRVUVzU1VGQlZ5eFhRVUZYTEVkQlFVRTdVVUZEY0VJc1QwRkJUeXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEhWQ1FVRkJMRWxCUVVrc1JVRkJRU3cwUWtGQlFTeEZRVUZCTEVkQlFVRXNRMEZCWVN4RFFVRkRMRU5CUVVNN1MwRkRla003T3p0QlFXaEZUU3hsUVVGQkxFTkJRVUVzWTBGQll5eEhRVUZITEVOQlFVTXNhVUpCUVdsQ0xFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTTdRVUZ0UlhoRExGTkJRVUVzY1VKQlFYRkNMRU5CUTI1RExGVkJRWE5DTEVWQlEzUkNMRmxCUVRoQ0xFVkJRVUU3TzBsQlJ6bENMRTFCUVUwc1dVRkJXU3hIUVVGbE4wUXNUMEZCU3l4RFFVRkRMRVZCUVVVc1JVRkJSU3h0UWtGQmJVSXNSVUZCUlN4VlFVRlZMRU5CUVVNc1EwRkJRenRKUVVVMVJTeFBRVUZQTEVOQlFVTXNZMEZCYTBNc1MwRkJTVHRCUVVNMVF5eFJRVUZCTEU5QlFVOHNTVUZCU1N4bFFVRmxMRU5CUVVNc1kwRkJZeXhGUVVGRk8xbEJRM3BETEZsQlFWazdXVUZEV2l4WlFVRlpPMEZCUTJJc1UwRkJRU3hEUVVGRExFTkJRVU03UVVGRFRDeExRVUZETEVOQlFVTTdRVUZEU2pzN1FVTTNSMEU3T3pzN096czdRVUZQUnp0QlFUUkNTRHM3T3pzN08wRkJUVWM3UVVGRFNTeGxRVUZsTEZsQlFWa3NRMEZEYUVNc1ZVRkJjMElzUlVGRGRFSXNTMEZCY1VJc1JVRkRja0lzVVVGQmVVSXNSVUZCUVR0QlFVVjZRaXhKUVVGQkxFMUJRVTBzUlVGQlJTeEpRVUZKTEVWQlFVVXNVVUZCVVN4RlFVRkZMR0ZCUVdFc1JVRkJSU3hIUVVGSExFMUJRVTBzWjBKQlFXZENMRU5CUXpsRUxGVkJRVlVzUlVGRFZpeExRVUZMTEVWQlEwd3NVVUZCVVN4SlFVRkpMRVZCUVVVc1EwRkRaaXhEUVVGRE8wbEJSVVlzU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlR0UlFVTlVMRTlCUVU4N1FVRkRUQ3haUVVGQkxGTkJRVk1zUlVGQlJTeHpRa0ZCYzBJc1EwRkJReXhMUVVGbExFTkJRVU03UVVGRGJFUXNXVUZCUVN4UlFVRlJMRVZCUVVVc1JVRkJSU3hIUVVGSExHRkJRV0VzUlVGQlJTeEhRVUZITEZGQlFWRXNSVUZCUlR0QlFVTXpReXhaUVVGQkxFbEJRVWtzUlVGQlJTeEZRVUZGTzBGQlExSXNXVUZCUVN4SlFVRkpMRVZCUVVVc1NVRkJTVHRaUVVOV0xGZEJRVmNzUlVGQlJTeFpRVUZaTEVsQlFVa3NWMEZCVnl4RFFVRkRMRU5CUVVNc1EwRkJRenRUUVVNMVF5eERRVUZETzBGQlEwZ3NTMEZCUVR0SlFVVkVMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zWlVGQlpTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNN1FVRkRka01zVVVGQlFTeE5RVUZOTEVsQlFVa3NiMEpCUVc5Q0xFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMGxCUlRWRExFOUJRVTg3VVVGRFRDeFRRVUZUTEVWQlFVVXNkVUpCUVhWQ0xFTkJRVU1zU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNN1FVRkRia1FzVVVGQlFTeFJRVUZSTEVWQlFVVXNSVUZCUlN4SFFVRkhMR0ZCUVdFc1JVRkJSU3hIUVVGSExGRkJRVkVzUlVGQlJUdFJRVU16UXl4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRExFbEJRVWs3UVVGRFppeFJRVUZCTEVsQlFVa3NSVUZCUlN4SlFVRkpPMEZCUTFZc1VVRkJRU3hYUVVGWExFVkJRVVVzVFVGQlRTeEpRVUZKTEVOQlFVTXNWMEZCVnl4RlFVRkZPMHRCUTNSRExFTkJRVU03UVVGRFNpeERRVUZETzBGQlQwUXNaVUZCWlN4blFrRkJaMElzUTBGRE4wSXNWVUZCYzBJc1JVRkRkRUlzUzBGQmNVSXNSVUZEY2tJc1VVRkJkMElzUlVGQlFUdEpRVVY0UWl4SlFVRkpMRXRCUVVzc1dVRkJXU3hKUVVGSkxFVkJRVVU3TzBGQlJYcENMRkZCUVVFc1RVRkJUU3hoUVVGaExFZEJRVWM3UVVGRGNFSXNXVUZCUVN4SFFVRkhMRkZCUVZFN1FVRkRXQ3haUVVGQkxGRkJRVkVzUlVGQlJTeExRVUZMTEZsQlFWa3NTVUZCU1N4SFFVRkhMRXRCUVVzc1EwRkJReXhKUVVGSkxFZEJRVWNzVTBGQlV6dFRRVU42UkN4RFFVRkRPMUZCUlVZc1QwRkJUenRCUVVOTUxGbEJRVUVzU1VGQlNTeEZRVUZGTEV0QlFVczdRVUZEV0N4WlFVRkJMRkZCUVZFc1JVRkJSU3hoUVVGaE8xTkJRM2hDTEVOQlFVTTdRVUZEU0N4TFFVRkJPMEZCUVUwc1UwRkJRVHM3UVVGRlRDeFJRVUZCTEUxQlFVMHNSMEZCUnl4SFFVRkhMRTlCUVU4c1MwRkJTeXhMUVVGTExGRkJRVkVzUjBGQlJ5eExRVUZMTEVkQlFVY3NTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJRenRSUVVNeFJDeE5RVUZOTEVsQlFVa3NSMEZCUnl4TlFVRk5MRlZCUVZVc1EwRkJReXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdVVUZGTTBNc1NVRkJTU3hKUVVGSkxFZEJRVWNzUjBGQlJ5eERRVUZETzFGQlEyWXNTVUZCU1R0WlFVTkdMRTFCUVUwc1JVRkJSU3hSUVVGUkxFVkJRVVVzUjBGQlJ5eEpRVUZKTEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRaUVVOc1F5eEpRVUZKTEVkQlFVY3NVVUZCVVN4RFFVRkRPMEZCUTJwQ0xGTkJRVUU3VVVGQlF5eFBRVUZQTEVkQlFVY3NSVUZCUlN4SFFVRkZPMEZCUTJoQ0xGRkJRVUVzVFVGQlRTeFJRVUZSTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNTVUZCU1N4RlFVRkZMRU5CUVVNN1VVRkZOME1zVDBGQlR6dFpRVU5NTEVsQlFVazdRVUZEU2l4WlFVRkJMRkZCUVZFc1JVRkJSU3hGUVVGRkxFZEJRVWNzVVVGQlVTeEZRVUZGTEZGQlFWRXNSVUZCUlR0VFFVTndReXhEUVVGRE8wRkJRMGdzUzBGQlFUdEJRVU5JT3p0QlEycElRVHM3T3pzN096dEJRVTlITzBGQmFVSklMRTFCUVUxRUxFdEJRVWNzUjBGQlJ5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1FVRkRNVUlzVFVGQlRTeFBRVUZQTEVkQlFVY3NTMEZCU3l4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRE8wRkJhMHB1UXpzN096dEJRVWxITzBGQlEwa3NaVUZCWlN4VlFVRlZMRU5CUVVNc1RVRkJhMElzUlVGQlFUdEpRVU5xUkN4SlFVRkpMRlZCUVZVc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRmJrSXNTVUZCUVVFc1MwRkJSeXhEUVVGRExESkNRVUV5UWl4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRE8wRkJRM3BETEVsQlFVRXNiVUpCUVcxQ0xFVkJRVVVzUTBGQlF6dEJRVVYwUWl4SlFVRkJMRTFCUVUwc1NVRkJTU3hIUVVGSExFMUJRVTBzYVVKQlFXbENMRU5CUVVNN1VVRkRia01zVTBGQlV5eEZRVUZGTEUxQlFVMHNRMEZCUXl4VFFVRlRPMUZCUXpOQ0xHbENRVUZwUWl4RlFVRkZMRTFCUVUwc1EwRkJReXhwUWtGQmFVSTdRVUZETTBNc1VVRkJRU3hWUVVGVkxFVkJRVVVzVTBGQlV5eERRVUZETEcxQ1FVRnRRaXhKUVVGSkxFTkJRVU03UVVGREwwTXNTMEZCUVN4RFFVRkRMRU5CUVVNN1NVRkZTQ3hOUVVGTkxGVkJRVlVzUjBGQlJ5eEpRVUZKTEZWQlFWVXNRMEZCUXl4SlFVRkpMRVZCUVVVc1RVRkJUU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRU5CUVVNN1NVRkZiRVVzVFVGQlRTeEpRVUZKTEVkQlExSXNUVUZCVFN4RFFVRkRMRTlCUVU4c1dVRkJXU3hYUVVGWExFTkJRVU1zVFVGQlRUdFZRVU40UXl4TlFVRk5MRU5CUVVNc1QwRkJUenRWUVVOa0xFMUJRVTBzVTBGQlV5eERRVUZETEVsQlFVa3NSVUZCUlN4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03UVVGRk5VTXNTVUZCUVN4TlFVRk5MRWxCUVVrc1IwRkJhVUlzVDBGQlR5eExRVUZMTEV0QlFVazdRVUZEZWtNc1VVRkJRU3hOUVVGTkxFdEJRVXNzUjBGQlJ5eEZRVUZGTEZWQlFWVXNRMEZCUXp0QlFVVXpRaXhSUVVGQkxFOUJRVThzUTBGQlF5eDVRa0ZCZVVJc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTTdVVUZGYWtRc1RVRkJUU3hOUVVGTkxFZEJRVWNzVFVGQlRTeFpRVUZaTEVOQlFVTXNWVUZCVlN4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRE8wRkJSWEpFTEZGQlFVRXNUMEZCVHl4RFFVRkRMSFZDUVVGMVFpeEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRenRCUVVVdlF5eFJRVUZCTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hGUVVGRk8xbEJRMmhDTEU5QlFVODdRVUZEVEN4blFrRkJRU3hoUVVGaExFVkJRVVVzU1VGQlNUdG5Ra0ZEYmtJc1RVRkJUVHRoUVVOUUxFTkJRVU03UVVGRFNDeFRRVUZCTzBGQlJVUXNVVUZCUVN4TlFVRk5MRTFCUVUwc1IwRkJSeXhOUVVGTkxFMUJRVTBzUTBGQlF5eFhRVUZYTEVWQlFVVXNRMEZCUXp0UlFVVXhReXhKUVVGSk8wRkJRMFlzV1VGQlFTeE5RVUZOTEUxQlFVMHNSMEZCUnl4TlFVRk5MRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeEZRVUZGTEUxQlFVMHNSVUZCUlN4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRkwwUXNXVUZCUVN4UFFVRlBMRU5CUVVNc05rSkJRVFpDTEVWQlFVVXNTMEZCU3l4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRE8xbEJSWFJFTEU5QlFVODdRVUZEVEN4blFrRkJRU3hoUVVGaExFVkJRVVVzYlVKQlFXMUNMRU5CUVVNc1RVRkJUU3hEUVVGRE8yZENRVU14UXl4TlFVRk5PMkZCUTFBc1EwRkJRenRCUVVOSUxGTkJRVUU3UVVGQlF5eFJRVUZCTEU5QlFVOHNSMEZCVVN4RlFVRkZPMEZCUTJwQ0xGbEJRVUVzVFVGQlRTeGhRVUZoTEVkQlFVY3NUVUZCVFN4WlFVRlpMRU5CUTNSRExFMUJRVTBzUlVGRFRpeEhRVUZITEVWQlEwZ3NTVUZCU1N4RlFVTktMRWxCUVVrc1JVRkRTaXhOUVVGTkxFTkJRVU1zYjBKQlFXOUNMRU5CUXpWQ0xFTkJRVU03V1VGRlJpeFBRVUZQTzJkQ1FVTk1MR0ZCUVdFN1owSkJRMklzVFVGQlRUdGhRVU5RTEVOQlFVTTdRVUZEU0N4VFFVRkJPMEZCUTBnc1MwRkJReXhEUVVGRE8wbEJSVVlzVFVGQlRTeFBRVUZQTEVkQlFXOUNMRTlCUVU4c1RVRkJUU3hMUVVNMVF5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eExRVUZMTEV0QlFVc3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVVZzUkN4TlFVRk5MREpDUVVFeVFpeEhRVU12UWl4UFFVRlBMR05CUVdNc1JVRkJSU3hMUVVGTExFdEJRVWs3VVVGRE9VSXNUVUZCVFN4TlFVRk5MRWRCUVVjc1RVRkJUU3haUVVGWkxFTkJRVU1zVlVGQlZTeEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMEZCUTNKRUxGRkJRVUVzVFVGQlRTeE5RVUZOTEVkQlFVY3NUVUZCVFN4TlFVRk5MRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVU03VVVGRk1VTXNTVUZCU1R0QlFVTkdMRmxCUVVFc1RVRkJUU3hOUVVGTkxFZEJRVWNzVFVGQlRTeEpRVUZKTEVOQlFVTXNiVU5CUVcxRExFTkJRek5FTEVsQlFVa3NSVUZEU2l4alFVRmpMRVZCUTJRc1RVRkJUU3hGUVVOT0xFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlExb3NRMEZCUXp0WlFVVkdMRTlCUVU4N1FVRkRUQ3huUWtGQlFTeGhRVUZoTEVWQlFVVXNiVUpCUVcxQ0xFTkJRVU1zVFVGQlRTeERRVUZETzJkQ1FVTXhReXhOUVVGTk8yRkJRMUFzUTBGQlF6dEJRVU5JTEZOQlFVRTdRVUZCUXl4UlFVRkJMRTlCUVU4c1IwRkJVU3hGUVVGRk8wRkJRMnBDTEZsQlFVRXNUVUZCVFN4aFFVRmhMRWRCUVVjc1RVRkJUU3haUVVGWkxFTkJRM1JETEUxQlFVMHNSVUZEVGl4SFFVRkhMRVZCUTBnc1NVRkJTU3hGUVVOS0xFbEJRVWtzUlVGRFNpeE5RVUZOTEVOQlFVTXNiMEpCUVc5Q0xFTkJRelZDTEVOQlFVTTdXVUZGUml4UFFVRlBPMmRDUVVOTUxHRkJRV0U3WjBKQlEySXNUVUZCVFR0aFFVTlFMRU5CUVVNN1FVRkRTQ3hUUVVGQk8wRkJRMGdzUzBGQlF5eERRVUZETzBGQlJVb3NTVUZCUVN4TlFVRk5MRWxCUVVrc1IwRkJhVUlzVDBGQlR5eExRVUZMTEV0QlFVazdVVUZEZWtNc1RVRkJUU3hOUVVGTkxFZEJRVWNzVFVGQlRTeFpRVUZaTEVOQlFVTXNWVUZCVlN4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRE8wRkJRM0pFTEZGQlFVRXNUVUZCVFN4TlFVRk5MRWRCUVVjc1RVRkJUU3hOUVVGTkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEVOQlFVTTdVVUZGTVVNc1NVRkJTVHRCUVVOR0xGbEJRVUVzVDBGQlR5eE5RVUZOTEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03UVVGRGNrTXNVMEZCUVR0QlFVRkRMRkZCUVVFc1QwRkJUeXhIUVVGWkxFVkJRVVU3V1VGRGNrSXNUVUZCVFN4SlFVRkpMR2xDUVVGcFFpeERRVUZETEVWQlFVVXNTMEZCU3l4RlFVRkZMRWRCUVVjc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGRE4wTXNVMEZCUVR0QlFVTklMRXRCUVVNc1EwRkJRenRCUVVWR0xFbEJRVUVzVFVGQlRTeFBRVUZQTEVkQlFXOUNMRTlCUVU4c1IwRkJSeXhMUVVGSk8xRkJRemRETEVsQlFVazdRVUZEUml4WlFVRkJMRTlCUVU4c1RVRkJUU3hKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUTNKRExGTkJRVUU3UVVGQlF5eFJRVUZCTEU5QlFVOHNSMEZCV1N4RlFVRkZPMWxCUTNKQ0xFMUJRVTBzU1VGQlNTeHBRa0ZCYVVJc1EwRkJReXhGUVVGRkxFdEJRVXNzUlVGQlJTeEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRPMEZCUXpkRExGTkJRVUU3UVVGRFNDeExRVUZETEVOQlFVTTdRVUZGUml4SlFVRkJMRTFCUVUwc1NVRkJTU3hIUVVGcFFpeFZRVUZWTEVOQlFVTXNUVUZCVFN4RlFVRkZMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeERRVUZETEVOQlFVTTdRVUZGT1VRc1NVRkJRU3hOUVVGTkxHTkJRV01zUjBGQk1rSXNjVUpCUVhGQ0xFTkJRVU1zVFVGQlRTeEZRVUZGTzFGQlF6TkZMRWxCUVVrN1VVRkRTaXhKUVVGSk8wRkJRMHdzUzBGQlFTeERRVUZETEVOQlFVTTdRVUZGU0N4SlFVRkJMRTFCUVUwc2FVSkJRV2xDTEVkQlFVY3NkVUpCUVhWQ0xFTkJRVU1zVFVGQlRTeEZRVUZGTzFGQlEzaEVMRWxCUVVrN1VVRkRTaXhKUVVGSk8wRkJRMHdzUzBGQlFTeERRVUZETEVOQlFVTTdTVUZGU0N4UFFVRlBPMEZCUTB3c1VVRkJRU3hMUVVGTExFVkJRVVVzU1VGQlNUdFJRVU5ZTEVsQlFVazdVVUZEU2l4UFFVRlBPMUZCUTFBc01rSkJRVEpDTzFGQlF6TkNMRWxCUVVrN1VVRkRTaXhQUVVGUE8xRkJRMUFzU1VGQlNUdFJRVU5LTEdOQlFXTTdVVUZEWkN4blFrRkJaMElzUlVGQlJTeHBRa0ZCYVVJc1EwRkJReXhuUWtGQlowSTdRVUZEY0VRc1VVRkJRU3hQUVVGUExFVkJRVVVzVFVGQlRTeEpRVUZKTEVOQlFVTXNUMEZCVHl4RlFVRkZPMHRCUXpsQ0xFTkJRVU03UVVGRFNpeERRVUZETzBGQlJVUTdPenM3TzBGQlMwYzdRVUZEUnl4VFFVRlZMR2xDUVVGcFFpeERRVUZETEZGQlFXZENMRVZCUVVFN1FVRkRhRVFzU1VGQlFTeE5RVUZOTEVkQlFVY3NSMEZCUnl4SlFVRkpMRWRCUVVjc1EwRkJReXhuUkVGQlowUXNRMEZCUXl4RFFVRkRPMGxCUTNSRkxFZEJRVWNzUTBGQlF5eFpRVUZaTEVOQlFVTXNSMEZCUnl4RFFVRkRMRkZCUVZFc1JVRkJSU3hSUVVGUkxFTkJRVU1zUTBGQlF6dEJRVU42UXl4SlFVRkJMRTlCUVU4c1IwRkJSeXhEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETzBGQlEzaENMRU5CUVVNN1FVRkZSRHM3T3pzN096czdPMEZCVTBjN1FVRkRTQ3hUUVVGVExGbEJRVmtzUTBGRGJrSXNUVUZCWXl4RlFVTmtMRXRCUVcxQ0xFVkJRMjVDTEVsQlFXMUNMRVZCUTI1Q0xFbEJRWGRDTEVWQlEzaENMRmRCUVZjc1IwRkJSeXhKUVVGSkxFVkJRVUU3U1VGRmJFSXNVVUZCVVN4TFFVRkxMRU5CUVVNc1NVRkJTVHRCUVVOb1FpeFJRVUZCTEV0QlFVc3NORUpCUVRSQ08wRkJReTlDTEZsQlFVRXNTVUZCU1N4WFFVRlhMRWxCUVVrc1MwRkJTeXhEUVVGRExFZEJRVWNzUlVGQlJUdEJRVU0xUWl4blFrRkJRU3hQUVVGUExHMUNRVUZ0UWl4RFFVRkRMRTFCUVUwc1JVRkJSU3hMUVVGTExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenRCUVVNelJDeGhRVUZCTzFsQlEwUXNUVUZCVFR0QlFVTlNMRkZCUVVFc1MwRkJTeXg1UWtGQmVVSXNRMEZCUXp0QlFVTXZRaXhSUVVGQkxFdEJRVXNzY1VKQlFYRkNPMWxCUTNoQ1FTeExRVUZITEVOQlFVTXNNRUpCUVRCQ0xFTkJRVU1zUTBGQlF6dFpRVU5vUXl4TlFVRk5PMEZCUTFJc1VVRkJRVHRCUVVORkxGbEJRVUVzVFVGQlRTeExRVUZMTEVOQlFVTTdRVUZEWml4TFFVRkJPMEZCUlVRc1NVRkJRU3hQUVVGUExFbEJRVWtzUTBGQlF6dEJRVU5rTEVOQlFVTTdRVUZGUkN4bFFVRmxMRzFDUVVGdFFpeERRVU5vUXl4TlFVRmpMRVZCUTJRc1YwRkJiVUlzUlVGRGJrSXNTVUZCYlVJc1JVRkRia0lzU1VGQmQwSXNSVUZCUVR0SlFVVjRRaXhKUVVGSk8wRkJRMFlzVVVGQlFTeE5RVUZOTEVkQlFVY3NSMEZCUnl4SlFVRkpMRWRCUVVjc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF6dEJRVU5xUXl4UlFVRkJRU3hMUVVGSExFTkJRVU1zSzBKQlFTdENMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVU03VVVGRk1VTXNUVUZCVFN4aFFVRmhMRWRCUVVjc1RVRkJUU3hMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkRiRVFzVVVGQlFTeE5RVUZOTEZsQlFWa3NSMEZCUnl4TlFVRk5MR0ZCUVdFc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF6dEJRVU5vUkN4UlFVRkJMRTFCUVUwc1kwRkJZeXhIUVVGSExFMUJRVTBzV1VGQldTeERRVUZETEZkQlFWY3NSVUZCUlN4RFFVRkRPMEZCUTNoRUxGRkJRVUVzVFVGQlRTeFpRVUZaTEVkQlFVY3NUVUZCVFN4TlFVRk5MRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVU03UVVGRGFFUXNVVUZCUVN4TlFVRk5MRTFCUVUwc1IwRkJSeXhOUVVGTkxFbEJRVWtzUTBGQlF5eHRRMEZCYlVNc1EwRkRNMFFzU1VGQlNTeEZRVU5LTEdOQlFXTXNSVUZEWkN4WlFVRlpMRVZCUTFvc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGRFdpeERRVUZETzBGQlJVWXNVVUZCUVN4UFFVRlBMRzFDUVVGdFFpeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMEZCUTNCRExFdEJRVUU3UVVGQlF5eEpRVUZCTEU5QlFVOHNSMEZCUnl4RlFVRkZPMUZCUTFvc1NVRkJTU3hIUVVGSExGbEJRVmtzVTBGQlV5eEZRVUZGTzBGQlF6VkNMRmxCUVVGQkxFdEJRVWNzUTBGQlF5eHhSRUZCY1VRc1JVRkJSU3hYUVVGWExFTkJRVU1zUTBGQlF6dEJRVU40UlN4WlFVRkJMRTlCUVU4c1NVRkJTU3hEUVVGRE8wRkJRMklzVTBGQlFUdEJRVVZFTEZGQlFVRkJMRXRCUVVjc1EwRkJReXh2UTBGQmIwTXNSVUZCUlN4WFFVRlhMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRE5VUXNVVUZCUVN4TlFVRk5MRWRCUVVjc1EwRkJRenRCUVVOWUxFdEJRVUU3UVVGRFNEczdRVU0xV1VFN096czdPenM3UVVGUFJ6dEJRVWxKTEUxQlFVMHNaVUZCWlN4SFFVRkhMRFpDUVVFMlFpeERRVUZETzBGQlJUZEVPenM3T3pzN1FVRk5SenRCUVVOaExGTkJRVUVzWVVGQllTeERRVUZETEdkQ1FVRkJMRWRCUVhWRExFVkJRVVVzUlVGQlFUdEJRVU55UlN4SlFVRkJMRTlCUVU4c1owSkJRV2RDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhMUVVGTExFZEJRVWNzUTBGQlF5eEpRVUZKTEV0QlFVc3NaVUZCWlN4RFFVRkRMRU5CUVVNN1FVRkRkRVVzUTBGQlF6dEJRVVZFT3pzN096czdRVUZOUnp0QlFVTmhMRk5CUVVFc1kwRkJZeXhEUVVGRExHZENRVUZCTEVkQlFUQkNMRVZCUVVVc1JVRkJRVHRKUVVONlJDeFBRVUZQTEdkQ1FVRm5RaXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNRMEZCUVR0QlFVTjRSVHM3T3pzN096czdPenM3T3pzN1FVTjRRa0VzVTBGQlV5dEVMRmRCUVZNc1EwRkJReXhMUVVGTExFVkJRVVVzVVVGQlVTeEZRVUZGTzBGQlEzQkRMRVZCUVVVc1NVRkJTU3hMUVVGTExFZEJRVWNzUTBGQlF5eERRVUZETzBGQlEyaENMRTFCUVUwc1RVRkJUU3hIUVVGSExFdEJRVXNzU1VGQlNTeEpRVUZKTEVkQlFVY3NRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU03UVVGRGFFUTdRVUZEUVN4RlFVRkZMRTlCUVU4c1JVRkJSU3hMUVVGTExFZEJRVWNzVFVGQlRTeEZRVUZGTzBGQlF6TkNMRWxCUVVrc1NVRkJTU3hSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFTkJRVU1zUzBGQlN5eExRVUZMTEVWQlFVVTdRVUZEZUVRc1RVRkJUU3hOUVVGTk8wRkJRMW9zUzBGQlN6dEJRVU5NTEVkQlFVYzdRVUZEU0N4RlFVRkZMRTlCUVU4c1MwRkJTeXhEUVVGRE8wRkJRMllzUTBGQlF6dEJRVU5FTzBGQlEwRXNTVUZCUVN4VlFVRmpMRWRCUVVkQkxGZEJRVk03TzBGRGNrSXhRaXhKUVVGSkxGZEJRVmNzUjBGQlIyaE9MR0ZCUVhkQ0xFTkJRVU03UVVGRE0wTTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNVMEZCVTJsT0xHZENRVUZqTEVOQlFVTXNVVUZCVVN4RlFVRkZMRk5CUVZNc1JVRkJSVHRCUVVNM1F5eEZRVUZGTEU5QlFVOHNVMEZCVXl4VlFVRlZMRVZCUVVVc1VVRkJVU3hGUVVGRk8wRkJRM2hETEVsQlFVa3NTVUZCU1N4VlFVRlZMRWxCUVVrc1NVRkJTU3hGUVVGRk8wRkJRelZDTEUxQlFVMHNUMEZCVHl4VlFVRlZMRU5CUVVNN1FVRkRlRUlzUzBGQlN6dEJRVU5NTEVsQlFVa3NTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhWUVVGVkxFTkJRVU1zUlVGQlJUdEJRVU5zUXl4TlFVRk5MRTlCUVU4c1VVRkJVU3hEUVVGRExGVkJRVlVzUlVGQlJTeFJRVUZSTEVOQlFVTXNRMEZCUXp0QlFVTTFReXhMUVVGTE8wRkJRMHdzU1VGQlNTeEpRVUZKTEUxQlFVMHNSMEZCUnl4VlFVRlZMRU5CUVVNc1RVRkJUVHRCUVVOc1F5eFJRVUZSTEV0QlFVc3NSMEZCUnl4VFFVRlRMRWRCUVVjc1RVRkJUU3hIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU4yUXl4UlFVRlJMRkZCUVZFc1IwRkJSeXhOUVVGTkxFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdRVUZEZEVNN1FVRkRRU3hKUVVGSkxGRkJRVkVzVTBGQlV5eEhRVUZITEV0QlFVc3NSVUZCUlN4SFFVRkhMRVZCUVVVc1MwRkJTeXhIUVVGSExFMUJRVTBzUjBGQlJ6dEJRVU55UkN4TlFVRk5MRWxCUVVrc1VVRkJVU3hEUVVGRExGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNSVUZCUlN4TFFVRkxMRVZCUVVVc1VVRkJVU3hEUVVGRExFdEJRVXNzUzBGQlN5eEZRVUZGTzBGQlEyaEZMRkZCUVZFc1RVRkJUVHRCUVVOa0xFOUJRVTg3UVVGRFVDeExRVUZMTzBGQlEwd3NTVUZCU1N4UFFVRlBMRlZCUVZVc1EwRkJRenRCUVVOMFFpeEhRVUZITEVOQlFVTTdRVUZEU2l4RFFVRkRPMEZCUTBRN1FVRkRRU3hKUVVGQkxHVkJRV01zUjBGQlIwRXNaMEpCUVdNN08wRkRMMEl2UWl4SlFVRkpNVVFzV1VGQlZTeEhRVUZIZGtvc1YwRkJkMEk3UVVGRGVrTXNTVUZCU1N4alFVRmpMRWRCUVVkUkxHVkJRVFJDTEVOQlFVTTdRVUZEYkVRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1NVRkJTVEJOTEZWQlFWRXNSMEZCUnl4alFVRmpMRU5CUVVNelJDeFpRVUZWTEVOQlFVTXNRMEZCUXp0QlFVTXhRenRCUVVOQkxFbEJRVUVzVTBGQll5eEhRVUZITWtRc1ZVRkJVVHM3UVVOaWVrSXNTVUZCU1RWRkxGVkJRVkVzUjBGQlIzUkpMRlZCUVhGQ0xFTkJRVU03UVVGRGNrTTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZOQlFWTnRUaXhqUVVGWkxFTkJRVU1zUzBGQlN5eEZRVUZGTzBGQlF6ZENMRVZCUVVVc1QwRkJUeXhQUVVGUExFdEJRVXNzU1VGQlNTeFZRVUZWTEVkQlFVY3NTMEZCU3l4SFFVRkhOMFVzVlVGQlVTeERRVUZETzBGQlEzWkVMRU5CUVVNN1FVRkRSRHRCUVVOQkxFbEJRVUVzWVVGQll5eEhRVUZITmtVc1kwRkJXVHM3UVVOaU4wSXNTVUZCU1Vnc1YwRkJVeXhIUVVGSGFFNHNWVUZCZFVJN1FVRkRka01zU1VGQlNTeFJRVUZSTEVkQlFVZFJMRk5CUVhOQ08wRkJRM0pETEVsQlFVa3NXVUZCV1N4SFFVRkhReXhoUVVFd1FqdEJRVU0zUXl4SlFVRkpjMFVzVTBGQlR5eEhRVUZIY2tVc1UwRkJiMElzUTBGQlF6dEJRVU51UXp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk1zVDBGQlR5eERRVUZETEZWQlFWVXNSVUZCUlN4UlFVRlJMRVZCUVVVN1FVRkRka01zUlVGQlJTeEpRVUZKTEVsQlFVa3NSMEZCUjNGRkxGTkJRVThzUTBGQlF5eFZRVUZWTEVOQlFVTXNSMEZCUjJsSkxGZEJRVk1zUjBGQlJ5eFJRVUZSTEVOQlFVTTdRVUZEZUVRc1JVRkJSU3hQUVVGUExFbEJRVWtzUTBGQlF5eFZRVUZWTEVWQlFVVXNXVUZCV1N4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRGJFUXNRMEZCUXp0QlFVTkVPMEZCUTBFc1NVRkJRU3hUUVVGakxFZEJRVWNzVDBGQlR6czdPMEZEZUVONFFpeERRVUZCTEUxQlFVRXNRMEZCUVN4UFFVRkJMRWRCUVdsQ2FFNHNVMEZCYjBJc1EwRkJRVHM3T3pzN096czdPenREUTBOeVF5eFBRVUZ6UWl4RFFVRkJMRmRCUVVFc1IwRkJRVHRCUVVOMFFqdEJRVU5CTzBkQlEwVXNUVUZCVFN4RlFVRkZMRk5CUVZNN1IwRkRha0lzVjBGQlZ5eEZRVUZGTEdOQlFXTTdSMEZETTBJc1UwRkJVeXhGUVVGRkxGTkJRVk03UjBGRGNFSXNWMEZCVnl4RlFVRkZMRmRCUVZjN1IwRkRlRUlzVVVGQlVTeEZRVUZGTEZWQlFWVTdSMEZEY0VJc1YwRkJWeXhGUVVGRkxHRkJRV0U3UjBGRE1VSXNaVUZCWlN4RlFVRkZMR2xDUVVGcFFqdEhRVU5zUXl4WlFVRlpMRVZCUVVVc1kwRkJZenRIUVVNMVFpeFBRVUZQTEVWQlFVVXNUVUZCVFR0QlFVTnFRanRCUVVOQk8wZEJRMFVzVlVGQlZTeEZRVUZGTEZsQlFWazdSMEZEZUVJc1UwRkJVeXhGUVVGRkxGTkJRVk03UjBGRGNFSXNWVUZCVlN4RlFVRkZMRXRCUVVzN1FVRkRia0k3UVVGRFFUdEhRVU5GTEVsQlFVa3NSVUZCUlN4aFFVRmhPMGRCUTI1Q0xFZEJRVWNzUlVGQlJTeFhRVUZYTzBkQlEyaENMRWRCUVVjc1JVRkJSU3hWUVVGVk8wZEJRMllzUzBGQlN5eEZRVUZGTEU5QlFVODdSMEZEWkN4VFFVRlRMRVZCUVVVc1YwRkJWenRIUVVOMFFpeFJRVUZSTEVWQlFVVXNWVUZCVlR0SFFVTndRaXhMUVVGTExFVkJRVVVzVFVGQlRUdEhRVU5pTEZOQlFWTXNSVUZCUlN4VlFVRlZPMGRCUTNKQ0xFOUJRVThzUlVGQlJTeFJRVUZSTzBkQlEycENMRTlCUVU4c1JVRkJSU3hMUVVGTE8wZEJRMlFzVjBGQlZ5eEZRVUZGTEV0QlFVczdSMEZEYkVJc1dVRkJXU3hGUVVGRkxGRkJRVkU3UjBGRGRFSXNVMEZCVXl4RlFVRkZMRmRCUVZjN1IwRkRkRUlzVlVGQlZTeEZRVUZGTEZWQlFWVTdSMEZEZEVJc1VVRkJVU3hGUVVGRkxFOUJRVTg3UjBGRGFrSXNXVUZCV1N4RlFVRkZMRTlCUVU4N1IwRkRja0lzVlVGQlZTeEZRVUZGTEZkQlFWYzdSMEZEZGtJc1pVRkJaU3hGUVVGRkxHZENRVUZuUWp0SFFVTnFReXhSUVVGUkxFVkJRVVVzVTBGQlV6dEhRVU51UWl4WFFVRlhMRVZCUVVVc1NVRkJTVHRIUVVOcVFpeFRRVUZUTEVWQlFVVXNUMEZCVHp0SFFVTnNRaXhOUVVGTkxFVkJRVVVzVTBGQlV6dEhRVU5xUWl4WFFVRlhMRVZCUVVVc1VVRkJVVHRIUVVOeVFpeE5RVUZOTEVWQlFVVXNUVUZCVFR0SFFVTmtMRk5CUVZNc1JVRkJSU3hOUVVGTk8wZEJRMnBDTEUxQlFVMHNSVUZCUlN4TFFVRkxPMGRCUTJJc1RVRkJUU3hGUVVGRkxFdEJRVXM3UjBGRFlpeFJRVUZSTEVWQlFVVXNhVUpCUVdsQ08wZEJRek5DTEZGQlFWRXNSVUZCUlN4UFFVRlBPMGRCUTJwQ0xFOUJRVThzUlVGQlJTeEpRVUZKTzBkQlEySXNVMEZCVXl4RlFVRkZMRTFCUVUwN1IwRkRha0lzVFVGQlRTeEZRVUZGTEUxQlFVMDdSMEZEWkN4UFFVRlBMRVZCUVVVc1MwRkJTenRIUVVOa0xFMUJRVTBzUlVGQlJTeExRVUZMTzBkQlEySXNVVUZCVVN4RlFVRkZMR2xDUVVGcFFqdEhRVU16UWl4UlFVRlJMRVZCUVVVc1QwRkJUenRIUVVOcVFpeFBRVUZQTEVWQlFVVXNTVUZCU1R0SFFVTmlMSEZDUVVGeFFpeEZRVUZGTEV0QlFVczdSMEZETlVJc2RVSkJRWFZDTEVWQlFVVXNUMEZCVHp0SFFVTm9ReXg1UWtGQmVVSXNSVUZCUlN4VFFVRlRPMGRCUTNCRExGVkJRVlVzUlVGQlJTeFhRVUZYTzBkQlEzWkNMR1ZCUVdVc1JVRkJSU3huUWtGQlowSTdSMEZEYWtNc1UwRkJVeXhGUVVGRkxFMUJRVTA3UjBGRGFrSXNVVUZCVVN4RlFVRkZMRk5CUVZNN1IwRkRia0lzVTBGQlV5eEZRVUZGTEZWQlFWVTdSMEZEY2tJc1QwRkJUeXhGUVVGRkxGbEJRVms3UjBGRGNrSXNVMEZCVXl4RlFVRkZMRk5CUVZNN1IwRkRjRUlzVVVGQlVTeEZRVUZGTEZkQlFWYzdRVUZEZGtJc1JVRkJReXhEUVVGRE8wRkJRMFk3UVVGRFFUdERRVU5CTEU5QlFXOUNMRU5CUVVFc1UwRkJRU3hIUVVGQk8wRkJRM0JDTEVkQlFVVXNSMEZCUnl4RlFVRkZPMHRCUTBnc1YwRkJWeXhGUVVGRkxHRkJRV0VzUlVGQlJTeFRRVUZUTEVWQlFVVXNWMEZCVnl4RlFVRkZMRTFCUVUwc1JVRkJSU3hSUVVGUk8wdEJRM0JGTEU5QlFVOHNSVUZCUlN4WlFVRlpMRVZCUVVVc1lVRkJZU3hGUVVGRkxHbENRVUZwUWl4RlFVRkZMRTlCUVU4c1JVRkJSU3hOUVVGTk8wRkJRelZGTEV0QlFVa3NWMEZCVnl4RlFVRkZMRmRCUVZjc1JVRkJSU3hSUVVGUkxFVkJRVVVzVlVGQlZTeEZRVUZGTEZOQlFWTXNSVUZCUlN4UlFVRlJMRVZCUVVVc1ZVRkJWVHRCUVVOdVJpeExRVUZKTEZWQlFWVXNSVUZCUlN4UFFVRlBMRVZCUVVVc1VVRkJVU3hGUVVGRkxFMUJRVTBzUlVGQlJTeFhRVUZYTEVWQlFVVXNWVUZCVlN4RFFVRkRMRTFCUVUwc1JVRkJSU3hUUVVGVE8wRkJRM0JHTEV0QlFVa3NUMEZCVHl4RlFVRkZMR05CUVdNc1JVRkJSU3hSUVVGUkxFVkJRVVVzVlVGQlZTeEZRVUZGTEUxQlFVMHNSVUZCUlN4VFFVRlRMRVZCUVVVc1YwRkJWenRCUVVOcVJpeExRVUZKTEZWQlFWVXNSVUZCUlN4UFFVRlBMRVZCUVVVc1VVRkJVVHRKUVVNNVFqdEJRVU5JTEVkQlFVVXNSMEZCUnl4RlFVRkZPMEZCUTFBc1MwRkJTU3hMUVVGTExFVkJRVVVzVDBGQlR5eEZRVUZGTEV0QlFVc3NSVUZCUlN4UlFVRlJMRVZCUVVVc1pVRkJaU3hGUVVGRkxGVkJRVlVzUlVGQlJTeHBRa0ZCYVVJN1FVRkRia1lzUzBGQlNTeEpRVUZKTEVWQlFVVXNVVUZCVVN4RlFVRkZMRTFCUVUwc1JVRkJSU3hUUVVGVExFVkJRVVVzVTBGQlV5eEZRVUZGTEU5QlFVOHNSVUZCUlN4bFFVRmxPMHRCUTNSRkxGZEJRVmNzUlVGQlJTeFJRVUZSTEVWQlFVVXNXVUZCV1N4RlFVRkZMRk5CUVZNc1JVRkJSU3hSUVVGUkxFVkJRVVVzWVVGQllUdExRVU4yUlN4VlFVRlZMRVZCUVVVc1ZVRkJWU3hGUVVGRkxHTkJRV01zUlVGQlJTeFhRVUZYTEVWQlFVVXNUMEZCVHl4RlFVRkZMRmxCUVZrN1FVRkRPVVVzUzBGQlNTeFJRVUZSTEVWQlFVVXNUVUZCVFN4RlFVRkZMRmRCUVZjc1JVRkJSU3huUWtGQlowSXNSVUZCUlN4WFFVRlhMRVZCUVVVc1ZVRkJWU3hGUVVGRkxFbEJRVWs3UVVGRGJFWXNTMEZCU1N4UFFVRlBMRVZCUVVVc1VVRkJVU3hGUVVGRkxFMUJRVTBzUlVGQlJTeFhRVUZYTEVWQlFVVXNVMEZCVXl4RlFVRkZMRlZCUVZVc1JVRkJSU3hsUVVGbE8wdEJRemxGTEdGQlFXRXNSVUZCUlN4VFFVRlRMRVZCUVVVc1lVRkJZU3hGUVVGRkxHTkJRV01zUlVGQlJTeFRRVUZUTzB0QlEyeEZMR05CUVdNc1JVRkJSU3hQUVVGUExFVkJRVVVzV1VGQldTeEZRVUZGTEZGQlFWRXNSVUZCUlN4aFFVRmhMRVZCUVVVc1MwRkJTenRCUVVONlJTeExRVUZKTEZOQlFWTXNSVUZCUlN4SlFVRkpMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeFBRVUZQTEVWQlFVVXNWVUZCVlN4RlFVRkZMRk5CUVZNc1JVRkJSU3hqUVVGak8wRkJRMnBHTEV0QlFVa3NWVUZCVlN4RlFVRkZMRkZCUVZFc1JVRkJSU3hYUVVGWExFVkJRVVVzVTBGQlV5eEZRVUZGTEZOQlFWTXNSVUZCUlN4TlFVRk5MRVZCUVVVc1QwRkJUenRCUVVNMVJTeExRVUZKTEdGQlFXRXNSVUZCUlN4SlFVRkpMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeFRRVUZUTEVWQlFVVXNWMEZCVnl4RlFVRkZMR2xDUVVGcFFqdEJRVU5vUml4TFFVRkpMRTlCUVU4c1JVRkJSU3hSUVVGUkxFVkJRVVVzVDBGQlR5eEZRVUZGTEdOQlFXTXNSVUZCUlN4UFFVRlBMRVZCUVVVc1ZVRkJWU3hGUVVGRkxFdEJRVXNzUlVGQlJTeE5RVUZOTzBGQlEyeEdMRXRCUVVrc1VVRkJVU3hGUVVGRkxGVkJRVlVzUlVGQlJTeExRVUZMTEVWQlFVVXNVVUZCVVN4RlFVRkZMRlZCUVZVc1JVRkJSU3hWUVVGVkxFVkJRVVVzVTBGQlV6dEJRVU0xUlN4TFFVRkpMR05CUVdNc1JVRkJSU3hYUVVGWExFVkJRVVVzVFVGQlRTeEZRVUZGTEZGQlFWRXNSVUZCUlN4WlFVRlpMRVZCUVVVc1RVRkJUU3hGUVVGRkxGTkJRVk03UVVGRGJFWXNTMEZCU1N4UlFVRlJMRVZCUVVVc1VVRkJVU3hGUVVGRkxFOUJRVThzUlVGQlJTeFpRVUZaTEVWQlFVVXNUMEZCVHl4RlFVRkZMRkZCUVZFc1JVRkJSU3hSUVVGUk8wRkJRekZGTEV0QlFVa3NVVUZCVVN4RlFVRkZMRlZCUVZVc1JVRkJSU3hSUVVGUkxFVkJRVVVzV1VGQldTeEZRVUZGTEUxQlFVMHNSVUZCUlN4UlFVRlJMRVZCUVVVc1lVRkJZVHRCUVVOcVJpeExRVUZKTEdWQlFXVXNSVUZCUlN4cFFrRkJhVUlzUlVGQlJTeHRRa0ZCYlVJc1JVRkJSU3hqUVVGak8wRkJRek5GTEV0QlFVa3NUMEZCVHl4RlFVRkZMRmxCUVZrc1JVRkJSU3haUVVGWkxFVkJRVVVzVlVGQlZTeEZRVUZGTEU5QlFVOHNSVUZCUlN4TlFVRk5MRVZCUVVVc1YwRkJWenRCUVVOcVJpeExRVUZKTEdkQ1FVRm5RaXhGUVVGRkxGZEJRVmNzUlVGQlJTeExRVUZMTEVWQlFVVXNWVUZCVlN4RlFVRkZMRTFCUVUwc1JVRkJSU3hQUVVGUExFVkJRVVVzVjBGQlZ6dExRVU01UlN4alFVRmpMRVZCUVVVc1owSkJRV2RDTEVWQlFVVXNWVUZCVlN4RlFVRkZMRTlCUVU4c1JVRkJSU3hSUVVGUkxFVkJRVVVzVlVGQlZUdEJRVU12UlN4TFFVRkpMRTlCUVU4c1JVRkJSU3hYUVVGWExFVkJRVVVzVTBGQlV5eEZRVUZGTEUxQlFVMHNSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxGZEJRVmM3UVVGRGRFVXNTMEZCU1N4bFFVRmxPMGxCUTJoQ08wRkJRMGdzUjBGQlJTeEhRVUZITEVWQlFVVTdTMEZEU0N4alFVRmpMRVZCUVVVc1dVRkJXU3hGUVVGRkxFOUJRVThzUlVGQlJTeGpRVUZqTEVWQlFVVXNaMEpCUVdkQ08wdEJRM1pGTEZWQlFWVXNSVUZCUlN4bFFVRmxMRVZCUVVVc1kwRkJZeXhGUVVGRkxHMUNRVUZ0UWl4RlFVRkZMRTlCUVU4N1MwRkRla1VzWTBGQll5eEZRVUZGTEdGQlFXRXNSVUZCUlN4VFFVRlRMRVZCUVVVc1owSkJRV2RDTEVWQlFVVXNhMEpCUVd0Q08wdEJRemxGTEZsQlFWa3NSVUZCUlN4bFFVRmxMRVZCUVVVc1lVRkJZU3hGUVVGRkxHRkJRV0VzUlVGQlJTeGpRVUZqTzB0QlF6TkZMR2xDUVVGcFFpeEZRVUZGTEZkQlFWY3NSVUZCUlN4VFFVRlRMRVZCUVVVc1ZVRkJWU3hGUVVGRkxHRkJRV0U3UzBGRGNFVXNaVUZCWlN4RlFVRkZMRmRCUVZjc1JVRkJSU3hoUVVGaExFVkJRVVVzVjBGQlZ5eEZRVUZGTEdkQ1FVRm5RanRMUVVNeFJTeFJRVUZSTEVWQlFVVXNZVUZCWVN4RlFVRkZMRk5CUVZNc1JVRkJSU3hMUVVGTExFVkJRVVVzVDBGQlR5eEZRVUZGTEdWQlFXVTdTMEZEYmtVc2JVSkJRVzFDTEVWQlFVVXNWMEZCVnl4RlFVRkZMRk5CUVZNc1JVRkJSU3hYUVVGWExFVkJRVVVzVVVGQlVTeEZRVUZGTEU5QlFVODdTMEZETTBVc1UwRkJVeXhGUVVGRkxGTkJRVk03U1VGRGNrSTdRVUZEU0N4SFFVRkZMRWRCUVVjc1JVRkJSVHRCUVVOUUxFdEJRVWtzVFVGQlRTeEZRVUZGTEZOQlFWTXNSVUZCUlN4WlFVRlpPMGxCUTJoRE8wRkJRMGdzUlVGQlF5eERRVUZETzBGQlEwWTdRVUZEUVR0RFFVTkJMRTlCUVcxQ0xFTkJRVUVzVVVGQlFTeEhRVUZCTzBGQlEyNUNMRWRCUVVVc1IwRkJSeXhGUVVGRkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0SFFVTllMRWRCUVVjc1JVRkJSU3hEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRPMGRCUTJRc1IwRkJSeXhGUVVGRkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRE8wRkJRMjVDTEVWQlFVTXNRMEZCUXp0QlFVTkdPMEZCUTBFN1EwRkRRU3hQUVVGelFpeERRVUZCTEZkQlFVRXNSMEZCUVR0SFFVTndRaXhuUWtGQlowSXNSVUZCUlN4RFFVRkRPMGRCUTI1Q0xGZEJRVmNzUlVGQlJTeERRVUZETzBkQlEyUXNUMEZCVHl4RlFVRkZMRU5CUVVNN1IwRkRWaXhSUVVGUkxFVkJRVVVzUTBGQlF6dEhRVU5ZTEUxQlFVMHNSVUZCUlN4RFFVRkRPMGRCUTFRc1ZVRkJWU3hGUVVGRkxFTkJRVU03UjBGRFlpeFhRVUZYTEVWQlFVVXNRMEZCUXp0SFFVTmtMR1ZCUVdVc1JVRkJSU3hEUVVGRE8wZEJRMnhDTEZOQlFWTXNSVUZCUlN4RFFVRkRPMGRCUTFvc1ZVRkJWU3hGUVVGRkxFTkJRVU03UjBGRFlpeGpRVUZqTEVWQlFVVXNRMEZCUXp0SFFVTnFRaXhsUVVGbExFVkJRVVVzUTBGQlF6dEhRVU5zUWl4dFFrRkJiVUlzUlVGQlJTeERRVUZETzBkQlEzUkNMR0ZCUVdFc1JVRkJSU3hEUVVGRE8wZEJRMmhDTEZOQlFWTXNSVUZCUlN4RFFVRkRPMGRCUTFvc1lVRkJZU3hGUVVGRkxFTkJRVU03UjBGRGFFSXNZMEZCWXl4RlFVRkZMRU5CUVVNN1IwRkRha0lzVTBGQlV5eEZRVUZGTEVOQlFVTTdSMEZEV2l4alFVRmpMRVZCUVVVc1EwRkJRenRIUVVOcVFpeFBRVUZQTEVWQlFVVXNRMEZCUXp0SFFVTldMRmxCUVZrc1JVRkJSU3hEUVVGRE8wZEJRMllzVVVGQlVTeEZRVUZGTEVOQlFVTTdSMEZEV0N4aFFVRmhMRVZCUVVVc1EwRkJRenRIUVVOb1FpeExRVUZMTEVWQlFVVXNRMEZCUXp0SFFVTlNMRk5CUVZNc1JVRkJSU3hEUVVGRE8wZEJRMW9zVjBGQlZ5eEZRVUZGTEVOQlFVTTdSMEZEWkN4WFFVRlhMRVZCUVVVc1EwRkJRenRIUVVOa0xGRkJRVkVzUlVGQlJTeERRVUZETzBkQlExZ3NZVUZCWVN4RlFVRkZMRU5CUVVNN1IwRkRhRUlzVVVGQlVTeEZRVUZGTEVOQlFVTTdSMEZEV0N4UlFVRlJMRVZCUVVVc1EwRkJRenRIUVVOWUxFMUJRVTBzUlVGQlJTeERRVUZETzBkQlExUXNaMEpCUVdkQ0xFVkJRVVVzUTBGQlF6dEhRVU51UWl4WFFVRlhMRVZCUVVVc1EwRkJRenRIUVVOa0xFOUJRVThzUlVGQlJTeERRVUZETzBkQlExWXNWMEZCVnl4RlFVRkZMRU5CUVVNN1FVRkRhRUlzUlVGQlF5eERRVUZETzBGQlEwWTdRVUZEUVR0RFFVTkJMRTlCUVhkQ0xFTkJRVUVzWVVGQlFTeEhRVUZCTzBGQlEzaENMRWRCUVVVc1UwRkJVeXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzBGQlEyaENMRWRCUVVVc1lVRkJZU3hGUVVGRkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0QlFVTjJRaXhGUVVGRExFTkJRVU03UVVGRFJqdEJRVU5CTzBOQlEwRXNUMEZCYzBJc1EwRkJRU3hYUVVGQkxFZEJRVUU3UVVGRGRFSXNSMEZCUlN4cFFrRkJhVUlzUlVGQlJTeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1IwRkRla0lzWTBGQll5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGRE0wSXNSMEZCUlN4bFFVRmxMRVZCUVVVc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzBkQlEzWkNMRmxCUVZrc1JVRkJSU3hEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRPMGRCUTNaQ0xHTkJRV01zUlVGQlJTeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRE8wZEJRM3BDTEdkQ1FVRm5RaXhGUVVGRkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1IwRkRNMElzVDBGQlR5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03UjBGRGJFSXNaMEpCUVdkQ0xFVkJRVVVzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRIUVVNelFpeHJRa0ZCYTBJc1JVRkJSU3hEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRPMGRCUXpkQ0xHRkJRV0VzUlVGQlJTeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRE8wZEJRM2hDTEdGQlFXRXNSVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzBGQlF6RkNMRWRCUVVVc1kwRkJZeXhGUVVGRkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0SFFVTjBRaXhYUVVGWExFVkJRVVVzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRIUVVOMFFpeFZRVUZWTEVWQlFVVXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dEhRVU55UWl4aFFVRmhMRVZCUVVVc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0SFFVTjRRaXhsUVVGbExFVkJRVVVzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRIUVVNeFFpeFhRVUZYTEVWQlFVVXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dEhRVU4wUWl4aFFVRmhMRVZCUVVVc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0SFFVTjRRaXhYUVVGWExFVkJRVVVzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRIUVVOMFFpeG5Ra0ZCWjBJc1JVRkJSU3hEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRPMGRCUXpOQ0xGTkJRVk1zUlVGQlJTeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dEhRVU4yUWl4bFFVRmxMRVZCUVVVc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0SFFVTXhRaXh0UWtGQmJVSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzBkQlF6bENMRk5CUVZNc1JVRkJSU3hEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRPMGRCUTNCQ0xGZEJRVmNzUlVGQlJTeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRE8wZEJRM1JDTEZsQlFWa3NSVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0SFFVTXhRaXhQUVVGUExFVkJRVVVzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRIUVVOc1FpeFRRVUZUTEVWQlFVVXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dEhRVU53UWl4VFFVRlRMRVZCUVVVc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0QlFVTjBRaXhGUVVGRExFTkJRVU03UVVGRFJqdEJRVU5CTzBOQlEwRXNUMEZCZFVJc1EwRkJRU3haUVVGQkxFZEJRVUU3UVVGRGRrSXNSMEZCUlN4WFFVRlhMRVZCUVVVc1JVRkJSU3hQUVVGUExFVkJRVVVzUTBGQlF5eEZRVUZGTzBGQlF6ZENMRWRCUVVVc1pVRkJaU3hGUVVGRkxFVkJRVVVzVDBGQlR5eEZRVUZGTEVOQlFVTXNSVUZCUlR0QlFVTnFReXhIUVVGRkxHRkJRV0VzUlVGQlJTeEZRVUZGTEU5QlFVOHNSVUZCUlN4RFFVRkRMRVZCUVVVN1FVRkRMMElzUjBGQlJTeHBRa0ZCYVVJc1JVRkJSU3hGUVVGRkxFOUJRVThzUlVGQlJTeERRVUZETEVWQlFVVTdRVUZEYmtNc1IwRkJSU3hoUVVGaExFVkJRVVVzUlVGQlJTeFBRVUZQTEVWQlFVVXNRMEZCUXl4RlFVRkZPMEZCUXk5Q0xFZEJRVVVzYVVKQlFXbENMRVZCUVVVc1JVRkJSU3hQUVVGUExFVkJRVVVzUTBGQlF5eEZRVUZGTzBGQlEyNURMRWRCUVVVc1dVRkJXU3hGUVVGRkxFVkJRVVVzVDBGQlR5eEZRVUZGTEVOQlFVTXNSVUZCUlR0QlFVTTVRaXhIUVVGRkxHVkJRV1VzUlVGQlJTeEZRVUZGTEU5QlFVOHNSVUZCUlN4RFFVRkRMRVZCUVVVN1FVRkRha01zUjBGQlJTeFZRVUZWTEVWQlFVVXNSVUZCUlN4UFFVRlBMRVZCUVVVc1EwRkJReXhGUVVGRk8wRkJRelZDTEVkQlFVVXNZMEZCWXl4RlFVRkZMRVZCUVVVc1QwRkJUeXhGUVVGRkxFTkJRVU1zUlVGQlJUdEJRVU5vUXl4SFFVRkZMRk5CUVZNc1JVRkJSU3hGUVVGRkxFOUJRVThzUlVGQlJTeERRVUZETEVWQlFVVTdRVUZETTBJc1IwRkJSU3hqUVVGakxFVkJRVVVzUlVGQlJTeFBRVUZQTEVWQlFVVXNRMEZCUXl4RlFVRkZPMEZCUTJoRExFZEJRVVVzVTBGQlV5eEZRVUZGTEVWQlFVVXNUMEZCVHl4RlFVRkZMRU5CUVVNc1JVRkJSVHRCUVVNelFpeEhRVUZGTEZGQlFWRXNSVUZCUlN4RlFVRkZMRTlCUVU4c1JVRkJSU3hEUVVGRExFVkJRVVU3UVVGRE1VSXNSVUZCUXl4RFFVRkRPMEZCUTBZN1FVRkRRVHREUVVOQkxFOUJRV2xDTEVOQlFVRXNUVUZCUVN4SFFVRkJPMEZCUTJwQ0xFZEJRVVVzVDBGQlR5eEZRVUZGTzB0QlExQXNUVUZCVFN4RlFVRkZMRWxCUVVrN1MwRkRXaXhOUVVGTkxFVkJRVVVzU1VGQlNUdExRVU5hTEZOQlFWTXNSVUZCUlN4SlFVRkpPMHRCUTJZc1YwRkJWeXhGUVVGRkxFbEJRVWs3UzBGRGFrSXNZVUZCWVN4RlFVRkZMRWxCUVVrN1MwRkRia0lzVVVGQlVTeEZRVUZGTEVsQlFVazdTMEZEWkN4UlFVRlJMRVZCUVVVc1NVRkJTVHRMUVVOa0xGTkJRVk1zUlVGQlJTeEpRVUZKTzBsQlEyaENPMEZCUTBnc1IwRkJSU3hSUVVGUkxFVkJRVVU3UzBGRFVpeFJRVUZSTEVWQlFVVXNTVUZCU1R0TFFVTmtMRmRCUVZjc1JVRkJSU3hKUVVGSk8wdEJRMnBDTEdWQlFXVXNSVUZCUlN4SlFVRkpPMHRCUTNKQ0xGVkJRVlVzUlVGQlJTeEpRVUZKTzB0QlEyaENMR0ZCUVdFc1JVRkJSU3hKUVVGSk8wdEJRMjVDTEdsQ1FVRnBRaXhGUVVGRkxFbEJRVWs3UzBGRGRrSXNZMEZCWXl4RlFVRkZMRWxCUVVrN1MwRkRjRUlzV1VGQldTeEZRVUZGTEVsQlFVazdTMEZEYkVJc1ZVRkJWU3hGUVVGRkxFbEJRVWs3UzBGRGFFSXNZVUZCWVN4RlFVRkZMRWxCUVVrN1MwRkRia0lzWTBGQll5eEZRVUZGTEVsQlFVazdTMEZEY0VJc2FVSkJRV2xDTEVWQlFVVXNTVUZCU1R0TFFVTjJRaXhQUVVGUExFVkJRVVVzU1VGQlNUdExRVU5pTEZWQlFWVXNSVUZCUlN4SlFVRkpPMHRCUTJoQ0xHTkJRV01zUlVGQlJTeEpRVUZKTzB0QlEzQkNMRmRCUVZjc1JVRkJSU3hKUVVGSk8wbEJRMnhDTzBGQlEwZ3NSMEZCUlN4TFFVRkxMRVZCUVVVN1MwRkRUQ3hMUVVGTExFVkJRVVVzU1VGQlNUdExRVU5ZTEZOQlFWTXNSVUZCUlN4SlFVRkpPMHRCUTJZc1QwRkJUeXhGUVVGRkxFbEJRVWs3UzBGRFlpeFJRVUZSTEVWQlFVVXNTVUZCU1R0TFFVTmtMRmxCUVZrc1JVRkJSU3hKUVVGSk8wbEJRMjVDTzBGQlEwZ3NSVUZCUXl4RFFVRkRPMEZCUTBZN1FVRkRRVHRCUVVOQkxFTkJRVUVzVDBGQlFTeERRVUZCTEZkQlFVRXNTVUZCZFVJc1YwRkJWenRCUVVOc1F5eEhRVUZGTEVsQlFVa3NZMEZCWXl4SFFVRkhMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zWTBGQll6dEJRVU4wUkN4UFFVRk5MRTFCUVUwc1IwRkJSeXhQUVVGUExFTkJRVU1zVjBGQlZ6dFBRVU0xUWl4TlFVRk5MRWRCUVVjc1JVRkJSU3hEUVVGRE8wRkJRMnhDTzBGQlEwRXNSMEZCUlN4TFFVRkxMRWxCUVVrc1IwRkJSeXhKUVVGSkxFMUJRVTBzUlVGQlJUdEJRVU14UWl4TFFVRkpMRWxCUVVrc1MwRkJTeXhIUVVGSExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0TFFVTjRRaXhKUVVGSkxHTkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRXRCUVVzc1EwRkJReXhGUVVGRk8wOUJRM1JETEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZET1VJc1RVRkJTeXhOUVVGTk8wOUJRMHdzVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03VFVGRGRrSTdTVUZEUmp0SFFVTkVMRTlCUVU4c1RVRkJUU3hEUVVGRE8wVkJRMllzUlVGQlJTeERRVUZETEVOQlFVTTdRVUZEVER0QlFVTkJPME5CUTBFc1QwRkJaMElzUTBGQlFTeExRVUZCTEVkQlFVRTdSMEZEWkN4WFFVRlhMRVZCUVVVc1VVRkJVVHRIUVVOeVFpeGxRVUZsTEVWQlFVVXNXVUZCV1R0SFFVTTNRaXhoUVVGaExFVkJRVVVzVlVGQlZUdEhRVU42UWl4cFFrRkJhVUlzUlVGQlJTeGpRVUZqTzBkQlEycERMRkZCUVZFc1JVRkJSU3hQUVVGUE8wZEJRMnBDTEdGQlFXRXNSVUZCUlN4WlFVRlpPMGRCUXpOQ0xHRkJRV0VzUlVGQlJTeFZRVUZWTzBkQlEzcENMR2xDUVVGcFFpeEZRVUZGTEdOQlFXTTdSMEZEYWtNc1ZVRkJWU3hGUVVGRkxFMUJRVTA3UjBGRGJFSXNaVUZCWlN4RlFVRkZMRmRCUVZjN1IwRkROVUlzWTBGQll5eEZRVUZGTEZWQlFWVTdSMEZETVVJc2JVSkJRVzFDTEVWQlFVVXNaVUZCWlR0SFFVTndReXhQUVVGUExFVkJRVVVzUzBGQlN6dEhRVU5rTEdOQlFXTXNSVUZCUlN4VlFVRlZPMGRCUXpGQ0xHRkJRV0VzUlVGQlJTeFRRVUZUTzBkQlEzaENMRmxCUVZrc1JVRkJSU3hSUVVGUk8wZEJRM1JDTEdWQlFXVXNSVUZCUlN4WFFVRlhPMGRCUXpWQ0xHbENRVUZwUWl4RlFVRkZMR0ZCUVdFN1IwRkRhRU1zVlVGQlZTeEZRVUZGTEU5QlFVODdSMEZEYmtJc1kwRkJZeXhGUVVGRkxGZEJRVmM3UjBGRE0wSXNWVUZCVlN4RlFVRkZMRXRCUVVzN1IwRkRha0lzWVVGQllTeEZRVUZGTEZGQlFWRTdSMEZEZGtJc1pVRkJaU3hGUVVGRkxGVkJRVlU3UjBGRE0wSXNXVUZCV1N4RlFVRkZMRXRCUVVzN1IwRkRia0lzVjBGQlZ5eEZRVUZGTEU5QlFVODdSMEZEY0VJc1owSkJRV2RDTEVWQlFVVXNXVUZCV1R0SFFVTTVRaXhWUVVGVkxFVkJRVVVzVFVGQlRUdEhRVU5zUWl4WlFVRlpMRVZCUVVVc1VVRkJVVHRIUVVOMFFpeFhRVUZYTEVWQlFVVXNUVUZCVFR0SFFVTnVRaXhqUVVGakxFVkJRVVVzVTBGQlV6dEhRVU42UWl4blFrRkJaMElzUlVGQlJTeFhRVUZYTzBkQlF6ZENMRkZCUVZFc1JVRkJSU3hMUVVGTE8wRkJRMnBDTEVWQlFVTXNRMEZCUXp0QlFVTkdPMEZCUTBFN1EwRkRRU3hQUVVGdlFpeERRVUZCTEZOQlFVRXNSMEZCUVR0SFFVTnNRaXhYUVVGWExFVkJRVVVzU1VGQlNUdEhRVU5xUWl4TlFVRk5MRVZCUVVVc1NVRkJTVHRIUVVOYUxGZEJRVmNzUlVGQlJTeEpRVUZKTzBkQlEycENMRlZCUVZVc1JVRkJSU3hKUVVGSk8wZEJRMmhDTEU5QlFVOHNSVUZCUlN4SlFVRkpPMGRCUTJJc1QwRkJUeXhGUVVGRkxFbEJRVWs3UjBGRFlpeGpRVUZqTEVWQlFVVXNTVUZCU1R0QlFVTjBRaXhGUVVGRExFTkJRVU03UVVGRFJqdEJRVU5CTzBOQlEwRXNUMEZCYjBJc1EwRkJRU3hUUVVGQkxFZEJRVUU3UjBGRGJFSXNTMEZCU3l4RlFVRkZMRWxCUVVrN1IwRkRXQ3hSUVVGUkxFVkJRVVVzU1VGQlNUdEhRVU5rTEZWQlFWVXNSVUZCUlN4SlFVRkpPMGRCUTJoQ0xFMUJRVTBzUlVGQlJTeEpRVUZKTzBkQlExb3NVMEZCVXl4RlFVRkZMRWxCUVVrN1IwRkRaaXhSUVVGUkxFVkJRVVVzU1VGQlNUdEhRVU5rTEZsQlFWa3NSVUZCUlN4SlFVRkpPMGRCUTJ4Q0xGRkJRVkVzUlVGQlJTeEpRVUZKTzBkQlEyUXNTVUZCU1N4RlFVRkZMRWxCUVVrN1IwRkRWaXhKUVVGSkxFVkJRVVVzU1VGQlNUdEhRVU5XTEV0QlFVc3NSVUZCUlN4SlFVRkpPMGRCUTFnc1UwRkJVeXhGUVVGRkxFbEJRVWs3UjBGRFppeEpRVUZKTEVWQlFVVXNTVUZCU1R0SFFVTldMRXRCUVVzc1JVRkJSU3hKUVVGSk8wZEJRMWdzYVVKQlFXbENMRVZCUVVVc1NVRkJTVHRIUVVOMlFpeFBRVUZQTEVWQlFVVXNTVUZCU1R0SFFVTmlMRlZCUVZVc1JVRkJSU3hKUVVGSk8wZEJRMmhDTEZWQlFWVXNSVUZCUlN4SlFVRkpPMGRCUTJoQ0xGTkJRVk1zUlVGQlJTeEpRVUZKTzBkQlEyWXNZMEZCWXl4RlFVRkZMRWxCUVVrN1IwRkRjRUlzV1VGQldTeEZRVUZGTEVsQlFVazdSMEZEYkVJc1VVRkJVU3hGUVVGRkxFbEJRVWs3UjBGRFpDeFBRVUZQTEVWQlFVVXNTVUZCU1R0SFFVTmlMRmxCUVZrc1JVRkJSU3hKUVVGSk8wZEJRMnhDTEZWQlFWVXNSVUZCUlN4SlFVRkpPMGRCUTJoQ0xFdEJRVXNzUlVGQlJTeEpRVUZKTzBkQlExZ3NWMEZCVnl4RlFVRkZMRWxCUVVrN1IwRkRha0lzWlVGQlpTeEZRVUZGTEVsQlFVazdSVUZEZEVJc1EwRkJRVHM3T3pzN096czdPenM3T3pzN08wRkRhRmRFTEVOQlFVRXNWMEZCWXl4SFFVRkhMRVZCUVVVc1EwRkJRVHM3T3p0QlEweHVRaXhKUVVGSkxFOUJRVThzUjBGQlIwRXNVVUZCY1VJN1FVRkRia01zU1VGQlNTeGpRVUZqTEVkQlFVZFJMR3RDUVVGQkxFVkJRWGRDTEVOQlFVTTdRVUZET1VNN1FVRkRRVHRCUVVOQkxFbEJRVWtzU1VGQlNTeEhRVUZITEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRE8wRkJRMmhETzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNVMEZCVXl4VFFVRlRMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU1zUlVGQlJUdEJRVU0xUWl4RlFVRkZMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU03UVVGRFppeE5RVUZOTEZOQlFWTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRkxFOUJRVThzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4VFFVRlRMRVZCUVVVc1UwRkJVeXhEUVVGRExFTkJRVU1zUlVGQlJUdEJRVU5xUlN4TlFVRk5MRk5CUVZNc1EwRkJReXhGUVVGRkxFVkJRVVVzVDBGQlR5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRk5CUVZNc1JVRkJSU3hUUVVGVExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTTdRVUZETDBRc1EwRkJRenRCUVVORU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVTBGQlV5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNc1JVRkJSVHRCUVVNeFFpeEZRVUZGTEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNN1FVRkRaaXhOUVVGTkxGTkJRVk1zUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZMRTlCUVU4c1NVRkJTU3hEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZPMEZCUXpORExFMUJRVTBzVTBGQlV5eERRVUZETEVWQlFVVXNSVUZCUlN4UFFVRlBMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTTdRVUZEZEVNc1EwRkJRenRCUVVORU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hUUVVGVExGVkJRVlVzUTBGQlF5eExRVUZMTEVWQlFVVTdRVUZETTBJc1JVRkJSU3hKUVVGSkxFMUJRVTBzUjBGQlJ5eExRVUZMTEVkQlFVY3NTMEZCU3l4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRE8wRkJRM1pETEUxQlFVMHNUVUZCVFN4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dEJRVU0zUWp0QlFVTkJMRVZCUVVVc1QwRkJUeXhOUVVGTkxFVkJRVVVzUlVGQlJUdEJRVU51UWl4SlFVRkpMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1FVRkRia01zUjBGQlJ6dEJRVU5JTEVWQlFVVXNUMEZCVHl4TlFVRk5MRU5CUVVNN1FVRkRhRUlzUTBGQlF6dEJRVU5FTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFRRVUZUTEZsQlFWa3NRMEZCUXl4SlFVRkpMRVZCUVVVN1FVRkROVUlzUlVGQlJTeFBRVUZQTEZOQlFWTXNUVUZCVFN4RlFVRkZPMEZCUXpGQ0xFbEJRVWtzVDBGQlR5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRE8wRkJRelZDTEVkQlFVY3NRMEZCUXp0QlFVTktMRU5CUVVNN1FVRkRSRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk1zVlVGQlZTeERRVUZETEVsQlFVa3NSVUZCUlN4TFFVRkxMRVZCUVVVN1FVRkRha01zUlVGQlJTeFBRVUZQTEZkQlFWYzdRVUZEY0VJc1NVRkJTU3hKUVVGSkxFMUJRVTBzUjBGQlJ5eFRRVUZUTEVOQlFVTXNUVUZCVFR0QlFVTnFReXhSUVVGUkxGTkJRVk1zUjBGQlJ5eE5RVUZOTEVkQlFVY3NRMEZCUXp0QlFVTTVRaXhSUVVGUkxFbEJRVWtzUjBGQlJ5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1FVRkROMEk3UVVGRFFTeEpRVUZKTEU5QlFVOHNUVUZCVFN4RlFVRkZMRVZCUVVVN1FVRkRja0lzVFVGQlRTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1UwRkJVeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzBGQlEzWkRMRXRCUVVzN1FVRkRUQ3hKUVVGSkxFbEJRVWtzUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNN1FVRkRNMElzVVVGQlVTeFRRVUZUTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTTdRVUZEZWtNN1FVRkRRU3hKUVVGSkxFbEJRVWtzUzBGQlN5eEZRVUZGTzBGQlEyWXNUVUZCVFN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGTkJRVk1zUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXp0QlFVTnVReXhMUVVGTE8wRkJRMHdzU1VGQlNTeEpRVUZKTEV0QlFVc3NTVUZCU1N4VFFVRlRMRVZCUVVVN1FVRkROVUlzVFVGQlRTeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRk5CUVZNc1JVRkJSU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEV0QlFVc3NSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRMjVFTEV0QlFVczdRVUZEVEN4SlFVRkpMRTlCUVU4c1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNN1FVRkRka01zUjBGQlJ5eERRVUZETzBGQlEwb3NRMEZCUXp0QlFVTkVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVeXhoUVVGaExFTkJRVU1zU1VGQlNTeEZRVUZGTEUxQlFVMHNSVUZCUlR0QlFVTnlReXhGUVVGRkxFOUJRVThzVjBGQlZ6dEJRVU53UWl4SlFVRkpMRWxCUVVrc1RVRkJUU3hIUVVGSExGTkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTTdRVUZEYkVNc1NVRkJTU3hKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTzBGQlEycENMRTFCUVUwc1QwRkJUenRCUVVOaUxFdEJRVXM3UVVGRFRDeEpRVUZKTEVsQlFVa3NTVUZCU1N4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dEJRVU0zUWl4SlFVRkpMRTlCUVU4c1RVRkJUU3hGUVVGRkxFVkJRVVU3UVVGRGNrSXNUVUZCVFN4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzVTBGQlV5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMEZCUTNaRExFdEJRVXM3UVVGRFRDeEpRVUZKTEVsQlFVa3NUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRk5CUVZNc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU42UkN4SlFVRkpMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVTBGQlV5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMEZCUTJoRExFbEJRVWtzVDBGQlR5eE5RVUZOTEVOQlFVTTdRVUZEYkVJc1IwRkJSeXhEUVVGRE8wRkJRMG9zUTBGQlF6dEJRVU5FTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVTBGQlV6Uk5MR0ZCUVZjc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4UFFVRlBMRVZCUVVVN1FVRkRhRVFzUlVGQlJTeEpRVUZKTEV0QlFVc3NSMEZCUnl4UFFVRlBMRWxCUVVrc1NVRkJTU3hWUVVGVk8wRkJRM1pETEUxQlFVMHNTMEZCU3l4SFFVRkhMRWxCUVVrc1MwRkJTeXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdRVUZEY0VNN1FVRkRRU3hGUVVGRkxFbEJRVWtzUzBGQlN5eEZRVUZGTzBGQlEySXNTVUZCU1N4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRE8wRkJRMjVDTEVsQlFVa3NTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJRenRCUVVOb1FpeEpRVUZKTEVsQlFVa3NSMEZCUnl4VFFVRlRMRU5CUVVNN1FVRkRja0lzUjBGQlJ6dEJRVU5JTEVWQlFVVXNTVUZCU1N4SlFVRkpMRWxCUVVrc1NVRkJTU3hGUVVGRk8wRkJRM0JDTEVsQlFVa3NUVUZCVFN4SlFVRkpMRk5CUVZNc1EwRkJRenRCUVVONFFpeEhRVUZITzBGQlEwZ3NSVUZCUlN4UFFVRlBMRXRCUVVzc1QwRkJUeXhIUVVGSExFVkJRVVVzUTBGQlF5eERRVUZETzBGQlF6VkNPMEZCUTBFc1JVRkJSU3hKUVVGSkxFMUJRVTBzUjBGQlJ6dEJRVU5tTEVsQlFVa3NTMEZCU3l4RlFVRkZMRXRCUVVzc1NVRkJTU3hQUVVGUExFZEJRVWNzVDBGQlR5eERRVUZETEVkQlFVY3NSMEZCUnl4SlFVRkpPMEZCUTJoRUxFbEJRVWtzVDBGQlR5eEZRVUZGTEU5QlFVOHNTVUZCU1N4UFFVRlBMRWRCUVVjc1QwRkJUeXhEUVVGRExFdEJRVXNzUjBGQlJ5eEpRVUZKTzBGQlEzUkVMRWxCUVVrc1QwRkJUeXhGUVVGRkxFOUJRVThzU1VGQlNTeFBRVUZQTEVkQlFVY3NUMEZCVHl4RFFVRkRMRXRCUVVzc1IwRkJSeXhKUVVGSk8wRkJRM1JFTEVsQlFVa3NWMEZCVnl4RlFVRkZMRmRCUVZjc1NVRkJTU3hQUVVGUExFZEJRVWNzVDBGQlR5eERRVUZETEZOQlFWTXNSMEZCUnl4SlFVRkpPMEZCUTJ4RkxFbEJRVWtzVDBGQlR5eEZRVUZGTEU5QlFVOHNTVUZCU1N4UFFVRlBMRWRCUVVjc1QwRkJUeXhEUVVGRExFdEJRVXNzUjBGQlJ5eEpRVUZKTzBGQlEzUkVMRWRCUVVjc1EwRkJRenRCUVVOS08wRkJRMEVzUlVGQlJTeEpRVUZKTEdGQlFXRXNSMEZCUnl4TFFVRkxMRWRCUVVjc1NVRkJTU3hIUVVGSExHTkJRV003UVVGRGJrUXNUVUZCVFN4VlFVRlZMRWRCUVVjc1EwRkJReXhQUVVGUExFbEJRVWtzVDBGQlR5eExRVUZMTEU5QlFVOHNRMEZCUXl4TFFVRkxPMEZCUTNoRUxFMUJRVTBzVlVGQlZTeEhRVUZITEVOQlFVTXNUMEZCVHl4SlFVRkpMRTlCUVU4c1MwRkJTeXhQUVVGUExFTkJRVU1zUzBGQlN6dEJRVU40UkN4TlFVRk5MRlZCUVZVc1IwRkJSeXhEUVVGRExFOUJRVThzU1VGQlNTeFBRVUZQTEV0QlFVc3NUMEZCVHl4RFFVRkRMRXRCUVVzN1FVRkRlRVFzVFVGQlRTeFJRVUZSTEVkQlFVY3NTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhaUVVGWkxFVkJRVVVzUjBGQlJ5eFRRVUZUTEVOQlFVTTdRVUZEZWtRN1FVRkRRU3hGUVVGRkxFbEJRVWtzVDBGQlR5eEhRVUZITEV0QlFVc3NSMEZCUnl4SlFVRkpMRWRCUVVjN1FVRkRMMElzU1VGQlNTeExRVUZMTEVWQlFVVXNTVUZCU1N4RFFVRkRMRWRCUVVjN1FVRkRia0lzU1VGQlNTeFJRVUZSTEVWQlFVVXNTVUZCU1N4RFFVRkRMRTFCUVUwN1FVRkRla0lzU1VGQlNTeFBRVUZQTEVWQlFVVXNTVUZCU1N4RFFVRkRMRXRCUVVzN1FVRkRka0lzU1VGQlNTeFBRVUZQTEVWQlFVVXNTVUZCU1N4RFFVRkRMRXRCUVVzN1FVRkRka0lzU1VGQlNTeFRRVUZUTEVWQlFVVXNTVUZCU1N4RFFVRkRMRTlCUVU4N1FVRkRNMElzU1VGQlNTeFRRVUZUTEVWQlFVVXNTVUZCU1N4RFFVRkRMRTlCUVU4N1FVRkRNMElzU1VGQlNTeFRRVUZUTEVWQlFVVXNTVUZCU1N4RFFVRkRMRTlCUVU4N1FVRkRNMElzU1VGQlNTeFpRVUZaTEVWQlFVVXNTVUZCU1N4RFFVRkRMRlZCUVZVN1FVRkRha01zU1VGQlNTeFhRVUZYTEVWQlFVVXNTVUZCU1N4RFFVRkRMRk5CUVZNN1FVRkRMMElzU1VGQlNTeFZRVUZWTEVWQlFVVXNTVUZCU1N4RFFVRkRMRkZCUVZFN1FVRkROMElzU1VGQlNTeE5RVUZOTEVWQlFVVXNTVUZCU1N4RFFVRkRMRWxCUVVrN1FVRkRja0lzU1VGQlNTeFBRVUZQTEVWQlFVVXNTVUZCU1N4RFFVRkRMRXRCUVVzN1FVRkRka0lzU1VGQlNTeFhRVUZYTEVWQlFVVXNTVUZCU1N4RFFVRkRMRk5CUVZNN1FVRkRMMElzU1VGQlNTeFJRVUZSTEVWQlFVVXNTVUZCU1N4RFFVRkRMRTFCUVUwN1FVRkRla0lzUjBGQlJ5eERRVUZETzBGQlEwbzdRVUZEUVN4RlFVRkZMRWxCUVVrc1IwRkJSeXhIUVVGSExFOUJRVThzUTBGQlF5eEhRVUZITzBGQlEzWkNMRTFCUVUwc1RVRkJUU3hIUVVGSExFOUJRVThzUTBGQlF5eE5RVUZOTzBGQlF6ZENMRTFCUVUwc1MwRkJTeXhIUVVGSExFOUJRVThzUTBGQlF5eExRVUZMTzBGQlF6TkNMRTFCUVUwc1MwRkJTeXhIUVVGSExFOUJRVThzUTBGQlF5eExRVUZMTzBGQlF6TkNMRTFCUVUwc1NVRkJTU3hIUVVGSExFOUJRVThzUTBGQlF5eFBRVUZQTzBGQlF6VkNMRTFCUVUwc1QwRkJUeXhIUVVGSExFOUJRVThzUTBGQlF5eFBRVUZQTzBGQlF5OUNMRTFCUVUwc1QwRkJUeXhIUVVGSExFOUJRVThzUTBGQlF5eFBRVUZQTzBGQlF5OUNMRTFCUVUwc1ZVRkJWU3hIUVVGSExFOUJRVThzUTBGQlF5eFZRVUZWTzBGQlEzSkRMRTFCUVUwc1UwRkJVeXhIUVVGSExFOUJRVThzUTBGQlF5eFRRVUZUTzBGQlEyNURMRTFCUVUwc1NVRkJTU3hIUVVGSExFOUJRVThzUTBGQlF5eEpRVUZKTzBGQlEzcENMRTFCUVUwc1MwRkJTeXhIUVVGSExFOUJRVThzUTBGQlF5eExRVUZMTzBGQlF6TkNMRTFCUVUwc1UwRkJVeXhIUVVGSExFOUJRVThzUTBGQlF5eFRRVUZUTzBGQlEyNURMRTFCUVUwc1RVRkJUU3hIUVVGSExFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTTdRVUZET1VJN1FVRkRRU3hGUVVGRkxFbEJRVWtzWVVGQllTeEhRVUZITEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU03UVVGRE9VTTdRVUZEUVN4RlFVRkZMRWxCUVVrc1VVRkJVU3hIUVVGSE8wRkJRMnBDTEVsQlFVa3NWMEZCVnl4RlFVRkZMRk5CUVZNc1UwRkJVeXhGUVVGRk8wRkJRM0pETEUxQlFVMHNUMEZCVHl4WFFVRlhPMEZCUTNoQ0xGRkJRVkVzU1VGQlNTeExRVUZMTEVkQlFVY3NVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRMnBETEZGQlFWRXNUMEZCVHl4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRE8wRkJRemRDTEZsQlFWa3NVMEZCVXl4RFFVRkRMRlZCUVZVc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU40UXl4WlFVRlpMRk5CUVZNc1EwRkJReXhMUVVGTExFTkJRVU1zVTBGQlV5eEZRVUZGTEZOQlFWTXNRMEZCUXl4RFFVRkRPMEZCUTJ4RUxFOUJRVThzUTBGQlF6dEJRVU5TTEV0QlFVczdRVUZEVEN4SlFVRkpMRlZCUVZVc1JVRkJSU3hUUVVGVExGRkJRVkVzUlVGQlJUdEJRVU51UXl4TlFVRk5MRTlCUVU4c1YwRkJWenRCUVVONFFpeFJRVUZSTEVsQlFVa3NTVUZCU1N4SFFVRkhMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVU03UVVGREwwSXNXVUZCV1N4TFFVRkxMRWRCUVVjc1UwRkJVeXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU5vUXl4WlFVRlpMRTFCUVUwc1IwRkJSeXhSUVVGUkxFTkJRVU1zU1VGQlNTeEZRVUZGTEV0QlFVc3NRMEZCUXp0QlFVTXhReXhaUVVGWkxFMUJRVTBzUjBGQlJ5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRPMEZCUTI1RE8wRkJRMEVzVVVGQlVTeEpRVUZKTEUxQlFVMHNRMEZCUXl4SFFVRkhMRWxCUVVrc1QwRkJUeXhMUVVGTExFbEJRVWtzVVVGQlVTeEZRVUZGTzBGQlEzQkVMRlZCUVZVc1MwRkJTeXhIUVVGSExFdEJRVXNzUjBGQlJ5eERRVUZETEVsQlFVa3NTMEZCU3l4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRE9VTXNWVUZCVlN4UFFVRlBMRU5CUVVNc1RVRkJUU3hKUVVGSkxFMUJRVTBzU1VGQlNTeExRVUZMTEVsQlFVa3NUVUZCVFN4SFFVRkhMRTlCUVU4c1EwRkJReXhOUVVGTkxFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTTdRVUZETDBVc1UwRkJVenRCUVVOVUxGRkJRVkVzVDBGQlR5eE5RVUZOTEVOQlFVTTdRVUZEZEVJc1QwRkJUeXhEUVVGRE8wRkJRMUlzUzBGQlN6dEJRVU5NTEVsQlFVa3NUMEZCVHl4RlFVRkZMRk5CUVZNc1MwRkJTeXhGUVVGRk8wRkJRemRDTEUxQlFVMHNUMEZCVHl4VFFVRlRMRTFCUVUwc1JVRkJSVHRCUVVNNVFpeFJRVUZSTEVsQlFVa3NTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJRenRCUVVONFFpeFJRVUZSTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVU3UVVGREwwSXNWVUZCVlN4UFFVRlBMRXRCUVVzc1EwRkJReXhKUVVGSkxFVkJRVVVzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkROME1zVTBGQlV6dEJRVU5VTEZGQlFWRXNTVUZCU1N4TFFVRkxMRWRCUVVjc1JVRkJSU3hEUVVGRE8wRkJRM1pDTEZGQlFWRXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zUlVGQlJTeFRRVUZUTEVkQlFVY3NSVUZCUlR0QlFVTjZReXhWUVVGVkxFbEJRVWtzVlVGQlZTeERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhGUVVGRk8wRkJRM1pETEZsQlFWa3NTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFZEJRVWNzUlVGQlJTeEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU51UkN4WFFVRlhPMEZCUTFnc1UwRkJVeXhEUVVGRExFTkJRVU03UVVGRFdEdEJRVU5CTEZGQlFWRXNTMEZCU3l4RFFVRkRMRWxCUVVrc1JVRkJSU3hOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTndRenRCUVVOQkxGRkJRVkVzU1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlN4VFFVRlRMRWxCUVVrc1JVRkJSVHRCUVVOdVF5eFZRVUZWTEVsQlFVa3NTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU01UWl4VlFVRlZMRWxCUVVrc1ZVRkJWU3hEUVVGRExFdEJRVXNzUTBGQlF5eEZRVUZGTzBGQlEycERMRmxCUVZrc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU03UVVGRE5VTXNWMEZCVnl4TlFVRk5PMEZCUTJwQ0xGbEJRVmtzVDBGQlR5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBGQlF6TkRMRmRCUVZjN1FVRkRXQ3hUUVVGVExFTkJRVU1zUTBGQlF6dEJRVU5ZTEZGQlFWRXNUMEZCVHl4SlFVRkpMRU5CUVVNN1FVRkRjRUlzVDBGQlR5eERRVUZETzBGQlExSXNTMEZCU3p0QlFVTk1MRWxCUVVrc1VVRkJVU3hGUVVGRkxGTkJRVk1zVFVGQlRTeEZRVUZGTzBGQlF5OUNMRTFCUVUwc1QwRkJUeXhUUVVGVExFTkJRVU1zUlVGQlJUdEJRVU42UWl4UlFVRlJMRWxCUVVrc1MwRkJTeXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTnVSQ3hSUVVGUkxFOUJRVThzUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU4yUXl4UFFVRlBMRU5CUVVNN1FVRkRVaXhMUVVGTE8wRkJRMHdzU1VGQlNTeFBRVUZQTEVWQlFVVXNVMEZCVXl4TFFVRkxMRVZCUVVVN1FVRkROMElzVFVGQlRTeFBRVUZQTEZOQlFWTXNTVUZCU1N4RlFVRkZMRTlCUVU4c1JVRkJSVHRCUVVOeVF5eFJRVUZSTEVsQlFVa3NTMEZCU3l4SFFVRkhMRTlCUVU4c1IwRkJSeXhQUVVGUExFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTnFSQ3hSUVVGUkxFOUJRVThzUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRVZCUVVVc1QwRkJUeXhEUVVGRExFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTTdRVUZEYkVRc1QwRkJUeXhEUVVGRE8wRkJRMUlzUzBGQlN6dEJRVU5NTEVsQlFVa3NZMEZCWXl4RlFVRkZMRk5CUVZNc1dVRkJXU3hGUVVGRk8wRkJRek5ETEUxQlFVMHNUMEZCVHl4VFFVRlRMRTlCUVU4c1JVRkJSVHRCUVVNdlFpeFJRVUZSTEU5QlFVOUJMR0ZCUVZjc1EwRkJReXhKUVVGSkxFVkJRVVVzV1VGQldTeERRVUZETEU5QlFVOHNRMEZCUXl4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRE8wRkJRMnBGTEU5QlFVOHNRMEZCUXp0QlFVTlNMRXRCUVVzN1FVRkRUQ3hIUVVGSExFTkJRVU03UVVGRFNqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSVUZCUlN4VFFVRlRMRTlCUVU4c1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTzBGQlF5OUNMRWxCUVVrc1NVRkJTU3hOUVVGTkxFTkJRVU1zUjBGQlJ5eEZRVUZGTzBGQlEzQkNMRTFCUVUwc1NVRkJTU3hQUVVGUExFZEJRVWNzVDBGQlR5eERRVUZETEdGQlFXRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRCUVVOb1JDeE5RVUZOTEVsQlFVa3NUMEZCVHl4RlFVRkZPMEZCUTI1Q0xGRkJRVkVzVDBGQlR5eGhRVUZoTEVOQlFVTXNTVUZCU1N4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRE8wRkJRelZETEU5QlFVODdRVUZEVUN4TlFVRk5MRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUzBGQlN5eEpRVUZKTEU5QlFVOHNRMEZCUXl4WFFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRGJFUXNUVUZCVFN4SlFVRkpMRU5CUVVNc1JVRkJSVHRCUVVOaUxGRkJRVkVzVDBGQlR5eFhRVUZYTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRM0JETEU5QlFVODdRVUZEVUN4TFFVRkxPMEZCUTB3c1NVRkJTU3hQUVVGUExFbEJRVWtzUTBGQlF6dEJRVU5vUWl4SFFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hGUVVGRkxGTkJRVk1zVTBGQlV5eERRVUZETEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1EwRkJReXhGUVVGRk8wRkJRM0JETEVsQlFVa3NUMEZCVHl4RFFVRkRMRlZCUVZVc1MwRkJTeXhOUVVGTkxFTkJRVU1zUzBGQlN5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRha1FzVVVGQlVTeExRVUZMTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNc1EwRkJRenRCUVVOMFFpeFJRVUZSTEVsQlFVa3NRMEZCUXp0QlFVTmlMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFVkJRVVVzVTBGQlV5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hEUVVGRExFVkJRVVU3UVVGRGNFTXNTVUZCU1N4SlFVRkpMRTFCUVUwc1EwRkJReXhMUVVGTExFdEJRVXNzVlVGQlZTeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eEZRVUZGTzBGQlEyeEZMRTFCUVUwc1NVRkJTU3hKUVVGSkxFZEJRVWNzVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4SlFVRkpMRU5CUVVNN1FVRkRNME1zVlVGQlZTeExRVUZMTEVkQlFVY3NTVUZCU1N4SlFVRkpMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU03UVVGRGNrTTdRVUZEUVN4TlFVRk5MRTlCUVU4c1MwRkJTeXhOUVVGTkxGTkJRVk1zUjBGQlJ5eEhRVUZITEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNc1EwRkJReXhIUVVGSExGVkJRVlVzUTBGQlF5eEpRVUZKTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRNMFVzUzBGQlN6dEJRVU5NTEVsQlFVa3NUMEZCVHl4SlFVRkpMRU5CUVVNN1FVRkRhRUlzUjBGQlJ6dEJRVU5JTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSVUZCUlN4VFFVRlRMRk5CUVZNc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVOQlFVTXNSVUZCUlR0QlFVTndReXhKUVVGSkxFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFdEJRVXNzVlVGQlZTeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU0zUlN4UlFVRlJMRXRCUVVzc1EwRkJReXhKUVVGSkxFVkJRVVVzVDBGQlR5eERRVUZETEZkQlFWY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hQUVVGUExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTNKRkxGRkJRVkVzU1VGQlNTeERRVUZETzBGQlEySXNSMEZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRVZCUVVVc1UwRkJVeXhYUVVGWExFTkJRVU1zVFVGQlRTeEZRVUZGTEVsQlFVa3NSVUZCUlR0QlFVTnlReXhKUVVGSkxFbEJRVWtzUjBGQlJ5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkRlRUk3UVVGRFFTeEpRVUZKTEVsQlFVa3NTMEZCU3l4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVOc1FpeFJRVUZSTEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUVHRCUVVNMVFpeFJRVUZSTEZOQlFWTXNSMEZCUnl4TlFVRk5MRWRCUVVjc1EwRkJRenRCUVVNNVFpeFJRVUZSTEUxQlFVMHNSMEZCUnl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzBGQlEzUkRMRkZCUVZFc1RVRkJUU3hIUVVGSExFMUJRVTBzUTBGQlF6dEJRVU40UWp0QlFVTkJMRWxCUVVrc1QwRkJUeXhOUVVGTkxFbEJRVWtzU1VGQlNTeEpRVUZKTEVWQlFVVXNTMEZCU3l4SFFVRkhMRTFCUVUwc1JVRkJSVHRCUVVNdlF5eE5RVUZOTEVsQlFVa3NSMEZCUnl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU03UVVGRE0wSXNWVUZCVlN4TFFVRkxMRWRCUVVjc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBGQlF6bENPMEZCUTBFc1RVRkJUU3hKUVVGSkxFdEJRVXNzU1VGQlNTeEpRVUZKTzBGQlEzWkNMRlZCUVZVc1JVRkJSU3hWUVVGVkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxGTkJRVk1zUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RlFVRkZPMEZCUTNSRkxGRkJRVkVzVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJReXhMUVVGTExFbEJRVWtzVTBGQlV5eEhRVUZITEV0QlFVc3NSMEZCUnl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU40UlN4UFFVRlBPMEZCUTFBc1RVRkJUU3hOUVVGTkxFZEJRVWNzVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUXpOQ0xFdEJRVXM3UVVGRFRDeEpRVUZKTEU5QlFVOHNUVUZCVFN4RFFVRkRPMEZCUTJ4Q0xFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUlVGQlJTeFRRVUZUTEZWQlFWVXNRMEZCUXl4UFFVRlBMRVZCUVVVN1FVRkRMMElzU1VGQlNTeFBRVUZQTEVOQlFVTXNRMEZCUXl4WlFVRlpMRU5CUVVNc1QwRkJUeXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMEZCUTNSRUxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUlVGQlJTeFRRVUZUTEdWQlFXVXNRMEZCUXl4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRk8wRkJRM1pETEVsQlFVa3NTVUZCU1N4UlFVRlJMRWRCUVVjc1QwRkJUeXhEUVVGRExGZEJRVmNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4SlFVRkpPMEZCUTNCRUxGRkJRVkVzVlVGQlZTeEhRVUZITEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzVVVGQlVUdEJRVU40UkN4UlFVRlJMRlZCUVZVc1IwRkJSeXhQUVVGUExFTkJRVU03UVVGRE4wSTdRVUZEUVN4SlFVRkpMRTlCUVU4c1UwRkJVeXhQUVVGUExFVkJRVVU3UVVGRE4wSXNUVUZCVFN4SlFVRkpMRTlCUVU4c1IwRkJSeXhMUVVGTExFZEJRVWNzVVVGQlVTeEhRVUZITEU5QlFVODdRVUZET1VNc1ZVRkJWU3hQUVVGUExFZEJRVWNzUzBGQlN5eEhRVUZITEZGQlFWRXNRMEZCUXl4VlFVRlZMRU5CUVVNc1IwRkJSeXhKUVVGSk8wRkJRM1pFTEZWQlFWVXNWVUZCVlN4SFFVRkhMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zUlVGQlJTeEZRVUZGTEZWQlFWVXNRMEZCUXl4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRE8wRkJReTlFTzBGQlEwRXNUVUZCVFN4UFFVRlBRU3hoUVVGWExFTkJRVU1zVDBGQlR5eEZRVUZGTEZGQlFWRXNSVUZCUlN4UFFVRlBMRVZCUVVVc1ZVRkJWU3hEUVVGRExFTkJRVU03UVVGRGFrVXNTMEZCU3l4RFFVRkRPMEZCUTA0c1IwRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUlVGQlJTeFRRVUZUTEZkQlFWY3NRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJReXhGUVVGRk8wRkJRMmhETEVsQlFVa3NUMEZCVHl4UFFVRlBMRU5CUVVNc1NVRkJTU3hGUVVGRkxGTkJRVk1zU1VGQlNTeEZRVUZGTzBGQlEzaERMRTFCUVUwc1QwRkJUeXhQUVVGUExFbEJRVWtzU1VGQlNTeFZRVUZWTEVkQlFVY3NUMEZCVHl4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTTdRVUZEYWtVc1MwRkJTeXhEUVVGRExFTkJRVU03UVVGRFVDeEhRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1JVRkJSU3hUUVVGVExHRkJRV0VzUTBGQlF5eEpRVUZKTEVWQlFVVXNUMEZCVHl4RlFVRkZPMEZCUTNoRExFbEJRVWtzVDBGQlR5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RlFVRkZMRk5CUVZNc1NVRkJTU3hGUVVGRk8wRkJRM2hETEUxQlFVMHNTVUZCU1N4RFFVRkRMRWRCUVVjc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF6dEJRVU0zUWl4TlFVRk5MRTlCUVU4c1UwRkJVeXhEUVVGRExFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNc1EwRkJReXhGUVVGRkxFOUJRVThzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUXpWRUxFdEJRVXNzUTBGQlF5eERRVUZETzBGQlExQXNSMEZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRVZCUVVVc1UwRkJVeXhQUVVGUExFTkJRVU1zU1VGQlNTeEZRVUZGTEZOQlFWTXNSVUZCUlR0QlFVTndReXhKUVVGSkxFOUJRVThzVjBGQlZ6dEJRVU4wUWl4TlFVRk5MRWxCUVVrc1RVRkJUU3hIUVVGSExGTkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTTdRVUZEY0VNc1RVRkJUU3hKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTzBGQlEyNUNMRkZCUVZFc1QwRkJUeXhKUVVGSkxFVkJRVVVzUTBGQlF6dEJRVU4wUWl4UFFVRlBPMEZCUTFBc1RVRkJUU3hKUVVGSkxFbEJRVWtzUjBGQlJ5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1FVRkRMMElzVFVGQlRTeFBRVUZQTEUxQlFVMHNSVUZCUlN4RlFVRkZPMEZCUTNaQ0xGRkJRVkVzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRk5CUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dEJRVU42UXl4UFFVRlBPMEZCUTFBc1RVRkJUU3hKUVVGSkxFdEJRVXNzUjBGQlJ5eE5RVUZOTEVOQlFVTXNTMEZCU3l4SFFVRkhMRU5CUVVNc1NVRkJTU3hOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEYkVRc1RVRkJUU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETzBGQlF6TkRMRTFCUVUwc1QwRkJUeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZOQlFWTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenRCUVVONlF5eExRVUZMTEVOQlFVTTdRVUZEVGl4SFFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hGUVVGRkxGTkJRVk1zU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1YwRkJWeXhGUVVGRk8wRkJRM3BETEVsQlFVa3NTVUZCU1N4TlFVRk5PMEZCUTJRc1VVRkJVU3hSUVVGUkxFZEJRVWNzVDBGQlR5eERRVUZETEZkQlFWY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hKUVVGSk8wRkJRM0JFTEZGQlFWRXNUMEZCVHl4SFFVRkhMRWxCUVVrN1FVRkRkRUlzVVVGQlVTeFBRVUZQTEVkQlFVY3NVVUZCVVN4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wRkJRM0pETzBGQlEwRXNTVUZCU1N4SlFVRkpMRTlCUVU4c1JVRkJSVHRCUVVOcVFpeE5RVUZOTEU5QlFVOHNSMEZCUnl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRE9VSXNTMEZCU3p0QlFVTk1MRk5CUVZNc1NVRkJTU3hOUVVGTkxFTkJRVU1zVTBGQlV5eEZRVUZGTzBGQlF5OUNMRTFCUVUwc1NVRkJTU3hQUVVGUExFTkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1JVRkJSVHRCUVVNeFF5eFJRVUZSTEU5QlFVOHNSMEZCUnl4aFFVRmhMRU5CUVVNc1NVRkJTU3hGUVVGRkxGVkJRVlVzUTBGQlF5eERRVUZETzBGQlEyeEVMRTlCUVU4N1FVRkRVQ3hYUVVGWExFbEJRVWtzVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFVkJRVVU3UVVGRGFFUXNVVUZCVVN4UFFVRlBMRWRCUVVjc1lVRkJZU3hEUVVGRExFbEJRVWtzUlVGQlJTeFpRVUZaTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVNeFJDeFBRVUZQTzBGQlExQXNWMEZCVnl4SlFVRkpMRTlCUVU4c1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEZGQlFWRXNRMEZCUXl4RlFVRkZPMEZCUXpkRExGRkJRVkVzVDBGQlR5eEhRVUZITEdGQlFXRXNRMEZCUXl4SlFVRkpMRVZCUVVVc1YwRkJWeXhEUVVGRExFTkJRVU03UVVGRGJrUXNUMEZCVHp0QlFVTlFMRXRCUVVzN1FVRkRUQ3hKUVVGSkxFbEJRVWtzUTBGQlF5eGhRVUZoTEVWQlFVVXNVMEZCVXl4TlFVRk5MRVZCUVVVN1FVRkRla01zVFVGQlRTeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zUlVGQlJTeFRRVUZUTEZOQlFWTXNSVUZCUlR0QlFVTXhSQ3hSUVVGUkxFbEJRVWtzVVVGQlVTeEpRVUZKTEZOQlFWTXNSVUZCUlR0QlFVTnVReXhWUVVGVkxFbEJRVWtzU1VGQlNTeEhRVUZITEU5QlFVOHNRMEZCUXl4WlFVRlpMRU5CUVVNc1VVRkJVU3hEUVVGRE8wRkJRMjVFTEdOQlFXTXNWVUZCVlN4SFFVRkhMRWxCUVVrc1NVRkJTU3hKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETzBGQlEyNUVPMEZCUTBFc1ZVRkJWU3hOUVVGTkxFZEJRVWNzVlVGQlZUdEJRVU0zUWl4alFVRmpMRk5CUVZNc1EwRkJReXhSUVVGUkxFVkJRVVVzVTBGQlV5eERRVUZETEZGQlFWRXNSVUZCUlN4UFFVRlBMRVZCUVVVc1RVRkJUU3hEUVVGRExFVkJRVVVzVFVGQlRTeERRVUZETzBGQlF5OUZMR05CUVdNc1UwRkJVeXhEUVVGRExGRkJRVkVzUlVGQlJTeFRRVUZUTEVOQlFVTXNVVUZCVVN4RlFVRkZMRTlCUVU4c1JVRkJSU3hOUVVGTkxFTkJRVU1zUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUXp0QlFVTm9SanRCUVVOQkxGVkJRVlVzVFVGQlRTeEhRVUZITEU5QlFVOHNRMEZCUXl4UlFVRlJMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU03UVVGRE4wTXNWVUZCVlN4TlFVRk5MRWRCUVVjc1UwRkJVeXhEUVVGRExGRkJRVkVzUlVGQlJTeE5RVUZOTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN1FVRkRka1FzVlVGQlZTeFBRVUZQTEV0QlFVc3NRMEZCUXp0QlFVTjJRaXhUUVVGVE8wRkJRMVFzVDBGQlR5eERRVUZETEVOQlFVTTdRVUZEVkN4TlFVRk5MRTlCUVU4c1EwRkJReXhOUVVGTkxFTkJRVU03UVVGRGNrSXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRVRHRCUVVOQkxFbEJRVWtzVFVGQlRTeExRVUZMTEUxQlFVMHNSMEZCUnl4UFFVRlBMRU5CUVVNc1EwRkJRenRCUVVOcVF5eEpRVUZKTEVsQlFVa3NUVUZCVFN4SlFVRkpMRWxCUVVrc1JVRkJSVHRCUVVONFFpeE5RVUZOTEUxQlFVMHNSMEZCUnl4VlFVRlZMRWRCUVVjc1MwRkJTeXhEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEVOQlFVTXNSMEZCUnl4WFFVRlhPMEZCUXpGRUxGRkJRVkVzVDBGQlR5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1JVRkJSU3hUUVVGVExFTkJRVU1zUTBGQlF6dEJRVU16UXl4UFFVRlBMRU5CUVVNN1FVRkRVaXhMUVVGTE8wRkJRMHdzU1VGQlNTeE5RVUZOTEVOQlFVTXNUMEZCVHl4SFFVRkhMR1ZCUVdVc1EwRkJReXhSUVVGUkxFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdRVUZEY2tRc1NVRkJTU3hOUVVGTkxFTkJRVU1zVjBGQlZ5eEhRVUZITEVsQlFVa3NRMEZCUXl4WFFVRlhMRWRCUVVjc1YwRkJWeXhEUVVGRE8wRkJRM2hFTzBGQlEwRXNTVUZCU1N4UFFVRlBMRTFCUVUwc1EwRkJRenRCUVVOc1FpeEhRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJPMEZCUTBFc1JVRkJSU3hKUVVGSkxFTkJRVU1zUzBGQlN5eEZRVUZGTzBGQlEyUXNTVUZCU1N4UFFVRlBMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEdGQlFXRXNRMEZCUXl4RFFVRkRPMEZCUXpORExFZEJRVWM3UVVGRFNDeEZRVUZGTEVsQlFVa3NRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJRenRCUVVObU8wRkJRMEU3UVVGRFFTeEZRVUZGTEVsQlFVa3NTMEZCU3l4SFFVRkhMRVZCUVVVc1EwRkJRenRCUVVOcVFpeEZRVUZGTEVsQlFVa3NRMEZCUXl4aFFVRmhMRVZCUVVVc1UwRkJVeXhOUVVGTkxFVkJRVVU3UVVGRGRrTXNTVUZCU1N4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlN4VFFVRlRMRWRCUVVjc1JVRkJSVHRCUVVOc1JDeE5RVUZOTEVsQlFVa3NTVUZCU1N4SFFVRkhMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRemxETEUxQlFVMHNTVUZCU1N4SlFVRkpMRVZCUVVVN1FVRkRhRUlzVVVGQlVTeExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhGUVVGRkxFbEJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVXNTVUZCU1N4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU01UXl4UFFVRlBPMEZCUTFBc1MwRkJTeXhEUVVGRExFTkJRVU03UVVGRFVDeEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTk1PMEZCUTBFN1FVRkRRU3hGUVVGRkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1UwRkJVeXhIUVVGSExFVkJRVVU3UVVGRE9VSXNTVUZCU1N4SlFVRkpMRWxCUVVrc1IwRkJSeXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEZEVJc1NVRkJTU3hKUVVGSkxFOUJRVThzU1VGQlNTeEpRVUZKTEZWQlFWVXNSVUZCUlR0QlFVTnVReXhOUVVGTkxFbEJRVWtzVFVGQlRTeEhRVUZITEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNN1FVRkRhRU1zVFVGQlRTeFBRVUZQTEUxQlFVMHNSVUZCUlN4RlFVRkZPMEZCUTNaQ0xGRkJRVkVzU1VGQlNTeExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUjBGQlJ5eEZRVUZGTzBGQlEzSkRMRlZCUVZVc1QwRkJUenRCUVVOcVFpeFRRVUZUTzBGQlExUXNUMEZCVHp0QlFVTlFMRTFCUVUwc1NVRkJTU3hEUVVGRExFOUJRVThzUjBGQlJ5eGxRVUZsTEVOQlFVTXNSMEZCUnl4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRMmhFTEUxQlFVMHNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFZEJRVWNzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUXpsQ0xFdEJRVXM3UVVGRFRDeEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTk1PMEZCUTBFN1FVRkRRU3hGUVVGRkxFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVXNVMEZCVXl4SlFVRkpMRVZCUVVVN1FVRkROMElzU1VGQlNTeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTNwQ0xFZEJRVWNzUTBGQlF5eERRVUZETzBGQlEwdzdRVUZEUVN4RlFVRkZMRU5CUVVNc1EwRkJReXhQUVVGUExFZEJRVWNzVlVGQlZTeERRVUZETzBGQlEzcENMRVZCUVVVc1EwRkJReXhEUVVGRExGZEJRVmNzUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEY0VJN1FVRkRRVHRCUVVOQkxFVkJRVVVzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hUUVVGVExFZEJRVWNzUlVGQlJUdEJRVU01UWl4SlFVRkpMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVjBGQlZ5eERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRVZCUVVVc1JVRkJSU3hUUVVGVExFdEJRVXNzUlVGQlJUdEJRVU42UkN4TlFVRk5MRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRlRUlzUzBGQlN5eERRVUZETEVOQlFVTTdRVUZEVUN4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVOTU8wRkJRMEVzUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXp0QlFVTllMRU5CUVVNN1FVRkRSRHRCUVVOQkxFbEJRVUVzV1VGQll5eEhRVUZIUVN4aFFVRlhPenM3T3pzN096dERRM2hxUWpWQ0xFbEJRVWtzVDBGQlR5eEhRVUZIY0U0c1VVRkJjVUlzUTBGQlF6dEJRVU53UXp0QlFVTkJPMEZCUTBFc1EwRkJRU3hKUVVGSkxFOUJRVThzUjBGQlJ5eFBRVUZQTEVsQlFVa3NTVUZCU1N4UFFVRlBMRU5CUVVNN1FVRkRja003UVVGRFFTeERRVUZCTEZGQlFXTXNSMEZCUnl4UFFVRlBMRU5CUVVFN096czdRVU5NZUVJc1NVRkJTU3hSUVVGUkxFZEJRVWRCTEZWQlFYRkNPMEZCUTNCRExFbEJRVWtzVDBGQlR5eEhRVUZIVVN4bFFVRkJMRVZCUVhGQ0xFTkJRVU03UVVGRGNFTTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTVUZCU1RaTkxHRkJRVmNzUjBGQlJ5eERRVUZETEU5QlFVOHNSMEZCUnl4UlFVRlJMRWRCUVVjc1UwRkJVeXhKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTzBGQlF6ZEVMRVZCUVVVc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkRNVUlzUlVGQlJTeFBRVUZQTEVsQlFVa3NRMEZCUXp0QlFVTmtMRU5CUVVNc1EwRkJRenRCUVVOR08wRkJRMEVzU1VGQlFTeFpRVUZqTEVkQlFVZEJMR0ZCUVZjN08wRkRhRUkxUWl4SlFVRkpMRlZCUVZVc1IwRkJSM0pPTEZkQlFYZENPMEZCUTNwRExFbEJRVWswUWl4VlFVRlJMRWRCUVVkd1FpeFZRVUZ4UWl4RFFVRkRPMEZCUTNKRE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk00VFN4WlFVRlZMRU5CUVVNc1NVRkJTU3hGUVVGRk8wRkJRekZDTEVWQlFVVXNUMEZCVHl4WFFVRlhPMEZCUTNCQ08wRkJRMEU3UVVGRFFUdEJRVU5CTEVsQlFVa3NTVUZCU1N4SlFVRkpMRWRCUVVjc1UwRkJVeXhEUVVGRE8wRkJRM3BDTEVsQlFVa3NVVUZCVVN4SlFVRkpMRU5CUVVNc1RVRkJUVHRCUVVOMlFpeE5RVUZOTEV0QlFVc3NRMEZCUXl4RlFVRkZMRTlCUVU4c1NVRkJTU3hKUVVGSkxFTkJRVU03UVVGRE9VSXNUVUZCVFN4TFFVRkxMRU5CUVVNc1JVRkJSU3hQUVVGUExFbEJRVWtzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRM1pETEUxQlFVMHNTMEZCU3l4RFFVRkRMRVZCUVVVc1QwRkJUeXhKUVVGSkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEYUVRc1RVRkJUU3hMUVVGTExFTkJRVU1zUlVGQlJTeFBRVUZQTEVsQlFVa3NTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEZWtRc1RVRkJUU3hMUVVGTExFTkJRVU1zUlVGQlJTeFBRVUZQTEVsQlFVa3NTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRMnhGTEUxQlFVMHNTMEZCU3l4RFFVRkRMRVZCUVVVc1QwRkJUeXhKUVVGSkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRE0wVXNUVUZCVFN4TFFVRkxMRU5CUVVNc1JVRkJSU3hQUVVGUExFbEJRVWtzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRjRVlzVFVGQlRTeExRVUZMTEVOQlFVTXNSVUZCUlN4UFFVRlBMRWxCUVVrc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRemRHTEV0QlFVczdRVUZEVEN4SlFVRkpMRWxCUVVrc1YwRkJWeXhIUVVGSExGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRPMEZCUTJoRUxGRkJRVkVzVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1YwRkJWeXhGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzBGQlF5OURPMEZCUTBFN1FVRkRRVHRCUVVOQkxFbEJRVWtzVDBGQlR6Rk1MRlZCUVZFc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eE5RVUZOTEVkQlFVY3NWMEZCVnl4RFFVRkRPMEZCUTI1RUxFZEJRVWNzUTBGQlF6dEJRVU5LTEVOQlFVTTdRVUZEUkR0QlFVTkJMRWxCUVVFc1YwRkJZeXhIUVVGSE1Fd3NXVUZCVlRzN1FVTndRek5DTEVsQlFVbEJMRmxCUVZVc1IwRkJSM1JPTEZkQlFYZENPMEZCUTNwRExFbEJRVWx0UWl4TlFVRkpMRWRCUVVkWUxFdEJRV3RDTEVOQlFVTTdRVUZET1VJN1FVRkRRVHRCUVVOQkxFbEJRVWtyVFN4blFrRkJZeXhIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU4yUWp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVME1zV1VGQlZTeERRVUZETEVsQlFVa3NSVUZCUlN4UFFVRlBMRVZCUVVVc1QwRkJUeXhGUVVGRk8wRkJRelZETEVWQlFVVXNTVUZCU1N4TlFVRk5MRWRCUVVjc1QwRkJUeXhIUVVGSFJDeG5Ra0ZCWXp0QlFVTjJReXhOUVVGTkxFbEJRVWtzUjBGQlIwUXNXVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRemxDTzBGQlEwRXNSVUZCUlN4VFFVRlRMRTlCUVU4c1IwRkJSenRCUVVOeVFpeEpRVUZKTEVsQlFVa3NSVUZCUlN4SFFVRkhMRU5CUVVNc1NVRkJTU3hKUVVGSkxFbEJRVWtzUzBGQlMyNU5MRTFCUVVrc1NVRkJTU3hKUVVGSkxGbEJRVmtzVDBGQlR5eEpRVUZKTEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNN1FVRkRPVVVzU1VGQlNTeFBRVUZQTEVWQlFVVXNRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hIUVVGSExFOUJRVThzUjBGQlJ5eEpRVUZKTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNN1FVRkRlRVFzUjBGQlJ6dEJRVU5JTEVWQlFVVXNUMEZCVHl4UFFVRlBMRU5CUVVNN1FVRkRha0lzUTBGQlF6dEJRVU5FTzBGQlEwRXNTVUZCUVN4WFFVRmpMRWRCUVVkeFRTeFpRVUZWT3pzN08wRkRNVUl6UWl4SlFVRkphRVlzVjBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNN1FVRkRla0k3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNVMEZCVTJsR0xHRkJRVmNzUTBGQlF5eEpRVUZKTEVWQlFVVXNVVUZCVVN4RlFVRkZMRTlCUVU4c1JVRkJSU3hUUVVGVExFVkJRVVU3UVVGRGVrUXNSVUZCUlN4SlFVRkpMRk5CUVZNc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRGNFSXNUVUZCVFN4VlFVRlZMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTA3UVVGRE9VSXNUVUZCVFN4aFFVRmhMRWRCUVVjc1QwRkJUeXhEUVVGRExFMUJRVTA3UVVGRGNFTXNUVUZCVFN4VFFVRlRMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRM0JDTEUxQlFVMHNWVUZCVlN4SFFVRkhMRkZCUVZFc1EwRkJReXhOUVVGTk8wRkJRMnhETEUxQlFVMHNWMEZCVnl4SFFVRkhha1lzVjBGQlV5eERRVUZETEZWQlFWVXNSMEZCUnl4aFFVRmhMRVZCUVVVc1EwRkJReXhEUVVGRE8wRkJRelZFTEUxQlFVMHNUVUZCVFN4SFFVRkhMRXRCUVVzc1EwRkJReXhWUVVGVkxFZEJRVWNzVjBGQlZ5eERRVUZETzBGQlF6bERMRTFCUVUwc1YwRkJWeXhIUVVGSExFTkJRVU1zVTBGQlV5eERRVUZETzBGQlF5OUNPMEZCUTBFc1JVRkJSU3hQUVVGUExFVkJRVVVzVTBGQlV5eEhRVUZITEZWQlFWVXNSVUZCUlR0QlFVTnVReXhKUVVGSkxFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4UlFVRlJMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU03UVVGRE5VTXNSMEZCUnp0QlFVTklMRVZCUVVVc1QwRkJUeXhGUVVGRkxGTkJRVk1zUjBGQlJ5eGhRVUZoTEVWQlFVVTdRVUZEZEVNc1NVRkJTU3hKUVVGSkxGZEJRVmNzU1VGQlNTeFRRVUZUTEVkQlFVY3NWVUZCVlN4RlFVRkZPMEZCUXk5RExFMUJRVTBzVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXp0QlFVTnVSQ3hMUVVGTE8wRkJRMHdzUjBGQlJ6dEJRVU5JTEVWQlFVVXNUMEZCVHl4WFFVRlhMRVZCUVVVc1JVRkJSVHRCUVVONFFpeEpRVUZKTEUxQlFVMHNRMEZCUXl4VFFVRlRMRVZCUVVVc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eFRRVUZUTEVWQlFVVXNRMEZCUXl4RFFVRkRPMEZCUXpWRExFZEJRVWM3UVVGRFNDeEZRVUZGTEU5QlFVOHNUVUZCVFN4RFFVRkRPMEZCUTJoQ0xFTkJRVU03UVVGRFJEdEJRVU5CTEVsQlFVRXNXVUZCWXl4SFFVRkhhVVlzWVVGQlZ6czdPenRCUTNKRE5VSXNTVUZCU1dwR0xGZEJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRPMEZCUTNwQ08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZOQlFWTnJSaXhyUWtGQlowSXNRMEZCUXl4SlFVRkpMRVZCUVVVc1VVRkJVU3hGUVVGRkxFOUJRVThzUlVGQlJTeFRRVUZUTEVWQlFVVTdRVUZET1VRc1JVRkJSU3hKUVVGSkxGTkJRVk1zUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEY0VJc1RVRkJUU3hWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMDdRVUZET1VJc1RVRkJUU3haUVVGWkxFZEJRVWNzUTBGQlF5eERRVUZETzBGQlEzWkNMRTFCUVUwc1lVRkJZU3hIUVVGSExFOUJRVThzUTBGQlF5eE5RVUZOTzBGQlEzQkRMRTFCUVUwc1ZVRkJWU3hIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU55UWl4TlFVRk5MRmRCUVZjc1IwRkJSeXhSUVVGUkxFTkJRVU1zVFVGQlRUdEJRVU51UXl4TlFVRk5MRmRCUVZjc1IwRkJSMnhHTEZkQlFWTXNRMEZCUXl4VlFVRlZMRWRCUVVjc1lVRkJZU3hGUVVGRkxFTkJRVU1zUTBGQlF6dEJRVU0xUkN4TlFVRk5MRTFCUVUwc1IwRkJSeXhMUVVGTExFTkJRVU1zVjBGQlZ5eEhRVUZITEZkQlFWY3NRMEZCUXp0QlFVTXZReXhOUVVGTkxGZEJRVmNzUjBGQlJ5eERRVUZETEZOQlFWTXNRMEZCUXp0QlFVTXZRanRCUVVOQkxFVkJRVVVzVDBGQlR5eEZRVUZGTEZOQlFWTXNSMEZCUnl4WFFVRlhMRVZCUVVVN1FVRkRjRU1zU1VGQlNTeE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETzBGQlEzaERMRWRCUVVjN1FVRkRTQ3hGUVVGRkxFbEJRVWtzVFVGQlRTeEhRVUZITEZOQlFWTXNRMEZCUXp0QlFVTjZRaXhGUVVGRkxFOUJRVThzUlVGQlJTeFZRVUZWTEVkQlFVY3NWMEZCVnl4RlFVRkZPMEZCUTNKRExFbEJRVWtzVFVGQlRTeERRVUZETEUxQlFVMHNSMEZCUnl4VlFVRlZMRU5CUVVNc1IwRkJSeXhSUVVGUkxFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdRVUZEZGtRc1IwRkJSenRCUVVOSUxFVkJRVVVzVDBGQlR5eEZRVUZGTEZsQlFWa3NSMEZCUnl4aFFVRmhMRVZCUVVVN1FVRkRla01zU1VGQlNTeEpRVUZKTEZkQlFWY3NTVUZCU1N4VFFVRlRMRWRCUVVjc1ZVRkJWU3hGUVVGRk8wRkJReTlETEUxQlFVMHNUVUZCVFN4RFFVRkRMRTFCUVUwc1IwRkJSeXhQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1UwRkJVeXhGUVVGRkxFTkJRVU1zUTBGQlF6dEJRVU5xUlN4TFFVRkxPMEZCUTB3c1IwRkJSenRCUVVOSUxFVkJRVVVzVDBGQlR5eE5RVUZOTEVOQlFVTTdRVUZEYUVJc1EwRkJRenRCUVVORU8wRkJRMEVzU1VGQlFTeHBRa0ZCWXl4SFFVRkhhMFlzYTBKQlFXZENPenM3T3pzN096czdPenRCUTJoRGFrTXNVMEZCVTBNc1kwRkJXU3hEUVVGRExFdEJRVXNzUlVGQlJTeFhRVUZYTEVWQlFVVTdRVUZETVVNc1JVRkJSU3hKUVVGSkxFMUJRVTBzUjBGQlJ5eExRVUZMTEVOQlFVTXNUVUZCVFR0QlFVTXpRaXhOUVVGTkxFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEYWtJN1FVRkRRU3hGUVVGRkxFOUJRVThzVFVGQlRTeEZRVUZGTEVWQlFVVTdRVUZEYmtJc1NVRkJTU3hKUVVGSkxFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4WFFVRlhMRVZCUVVVN1FVRkRka01zVFVGQlRTeEZRVUZGTEUxQlFVMHNRMEZCUXp0QlFVTm1MRXRCUVVzN1FVRkRUQ3hIUVVGSE8wRkJRMGdzUlVGQlJTeFBRVUZQTEUxQlFVMHNRMEZCUXp0QlFVTm9RaXhEUVVGRE8wRkJRMFE3UVVGRFFTeEpRVUZCTEdGQlFXTXNSMEZCUjBFc1kwRkJXVHM3T3pzN096czdPenM3T3pzN1FVTm1OMElzUTBGQlFTeFRRVUZUTEZWQlFWVXNSMEZCUnp0QlFVTjBRanRGUVVORE8wRkJRMFE3UVVGRFFTeERRVUZCTEZkQlFXTXNSMEZCUnl4VlFVRlZMRU5CUVVFN096czdPenM3T3pzN1EwTlVNMElzU1VGQlNTeFZRVUZWTEVkQlFVY3pUaXhYUVVGM1FqdExRVU55UXl4VlFVRlZMRWRCUVVkUkxHdENRVUZCTEVWQlFYZENMRU5CUVVNN1FVRkRNVU03UVVGRFFUdERRVU5CTEVsQlFVa3NaMEpCUVdkQ0xFZEJRVWNzVlVGQlZTeERRVUZETzBGQlEyeERPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRMEZEUVN4VFFVRlRMRmRCUVZjc1EwRkJReXhMUVVGTExFVkJRVVU3UVVGRE5VSXNSMEZCUlN4SlFVRkpMRU5CUVVNc1YwRkJWeXhIUVVGSExFdEJRVXNzUTBGQlF6dEJRVU16UWl4SFFVRkZMRWxCUVVrc1EwRkJReXhYUVVGWExFZEJRVWNzUlVGQlJTeERRVUZETzBGQlEzaENMRWRCUVVVc1NVRkJTU3hEUVVGRExFOUJRVThzUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEYmtJc1IwRkJSU3hKUVVGSkxFTkJRVU1zV1VGQldTeEhRVUZITEV0QlFVc3NRMEZCUXp0QlFVTTFRaXhIUVVGRkxFbEJRVWtzUTBGQlF5eGhRVUZoTEVkQlFVY3NSVUZCUlN4RFFVRkRPMEZCUXpGQ0xFZEJRVVVzU1VGQlNTeERRVUZETEdGQlFXRXNSMEZCUnl4blFrRkJaMElzUTBGQlF6dEJRVU40UXl4SFFVRkZMRWxCUVVrc1EwRkJReXhUUVVGVExFZEJRVWNzUlVGQlJTeERRVUZETzBWQlEzSkNPMEZCUTBRN1FVRkRRVHREUVVOQkxGZEJRVmNzUTBGQlF5eFRRVUZUTEVkQlFVY3NWVUZCVlN4RFFVRkRMRlZCUVZVc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF6dEJRVU42UkN4RFFVRkJMRmRCUVZjc1EwRkJReXhUUVVGVExFTkJRVU1zVjBGQlZ5eEhRVUZITEZkQlFWY3NRMEZCUXp0QlFVTm9SRHRCUVVOQkxFTkJRVUVzV1VGQll5eEhRVUZITEZkQlFWY3NRMEZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU5tTlVJc1EwRkJRU3hUUVVGVExFbEJRVWtzUjBGQlJ6dEJRVU5vUWp0RlFVTkRPMEZCUTBRN1FVRkRRU3hEUVVGQkxFMUJRV01zUjBGQlJ5eEpRVUZKTEVOQlFVRTdPenM3T3pzN096czdRME5vUW5KQ0xFbEJRVWtzVDBGQlR5eEhRVUZIVWl4bFFVRnhRaXhGUVVGQk8wdEJReTlDTEVsQlFVa3NSMEZCUjFFc1YwRkJRU3hGUVVGcFFpeERRVUZETzBGQlF6ZENPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRMEZEUVN4SlFVRkpMRTlCUVU4c1IwRkJSeXhEUVVGRExFOUJRVThzUjBGQlJ5eEpRVUZKTEVkQlFVY3NVMEZCVXl4SlFVRkpMRVZCUVVVN1FVRkRMME1zUjBGQlJTeFBRVUZQTEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRE0wSXNSVUZCUXl4RFFVRkRPMEZCUTBZN1FVRkRRU3hEUVVGQkxGRkJRV01zUjBGQlJ5eFBRVUZQTEVOQlFVRTdPenM3T3pzN096czdPenREUTJKNFFpeEpRVUZKTEZOQlFWTXNSMEZCUnl4RlFVRkZMRU5CUVVNN1FVRkRia0k3UVVGRFFTeERRVUZCTEZWQlFXTXNSMEZCUnl4VFFVRlRMRU5CUVVFN096czdPenM3T3pzN1EwTklNVUlzU1VGQlNTeFRRVUZUTEVkQlFVZFNMR2xDUVVGQkxFVkJRWFZDTEVOQlFVTTdRVUZEZUVNN1FVRkRRVHRCUVVOQkxFTkJRVUVzU1VGQlNTeFhRVUZYTEVkQlFVY3NUVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJRenRCUVVOdVF6dEJRVU5CTzBGQlEwRXNRMEZCUVN4SlFVRkpMR05CUVdNc1IwRkJSeXhYUVVGWExFTkJRVU1zWTBGQll5eERRVUZETzBGQlEyaEVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRMEZEUVN4VFFVRlRMRmRCUVZjc1EwRkJReXhKUVVGSkxFVkJRVVU3UjBGRGVrSXNTVUZCU1N4TlFVRk5MRWxCUVVrc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eEZRVUZGTEVOQlFVTTdRVUZETDBJc1QwRkJUU3hMUVVGTExFZEJRVWNzVTBGQlV5eERRVUZETEUxQlFVMHNRMEZCUXp0QlFVTXZRaXhQUVVGTkxFMUJRVTBzUjBGQlJ5eGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1JVRkJSU3hOUVVGTkxFTkJRVU1zUjBGQlJ5eExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVONlJUdEhRVU5GTEU5QlFVOHNUVUZCVFN4RlFVRkZMRVZCUVVVN1FVRkRia0lzUzBGQlNTeEpRVUZKTEVsQlFVa3NSMEZCUnl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRE8wRkJRelZDTEZOQlFWRXNVMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU03UzBGRE1VSXNTVUZCU1N4VFFVRlRMRWxCUVVrc1NVRkJTU3hKUVVGSkxGTkJRVk1zU1VGQlNTeEpRVUZKTEVWQlFVVTdRVUZEYUVRc1QwRkJUU3hQUVVGUExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTTdUVUZEYkVJN1NVRkRSanRIUVVORUxFOUJRVThzVFVGQlRTeERRVUZETzBWQlEyWTdRVUZEUkR0QlFVTkJMRU5CUVVFc1dVRkJZeXhIUVVGSExGZEJRVmNzUTBGQlFUczdPenM3T3pzN096dERRemxDTlVJc1NVRkJTU3hWUVVGVkxFZEJRVWRCTEZkQlFYZENPMHRCUTNKRExGVkJRVlVzUjBGQlIxRXNhMEpCUVVFc1JVRkJkMElzUTBGQlF6dEJRVU14UXp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNRMEZCUVN4VFFVRlRMR0ZCUVdFc1EwRkJReXhMUVVGTExFVkJRVVVzVVVGQlVTeEZRVUZGTzBGQlEzaERMRWRCUVVVc1NVRkJTU3hEUVVGRExGZEJRVmNzUjBGQlJ5eExRVUZMTEVOQlFVTTdRVUZETTBJc1IwRkJSU3hKUVVGSkxFTkJRVU1zVjBGQlZ5eEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTjRRaXhIUVVGRkxFbEJRVWtzUTBGQlF5eFRRVUZUTEVkQlFVY3NRMEZCUXl4RFFVRkRMRkZCUVZFc1EwRkJRenRCUVVNNVFpeEhRVUZGTEVsQlFVa3NRMEZCUXl4VFFVRlRMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRM0pDTEVkQlFVVXNTVUZCU1N4RFFVRkRMRlZCUVZVc1IwRkJSeXhUUVVGVExFTkJRVU03UlVGRE4wSTdRVUZEUkR0RFFVTkJMR0ZCUVdFc1EwRkJReXhUUVVGVExFZEJRVWNzVlVGQlZTeERRVUZETEZWQlFWVXNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenRCUVVNelJDeERRVUZCTEdGQlFXRXNRMEZCUXl4VFFVRlRMRU5CUVVNc1YwRkJWeXhIUVVGSExHRkJRV0VzUTBGQlF6dEJRVU53UkR0QlFVTkJMRU5CUVVFc1kwRkJZeXhIUVVGSExHRkJRV0VzUTBGQlFUczdPenM3T3pzN096dERRM0pDT1VJc1NVRkJTU3hYUVVGWExFZEJRVWRTTEcxQ1FVRjVRaXhGUVVGQk8wdEJRM1pETEdGQlFXRXNSMEZCUjFFc2NVSkJRVEpDTEVWQlFVRTdTMEZETTBNc1UwRkJVeXhIUVVGSFF5eFZRVUYxUWl4RFFVRkRPMEZCUTNoRE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1EwRkRRU3hUUVVGVExGbEJRVmtzUTBGQlF5eFBRVUZQTEVWQlFVVTdRVUZETDBJc1IwRkJSU3hKUVVGSkxFOUJRVThzV1VGQldTeFhRVUZYTEVWQlFVVTdRVUZEZEVNc1MwRkJTU3hQUVVGUExFOUJRVThzUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXp0SlFVTjRRanRCUVVOSUxFZEJRVVVzU1VGQlNTeE5RVUZOTEVkQlFVY3NTVUZCU1N4aFFVRmhMRU5CUVVNc1QwRkJUeXhEUVVGRExGZEJRVmNzUlVGQlJTeFBRVUZQTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1IwRkRka1VzVFVGQlRTeERRVUZETEZkQlFWY3NSMEZCUnl4VFFVRlRMRU5CUVVNc1QwRkJUeXhEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETzBGQlEzUkVMRWRCUVVVc1RVRkJUU3hEUVVGRExGTkJRVk1zU1VGQlNTeFBRVUZQTEVOQlFVTXNVMEZCVXl4RFFVRkRPMEZCUTNoRExFZEJRVVVzVFVGQlRTeERRVUZETEZWQlFWVXNSMEZCUnl4UFFVRlBMRU5CUVVNc1ZVRkJWU3hEUVVGRE8wZEJRM1pETEU5QlFVOHNUVUZCVFN4RFFVRkRPMFZCUTJZN1FVRkRSRHRCUVVOQkxFTkJRVUVzWVVGQll5eEhRVUZITEZsQlFWa3NRMEZCUVRzN096czdPenM3T3p0RFEzUkNOMElzU1VGQlNTeFhRVUZYTEVkQlFVZFVMRzFDUVVGNVFpeEZRVUZCTzB0QlEzWkRMR0ZCUVdFc1IwRkJSMUVzY1VKQlFUSkNMRVZCUVVFN1MwRkRNME1zVlVGQlZTeEhRVUZIUXl4clFrRkJkMElzUlVGQlFUdExRVU55UXl4UFFVRlBMRWRCUVVkRExGTkJRVzlDTzB0QlF6bENMRmxCUVZrc1IwRkJSME1zWTBGQmVVSTdTMEZEZUVNc1dVRkJXU3hIUVVGSEswTXNiMEpCUVVFc1JVRkJNRUlzUTBGQlF6dEJRVU01UXp0QlFVTkJPMEZCUTBFc1EwRkJRU3hKUVVGSkxGZEJRVmNzUjBGQlJ5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRPMEZCUTI1RE8wRkJRMEU3UVVGRFFTeERRVUZCTEVsQlFVa3NZMEZCWXl4SFFVRkhMRmRCUVZjc1EwRkJReXhqUVVGakxFTkJRVU03UVVGRGFFUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRMEZEUVN4VFFVRlRMRTFCUVUwc1EwRkJReXhMUVVGTExFVkJRVVU3UVVGRGRrSXNSMEZCUlN4SlFVRkpMRmxCUVZrc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hGUVVGRkxFdEJRVXNzV1VGQldTeFhRVUZYTEVOQlFVTXNSVUZCUlR0QlFVTnFSaXhMUVVGSkxFbEJRVWtzUzBGQlN5eFpRVUZaTEdGQlFXRXNSVUZCUlR0UFFVTnNReXhQUVVGUExFdEJRVXNzUTBGQlF6dE5RVU5rTzB0QlEwUXNTVUZCU1N4alFVRmpMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUlVGQlJTeGhRVUZoTEVOQlFVTXNSVUZCUlR0QlFVTnVSQ3hQUVVGTkxFOUJRVThzV1VGQldTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMDFCUXpWQ08wbEJRMFk3UVVGRFNDeEhRVUZGTEU5QlFVOHNTVUZCU1N4aFFVRmhMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03UlVGRGFrTTdRVUZEUkR0QlFVTkJPMEZCUTBFc1EwRkJRU3hOUVVGTkxFTkJRVU1zVTBGQlV5eEhRVUZITEZWQlFWVXNRMEZCUXl4VFFVRlRMRU5CUVVNN1FVRkRlRU1zUTBGQlFTeE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRmRCUVZjc1IwRkJSeXhOUVVGTkxFTkJRVU03UVVGRGRFTTdRVUZEUVN4RFFVRkJMR0ZCUVdNc1IwRkJSeXhOUVVGTkxFTkJRVUU3T3pzN096czdPenM3UTBOc1NuWkNMRWxCUVVrc1YwRkJWeXhIUVVGSE1VUXNiVUpCUVhsQ0xFVkJRVUU3UzBGRGRrTXNUMEZCVHl4SFFVRkhVU3hsUVVGeFFpeEZRVUZCTzB0QlF5OUNMRmRCUVZjc1IwRkJSME1zYlVKQlFYbENMRVZCUVVFN1MwRkRka01zVFVGQlRTeEhRVUZIUXl4dlFrRkJRU3hGUVVFd1FpeERRVUZETzBGQlEzaERPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0RFFVTkJMRk5CUVZNc1ZVRkJWU3hEUVVGRExFbEJRVWtzUlVGQlJUdEJRVU14UWl4SFFVRkZMRWxCUVVrc1VVRkJVU3hIUVVGSExGZEJRVmNzUTBGQlF5eEpRVUZKTEVOQlFVTTdRVUZEYkVNc1QwRkJUU3hMUVVGTExFZEJRVWNzVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMEZCUXk5Q08wRkJRMEVzUjBGQlJTeEpRVUZKTEU5QlFVOHNTMEZCU3l4SlFVRkpMRlZCUVZVc1NVRkJTU3hGUVVGRkxGRkJRVkVzU1VGQlNTeFhRVUZYTEVOQlFVTXNVMEZCVXl4RFFVRkRMRVZCUVVVN1MwRkRkRVVzVDBGQlR5eExRVUZMTEVOQlFVTTdTVUZEWkR0QlFVTklMRWRCUVVVc1NVRkJTU3hKUVVGSkxFdEJRVXNzUzBGQlN5eEZRVUZGTzB0QlEyeENMRTlCUVU4c1NVRkJTU3hEUVVGRE8wbEJRMkk3UVVGRFNDeEhRVUZGTEVsQlFVa3NTVUZCU1N4SFFVRkhMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEhRVU14UWl4UFFVRlBMRU5CUVVNc1EwRkJReXhKUVVGSkxFbEJRVWtzU1VGQlNTeExRVUZMTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRGUVVOdVF6dEJRVU5FTzBGQlEwRXNRMEZCUVN4WFFVRmpMRWRCUVVjc1ZVRkJWU3hEUVVGQk96czdPMEZETTBJelFpeEpRVUZKTWswc1lVRkJWeXhIUVVGSGNrNHNXVUZCZVVJN1FVRkRNME1zU1VGQlNTeFJRVUZSTEVkQlFVZFJMRk5CUVhOQ0xFTkJRVU03UVVGRGRFTTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzU1VGQlNXOU9MRk5CUVU4c1IwRkJSeXhSUVVGUkxFTkJRVU5RTEdGQlFWY3NRMEZCUXl4RFFVRkRPMEZCUTNCRE8wRkJRMEVzU1VGQlFTeFJRVUZqTEVkQlFVZFBMRk5CUVU4N096czdRVU5zUW5oQ0xFbEJRVWtzWVVGQllTeEhRVUZITEcxRFFVRnRRenRCUVVOMlJDeEpRVUZKTEdOQlFXTXNSMEZCUnl4UFFVRlBMRU5CUVVNN1FVRkROMEk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk5ETEdkQ1FVRmpMRU5CUVVNc1RVRkJUU3hGUVVGRk8wRkJRMmhETEVWQlFVVXNTVUZCU1N4TFFVRkxMRWRCUVVjc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUXp0QlFVTXhReXhGUVVGRkxFOUJRVThzUzBGQlN5eEhRVUZITEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zWTBGQll5eERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRPMEZCUTNKRUxFTkJRVU03UVVGRFJEdEJRVU5CTEVsQlFVRXNaVUZCWXl4SFFVRkhRU3huUWtGQll6czdPenRCUTJZdlFpeEpRVUZKTEdGQlFXRXNSMEZCUnl3eVEwRkJNa01zUTBGQlF6dEJRVU5vUlR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRReXh0UWtGQmFVSXNRMEZCUXl4TlFVRk5MRVZCUVVVc1QwRkJUeXhGUVVGRk8wRkJRelZETEVWQlFVVXNTVUZCU1N4TlFVRk5MRWRCUVVjc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF6dEJRVU01UWl4RlFVRkZMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVU3UVVGRFppeEpRVUZKTEU5QlFVOHNUVUZCVFN4RFFVRkRPMEZCUTJ4Q0xFZEJRVWM3UVVGRFNDeEZRVUZGTEVsQlFVa3NVMEZCVXl4SFFVRkhMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRE4wSXNSVUZCUlN4UFFVRlBMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4SFFVRkhMRWxCUVVrc1IwRkJSeXhGUVVGRkxFbEJRVWtzVDBGQlR5eERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMEZCUTNKRkxFVkJRVVVzVDBGQlR5eEhRVUZITEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVkQlFVY3NSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRiRVFzUlVGQlJTeFBRVUZQTEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1lVRkJZU3hGUVVGRkxITkNRVUZ6UWl4SFFVRkhMRTlCUVU4c1IwRkJSeXhSUVVGUkxFTkJRVU1zUTBGQlF6dEJRVU53Uml4RFFVRkRPMEZCUTBRN1FVRkRRU3hKUVVGQkxHdENRVUZqTEVkQlFVZEJMRzFDUVVGcFFqczdPenM3T3pzN096czdPenM3T3pzN096czdRME5ZYkVNc1UwRkJVeXhoUVVGaExFTkJRVU1zUzBGQlN5eEZRVUZGTEZOQlFWTXNSVUZCUlN4VFFVRlRMRVZCUVVVc1UwRkJVeXhGUVVGRk8wRkJReTlFTEVkQlFVVXNTVUZCU1N4TlFVRk5MRWRCUVVjc1MwRkJTeXhEUVVGRExFMUJRVTA3VDBGRGNrSXNTMEZCU3l4SFFVRkhMRk5CUVZNc1NVRkJTU3hUUVVGVExFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRMME03UjBGRFJTeFJRVUZSTEZOQlFWTXNSMEZCUnl4TFFVRkxMRVZCUVVVc1IwRkJSeXhGUVVGRkxFdEJRVXNzUjBGQlJ5eE5RVUZOTEVkQlFVYzdRVUZEYmtRc1MwRkJTU3hKUVVGSkxGTkJRVk1zUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUTBGQlF5eEZRVUZGTzA5QlEzcERMRTlCUVU4c1MwRkJTeXhEUVVGRE8wMUJRMlE3U1VGRFJqdEhRVU5FTEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNN1JVRkRXRHRCUVVORU8wRkJRMEVzUTBGQlFTeGpRVUZqTEVkQlFVY3NZVUZCWVN4RFFVRkJPenM3T3pzN096czdPenM3T3pzN096czdRME5vUWpsQ0xGTkJRVk1zVTBGQlV5eERRVUZETEV0QlFVc3NSVUZCUlR0QlFVTXhRaXhIUVVGRkxFOUJRVThzUzBGQlN5eExRVUZMTEV0QlFVc3NRMEZCUXp0RlFVTjRRanRCUVVORU8wRkJRMEVzUTBGQlFTeFZRVUZqTEVkQlFVY3NVMEZCVXl4RFFVRkJPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVORU1VSXNRMEZCUVN4VFFVRlRMR0ZCUVdFc1EwRkJReXhMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEZOQlFWTXNSVUZCUlR0QlFVTm9SQ3hIUVVGRkxFbEJRVWtzUzBGQlN5eEhRVUZITEZOQlFWTXNSMEZCUnl4RFFVRkRPMEZCUXpOQ0xFOUJRVTBzVFVGQlRTeEhRVUZITEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNN1FVRkROVUk3UVVGRFFTeEhRVUZGTEU5QlFVOHNSVUZCUlN4TFFVRkxMRWRCUVVjc1RVRkJUU3hGUVVGRk8wRkJRek5DTEV0QlFVa3NTVUZCU1N4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRVXNzUzBGQlN5eEZRVUZGTzA5QlF6RkNMRTlCUVU4c1MwRkJTeXhEUVVGRE8wMUJRMlE3U1VGRFJqdEhRVU5FTEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNN1JVRkRXRHRCUVVORU8wRkJRMEVzUTBGQlFTeGpRVUZqTEVkQlFVY3NZVUZCWVN4RFFVRkJPenM3T3pzN096czdPME5EZEVJNVFpeEpRVUZKTEdGQlFXRXNSMEZCUnpsT0xIRkNRVUV5UWl4RlFVRkJPMHRCUXpORExGTkJRVk1zUjBGQlIxRXNhVUpCUVhWQ0xFVkJRVUU3UzBGRGJrTXNZVUZCWVN4SFFVRkhReXh4UWtGQlFTeEZRVUV5UWl4RFFVRkRPMEZCUTJoRU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUTBGQlFTeFRRVUZUTEZkQlFWY3NRMEZCUXl4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxGTkJRVk1zUlVGQlJUdEhRVU0xUXl4UFFVRlBMRXRCUVVzc1MwRkJTeXhMUVVGTE8wRkJRM2hDTEU5QlFVMHNZVUZCWVN4RFFVRkRMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzVTBGQlV5eERRVUZETzA5QlEzUkRMR0ZCUVdFc1EwRkJReXhMUVVGTExFVkJRVVVzVTBGQlV5eEZRVUZGTEZOQlFWTXNRMEZCUXl4RFFVRkRPMFZCUTJoRU8wRkJRMFE3UVVGRFFTeERRVUZCTEZsQlFXTXNSMEZCUnl4WFFVRlhMRU5CUVVFN096czdPenM3T3pzN1EwTnVRalZDTEVsQlFVa3NWMEZCVnl4SFFVRkhWQ3h0UWtGQlFTeEZRVUY1UWl4RFFVRkRPMEZCUXpWRE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUTBGQlFTeFRRVUZUTEdGQlFXRXNRMEZCUXl4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRk8wRkJRM0pETEVkQlFVVXNTVUZCU1N4TlFVRk5MRWRCUVVjc1MwRkJTeXhKUVVGSkxFbEJRVWtzUjBGQlJ5eERRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJRenRCUVVOb1JDeEhRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkRMRTFCUVUwc1NVRkJTU3hYUVVGWExFTkJRVU1zUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dEZRVU4wUkR0QlFVTkVPMEZCUTBFc1EwRkJRU3hqUVVGakxFZEJRVWNzWVVGQllTeERRVUZCT3pzN08wRkRhRUk1UWl4SlFVRkpaMDRzVjBGQlV5eEhRVUZIYUU0c1ZVRkJkVUk3UVVGRGRrTXNTVUZCU1N4aFFVRmhMRWRCUVVkUkxIRkNRVUZCTEVWQlFUSkNMRU5CUVVNN1FVRkRhRVE3UVVGRFFUdEJRVU5CTEVsQlFVa3JUU3huUWtGQll5eEhRVUZITEVOQlFVTTdRVUZEZEVJc1NVRkJTVkVzYjBKQlFXdENMRWRCUVVjc1EwRkJRenRCUVVNeFFpeEpRVUZKUXl4cFFrRkJaU3hIUVVGSExFTkJRVU03UVVGRGRrSXNTVUZCU1VNc2RVSkJRWEZDTEVkQlFVY3NSVUZCUlR0QlFVTTVRaXhKUVVGSlF5eHRRa0ZCYVVJc1IwRkJSeXhGUVVGRk8wRkJRekZDTEVsQlFVbERMSGxDUVVGMVFpeEhRVUZITEVWQlFVVTdRVUZEYUVNc1NVRkJTVU1zWlVGQllTeEhRVUZITEVkQlFVYzdRVUZEZGtJc1NVRkJTVU1zYVVKQlFXVXNSMEZCUnl4SFFVRkhPMEZCUTNwQ0xFbEJRVWxETEdkQ1FVRmpMRWRCUVVjc1IwRkJSeXhEUVVGRE8wRkJRM3BDTzBGQlEwRTdRVUZEUVN4SlFVRkpMRk5CUVZNc1IwRkJSenRCUVVOb1FpeEZRVUZGTEVOQlFVTXNTMEZCU3l4RlFVRkZSaXhsUVVGaExFTkJRVU03UVVGRGVFSXNSVUZCUlN4RFFVRkRMRTFCUVUwc1JVRkJSV0lzWjBKQlFXTXNRMEZCUXp0QlFVTXhRaXhGUVVGRkxFTkJRVU1zVTBGQlV5eEZRVUZGVVN4dlFrRkJhMElzUTBGQlF6dEJRVU5xUXl4RlFVRkZMRU5CUVVNc1QwRkJUeXhGUVVGRlF5eHBRa0ZCWlN4RFFVRkRPMEZCUXpWQ0xFVkJRVVVzUTBGQlF5eFpRVUZaTEVWQlFVVkRMSFZDUVVGeFFpeERRVUZETzBGQlEzWkRMRVZCUVVVc1EwRkJReXhOUVVGTkxFVkJRVVZMTEdkQ1FVRmpMRU5CUVVNN1FVRkRNVUlzUlVGQlJTeERRVUZETEZOQlFWTXNSVUZCUlVvc2JVSkJRV2xDTEVOQlFVTTdRVUZEYUVNc1JVRkJSU3hEUVVGRExHTkJRV01zUlVGQlJVTXNlVUpCUVhWQ0xFTkJRVU03UVVGRE0wTXNSVUZCUlN4RFFVRkRMRTlCUVU4c1JVRkJSVVVzYVVKQlFXVXNRMEZCUXp0QlFVTTFRaXhEUVVGRExFTkJRVU03UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFRRVUZUUlN4dFFrRkJhVUlzUTBGQlF5eFBRVUZQTEVWQlFVVXNUMEZCVHl4RlFVRkZPMEZCUXpkRExFVkJRVVYyUWl4WFFVRlRMRU5CUVVNc1UwRkJVeXhGUVVGRkxGTkJRVk1zU1VGQlNTeEZRVUZGTzBGQlEzUkRMRWxCUVVrc1NVRkJTU3hMUVVGTExFZEJRVWNzU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVNdlFpeEpRVUZKTEVsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNZVUZCWVN4RFFVRkRMRTlCUVU4c1JVRkJSU3hMUVVGTExFTkJRVU1zUlVGQlJUdEJRVU12UkN4TlFVRk5MRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdRVUZETVVJc1MwRkJTenRCUVVOTUxFZEJRVWNzUTBGQlF5eERRVUZETzBGQlEwd3NSVUZCUlN4UFFVRlBMRTlCUVU4c1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF6dEJRVU40UWl4RFFVRkRPMEZCUTBRN1FVRkRRU3hKUVVGQkxHdENRVUZqTEVkQlFVZDFRaXh0UWtGQmFVSTdPMEZETjBOc1F5eEpRVUZKTEdOQlFXTXNSMEZCUjNaUExHVkJRVFJDTzBGQlEycEVMRWxCUVVrc2FVSkJRV2xDTEVkQlFVZFJMR3RDUVVFclFqdEJRVU4yUkN4SlFVRkpMRmRCUVZjc1IwRkJSME1zV1VGQmVVSTdRVUZETTBNc1NVRkJTU3hwUWtGQmFVSXNSMEZCUjBNc2EwSkJRU3RDTEVOQlFVTTdRVUZEZUVRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk00VGl4cFFrRkJaU3hEUVVGRExFOUJRVThzUlVGQlJTeFRRVUZUTEVWQlFVVXNUMEZCVHl4RlFVRkZPMEZCUTNSRUxFVkJRVVVzU1VGQlNTeE5RVUZOTEVsQlFVa3NVMEZCVXl4SFFVRkhMRVZCUVVVc1EwRkJReXhEUVVGRE8wRkJRMmhETEVWQlFVVXNUMEZCVHl4WFFVRlhMRU5CUVVNc1QwRkJUeXhGUVVGRkxHbENRVUZwUWl4RFFVRkRMRTFCUVUwc1JVRkJSU3hwUWtGQmFVSXNRMEZCUXl4alFVRmpMRU5CUVVNc1RVRkJUU3hEUVVGRExFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUXpkSExFTkJRVU03UVVGRFJEdEJRVU5CTEVsQlFVRXNaMEpCUVdNc1IwRkJSMEVzYVVKQlFXVTdPMEZEY0VKb1F5eEpRVUZKTEZWQlFWVXNSMEZCUjNoUExHdENRVUYzUWl4RlFVRkJPMEZCUTNwRExFbEJRVWswVGl4VFFVRlBMRWRCUVVkd1RpeFJRVUZ4UWp0QlFVTnVReXhKUVVGSlowOHNhVUpCUVdVc1IwRkJSeTlPTEdkQ1FVRTJRaXhEUVVGRE8wRkJRM0JFTzBGQlEwRTdRVUZEUVN4SlFVRkpPRTBzWjBKQlFXTXNSMEZCUnl4RFFVRkRPMEZCUTNSQ0xFbEJRVWxSTEc5Q1FVRnJRaXhIUVVGSExFTkJRVU03UVVGRE1VSXNTVUZCU1ZVc2RVSkJRWEZDTEVkQlFVY3NRMEZCUXp0QlFVTTNRaXhKUVVGSlZDeHBRa0ZCWlN4SFFVRkhMRU5CUVVNN1FVRkRka0lzU1VGQlNVVXNiVUpCUVdsQ0xFZEJRVWNzUlVGQlJUdEJRVU14UWl4SlFVRkpReXg1UWtGQmRVSXNSMEZCUnl4RlFVRkZMRU5CUVVNN1FVRkRha003UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVTBGQlUwOHNaVUZCWVN4RFFVRkRMRWxCUVVrc1JVRkJSU3hQUVVGUExFVkJRVVVzVVVGQlVTeEZRVUZGTEZkQlFWY3NSVUZCUlN4UFFVRlBMRVZCUVVVc1VVRkJVU3hGUVVGRkxFOUJRVThzUlVGQlJTeE5RVUZOTEVWQlFVVXNSMEZCUnl4RlFVRkZMRXRCUVVzc1JVRkJSVHRCUVVNM1J5eEZRVUZGTEVsQlFVa3NUMEZCVHl4SFFVRkhMRTlCUVU4c1IwRkJSMVlzYVVKQlFXVTdRVUZEZWtNc1RVRkJUU3hWUVVGVkxFZEJRVWNzVDBGQlR5eEhRVUZITEU5QlFVOHNSMEZCUnl4VFFVRlRPMEZCUTJoRUxFMUJRVTBzWlVGQlpTeEhRVUZITEU5QlFVOHNSMEZCUnl4VFFVRlRMRWRCUVVjc1QwRkJUenRCUVVOeVJDeE5RVUZOTEZkQlFWY3NSMEZCUnl4UFFVRlBMRWRCUVVjc1VVRkJVU3hIUVVGSExGTkJRVk03UVVGRGJFUXNUVUZCVFN4blFrRkJaMElzUjBGQlJ5eFBRVUZQTEVkQlFVY3NVMEZCVXl4SFFVRkhMRkZCUVZFc1EwRkJRenRCUVVONFJEdEJRVU5CTEVWQlFVVXNUMEZCVHl4TFFVRkxMRTlCUVU4c1IwRkJSMFVzYlVKQlFXbENMRWRCUVVkRExIbENRVUYxUWl4RFFVRkRMRU5CUVVNN1FVRkRja1VzUlVGQlJTeFBRVUZQTEVsQlFVa3NSVUZCUlN4UFFVRlBMRWRCUVVkQkxIbENRVUYxUWl4SFFVRkhSQ3h0UWtGQmFVSXNRMEZCUXl4RFFVRkRPMEZCUTNSRk8wRkJRMEVzUlVGQlJTeEpRVUZKTEVWQlFVVXNUMEZCVHl4SFFVRkhUeXgxUWtGQmNVSXNRMEZCUXl4RlFVRkZPMEZCUXpGRExFbEJRVWtzVDBGQlR5eEpRVUZKTEVWQlFVVnNRaXhuUWtGQll5eEhRVUZIVVN4dlFrRkJhMElzUTBGQlF5eERRVUZETzBGQlEzUkVMRWRCUVVjN1FVRkRTQ3hGUVVGRkxFbEJRVWtzVDBGQlR5eEhRVUZITzBGQlEyaENMRWxCUVVrc1NVRkJTU3hGUVVGRkxFOUJRVThzUlVGQlJTeFBRVUZQTEVWQlFVVXNWMEZCVnl4RlFVRkZMRlZCUVZVc1JVRkJSU3huUWtGQlowSTdRVUZEY2tVc1NVRkJTU3hsUVVGbExFVkJRVVVzVFVGQlRTeEZRVUZGTEVkQlFVY3NSVUZCUlN4TFFVRkxPMEZCUTNaRExFZEJRVWNzUTBGQlF6dEJRVU5LTzBGQlEwRXNSVUZCUlN4SlFVRkpMRTFCUVUwc1IwRkJSeXhSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEZOQlFWTXNSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJRenRCUVVOc1JDeEZRVUZGTEVsQlFVa3NWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRk8wRkJRM2hDTEVsQlFVbElMRk5CUVU4c1EwRkJReXhOUVVGTkxFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTTdRVUZETjBJc1IwRkJSenRCUVVOSUxFVkJRVVVzVFVGQlRTeERRVUZETEZkQlFWY3NSMEZCUnl4WFFVRlhMRU5CUVVNN1FVRkRia01zUlVGQlJTeFBRVUZQV1N4cFFrRkJaU3hEUVVGRExFMUJRVTBzUlVGQlJTeEpRVUZKTEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVNN1FVRkRhRVFzUTBGQlF6dEJRVU5FTzBGQlEwRXNTVUZCUVN4alFVRmpMRWRCUVVkRkxHVkJRV0U3T3pzN096czdPenM3UVVOb1JEbENMRk5CUVZORExGZEJRVk1zUTBGQlF5eEpRVUZKTEVWQlFVVTdRVUZEZWtJc1JVRkJSU3hKUVVGSkxFMUJRVTBzUjBGQlJ5eEpRVUZKTEVOQlFVTTdRVUZEY0VJc1JVRkJSU3hQUVVGUExFMUJRVTBzUTBGQlF5eFhRVUZYTEVOQlFVTTdRVUZETlVJc1EwRkJRenRCUVVORU8wRkJRMEVzU1VGQlFTeFZRVUZqTEVkQlFVZEJMRmRCUVZNN08wRkRXakZDTEVsQlFVbDJTeXhYUVVGVExFZEJRVWR3UlN4VlFVRjFRanRCUVVOMlF5eEpRVUZKYlVnc1UwRkJUeXhIUVVGSE0wY3NVVUZCY1VJc1EwRkJRenRCUVVOd1F6dEJRVU5CTzBGQlEwRXNTVUZCU1c5UExGZEJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRPMEZCUTNwQ08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFRRVUZUUXl4VFFVRlBMRU5CUVVNc1MwRkJTeXhGUVVGRkxFOUJRVThzUlVGQlJUdEJRVU5xUXl4RlFVRkZMRWxCUVVrc1UwRkJVeXhIUVVGSExFdEJRVXNzUTBGQlF5eE5RVUZOTzBGQlF6bENMRTFCUVUwc1RVRkJUU3hIUVVGSFJDeFhRVUZUTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTFCUVUwc1JVRkJSU3hUUVVGVExFTkJRVU03UVVGRGJrUXNUVUZCVFN4UlFVRlJMRWRCUVVkNFN5eFhRVUZUTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRiRU03UVVGRFFTeEZRVUZGTEU5QlFVOHNUVUZCVFN4RlFVRkZMRVZCUVVVN1FVRkRia0lzU1VGQlNTeEpRVUZKTEV0QlFVc3NSMEZCUnl4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03UVVGRGFFTXNTVUZCU1N4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNyUXl4VFFVRlBMRU5CUVVNc1MwRkJTeXhGUVVGRkxGTkJRVk1zUTBGQlF5eEhRVUZITEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhUUVVGVExFTkJRVU03UVVGRE5VVXNSMEZCUnp0QlFVTklMRVZCUVVVc1QwRkJUeXhMUVVGTExFTkJRVU03UVVGRFppeERRVUZETzBGQlEwUTdRVUZEUVN4SlFVRkJMRkZCUVdNc1IwRkJSekJJTEZOQlFVODdPenM3UVVNelFuaENMRWxCUVVsRExHRkJRVmNzUjBGQlJ5eDNRa0ZCZDBJc1EwRkJRenRCUVVNelF6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZOQlFWTkRMR2RDUVVGakxFTkJRVU1zUzBGQlN5eEZRVUZGTEZkQlFWY3NSVUZCUlR0QlFVTTFReXhGUVVGRkxFbEJRVWtzUzBGQlN5eEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTm9RaXhOUVVGTkxFMUJRVTBzUjBGQlJ5eExRVUZMTEVOQlFVTXNUVUZCVFR0QlFVTXpRaXhOUVVGTkxGRkJRVkVzUjBGQlJ5eERRVUZETzBGQlEyeENMRTFCUVUwc1RVRkJUU3hIUVVGSExFVkJRVVVzUTBGQlF6dEJRVU5zUWp0QlFVTkJMRVZCUVVVc1QwRkJUeXhGUVVGRkxFdEJRVXNzUjBGQlJ5eE5RVUZOTEVWQlFVVTdRVUZETTBJc1NVRkJTU3hKUVVGSkxFdEJRVXNzUjBGQlJ5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkROMElzU1VGQlNTeEpRVUZKTEV0QlFVc3NTMEZCU3l4WFFVRlhMRWxCUVVrc1MwRkJTeXhMUVVGTFJDeGhRVUZYTEVWQlFVVTdRVUZEZUVRc1RVRkJUU3hMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVZEJMR0ZCUVZjc1EwRkJRenRCUVVOcVF5eE5RVUZOTEUxQlFVMHNRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJReXhIUVVGSExFdEJRVXNzUTBGQlF6dEJRVU5xUXl4TFFVRkxPMEZCUTB3c1IwRkJSenRCUVVOSUxFVkJRVVVzVDBGQlR5eE5RVUZOTEVOQlFVTTdRVUZEYUVJc1EwRkJRenRCUVVORU8wRkJRMEVzU1VGQlFTeGxRVUZqTEVkQlFVZERMR2RDUVVGak96dEJRelZDTDBJc1NVRkJTWFJDTEdGQlFWY3NSMEZCUjNwT0xGbEJRWGxDTzBGQlF6TkRMRWxCUVVrd1RpeHJRa0ZCWjBJc1IwRkJSMnhPTEdsQ1FVRTRRanRCUVVOeVJDeEpRVUZKTEZsQlFWa3NSMEZCUjBNc1lVRkJNRUk3UVVGRE4wTXNTVUZCU1RaTkxGbEJRVlVzUjBGQlJ6Vk5MRmRCUVhkQ08wRkJRM3BETEVsQlFVbG5UeXhsUVVGaExFZEJRVWN2VGl4alFVRXlRanRCUVVNdlF5eEpRVUZKWjA4c1YwRkJVeXhIUVVGSGFrd3NWVUZCZFVJN1FVRkRka01zU1VGQlNTeFBRVUZQTEVkQlFVZHBSU3hSUVVGeFFqdEJRVU51UXl4SlFVRkpiMGdzWjBKQlFXTXNSMEZCUjI1SUxHVkJRVFJDTzBGQlEycEVMRWxCUVVsNlJ5eE5RVUZKTEVkQlFVY3dSeXhMUVVGclFpeERRVUZETzBGQlF6bENPMEZCUTBFN1FVRkRRU3hKUVVGSk1FWXNaMEpCUVdNc1IwRkJSeXhEUVVGRE8wRkJRM1JDTEVsQlFVbFJMRzlDUVVGclFpeEhRVUZITEVOQlFVTTdRVUZETVVJc1NVRkJTVU1zYVVKQlFXVXNSMEZCUnl4RFFVRkRPMEZCUTNaQ0xFbEJRVWxETEhWQ1FVRnhRaXhIUVVGSExFVkJRVVU3UVVGRE9VSXNTVUZCU1Vjc1pVRkJZU3hIUVVGSExFZEJRVWM3UVVGRGRrSXNTVUZCU1N4alFVRmpMRWRCUVVjc1IwRkJSeXhEUVVGRE8wRkJRM3BDTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRXU3hqUVVGWkxFTkJRVU1zU1VGQlNTeEZRVUZGTEU5QlFVOHNSVUZCUlN4UFFVRlBMRVZCUVVVc1VVRkJVU3hGUVVGRkxFOUJRVThzUlVGQlJTeGhRVUZoTEVWQlFVVXNXVUZCV1N4RlFVRkZMRTFCUVUwc1JVRkJSU3hIUVVGSExFVkJRVVVzUzBGQlN5eEZRVUZGTzBGQlEyeElMRVZCUVVVc1NVRkJTU3hMUVVGTExFZEJRVWNzVDBGQlR5eEhRVUZIV2l4bFFVRmhPMEZCUTNKRExFMUJRVTBzVFVGQlRTeEhRVUZITEU5QlFVOHNSMEZCUjJJc1owSkJRV003UVVGRGRrTXNUVUZCVFN4VFFVRlRMRWRCUVVjc1QwRkJUeXhIUVVGSFVTeHZRa0ZCYTBJN1FVRkRPVU1zVFVGQlRTeFRRVUZUTEVkQlFVY3NUMEZCVHl4SlFVRkpReXhwUWtGQlpTeEhRVUZIUXl4MVFrRkJjVUlzUTBGQlF6dEJRVU55UlN4TlFVRk5MRTFCUVUwc1IwRkJSeXhQUVVGUExFZEJRVWNzWTBGQll6dEJRVU4yUXl4TlFVRk5MRWxCUVVrc1IwRkJSeXhUUVVGVExFZEJRVWNzVTBGQlV5eEhRVUZIV0N4WlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRGRFUTdRVUZEUVN4RlFVRkZMRk5CUVZNc1QwRkJUeXhIUVVGSE8wRkJRM0pDTEVsQlFVa3NTVUZCU1N4TlFVRk5MRWRCUVVjc1UwRkJVeXhEUVVGRExFMUJRVTA3UVVGRGFrTXNVVUZCVVN4SlFVRkpMRWRCUVVjc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF6dEJRVU0xUWl4UlFVRlJMRXRCUVVzc1IwRkJSeXhOUVVGTkxFTkJRVU03UVVGRGRrSTdRVUZEUVN4SlFVRkpMRTlCUVU4c1MwRkJTeXhGUVVGRkxFVkJRVVU3UVVGRGNFSXNUVUZCVFN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzVTBGQlV5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMEZCUTNKRExFdEJRVXM3UVVGRFRDeEpRVUZKTEVsQlFVa3NVMEZCVXl4RlFVRkZPMEZCUTI1Q0xFMUJRVTBzU1VGQlNTeFhRVUZYTEVkQlFVZHhRaXhYUVVGVExFTkJRVU1zVDBGQlR5eERRVUZETzBGQlF6RkRMRlZCUVZVc1dVRkJXU3hIUVVGSExGbEJRVmtzUTBGQlF5eEpRVUZKTEVWQlFVVXNWMEZCVnl4RFFVRkRMRU5CUVVNN1FVRkRla1FzUzBGQlN6dEJRVU5NTEVsQlFVa3NTVUZCU1N4UlFVRlJMRVZCUVVVN1FVRkRiRUlzVFVGQlRTeEpRVUZKTEVkQlFVZHNRaXhoUVVGWExFTkJRVU1zU1VGQlNTeEZRVUZGTEZGQlFWRXNSVUZCUlN4UFFVRlBMRVZCUVVVc1UwRkJVeXhEUVVGRExFTkJRVU03UVVGRE4wUXNTMEZCU3p0QlFVTk1MRWxCUVVrc1NVRkJTU3hoUVVGaExFVkJRVVU3UVVGRGRrSXNUVUZCVFN4SlFVRkpMRWRCUVVkRExHdENRVUZuUWl4RFFVRkRMRWxCUVVrc1JVRkJSU3hoUVVGaExFVkJRVVVzV1VGQldTeEZRVUZGTEZOQlFWTXNRMEZCUXl4RFFVRkRPMEZCUXpWRkxFdEJRVXM3UVVGRFRDeEpRVUZKTEUxQlFVMHNTVUZCU1N4WlFVRlpMRU5CUVVNN1FVRkRNMElzU1VGQlNTeEpRVUZKTEZOQlFWTXNTVUZCU1N4TlFVRk5MRWRCUVVjc1MwRkJTeXhGUVVGRk8wRkJRM0pETEUxQlFVMHNTVUZCU1N4VlFVRlZMRWRCUVVkeFFpeG5Ra0ZCWXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hYUVVGWExFTkJRVU1zUTBGQlF6dEJRVU42UkN4TlFVRk5MRTlCUVU5TUxHVkJRV0U3UVVGRE1VSXNVVUZCVVN4SlFVRkpMRVZCUVVVc1QwRkJUeXhGUVVGRlRTeGpRVUZaTEVWQlFVVXNUMEZCVHl4RFFVRkRMRmRCUVZjc1JVRkJSU3hQUVVGUE8wRkJRMnBGTEZGQlFWRXNTVUZCU1N4RlFVRkZMRlZCUVZVc1JVRkJSU3hOUVVGTkxFVkJRVVVzUjBGQlJ5eEZRVUZGTEV0QlFVc3NSMEZCUnl4TlFVRk5PMEZCUTNKRUxFOUJRVThzUTBGQlF6dEJRVU5TTEV0QlFVczdRVUZEVEN4SlFVRkpMRWxCUVVrc1YwRkJWeXhIUVVGSExFMUJRVTBzUjBGQlJ5eFBRVUZQTEVkQlFVY3NTVUZCU1R0QlFVTTNReXhSUVVGUkxFVkJRVVVzUjBGQlJ5eFRRVUZUTEVkQlFVY3NWMEZCVnl4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF6dEJRVU5zUkR0QlFVTkJMRWxCUVVrc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTTdRVUZEZWtJc1NVRkJTU3hKUVVGSkxFMUJRVTBzUlVGQlJUdEJRVU5vUWl4TlFVRk5MRWxCUVVrc1IwRkJSeXhQUVVGUExFTkJRVU1zU1VGQlNTeEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRPMEZCUTI1RExFdEJRVXNzVFVGQlRTeEpRVUZKTEUxQlFVMHNTVUZCU1N4TlFVRk5MRWRCUVVjc1EwRkJReXhGUVVGRk8wRkJRM0pETEUxQlFVMHNTVUZCU1N4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRE8wRkJRM0pDTEV0QlFVczdRVUZEVEN4SlFVRkpMRWxCUVVrc1MwRkJTeXhKUVVGSkxFZEJRVWNzUjBGQlJ5eE5RVUZOTEVWQlFVVTdRVUZETDBJc1RVRkJUU3hKUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEVkQlFVY3NRMEZCUXp0QlFVTjRRaXhMUVVGTE8wRkJRMHdzU1VGQlNTeEpRVUZKTEVsQlFVa3NTVUZCU1N4SlFVRkpMRXRCUVVzM1RpeE5RVUZKTEVsQlFVa3NTVUZCU1N4WlFVRlpMRTlCUVU4c1JVRkJSVHRCUVVNeFJDeE5RVUZOTEVWQlFVVXNSMEZCUnl4SlFVRkpMRWxCUVVsdFRTeFpRVUZWTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkRiRU1zUzBGQlN6dEJRVU5NTEVsQlFVa3NUMEZCVHl4RlFVRkZMRU5CUVVNc1MwRkJTeXhEUVVGRExGZEJRVmNzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0QlFVTjJReXhIUVVGSE8wRkJRMGdzUlVGQlJTeFBRVUZQTEU5QlFVOHNRMEZCUXp0QlFVTnFRaXhEUVVGRE8wRkJRMFE3UVVGRFFTeEpRVUZCTEdGQlFXTXNSMEZCUnpCQ0xHTkJRVms3TzBGRE0wWTNRaXhKUVVGSmVrY3NUMEZCU3l4SFFVRkhka2tzVFVGQmJVSTdRVUZETDBJc1NVRkJTWE5PTEZsQlFWVXNSMEZCUnpsTkxGZEJRWGRDTzBGQlEzcERMRWxCUVVsM1R5eGpRVUZaTEVkQlFVZDJUeXhoUVVFd1FqdEJRVU0zUXl4SlFVRkpMR0ZCUVdFc1IwRkJSME1zWTBGQk1rSTdRVUZETDBNc1NVRkJTU3hUUVVGVExFZEJRVWRETEZWQlFYVkNPMEZCUTNaRExFbEJRVWx2VHl4blFrRkJZeXhIUVVGSGNrd3NaVUZCTkVJN1FVRkRha1FzU1VGQlNYWkRMRTFCUVVrc1IwRkJSM2RITEV0QlFXdENMRU5CUVVNN1FVRkRPVUk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFRRVUZUYzBnc1lVRkJWeXhEUVVGRExFbEJRVWtzUlVGQlJTeFBRVUZQTEVWQlFVVXNTMEZCU3l4RlFVRkZPMEZCUXpORExFVkJRVVVzU1VGQlNTeEpRVUZKTEVkQlFVY3pRaXhaUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdRVUZET1VJN1FVRkRRU3hGUVVGRkxGTkJRVk1zVDBGQlR5eEhRVUZITzBGQlEzSkNMRWxCUVVrc1NVRkJTU3hOUVVGTkxFZEJRVWNzVTBGQlV5eERRVUZETEUxQlFVMDdRVUZEYWtNc1VVRkJVU3hKUVVGSkxFZEJRVWNzUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXp0QlFVTTFRaXhSUVVGUkxFdEJRVXNzUjBGQlJ5eE5RVUZOTzBGQlEzUkNMRkZCUVZFc1YwRkJWeXhIUVVGSExGTkJRVk1zUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0QlFVTjZRenRCUVVOQkxFbEJRVWtzVDBGQlR5eExRVUZMTEVWQlFVVXNSVUZCUlR0QlFVTndRaXhOUVVGTkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4VFFVRlRMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03UVVGRGNrTXNTMEZCU3p0QlFVTk1MRWxCUVVrc1NVRkJTU3hQUVVGUExFZEJRVWNzUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4SlFVRkpMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN5eFhRVUZYTEVsQlFVa3NTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVU1zUzBGQlN5eFhRVUZYTzBGQlF6VkdMRkZCUVZFc1JVRkJSVHRCUVVOV0xGRkJRVkY1UWl4blFrRkJZeXhEUVVGRExFbEJRVWtzUlVGQlJTeFhRVUZYTEVOQlFVTXNRMEZCUXp0QlFVTXhRenRCUVVOQkxFbEJRVWtzVFVGQlRTeEpRVUZKTEU5QlFVOHNRMEZCUXl4TlFVRk5MRU5CUVVNN1FVRkROMElzU1VGQlNTeEpRVUZKTEUxQlFVMHNSMEZCUnl4TFFVRkxMRVZCUVVVN1FVRkRlRUlzVFVGQlRTeFBRVUZQTEdGQlFXRTdRVUZETVVJc1VVRkJVU3hKUVVGSkxFVkJRVVVzVDBGQlR5eEZRVUZGUXl4alFVRlpMRVZCUVVVc1QwRkJUeXhEUVVGRExGZEJRVmNzUlVGQlJTeFRRVUZUTzBGQlEyNUZMRkZCUVZFc1NVRkJTU3hGUVVGRkxFOUJRVThzUlVGQlJTeFRRVUZUTEVWQlFVVXNVMEZCVXl4RlFVRkZMRXRCUVVzc1IwRkJSeXhOUVVGTkxFTkJRVU1zUTBGQlF6dEJRVU0zUkN4TFFVRkxPMEZCUTB3c1NVRkJTU3hKUVVGSkxFVkJRVVVzUjBGQlJ5eERRVUZETEVsQlFVa3NTVUZCU1N4SlFVRkpMRXRCUVVzM1RpeE5RVUZKTEVsQlFVa3NTVUZCU1N4WlFVRlpMRTlCUVU4c1NVRkJTU3hKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETzBGQlF6bEZMRWxCUVVrc1QwRkJUMjlJTEU5QlFVc3NRMEZCUXl4RlFVRkZMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzBGQlEycERMRWRCUVVjN1FVRkRTQ3hGUVVGRkxFOUJRVThzVDBGQlR5eERRVUZETzBGQlEycENMRU5CUVVNN1FVRkRSRHRCUVVOQkxFbEJRVUVzV1VGQll5eEhRVUZITUVjc1lVRkJWenM3UVVNM1F6VkNMRWxCUVVrc1MwRkJTeXhIUVVGSGFsQXNUVUZCYlVJN1FVRkRMMElzU1VGQlNTeFZRVUZWTEVkQlFVZFJMRmRCUVhkQ08wRkJRM3BETEVsQlFVa3NTVUZCU1N4SFFVRkhReXhMUVVGclFpeERRVUZETzBGQlF6bENPMEZCUTBFN1FVRkRRU3hKUVVGSk9FMHNaMEpCUVdNc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRGRrSTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hUUVVGVE1rSXNaVUZCWVN4RFFVRkRMRWxCUVVrc1JVRkJSU3hQUVVGUExFVkJRVVVzVDBGQlR5eEZRVUZGTEZGQlFWRXNSVUZCUlR0QlFVTjZSQ3hGUVVGRkxFbEJRVWtzVFVGQlRTeEhRVUZITEU5QlFVOHNSMEZCUnpOQ0xHZENRVUZqTzBGQlEzWkRMRTFCUVUwc1NVRkJTU3hIUVVGSExGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0QlFVTTVRanRCUVVOQkxFVkJRVVVzVTBGQlV5eFBRVUZQTEVkQlFVYzdRVUZEY2tJc1NVRkJTU3hKUVVGSkxGTkJRVk1zUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEZEVJc1VVRkJVU3hWUVVGVkxFZEJRVWNzVTBGQlV5eERRVUZETEUxQlFVMDdRVUZEY2tNc1VVRkJVU3hUUVVGVExFZEJRVWNzUTBGQlF5eERRVUZETzBGQlEzUkNMRkZCUVZFc1ZVRkJWU3hIUVVGSExGRkJRVkVzUTBGQlF5eE5RVUZOTzBGQlEzQkRMRkZCUVZFc1NVRkJTU3hIUVVGSExFdEJRVXNzUTBGQlF5eFZRVUZWTEVkQlFVY3NWVUZCVlN4RFFVRkRPMEZCUXpkRExGRkJRVkVzUlVGQlJTeEhRVUZITEVOQlFVTXNTVUZCU1N4SlFVRkpMRWxCUVVrc1MwRkJTeXhKUVVGSkxFbEJRVWtzU1VGQlNTeFpRVUZaTEU5QlFVOHNTVUZCU1N4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRE8wRkJRemxGTzBGQlEwRXNTVUZCU1N4UFFVRlBMRVZCUVVVc1UwRkJVeXhIUVVGSExGVkJRVlVzUlVGQlJUdEJRVU55UXl4TlFVRk5MRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eFJRVUZSTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1FVRkROVU1zUzBGQlN6dEJRVU5NTEVsQlFVa3NUMEZCVHl4VlFVRlZMRVZCUVVVc1JVRkJSVHRCUVVONlFpeE5RVUZOTEVsQlFVa3NRMEZCUXl4VFFVRlRMRVZCUVVVc1EwRkJReXhIUVVGSExGTkJRVk1zUTBGQlF5eEZRVUZGTEZOQlFWTXNRMEZCUXl4RFFVRkRPMEZCUTJwRUxFdEJRVXM3UVVGRFRDeEpRVUZKTEU5QlFVOHNTMEZCU3l4RFFVRkRMRVZCUVVVc1JVRkJSU3hOUVVGTkxFZEJRVWNzVDBGQlR5eEhRVUZITEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenRCUVVOd1JDeEhRVUZITzBGQlEwZ3NSVUZCUlN4UFFVRlBMRTlCUVU4c1EwRkJRenRCUVVOcVFpeERRVUZETzBGQlEwUTdRVUZEUVN4SlFVRkJMR05CUVdNc1IwRkJSekpDTEdWQlFXRTdPMEZETVVNNVFpeEpRVUZKTEZkQlFWY3NSMEZCUjJ4UUxGbEJRWGxDTzBGQlF6TkRMRWxCUVVrc1owSkJRV2RDTEVkQlFVZFJMR2xDUVVFNFFqdEJRVU55UkN4SlFVRkpMR05CUVdNc1IwRkJSME1zWlVGQk5FSXNRMEZCUXp0QlFVTnNSRHRCUVVOQk8wRkJRMEVzU1VGQlNTeFhRVUZYTEVkQlFVY3NkMEpCUVhkQ0xFTkJRVU03UVVGRE0wTTdRVUZEUVR0QlFVTkJMRWxCUVVrNFRTeG5Ra0ZCWXl4SFFVRkhMRU5CUVVNN1FVRkRkRUlzU1VGQlNWRXNiMEpCUVd0Q0xFZEJRVWNzUTBGQlF6dEJRVU14UWl4SlFVRkpMSEZDUVVGeFFpeEhRVUZITEVOQlFVTTdRVUZETjBJc1NVRkJTVU1zYVVKQlFXVXNSMEZCUnl4RFFVRkRPMEZCUTNaQ0xFbEJRVWxKTEdWQlFXRXNSMEZCUnl4SFFVRkhPMEZCUTNaQ0xFbEJRVWxETEdsQ1FVRmxMRWRCUVVjc1IwRkJSeXhEUVVGRE8wRkJRekZDTzBGQlEwRTdRVUZEUVN4SlFVRkpMRk5CUVZNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETzBGQlEzcENPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRZeXhYUVVGVExFTkJRVU1zU1VGQlNTeEZRVUZGTEUxQlFVMHNSVUZCUlR0QlFVTnFReXhGUVVGRkxFbEJRVWtzVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRka0lzVFVGQlRTeFZRVUZWTEVkQlFVY3NUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVNMVFpeE5RVUZOTEZWQlFWVXNSMEZCUnl4UFFVRlBMRWRCUVVjc1ZVRkJWVHRCUVVOMlF5eE5RVUZOTEZGQlFWRXNSMEZCUnl4VlFVRlZMRWxCUVVrMVFpeG5Ra0ZCWXl4SFFVRkhVU3h2UWtGQmEwSXNSMEZCUjBzc1pVRkJZU3hEUVVGRExFTkJRVU03UVVGRGNFWTdRVUZEUVN4RlFVRkZMRWxCUVVrc1QwRkJUenRCUVVOaUxFbEJRVWtzUTBGQlF5eERRVUZETEZWQlFWVXNTVUZCU1VFc1pVRkJZU3hOUVVGTkxFOUJRVThzU1VGQlNVb3NhVUpCUVdVc1EwRkJRenRCUVVOc1JTeExRVUZMTEVOQlFVTXNWVUZCVlN4SlFVRkpTU3hsUVVGaExFMUJRVTBzVDBGQlR5eEpRVUZKUXl4cFFrRkJaU3hEUVVGRExFdEJRVXNzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRTFCUVUwc1NVRkJTU3hOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTndSeXhMUVVGTExFTkJRVU1zVlVGQlZTeExRVUZMUkN4bFFVRmhMRWRCUVVkRExHbENRVUZsTEVOQlFVTXNUVUZCVFN4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zVFVGQlRTeEpRVUZKTEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFOUJRVThzU1VGQlNVd3NhVUpCUVdVc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRE0wZzdRVUZEUVR0QlFVTkJMRVZCUVVVc1NVRkJTU3hGUVVGRkxGRkJRVkVzU1VGQlNTeFBRVUZQTEVOQlFVTXNSVUZCUlR0QlFVTTVRaXhKUVVGSkxFOUJRVThzU1VGQlNTeERRVUZETzBGQlEyaENMRWRCUVVjN1FVRkRTRHRCUVVOQkxFVkJRVVVzU1VGQlNTeFZRVUZWTEVkQlFVZFVMR2RDUVVGakxFVkJRVVU3UVVGRGJrTXNTVUZCU1N4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTNoQ08wRkJRMEVzU1VGQlNTeFZRVUZWTEVsQlFVa3NUMEZCVHl4SFFVRkhRU3huUWtGQll5eEhRVUZITEVOQlFVTXNSMEZCUnl4eFFrRkJjVUlzUTBGQlF6dEJRVU4yUlN4SFFVRkhPMEZCUTBnN1FVRkRRU3hGUVVGRkxFbEJRVWtzUzBGQlN5eEhRVUZITEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVONFFpeEZRVUZGTEVsQlFVa3NTMEZCU3l4RlFVRkZPMEZCUTJJc1NVRkJTU3hKUVVGSkxGRkJRVkVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRNMElzU1VGQlNTeEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1VVRkJVU3hIUVVGSExGZEJRVmNzUTBGQlF5eFJRVUZSTEVWQlFVVXNTMEZCU3l4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEV0QlFVc3NRMEZCUXp0QlFVTjZSU3hKUVVGSkxFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4UlFVRlJMRWRCUVVjc1kwRkJZeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4WFFVRlhMRU5CUVVNc1IwRkJSeXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdRVUZETVVVc1IwRkJSenRCUVVOSU8wRkJRMEVzUlVGQlJTeExRVUZMTEVkQlFVY3NUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRM0JDTEVWQlFVVXNTVUZCU1N4TFFVRkxMRVZCUVVVN1FVRkRZaXhKUVVGSkxGRkJRVkVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRka0lzU1VGQlNTeEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1VVRkJVU3hIUVVGSExHZENRVUZuUWl4RFFVRkRMRkZCUVZFc1JVRkJSU3hMUVVGTExFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1MwRkJTeXhEUVVGRE8wRkJRemxGTEVsQlFVa3NTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExGRkJRVkVzUjBGQlJ5eGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxGZEJRVmNzUTBGQlF5eEhRVUZITEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVNeFJTeEhRVUZITzBGQlEwZzdRVUZEUVN4RlFVRkZMRXRCUVVzc1IwRkJSeXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEY0VJc1JVRkJSU3hKUVVGSkxFdEJRVXNzUlVGQlJUdEJRVU5pTEVsQlFVa3NTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFdEJRVXNzUTBGQlF6dEJRVU53UWl4SFFVRkhPMEZCUTBnN1FVRkRRU3hGUVVGRkxFbEJRVWtzVlVGQlZTeEhRVUZIWVN4bFFVRmhMRVZCUVVVN1FVRkRiRU1zU1VGQlNTeEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eEpRVUZKTEVsQlFVa3NSMEZCUnl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTXhSU3hIUVVGSE8wRkJRMGc3UVVGRFFTeEZRVUZGTEVsQlFVa3NTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxFbEJRVWtzUlVGQlJUdEJRVU4yUWl4SlFVRkpMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRlRUlzUjBGQlJ6dEJRVU5JTzBGQlEwRXNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTNSQ0xFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRlZCUVZVc1EwRkJRenRCUVVOMlFqdEJRVU5CTEVWQlFVVXNUMEZCVHl4SlFVRkpMRU5CUVVNN1FVRkRaQ3hEUVVGRE8wRkJRMFE3UVVGRFFTeEpRVUZCTEZWQlFXTXNSMEZCUjJVc1YwRkJVenM3T3p0QlEzaEdNVUlzU1VGQlNTeFpRVUZaTEVkQlFVY3NTVUZCU1N4RFFVRkRPMEZCUTNoQ08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk5ETEdsQ1FVRmxMRU5CUVVNc1RVRkJUU3hGUVVGRk8wRkJRMnBETEVWQlFVVXNTVUZCU1N4TFFVRkxMRWRCUVVjc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF6dEJRVU0xUWp0QlFVTkJMRVZCUVVVc1QwRkJUeXhMUVVGTExFVkJRVVVzU1VGQlNTeFpRVUZaTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkZPMEZCUXk5RUxFVkJRVVVzVDBGQlR5eExRVUZMTEVOQlFVTTdRVUZEWml4RFFVRkRPMEZCUTBRN1FVRkRRU3hKUVVGQkxHZENRVUZqTEVkQlFVZEJMR2xDUVVGbE96dEJRMnhDYUVNc1NVRkJTU3hsUVVGbExFZEJRVWR3VUN4blFrRkJOa0lzUTBGQlF6dEJRVU53UkR0QlFVTkJPMEZCUTBFc1NVRkJTU3hYUVVGWExFZEJRVWNzVFVGQlRTeERRVUZETzBGQlEzcENPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRjVkFzVlVGQlVTeERRVUZETEUxQlFVMHNSVUZCUlR0QlFVTXhRaXhGUVVGRkxFOUJRVThzVFVGQlRUdEJRVU5tTEUxQlFVMHNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFVkJRVVVzWlVGQlpTeERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eFhRVUZYTEVWQlFVVXNSVUZCUlN4RFFVRkRPMEZCUXpORkxFMUJRVTBzVFVGQlRTeERRVUZETzBGQlEySXNRMEZCUXp0QlFVTkVPMEZCUTBFc1NVRkJRU3hUUVVGakxFZEJRVWRCTEZWQlFWRTdPMEZEYkVKNlFpeEpRVUZKTEZGQlFWRXNSMEZCUjNKUUxGTkJRWE5DTzBGQlEzSkRMRWxCUVVrMFFpeFZRVUZSTEVkQlFVZHdRaXhWUVVGeFFqdEJRVU53UXl4SlFVRkpORXNzVlVGQlVTeEhRVUZITTBzc1ZVRkJjVUlzUTBGQlF6dEJRVU55UXp0QlFVTkJPMEZCUTBFc1NVRkJTU3hIUVVGSExFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTm9RanRCUVVOQk8wRkJRMEVzU1VGQlNTeFZRVUZWTEVkQlFVY3NiMEpCUVc5Q0xFTkJRVU03UVVGRGRFTTdRVUZEUVR0QlFVTkJMRWxCUVVrc1ZVRkJWU3hIUVVGSExGbEJRVmtzUTBGQlF6dEJRVU01UWp0QlFVTkJPMEZCUTBFc1NVRkJTU3hUUVVGVExFZEJRVWNzWVVGQllTeERRVUZETzBGQlF6bENPMEZCUTBFN1FVRkRRU3hKUVVGSkxGbEJRVmtzUjBGQlJ5eFJRVUZSTEVOQlFVTTdRVUZETlVJN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNVMEZCVXpaUExGVkJRVkVzUTBGQlF5eExRVUZMTEVWQlFVVTdRVUZEZWtJc1JVRkJSU3hKUVVGSkxFOUJRVThzUzBGQlN5eEpRVUZKTEZGQlFWRXNSVUZCUlR0QlFVTm9ReXhKUVVGSkxFOUJRVThzUzBGQlN5eERRVUZETzBGQlEycENMRWRCUVVjN1FVRkRTQ3hGUVVGRkxFbEJRVWxzUlN4VlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRExFVkJRVVU3UVVGRGRrSXNTVUZCU1N4UFFVRlBMRWRCUVVjc1EwRkJRenRCUVVObUxFZEJRVWM3UVVGRFNDeEZRVUZGTEVsQlFVbDRTaXhWUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEVWQlFVVTdRVUZEZGtJc1NVRkJTU3hKUVVGSkxFdEJRVXNzUjBGQlJ5eFBRVUZQTEV0QlFVc3NRMEZCUXl4UFFVRlBMRWxCUVVrc1ZVRkJWU3hIUVVGSExFdEJRVXNzUTBGQlF5eFBRVUZQTEVWQlFVVXNSMEZCUnl4TFFVRkxMRU5CUVVNN1FVRkROMFVzU1VGQlNTeExRVUZMTEVkQlFVZEJMRlZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeExRVUZMTEVkQlFVY3NSVUZCUlN4SlFVRkpMRXRCUVVzc1EwRkJRenRCUVVOdVJDeEhRVUZITzBGQlEwZ3NSVUZCUlN4SlFVRkpMRTlCUVU4c1MwRkJTeXhKUVVGSkxGRkJRVkVzUlVGQlJUdEJRVU5vUXl4SlFVRkpMRTlCUVU4c1MwRkJTeXhMUVVGTExFTkJRVU1zUjBGQlJ5eExRVUZMTEVkQlFVY3NRMEZCUXl4TFFVRkxMRU5CUVVNN1FVRkRlRU1zUjBGQlJ6dEJRVU5JTEVWQlFVVXNTMEZCU3l4SFFVRkhMRkZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU14UWl4RlFVRkZMRWxCUVVrc1VVRkJVU3hIUVVGSExGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRlRU1zUlVGQlJTeFBRVUZQTEVOQlFVTXNVVUZCVVN4SlFVRkpMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETzBGQlF6TkRMRTFCUVUwc1dVRkJXU3hEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1VVRkJVU3hIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEY0VRc1QwRkJUeXhWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRWRCUVVjc1IwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBGQlF6bERMRU5CUVVNN1FVRkRSRHRCUVVOQkxFbEJRVUVzVlVGQll5eEhRVUZITUU0c1ZVRkJVVHM3UVVNdlJIcENMRWxCUVVrc1VVRkJVU3hIUVVGSGRGQXNWVUZCY1VJc1EwRkJRenRCUVVOeVF6dEJRVU5CTzBGQlEwRXNTVUZCU1N4UlFVRlJMRWRCUVVjc1EwRkJReXhIUVVGSExFTkJRVU03UVVGRGNFSXNTVUZCU1N4WFFVRlhMRWRCUVVjc2RVSkJRWFZDTEVOQlFVTTdRVUZETVVNN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNVMEZCVTNWUUxGVkJRVkVzUTBGQlF5eExRVUZMTEVWQlFVVTdRVUZEZWtJc1JVRkJSU3hKUVVGSkxFTkJRVU1zUzBGQlN5eEZRVUZGTzBGQlEyUXNTVUZCU1N4UFFVRlBMRXRCUVVzc1MwRkJTeXhEUVVGRExFZEJRVWNzUzBGQlN5eEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTnVReXhIUVVGSE8wRkJRMGdzUlVGQlJTeExRVUZMTEVkQlFVY3NVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8wRkJRekZDTEVWQlFVVXNTVUZCU1N4TFFVRkxMRXRCUVVzc1VVRkJVU3hKUVVGSkxFdEJRVXNzUzBGQlN5eERRVUZETEZGQlFWRXNSVUZCUlR0QlFVTnFSQ3hKUVVGSkxFbEJRVWtzU1VGQlNTeEpRVUZKTEV0QlFVc3NSMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEY0VNc1NVRkJTU3hQUVVGUExFbEJRVWtzUjBGQlJ5eFhRVUZYTEVOQlFVTTdRVUZET1VJc1IwRkJSenRCUVVOSUxFVkJRVVVzVDBGQlR5eExRVUZMTEV0QlFVc3NTMEZCU3l4SFFVRkhMRXRCUVVzc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRGNrTXNRMEZCUXp0QlFVTkVPMEZCUTBFc1NVRkJRU3hWUVVGakxFZEJRVWRCTEZWQlFWRTdPMEZEZWtONlFpeEpRVUZKTEZGQlFWRXNSMEZCUjNaUUxGVkJRWEZDTEVOQlFVTTdRVUZEY2tNN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVM2RRTEZkQlFWTXNRMEZCUXl4TFFVRkxMRVZCUVVVN1FVRkRNVUlzUlVGQlJTeEpRVUZKTEUxQlFVMHNSMEZCUnl4UlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRE8wRkJRemxDTEUxQlFVMHNVMEZCVXl4SFFVRkhMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRE4wSTdRVUZEUVN4RlFVRkZMRTlCUVU4c1RVRkJUU3hMUVVGTExFMUJRVTBzU1VGQlNTeFRRVUZUTEVkQlFVY3NUVUZCVFN4SFFVRkhMRk5CUVZNc1IwRkJSeXhOUVVGTkxFbEJRVWtzUTBGQlF5eERRVUZETzBGQlF6TkZMRU5CUVVNN1FVRkRSRHRCUVVOQkxFbEJRVUVzVjBGQll5eEhRVUZIUVN4WFFVRlRPenRCUTI1RE1VSXNTVUZCU1N4WFFVRlhMRWRCUVVkNFVDeFpRVUY1UWp0QlFVTXpReXhKUVVGSkxGVkJRVlVzUjBGQlIxRXNWMEZCZDBJN1FVRkRla01zU1VGQlNTeFhRVUZYTEVkQlFVZERMRmxCUVhsQ08wRkJRek5ETEVsQlFVa3NXVUZCV1N4SFFVRkhReXhoUVVFd1FqdEJRVU0zUXl4SlFVRkpMR0ZCUVdFc1IwRkJSME1zWTBGQk1rSTdRVUZETDBNc1NVRkJTU3hQUVVGUExFZEJRVWNyUXl4bFFVRnhRaXhGUVVGQk8wRkJRMjVETEVsQlFVa3NVMEZCVXl4SFFVRkhhVVVzVlVGQmRVSTdRVUZEZGtNc1NVRkJTU3hQUVVGUExFZEJRVWRETEZGQlFYRkNPMEZCUTI1RExFbEJRVWtzWlVGQlpTeEhRVUZIUXl4blFrRkJOa0k3UVVGRGJrUXNTVUZCU1N4VFFVRlRMRWRCUVVkRExGZEJRWE5DTEVOQlFVTTdRVUZEZGtNN1FVRkRRVHRCUVVOQkxFbEJRVWtzWlVGQlpTeEhRVUZITEhGQ1FVRnhRaXhEUVVGRE8wRkJRelZETzBGQlEwRTdRVUZEUVN4SlFVRkpMR05CUVdNc1IwRkJSeXhEUVVGRE8wRkJRM1JDTEVsQlFVa3NhMEpCUVd0Q0xFZEJRVWNzUTBGQlF6dEJRVU14UWl4SlFVRkphMGNzYVVKQlFXVXNSMEZCUnl4RFFVRkRPMEZCUTNaQ0xFbEJRVWtzY1VKQlFYRkNMRWRCUVVjc1JVRkJSVHRCUVVNNVFpeEpRVUZKTEdsQ1FVRnBRaXhIUVVGSExFVkJRVVU3UVVGRE1VSXNTVUZCU1N4MVFrRkJkVUlzUjBGQlJ5eEZRVUZGTEVOQlFVTTdRVUZEYWtNN1FVRkRRVHRCUVVOQkxFbEJRVWtzVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNN1FVRkRla0k3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk41UWl4WlFVRlZMRU5CUVVNc1NVRkJTU3hGUVVGRkxFOUJRVThzUlVGQlJTeFBRVUZQTEVWQlFVVXNVVUZCVVN4RlFVRkZMRTlCUVU4c1JVRkJSU3hOUVVGTkxFVkJRVVVzUjBGQlJ5eEZRVUZGTEV0QlFVc3NSVUZCUlR0QlFVTnVSaXhGUVVGRkxFbEJRVWtzVTBGQlV5eEhRVUZITEU5QlFVOHNSMEZCUnl4clFrRkJhMElzUTBGQlF6dEJRVU12UXl4RlFVRkZMRWxCUVVrc1EwRkJReXhUUVVGVExFbEJRVWtzVDBGQlR5eEpRVUZKTEVsQlFVa3NWVUZCVlN4RlFVRkZPMEZCUXk5RExFbEJRVWtzVFVGQlRTeEpRVUZKTEZOQlFWTXNRMEZCUXl4bFFVRmxMRU5CUVVNc1EwRkJRenRCUVVONlF5eEhRVUZITzBGQlEwZ3NSVUZCUlN4SlFVRkpMRTFCUVUwc1IwRkJSeXhSUVVGUkxFZEJRVWNzVVVGQlVTeERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRPVU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZPMEZCUTJZc1NVRkJTU3hQUVVGUExFbEJRVWtzUlVGQlJTeHBRa0ZCYVVJc1IwRkJSeXgxUWtGQmRVSXNRMEZCUXl4RFFVRkRPMEZCUXpsRUxFbEJRVWtzVVVGQlVTeEhRVUZITEU5QlFVOHNSMEZCUnl4VFFVRlRMRU5CUVVNN1FVRkRia01zUjBGQlJ6dEJRVU5JTEVWQlFVVXNSMEZCUnl4SFFVRkhMRWRCUVVjc1MwRkJTeXhUUVVGVExFZEJRVWNzUjBGQlJ5eEhRVUZITEZOQlFWTXNRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdRVUZETDBRc1JVRkJSU3hMUVVGTExFZEJRVWNzUzBGQlN5eExRVUZMTEZOQlFWTXNSMEZCUnl4TFFVRkxMRWRCUVVjc1UwRkJVeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBGQlEzcEVMRVZCUVVVc1RVRkJUU3hKUVVGSkxFOUJRVThzUjBGQlJ5eFBRVUZQTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVONlF6dEJRVU5CTEVWQlFVVXNTVUZCU1N4UFFVRlBMRWRCUVVjc2RVSkJRWFZDTEVWQlFVVTdRVUZEZWtNc1NVRkJTU3hKUVVGSkxHRkJRV0VzUjBGQlJ5eFJRVUZSTzBGQlEyaERMRkZCUVZFc1dVRkJXU3hIUVVGSExFOUJRVThzUTBGQlF6dEJRVU12UWp0QlFVTkJMRWxCUVVrc1VVRkJVU3hIUVVGSExFOUJRVThzUjBGQlJ5eFRRVUZUTEVOQlFVTTdRVUZEYmtNc1IwRkJSenRCUVVOSUxFVkJRVVVzU1VGQlNTeEpRVUZKTEVkQlFVY3NVMEZCVXl4SFFVRkhMRk5CUVZNc1IwRkJSeXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdRVUZEYmtRN1FVRkRRU3hGUVVGRkxFbEJRVWtzVDBGQlR5eEhRVUZITzBGQlEyaENMRWxCUVVrc1NVRkJTU3hGUVVGRkxFOUJRVThzUlVGQlJTeFBRVUZQTEVWQlFVVXNVVUZCVVN4RlFVRkZMRTlCUVU4c1JVRkJSU3hoUVVGaExFVkJRVVVzV1VGQldUdEJRVU14UlN4SlFVRkpMRTFCUVUwc1JVRkJSU3hIUVVGSExFVkJRVVVzUzBGQlN6dEJRVU4wUWl4SFFVRkhMRU5CUVVNN1FVRkRTanRCUVVOQkxFVkJRVVVzU1VGQlNTeEpRVUZKTEVWQlFVVTdRVUZEV2l4SlFVRkpMRk5CUVZNc1EwRkJReXhQUVVGUExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdRVUZETjBJc1IwRkJSenRCUVVOSUxFVkJRVVVzU1VGQlNTeEhRVUZITEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOd1FpeEZRVUZGTEU5QlFVOHNSMEZCUnl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRGRrSXNSVUZCUlN4UFFVRlBMRWRCUVVjc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBGQlEzWkNMRVZCUVVVc1VVRkJVU3hIUVVGSExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTjRRaXhGUVVGRkxFOUJRVThzUjBGQlJ5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRka0lzUlVGQlJTeExRVUZMTEVkQlFVY3NUMEZCVHl4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNTMEZCU3l4VFFVRlRPMEZCUXk5RExFOUJRVThzVTBGQlV5eEhRVUZITEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUVHRCUVVOc1F5eE5RVUZOTEZOQlFWTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzVFVGQlRTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTNoRE8wRkJRMEVzUlVGQlJTeEpRVUZKTEVOQlFVTXNTMEZCU3l4SlFVRkpMRTlCUVU4c1NVRkJTWHBDTEdsQ1FVRmxMRWRCUVVjc2NVSkJRWEZDTEVOQlFVTXNSVUZCUlR0QlFVTnlSU3hKUVVGSkxFOUJRVThzU1VGQlNTeEZRVUZGUVN4cFFrRkJaU3hIUVVGSExIRkNRVUZ4UWl4RFFVRkRMRU5CUVVNN1FVRkRNVVFzUjBGQlJ6dEJRVU5JTEVWQlFVVXNTVUZCU1N4RFFVRkRMRTlCUVU4c1NVRkJTU3hQUVVGUExFbEJRVWtzWTBGQll5eEZRVUZGTzBGQlF6ZERMRWxCUVVrc1NVRkJTU3hOUVVGTkxFZEJRVWNzVlVGQlZTeERRVUZETEVsQlFVa3NSVUZCUlN4UFFVRlBMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU03UVVGRGNFUXNSMEZCUnl4TlFVRk5MRWxCUVVrc1QwRkJUeXhKUVVGSlFTeHBRa0ZCWlN4SlFVRkpMRTlCUVU4c1NVRkJTU3h4UWtGQmNVSXNSVUZCUlR0QlFVTTNSU3hKUVVGSkxFMUJRVTBzUjBGQlJ5eFhRVUZYTEVOQlFVTXNTVUZCU1N4RlFVRkZMRTlCUVU4c1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU12UXl4SFFVRkhMRTFCUVUwc1NVRkJTU3hEUVVGRExFOUJRVThzU1VGQlNTeHBRa0ZCYVVJc1NVRkJTU3hQUVVGUExFdEJRVXNzWTBGQll5eEhRVUZITEdsQ1FVRnBRaXhEUVVGRExFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNUVUZCVFN4RlFVRkZPMEZCUTI1SUxFbEJRVWtzVFVGQlRTeEhRVUZITEdGQlFXRXNRMEZCUXl4SlFVRkpMRVZCUVVVc1QwRkJUeXhGUVVGRkxFOUJRVThzUlVGQlJTeFJRVUZSTEVOQlFVTXNRMEZCUXp0QlFVTTNSQ3hIUVVGSExFMUJRVTA3UVVGRFZDeEpRVUZKTEUxQlFVMHNSMEZCUnl4WlFVRlpMRU5CUVVNc1MwRkJTeXhEUVVGRExGTkJRVk1zUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXp0QlFVTndSQ3hIUVVGSE8wRkJRMGdzUlVGQlJTeEpRVUZKTEUxQlFVMHNSMEZCUnl4SlFVRkpMRWRCUVVjc1YwRkJWeXhIUVVGSExFOUJRVThzUTBGQlF6dEJRVU0xUXl4RlFVRkZMRTlCUVU4c1pVRkJaU3hEUVVGRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVWQlFVVXNUMEZCVHl4RFFVRkRMRVZCUVVVc1NVRkJTU3hGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZETzBGQlEycEZMRU5CUVVNN1FVRkRSRHRCUVVOQkxFbEJRVUVzVjBGQll5eEhRVUZIZVVJc1dVRkJWVHM3UVVONlJ6TkNMRWxCUVVsQkxGbEJRVlVzUjBGQlIzcFFMRmRCUVhkQ0xFTkJRVU03UVVGRE1VTTdRVUZEUVR0QlFVTkJMRWxCUVVrc1lVRkJZU3hIUVVGSExFZEJRVWNzUTBGQlF6dEJRVU40UWp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRMRWRCUVVjc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF5eEZRVUZGTEV0QlFVc3NSVUZCUlR0QlFVTTNRaXhGUVVGRkxFTkJRVU1zUjBGQlJ5eExRVUZMTEVkQlFVY3NVMEZCVXl4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVNMVFpeEZRVUZGTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1NVRkJTU3hEUVVGRExFbEJRVWtzU1VGQlNTeEpRVUZKTEVsQlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRelZETEVWQlFVVXNUMEZCVDNsUUxGbEJRVlVzUTBGQlF5eEpRVUZKTEVWQlFVVXNZVUZCWVN4RlFVRkZMRk5CUVZNc1JVRkJSU3hUUVVGVExFVkJRVVVzVTBGQlV5eEZRVUZGTEZOQlFWTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVONFJpeERRVUZETzBGQlEwUTdRVUZEUVN4SlFVRkJMRXRCUVdNc1IwRkJSeXhIUVVGSE96dEJRelZDY0VJc1NVRkJTWGhKTEZsQlFWVXNSMEZCUjJwSUxGZEJRWGRDTzBGQlEzcERMRWxCUVVselNpeE5RVUZKTEVkQlFVYzVTU3hOUVVGcFFpeERRVUZETzBGQlF6ZENPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVMnRRTEZsQlFWVXNRMEZCUXl4TlFVRk5MRVZCUVVVc1RVRkJUU3hGUVVGRk8wRkJRM0JETEVWQlFVVXNUMEZCVHl4TlFVRk5MRWxCUVVsNlNTeFpRVUZWTEVOQlFVTXNUVUZCVFN4RlFVRkZjVU1zVFVGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRE8wRkJRelZFTEVOQlFVTTdRVUZEUkR0QlFVTkJMRWxCUVVFc1YwRkJZeXhIUVVGSGIwY3NXVUZCVlRzN1FVTm9Rak5DTEVsQlFVbDZTU3haUVVGVkxFZEJRVWRxU0N4WFFVRjNRanRCUVVONlF5eEpRVUZKZDBnc1VVRkJUU3hIUVVGSGFFZ3NVVUZCYlVJc1EwRkJRenRCUVVOcVF6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZOQlFWTnRVQ3hqUVVGWkxFTkJRVU1zVFVGQlRTeEZRVUZGTEUxQlFVMHNSVUZCUlR0QlFVTjBReXhGUVVGRkxFOUJRVThzVFVGQlRTeEpRVUZKTVVrc1dVRkJWU3hEUVVGRExFMUJRVTBzUlVGQlJVOHNVVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETzBGQlF6bEVMRU5CUVVNN1FVRkRSRHRCUVVOQkxFbEJRVUVzWVVGQll5eEhRVUZIYlVrc1kwRkJXVHM3UVVOb1FqZENMRWxCUVVreFNTeFpRVUZWTEVkQlFVZHFTQ3hYUVVGM1FqdEJRVU42UXl4SlFVRkpjMHNzV1VGQlZTeEhRVUZIT1Vvc1YwRkJkMElzUTBGQlF6dEJRVU14UXp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRiMUFzWVVGQlZ5eERRVUZETEUxQlFVMHNSVUZCUlN4TlFVRk5MRVZCUVVVN1FVRkRja01zUlVGQlJTeFBRVUZQTTBrc1dVRkJWU3hEUVVGRExFMUJRVTBzUlVGQlJYRkVMRmxCUVZVc1EwRkJReXhOUVVGTkxFTkJRVU1zUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUXp0QlFVTjRSQ3hEUVVGRE8wRkJRMFE3UVVGRFFTeEpRVUZCTEZsQlFXTXNSMEZCUjNOR0xHRkJRVmM3TzBGRFpqVkNMRWxCUVVrc1UwRkJVeXhIUVVGSE5WQXNhVUpCUVhWQ0xFVkJRVUU3UVVGRGRrTXNTVUZCU1N4WlFVRlpMRWRCUVVkUkxHRkJRVEJDTzBGQlF6ZERMRWxCUVVrc1ZVRkJWU3hIUVVGSFF5eFhRVUYzUWp0QlFVTjZReXhKUVVGSkxGTkJRVk1zUjBGQlIwTXNWMEZCYzBJc1EwRkJRenRCUVVOMlF6dEJRVU5CTzBGQlEwRXNTVUZCU1N4blFrRkJaMElzUjBGQlJ5eE5RVUZOTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU03UVVGRGNFUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVsQlFVbHRVQ3hqUVVGWkxFZEJRVWNzUTBGQlF5eG5Ra0ZCWjBJc1IwRkJSeXhUUVVGVExFZEJRVWNzVTBGQlV5eE5RVUZOTEVWQlFVVTdRVUZEY0VVc1JVRkJSU3hKUVVGSkxFMUJRVTBzUjBGQlJ5eEZRVUZGTEVOQlFVTTdRVUZEYkVJc1JVRkJSU3hQUVVGUExFMUJRVTBzUlVGQlJUdEJRVU5xUWl4SlFVRkpMRk5CUVZNc1EwRkJReXhOUVVGTkxFVkJRVVVzVlVGQlZTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRNVU1zU1VGQlNTeE5RVUZOTEVkQlFVY3NXVUZCV1N4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8wRkJRMnhETEVkQlFVYzdRVUZEU0N4RlFVRkZMRTlCUVU4c1RVRkJUU3hEUVVGRE8wRkJRMmhDTEVOQlFVTXNRMEZCUXp0QlFVTkdPMEZCUTBFc1NVRkJRU3hoUVVGakxFZEJRVWRCTEdOQlFWazdPMEZEZUVJM1FpeEpRVUZKTEZWQlFWVXNSMEZCUnpkUUxGZEJRWGRDTzBGQlEzcERMRWxCUVVrMlVDeGpRVUZaTEVkQlFVZHlVQ3hoUVVFd1FpeERRVUZETzBGQlF6bERPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRk5CUVZOelVDeGxRVUZoTEVOQlFVTXNUVUZCVFN4RlFVRkZMRTFCUVUwc1JVRkJSVHRCUVVOMlF5eEZRVUZGTEU5QlFVOHNWVUZCVlN4RFFVRkRMRTFCUVUwc1JVRkJSVVFzWTBGQldTeERRVUZETEUxQlFVMHNRMEZCUXl4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRE8wRkJRekZFTEVOQlFVTTdRVUZEUkR0QlFVTkJMRWxCUVVFc1kwRkJZeXhIUVVGSFF5eGxRVUZoT3p0QlEyWTVRaXhKUVVGSkxHTkJRV01zUjBGQlJ6bFFMR1ZCUVRSQ08wRkJRMnBFTEVsQlFVa3NXVUZCV1N4SFFVRkhVU3hoUVVFd1FqdEJRVU0zUXl4SlFVRkpaMGdzVVVGQlRTeEhRVUZITDBjc1VVRkJiVUlzUTBGQlF6dEJRVU5xUXp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRjMUFzWTBGQldTeERRVUZETEUxQlFVMHNSVUZCUlR0QlFVTTVRaXhGUVVGRkxFOUJRVThzWTBGQll5eERRVUZETEUxQlFVMHNSVUZCUlhaSkxGRkJRVTBzUlVGQlJTeFpRVUZaTEVOQlFVTXNRMEZCUXp0QlFVTjBSQ3hEUVVGRE8wRkJRMFE3UVVGRFFTeEpRVUZCTEdGQlFXTXNSMEZCUjNWSkxHTkJRVms3T3pzN1FVTm1OMElzU1VGQlNTeFhRVUZYTEVkQlFVY3NUVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJRenRCUVVOdVF6dEJRVU5CTzBGQlEwRXNTVUZCU1N4alFVRmpMRWRCUVVjc1YwRkJWeXhEUVVGRExHTkJRV01zUTBGQlF6dEJRVU5vUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNVMEZCVTBNc1owSkJRV01zUTBGQlF5eExRVUZMTEVWQlFVVTdRVUZETDBJc1JVRkJSU3hKUVVGSkxFMUJRVTBzUjBGQlJ5eExRVUZMTEVOQlFVTXNUVUZCVFR0QlFVTXpRaXhOUVVGTkxFMUJRVTBzUjBGQlJ5eEpRVUZKTEV0QlFVc3NRMEZCUXl4WFFVRlhMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03UVVGRE4wTTdRVUZEUVR0QlFVTkJMRVZCUVVVc1NVRkJTU3hOUVVGTkxFbEJRVWtzVDBGQlR5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1VVRkJVU3hKUVVGSkxHTkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZMRTlCUVU4c1EwRkJReXhGUVVGRk8wRkJRM0JHTEVsQlFVa3NUVUZCVFN4RFFVRkRMRXRCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETzBGQlF5OUNMRWxCUVVrc1RVRkJUU3hEUVVGRExFdEJRVXNzUjBGQlJ5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRPMEZCUXk5Q0xFZEJRVWM3UVVGRFNDeEZRVUZGTEU5QlFVOHNUVUZCVFN4RFFVRkRPMEZCUTJoQ0xFTkJRVU03UVVGRFJEdEJRVU5CTEVsQlFVRXNaVUZCWXl4SFFVRkhRU3huUWtGQll6czdRVU42UWk5Q0xFbEJRVWs1VEN4clFrRkJaMElzUjBGQlIyeEZMR2xDUVVFNFFpeERRVUZETzBGQlEzUkVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRk5CUVZOcFVTeGxRVUZoTEVOQlFVTXNVVUZCVVN4RlFVRkZMRTFCUVUwc1JVRkJSVHRCUVVONlF5eEZRVUZGTEVsQlFVa3NUVUZCVFN4SFFVRkhMRTFCUVUwc1IwRkJSeTlNTEd0Q1FVRm5RaXhEUVVGRExGRkJRVkVzUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4UlFVRlJMRU5CUVVNc1RVRkJUU3hEUVVGRE8wRkJRelZGTEVWQlFVVXNUMEZCVHl4SlFVRkpMRkZCUVZFc1EwRkJReXhYUVVGWExFTkJRVU1zVFVGQlRTeEZRVUZGTEZGQlFWRXNRMEZCUXl4VlFVRlZMRVZCUVVVc1VVRkJVU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzBGQlEzQkdMRU5CUVVNN1FVRkRSRHRCUVVOQkxFbEJRVUVzWTBGQll5eEhRVUZISzB3c1pVRkJZVHM3T3p0QlEyUTVRaXhKUVVGSkxFOUJRVThzUjBGQlJ5eE5RVUZOTEVOQlFVTTdRVUZEY2tJN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRk5CUVZORExHRkJRVmNzUTBGQlF5eE5RVUZOTEVWQlFVVTdRVUZETjBJc1JVRkJSU3hKUVVGSkxFMUJRVTBzUjBGQlJ5eEpRVUZKTEUxQlFVMHNRMEZCUXl4WFFVRlhMRU5CUVVNc1RVRkJUU3hEUVVGRExFMUJRVTBzUlVGQlJTeFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRE0wVXNSVUZCUlN4TlFVRk5MRU5CUVVNc1UwRkJVeXhIUVVGSExFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTTdRVUZEZEVNc1JVRkJSU3hQUVVGUExFMUJRVTBzUTBGQlF6dEJRVU5vUWl4RFFVRkRPMEZCUTBRN1FVRkRRU3hKUVVGQkxGbEJRV01zUjBGQlIwRXNZVUZCVnpzN1FVTm9RalZDTEVsQlFVazVUeXhSUVVGTkxFZEJRVWR3UWl4alFVRkJMRVZCUVc5Q0xFTkJRVU03UVVGRGJFTTdRVUZEUVR0QlFVTkJMRWxCUVVrc1YwRkJWeXhIUVVGSGIwSXNVVUZCVFN4SFFVRkhRU3hSUVVGTkxFTkJRVU1zVTBGQlV5eEhRVUZITEZOQlFWTTdRVUZEZGtRc1NVRkJTU3hoUVVGaExFZEJRVWNzVjBGQlZ5eEhRVUZITEZkQlFWY3NRMEZCUXl4UFFVRlBMRWRCUVVjc1UwRkJVeXhEUVVGRE8wRkJRMnhGTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFRRVUZUSzA4c1lVRkJWeXhEUVVGRExFMUJRVTBzUlVGQlJUdEJRVU0zUWl4RlFVRkZMRTlCUVU4c1lVRkJZU3hIUVVGSExFMUJRVTBzUTBGQlF5eGhRVUZoTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETzBGQlEycEZMRU5CUVVNN1FVRkRSRHRCUVVOQkxFbEJRVUVzV1VGQll5eEhRVUZIUVN4aFFVRlhPenRCUTJwQ05VSXNTVUZCU1N4blFrRkJaMElzUjBGQlIyNVJMR2xDUVVFNFFqdEJRVU55UkN4SlFVRkpMR0ZCUVdFc1IwRkJSMUVzWTBGQk1rSTdRVUZETDBNc1NVRkJTU3hYUVVGWExFZEJRVWRETEZsQlFYbENPMEZCUXpORExFbEJRVWtzVjBGQlZ5eEhRVUZIUXl4WlFVRjVRanRCUVVNelF5eEpRVUZKTEdWQlFXVXNSMEZCUjBNc1owSkJRVFpDTEVOQlFVTTdRVUZEY0VRN1FVRkRRVHRCUVVOQkxFbEJRVWswUlN4VFFVRlBMRWRCUVVjc2EwSkJRV3RDTzBGQlEyaERMRWxCUVVsRExGTkJRVThzUjBGQlJ5eGxRVUZsTzBGQlF6ZENMRWxCUVVsRkxGRkJRVTBzUjBGQlJ5eGpRVUZqTzBGQlF6TkNMRWxCUVVsRExGZEJRVk1zUjBGQlJ5eHBRa0ZCYVVJN1FVRkRha01zU1VGQlNVTXNWMEZCVXl4SFFVRkhMR2xDUVVGcFFqdEJRVU5xUXl4SlFVRkpReXhSUVVGTkxFZEJRVWNzWTBGQll6dEJRVU16UWl4SlFVRkpReXhYUVVGVExFZEJRVWNzYVVKQlFXbENPMEZCUTJwRExFbEJRVWtyUkN4WFFVRlRMRWRCUVVjc2FVSkJRV2xDTEVOQlFVTTdRVUZEYkVNN1FVRkRRU3hKUVVGSk4wUXNaMEpCUVdNc1IwRkJSeXh6UWtGQmMwSTdRVUZETTBNc1NVRkJTVU1zWVVGQlZ5eEhRVUZITEcxQ1FVRnRRanRCUVVOeVF5eEpRVUZKUXl4WlFVRlZMRWRCUVVjc2RVSkJRWFZDTzBGQlEzaERMRWxCUVVsRExGbEJRVlVzUjBGQlJ5eDFRa0ZCZFVJN1FVRkRlRU1zU1VGQlNVTXNVMEZCVHl4SFFVRkhMRzlDUVVGdlFqdEJRVU5zUXl4SlFVRkpReXhWUVVGUkxFZEJRVWNzY1VKQlFYRkNPMEZCUTNCRExFbEJRVWxETEZWQlFWRXNSMEZCUnl4eFFrRkJjVUk3UVVGRGNFTXNTVUZCU1VNc1ZVRkJVU3hIUVVGSExIRkNRVUZ4UWp0QlFVTndReXhKUVVGSlF5eHBRa0ZCWlN4SFFVRkhMRFJDUVVFMFFqdEJRVU5zUkN4SlFVRkpReXhYUVVGVExFZEJRVWNzYzBKQlFYTkNPMEZCUTNSRExFbEJRVWxETEZkQlFWTXNSMEZCUnl4elFrRkJjMElzUTBGQlF6dEJRVU4yUXp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk13U2l4blFrRkJZeXhEUVVGRExFMUJRVTBzUlVGQlJTeEhRVUZITEVWQlFVVXNUVUZCVFN4RlFVRkZPMEZCUXpkRExFVkJRVVVzU1VGQlNTeEpRVUZKTEVkQlFVY3NUVUZCVFN4RFFVRkRMRmRCUVZjc1EwRkJRenRCUVVOb1F5eEZRVUZGTEZGQlFWRXNSMEZCUnp0QlFVTmlMRWxCUVVrc1MwRkJTM0JMTEdkQ1FVRmpPMEZCUTNaQ0xFMUJRVTBzVDBGQlR5eG5Ra0ZCWjBJc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dEJRVU4wUXp0QlFVTkJMRWxCUVVrc1MwRkJTMVFzVTBGQlR5eERRVUZETzBGQlEycENMRWxCUVVrc1MwRkJTME1zVTBGQlR6dEJRVU5vUWl4TlFVRk5MRTlCUVU4c1NVRkJTU3hKUVVGSkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0QlFVTXZRanRCUVVOQkxFbEJRVWtzUzBGQlMxTXNZVUZCVnp0QlFVTndRaXhOUVVGTkxFOUJRVThzWVVGQllTeERRVUZETEUxQlFVMHNSVUZCUlN4TlFVRk5MRU5CUVVNc1EwRkJRenRCUVVNelF6dEJRVU5CTEVsQlFVa3NTMEZCUzBNc1dVRkJWU3hEUVVGRExFTkJRVU1zUzBGQlMwTXNXVUZCVlN4RFFVRkRPMEZCUTNKRExFbEJRVWtzUzBGQlMwTXNVMEZCVHl4RFFVRkRMRU5CUVVNc1MwRkJTME1zVlVGQlVTeERRVUZETEVOQlFVTXNTMEZCUzBNc1ZVRkJVU3hEUVVGRE8wRkJReTlETEVsQlFVa3NTMEZCUzBNc1ZVRkJVU3hEUVVGRExFTkJRVU1zUzBGQlMwTXNhVUpCUVdVc1EwRkJReXhEUVVGRExFdEJRVXRETEZkQlFWTXNRMEZCUXl4RFFVRkRMRXRCUVV0RExGZEJRVk03UVVGRGRrVXNUVUZCVFN4UFFVRlBMR1ZCUVdVc1EwRkJReXhOUVVGTkxFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTTdRVUZETjBNN1FVRkRRU3hKUVVGSkxFdEJRVXRvUWl4UlFVRk5PMEZCUTJZc1RVRkJUU3hQUVVGUExFbEJRVWtzU1VGQlNTeERRVUZETzBGQlEzUkNPMEZCUTBFc1NVRkJTU3hMUVVGTFF5eFhRVUZUTEVOQlFVTTdRVUZEYmtJc1NVRkJTU3hMUVVGTFJ5eFhRVUZUTzBGQlEyeENMRTFCUVUwc1QwRkJUeXhKUVVGSkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0QlFVTTVRanRCUVVOQkxFbEJRVWtzUzBGQlMwWXNWMEZCVXp0QlFVTnNRaXhOUVVGTkxFOUJRVThzVjBGQlZ5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMEZCUTJwRE8wRkJRMEVzU1VGQlNTeExRVUZMUXl4UlFVRk5PMEZCUTJZc1RVRkJUU3hQUVVGUExFbEJRVWtzU1VGQlNTeERRVUZETzBGQlEzUkNPMEZCUTBFc1NVRkJTU3hMUVVGTFowVXNWMEZCVXp0QlFVTnNRaXhOUVVGTkxFOUJRVThzVjBGQlZ5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMEZCUTJwRExFZEJRVWM3UVVGRFNDeERRVUZETzBGQlEwUTdRVUZEUVN4SlFVRkJMR1ZCUVdNc1IwRkJSM1ZITEdkQ1FVRmpPenRCUXpWRkwwSXNTVUZCU1hoR0xGRkJRVTBzUjBGQlJ6VkxMRTlCUVc5Q08wRkJRMnBETEVsQlFVa3dSU3hqUVVGWkxFZEJRVWRzUlN4alFVRjVRaXhEUVVGRE8wRkJRemRETzBGQlEwRTdRVUZEUVN4SlFVRkphMFlzVVVGQlRTeEhRVUZITEdOQlFXTXNRMEZCUXp0QlFVTTFRanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVekpMTEZkQlFWTXNRMEZCUXl4TFFVRkxMRVZCUVVVN1FVRkRNVUlzUlVGQlJTeFBRVUZQTTB3c1kwRkJXU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKYTBjc1VVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKYkVZc1VVRkJUU3hEUVVGRE8wRkJRM2hFTEVOQlFVTTdRVUZEUkR0QlFVTkJMRWxCUVVFc1ZVRkJZeXhIUVVGSE1rc3NWMEZCVXpzN1FVTnFRakZDTEVsQlFVa3NVMEZCVXl4SFFVRkhjbEVzVlVGQmRVSTdRVUZEZGtNc1NVRkJTVFJITEZkQlFWTXNSMEZCUjNCSExHbENRVUYxUWl4RlFVRkJPMEZCUTNaRExFbEJRVWx4Unl4VlFVRlJMRWRCUVVkd1J5eHBRa0ZCYzBJc1EwRkJRenRCUVVOMFF6dEJRVU5CTzBGQlEwRXNTVUZCU1N4VFFVRlRMRWRCUVVkdlJ5eFZRVUZSTEVsQlFVbEJMRlZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU03UVVGRE0wTTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTVUZCU1hsS0xFOUJRVXNzUjBGQlJ5eFRRVUZUTEVkQlFVY3hTaXhYUVVGVExFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NVMEZCVXl4RFFVRkRPMEZCUTNwRU8wRkJRMEVzU1VGQlFTeFBRVUZqTEVkQlFVY3dTaXhQUVVGTE96dEJRekZDZEVJc1NVRkJTVEZHTEZGQlFVMHNSMEZCUnpWTExFOUJRVzlDTzBGQlEycERMRWxCUVVrd1JTeGpRVUZaTEVkQlFVZHNSU3hqUVVGNVFpeERRVUZETzBGQlF6ZERPMEZCUTBFN1FVRkRRU3hKUVVGSmNVWXNVVUZCVFN4SFFVRkhMR05CUVdNc1EwRkJRenRCUVVNMVFqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVTBGQlV6QkxMRmRCUVZNc1EwRkJReXhMUVVGTExFVkJRVVU3UVVGRE1VSXNSVUZCUlN4UFFVRlBOMHdzWTBGQldTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkphMGNzVVVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMMFVzVVVGQlRTeERRVUZETzBGQlEzaEVMRU5CUVVNN1FVRkRSRHRCUVVOQkxFbEJRVUVzVlVGQll5eEhRVUZITUVzc1YwRkJVenM3UVVOcVFqRkNMRWxCUVVrc1UwRkJVeXhIUVVGSGRsRXNWVUZCZFVJN1FVRkRka01zU1VGQlNTeFRRVUZUTEVkQlFVZFJMR2xDUVVGMVFpeEZRVUZCTzBGQlEzWkRMRWxCUVVrc1VVRkJVU3hIUVVGSFF5eHBRa0ZCYzBJc1EwRkJRenRCUVVOMFF6dEJRVU5CTzBGQlEwRXNTVUZCU1N4VFFVRlRMRWRCUVVjc1VVRkJVU3hKUVVGSkxGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTTdRVUZETTBNN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1NVRkJTU3RRTEU5QlFVc3NSMEZCUnl4VFFVRlRMRWRCUVVjc1UwRkJVeXhEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEZOQlFWTXNRMEZCUXp0QlFVTjZSRHRCUVVOQkxFbEJRVUVzVDBGQll5eEhRVUZIUVN4UFFVRkxPenRCUXpGQ2RFSXNTVUZCU1N4TFFVRkxMRWRCUVVkNFVTeE5RVUZ0UWp0QlFVTXZRaXhKUVVGSkxGTkJRVk1zUjBGQlIxRXNWVUZCZFVJN1FVRkRka01zU1VGQlNYZEhMR0ZCUVZjc1IwRkJSM1pITEZsQlFYbENPMEZCUXpORExFbEJRVWtzVlVGQlZTeEhRVUZIUXl4WFFVRjNRanRCUVVONlF5eEpRVUZKTEZsQlFWa3NSMEZCUjBNc1lVRkJNRUk3UVVGRE4wTXNTVUZCU1N4WFFVRlhMRWRCUVVjclF5eHZRa0ZCZVVJN1FVRkRNME1zU1VGQlNWVXNWMEZCVXl4SFFVRkhkVVFzVlVGQmRVSTdRVUZEZGtNc1NVRkJTU3hYUVVGWExFZEJRVWRETEZsQlFYbENPMEZCUXpORExFbEJRVWtzWVVGQllTeEhRVUZIUXl4alFVRXlRanRCUVVNdlF5eEpRVUZKTEZWQlFWVXNSMEZCUjBNc1YwRkJkMEk3UVVGRGVrTXNTVUZCU1N4WlFVRlpMRWRCUVVkRExHRkJRVEJDTzBGQlF6ZERMRWxCUVVrMlF5eFJRVUZOTEVkQlFVYzFReXhQUVVGdlFqdEJRVU5xUXl4SlFVRkpMR05CUVdNc1IwRkJSME1zWlVGQk5FSTdRVUZEYWtRc1NVRkJTU3hqUVVGakxFZEJRVWRETEdWQlFUUkNPMEZCUTJwRUxFbEJRVWtzWlVGQlpTeEhRVUZIUXl4blFrRkJOa0k3UVVGRGJrUXNTVUZCU1hCRUxGTkJRVThzUjBGQlJ6Qk1MRk5CUVc5Q08wRkJRMnhETEVsQlFVa3NVVUZCVVN4SFFVRkhReXhyUWtGQmNVSTdRVUZEY0VNc1NVRkJTU3hMUVVGTExFZEJRVWRETEU5QlFXdENPMEZCUXpsQ0xFbEJRVWt2VHl4VlFVRlJMRWRCUVVkblVDeFZRVUZ4UWp0QlFVTndReXhKUVVGSkxFdEJRVXNzUjBGQlIwTXNUMEZCYTBJN1FVRkRPVUlzU1VGQlNTeEpRVUZKTEVkQlFVZERMRTFCUVdsQ08wRkJRelZDTEVsQlFVa3NUVUZCVFN4SFFVRkhReXhSUVVGdFFpeERRVUZETzBGQlEycERPMEZCUTBFN1FVRkRRU3hKUVVGSlF5eHBRa0ZCWlN4SFFVRkhMRU5CUVVNN1FVRkRka0lzU1VGQlNTeGxRVUZsTEVkQlFVY3NRMEZCUXp0QlFVTjJRaXhKUVVGSlF5eHZRa0ZCYTBJc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRE0wSTdRVUZEUVR0QlFVTkJMRWxCUVVrc1QwRkJUeXhIUVVGSExHOUNRVUZ2UWp0QlFVTnNReXhKUVVGSkxGRkJRVkVzUjBGQlJ5eG5Ra0ZCWjBJN1FVRkRMMElzU1VGQlNTeFBRVUZQTEVkQlFVY3NhMEpCUVd0Q08wRkJRMmhETEVsQlFVa3NUMEZCVHl4SFFVRkhMR1ZCUVdVN1FVRkROMElzU1VGQlNYaE1MRlZCUVZFc1IwRkJSeXhuUWtGQlowSTdRVUZETDBJc1NVRkJTU3hQUVVGUExFZEJRVWNzYlVKQlFXMUNPMEZCUTJwRExFbEJRVWtzVFVGQlRTeEhRVUZITERSQ1FVRTBRanRCUVVONlF5eEpRVUZKTEUxQlFVMHNSMEZCUnl4alFVRmpPMEZCUXpOQ0xFbEJRVWtzVTBGQlV5eEhRVUZITEdsQ1FVRnBRanRCUVVOcVF5eEpRVUZKTEZOQlFWTXNSMEZCUnl4cFFrRkJhVUk3UVVGRGFrTXNTVUZCU1N4VFFVRlRMRWRCUVVjc2FVSkJRV2xDTzBGQlEycERMRWxCUVVrc1RVRkJUU3hIUVVGSExHTkJRV003UVVGRE0wSXNTVUZCU1N4VFFVRlRMRWRCUVVjc2FVSkJRV2xDTzBGQlEycERMRWxCUVVrc1UwRkJVeXhIUVVGSExHbENRVUZwUWp0QlFVTnFReXhKUVVGSlRTeFpRVUZWTEVkQlFVY3NhMEpCUVd0Q0xFTkJRVU03UVVGRGNFTTdRVUZEUVN4SlFVRkpMR05CUVdNc1IwRkJSeXh6UWtGQmMwSTdRVUZETTBNc1NVRkJTU3hYUVVGWExFZEJRVWNzYlVKQlFXMUNPMEZCUTNKRExFbEJRVWtzVlVGQlZTeEhRVUZITEhWQ1FVRjFRanRCUVVONFF5eEpRVUZKTEZWQlFWVXNSMEZCUnl4MVFrRkJkVUk3UVVGRGVFTXNTVUZCU1N4UFFVRlBMRWRCUVVjc2IwSkJRVzlDTzBGQlEyeERMRWxCUVVrc1VVRkJVU3hIUVVGSExIRkNRVUZ4UWp0QlFVTndReXhKUVVGSkxGRkJRVkVzUjBGQlJ5eHhRa0ZCY1VJN1FVRkRjRU1zU1VGQlNTeFJRVUZSTEVkQlFVY3NjVUpCUVhGQ08wRkJRM0JETEVsQlFVa3NaVUZCWlN4SFFVRkhMRFJDUVVFMFFqdEJRVU5zUkN4SlFVRkpMRk5CUVZNc1IwRkJSeXh6UWtGQmMwSTdRVUZEZEVNc1NVRkJTU3hUUVVGVExFZEJRVWNzYzBKQlFYTkNMRU5CUVVNN1FVRkRka003UVVGRFFUdEJRVU5CTEVsQlFVa3NZVUZCWVN4SFFVRkhMRVZCUVVVc1EwRkJRenRCUVVOMlFpeGhRVUZoTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1lVRkJZU3hEUVVGRExGRkJRVkVzUTBGQlF6dEJRVU5vUkN4aFFVRmhMRU5CUVVNc1kwRkJZeXhEUVVGRExFZEJRVWNzWVVGQllTeERRVUZETEZkQlFWY3NRMEZCUXp0QlFVTXhSQ3hoUVVGaExFTkJRVU1zVDBGQlR5eERRVUZETEVkQlFVY3NZVUZCWVN4RFFVRkRMRTlCUVU4c1EwRkJRenRCUVVNdlF5eGhRVUZoTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWRCUVVjc1lVRkJZU3hEUVVGRExGVkJRVlVzUTBGQlF6dEJRVU55UkN4aFFVRmhMRU5CUVVNc1QwRkJUeXhEUVVGRExFZEJRVWNzWVVGQllTeERRVUZETEZGQlFWRXNRMEZCUXp0QlFVTm9SQ3hoUVVGaExFTkJRVU1zVVVGQlVTeERRVUZETEVkQlFVY3NZVUZCWVN4RFFVRkRMRTFCUVUwc1EwRkJRenRCUVVNdlF5eGhRVUZoTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVjc1lVRkJZU3hEUVVGRExGTkJRVk1zUTBGQlF6dEJRVU51UkN4aFFVRmhMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzWVVGQllTeERRVUZETEUxQlFVMHNRMEZCUXp0QlFVTm9SQ3hoUVVGaExFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NZVUZCWVN4RFFVRkRMRk5CUVZNc1EwRkJRenRCUVVOdVJDeGhRVUZoTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWRCUVVjc1lVRkJZU3hEUVVGRExHVkJRV1VzUTBGQlF6dEJRVU40UkN4aFFVRmhMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzWVVGQllTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJRenRCUVVNelJDeGhRVUZoTEVOQlFVTk9MRlZCUVZFc1EwRkJReXhIUVVGSExHRkJRV0VzUTBGQlF5eFBRVUZQTEVOQlFVTTdRVUZEYUVRc1lVRkJZU3hEUVVGRFRTeFpRVUZWTEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNN1FVRkRiRU03UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk50VEN4WFFVRlRMRU5CUVVNc1MwRkJTeXhGUVVGRkxFOUJRVThzUlVGQlJTeFZRVUZWTEVWQlFVVXNSMEZCUnl4RlFVRkZMRTFCUVUwc1JVRkJSU3hMUVVGTExFVkJRVVU3UVVGRGJrVXNSVUZCUlN4SlFVRkpMRTFCUVUwN1FVRkRXaXhOUVVGTkxFMUJRVTBzUjBGQlJ5eFBRVUZQTEVkQlFVZEdMR2xDUVVGbE8wRkJRM2hETEUxQlFVMHNUVUZCVFN4SFFVRkhMRTlCUVU4c1IwRkJSeXhsUVVGbE8wRkJRM2hETEUxQlFVMHNUVUZCVFN4SFFVRkhMRTlCUVU4c1IwRkJSME1zYjBKQlFXdENMRU5CUVVNN1FVRkROVU03UVVGRFFTeEZRVUZGTEVsQlFVa3NWVUZCVlN4RlFVRkZPMEZCUTJ4Q0xFbEJRVWtzVFVGQlRTeEhRVUZITEUxQlFVMHNSMEZCUnl4VlFVRlZMRU5CUVVNc1MwRkJTeXhGUVVGRkxFZEJRVWNzUlVGQlJTeE5RVUZOTEVWQlFVVXNTMEZCU3l4RFFVRkRMRWRCUVVjc1ZVRkJWU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBGQlEyaEdMRWRCUVVjN1FVRkRTQ3hGUVVGRkxFbEJRVWtzVFVGQlRTeExRVUZMTEZOQlFWTXNSVUZCUlR0QlFVTTFRaXhKUVVGSkxFOUJRVThzVFVGQlRTeERRVUZETzBGQlEyeENMRWRCUVVjN1FVRkRTQ3hGUVVGRkxFbEJRVWtzUTBGQlEzSlFMRlZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJUdEJRVU40UWl4SlFVRkpMRTlCUVU4c1MwRkJTeXhEUVVGRE8wRkJRMnBDTEVkQlFVYzdRVUZEU0N4RlFVRkZMRWxCUVVrc1MwRkJTeXhIUVVGSGJVUXNVMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8wRkJRemRDTEVWQlFVVXNTVUZCU1N4TFFVRkxMRVZCUVVVN1FVRkRZaXhKUVVGSkxFMUJRVTBzUjBGQlJ5eGpRVUZqTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRia01zU1VGQlNTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZPMEZCUTJwQ0xFMUJRVTBzVDBGQlQxZ3NWMEZCVXl4RFFVRkRMRXRCUVVzc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF6dEJRVU4wUXl4TFFVRkxPMEZCUTB3c1IwRkJSeXhOUVVGTk8wRkJRMVFzU1VGQlNTeEpRVUZKTEVkQlFVY3NSMEZCUjNkSExGRkJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTTdRVUZETTBJc1VVRkJVU3hOUVVGTkxFZEJRVWNzUjBGQlJ5eEpRVUZKTEU5QlFVOHNTVUZCU1N4SFFVRkhMRWxCUVVrc1RVRkJUU3hEUVVGRE8wRkJRMnBFTzBGQlEwRXNTVUZCU1N4SlFVRkpMRkZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJUdEJRVU42UWl4TlFVRk5MRTlCUVU4c1YwRkJWeXhEUVVGRExFdEJRVXNzUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUXp0QlFVTjRReXhMUVVGTE8wRkJRMHdzU1VGQlNTeEpRVUZKTEVkQlFVY3NTVUZCU1N4VFFVRlRMRWxCUVVrc1IwRkJSeXhKUVVGSkxFOUJRVThzUzBGQlN5eE5RVUZOTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1JVRkJSVHRCUVVOdVJTeE5RVUZOTEUxQlFVMHNSMEZCUnl4RFFVRkRMRTFCUVUwc1NVRkJTU3hOUVVGTkxFbEJRVWtzUlVGQlJTeEhRVUZITEdWQlFXVXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRCUVVOb1JTeE5RVUZOTEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVN1FVRkRia0lzVVVGQlVTeFBRVUZQTEUxQlFVMDdRVUZEY2tJc1dVRkJXU3hoUVVGaExFTkJRVU1zUzBGQlN5eEZRVUZGTEZsQlFWa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03UVVGRE4wUXNXVUZCV1N4WFFVRlhMRU5CUVVNc1MwRkJTeXhGUVVGRkxGVkJRVlVzUTBGQlF5eE5RVUZOTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVNeFJDeFBRVUZQTzBGQlExQXNTMEZCU3l4TlFVRk5PMEZCUTFnc1RVRkJUU3hKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZPMEZCUXk5Q0xGRkJRVkVzVDBGQlR5eE5RVUZOTEVkQlFVY3NTMEZCU3l4SFFVRkhMRVZCUVVVc1EwRkJRenRCUVVOdVF5eFBRVUZQTzBGQlExQXNUVUZCVFN4TlFVRk5MRWRCUVVjc1kwRkJZeXhEUVVGRExFdEJRVXNzUlVGQlJTeEhRVUZITEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN1FVRkRiRVFzUzBGQlN6dEJRVU5NTEVkQlFVYzdRVUZEU0R0QlFVTkJMRVZCUVVVc1MwRkJTeXhMUVVGTExFdEJRVXNzUjBGQlJ5eEpRVUZKTEV0QlFVc3NRMEZCUXl4RFFVRkRPMEZCUXk5Q0xFVkJRVVVzU1VGQlNTeFBRVUZQTEVkQlFVY3NTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU5xUXl4RlFVRkZMRWxCUVVrc1QwRkJUeXhGUVVGRk8wRkJRMllzU1VGQlNTeFBRVUZQTEU5QlFVOHNRMEZCUXp0QlFVTnVRaXhIUVVGSE8wRkJRMGdzUlVGQlJTeExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF6dEJRVU16UWp0QlFVTkJMRVZCUVVVc1NVRkJTU3hMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEVWQlFVVTdRVUZEY0VJc1NVRkJTU3hMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEZOQlFWTXNVVUZCVVN4RlFVRkZPMEZCUTNKRExFMUJRVTBzVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUTNOSExGZEJRVk1zUTBGQlF5eFJRVUZSTEVWQlFVVXNUMEZCVHl4RlFVRkZMRlZCUVZVc1JVRkJSU3hSUVVGUkxFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRia1lzUzBGQlN5eERRVUZETEVOQlFVTTdRVUZEVUN4SFFVRkhMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEVWQlFVVTdRVUZETTBJc1NVRkJTU3hMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEZOQlFWTXNVVUZCVVN4RlFVRkZMRWRCUVVjc1JVRkJSVHRCUVVNeFF5eE5RVUZOTEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhGUVVGRlFTeFhRVUZUTEVOQlFVTXNVVUZCVVN4RlFVRkZMRTlCUVU4c1JVRkJSU3hWUVVGVkxFVkJRVVVzUjBGQlJ5eEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRMjVHTEV0QlFVc3NRMEZCUXl4RFFVRkRPMEZCUTFBc1IwRkJSenRCUVVOSU8wRkJRMEVzUlVGQlJTeEpRVUZKTEZGQlFWRXNSMEZCUnl4TlFVRk5PMEZCUTNaQ0xFOUJRVThzVFVGQlRTeEhRVUZITEZsQlFWa3NSMEZCUnl4VlFVRlZPMEZCUTNwRExFOUJRVThzVFVGQlRTeEhRVUZITEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1EwRkJRenRCUVVNdlFqdEJRVU5CTEVWQlFVVXNTVUZCU1N4TFFVRkxMRWRCUVVjc1MwRkJTeXhIUVVGSExGTkJRVk1zUjBGQlJ5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRiRVFzUlVGQlJTeFRRVUZUTEVOQlFVTXNTMEZCU3l4SlFVRkpMRXRCUVVzc1JVRkJSU3hUUVVGVExGRkJRVkVzUlVGQlJTeEhRVUZITEVWQlFVVTdRVUZEY0VRc1NVRkJTU3hKUVVGSkxFdEJRVXNzUlVGQlJUdEJRVU5tTEUxQlFVMHNSMEZCUnl4SFFVRkhMRkZCUVZFc1EwRkJRenRCUVVOeVFpeE5RVUZOTEZGQlFWRXNSMEZCUnl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRE5VSXNTMEZCU3p0QlFVTk1PMEZCUTBFc1NVRkJTV3hMTEdGQlFWY3NRMEZCUXl4TlFVRk5MRVZCUVVVc1IwRkJSeXhGUVVGRmEwc3NWMEZCVXl4RFFVRkRMRkZCUVZFc1JVRkJSU3hQUVVGUExFVkJRVVVzVlVGQlZTeEZRVUZGTEVkQlFVY3NSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU14Uml4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVOTUxFVkJRVVVzVDBGQlR5eE5RVUZOTEVOQlFVTTdRVUZEYUVJc1EwRkJRenRCUVVORU8wRkJRMEVzU1VGQlFTeFZRVUZqTEVkQlFVZEJMRmRCUVZNN08wRkRja3N4UWl4SlFVRkpRU3hYUVVGVExFZEJRVWRzVWl4VlFVRjFRaXhEUVVGRE8wRkJRM2hETzBGQlEwRTdRVUZEUVN4SlFVRkpMR3RDUVVGclFpeEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTXpRanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hUUVVGVExFdEJRVXNzUTBGQlF5eExRVUZMTEVWQlFVVTdRVUZEZEVJc1JVRkJSU3hQUVVGUGExSXNWMEZCVXl4RFFVRkRMRXRCUVVzc1JVRkJSU3hyUWtGQmEwSXNRMEZCUXl4RFFVRkRPMEZCUXpsRExFTkJRVU03UVVGRFJEdEJRVU5CTEVsQlFVRXNUMEZCWXl4SFFVRkhMRXRCUVVzN08wRkRia04wUWl4SlFVRkpla0lzV1VGQlZTeEhRVUZIZWxBc1YwRkJkMElzUTBGQlF6dEJRVU14UXp0QlFVTkJPMEZCUTBFc1NVRkJTU3hsUVVGbExFZEJRVWNzUTBGQlF5eERRVUZETzBGQlEzaENPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZOQlFWTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTzBGQlEyNURMRVZCUVVVc1MwRkJTeXhIUVVGSExFdEJRVXNzUjBGQlJ5eFRRVUZUTEVkQlFVY3NTMEZCU3l4RFFVRkRPMEZCUTNCRExFVkJRVVVzU1VGQlNTeE5RVUZOTEVkQlFVZDVVQ3haUVVGVkxFTkJRVU1zU1VGQlNTeEZRVUZGTEdWQlFXVXNSVUZCUlN4VFFVRlRMRVZCUVVVc1UwRkJVeXhGUVVGRkxGTkJRVk1zUlVGQlJTeFRRVUZUTEVWQlFVVXNVMEZCVXl4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRE8wRkJReTlITEVWQlFVVXNUVUZCVFN4RFFVRkRMRmRCUVZjc1IwRkJSeXhMUVVGTExFTkJRVU1zVjBGQlZ5eERRVUZETzBGQlEzcERMRVZCUVVVc1QwRkJUeXhOUVVGTkxFTkJRVU03UVVGRGFFSXNRMEZCUXp0QlFVTkVPMEZCUTBFN1FVRkRRU3hMUVVGTExFTkJRVU1zVjBGQlZ5eEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTjJRanRCUVVOQkxFbEJRVUVzVDBGQll5eEhRVUZITEV0QlFVczdPMEZEZUVSMFFpeEpRVUZKTEZWQlFWVXNSMEZCUjNwUUxGZEJRWGRDTzBGQlEzcERMRWxCUVVrd1JTeGpRVUZaTEVkQlFVZHNSU3hqUVVGNVFqdEJRVU0xUXl4SlFVRkpMR0ZCUVdFc1IwRkJSME1zWlVGQk1FSXNRMEZCUXp0QlFVTXZRenRCUVVOQk8wRkJRMEVzU1VGQlNTeFRRVUZUTEVkQlFVY3NkVUpCUVhWQ08wRkJRM1pETEVsQlFVa3NVVUZCVVN4SFFVRkhMR2RDUVVGblFpeERRVUZETzBGQlEyaERPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVeXhQUVVGUExFTkJRVU1zUzBGQlN5eEZRVUZGTzBGQlEzaENMRVZCUVVVc1NVRkJTU3hEUVVGRGFVVXNZMEZCV1N4RFFVRkRMRXRCUVVzc1EwRkJReXhGUVVGRk8wRkJRelZDTEVsQlFVa3NUMEZCVHl4TFFVRkxMRU5CUVVNN1FVRkRha0lzUjBGQlJ6dEJRVU5JTEVWQlFVVXNTVUZCU1N4SFFVRkhMRWRCUVVjc1ZVRkJWU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBGQlF6bENMRVZCUVVVc1QwRkJUeXhIUVVGSExFbEJRVWtzVVVGQlVTeEpRVUZKTEVkQlFVY3NTVUZCU1N4VFFVRlRPMEZCUXpWRExFdEJRVXNzVDBGQlR5eExRVUZMTEVOQlFVTXNUMEZCVHl4SlFVRkpMRkZCUVZFc1NVRkJTU3hQUVVGUExFdEJRVXNzUTBGQlF5eEpRVUZKTEVsQlFVa3NVVUZCVVN4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEYWtjc1EwRkJRenRCUVVORU8wRkJRMEVzU1VGQlFTeFRRVUZqTEVkQlFVY3NUMEZCVHpzN1FVTnVRM2hDTEVsQlFVa3NUVUZCVFN4SFFVRkhNVVVzVDBGQmIwSTdRVUZEYWtNc1NVRkJTU3haUVVGWkxFZEJRVWRSTEdOQlFYbENMRU5CUVVNN1FVRkROME03UVVGRFFUdEJRVU5CTEVsQlFVa3NWVUZCVlN4SFFVRkhMR3RDUVVGclFpeERRVUZETzBGQlEzQkRPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRk5CUVZNc1UwRkJVeXhEUVVGRExFdEJRVXNzUlVGQlJUdEJRVU14UWl4RlFVRkZMRTlCUVU4c1dVRkJXU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hWUVVGVkxFTkJRVU03UVVGRE5VUXNRMEZCUXp0QlFVTkVPMEZCUTBFc1NVRkJRU3hYUVVGakxFZEJRVWNzVTBGQlV6czdRVU16UWpGQ0xFbEJRVWtzVTBGQlV5eEhRVUZIVWl4VlFVRjFRanRCUVVOMlF5eEpRVUZKZVUwc1kwRkJXU3hIUVVGSGFrMHNZVUZCTUVJc1EwRkJRenRCUVVNNVF6dEJRVU5CTzBGQlEwRXNTVUZCU1N4bFFVRmxMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRM2hDTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVTBGQlV5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RlFVRkZPMEZCUTNoQ0xFVkJRVVVzVDBGQlQybE5MR05CUVZrc1EwRkJReXhQUVVGUExFbEJRVWtzU1VGQlNTeFZRVUZWTEVkQlFVY3NTVUZCU1N4SFFVRkhMRk5CUVZNc1EwRkJReXhKUVVGSkxFVkJRVVVzWlVGQlpTeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTXpSaXhEUVVGRE8wRkJRMFE3UVVGRFFTeEpRVUZCTEZWQlFXTXNSMEZCUnl4UlFVRlJPenM3T3pzN096dERRM0JFZWtJc1NVRkJTU3hOUVVGTkxFZEJRVWQ2VFN4alFVRnZRaXhGUVVGQk8wdEJRemRDTEZkQlFWY3NSMEZCUjFFc1lVRkJkMEk3UzBGRGRFTXNUMEZCVHl4SFFVRkhReXhUUVVGdlFpeERRVUZETzBGQlEyNURPMEZCUTBFN1EwRkRRU3hKUVVGSkxHZENRVUZuUWl4SFFVRkhMRTFCUVUwc1IwRkJSeXhOUVVGTkxFTkJRVU1zYTBKQlFXdENMRWRCUVVjc1UwRkJVeXhEUVVGRE8wRkJRM1JGTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UTBGRFFTeFRRVUZUTEdGQlFXRXNRMEZCUXl4TFFVRkxMRVZCUVVVN1IwRkROVUlzVDBGQlR5eFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1YwRkJWeXhEUVVGRExFdEJRVXNzUTBGQlF6dExRVU42UXl4RFFVRkRMRVZCUVVVc1owSkJRV2RDTEVsQlFVa3NTMEZCU3l4SlFVRkpMRXRCUVVzc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4RFFVRkRMRU5CUVVNN1JVRkROVVE3UVVGRFJEdEJRVU5CTEVOQlFVRXNZMEZCWXl4SFFVRkhMR0ZCUVdFc1EwRkJRVHM3T3pzN096czdPenREUTI1Q09VSXNTVUZCU1N4VFFVRlRMRWRCUVVkVUxHbENRVUYxUWl4RlFVRkJPMHRCUTI1RExHRkJRV0VzUjBGQlIxRXNjVUpCUVVFc1JVRkJNa0lzUTBGQlF6dEJRVU5vUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1EwRkRRU3hUUVVGVExGZEJRVmNzUTBGQlF5eExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRk5CUVZNc1JVRkJSU3hSUVVGUkxFVkJRVVVzVFVGQlRTeEZRVUZGTzBGQlEyaEZMRWRCUVVVc1NVRkJTU3hMUVVGTExFZEJRVWNzUTBGQlF5eERRVUZETzBGQlEyaENMRTlCUVUwc1RVRkJUU3hIUVVGSExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTTdRVUZETlVJN1FVRkRRU3hIUVVGRkxGTkJRVk1zUzBGQlN5eFRRVUZUTEVkQlFVY3NZVUZCWVN4RFFVRkRMRU5CUVVNN1FVRkRNME1zUjBGQlJTeE5RVUZOTEV0QlFVc3NUVUZCVFN4SFFVRkhMRVZCUVVVc1EwRkJReXhEUVVGRE8wRkJRekZDTzBGQlEwRXNSMEZCUlN4UFFVRlBMRVZCUVVVc1MwRkJTeXhIUVVGSExFMUJRVTBzUlVGQlJUdEJRVU16UWl4TFFVRkpMRWxCUVVrc1MwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0TFFVTjZRaXhKUVVGSkxFdEJRVXNzUjBGQlJ5eERRVUZETEVsQlFVa3NVMEZCVXl4RFFVRkRMRXRCUVVzc1EwRkJReXhGUVVGRk8wRkJRM1pETEU5QlFVMHNTVUZCU1N4TFFVRkxMRWRCUVVjc1EwRkJReXhGUVVGRk8wRkJRM0pDTzBGQlEwRXNVMEZCVVN4WFFVRlhMRU5CUVVNc1MwRkJTeXhGUVVGRkxFdEJRVXNzUjBGQlJ5eERRVUZETEVWQlFVVXNVMEZCVXl4RlFVRkZMRkZCUVZFc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF6dEJRVU51UlN4UlFVRlBMRTFCUVUwN1FVRkRZaXhUUVVGUkxGTkJRVk1zUTBGQlF5eE5RVUZOTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1VVRkRNVUk3UVVGRFVDeE5RVUZMTEUxQlFVMHNTVUZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSVHRQUVVOd1FpeE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFdEJRVXNzUTBGQlF6dE5RVU12UWp0SlFVTkdPMGRCUTBRc1QwRkJUeXhOUVVGTkxFTkJRVU03UlVGRFpqdEJRVU5FTzBGQlEwRXNRMEZCUVN4WlFVRmpMRWRCUVVjc1YwRkJWeXhEUVVGQk96czdPenM3T3pzN08wTkRja00xUWl4SlFVRkpMRmRCUVZjc1IwRkJSMUlzYlVKQlFVRXNSVUZCZVVJc1EwRkJRenRCUVVNMVF6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1EwRkRRU3hUUVVGVExFOUJRVThzUTBGQlF5eExRVUZMTEVWQlFVVTdRVUZEZUVJc1IwRkJSU3hKUVVGSkxFMUJRVTBzUjBGQlJ5eExRVUZMTEVsQlFVa3NTVUZCU1N4SFFVRkhMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZETzBkQlF6bERMRTlCUVU4c1RVRkJUU3hIUVVGSExGZEJRVmNzUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRE8wVkJRelZETzBGQlEwUTdRVUZEUVN4RFFVRkJMRk5CUVdNc1IwRkJSeXhQUVVGUExFTkJRVUU3T3pzN096czdPenM3UTBOeVFuaENMRWxCUVVrc1QwRkJUeXhIUVVGSFFTeGpRVUZ2UWl4RlFVRkJPMHRCUXpsQ0xGRkJRVkVzUjBGQlIxRXNVMEZCYzBJN1MwRkRha01zVjBGQlZ5eEhRVUZIUXl4WlFVRjVRaXhEUVVGRE8wRkJRelZETzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UTBGRFFTeFRRVUZUTEZGQlFWRXNRMEZCUXl4SlFVRkpMRVZCUVVVN1FVRkRlRUlzUjBGQlJTeFBRVUZQTEZkQlFWY3NRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hGUVVGRkxGTkJRVk1zUlVGQlJTeFBRVUZQTEVOQlFVTXNSVUZCUlN4SlFVRkpMRWRCUVVjc1JVRkJSU3hEUVVGRExFTkJRVU03UlVGRGJrVTdRVUZEUkR0QlFVTkJMRU5CUVVFc1UwRkJZeXhIUVVGSExGRkJRVkVzUTBGQlFUczdPenRCUTJaNlFpeEpRVUZKTEZWQlFWVXNSMEZCUjFRc1YwRkJkMEk3UVVGRGVrTXNTVUZCU1N4UlFVRlJMRWRCUVVkUkxHZENRVUZCTEVWQlFYTkNMRU5CUVVNN1FVRkRkRU03UVVGRFFUdEJRVU5CTEVsQlFVa3NaVUZCWlN4SFFVRkhMRWRCUVVjc1EwRkJRenRCUVVNeFFqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1NVRkJTU3hMUVVGTExFZEJRVWNzVVVGQlVTeERRVUZETEZOQlFWTXNTVUZCU1N4RlFVRkZMRTlCUVU4c1JVRkJSVHRCUVVNM1F5eEZRVUZGTEU5QlFVOHNWVUZCVlN4RFFVRkRMRWxCUVVrc1JVRkJSU3hsUVVGbExFVkJRVVVzVTBGQlV5eEZRVUZGTEZOQlFWTXNSVUZCUlN4VFFVRlRMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU03UVVGRGNrWXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRTRHRCUVVOQkxFbEJRVUVzVDBGQll5eEhRVUZITEV0QlFVczdPMEZEYUVOMFFpeEpRVUZKTEZGQlFWRXNSMEZCUjFJc1owSkJRWE5DTEVWQlFVRTdRVUZEY2tNc1NVRkJTU3hUUVVGVExFZEJRVWRSTEZWQlFYVkNPMEZCUTNaRExFbEJRVWtzVDBGQlR5eEhRVUZIUXl4VFFVRnZRanRCUVVOc1F5eEpRVUZKTEZGQlFWRXNSMEZCUjBNc1ZVRkJjVUk3UVVGRGNFTXNTVUZCU1N4WlFVRlpMRWRCUVVkRExHRkJRVEJDTzBGQlF6ZERMRWxCUVVsdlRDeFBRVUZMTEVkQlFVZHlTU3hOUVVGdFFqdEJRVU12UWl4SlFVRkpMRkZCUVZFc1IwRkJSMmxGTEZWQlFYRkNMRU5CUVVNN1FVRkRja003UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVTBGQlV5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RlFVRkZPMEZCUTNaQ0xFVkJRVVVzU1VGQlNTeFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMRVZCUVVVN1FVRkRkRUlzU1VGQlNTeFBRVUZQTEZGQlFWRXNRMEZCUXl4TFFVRkxMRVZCUVVWdlJTeFBRVUZMTEVOQlFVTXNRMEZCUXp0QlFVTnNReXhIUVVGSE8wRkJRMGdzUlVGQlJTeFBRVUZQTEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEZOQlFWTXNRMEZCUXl4WlFVRlpMRU5CUVVNc1VVRkJVU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTTVSU3hEUVVGRE8wRkJRMFE3UVVGRFFTeEpRVUZCTEZGQlFXTXNSMEZCUnl4TlFVRk5PenRCUTJoRGRrSXNTVUZCUVN4TFFVRmpMRWRCUVVjN1FVRkRha0lzUlVGQlJTeExRVUZMTEVWQlFVVXZUQ3hMUVVGcFFqdEJRVU14UWl4RlFVRkZMRkZCUVZFc1JVRkJSVkVzVjBGQmVVSTdRVUZEY2tNc1JVRkJSU3hQUVVGUExFVkJRVVZETEU5QlFXMUNPMEZCUXpsQ0xFVkJRVVVzVDBGQlR5eEZRVUZGUXl4UFFVRnRRanRCUVVNNVFpeEZRVUZGTEZOQlFWTXNSVUZCUlVNc1ZVRkJkMEk3UVVGRGNrTXNSVUZCUlN4VFFVRlRMRVZCUVVVclF5eFRRVUZ4UWp0QlFVTnNReXhGUVVGRkxGTkJRVk1zUlVGQlJXbEZMRk5CUVhGQ08wRkJRMnhETEVWQlFVVXNXVUZCV1N4RlFVRkZReXhaUVVGM1FqdEJRVU40UXl4RlFVRkZMRmRCUVZjc1JVRkJSVU1zVjBGQmRVSTdRVUZEZEVNc1JVRkJSU3hWUVVGVkxFVkJRVVZETEZWQlFYTkNPMEZCUTNCRExFVkJRVVVzVFVGQlRTeEZRVUZGUXl4VFFVRjFRanRCUVVOcVF5eEZRVUZGTEU5QlFVOHNSVUZCUlVNc1QwRkJiVUk3UVVGRE9VSXNSVUZCUlN4WFFVRlhMRVZCUVVWRExGZEJRWFZDTzBGQlEzUkRMRVZCUVVVc1VVRkJVU3hGUVVGRlF5eFJRVUZ2UWp0QlFVTm9ReXhEUVVGRE96dEJRMlpFTEVsQlFVa3NWMEZCVnl4SFFVRkhiRWtzV1VGQmVVSTdRVUZETTBNc1NVRkJTU3hKUVVGSkxFZEJRVWRSTEV0QlFXdENMRU5CUVVNN1FVRkRPVUk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZOQlFWTXlVU3hUUVVGUExFTkJRVU1zU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4UFFVRlBMRVZCUVVVN1FVRkRkRU1zUlVGQlJTeFBRVUZQTEZkQlFWY3NRMEZCUXl4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXp0QlFVTm9SQ3hEUVVGRE8wRkJRMFE3UVVGRFFTeEpRVUZCTEZOQlFXTXNSMEZCUjBFc1UwRkJUenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wTkRSbmhDTEZOQlFWTXNUMEZCVHl4RFFVRkRMRXRCUVVzc1JVRkJSVHRCUVVONFFpeEhRVUZGTEVsQlFVa3NTMEZCU3l4SFFVRkhMRU5CUVVNc1EwRkJRenRQUVVOV0xFMUJRVTBzUjBGQlJ5eExRVUZMTEVsQlFVa3NTVUZCU1N4SFFVRkhMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU1zVFVGQlRUdFBRVU42UXl4UlFVRlJMRWRCUVVjc1EwRkJRenRQUVVOYUxFMUJRVTBzUjBGQlJ5eEZRVUZGTEVOQlFVTTdRVUZEYkVJN1FVRkRRU3hIUVVGRkxFOUJRVThzUlVGQlJTeExRVUZMTEVkQlFVY3NUVUZCVFN4RlFVRkZPMEZCUXpOQ0xFdEJRVWtzU1VGQlNTeExRVUZMTEVkQlFVY3NTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8wdEJRM3BDTEVsQlFVa3NTMEZCU3l4RlFVRkZPMEZCUTJZc1QwRkJUU3hOUVVGTkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNN1RVRkROVUk3U1VGRFJqdEhRVU5FTEU5QlFVOHNUVUZCVFN4RFFVRkRPMFZCUTJZN1FVRkRSRHRCUVVOQkxFTkJRVUVzVTBGQll5eEhRVUZITEU5QlFVOHNRMEZCUVRzN096czdPenM3T3p0QlF6bENlRUlzUTBGQlFTeGhRVUZqTEVkQlFVYzdSMEZEWml4TFFVRkxMRVZCUVVVc1MwRkJTenRIUVVOYUxFOUJRVThzUlVGQlJTeExRVUZMTzBkQlEyUXNUMEZCVHl4RlFVRkZMRXRCUVVzN1IwRkRaQ3hYUVVGWExFVkJRVVVzUzBGQlN6dEhRVU5zUWl4UFFVRlBMRVZCUVVVc1MwRkJTenRGUVVObUxFTkJRVUU3T3pzN1FVTk9SQ3hKUVVGSlFTeFRRVUZQTEVkQlFVZHVVaXhUUVVGdlFqdEJRVU5zUXl4SlFVRkpiMUlzVFVGQlNTeEhRVUZIUkN4VFFVRlBMRU5CUVVNc1UwRkJVeXhGUVVGRk0xRXNZMEZCY1VJc1JVRkJRU3hGUVVGRlF5eHZRa0ZCTUVJc1JVRkJRU3hEUVVGRExFTkJRVU03UVVGRGFrWTdRVUZEUVRKUkxFMUJRVWtzUTBGQlF5eFhRVUZYTEVkQlFVY3hVU3hyUWtGQlFTeEZRVUYzUWl4RFFVRkRPMEZCUXpWRExFbEJRVUVzVDBGQll5eEhRVUZITUZFc1RVRkJTVHM3T3pzN096czdRME5LY2tJc1NVRkJTU3hoUVVGaExFZEJRVWR3VWl4eFFrRkJNa0lzUlVGQlFUdExRVU16UXl4UlFVRlJMRWRCUVVkUkxHZENRVUZ6UWl4RlFVRkJPMHRCUTJwRExFOUJRVThzUjBGQlIwTXNaVUZCY1VJc1JVRkJRVHRMUVVNdlFpeFhRVUZYTEVkQlFVZERMRzFDUVVGNVFpeEZRVUZCTzB0QlEzWkRMRTlCUVU4c1IwRkJSME1zVTBGQmIwSTdTMEZET1VJc1ZVRkJWU3hIUVVGSEswTXNhMEpCUVVFc1JVRkJkMElzUTBGQlF6dEJRVU14UXp0QlFVTkJPME5CUTBFc1NVRkJTU3hsUVVGbExFZEJRVWNzY1VKQlFYRkNMRU5CUVVNN1FVRkROVU03UVVGRFFUdERRVU5CTEVsQlFVa3NaVUZCWlN4SFFVRkhMRU5CUVVNN1MwRkRia0lzYVVKQlFXbENMRWRCUVVjc1JVRkJSVHRMUVVOMFFpeGhRVUZoTEVkQlFVY3NSMEZCUnp0TFFVTnVRaXhsUVVGbExFZEJRVWNzUjBGQlJ5eERRVUZETzBGQlF6RkNPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRMEZEUVN4VFFVRlRMRlZCUVZVc1EwRkJReXhUUVVGVExFVkJRVVU3UVVGREwwSXNSMEZCUlN4UFFVRlBMRkZCUVZFc1EwRkJReXhUUVVGVExFdEJRVXNzUlVGQlJUdEJRVU5zUXl4TFFVRkpMRWxCUVVrc1RVRkJUU3hIUVVGSExFdEJRVXNzUTBGQlF5eE5RVUZOTzFOQlEzSkNMRXRCUVVzc1IwRkJSeXhOUVVGTk8wRkJRM1JDTEZOQlFWRXNUVUZCVFN4SFFVRkhMR0ZCUVdFc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETzBGQlF6bERPMHRCUTBrc1NVRkJTU3hUUVVGVExFVkJRVVU3UVVGRGJrSXNUMEZCVFN4TFFVRkxMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU03VFVGRGFrSTdTMEZEUkN4UFFVRlBMRXRCUVVzc1JVRkJSU3hGUVVGRk8wRkJRM0JDTEU5QlFVMHNTVUZCU1N4SlFVRkpMRWRCUVVjc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBGQlF6bENMRTlCUVUwc1NVRkJTU3hQUVVGUExFbEJRVWtzU1VGQlNTeFZRVUZWTEVWQlFVVTdRVUZEY2tNc1UwRkJVU3hOUVVGTkxFbEJRVWtzVTBGQlV5eERRVUZETEdWQlFXVXNRMEZCUXl4RFFVRkRPMUZCUTNSRE8wRkJRMUFzVDBGQlRTeEpRVUZKTEUxQlFVMHNTVUZCU1N4RFFVRkRMRTlCUVU4c1NVRkJTU3hYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NVMEZCVXl4RlFVRkZPMU5CUTNoRUxFbEJRVWtzVDBGQlR5eEhRVUZITEVsQlFVa3NZVUZCWVN4RFFVRkRMRVZCUVVVc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF6dFJRVU16UXp0TlFVTkdPMEZCUTB3c1MwRkJTU3hMUVVGTExFZEJRVWNzVDBGQlR5eEhRVUZITEV0QlFVc3NSMEZCUnl4TlFVRk5MRU5CUVVNN1FVRkRja01zUzBGQlNTeFBRVUZQTEVWQlFVVXNTMEZCU3l4SFFVRkhMRTFCUVUwc1JVRkJSVHRCUVVNM1FpeFBRVUZOTEVsQlFVa3NSMEZCUnl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03UVVGRE1VSTdRVUZEUVN4UFFVRk5MRWxCUVVrc1VVRkJVU3hIUVVGSExGZEJRVmNzUTBGQlF5eEpRVUZKTEVOQlFVTTdRVUZEZEVNc1YwRkJWU3hKUVVGSkxFZEJRVWNzVVVGQlVTeEpRVUZKTEZOQlFWTXNSMEZCUnl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzVTBGQlV5eERRVUZETzBGQlEyNUZPMDlCUTAwc1NVRkJTU3hKUVVGSkxFbEJRVWtzVlVGQlZTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOeVF5eGhRVUZaTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTeXhoUVVGaExFZEJRVWNzWlVGQlpTeEhRVUZITEdsQ1FVRnBRaXhIUVVGSExHVkJRV1VzUTBGQlF6dEJRVU01Uml4aFFVRlpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEUxQlFVMHNTVUZCU1N4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF6dGhRVU12UWp0VFFVTktMRTlCUVU4c1IwRkJSeXhQUVVGUExFTkJRVU1zVjBGQlZ5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU40UlN4UlFVRlBMRTFCUVUwN1FVRkRZaXhUUVVGUkxFOUJRVThzUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRWxCUVVrc1EwRkJReXhKUVVGSkxGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTTdRVUZEZGtRc1lVRkJXU3hQUVVGUExFTkJRVU1zVVVGQlVTeERRVUZETEVWQlFVVTdRVUZETDBJc1lVRkJXU3hQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUTNoQ08wMUJRMFk3UVVGRFRDeExRVUZKTEU5QlFVOHNWMEZCVnp0UFFVTm9RaXhKUVVGSkxFbEJRVWtzUjBGQlJ5eFRRVUZUTzBGQlF6RkNMRmRCUVZVc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTXhRanRCUVVOQkxFOUJRVTBzU1VGQlNTeFBRVUZQTEVsQlFVa3NTVUZCU1N4RFFVRkRMRTFCUVUwc1NVRkJTU3hEUVVGRExFbEJRVWtzVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4RlFVRkZPMU5CUTJwRUxFOUJRVThzVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF6dFJRVU55UXp0UFFVTkVMRWxCUVVrc1MwRkJTeXhIUVVGSExFTkJRVU03UVVGRGJrSXNWMEZCVlN4TlFVRk5MRWRCUVVjc1RVRkJUU3hIUVVGSExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hGUVVGRkxFbEJRVWtzUTBGQlF5eEhRVUZITEV0QlFVc3NRMEZCUXp0QlFVTnVSVHRCUVVOQkxFOUJRVTBzVDBGQlR5eEZRVUZGTEV0QlFVc3NSMEZCUnl4TlFVRk5MRVZCUVVVN1FVRkRMMElzVTBGQlVTeE5RVUZOTEVkQlFVY3NTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN1VVRkRNVU03VDBGRFJDeFBRVUZQTEUxQlFVMHNRMEZCUXp0QlFVTndRaXhOUVVGTExFTkJRVU03UVVGRFRpeEpRVUZITEVOQlFVTXNRMEZCUXp0RlFVTktPMEZCUTBRN1FVRkRRU3hEUVVGQkxGZEJRV01zUjBGQlJ5eFZRVUZWTEVOQlFVRTdPenM3T3pzN096czdRME0zUlROQ0xFbEJRVWtzVlVGQlZTeEhRVUZITVVRc2EwSkJRVUVzUlVGQmQwSXNRMEZCUXp0QlFVTXhRenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNRMEZCUVN4SlFVRkpMRWxCUVVrc1IwRkJSeXhWUVVGVkxFVkJRVVVzUTBGQlF6dEJRVU40UWp0QlFVTkJMRU5CUVVFc1RVRkJZeXhIUVVGSExFbEJRVWtzUTBGQlFUczdPenRCUXpGQ2NrSXNTVUZCU1cxU0xGTkJRVThzUjBGQlIyNVNMRk5CUVc5Q08wRkJRMnhETEVsQlFVbHZVaXhOUVVGSkxFZEJRVWRFTEZOQlFVOHNRMEZCUXl4TlFVRk5MRVZCUVVVelVTeFhRVUZCTEVWQlFXdENMRU5CUVVNc1EwRkJRenRCUVVNdlF6dEJRVU5CTkZFc1RVRkJTU3hEUVVGRExGZEJRVmNzUjBGQlJ6TlJMR3RDUVVGQkxFVkJRWGRDTEVOQlFVTTdRVUZETlVNc1NVRkJRU3hKUVVGakxFZEJRVWN5VVN4TlFVRkpPenM3T3pzN096dERRMHB5UWl4SlFVRkpMRkZCUVZFc1IwRkJSM0JTTEZOQlFYTkNPMHRCUTJwRExGZEJRVmNzUjBGQlIxRXNZVUZCZDBJc1EwRkJRenRCUVVNelF6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeERRVUZCTEZOQlFWTXNUMEZCVHl4RFFVRkRMRlZCUVZVc1JVRkJSU3hSUVVGUkxFVkJRVVU3UVVGRGRrTXNSMEZCUlN4SlFVRkpMRXRCUVVzc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRGFFSXNUMEZCVFN4TlFVRk5MRWRCUVVjc1YwRkJWeXhEUVVGRExGVkJRVlVzUTBGQlF5eEhRVUZITEV0QlFVc3NRMEZCUXl4VlFVRlZMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETzBGQlEzWkZPMGRCUTBVc1VVRkJVU3hEUVVGRExGVkJRVlVzUlVGQlJTeFRRVUZUTEV0QlFVc3NSVUZCUlN4SFFVRkhMRVZCUVVVc1ZVRkJWU3hGUVVGRk8wRkJRM2hFTEV0QlFVa3NUVUZCVFN4RFFVRkRMRVZCUVVVc1MwRkJTeXhEUVVGRExFZEJRVWNzVVVGQlVTeERRVUZETEV0QlFVc3NSVUZCUlN4SFFVRkhMRVZCUVVVc1ZVRkJWU3hEUVVGRExFTkJRVU03UVVGRGRrUXNTVUZCUnl4RFFVRkRMRU5CUVVNN1IwRkRTQ3hQUVVGUExFMUJRVTBzUTBGQlF6dEZRVU5tTzBGQlEwUTdRVUZEUVN4RFFVRkJMRkZCUVdNc1IwRkJSeXhQUVVGUExFTkJRVUU3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlExaDRRaXhEUVVGQkxGTkJRVk1zVlVGQlZTeERRVUZETEV0QlFVc3NSVUZCUlN4UlFVRlJMRVZCUVVVN1FVRkRja01zUjBGQlJTeEpRVUZKTEUxQlFVMHNSMEZCUnl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRE8wRkJRelZDTzBGQlEwRXNSMEZCUlN4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzBkQlEzSkNMRTlCUVU4c1RVRkJUU3hGUVVGRkxFVkJRVVU3UzBGRFppeExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXp0SlFVTnlRenRIUVVORUxFOUJRVThzUzBGQlN5eERRVUZETzBWQlEyUTdRVUZEUkR0QlFVTkJMRU5CUVVFc1YwRkJZeXhIUVVGSExGVkJRVlVzUTBGQlFUczdPenM3T3pzN096dERRM0JDTTBJc1NVRkJTU3hSUVVGUkxFZEJRVWRTTEZWQlFYRkNMRU5CUVVNN1FVRkRja003UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUTBGQlFTeFRRVUZUTEdkQ1FVRm5RaXhEUVVGRExFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVTdRVUZEZUVNc1IwRkJSU3hKUVVGSkxFdEJRVXNzUzBGQlN5eExRVUZMTEVWQlFVVTdRVUZEZGtJc1MwRkJTU3hKUVVGSkxGbEJRVmtzUjBGQlJ5eExRVUZMTEV0QlFVc3NVMEZCVXp0QlFVTXhReXhUUVVGUkxGTkJRVk1zUjBGQlJ5eExRVUZMTEV0QlFVc3NTVUZCU1R0QlFVTnNReXhUUVVGUkxHTkJRV01zUjBGQlJ5eExRVUZMTEV0QlFVc3NTMEZCU3p0QlFVTjRReXhUUVVGUkxGZEJRVmNzUjBGQlJ5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRkRU03UVVGRFFTeExRVUZKTEVsQlFVa3NXVUZCV1N4SFFVRkhMRXRCUVVzc1MwRkJTeXhUUVVGVE8wRkJRekZETEZOQlFWRXNVMEZCVXl4SFFVRkhMRXRCUVVzc1MwRkJTeXhKUVVGSk8wRkJRMnhETEZOQlFWRXNZMEZCWXl4SFFVRkhMRXRCUVVzc1MwRkJTeXhMUVVGTE8wRkJRM2hETEZOQlFWRXNWMEZCVnl4SFFVRkhMRkZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU4wUXp0QlFVTkJMRXRCUVVrc1NVRkJTU3hEUVVGRExFTkJRVU1zVTBGQlV5eEpRVUZKTEVOQlFVTXNWMEZCVnl4SlFVRkpMRU5CUVVNc1YwRkJWeXhKUVVGSkxFdEJRVXNzUjBGQlJ5eExRVUZMTzFWQlF6TkVMRmRCUVZjc1NVRkJTU3haUVVGWkxFbEJRVWtzWTBGQll5eEpRVUZKTEVOQlFVTXNVMEZCVXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRE8wRkJRM0pHTEZWQlFWTXNVMEZCVXl4SlFVRkpMRmxCUVZrc1NVRkJTU3hqUVVGakxFTkJRVU03UVVGRGNrUXNWVUZCVXl4RFFVRkRMRmxCUVZrc1NVRkJTU3hqUVVGakxFTkJRVU03VTBGRGFrTXNRMEZCUXl4alFVRmpMRVZCUVVVN1QwRkRia0lzVDBGQlR5eERRVUZETEVOQlFVTTdUVUZEVmp0QlFVTk1MRXRCUVVrc1NVRkJTU3hEUVVGRExFTkJRVU1zVTBGQlV5eEpRVUZKTEVOQlFVTXNWMEZCVnl4SlFVRkpMRU5CUVVNc1YwRkJWeXhKUVVGSkxFdEJRVXNzUjBGQlJ5eExRVUZMTzFWQlF6TkVMRmRCUVZjc1NVRkJTU3haUVVGWkxFbEJRVWtzWTBGQll5eEpRVUZKTEVOQlFVTXNVMEZCVXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRE8wRkJRM0pHTEZWQlFWTXNVMEZCVXl4SlFVRkpMRmxCUVZrc1NVRkJTU3hqUVVGakxFTkJRVU03UVVGRGNrUXNWVUZCVXl4RFFVRkRMRmxCUVZrc1NVRkJTU3hqUVVGakxFTkJRVU03VTBGRGFrTXNRMEZCUXl4alFVRmpMRVZCUVVVN1QwRkRia0lzVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXp0TlFVTllPMGxCUTBZN1IwRkRSQ3hQUVVGUExFTkJRVU1zUTBGQlF6dEZRVU5XTzBGQlEwUTdRVUZEUVN4RFFVRkJMR2xDUVVGakxFZEJRVWNzWjBKQlFXZENMRU5CUVVFN096czdPenM3T3pzN1EwTjRRMnBETEVsQlFVa3NaMEpCUVdkQ0xFZEJRVWRCTEhkQ1FVRkJMRVZCUVRoQ0xFTkJRVU03UVVGRGRFUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUTBGQlFTeFRRVUZUTEdWQlFXVXNRMEZCUXl4TlFVRk5MRVZCUVVVc1MwRkJTeXhGUVVGRkxFMUJRVTBzUlVGQlJUdEJRVU5vUkN4SFFVRkZMRWxCUVVrc1MwRkJTeXhIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU5vUWl4UFFVRk5MRmRCUVZjc1IwRkJSeXhOUVVGTkxFTkJRVU1zVVVGQlVUdEJRVU51UXl4UFFVRk5MRmRCUVZjc1IwRkJSeXhMUVVGTExFTkJRVU1zVVVGQlVUdEJRVU5zUXl4UFFVRk5MRTFCUVUwc1IwRkJSeXhYUVVGWExFTkJRVU1zVFVGQlRUdEJRVU5xUXl4UFFVRk5MRmxCUVZrc1IwRkJSeXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETzBGQlEyNURPMEZCUTBFc1IwRkJSU3hQUVVGUExFVkJRVVVzUzBGQlN5eEhRVUZITEUxQlFVMHNSVUZCUlR0QlFVTXpRaXhMUVVGSkxFbEJRVWtzVFVGQlRTeEhRVUZITEdkQ1FVRm5RaXhEUVVGRExGZEJRVmNzUTBGQlF5eExRVUZMTEVOQlFVTXNSVUZCUlN4WFFVRlhMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dExRVU4wUlN4SlFVRkpMRTFCUVUwc1JVRkJSVHRCUVVOb1FpeFBRVUZOTEVsQlFVa3NTMEZCU3l4SlFVRkpMRmxCUVZrc1JVRkJSVHRUUVVONlFpeFBRVUZQTEUxQlFVMHNRMEZCUXp0UlFVTm1PMEZCUTFBc1QwRkJUU3hKUVVGSkxFdEJRVXNzUjBGQlJ5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRhRU1zVDBGQlRTeFBRVUZQTEUxQlFVMHNTVUZCU1N4TFFVRkxMRWxCUVVrc1RVRkJUU3hIUVVGSExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMDFCUXpWRE8wbEJRMFk3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRIUVVORkxFOUJRVThzVFVGQlRTeERRVUZETEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRE8wVkJRMjVETzBGQlEwUTdRVUZEUVN4RFFVRkJMR2RDUVVGakxFZEJRVWNzWlVGQlpTeERRVUZCT3pzN096czdPenM3TzBORE0wTm9ReXhKUVVGSkxGRkJRVkVzUjBGQlIwRXNaMEpCUVhOQ0xFVkJRVUU3UzBGRGFrTXNUMEZCVHl4SFFVRkhVU3hsUVVGeFFpeEZRVUZCTzB0QlF5OUNMRmxCUVZrc1IwRkJSME1zWVVGQk1FSTdTMEZEZWtNc1QwRkJUeXhIUVVGSFF5eGxRVUZ4UWl4RlFVRkJPMHRCUXk5Q0xGVkJRVlVzUjBGQlIwTXNhMEpCUVhkQ0xFVkJRVUU3UzBGRGNrTXNVMEZCVXl4SFFVRkhLME1zYVVKQlFYVkNMRVZCUVVFN1MwRkRia01zWlVGQlpTeEhRVUZIYVVVc2RVSkJRVFpDTEVWQlFVRTdTMEZETDBNc1VVRkJVU3hIUVVGSFF5eFZRVUZ4UWp0TFFVTm9ReXhQUVVGUExFZEJRVWRETEZOQlFXOUNMRU5CUVVNN1FVRkRia003UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeERRVUZCTEZOQlFWTXNWMEZCVnl4RFFVRkRMRlZCUVZVc1JVRkJSU3hUUVVGVExFVkJRVVVzVFVGQlRTeEZRVUZGTzBGQlEzQkVMRWRCUVVVc1NVRkJTU3hUUVVGVExFTkJRVU1zVFVGQlRTeEZRVUZGTzB0QlEzQkNMRk5CUVZNc1IwRkJSeXhSUVVGUkxFTkJRVU1zVTBGQlV5eEZRVUZGTEZOQlFWTXNVVUZCVVN4RlFVRkZPMEZCUTNaRUxFOUJRVTBzU1VGQlNTeFBRVUZQTEVOQlFVTXNVVUZCVVN4RFFVRkRMRVZCUVVVN1UwRkRja0lzVDBGQlR5eFRRVUZUTEV0QlFVc3NSVUZCUlR0QlFVTXZRaXhYUVVGVkxFOUJRVThzVDBGQlR5eERRVUZETEV0QlFVc3NSVUZCUlN4UlFVRlJMRU5CUVVNc1RVRkJUU3hMUVVGTExFTkJRVU1zUjBGQlJ5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1VVRkJVU3hEUVVGRExFTkJRVU03VlVGRGRrVTdVVUZEUmp0UFFVTkVMRTlCUVU4c1VVRkJVU3hEUVVGRE8wRkJRM1JDTEUxQlFVc3NRMEZCUXl4RFFVRkRPMEZCUTFBc1NVRkJSeXhOUVVGTk8wRkJRMVFzUzBGQlNTeFRRVUZUTEVkQlFVY3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenRKUVVONFFqdEJRVU5JTzBGQlEwRXNSMEZCUlN4SlFVRkpMRXRCUVVzc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dEhRVU5tTEZOQlFWTXNSMEZCUnl4UlFVRlJMRU5CUVVNc1UwRkJVeXhGUVVGRkxGTkJRVk1zUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUXpORU8wRkJRMEVzUjBGQlJTeEpRVUZKTEUxQlFVMHNSMEZCUnl4UFFVRlBMRU5CUVVNc1ZVRkJWU3hGUVVGRkxGTkJRVk1zUzBGQlN5eEZRVUZGTEVkQlFVY3NSVUZCUlN4VlFVRlZMRVZCUVVVN1MwRkRhRVVzU1VGQlNTeFJRVUZSTEVkQlFVY3NVVUZCVVN4RFFVRkRMRk5CUVZNc1JVRkJSU3hUUVVGVExGRkJRVkVzUlVGQlJUdEJRVU14UkN4UFFVRk5MRTlCUVU4c1VVRkJVU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBGQlF6ZENMRTFCUVVzc1EwRkJReXhEUVVGRE8wRkJRMUFzUzBGQlNTeFBRVUZQTEVWQlFVVXNWVUZCVlN4RlFVRkZMRkZCUVZFc1JVRkJSU3hQUVVGUExFVkJRVVVzUlVGQlJTeExRVUZMTEVWQlFVVXNUMEZCVHl4RlFVRkZMRXRCUVVzc1JVRkJSU3hEUVVGRE8wRkJRM1JGTEVsQlFVY3NRMEZCUXl4RFFVRkRPMEZCUTB3N1IwRkRSU3hQUVVGUExGVkJRVlVzUTBGQlF5eE5RVUZOTEVWQlFVVXNVMEZCVXl4TlFVRk5MRVZCUVVVc1MwRkJTeXhGUVVGRk8wdEJRMmhFTEU5QlFVOHNaVUZCWlN4RFFVRkRMRTFCUVUwc1JVRkJSU3hMUVVGTExFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTTdRVUZEYkVRc1NVRkJSeXhEUVVGRExFTkJRVU03UlVGRFNqdEJRVU5FTzBGQlEwRXNRMEZCUVN4WlFVRmpMRWRCUVVjc1YwRkJWeXhEUVVGQk96czdPenM3T3pzN08wTkRhRVExUWl4SlFVRkpMRmRCUVZjc1IwRkJSemRJTEcxQ1FVRjVRaXhGUVVGQk8wdEJRM1pETEZkQlFWY3NSMEZCUjFFc2JVSkJRWGxDTEVWQlFVRTdTMEZEZGtNc1VVRkJVU3hIUVVGSFF5eFRRVUZ6UWp0TFFVTnFReXhqUVVGakxFZEJRVWRETEdWQlFUUkNMRU5CUVVNN1FVRkRiRVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBOQlEwRXNTVUZCU1N4TlFVRk5MRWRCUVVjc1VVRkJVU3hEUVVGRExGTkJRVk1zVlVGQlZTeEZRVUZGTEZOQlFWTXNSVUZCUlR0QlFVTjBSQ3hIUVVGRkxFbEJRVWtzVlVGQlZTeEpRVUZKTEVsQlFVa3NSVUZCUlR0TFFVTjBRaXhQUVVGUExFVkJRVVVzUTBGQlF6dEpRVU5ZTzBGQlEwZ3NSMEZCUlN4SlFVRkpMRTFCUVUwc1IwRkJSeXhUUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETzBGQlEyaERMRWRCUVVVc1NVRkJTU3hOUVVGTkxFZEJRVWNzUTBGQlF5eEpRVUZKTEdOQlFXTXNRMEZCUXl4VlFVRlZMRVZCUVVVc1UwRkJVeXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRk8wdEJRM2hGTEZOQlFWTXNSMEZCUnl4RlFVRkZMRU5CUVVNN1NVRkRhRUlzVFVGQlRTeEpRVUZKTEUxQlFVMHNSMEZCUnl4RFFVRkRMRWxCUVVrc1kwRkJZeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzVTBGQlV5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVN1MwRkRha1lzVTBGQlV5eEhRVUZITEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRE5VSTdRVUZEU0N4SFFVRkZMRTlCUVU4c1YwRkJWeXhEUVVGRExGVkJRVlVzUlVGQlJTeFhRVUZYTEVOQlFVTXNVMEZCVXl4RlFVRkZMRU5CUVVNc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETzBGQlEyaEZMRVZCUVVNc1EwRkJReXhEUVVGRE8wRkJRMGc3UVVGRFFTeERRVUZCTEZGQlFXTXNSMEZCUnl4TlFVRk5MRU5CUVVFN096czdRVU12UTNaQ0xFbEJRVWw1VVN4VFFVRlBMRWRCUVVkdVVpeFRRVUZ2UWp0QlFVTnNReXhKUVVGSmIxSXNUVUZCU1N4SFFVRkhSQ3hUUVVGUExFTkJRVU1zVVVGQlVTeEZRVUZGTTFFc1lVRkJRU3hGUVVGdlFpeERRVUZETEVOQlFVTTdRVUZEYmtRN1FVRkRRVFJSTEUxQlFVa3NRMEZCUXl4WFFVRlhMRWRCUVVjelVTeHJRa0ZCUVN4RlFVRjNRaXhEUVVGRE8wRkJRelZETEVsQlFVRXNUVUZCWXl4SFFVRkhNbEVzVFVGQlNUczdPenM3T3pzN096czdPenM3T3pzN08wRkRTM0pDTEVOQlFVRXNVMEZCVXl4cFFrRkJhVUlzUTBGQlF5eExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZMRlZCUVZVc1JVRkJSVHRCUVVOeVJDeEhRVUZGTEVsQlFVa3NTMEZCU3l4SFFVRkhMRU5CUVVNc1EwRkJRenRQUVVOV0xFMUJRVTBzUjBGQlJ5eExRVUZMTEVsQlFVa3NTVUZCU1N4SFFVRkhMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZETzBGQlEyaEVPMEZCUTBFc1IwRkJSU3hQUVVGUExFVkJRVVVzUzBGQlN5eEhRVUZITEUxQlFVMHNSVUZCUlR0TFFVTjJRaXhKUVVGSkxGVkJRVlVzUTBGQlF5eExRVUZMTEVWQlFVVXNTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFVkJRVVU3VDBGRGJrTXNUMEZCVHl4SlFVRkpMRU5CUVVNN1RVRkRZanRKUVVOR08wZEJRMFFzVDBGQlR5eExRVUZMTEVOQlFVTTdSVUZEWkR0QlFVTkVPMEZCUTBFc1EwRkJRU3hyUWtGQll5eEhRVUZITEdsQ1FVRnBRaXhEUVVGQk96czdPenM3T3pzN08wTkRja0pzUXl4SlFVRkpMRWRCUVVjc1IwRkJSM0JTTEZkQlFXbENMRVZCUVVFN1MwRkRka0lzU1VGQlNTeEhRVUZIVVN4WFFVRnBRaXhGUVVGQk8wdEJRM2hDTEZWQlFWVXNSMEZCUjBNc2EwSkJRVUVzUlVGQmQwSXNRMEZCUXp0QlFVTXhRenRCUVVOQk8wRkJRMEVzUTBGQlFTeEpRVUZKTEZGQlFWRXNSMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRM0pDTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeERRVUZCTEVsQlFVa3NVMEZCVXl4SFFVRkhMRVZCUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZITEZWQlFWVXNRMEZCUXl4SlFVRkpMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExGRkJRVkVzUTBGQlF5eEhRVUZITEVsQlFVa3NSMEZCUnl4VFFVRlRMRTFCUVUwc1JVRkJSVHRCUVVOd1J5eEhRVUZGTEU5QlFVOHNTVUZCU1N4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03UVVGRGVrSXNSVUZCUXl4RFFVRkRPMEZCUTBZN1FVRkRRU3hEUVVGQkxGVkJRV01zUjBGQlJ5eFRRVUZUTEVOQlFVRTdPenM3T3pzN096czdRME5zUWpGQ0xFbEJRVWtzVVVGQlVTeEhRVUZIVkN4blFrRkJjMElzUlVGQlFUdExRVU5xUXl4aFFVRmhMRWRCUVVkUkxIRkNRVUV5UWl4RlFVRkJPMHRCUXpORExHbENRVUZwUWl4SFFVRkhReXg1UWtGQkswSXNSVUZCUVR0TFFVTnVSQ3hSUVVGUkxFZEJRVWRETEdkQ1FVRnpRaXhGUVVGQk8wdEJRMnBETEZOQlFWTXNSMEZCUjBNc2FVSkJRWFZDTEVWQlFVRTdTMEZEYmtNc1ZVRkJWU3hIUVVGSEswTXNhMEpCUVVFc1JVRkJkMElzUTBGQlF6dEJRVU14UXp0QlFVTkJPME5CUTBFc1NVRkJTU3huUWtGQlowSXNSMEZCUnl4SFFVRkhMRU5CUVVNN1FVRkRNMEk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeERRVUZCTEZOQlFWTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1JVRkJSU3hSUVVGUkxFVkJRVVVzVlVGQlZTeEZRVUZGTzBGQlF5OURMRWRCUVVVc1NVRkJTU3hMUVVGTExFZEJRVWNzUTBGQlF5eERRVUZETzA5QlExWXNVVUZCVVN4SFFVRkhMR0ZCUVdFN1FVRkRPVUlzVDBGQlRTeE5RVUZOTEVkQlFVY3NTMEZCU3l4RFFVRkRMRTFCUVUwN1QwRkRja0lzVVVGQlVTeEhRVUZITEVsQlFVazdUMEZEWml4TlFVRk5MRWRCUVVjc1JVRkJSVHRQUVVOWUxFbEJRVWtzUjBGQlJ5eE5RVUZOTEVOQlFVTTdRVUZEY0VJN1IwRkRSU3hKUVVGSkxGVkJRVlVzUlVGQlJUdExRVU5rTEZGQlFWRXNSMEZCUnl4TFFVRkxMRU5CUVVNN1MwRkRha0lzVVVGQlVTeEhRVUZITEdsQ1FVRnBRaXhEUVVGRE8wbEJRemxDTzBGQlEwZ3NVVUZCVHl4SlFVRkpMRTFCUVUwc1NVRkJTU3huUWtGQlowSXNSVUZCUlR0TFFVTnVReXhKUVVGSkxFZEJRVWNzUjBGQlJ5eFJRVUZSTEVkQlFVY3NTVUZCU1N4SFFVRkhMRk5CUVZNc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dExRVU0zUXl4SlFVRkpMRWRCUVVjc1JVRkJSVHRCUVVOaUxFOUJRVTBzVDBGQlR5eFZRVUZWTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1RVRkRlRUk3UzBGRFJDeFJRVUZSTEVkQlFVY3NTMEZCU3l4RFFVRkRPMHRCUTJwQ0xGRkJRVkVzUjBGQlJ5eFJRVUZSTEVOQlFVTTdRVUZEZUVJc1MwRkJTU3hKUVVGSkxFZEJRVWNzU1VGQlNTeFJRVUZSTEVOQlFVTTdTVUZEY2tJN1VVRkRTVHRCUVVOUUxFdEJRVWtzU1VGQlNTeEhRVUZITEZGQlFWRXNSMEZCUnl4RlFVRkZMRWRCUVVjc1RVRkJUU3hEUVVGRE8wbEJReTlDTzBGQlEwZ3NSMEZCUlN4TFFVRkxPMEZCUTFBc1IwRkJSU3hQUVVGUExFVkJRVVVzUzBGQlN5eEhRVUZITEUxQlFVMHNSVUZCUlR0QlFVTXpRaXhMUVVGSkxFbEJRVWtzUzBGQlN5eEhRVUZITEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNN1UwRkRjRUlzVVVGQlVTeEhRVUZITEZGQlFWRXNSMEZCUnl4UlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUzBGQlN5eERRVUZETzBGQlEzUkVPMEZCUTBFc1MwRkJTU3hMUVVGTExFZEJRVWNzUTBGQlF5eFZRVUZWTEVsQlFVa3NTMEZCU3l4TFFVRkxMRU5CUVVNc1NVRkJTU3hMUVVGTExFZEJRVWNzUTBGQlF5eERRVUZETzBGQlEzQkVMRXRCUVVrc1NVRkJTU3hSUVVGUkxFbEJRVWtzVVVGQlVTeExRVUZMTEZGQlFWRXNSVUZCUlR0QlFVTXpReXhQUVVGTkxFbEJRVWtzVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNN1QwRkROVUlzVDBGQlR5eFRRVUZUTEVWQlFVVXNSVUZCUlR0QlFVTXhRaXhUUVVGUkxFbEJRVWtzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4TFFVRkxMRkZCUVZFc1JVRkJSVHRYUVVOb1F5eFRRVUZUTEV0QlFVc3NRMEZCUXp0VlFVTm9RanRSUVVOR08wOUJRMFFzU1VGQlNTeFJRVUZSTEVWQlFVVTdRVUZEY0VJc1UwRkJVU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMUZCUTNKQ08wRkJRMUFzVDBGQlRTeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8wMUJRM0JDTzFWQlEwa3NTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFVkJRVVVzVVVGQlVTeEZRVUZGTEZWQlFWVXNRMEZCUXl4RlFVRkZPMEZCUTNCRUxFOUJRVTBzU1VGQlNTeEpRVUZKTEV0QlFVc3NUVUZCVFN4RlFVRkZPMEZCUXpOQ0xGTkJRVkVzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenRSUVVOeVFqdEJRVU5RTEU5QlFVMHNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dE5RVU53UWp0SlFVTkdPMGRCUTBRc1QwRkJUeXhOUVVGTkxFTkJRVU03UlVGRFpqdEJRVU5FTzBGQlEwRXNRMEZCUVN4VFFVRmpMRWRCUVVjc1VVRkJVU3hEUVVGQk96czdPenM3T3pzN08wTkRka1Y2UWl4SlFVRkpMRmxCUVZrc1IwRkJSekZFTEdGQlFUQkNPMHRCUTNwRExGRkJRVkVzUjBGQlIxRXNaMEpCUVVFc1JVRkJjMElzUTBGQlF6dEJRVU4wUXp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeERRVUZCTEZOQlFWTXNUVUZCVFN4RFFVRkRMRXRCUVVzc1JVRkJSU3hSUVVGUkxFVkJRVVU3UjBGREwwSXNUMEZCVHl4RFFVRkRMRXRCUVVzc1NVRkJTU3hMUVVGTExFTkJRVU1zVFVGQlRTeEpRVUZKTEZGQlFWRXNRMEZCUXl4TFFVRkxMRVZCUVVVc1dVRkJXU3hEUVVGRExGRkJRVmNzUTBGQlF5eERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRPMFZCUTJ4R08wRkJRMFE3UVVGRFFTeERRVUZCTEZGQlFXTXNSMEZCUnl4TlFVRk5MRU5CUVVFN096czdRVU01UW5aQ0xFbEJRVWtzVDBGQlR5eEhRVUZIVWl4VFFVRnZRanRCUVVOc1F5eEpRVUZKTEVsQlFVa3NSMEZCUnl4UFFVRlBMRU5CUVVNc1VVRkJVU3hGUVVGRlVTeGhRVUZCTEVWQlFXOUNMRU5CUVVNc1EwRkJRenRCUVVOdVJEdEJRVU5CTEVsQlFVa3NRMEZCUXl4WFFVRlhMRWRCUVVkRExHdENRVUZCTEVWQlFYZENMRU5CUVVNN1FVRkROVU1zU1VGQlFTeE5RVUZqTEVkQlFVY3NTVUZCU1RzN1FVTktja0lzU1VGQlNTeGxRVUZsTEVkQlFVZFVMR2RDUVVFMlFqdEJRVU51UkN4SlFVRkpMRlZCUVZVc1IwRkJSMUVzVjBGQmQwSTdRVUZEZWtNc1NVRkJTU3haUVVGWkxFZEJRVWRETEdGQlFUQkNMRU5CUVVNN1FVRkRPVU03UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRMRTlCUVU4c1EwRkJReXhOUVVGTkxFVkJRVVVzVVVGQlVTeEZRVUZGTzBGQlEyNURMRVZCUVVVc1NVRkJTU3hOUVVGTkxFZEJRVWNzUlVGQlJTeERRVUZETzBGQlEyeENMRVZCUVVVc1VVRkJVU3hIUVVGSExGbEJRVmtzUTBGQlF5eFJRVUZYTEVOQlFVTXNRMEZCUXp0QlFVTjJRenRCUVVOQkxFVkJRVVVzVlVGQlZTeERRVUZETEUxQlFVMHNSVUZCUlN4VFFVRlRMRXRCUVVzc1JVRkJSU3hIUVVGSExFVkJRVVVzVFVGQlRTeEZRVUZGTzBGQlEyeEVMRWxCUVVrc1pVRkJaU3hEUVVGRExFMUJRVTBzUlVGQlJTeFJRVUZSTEVOQlFVTXNTMEZCU3l4RlFVRkZMRWRCUVVjc1JVRkJSU3hOUVVGTkxFTkJRVU1zUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXp0QlFVTnFSU3hIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU5NTEVWQlFVVXNUMEZCVHl4TlFVRk5MRU5CUVVNN1FVRkRhRUlzUTBGQlF6dEJRVU5FTzBGQlEwRXNTVUZCUVN4VFFVRmpMRWRCUVVjc1QwRkJUenM3UVVOdVEzaENMRWxCUVVrc1YwRkJWeXhIUVVGSFZDeFpRVUY1UWp0QlFVTXpReXhKUVVGSkxGRkJRVkVzUjBGQlIxRXNVMEZCYzBJN1FVRkRja01zU1VGQlNTeFBRVUZQTEVkQlFVZERMRkZCUVhGQ08wRkJRMjVETEVsQlFVa3NVVUZCVVN4SFFVRkhReXhWUVVGeFFqdEJRVU53UXl4SlFVRkpMRXRCUVVzc1IwRkJSME1zVFVGQmJVSXNRMEZCUXp0QlFVTm9RenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVTBGQlV6QlJMRk5CUVU4c1EwRkJReXhOUVVGTkxFVkJRVVVzU1VGQlNTeEZRVUZGTEV0QlFVc3NSVUZCUlN4VlFVRlZMRVZCUVVVN1FVRkRiRVFzUlVGQlJTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTFCUVUwc1EwRkJReXhGUVVGRk8wRkJRM3BDTEVsQlFVa3NUMEZCVHl4TlFVRk5MRU5CUVVNN1FVRkRiRUlzUjBGQlJ6dEJRVU5JTEVWQlFVVXNTVUZCU1N4SFFVRkhMRkZCUVZFc1EwRkJReXhKUVVGSkxFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTTdRVUZEYUVNN1FVRkRRU3hGUVVGRkxFbEJRVWtzUzBGQlN5eEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTm9RaXhOUVVGTkxFMUJRVTBzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFR0QlFVTXhRaXhOUVVGTkxGTkJRVk1zUjBGQlJ5eE5RVUZOTEVkQlFVY3NRMEZCUXp0QlFVTTFRaXhOUVVGTkxFMUJRVTBzUjBGQlJ5eE5RVUZOTEVOQlFVTTdRVUZEZEVJN1FVRkRRU3hGUVVGRkxFOUJRVThzVFVGQlRTeEpRVUZKTEVsQlFVa3NTVUZCU1N4RlFVRkZMRXRCUVVzc1IwRkJSeXhOUVVGTkxFVkJRVVU3UVVGRE4wTXNTVUZCU1N4SlFVRkpMRWRCUVVjc1IwRkJSeXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMEZCUTJoRExGRkJRVkVzVVVGQlVTeEhRVUZITEV0QlFVc3NRMEZCUXp0QlFVTjZRanRCUVVOQkxFbEJRVWtzU1VGQlNTeEhRVUZITEV0QlFVc3NWMEZCVnl4SlFVRkpMRWRCUVVjc1MwRkJTeXhoUVVGaExFbEJRVWtzUjBGQlJ5eExRVUZMTEZkQlFWY3NSVUZCUlR0QlFVTTNSU3hOUVVGTkxFOUJRVThzVFVGQlRTeERRVUZETzBGQlEzQkNMRXRCUVVzN1FVRkRURHRCUVVOQkxFbEJRVWtzU1VGQlNTeExRVUZMTEVsQlFVa3NVMEZCVXl4RlFVRkZPMEZCUXpWQ0xFMUJRVTBzU1VGQlNTeFJRVUZSTEVkQlFVY3NUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRMnBETEUxQlFVMHNVVUZCVVN4SFFVRkhMRlZCUVZVc1IwRkJSeXhWUVVGVkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVkQlFVY3NSVUZCUlN4TlFVRk5MRU5CUVVNc1IwRkJSeXhUUVVGVExFTkJRVU03UVVGRE5VVXNUVUZCVFN4SlFVRkpMRkZCUVZFc1MwRkJTeXhUUVVGVExFVkJRVVU3UVVGRGJFTXNVVUZCVVN4UlFVRlJMRWRCUVVjc1VVRkJVU3hEUVVGRExGRkJRVkVzUTBGQlF6dEJRVU55UXl4WlFVRlpMRkZCUVZFN1FVRkRjRUlzWVVGQllTeFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNSMEZCUnl4RlFVRkZMRU5CUVVNc1EwRkJRenRCUVVOcVJDeFBRVUZQTzBGQlExQXNTMEZCU3p0QlFVTk1MRWxCUVVrc1YwRkJWeXhEUVVGRExFMUJRVTBzUlVGQlJTeEhRVUZITEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVNN1FVRkRka01zU1VGQlNTeE5RVUZOTEVkQlFVY3NUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRM3BDTEVkQlFVYzdRVUZEU0N4RlFVRkZMRTlCUVU4c1RVRkJUU3hEUVVGRE8wRkJRMmhDTEVOQlFVTTdRVUZEUkR0QlFVTkJMRWxCUVVFc1VVRkJZeXhIUVVGSFFTeFRRVUZQT3p0QlEyeEVlRUlzU1VGQlNTeFBRVUZQTEVkQlFVZHlVaXhSUVVGeFFpeERRVUZETzBGQlEzQkRPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hUUVVGVExFZEJRVWNzUTBGQlF5eE5RVUZOTEVWQlFVVXNTVUZCU1N4RlFVRkZMRXRCUVVzc1JVRkJSVHRCUVVOc1F5eEZRVUZGTEU5QlFVOHNUVUZCVFN4SlFVRkpMRWxCUVVrc1IwRkJSeXhOUVVGTkxFZEJRVWNzVDBGQlR5eERRVUZETEUxQlFVMHNSVUZCUlN4SlFVRkpMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03UVVGRGFFVXNRMEZCUXp0QlFVTkVPMEZCUTBFc1NVRkJRU3hMUVVGakxFZEJRVWNzUjBGQlJ6czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOc1EzQkNMR05CUVdVN08wRkRRV1lzZDBKQlFXVTdPMEZEUVdZc1kwRkJaVHM3UVVOQlppeGpRVUZsT3p0QlEwRm1MR0ZCUVdVN08wRkRRV1lzWVVGQlpUczdRVU5CWml4eFFrRkJaVHM3UVVOQlppeGpRVUZsT3p0QlEwRm1MR0ZCUVdVN08wRkRRV1lzWlVGQlpUczdRVU5CWml4alFVRmxPenRCUTBGbUxHdENRVUZsT3p0QlEwRm1MR0ZCUVdVN08wRkRRV1lzVjBGQlpUczdRVU5CWml4eFFrRkJaVHM3UVVOQlpqczdPenM3T3p0QlFVOUhPMEZCY1VKSkxFMUJRVTBzUzBGQlN5eEhRVUZITzBGQlEyNUNMRWxCUVVFc2QwSkJRWGRDTEVWQlFVVXNhVUpCUVdsQ08wRkJRek5ETEVsQlFVRXNZMEZCWXl4RlFVRkZMRTlCUVU4N1FVRkRka0lzU1VGQlFTeGpRVUZqTEVWQlFVVXNUMEZCVHp0QlFVTjJRaXhKUVVGQkxHTkJRV01zUlVGQlJTeFBRVUZQTzBGQlEzWkNMRWxCUVVFc1lVRkJZU3hGUVVGRkxFMUJRVTA3UVVGRGNrSXNTVUZCUVN4bFFVRmxMRVZCUVVVc1VVRkJVVHRCUVVONlFpeEpRVUZCTEdGQlFXRXNSVUZCUlN4TlFVRk5PMEZCUTNKQ0xFbEJRVUVzYTBKQlFXdENMRVZCUVVVc1YwRkJWenRCUVVNdlFpeEpRVUZCTEdGQlFXRXNSVUZCUlN4TlFVRk5PMEZCUTNKQ0xFbEJRVUVzWTBGQll5eEZRVUZGTEU5QlFVODdRVUZEZGtJc1NVRkJRU3hqUVVGakxFVkJRVVVzVDBGQlR6dEJRVU4yUWl4SlFVRkJMR05CUVdNc1JVRkJSU3hOUVVGTk8wRkJRM1JDTEVsQlFVRXNNa0pCUVRKQ0xFVkJRVVVzWTBGQll6dEJRVU16UXl4SlFVRkJMRFJDUVVFMFFpeEZRVUZGTEdOQlFXTTdRVUZETlVNc1NVRkJRU3huUWtGQlowSXNSVUZCUlN4SlFVRkpPME5CUTNaQ096dEJRelZEUkRzN096czdPenRCUVU5SE8wRkJhVUpJTEUxQlFVMHNSMEZCUnl4SFFVRkhMRXRCUVVzc1EwRkJReXhuUTBGQlowTXNRMEZCUXl4RFFVRkRPMEZCUlhCRU8wRkJRMEVzVFVGQlRTeFpRVUZaTEVkQlFVZHpVaXhUUVVGUExFTkJRVU1zVDBGQk9FSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkJSU3hIUVVGSExFdEJRMnhGTEVkQlFVY3NRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVU4wUWl4RFFVRkRPMEZCWVVZc1RVRkJUU3hqUVVGakxFZEJRVWNzVDBGQlR5eERRVUZETzBGQlF5OUNMRTFCUVUwc1owSkJRV2RDTEVkQlFVY3NaVUZCWlN4RFFVRkRPMEZCWjBSNlF6czdPenM3UVVGTFJ6dEJRVU5JTEZOQlFWTXNkMEpCUVhkQ0xFTkJRVU1zVFVGQlFTeEhRVUZwUWl4alFVRmpMRVZCUVVFN1NVRkRMMFFzVFVGQlRTeFZRVUZWTEVsQlFVa3NXVUZCV1N4RFFVRkRMR05CUVdNc1EwRkJReXhGUVVGRkxGTkJRVk03UVVGRGVrUXNWVUZCUlN4blFrRkJaMElzU1VGQlNTeEZRVUZGTEVOQlFYbERMRU5CUVVNN1NVRkRjRVVzVFVGQlRTeFpRVUZaTEVsQlFVa3NXVUZCV1N4RFFVRkRMRTFCUVUwc1EwRkJReXhGUVVGRkxGTkJRVk1zUlVGQlJTeG5Ra0ZCWjBJN1FVRkRja1VzVVVGQlFTeEZRVUZGTEVOQlFYbERMRU5CUVVNN1NVRkZPVU1zU1VGQlNTeE5RVUZOTEV0QlFVc3NZMEZCWXl4RlFVRkZPMEZCUXpkQ0xGRkJRVUVzVDBGQlR5eFZRVUZWTEVOQlFVTTdRVUZEYmtJc1MwRkJRVHRKUVVWRUxFOUJRVTl3U1N4UFFVRkxMRU5CUVVNc1JVRkJSU3hGUVVGRkxGVkJRVlVzUlVGQlJTeFpRVUZaTEVOQlFVTXNRMEZCUXp0QlFVTTNReXhEUVVGRE8wRkJSVVE3T3pzN096czdPenRCUVZOSE8wRkJRMGtzWlVGQlpTeHpRa0ZCYzBJc1EwRkRNVU1zVVVGQmEwSXNSVUZEYkVJc1RVRkJhVUlzUjBGQlFTeGpRVUZqTEVWQlF5OUNMRmRCUVVFc1IwRkJNa0lzVFVGQlRTeEZRVUZCTzBGQlJXcERMRWxCUVVFc1RVRkJUU3h0UWtGQmJVSXNSMEZEZGtJc1VVRkJVU3hEUVVGRExGVkJRVlVzUTBGQlF5eEhRVUZITEVOQlFVTXNjMEpCUVhOQ0xFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEYkVRc1VVRkJVU3hEUVVGRExGVkJRVlVzUTBGQlF5eEhRVUZITEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVVnFSQ3hKUVVGQkxFMUJRVTBzUTBGQlF5eGxRVUZsTEVOQlFVTXNSMEZCUnl4UlFVRlJMRU5CUVVNc1ZVRkJWU3hEUVVGRExFZEJRVWNzUTBGQlF5eGpRVUZqTEVOQlFVTXNRMEZCUXp0SlFVVnNSU3hKUVVGSkxFTkJRVU1zWlVGQlpTeEZRVUZGTzBGQlEzQkNMRkZCUVVFc1QwRkJUeXhKUVVGSkxFTkJRVU03UVVGRFlpeExRVUZCTzBGQlJVUXNTVUZCUVN4SlFVRkpMRzFDUVVGdFFpeEZRVUZGTzBGQlEzWkNMRkZCUVVFc1QwRkJUeXc0UWtGQk9FSXNRMEZEYmtNc1pVRkJaU3hEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVWQlF6VkNMRzFDUVVGdFFpeERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRVZCUXpWQ0xFMUJRVTBzUlVGRFRpeFhRVUZYTEVOQlExb3NRMEZCUXp0QlFVTklMRXRCUVVFN1FVRkZSQ3hKUVVGQkxFOUJRVThzZVVKQlFYbENMRU5CUVVNc1pVRkJaU3hGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETzBGQlF6VkVMRU5CUVVNN1FVRkZSQ3hsUVVGbExEaENRVUU0UWl4RFFVTXpReXhQUVVGcFFpeEZRVU5xUWl4aFFVRnhRaXhGUVVOeVFpeE5RVUZOTEVkQlFVY3NZMEZCWXl4RlFVTjJRaXhYUVVGQkxFZEJRVEpDTEUxQlFVMHNSVUZCUVR0SlFVVnFReXhOUVVGTkxGVkJRVlVzUjBGQlJ5eE5RVUZOTEZWQlFWVXNRMEZCUXl4aFFVRmhMRU5CUXk5RExHRkJRV0VzUTBGRFpDeERRVUZETzBGQlJVWXNTVUZCUVN4TlFVRk5MRlZCUVZVc1IwRkJSeXhwUWtGQmFVSXNRMEZEYkVNc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEUxQlFVMHNTMEZEYWtJc2JVSkJRVzFDTEVOQlEycENMRlZCUVZVN08wRkJSVllzU1VGQlFTeE5RVUZOTEVOQlFVTXNWVUZCVlN4RlFVRkZMRWxCUVVrc1NVRkJTU3hOUVVGTkxFTkJRVU1zVFVGQlRTeEZRVU40UXl4TlFVRk5MRVZCUTA0c1YwRkJWeXhEUVVOYUxFTkJRMFlzUTBGRFJpeERRVUZETzBGQlJVWXNTVUZCUVN4UFFVRlBMRlZCUVZVc1EwRkJRenRCUVVOd1FpeERRVUZETzBGQmEwSkVPenM3T3pzN096dEJRVkZITzFOQlEyRXNlVUpCUVhsQ0xFTkJRM1pETEdkQ1FVRnpReXhGUVVOMFF5eFRRVUZwUWl4alFVRmpMRVZCUVVFN1FVRkZMMElzU1VGQlFTeE5RVUZOTEU5QlFVOHNSMEZCUnl4blFrRkJaMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCT0VJc1EwRkJRenRCUVVOeVJTeEpRVUZCTEUxQlFVMHNXVUZCV1N4SFFVRkhMSGRDUVVGM1FpeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMGxCUTNSRUxFMUJRVTBzVTBGQlV5eEpRVUZKTEdkQ1FVRm5RaXhEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNZVUZCWVR0QlFVTTVSQ3hSUVVGQkxFVkJRVVVzUTBGQlpTeERRVUZETzBGQlJYQkNMRWxCUVVFc1RVRkJUU3hYUVVGWExFZEJRWE5DTEVWQlFVVXNUMEZCVHl4RlFVRkZMRVZCUVVVc1JVRkJSU3hEUVVGRE96czdRVUZIZGtRc1NVRkJRU3hKUVVGSkxFTkJRVU1zVTBGQlV5eEZRVUZGTEVOQlFVTXNVVUZCVVN4TFFVRkpPMUZCUXpOQ0xFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXl4alFVRmpMRVZCUVVVc1NVRkJTU3hMUVVGSk8wRkJRM1JETEZsQlFVRXNUVUZCVFN4SFFVRkhMRWRCUVVjc1kwRkJZeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzBGQlEyNURMRmxCUVVFc1NVRkJTU3hIUVVGSExFVkJRVVU3UVVGRFVDeG5Ra0ZCUVhGSkxFdEJRVWNzUTBGQlF5eFhRVUZYTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRemRDTEdGQlFVRTdRVUZEU0N4VFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOTUxFdEJRVU1zUTBGQlF5eERRVUZETzBsQlJVZ3NUVUZCVFN4cFFrRkJhVUlzUjBGQlJ5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1RVRkJUU3hGUVVGRkxFZEJRVWNzUzBGQlNUdFJRVU53UkN4TlFVRk5MR1ZCUVdVc1IwRkJSeXhYUVVGWExFTkJRVU1zVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJRenRSUVVOMlJDeE5RVUZOTEd0Q1FVRnJRaXhIUVVGSExGbEJRVmtzUTBGQlF5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1FVRkRka1FzVVVGQlFTeE5RVUZOTEUxQlFVMHNSMEZCVnl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRE8xRkJRM0pETEU5QlFVODdPMWxCUlV3c1JVRkJSU3hGUVVGRkxFMUJRVTBzUTBGQlF5eE5RVUZOT3p0QlFVVnFRaXhaUVVGQkxFbEJRVWtzUlVGRFJpeE5RVUZOTEVOQlFVTXNWVUZCVlN4SFFVRkhMR2RDUVVGblFpeERRVUZETzJkQ1FVTnlReXhMUVVGTExFTkJRVU1zVFVGQk5FSXNRMEZCUXpzN1FVRkZja01zV1VGQlFTeExRVUZMTEVWQlFVVXNaVUZCWlN4RFFVRkRMRTFCUVUwc1NVRkJTU3hyUWtGQmEwSXNRMEZCUXl4TFFVRkxPenRCUVVWNlJDeFpRVUZCTEZkQlFWY3NSVUZEVkN4bFFVRmxMRVZCUVVVc1ZVRkJWU3hGUVVGRkxGZEJRVmM3UVVGRGVFTXNaMEpCUVVFc2EwSkJRV3RDTEVOQlFVTXNWMEZCVnp0VFFVTkVMRU5CUVVNN1FVRkRjRU1zUzBGQlF5eERRVUZETEVOQlFVTTdRVUZGU0N4SlFVRkJMRTlCUVU4c2FVSkJRV2xDTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUTBGQlF6dEJRVU01UXl4RFFVRkRPMEZCUlVRN096dEJRVWRITzBGQlEwZ3NUVUZCVFN4cFFrRkJhVUlzUjBGQlJ5eEpRVUZKTEVOQlF6VkNMRTlCUVU4c1JVRkRVQ3hOUVVGTkxFTkJRV1VzUTBGQlF5eFJRVUZSTEV0QlFVc3NVVUZCVVN4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVNdlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4UlFVRlJMRXRCUVVzc1VVRkJVU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVU55UXl4RFFVRkRPMEZCUlVZN08wRkJSVWM3UVVGRFNDeFRRVUZUTEcxQ1FVRnRRaXhEUVVNeFFpeFZRVUV5UWl4RlFVTXpRaXhSUVVGblFpeEZRVU5vUWl4TlFVRmpMRVZCUTJRc1YwRkJkMElzUlVGQlFUdEJRVVY0UWl4SlFVRkJMRTFCUVUwc1ZVRkJWU3hIUVVGSExGVkJRVlVzUTBGQlF5eFBRVUZQTEVOQlFVTXNVVUZCVVN4RFFVRkRMRVZCUVVVc1VVRkJVU3hKUVVGSkxHZENRVUZuUWl4RFFVRkRPMGxCUXpsRkxFbEJRVWtzVlVGQlZTeExRVUZMTEdkQ1FVRm5RaXhGUVVGRk8wRkJRMjVETEZGQlFVRXNSMEZCUnl4RFFVRkRMSE5EUVVGelF5eEZRVUZGTEZGQlFWRXNRMEZCUXl4RFFVRkRPMEZCUTNaRUxFdEJRVUU3U1VGRFJDeE5RVUZOTEZGQlFWRXNSMEZCUnl4VlFVRlZMRU5CUVVNc1ZVRkJWU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzBGQlEyNUVMRWxCUVVFc1NVRkJTU3hSUVVGUkxFVkJRVVU3VVVGRFdpeFBRVUZQTzBGQlEwd3NXVUZCUVN4RlFVRkZMRVZCUVVVc1ZVRkJWVHRCUVVOa0xGbEJRVUVzU1VGQlNTeEZRVUZGTEZGQlFWRXNRMEZCUXl4SlFVRkpMRVZCUVVVc1QwRkJUeXhEUVVGRExGZEJRVmNzUlVGQlJTeFhRVUZYTEVOQlFVTXNTVUZCU1N4SlFVRkpPMEZCUXpsRUxGbEJRVUVzUzBGQlN5eEZRVUZGTEZGQlFWRXNRMEZCUXl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRE8wRkJRemxDTEZsQlFVRXNWMEZCVnl4RlFVRkZMRkZCUVZFc1EwRkJReXhaUVVGWkxFTkJRVU1zVFVGQlRTeERRVUZETzFOQlF6TkRMRU5CUVVNN1FVRkRTQ3hMUVVGQk8wRkJRMFFzU1VGQlFTeFBRVUZQTEVsQlFVa3NRMEZCUXp0QlFVTmtPenRCUTJ4U1FUczdPenM3T3p0QlFVOUhPMEZCU1Vjc1UwRkJWU3gzUWtGQmQwSXNRMEZCUXl4UlFVRnJRaXhGUVVGQk8wRkJRM3BFTEVsQlFVRXNUVUZCVFN4TFFVRkxMRWRCUVVjc1VVRkJVU3hEUVVGRExHTkJRV01zUTBGQlF6czdTVUZGZEVNc1RVRkJUU3hoUVVGaExFZEJRVWNzUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4WlFVRlpMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGRGRFUXNTVUZCUVN4SlFVRkpMSE5DUVVGelFpeERRVUZETEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1JVRkJSVHM3UVVGRk9VTXNVVUZCUVN4UFFVRlBMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1NVRkJTU3hGUVVGRkxFTkJRVU03UVVGRGNFTXNTMEZCUVR0QlFVRk5MRk5CUVVFN096dEJRVWRNTEZGQlFVRXNUVUZCVFN4VFFVRlRMRWRCUVVjc1lVRkJZU3hEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU03T3p0QlFVZDRSQ3hSUVVGQkxFMUJRVTBzUTBGQlF5eFBRVUZQTEVWQlFVVXNUMEZCVHl4RFFVRkRMRWRCUVVjc1UwRkJVeXhEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXpzN08xRkJSMmhFTEUxQlFVMHNaMEpCUVdkQ0xFZEJRVWNzVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRGNFUXNVVUZCUVN4SlFVRkpMRTlCUVU4c1JVRkJSVHRCUVVOWUxGbEJRVUVzVDBGQlR5eERRVUZITEVWQlFVRXNaMEpCUVdkQ0xFTkJRVWtzUTBGQlFTeEZRVUZCTEU5QlFVOHNSVUZCUlN4RFFVRkRPMEZCUTNwRExGTkJRVUU3UVVGRFJDeFJRVUZCTEU5QlFVOHNaMEpCUVdkQ0xFTkJRVU03UVVGRGVrSXNTMEZCUVR0QlFVTklPenRCUTJwRFFUczdPenM3T3p0QlFVOUhPMEZCVlVnc1RVRkJUU3gxUWtGQmRVSXNSMEZCUnp0SlFVTTVRaXgzUlVGQmQwVTdTVUZEZUVVc2VVVkJRWGxGTzBsQlEzcEZMSEZHUVVGeFJqdEpRVU55Uml4elJrRkJjMFk3UTBGRGRrWXNRMEZCUXp0QlFVVkdMRk5CUVZNc05rSkJRVFpDTEVOQlFVTXNTVUZCV1N4RlFVRkJPMEZCUTJwRUxFbEJRVUVzVDBGQlR5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRia1FzUTBGQlF6dEJRWFZDUkRzN096dEJRVWxITzBGQlEwY3NVMEZCVlN4dlFrRkJiMElzUTBGRGJFTXNVVUZCYTBJc1JVRkJRVHRCUVVWc1FpeEpRVUZCTEUxQlFVMHNTVUZCU1N4SFFVRkhMRkZCUVZFc1EwRkJReXhWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZETVVNc1EwRkJReXhIUVVGSExFVkJRVVVzVTBGQk9FSXNTMEZCU1RzN1FVRkZkRU1zVVVGQlFTeEpRVUZKTEZOQlFWTXNRMEZCUXl4TFFVRkxMRXRCUVVzc2VVSkJRWGxDTEVWQlFVVTdXVUZEYWtRc1RVRkJUU3hGUVVGRkxGZEJRVmNzUlVGQlJTeFBRVUZQTEVWQlFVVXNSMEZCU1N4VFFVRTJRaXhEUVVGRExFbEJRVWtzUTBGQlF6dEJRVU55UlN4WlFVRkJMRTFCUVUwc1lVRkJZU3hIUVVGSExFTkJRVU1zVjBGQlZ5eEZRVUZGTEU5QlFVOHNRMEZCUXp0QlFVTjZReXhwUWtGQlFTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNRMEZCUXp0cFFrRkRNMElzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMWxCUTJJc1QwRkJUenRCUVVOTUxHZENRVUZCTEVkQlFVY3NSMEZCUnp0QlFVTk9MR2RDUVVGQk8yOUNRVU5GTEZOQlFWTTdRVUZEVkN4dlFrRkJRU3hKUVVGSkxFVkJRVVVzVVVGQlVUdEJRVU5rTEc5Q1FVRkJMR0ZCUVdFc1JVRkJSU3hoUVVGaE8wRkJRemRDTEdsQ1FVRkJPMkZCUTBZc1EwRkJRenRCUVVOSUxGTkJRVUU3TzBGQlIwUXNVVUZCUVN4SlFVRkpMRk5CUVZNc1EwRkJReXhMUVVGTExFdEJRVXNzWTBGQll5eEZRVUZGTzBGQlEzUkRMRmxCUVVFc1RVRkJUU3hGUVVGRkxFOUJRVThzUlVGQlJTeEhRVUZKTEZOQlFXdERMRU5CUVVNc1NVRkJTU3hEUVVGRE8xbEJRemRFTEUxQlFVMHNXVUZCV1N4SFFVRnhRaXhQUVVGUExFTkJRVU1zVFVGQlRTeERRVU51UkN4RFFVRkRMRk5CUVZNc1JVRkJSU3hOUVVGblFpeExRVUZKTzBGQlF6bENMR2RDUVVGQkxFMUJRVTBzUlVGQlJTeHBRa0ZCYVVJc1JVRkJSU3hIUVVGSExFMUJRVTBzUTBGQlF6dEJRVU55UXl4blFrRkJRU3hKUVVORkxHbENRVUZwUWp0QlFVTnFRaXh2UWtGQlFTeDFRa0ZCZFVJc1EwRkJReXhSUVVGUkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1JVRkRia1E3YjBKQlEwRXNVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJRenQzUWtGRFlpeFRRVUZUTzBGQlExUXNkMEpCUVVFc1RVRkJUU3hGUVVGRkxFMUJRVTA3UVVGRFpDeDNRa0ZCUVN4SlFVRkpMRVZCUVVVc05rSkJRVFpDTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU03ZDBKQlEzUkVMR0ZCUVdFc1JVRkJSU3hOUVVGTkxFTkJRVU1zWVVGQllUdEJRVU5zUWl4eFFrRkJRU3hEUVVGRExFTkJRVU03UVVGRGRFSXNhVUpCUVVFN1FVRkZSQ3huUWtGQlFTeFBRVUZQTEZOQlFWTXNRMEZCUXp0aFFVTnNRaXhGUVVORUxFVkJRVVVzUTBGRFNDeERRVUZETzBGQlJVWXNXVUZCUVN4UFFVRlBMRU5CUVVNc1IwRkJSeXhIUVVGSExFVkJRVVVzUjBGQlJ5eFpRVUZaTEVOQlFVTXNRMEZCUXp0QlFVTnNReXhUUVVGQk8wRkJSVVFzVVVGQlFTeFBRVUZQTEVkQlFVY3NRMEZCUXp0TFFVTmFMRVZCUTBRc1JVRkJSU3hEUVVOSUxFTkJRVU03U1VGRlJpeFBRVUZQTEVsQlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF6dEJRVU51UXpzN1FVTXpSMEU3T3pzN096czdRVUZQUnp0QlFVdElPenM3TzBGQlNVYzdRVUZEUnl4VFFVRlZMR05CUVdNc1EwRkJReXhSUVVGclFpeEZRVUZCTzBGQlF5OURMRWxCUVVFc1RVRkJUU3hEUVVGRExGZEJRVmNzUTBGQlF5eEhRVUZITEZGQlFWRXNRMEZCUXl4VlFVRlZMRU5CUVVNc1IwRkJSeXhEUVVGRExEaENRVUU0UWl4RFFVRkRMRU5CUVVNN1NVRkZPVVVzU1VGQlNTeERRVUZETEZkQlFWY3NSVUZCUlR0QlFVTm9RaXhSUVVGQkxFOUJRVThzU1VGQlNTeERRVUZETzBGQlEySXNTMEZCUVR0SlFVVkVMRTFCUVUwc1VVRkJVU3hIUVVGSExGZEJRVmNzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRWxCUVVrc1EwRkROVU1zUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1kwRkJZeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVU5vUXl4RFFVRkRPMGxCUlVZc1QwRkJUeXhSUVVGUkxFbEJRVWtzU1VGQlNTeERRVUZETzBGQlF6RkNPenRCUXpkQ1FUczdPenM3T3p0QlFVOUhPMEZCUzBnN096czdPMEZCUzBjN1FVRkRSeXhUUVVGVkxHOUNRVUZ2UWl4RFFVRkRMRkZCUVd0Q0xFVkJRVUU3UVVGRGNrUXNTVUZCUVN4TlFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGRExFZEJRVWNzVVVGQlVTeERRVUZETEZWQlFWVXNRMEZCUXl4SFFVRkhMRU5CUVVNc09FSkJRVGhDTEVOQlFVTXNRMEZCUXp0SlFVVTVSU3hKUVVGSkxFTkJRVU1zVjBGQlZ5eEZRVUZGTzBGQlEyaENMRkZCUVVFc1QwRkJUeXhKUVVGSkxFTkJRVU03UVVGRFlpeExRVUZCTzBsQlJVUXNUVUZCVFN4alFVRmpMRWRCUVVjc1YwRkJWeXhEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVOMlJDeERRVUZETEVOQlFVTXNZMEZCWXl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVONFFpeERRVUZETzBGQlJVWXNTVUZCUVN4UFFVRlBMR05CUVdNc1EwRkJRenRCUVVONFFqczdRVU01UWtFN096czdPenM3UVVGUFJ6dEJRWFZHU0RzN096czdRVUZMUnp0QlFVTkpMR1ZCUVdVc2NVSkJRWEZDTEVOQlEzcERMR0ZCUVRSQ0xFVkJRelZDTEUxQlFXVXNSVUZCUVR0SlFVVm1MRTFCUVUwc1UwRkJVeXhIUVVGdFFpeEZRVUZGTEVOQlFVTTdRVUZEY2tNc1NVRkJRU3hOUVVGTkxHTkJRV01zUjBGQlJ5eGhRVUZoTEVOQlFVTXNZMEZCWXl4RFFVRkRPMGxCUlhCRUxFMUJRVTBzVjBGQlZ5eEhRVUZ0UWl4alFVRmpMRU5CUVVNc1YwRkJWeXhEUVVGRExFZEJRVWNzUTBGRGFFVXNRMEZCUXl4VlFVRlZMRXRCUVVrN1VVRkRZaXhOUVVGTkxGTkJRVk1zUjBGQlJ5eFZRVUZWTEVOQlFVTXNVMEZCVXl4RlFVRkZMRTFCUVUwc1JVRkJSU3hEUVVGRE8wRkJSV3BFTEZGQlFVRXNTVUZCU1N4VFFVRlRMRVZCUVVVN1FVRkRZaXhaUVVGQkxGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8wRkJRMjVETEZOQlFVRTdVVUZGUkN4UFFVRlBPMWxCUTB3c1MwRkJTeXhGUVVGRkxGVkJRVlVzUTBGQlF5eExRVUZMTzFsQlEzWkNMRTFCUVUwc1JVRkJSU3hWUVVGVkxFTkJRVU1zVFVGQlRUdEJRVU42UWl4WlFVRkJMRk5CUVZNc1JVRkJSU3hUUVVGVExFVkJRVVVzUjBGQlJ5eEpRVUZKTEVsQlFVazdRVUZEYWtNc1dVRkJRU3hYUVVGWExFVkJRVVVzUTBGQlF5eERRVUZETEZWQlFWVXNRMEZCUXl4UlFVRlJPMEZCUTJ4RExGbEJRVUVzUzBGQlN5eEZRVUZGTEdOQlFXTXNRMEZCUXl4VlFVRlZMRU5CUVVNc1owSkJRV2RDTEVOQlFVTTdXVUZEYkVRc1owSkJRV2RDTEVWQlFVVXNWVUZCVlN4RFFVRkRMR2RDUVVGblFqdFRRVU01UXl4RFFVRkRPMEZCUTBvc1MwRkJReXhEUVVOR0xFTkJRVU03UVVGRlJpeEpRVUZCTEUxQlFVMHNVVUZCVVN4SFFVRkhMR05CUVdNc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF6dEpRVVZvUkN4TlFVRk5MR2RDUVVGblFpeEhRVUZITEUxQlFVMHNjMEpCUVhOQ0xFTkJRVU1zWTBGQll5eEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRPMEZCUlRsRkxFbEJRVUVzVFVGQlRTeGpRVUZqTEVkQlEyeENMRzlDUVVGdlFpeERRVUZETEdOQlFXTXNRMEZCUXl4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRExHRkJRV0VzVFVGQlRUdEJRVU0xUkN4UlFVRkJMRTlCUVU4c1JVRkJSU3hoUVVGaExFTkJRVU1zVDBGQlR5eERRVUZETzBGQlF5OUNMRkZCUVVFc1MwRkJTeXhGUVVGRkxHRkJRV0VzUTBGQlF5eExRVUZMTEVOQlFVTTdVVUZETTBJc1NVRkJTU3hGUVVGRkxHRkJRV0VzUTBGQlF5eEpRVUZKTzFGQlEzaENMRlZCUVZVc1JVRkJSU3hoUVVGaExFTkJRVU1zVlVGQlZUdExRVU55UXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hKUVVGSkxFTkJRVU03U1VGRlpDeE5RVUZOTEZOQlFWTXNSMEZCUnl4alFVRmpMRU5CUVVNc1UwRkJVeXhGUVVGRkxFMUJRVTBzUlVGQlJTeERRVUZETzBGQlJYSkVMRWxCUVVFc1NVRkJTU3hUUVVGVExFVkJRVVU3UVVGRFlpeFJRVUZCTEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzBGQlEyNURMRXRCUVVFN1NVRkZSQ3hQUVVGUE8wRkJRMHdzVVVGQlFTeGhRVUZoTEVWQlFVVTdXVUZEWWl4WFFVRlhPMWxCUTFnc1RVRkJUU3hGUVVGRkxHTkJRV01zUTBGQlF5eE5RVUZOTzFsQlF6ZENMRXRCUVVzc1JVRkJSU3hqUVVGakxFTkJRVU1zUzBGQlN6dFpRVU16UWl4VFFVRlRMRVZCUVVVc1kwRkJZeXhEUVVGRExHRkJRV0U3UVVGRGNrTXNhMEpCUVVVN1FVRkRSU3h2UWtGQlFTeE5RVUZOTEVWQlFVVXNZMEZCWXl4RFFVRkRMR0ZCUVdFc1EwRkJReXhOUVVGTkxFbEJRVWtzU1VGQlNUdEJRVU51UkN4dlFrRkJRU3hoUVVGaExFVkJRVVVzWTBGQll5eERRVUZETEdGQlFXRXNRMEZCUXl4SlFVRkpMRWxCUVVrc1NVRkJTVHRCUVVONlJDeHBRa0ZCUVR0QlFVTklMR3RDUVVGRkxFbEJRVWs3UVVGRFVpeFpRVUZCTEdOQlFXTXNSVUZCUlR0blFrRkRaQ3hMUVVGTExFVkJRVVVzWTBGQll5eERRVUZETEdOQlFXTTdRVUZEY0VNc1owSkJRVUVzVDBGQlR5eEZRVUZGTEhkQ1FVRjNRaXhEUVVGRExHTkJRV01zUTBGQlF6dEJRVU5zUkN4aFFVRkJPMEZCUTBRc1dVRkJRU3hSUVVGUkxFVkJRVVVzVVVGQlVUdEJRVU5vUWl4clFrRkJSVHRCUVVORkxHOUNRVUZCTEU5QlFVOHNSVUZCUlN4UlFVRlJMRU5CUVVNc1QwRkJUeXhEUVVGRE8yOUNRVU14UWl4SlFVRkpMRVZCUVVVc1VVRkJVU3hEUVVGRExFbEJRVWs3YjBKQlEyNUNMRlZCUVZVc1JVRkJSU3hSUVVGUkxFTkJRVU1zVlVGQlZUdEJRVU5vUXl4cFFrRkJRVHRCUVVOSUxHdENRVUZGTEVsQlFVazdXVUZEVWl4alFVRmpPMWxCUTJRc1owSkJRV2RDTzBGQlEyaENMRmxCUVVFc1kwRkJZeXhGUVVGRkxHOUNRVUZ2UWl4RFFVRkRMR05CUVdNc1EwRkJRenRCUVVOd1JDeFpRVUZCTEZOQlFWTXNSVUZCUlN4VFFVRlRMRVZCUVVVc1IwRkJSeXhKUVVGSkxFbEJRVWs3UVVGRGFrTXNXVUZCUVN4TlFVRk5MRVZCUVVVc1EwRkJReXhEUVVGRExHTkJRV01zUTBGQlF5eFZRVUZWTEVOQlFVTXNSMEZCUnl4RFFVRkRMRmxCUVZrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4UFFVRlBPMEZCUTNoRkxGbEJRVUVzUzBGQlN5eEZRVUZGTEdOQlFXTXNRMEZCUXl4aFFVRmhMRU5CUVVNc1owSkJRV2RDTEVOQlFVTTdXVUZEY2tRc1owSkJRV2RDTEVWQlFVVXNZVUZCWVN4RFFVRkRMR2RDUVVGblFqdEJRVU5xUkN4VFFVRkJPMUZCUTBRc1QwRkJUeXhGUVVGRkxFMUJRVXM3V1VGRFdpeFRRVUZUTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1QwRkJUeXhMUVVGTExFOUJRVThzUlVGQlJTeERRVUZETEVOQlFVTTdVMEZETTBNN1MwRkRSaXhEUVVGRE8wRkJRMG9zUTBGQlF6dEJRVVZFTEZOQlFWTXNZMEZCWXl4RFFVRkRMR2RDUVVGdlF5eEZRVUZCTzBsQlF6RkVMRTlCUVU4c1lVRkJZU3hEUVVGRExHZENRVUZuUWl4RFFVRkRPMEZCUTNCRExGVkJRVVVzVFVGQlRUdEJRVU5TTEZWQlFVVXNZMEZCWXl4RFFVRkRMR2RDUVVGblFpeERRVUZETzBGQlEyeERMR05CUVVVc1QwRkJUenRqUVVOUUxFbEJRVWtzUTBGQlF6dEJRVU5ZT3pzN095SjlcbiIsImltcG9ydCB7IEMycGEsIEMycGFDb25maWcsIGNyZWF0ZUMycGEgfSBmcm9tICdAYzJwYS9hZG9iZS1zZGsnO1xuXG5pbXBvcnQgd2FzbVNyYyBmcm9tICcuLi9ub2RlX21vZHVsZXMvQGMycGEvYWRvYmUtc2RrL2Rpc3QvYXNzZXRzL3dhc20vdG9vbGtpdF9iZy53YXNtJztcbmltcG9ydCB3b3JrZXJTcmMgZnJvbSAgJy4uL25vZGVfbW9kdWxlcy9AYzJwYS9hZG9iZS1zZGsvZGlzdC9jMnBhLndvcmtlci51bWQubWluLmpzJztcbi8vIGltcG9ydCB3YXNtU3JjIGZyb20gJ0BjMnBhL2Fkb2JlLXNkay9kaXN0L2Fzc2V0cy93YXNtL3Rvb2xraXRfYmcud2FzbSc7XG5cbi8vIGltcG9ydCB3b3JrZXJTcmMgZnJvbSAnLi4vbm9kZV9tb2R1bGVzL0BjMnBhL2Fkb2JlLXNkay9kaXN0L2MycGEud29ya2VyLm1pbi5qcyc7XG4vLyBpbXBvcnQgd2FzbVNyYyBmcm9tICcuLi9ub2RlX21vZHVsZXMvQGMycGEvYWRvYmUtc2RrL2Rpc3QvYXNzZXRzL3dhc20vdG9vbGtpdF9iZy53YXNtP3VybCc7XG4vLyBpbXBvcnQgd29ya2VyU3JjIGZyb20gJy4uL25vZGVfbW9kdWxlcy9AYzJwYS9hZG9iZS1zZGsvZGlzdC9jMnBhLndvcmtlci5taW4uanM/dXJsJztcbi8vIGltcG9ydCB3YXNtU3JjIGZyb20gJy4uL25vZGVfbW9kdWxlcy9AYzJwYS9hZG9iZS1zZGsvZGlzdC9hc3NldHMvd2FzbS90b29sa2l0X2JnLndhc20/dXJsJztcbi8vIGltcG9ydCB3b3JrZXJTcmMgZnJvbSAnLi4vbm9kZV9tb2R1bGVzL0BjMnBhL2Fkb2JlLXNkay9kaXN0L2MycGEud29ya2VyLmVzbS5taW4uanM/dXJsJztcblxuZXhwb3J0IGNvbnN0IGluaXRDUkxpdGUgPSBhc3luYyAoKSA9PiB7IFxuICAvLyBjb25zdCBjMnBhID0gYXdhaXQgY3JlYXRlQzJwYSh7XG4gIC8vICAgICB3YXNtU3JjOiBgaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9jMnBhQDAuMTYuMi9kaXN0L2Fzc2V0cy93YXNtL3Rvb2xraXRfYmcud2FzbWAsXG4gIC8vICAgICB3b3JrZXJTcmM6IGBodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2MycGFAMC4xNi4yL2Rpc3QvYzJwYS53b3JrZXIubWluLmpzYCxcbiAgLy8gICBkb3dubG9hZGVyT3B0aW9uczoge1xuICAvLyAgICAgaW5zcGVjdFNpemU6IDAsXG4gIC8vICAgfSxcbiAgLy8gfSk7XG4gIC8vIGNvbnN0IHdhc21Nb2R1bGUgPSBhd2FpdCByZXF1aXJlKCdjMnBhL2Rpc3QvYXNzZXRzL3dhc20vdG9vbGtpdF9iZy53YXNtJyk7XG4gIC8vIGNvbnNvbGUubG9nKHdvcmtlclNyYylcbiAgLy8gY29uc3Qgd2FzbVNyYyA9IGF3YWl0IHdhc21Nb2R1bGUoKTtcbiAgY29uc3QgYzJwYSA9IGF3YWl0IGNyZWF0ZUMycGEoe1xuICAgIHdhc21TcmM6ICcuLi9ub2RlX21vZHVsZXMvQGMycGEvYWRvYmUtc2RrL2Rpc3QvYXNzZXRzL3dhc20vdG9vbGtpdF9iZy53YXNtJyxcbiAgICB3b3JrZXJTcmM6ICcuLi9ub2RlX21vZHVsZXMvQGMycGEvYWRvYmUtc2RrL2Rpc3QvYzJwYS53b3JrZXIudW1kLm1pbi5qcycsXG4gIGRvd25sb2FkZXJPcHRpb25zOiB7XG4gICAgaW5zcGVjdFNpemU6IDAsXG4gIH0sXG59KTt7XG4gICAgKHdpbmRvdyBhcyBhbnkpLkNSbGl0ZSA9IGMycGE7XG4gICAgY29uc29sZS5pbmZvKCdDUkxpdGUgaW5pdGlhbGl6ZWQnKVxuICB9XG59XG4oYXN5bmMgKCkgPT4ge1xuYXdhaXQgaW5pdENSTGl0ZSgpO1xuXG59KSgpO1xuLy8gZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluaXRDMnBhKCkge1xuLy8gICAvLyBJbml0aWFsaXplIHRoZSBjMnBhLWpzIFNES1xuXG4vLyAgIHJldHVybiBjMnBhO1xuLy8gfVxuXG4vLyBleHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBnZXRDMnBhKCk6IFByb21pc2U8QzJwYT4ge1xuLy8gICBjb25zdCBjMnBhID0gYXdhaXQgaW5pdEMycGEoKTtcbi8vICAgcmV0dXJuIGMycGE7XG4vLyB9XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQW9HQTtBQUNPLFNBQVMsU0FBUyxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRTtBQUM3RCxJQUFJLFNBQVMsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLE9BQU8sS0FBSyxZQUFZLENBQUMsR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsVUFBVSxPQUFPLEVBQUUsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRTtBQUNoSCxJQUFJLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLE9BQU8sQ0FBQyxFQUFFLFVBQVUsT0FBTyxFQUFFLE1BQU0sRUFBRTtBQUMvRCxRQUFRLFNBQVMsU0FBUyxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7QUFDbkcsUUFBUSxTQUFTLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxF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RSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxTQUFTO0FBQ1gsRUFBRSxDQUFDO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLFNBQVMsU0FBUyxHQUFHO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLEVBQUUsSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLElBQUksTUFBTSxDQUFDLE9BQU8sS0FBSyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksS0FBSyxVQUFVLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtBQUN4SCxHQUFHLE9BQU8sSUFBSSxDQUFDO0FBQ2YsR0FBRztBQUNIO0FBQ0E7QUFDQSxFQUFFLElBQUksT0FBTyxTQUFTLEtBQUssV0FBVyxJQUFJLFNBQVMsQ0FBQyxTQUFTLElBQUksU0FBUyxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsRUFBRTtBQUNuSSxHQUFHLE9BQU8sS0FBSyxDQUFDO0FBQ2hCLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxFQUFFLE9BQU8sQ0FBQyxPQUFPLFFBQVEsS0FBSyxXQUFXLElBQUksUUFBUSxDQUFDLGVBQWUsSUFBSSxRQUFRLENBQUMsZUFBZSxDQUFDLEtBQUssSUFBSSxRQUFRLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0I7QUFDMUo7QUFDQSxJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsSUFBSSxNQUFNLENBQUMsT0FBTyxLQUFLLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxLQUFLLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUN0STtBQUNBO0FBQ0EsSUFBSSxPQUFPLFNBQVMsS0FBSyxXQUFXLElBQUksU0FBUyxDQUFDLFNBQVMsSUFBSSxTQUFTLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUMxSjtBQUNBLElBQUksT0FBTyxTQUFTLEtBQUssV0FBVyxJQUFJLFNBQVMsQ0FBQyxTQUFTLElBQUksU0FBUyxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDO0FBQzlILEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsU0FBUyxVQUFVLENBQUMsSUFBSSxFQUFFO0FBQzNCLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLEdBQUcsRUFBRTtBQUN2QyxHQUFHLElBQUksQ0FBQyxTQUFTO0FBQ2pCLElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLEdBQUcsR0FBRyxDQUFDO0FBQ2pDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUNWLElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLEdBQUcsR0FBRyxDQUFDO0FBQ2pDLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM1QztBQUNBLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7QUFDdkIsR0FBRyxPQUFPO0FBQ1YsR0FBRztBQUNIO0FBQ0EsRUFBRSxNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztBQUNuQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQ2hCLEVBQUUsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQ2hCLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsS0FBSyxJQUFJO0FBQzFDLEdBQUcsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFO0FBQ3ZCLElBQUksT0FBTztBQUNYLElBQUk7QUFDSixHQUFHLEtBQUssRUFBRSxDQUFDO0FBQ1gsR0FBRyxJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUU7QUFDdkI7QUFDQTtBQUNBLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQztBQUNsQixJQUFJO0FBQ0osR0FBRyxDQUFDLENBQUM7QUFDTDtBQUNBLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzNCLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsR0FBRyxLQUFLLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLFNBQVMsSUFBSSxDQUFDLFVBQVUsRUFBRTtBQUMzQixFQUFFLElBQUk7QUFDTixHQUFHLElBQUksVUFBVSxFQUFFO0FBQ25CLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ2pELElBQUksTUFBTTtBQUNWLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDeEMsSUFBSTtBQUNKLEdBQUcsQ0FBQyxPQUFPLEtBQUssRUFBRTtBQUNsQjtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsU0FBUyxJQUFJLEdBQUc7QUFDakIsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNSLEVBQUUsSUFBSTtBQUNOLEdBQUcsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3hDLEdBQUcsQ0FBQyxPQUFPLEtBQUssRUFBRTtBQUNsQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxFQUFFLElBQUksQ0FBQyxDQUFDLElBQUksT0FBTyxPQUFPLEtBQUssV0FBVyxJQUFJLEtBQUssSUFBSSxPQUFPLEVBQUU7QUFDaEUsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7QUFDekIsR0FBRztBQUNIO0FBQ0EsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNYLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLFNBQVMsWUFBWSxHQUFHO0FBQ3pCLEVBQUUsSUFBSTtBQUNOO0FBQ0E7QUFDQSxHQUFHLE9BQU8sWUFBWSxDQUFDO0FBQ3ZCLEdBQUcsQ0FBQyxPQUFPLEtBQUssRUFBRTtBQUNsQjtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7QUFDRjtBQUNBLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDbEM7QUFDQSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLEVBQUU7QUFDN0IsRUFBRSxJQUFJO0FBQ04sR0FBRyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDNUIsR0FBRyxDQUFDLE9BQU8sS0FBSyxFQUFFO0FBQ2xCLEdBQUcsT0FBTyw4QkFBOEIsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO0FBQ3pELEdBQUc7QUFDSCxFQUFFLENBQUM7QUFDSCxDQUFDLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUM5QjtBQUNBLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSx3QkFBd0IsU0FBUyxLQUFLLENBQUM7QUFDN0MsSUFBSSxXQUFXLEdBQUc7QUFDbEIsUUFBUSxLQUFLLENBQUMseUhBQXlILENBQUMsQ0FBQztBQUN6SSxRQUFRLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7QUFDMUMsS0FBSztBQUNMLENBQUM7QUFDRCxNQUFNLHdCQUF3QixTQUFTLEtBQUssQ0FBQztBQUM3QyxJQUFJLFdBQVcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRTtBQUNuQyxRQUFRLEtBQUssQ0FBQyxDQUFDLGdDQUFnQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDakUsUUFBUSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO0FBQzFDLFFBQVEsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDdkIsUUFBUSxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQztBQUM1QixLQUFLO0FBQ0wsQ0FBQztBQUNELE1BQU0saUJBQWlCLFNBQVMsS0FBSyxDQUFDO0FBQ3RDLElBQUksV0FBVyxHQUFHO0FBQ2xCLFFBQVEsS0FBSyxDQUFDLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDO0FBQ3RDLFFBQVEsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztBQUMxQyxLQUFLO0FBQ0wsQ0FBQztBQUNELE1BQU0sb0JBQW9CLFNBQVMsS0FBSyxDQUFDO0FBQ3pDLElBQUksV0FBVyxDQUFDLFFBQVEsRUFBRTtBQUMxQixRQUFRLEtBQUssQ0FBQyxDQUFDLGdDQUFnQyxDQUFDLENBQUMsQ0FBQztBQUNsRCxRQUFRLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7QUFDMUMsUUFBUSxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztBQUNqQyxLQUFLO0FBQ0wsQ0FBQztBQUNELE1BQU0sYUFBYSxTQUFTLEtBQUssQ0FBQztBQUNsQyxJQUFJLFdBQVcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRTtBQUNuQyxRQUFRLEtBQUssQ0FBQyxDQUFDLDhCQUE4QixFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDL0QsUUFBUSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO0FBQzFDLFFBQVEsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDdkIsUUFBUSxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQztBQUM1QixLQUFLO0FBQ0wsQ0FBQztBQUNELE1BQU0sMEJBQTBCLFNBQVMsS0FBSyxDQUFDO0FBQy9DLElBQUksV0FBVyxHQUFHO0FBQ2xCLFFBQVEsS0FBSyxDQUFDLENBQUMsMERBQTBELENBQUMsQ0FBQyxDQUFDO0FBQzVFLFFBQVEsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztBQUMxQyxLQUFLO0FBQ0wsQ0FBQztBQUNELE1BQU0sa0JBQWtCLFNBQVMsS0FBSyxDQUFDO0FBQ3ZDLElBQUksV0FBVyxDQUFDLFVBQVUsR0FBRyxJQUFJLEVBQUU7QUFDbkMsUUFBUSxJQUFJLFVBQVUsRUFBRTtBQUN4QixZQUFZLEtBQUssQ0FBQyxDQUFDLEVBQUUsa0JBQWtCLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDekUsU0FBUztBQUNULGFBQWE7QUFDYixZQUFZLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNsRCxTQUFTO0FBQ1QsUUFBUSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO0FBQzFDLFFBQVEsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7QUFDckMsS0FBSztBQUNMLENBQUM7QUFDRCxrQkFBa0IsQ0FBQyxXQUFXLEdBQUcsQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0FBQzVFLE1BQU0sMkJBQTJCLFNBQVMsS0FBSyxDQUFDO0FBQ2hELElBQUksV0FBVyxDQUFDLGdCQUFnQixFQUFFO0FBQ2xDLFFBQVEsS0FBSyxDQUFDLENBQUMsNkNBQTZDLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEYsUUFBUSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO0FBQzFDLFFBQVEsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDO0FBQ2pELEtBQUs7QUFDTCxDQUFDO0FBQ0QsTUFBTSxnQkFBZ0IsU0FBUyxLQUFLLENBQUM7QUFDckMsSUFBSSxXQUFXLENBQUMsT0FBTyxFQUFFO0FBQ3pCLFFBQVEsS0FBSyxDQUFDLENBQUMsb0JBQW9CLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUMvQyxRQUFRLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7QUFDMUMsS0FBSztBQUNMLENBQUM7QUFDRCxNQUFNLGdCQUFnQixTQUFTLEtBQUssQ0FBQztBQUNyQyxJQUFJLFdBQVcsQ0FBQyxPQUFPLEVBQUU7QUFDekIsUUFBUSxLQUFLLENBQUMsQ0FBQyw2QkFBNkIsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3hELFFBQVEsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztBQUMxQyxLQUFLO0FBQ0wsQ0FBQztBQUNELE1BQU0saUJBQWlCLFNBQVMsS0FBSyxDQUFDO0FBQ3RDLElBQUksV0FBVyxDQUFDLE9BQU8sRUFBRTtBQUN6QixRQUFRLEtBQUssQ0FBQyxDQUFDLDZCQUE2QixDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDeEQsUUFBUSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO0FBQzFDLEtBQUs7QUFDTCxDQUFDO0FBQ0QsTUFBTSxxQkFBcUIsU0FBUyxLQUFLLENBQUM7QUFDMUMsSUFBSSxXQUFXLENBQUMsT0FBTyxFQUFFO0FBQ3pCLFFBQVEsS0FBSyxDQUFDLENBQUMsb0NBQW9DLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUMvRCxRQUFRLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7QUFDMUMsS0FBSztBQUNMLENBQUM7QUFDRCxNQUFNLDJCQUEyQixTQUFTLEtBQUssQ0FBQztBQUNoRCxJQUFJLFdBQVcsQ0FBQyxPQUFPLEVBQUU7QUFDekIsUUFBUSxLQUFLLENBQUMsQ0FBQyx5R0FBeUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3BJLFFBQVEsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztBQUMxQyxLQUFLO0FBQ0wsQ0FBQztBQUNELE1BQU0sMEJBQTBCLFNBQVMsS0FBSyxDQUFDO0FBQy9DLElBQUksV0FBVyxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUU7QUFDckMsUUFBUSxLQUFLLENBQUMsQ0FBQywrQ0FBK0MsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzFFLFFBQVEsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztBQUMxQyxRQUFRLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0FBQ3JDLEtBQUs7QUFDTCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxlQUFlLEdBQUc7QUFDeEIsSUFBSSxhQUFhO0FBQ2pCLElBQUksTUFBTTtBQUNWLElBQUksWUFBWTtBQUNoQixJQUFJLGNBQWM7QUFDbEIsSUFBSSxZQUFZO0FBQ2hCLElBQUksYUFBYTtBQUNqQixJQUFJLE9BQU87QUFDWCxDQUFDLENBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFlBQVksR0FBRztBQUN4QixJQUFJLE9BQU8sZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUM7QUFDbkQsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFNBQVMsbUJBQW1CLEdBQUc7QUFDL0IsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLEVBQUU7QUFDekIsUUFBUSxNQUFNLElBQUksd0JBQXdCLEVBQUUsQ0FBQztBQUM3QyxLQUFLO0FBQ0wsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxzQkFBc0IsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUU7QUFDMUQsSUFBSSxJQUFJLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQUUsTUFBTSxJQUFJLFNBQVMsQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0FBQ2pHLElBQUksSUFBSSxPQUFPLEtBQUssS0FBSyxVQUFVLEdBQUcsUUFBUSxLQUFLLEtBQUssSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsTUFBTSxJQUFJLFNBQVMsQ0FBQywwRUFBMEUsQ0FBQyxDQUFDO0FBQ3ZMLElBQUksT0FBTyxJQUFJLEtBQUssR0FBRyxHQUFHLENBQUMsR0FBRyxJQUFJLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNsRyxDQUFDO0FBQ0Q7QUFDQSxTQUFTLHNCQUFzQixDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUU7QUFDakUsSUFBSSxJQUFJLElBQUksS0FBSyxHQUFHLEVBQUUsTUFBTSxJQUFJLFNBQVMsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0FBQzVFLElBQUksSUFBSSxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxFQUFFLE1BQU0sSUFBSSxTQUFTLENBQUMsK0NBQStDLENBQUMsQ0FBQztBQUNqRyxJQUFJLElBQUksT0FBTyxLQUFLLEtBQUssVUFBVSxHQUFHLFFBQVEsS0FBSyxLQUFLLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLE1BQU0sSUFBSSxTQUFTLENBQUMseUVBQXlFLENBQUMsQ0FBQztBQUN0TCxJQUFJLE9BQU8sQ0FBQyxJQUFJLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUM7QUFDOUcsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsZ0JBQWdCLEdBQUc7QUFDNUIsRUFBRSxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztBQUNyQixFQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0FBQ2hCLENBQUM7QUFDRDtBQUNBLElBQUksZUFBZSxHQUFHLGdCQUFnQixDQUFDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxJQUFJLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRTtBQUM1QixFQUFFLE9BQU8sS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxJQUFJLEtBQUssS0FBSyxLQUFLLENBQUMsQ0FBQztBQUNqRSxDQUFDO0FBQ0Q7QUFDQSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7QUFDaEI7QUFDQSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxjQUFjLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRTtBQUNwQyxFQUFFLElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDNUIsRUFBRSxPQUFPLE1BQU0sRUFBRSxFQUFFO0FBQ25CLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFO0FBQ3JDLE1BQU0sT0FBTyxNQUFNLENBQUM7QUFDcEIsS0FBSztBQUNMLEdBQUc7QUFDSCxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDWixDQUFDO0FBQ0Q7QUFDQSxJQUFJLGFBQWEsR0FBRyxjQUFjLENBQUM7QUFDbkM7QUFDQSxJQUFJLGNBQWMsR0FBRyxhQUFhLENBQUM7QUFDbkM7QUFDQTtBQUNBLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7QUFDakM7QUFDQTtBQUNBLElBQUksTUFBTSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUM7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtBQUNoQyxFQUFFLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRO0FBQzFCLE1BQU0sS0FBSyxHQUFHLGNBQWMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDeEM7QUFDQSxFQUFFLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtBQUNqQixJQUFJLE9BQU8sS0FBSyxDQUFDO0FBQ2pCLEdBQUc7QUFDSCxFQUFFLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBQ2xDLEVBQUUsSUFBSSxLQUFLLElBQUksU0FBUyxFQUFFO0FBQzFCLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2YsR0FBRyxNQUFNO0FBQ1QsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDaEMsR0FBRztBQUNILEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQ2QsRUFBRSxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFDRDtBQUNBLElBQUksZ0JBQWdCLEdBQUcsaUJBQWlCLENBQUM7QUFDekM7QUFDQSxJQUFJLGNBQWMsR0FBRyxhQUFhLENBQUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGNBQWMsQ0FBQyxHQUFHLEVBQUU7QUFDN0IsRUFBRSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUTtBQUMxQixNQUFNLEtBQUssR0FBRyxjQUFjLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3hDO0FBQ0EsRUFBRSxPQUFPLEtBQUssR0FBRyxDQUFDLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoRCxDQUFDO0FBQ0Q7QUFDQSxJQUFJLGFBQWEsR0FBRyxjQUFjLENBQUM7QUFDbkM7QUFDQSxJQUFJLGNBQWMsR0FBRyxhQUFhLENBQUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGNBQWMsQ0FBQyxHQUFHLEVBQUU7QUFDN0IsRUFBRSxPQUFPLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ2pELENBQUM7QUFDRDtBQUNBLElBQUksYUFBYSxHQUFHLGNBQWMsQ0FBQztBQUNuQztBQUNBLElBQUksWUFBWSxHQUFHLGFBQWEsQ0FBQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxjQUFjLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRTtBQUNwQyxFQUFFLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRO0FBQzFCLE1BQU0sS0FBSyxHQUFHLFlBQVksQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDdEM7QUFDQSxFQUFFLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtBQUNqQixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQztBQUNoQixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUM1QixHQUFHLE1BQU07QUFDVCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7QUFDM0IsR0FBRztBQUNILEVBQUUsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBQ0Q7QUFDQSxJQUFJLGFBQWEsR0FBRyxjQUFjLENBQUM7QUFDbkM7QUFDQSxJQUFJLGNBQWMsR0FBRyxlQUFlO0FBQ3BDLElBQUksZUFBZSxHQUFHLGdCQUFnQjtBQUN0QyxJQUFJLFlBQVksR0FBRyxhQUFhO0FBQ2hDLElBQUksWUFBWSxHQUFHLGFBQWE7QUFDaEMsSUFBSSxZQUFZLEdBQUcsYUFBYSxDQUFDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFdBQVcsQ0FBQyxPQUFPLEVBQUU7QUFDOUIsRUFBRSxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDaEIsTUFBTSxNQUFNLEdBQUcsT0FBTyxJQUFJLElBQUksR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUNwRDtBQUNBLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2YsRUFBRSxPQUFPLEVBQUUsS0FBSyxHQUFHLE1BQU0sRUFBRTtBQUMzQixJQUFJLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMvQixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBLFdBQVcsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLGNBQWMsQ0FBQztBQUM3QyxXQUFXLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxHQUFHLGVBQWUsQ0FBQztBQUNsRCxXQUFXLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxZQUFZLENBQUM7QUFDekMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEdBQUcsWUFBWSxDQUFDO0FBQ3pDLFdBQVcsQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLFlBQVksQ0FBQztBQUN6QztBQUNBLElBQUksVUFBVSxHQUFHLFdBQVcsQ0FBQztBQUM3QjtBQUNBLElBQUksV0FBVyxHQUFHLFVBQVUsQ0FBQztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxZQUFZLEdBQUc7QUFDeEIsRUFBRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksV0FBVyxDQUFDO0FBQ2xDLEVBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7QUFDaEIsQ0FBQztBQUNEO0FBQ0EsSUFBSSxXQUFXLEdBQUcsWUFBWSxDQUFDO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGFBQWEsQ0FBQyxHQUFHLEVBQUU7QUFDNUIsRUFBRSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUTtBQUMxQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbkM7QUFDQSxFQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztBQUN4QixFQUFFLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFDRDtBQUNBLElBQUksWUFBWSxHQUFHLGFBQWEsQ0FBQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxVQUFVLENBQUMsR0FBRyxFQUFFO0FBQ3pCLEVBQUUsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoQyxDQUFDO0FBQ0Q7QUFDQSxJQUFJLFNBQVMsR0FBRyxVQUFVLENBQUM7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsVUFBVSxDQUFDLEdBQUcsRUFBRTtBQUN6QixFQUFFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDaEMsQ0FBQztBQUNEO0FBQ0EsSUFBSSxTQUFTLEdBQUcsVUFBVSxDQUFDO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLElBQUksWUFBWSxHQUFHLE9BQU8sY0FBYyxJQUFJLFFBQVEsSUFBSSxjQUFjLElBQUksY0FBYyxDQUFDLE1BQU0sS0FBSyxNQUFNLElBQUksY0FBYyxDQUFDO0FBQzdIO0FBQ0EsSUFBSSxXQUFXLEdBQUcsWUFBWSxDQUFDO0FBQy9CO0FBQ0EsSUFBSSxVQUFVLEdBQUcsV0FBVyxDQUFDO0FBQzdCO0FBQ0E7QUFDQSxJQUFJLFFBQVEsR0FBRyxPQUFPLElBQUksSUFBSSxRQUFRLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssTUFBTSxJQUFJLElBQUksQ0FBQztBQUNqRjtBQUNBO0FBQ0EsSUFBSSxNQUFNLEdBQUcsVUFBVSxJQUFJLFFBQVEsSUFBSSxRQUFRLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQztBQUNqRTtBQUNBLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQztBQUNuQjtBQUNBLElBQUksT0FBTyxDQUFDO0FBQ1osSUFBSSxrQkFBa0IsQ0FBQztBQUN2QjtBQUNBLFNBQVMsY0FBYyxJQUFJO0FBQzNCLENBQUMsSUFBSSxrQkFBa0IsRUFBRSxPQUFPLE9BQU8sQ0FBQztBQUN4QyxDQUFDLGtCQUFrQixHQUFHLENBQUMsQ0FBQztBQUN4QixDQUFDLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQztBQUNsQjtBQUNBO0FBQ0EsQ0FBQyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQzFCO0FBQ0EsQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO0FBQ2xCLENBQUMsT0FBTyxPQUFPLENBQUM7QUFDaEIsQ0FBQztBQUNEO0FBQ0EsSUFBSSxRQUFRLEdBQUcsY0FBYyxFQUFFLENBQUM7QUFDaEM7QUFDQTtBQUNBLElBQUksYUFBYSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7QUFDckM7QUFDQTtBQUNBLElBQUksZ0JBQWdCLEdBQUcsYUFBYSxDQUFDLGNBQWMsQ0FBQztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLHNCQUFzQixHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUM7QUFDcEQ7QUFDQTtBQUNBLElBQUksZ0JBQWdCLEdBQUcsUUFBUSxHQUFHLFFBQVEsQ0FBQyxXQUFXLEdBQUcsU0FBUyxDQUFDO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFdBQVcsQ0FBQyxLQUFLLEVBQUU7QUFDNUIsRUFBRSxJQUFJLEtBQUssR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDO0FBQzVELE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3BDO0FBQ0EsRUFBRSxJQUFJO0FBQ04sSUFBSSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxTQUFTLENBQUM7QUFDeEMsSUFBSSxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUM7QUFDeEIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUU7QUFDaEI7QUFDQSxFQUFFLElBQUksTUFBTSxHQUFHLHNCQUFzQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsRCxFQUFFLElBQUksUUFBUSxFQUFFO0FBQ2hCLElBQUksSUFBSSxLQUFLLEVBQUU7QUFDZixNQUFNLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNwQyxLQUFLLE1BQU07QUFDWCxNQUFNLE9BQU8sS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDckMsS0FBSztBQUNMLEdBQUc7QUFDSCxFQUFFLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFDRDtBQUNBLElBQUksVUFBVSxHQUFHLFdBQVcsQ0FBQztBQUM3QjtBQUNBO0FBQ0E7QUFDQSxJQUFJLGFBQWEsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksb0JBQW9CLEdBQUcsYUFBYSxDQUFDLFFBQVEsQ0FBQztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUU7QUFDakMsRUFBRSxPQUFPLG9CQUFvQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMxQyxDQUFDO0FBQ0Q7QUFDQSxJQUFJLGVBQWUsR0FBRyxnQkFBZ0IsQ0FBQztBQUN2QztBQUNBLElBQUksUUFBUSxHQUFHLGNBQWMsRUFBRTtBQUMvQixJQUFJLFNBQVMsR0FBRyxVQUFVO0FBQzFCLElBQUksY0FBYyxHQUFHLGVBQWUsQ0FBQztBQUNyQztBQUNBO0FBQ0EsSUFBSSxPQUFPLEdBQUcsZUFBZTtBQUM3QixJQUFJLFlBQVksR0FBRyxvQkFBb0IsQ0FBQztBQUN4QztBQUNBO0FBQ0EsSUFBSSxjQUFjLEdBQUcsUUFBUSxHQUFHLFFBQVEsQ0FBQyxXQUFXLEdBQUcsU0FBUyxDQUFDO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFlBQVksQ0FBQyxLQUFLLEVBQUU7QUFDN0IsRUFBRSxJQUFJLEtBQUssSUFBSSxJQUFJLEVBQUU7QUFDckIsSUFBSSxPQUFPLEtBQUssS0FBSyxTQUFTLEdBQUcsWUFBWSxHQUFHLE9BQU8sQ0FBQztBQUN4RCxHQUFHO0FBQ0gsRUFBRSxPQUFPLENBQUMsY0FBYyxJQUFJLGNBQWMsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQzNELE1BQU0sU0FBUyxDQUFDLEtBQUssQ0FBQztBQUN0QixNQUFNLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM1QixDQUFDO0FBQ0Q7QUFDQSxJQUFJLFdBQVcsR0FBRyxZQUFZLENBQUM7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxVQUFVLENBQUMsS0FBSyxFQUFFO0FBQzNCLEVBQUUsSUFBSSxJQUFJLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDMUIsRUFBRSxPQUFPLEtBQUssSUFBSSxJQUFJLEtBQUssSUFBSSxJQUFJLFFBQVEsSUFBSSxJQUFJLElBQUksVUFBVSxDQUFDLENBQUM7QUFDbkUsQ0FBQztBQUNEO0FBQ0EsSUFBSSxVQUFVLEdBQUcsVUFBVSxDQUFDO0FBQzVCO0FBQ0EsSUFBSSxZQUFZLEdBQUcsV0FBVztBQUM5QixJQUFJLFVBQVUsR0FBRyxVQUFVLENBQUM7QUFDNUI7QUFDQTtBQUNBLElBQUksUUFBUSxHQUFHLHdCQUF3QjtBQUN2QyxJQUFJLFNBQVMsR0FBRyxtQkFBbUI7QUFDbkMsSUFBSSxRQUFRLEdBQUcsNEJBQTRCO0FBQzNDLElBQUksUUFBUSxHQUFHLGdCQUFnQixDQUFDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsWUFBWSxDQUFDLEtBQUssRUFBRTtBQUM3QixFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDMUIsSUFBSSxPQUFPLEtBQUssQ0FBQztBQUNqQixHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUUsSUFBSSxHQUFHLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2hDLEVBQUUsT0FBTyxHQUFHLElBQUksU0FBUyxJQUFJLEdBQUcsSUFBSSxRQUFRLElBQUksR0FBRyxJQUFJLFFBQVEsSUFBSSxHQUFHLElBQUksUUFBUSxDQUFDO0FBQ25GLENBQUM7QUFDRDtBQUNBLElBQUksWUFBWSxHQUFHLFlBQVksQ0FBQztBQUNoQztBQUNBLElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQztBQUNuQjtBQUNBO0FBQ0EsSUFBSSxZQUFZLEdBQUcsTUFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDaEQ7QUFDQSxJQUFJLFdBQVcsR0FBRyxZQUFZLENBQUM7QUFDL0I7QUFDQSxJQUFJLFVBQVUsR0FBRyxXQUFXLENBQUM7QUFDN0I7QUFDQTtBQUNBLElBQUksVUFBVSxJQUFJLFdBQVc7QUFDN0IsRUFBRSxJQUFJLEdBQUcsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxVQUFVLENBQUMsSUFBSSxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzNGLEVBQUUsT0FBTyxHQUFHLElBQUksZ0JBQWdCLEdBQUcsR0FBRyxJQUFJLEVBQUUsQ0FBQztBQUM3QyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsVUFBVSxDQUFDLElBQUksRUFBRTtBQUMxQixFQUFFLE9BQU8sQ0FBQyxDQUFDLFVBQVUsS0FBSyxVQUFVLElBQUksSUFBSSxDQUFDLENBQUM7QUFDOUMsQ0FBQztBQUNEO0FBQ0EsSUFBSSxTQUFTLEdBQUcsVUFBVSxDQUFDO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLElBQUksV0FBVyxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUM7QUFDckM7QUFDQTtBQUNBLElBQUksY0FBYyxHQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsVUFBVSxDQUFDLElBQUksRUFBRTtBQUMxQixFQUFFLElBQUksSUFBSSxJQUFJLElBQUksRUFBRTtBQUNwQixJQUFJLElBQUk7QUFDUixNQUFNLE9BQU8sY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN2QyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRTtBQUNsQixJQUFJLElBQUk7QUFDUixNQUFNLFFBQVEsSUFBSSxHQUFHLEVBQUUsRUFBRTtBQUN6QixLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRTtBQUNsQixHQUFHO0FBQ0gsRUFBRSxPQUFPLEVBQUUsQ0FBQztBQUNaLENBQUM7QUFDRDtBQUNBLElBQUksU0FBUyxHQUFHLFVBQVUsQ0FBQztBQUMzQjtBQUNBLElBQUksWUFBWSxHQUFHLFlBQVk7QUFDL0IsSUFBSSxRQUFRLEdBQUcsU0FBUztBQUN4QixJQUFJLFVBQVUsR0FBRyxVQUFVO0FBQzNCLElBQUksVUFBVSxHQUFHLFNBQVMsQ0FBQztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxZQUFZLEdBQUcscUJBQXFCLENBQUM7QUFDekM7QUFDQTtBQUNBLElBQUksWUFBWSxHQUFHLDZCQUE2QixDQUFDO0FBQ2pEO0FBQ0E7QUFDQSxJQUFJLFdBQVcsR0FBRyxRQUFRLENBQUMsU0FBUztBQUNwQyxJQUFJLGFBQWEsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDO0FBQ3JDO0FBQ0E7QUFDQSxJQUFJLGNBQWMsR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDO0FBQzFDO0FBQ0E7QUFDQSxJQUFJLGdCQUFnQixHQUFHLGFBQWEsQ0FBQyxjQUFjLENBQUM7QUFDcEQ7QUFDQTtBQUNBLElBQUksVUFBVSxHQUFHLE1BQU0sQ0FBQyxHQUFHO0FBQzNCLEVBQUUsY0FBYyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDO0FBQ3JFLEdBQUcsT0FBTyxDQUFDLHdEQUF3RCxFQUFFLE9BQU8sQ0FBQyxHQUFHLEdBQUc7QUFDbkYsQ0FBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxjQUFjLENBQUMsS0FBSyxFQUFFO0FBQy9CLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDN0MsSUFBSSxPQUFPLEtBQUssQ0FBQztBQUNqQixHQUFHO0FBQ0gsRUFBRSxJQUFJLE9BQU8sR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLEdBQUcsVUFBVSxHQUFHLFlBQVksQ0FBQztBQUNoRSxFQUFFLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUN6QyxDQUFDO0FBQ0Q7QUFDQSxJQUFJLGFBQWEsR0FBRyxjQUFjLENBQUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFVBQVUsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO0FBQ2pDLEVBQUUsT0FBTyxNQUFNLElBQUksSUFBSSxHQUFHLFNBQVMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbEQsQ0FBQztBQUNEO0FBQ0EsSUFBSSxTQUFTLEdBQUcsVUFBVSxDQUFDO0FBQzNCO0FBQ0EsSUFBSSxZQUFZLEdBQUcsYUFBYTtBQUNoQyxJQUFJLFFBQVEsR0FBRyxTQUFTLENBQUM7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxXQUFXLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtBQUNsQyxFQUFFLElBQUksS0FBSyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDcEMsRUFBRSxPQUFPLFlBQVksQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLEdBQUcsU0FBUyxDQUFDO0FBQ2pELENBQUM7QUFDRDtBQUNBLElBQUksVUFBVSxHQUFHLFdBQVcsQ0FBQztBQUM3QjtBQUNBLElBQUksV0FBVyxHQUFHLFVBQVU7QUFDNUIsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDO0FBQ25CO0FBQ0E7QUFDQSxJQUFJLEtBQUssR0FBRyxXQUFXLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3ZDO0FBQ0EsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDO0FBQ2pCO0FBQ0EsSUFBSSxXQUFXLEdBQUcsVUFBVSxDQUFDO0FBQzdCO0FBQ0E7QUFDQSxJQUFJLGNBQWMsR0FBRyxXQUFXLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ25EO0FBQ0EsSUFBSSxhQUFhLEdBQUcsY0FBYyxDQUFDO0FBQ25DO0FBQ0EsSUFBSSxjQUFjLEdBQUcsYUFBYSxDQUFDO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFdBQVcsR0FBRztBQUN2QixFQUFFLElBQUksQ0FBQyxRQUFRLEdBQUcsY0FBYyxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDN0QsRUFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztBQUNoQixDQUFDO0FBQ0Q7QUFDQSxJQUFJLFVBQVUsR0FBRyxXQUFXLENBQUM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxZQUFZLENBQUMsR0FBRyxFQUFFO0FBQzNCLEVBQUUsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDMUQsRUFBRSxJQUFJLENBQUMsSUFBSSxJQUFJLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzlCLEVBQUUsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQUNEO0FBQ0EsSUFBSSxXQUFXLEdBQUcsWUFBWSxDQUFDO0FBQy9CO0FBQ0EsSUFBSSxjQUFjLEdBQUcsYUFBYSxDQUFDO0FBQ25DO0FBQ0E7QUFDQSxJQUFJLGdCQUFnQixHQUFHLDJCQUEyQixDQUFDO0FBQ25EO0FBQ0E7QUFDQSxJQUFJLGFBQWEsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDO0FBQ3JDO0FBQ0E7QUFDQSxJQUFJLGdCQUFnQixHQUFHLGFBQWEsQ0FBQyxjQUFjLENBQUM7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFNBQVMsQ0FBQyxHQUFHLEVBQUU7QUFDeEIsRUFBRSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQzNCLEVBQUUsSUFBSSxjQUFjLEVBQUU7QUFDdEIsSUFBSSxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDM0IsSUFBSSxPQUFPLE1BQU0sS0FBSyxnQkFBZ0IsR0FBRyxTQUFTLEdBQUcsTUFBTSxDQUFDO0FBQzVELEdBQUc7QUFDSCxFQUFFLE9BQU8sZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsU0FBUyxDQUFDO0FBQ2xFLENBQUM7QUFDRDtBQUNBLElBQUksUUFBUSxHQUFHLFNBQVMsQ0FBQztBQUN6QjtBQUNBLElBQUksY0FBYyxHQUFHLGFBQWEsQ0FBQztBQUNuQztBQUNBO0FBQ0EsSUFBSSxhQUFhLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQztBQUNyQztBQUNBO0FBQ0EsSUFBSSxnQkFBZ0IsR0FBRyxhQUFhLENBQUMsY0FBYyxDQUFDO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxTQUFTLENBQUMsR0FBRyxFQUFFO0FBQ3hCLEVBQUUsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUMzQixFQUFFLE9BQU8sY0FBYyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxTQUFTLElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN2RixDQUFDO0FBQ0Q7QUFDQSxJQUFJLFFBQVEsR0FBRyxTQUFTLENBQUM7QUFDekI7QUFDQSxJQUFJLFlBQVksR0FBRyxhQUFhLENBQUM7QUFDakM7QUFDQTtBQUNBLElBQUksY0FBYyxHQUFHLDJCQUEyQixDQUFDO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFNBQVMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFO0FBQy9CLEVBQUUsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUMzQixFQUFFLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3JDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsWUFBWSxJQUFJLEtBQUssS0FBSyxTQUFTLElBQUksY0FBYyxHQUFHLEtBQUssQ0FBQztBQUM3RSxFQUFFLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUNEO0FBQ0EsSUFBSSxRQUFRLEdBQUcsU0FBUyxDQUFDO0FBQ3pCO0FBQ0EsSUFBSSxTQUFTLEdBQUcsVUFBVTtBQUMxQixJQUFJLFVBQVUsR0FBRyxXQUFXO0FBQzVCLElBQUksT0FBTyxHQUFHLFFBQVE7QUFDdEIsSUFBSSxPQUFPLEdBQUcsUUFBUTtBQUN0QixJQUFJLE9BQU8sR0FBRyxRQUFRLENBQUM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsTUFBTSxDQUFDLE9BQU8sRUFBRTtBQUN6QixFQUFFLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztBQUNoQixNQUFNLE1BQU0sR0FBRyxPQUFPLElBQUksSUFBSSxHQUFHLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO0FBQ3BEO0FBQ0EsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDZixFQUFFLE9BQU8sRUFBRSxLQUFLLEdBQUcsTUFBTSxFQUFFO0FBQzNCLElBQUksSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQy9CLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0EsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDO0FBQ25DLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsVUFBVSxDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQztBQUMvQixNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUM7QUFDL0IsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDO0FBQy9CO0FBQ0EsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDO0FBQ25CO0FBQ0EsSUFBSSxJQUFJLEdBQUcsS0FBSztBQUNoQixJQUFJLFdBQVcsR0FBRyxVQUFVO0FBQzVCLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQztBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxlQUFlLEdBQUc7QUFDM0IsRUFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztBQUNoQixFQUFFLElBQUksQ0FBQyxRQUFRLEdBQUc7QUFDbEIsSUFBSSxNQUFNLEVBQUUsSUFBSSxJQUFJO0FBQ3BCLElBQUksS0FBSyxFQUFFLEtBQUssS0FBSyxJQUFJLFdBQVcsQ0FBQztBQUNyQyxJQUFJLFFBQVEsRUFBRSxJQUFJLElBQUk7QUFDdEIsR0FBRyxDQUFDO0FBQ0osQ0FBQztBQUNEO0FBQ0EsSUFBSSxjQUFjLEdBQUcsZUFBZSxDQUFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsV0FBVyxDQUFDLEtBQUssRUFBRTtBQUM1QixFQUFFLElBQUksSUFBSSxHQUFHLE9BQU8sS0FBSyxDQUFDO0FBQzFCLEVBQUUsT0FBTyxDQUFDLElBQUksSUFBSSxRQUFRLElBQUksSUFBSSxJQUFJLFFBQVEsSUFBSSxJQUFJLElBQUksUUFBUSxJQUFJLElBQUksSUFBSSxTQUFTO0FBQ3ZGLE9BQU8sS0FBSyxLQUFLLFdBQVc7QUFDNUIsT0FBTyxLQUFLLEtBQUssSUFBSSxDQUFDLENBQUM7QUFDdkIsQ0FBQztBQUNEO0FBQ0EsSUFBSSxVQUFVLEdBQUcsV0FBVyxDQUFDO0FBQzdCO0FBQ0EsSUFBSSxTQUFTLEdBQUcsVUFBVSxDQUFDO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsWUFBWSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUU7QUFDaEMsRUFBRSxJQUFJLElBQUksR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO0FBQzFCLEVBQUUsT0FBTyxTQUFTLENBQUMsR0FBRyxDQUFDO0FBQ3ZCLE1BQU0sSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLFFBQVEsR0FBRyxRQUFRLEdBQUcsTUFBTSxDQUFDO0FBQ3RELE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQztBQUNmLENBQUM7QUFDRDtBQUNBLElBQUksV0FBVyxHQUFHLFlBQVksQ0FBQztBQUMvQjtBQUNBLElBQUksWUFBWSxHQUFHLFdBQVcsQ0FBQztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsZ0JBQWdCLENBQUMsR0FBRyxFQUFFO0FBQy9CLEVBQUUsSUFBSSxNQUFNLEdBQUcsWUFBWSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN0RCxFQUFFLElBQUksQ0FBQyxJQUFJLElBQUksTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDOUIsRUFBRSxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBQ0Q7QUFDQSxJQUFJLGVBQWUsR0FBRyxnQkFBZ0IsQ0FBQztBQUN2QztBQUNBLElBQUksWUFBWSxHQUFHLFdBQVcsQ0FBQztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsYUFBYSxDQUFDLEdBQUcsRUFBRTtBQUM1QixFQUFFLE9BQU8sWUFBWSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDMUMsQ0FBQztBQUNEO0FBQ0EsSUFBSSxZQUFZLEdBQUcsYUFBYSxDQUFDO0FBQ2pDO0FBQ0EsSUFBSSxZQUFZLEdBQUcsV0FBVyxDQUFDO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxhQUFhLENBQUMsR0FBRyxFQUFFO0FBQzVCLEVBQUUsT0FBTyxZQUFZLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMxQyxDQUFDO0FBQ0Q7QUFDQSxJQUFJLFlBQVksR0FBRyxhQUFhLENBQUM7QUFDakM7QUFDQSxJQUFJLFVBQVUsR0FBRyxXQUFXLENBQUM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsYUFBYSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUU7QUFDbkMsRUFBRSxJQUFJLElBQUksR0FBRyxVQUFVLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQztBQUNsQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQ3ZCO0FBQ0EsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN2QixFQUFFLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN6QyxFQUFFLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUNEO0FBQ0EsSUFBSSxZQUFZLEdBQUcsYUFBYSxDQUFDO0FBQ2pDO0FBQ0EsSUFBSSxhQUFhLEdBQUcsY0FBYztBQUNsQyxJQUFJLGNBQWMsR0FBRyxlQUFlO0FBQ3BDLElBQUksV0FBVyxHQUFHLFlBQVk7QUFDOUIsSUFBSSxXQUFXLEdBQUcsWUFBWTtBQUM5QixJQUFJLFdBQVcsR0FBRyxZQUFZLENBQUM7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsVUFBVSxDQUFDLE9BQU8sRUFBRTtBQUM3QixFQUFFLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztBQUNoQixNQUFNLE1BQU0sR0FBRyxPQUFPLElBQUksSUFBSSxHQUFHLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO0FBQ3BEO0FBQ0EsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDZixFQUFFLE9BQU8sRUFBRSxLQUFLLEdBQUcsTUFBTSxFQUFFO0FBQzNCLElBQUksSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQy9CLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0EsVUFBVSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsYUFBYSxDQUFDO0FBQzNDLFVBQVUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsY0FBYyxDQUFDO0FBQ2hELFVBQVUsQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLFdBQVcsQ0FBQztBQUN2QyxVQUFVLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxXQUFXLENBQUM7QUFDdkMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEdBQUcsV0FBVyxDQUFDO0FBQ3ZDO0FBQ0EsSUFBSSxTQUFTLEdBQUcsVUFBVSxDQUFDO0FBQzNCO0FBQ0EsSUFBSSxXQUFXLEdBQUcsVUFBVTtBQUM1QixJQUFJLEtBQUssR0FBRyxJQUFJO0FBQ2hCLElBQUksVUFBVSxHQUFHLFNBQVMsQ0FBQztBQUMzQjtBQUNBO0FBQ0EsSUFBSSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsVUFBVSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUU7QUFDaEMsRUFBRSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQzNCLEVBQUUsSUFBSSxJQUFJLFlBQVksV0FBVyxFQUFFO0FBQ25DLElBQUksSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUM5QixJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLE1BQU0sR0FBRyxnQkFBZ0IsR0FBRyxDQUFDLENBQUMsRUFBRTtBQUN6RCxNQUFNLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUMvQixNQUFNLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQzlCLE1BQU0sT0FBTyxJQUFJLENBQUM7QUFDbEIsS0FBSztBQUNMLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDakQsR0FBRztBQUNILEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDdkIsRUFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDeEIsRUFBRSxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFDRDtBQUNBLElBQUksU0FBUyxHQUFHLFVBQVUsQ0FBQztBQUMzQjtBQUNBLElBQUksU0FBUyxHQUFHLFVBQVU7QUFDMUIsSUFBSSxVQUFVLEdBQUcsV0FBVztBQUM1QixJQUFJLFdBQVcsR0FBRyxZQUFZO0FBQzlCLElBQUksUUFBUSxHQUFHLFNBQVM7QUFDeEIsSUFBSSxRQUFRLEdBQUcsU0FBUztBQUN4QixJQUFJLFFBQVEsR0FBRyxTQUFTLENBQUM7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsT0FBTyxDQUFDLE9BQU8sRUFBRTtBQUMxQixFQUFFLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDcEQsRUFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDeEIsQ0FBQztBQUNEO0FBQ0E7QUFDQSxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUM7QUFDckMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDMUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEdBQUcsUUFBUSxDQUFDO0FBQ2pDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQztBQUNqQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxRQUFRLENBQUM7QUFDakM7QUFDQSxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUM7QUFDckI7QUFDQSxJQUFJLFdBQVcsR0FBRyxVQUFVLENBQUM7QUFDN0I7QUFDQSxJQUFJLGdCQUFnQixJQUFJLFdBQVc7QUFDbkMsRUFBRSxJQUFJO0FBQ04sSUFBSSxJQUFJLElBQUksR0FBRyxXQUFXLENBQUMsTUFBTSxFQUFFLGdCQUFnQixDQUFDLENBQUM7QUFDckQsSUFBSSxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNyQixJQUFJLE9BQU8sSUFBSSxDQUFDO0FBQ2hCLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFO0FBQ2hCLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDTDtBQUNBLElBQUksZUFBZSxHQUFHLGdCQUFnQixDQUFDO0FBQ3ZDO0FBQ0EsSUFBSSxnQkFBZ0IsR0FBRyxlQUFlLENBQUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFO0FBQy9DLEVBQUUsSUFBSSxHQUFHLElBQUksV0FBVyxJQUFJLGdCQUFnQixFQUFFO0FBQzlDLElBQUksZ0JBQWdCLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtBQUNsQyxNQUFNLGNBQWMsRUFBRSxJQUFJO0FBQzFCLE1BQU0sWUFBWSxFQUFFLElBQUk7QUFDeEIsTUFBTSxPQUFPLEVBQUUsS0FBSztBQUNwQixNQUFNLFVBQVUsRUFBRSxJQUFJO0FBQ3RCLEtBQUssQ0FBQyxDQUFDO0FBQ1AsR0FBRyxNQUFNO0FBQ1QsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO0FBQ3hCLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQSxJQUFJLGdCQUFnQixHQUFHLGlCQUFpQixDQUFDO0FBQ3pDO0FBQ0EsSUFBSSxpQkFBaUIsR0FBRyxnQkFBZ0I7QUFDeEMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxrQkFBa0IsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRTtBQUNoRCxFQUFFLElBQUksQ0FBQyxLQUFLLEtBQUssU0FBUyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUM7QUFDdkQsT0FBTyxLQUFLLEtBQUssU0FBUyxJQUFJLEVBQUUsR0FBRyxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUU7QUFDakQsSUFBSSxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzFDLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQSxJQUFJLGlCQUFpQixHQUFHLGtCQUFrQixDQUFDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsZUFBZSxDQUFDLFNBQVMsRUFBRTtBQUNwQyxFQUFFLE9BQU8sU0FBUyxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRTtBQUM5QyxJQUFJLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztBQUNsQixRQUFRLFFBQVEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0FBQ2pDLFFBQVEsS0FBSyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7QUFDaEMsUUFBUSxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztBQUM5QjtBQUNBLElBQUksT0FBTyxNQUFNLEVBQUUsRUFBRTtBQUNyQixNQUFNLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxTQUFTLEdBQUcsTUFBTSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDcEQsTUFBTSxJQUFJLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLFFBQVEsQ0FBQyxLQUFLLEtBQUssRUFBRTtBQUM1RCxRQUFRLE1BQU07QUFDZCxPQUFPO0FBQ1AsS0FBSztBQUNMLElBQUksT0FBTyxNQUFNLENBQUM7QUFDbEIsR0FBRyxDQUFDO0FBQ0osQ0FBQztBQUNEO0FBQ0EsSUFBSSxjQUFjLEdBQUcsZUFBZSxDQUFDO0FBQ3JDO0FBQ0EsSUFBSSxhQUFhLEdBQUcsY0FBYyxDQUFDO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksU0FBUyxHQUFHLGFBQWEsRUFBRSxDQUFDO0FBQ2hDO0FBQ0EsSUFBSSxRQUFRLEdBQUcsU0FBUyxDQUFDO0FBQ3pCO0FBQ0EsSUFBSSxZQUFZLEdBQUcsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDakM7QUFDQSxDQUFDLFVBQVUsTUFBTSxFQUFFLE9BQU8sRUFBRTtBQUM1QixDQUFDLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQztBQUNsQjtBQUNBO0FBQ0EsQ0FBQyxJQUFJLFdBQVcsR0FBRyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxJQUFJLE9BQU8sQ0FBQztBQUMzRDtBQUNBO0FBQ0EsQ0FBQyxJQUFJLFVBQVUsR0FBRyxXQUFXLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxJQUFJLE1BQU0sQ0FBQztBQUM5RjtBQUNBO0FBQ0EsQ0FBQyxJQUFJLGFBQWEsR0FBRyxVQUFVLElBQUksVUFBVSxDQUFDLE9BQU8sS0FBSyxXQUFXLENBQUM7QUFDdEU7QUFDQTtBQUNBLENBQUMsSUFBSSxNQUFNLEdBQUcsYUFBYSxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUztBQUNyRCxLQUFLLFdBQVcsR0FBRyxNQUFNLEdBQUcsTUFBTSxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUM7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxTQUFTLFdBQVcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFO0FBQ3RDLEdBQUcsSUFBSSxNQUFNLEVBQUU7QUFDZixLQUFLLE9BQU8sTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQzNCLElBQUk7QUFDSixHQUFHLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNO0FBQzdCLE9BQU8sTUFBTSxHQUFHLFdBQVcsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ25GO0FBQ0EsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3ZCLEdBQUcsT0FBTyxNQUFNLENBQUM7QUFDakIsRUFBRTtBQUNGO0FBQ0EsQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLFdBQVcsQ0FBQztBQUM5QixDQUFDLEVBQUUsWUFBWSxFQUFFLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUN4QztBQUNBLElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQztBQUNuQjtBQUNBO0FBQ0EsSUFBSSxZQUFZLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQztBQUNyQztBQUNBLElBQUksV0FBVyxHQUFHLFlBQVksQ0FBQztBQUMvQjtBQUNBLElBQUksWUFBWSxHQUFHLFdBQVcsQ0FBQztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUU7QUFDekMsRUFBRSxJQUFJLE1BQU0sR0FBRyxJQUFJLFdBQVcsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ25FLEVBQUUsSUFBSSxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7QUFDOUQsRUFBRSxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBQ0Q7QUFDQSxJQUFJLGlCQUFpQixHQUFHLGtCQUFrQixDQUFDO0FBQzNDO0FBQ0EsSUFBSSxrQkFBa0IsR0FBRyxpQkFBaUIsQ0FBQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUU7QUFDL0MsRUFBRSxJQUFJLE1BQU0sR0FBRyxNQUFNLEdBQUcsa0JBQWtCLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUM7QUFDbEYsRUFBRSxPQUFPLElBQUksVUFBVSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDdEYsQ0FBQztBQUNEO0FBQ0EsSUFBSSxnQkFBZ0IsR0FBRyxpQkFBaUIsQ0FBQztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsV0FBVyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUU7QUFDcEMsRUFBRSxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDaEIsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUM3QjtBQUNBLEVBQUUsS0FBSyxLQUFLLEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUNuQyxFQUFFLE9BQU8sRUFBRSxLQUFLLEdBQUcsTUFBTSxFQUFFO0FBQzNCLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNqQyxHQUFHO0FBQ0gsRUFBRSxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFDRDtBQUNBLElBQUksVUFBVSxHQUFHLFdBQVcsQ0FBQztBQUM3QjtBQUNBLElBQUksVUFBVSxHQUFHLFVBQVUsQ0FBQztBQUM1QjtBQUNBO0FBQ0EsSUFBSSxZQUFZLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLFlBQVksSUFBSSxXQUFXO0FBQy9CLEVBQUUsU0FBUyxNQUFNLEdBQUcsRUFBRTtBQUN0QixFQUFFLE9BQU8sU0FBUyxLQUFLLEVBQUU7QUFDekIsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQzVCLE1BQU0sT0FBTyxFQUFFLENBQUM7QUFDaEIsS0FBSztBQUNMLElBQUksSUFBSSxZQUFZLEVBQUU7QUFDdEIsTUFBTSxPQUFPLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNqQyxLQUFLO0FBQ0wsSUFBSSxNQUFNLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztBQUM3QixJQUFJLElBQUksTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDO0FBQzVCLElBQUksTUFBTSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7QUFDakMsSUFBSSxPQUFPLE1BQU0sQ0FBQztBQUNsQixHQUFHLENBQUM7QUFDSixDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ0w7QUFDQSxJQUFJLFdBQVcsR0FBRyxZQUFZLENBQUM7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFNBQVMsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFO0FBQ3BDLEVBQUUsT0FBTyxTQUFTLEdBQUcsRUFBRTtBQUN2QixJQUFJLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLEdBQUcsQ0FBQztBQUNKLENBQUM7QUFDRDtBQUNBLElBQUksUUFBUSxHQUFHLFNBQVMsQ0FBQztBQUN6QjtBQUNBLElBQUksU0FBUyxHQUFHLFFBQVEsQ0FBQztBQUN6QjtBQUNBO0FBQ0EsSUFBSSxjQUFjLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDOUQ7QUFDQSxJQUFJLGFBQWEsR0FBRyxjQUFjLENBQUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0EsSUFBSSxhQUFhLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxhQUFhLENBQUMsS0FBSyxFQUFFO0FBQzlCLEVBQUUsSUFBSSxJQUFJLEdBQUcsS0FBSyxJQUFJLEtBQUssQ0FBQyxXQUFXO0FBQ3ZDLE1BQU0sS0FBSyxHQUFHLENBQUMsT0FBTyxJQUFJLElBQUksVUFBVSxJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssYUFBYSxDQUFDO0FBQzdFO0FBQ0EsRUFBRSxPQUFPLEtBQUssS0FBSyxLQUFLLENBQUM7QUFDekIsQ0FBQztBQUNEO0FBQ0EsSUFBSSxZQUFZLEdBQUcsYUFBYSxDQUFDO0FBQ2pDO0FBQ0EsSUFBSSxZQUFZLEdBQUcsV0FBVztBQUM5QixJQUFJLGNBQWMsR0FBRyxhQUFhO0FBQ2xDLElBQUksYUFBYSxHQUFHLFlBQVksQ0FBQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUU7QUFDbkMsRUFBRSxPQUFPLENBQUMsT0FBTyxNQUFNLENBQUMsV0FBVyxJQUFJLFVBQVUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUM7QUFDM0UsTUFBTSxZQUFZLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzFDLE1BQU0sRUFBRSxDQUFDO0FBQ1QsQ0FBQztBQUNEO0FBQ0EsSUFBSSxnQkFBZ0IsR0FBRyxpQkFBaUIsQ0FBQztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxjQUFjLENBQUMsS0FBSyxFQUFFO0FBQy9CLEVBQUUsT0FBTyxLQUFLLElBQUksSUFBSSxJQUFJLE9BQU8sS0FBSyxJQUFJLFFBQVEsQ0FBQztBQUNuRCxDQUFDO0FBQ0Q7QUFDQSxJQUFJLGNBQWMsR0FBRyxjQUFjLENBQUM7QUFDcEM7QUFDQSxJQUFJLFlBQVksR0FBRyxXQUFXO0FBQzlCLElBQUksY0FBYyxHQUFHLGNBQWMsQ0FBQztBQUNwQztBQUNBO0FBQ0EsSUFBSSxTQUFTLEdBQUcsb0JBQW9CLENBQUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsaUJBQWlCLENBQUMsS0FBSyxFQUFFO0FBQ2xDLEVBQUUsT0FBTyxjQUFjLENBQUMsS0FBSyxDQUFDLElBQUksWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLFNBQVMsQ0FBQztBQUNuRSxDQUFDO0FBQ0Q7QUFDQSxJQUFJLGdCQUFnQixHQUFHLGlCQUFpQixDQUFDO0FBQ3pDO0FBQ0EsSUFBSSxlQUFlLEdBQUcsZ0JBQWdCO0FBQ3RDLElBQUksY0FBYyxHQUFHLGNBQWMsQ0FBQztBQUNwQztBQUNBO0FBQ0EsSUFBSSxhQUFhLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQztBQUNyQztBQUNBO0FBQ0EsSUFBSSxnQkFBZ0IsR0FBRyxhQUFhLENBQUMsY0FBYyxDQUFDO0FBQ3BEO0FBQ0E7QUFDQSxJQUFJLHNCQUFzQixHQUFHLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksYUFBYSxHQUFHLGVBQWUsQ0FBQyxXQUFXLEVBQUUsT0FBTyxTQUFTLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxlQUFlLEdBQUcsU0FBUyxLQUFLLEVBQUU7QUFDNUcsRUFBRSxPQUFPLGNBQWMsQ0FBQyxLQUFLLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQztBQUN4RSxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNsRCxDQUFDLENBQUM7QUFDRjtBQUNBLElBQUksYUFBYSxHQUFHLGFBQWEsQ0FBQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7QUFDOUI7QUFDQSxJQUFJLFNBQVMsR0FBRyxTQUFTLENBQUM7QUFDMUI7QUFDQTtBQUNBO0FBQ0EsSUFBSSxrQkFBa0IsR0FBRyxnQkFBZ0IsQ0FBQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFVBQVUsQ0FBQyxLQUFLLEVBQUU7QUFDM0IsRUFBRSxPQUFPLE9BQU8sS0FBSyxJQUFJLFFBQVE7QUFDakMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLGtCQUFrQixDQUFDO0FBQ2hFLENBQUM7QUFDRDtBQUNBLElBQUksVUFBVSxHQUFHLFVBQVUsQ0FBQztBQUM1QjtBQUNBLElBQUksWUFBWSxHQUFHLFlBQVk7QUFDL0IsSUFBSSxVQUFVLEdBQUcsVUFBVSxDQUFDO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGFBQWEsQ0FBQyxLQUFLLEVBQUU7QUFDOUIsRUFBRSxPQUFPLEtBQUssSUFBSSxJQUFJLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMzRSxDQUFDO0FBQ0Q7QUFDQSxJQUFJLGFBQWEsR0FBRyxhQUFhLENBQUM7QUFDbEM7QUFDQSxJQUFJLGFBQWEsR0FBRyxhQUFhO0FBQ2pDLElBQUksY0FBYyxHQUFHLGNBQWMsQ0FBQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxtQkFBbUIsQ0FBQyxLQUFLLEVBQUU7QUFDcEMsRUFBRSxPQUFPLGNBQWMsQ0FBQyxLQUFLLENBQUMsSUFBSSxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdkQsQ0FBQztBQUNEO0FBQ0EsSUFBSSxtQkFBbUIsR0FBRyxtQkFBbUIsQ0FBQztBQUM5QztBQUNBLElBQUksVUFBVSxHQUFHLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsU0FBUyxHQUFHO0FBQ3JCLEVBQUUsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBQ0Q7QUFDQSxJQUFJLFdBQVcsR0FBRyxTQUFTLENBQUM7QUFDNUI7QUFDQSxDQUFDLFVBQVUsTUFBTSxFQUFFLE9BQU8sRUFBRTtBQUM1QixDQUFDLElBQUksSUFBSSxHQUFHLEtBQUs7QUFDakIsS0FBSyxTQUFTLEdBQUcsV0FBVyxDQUFDO0FBQzdCO0FBQ0E7QUFDQSxDQUFDLElBQUksV0FBVyxHQUFHLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUksT0FBTyxDQUFDO0FBQzNEO0FBQ0E7QUFDQSxDQUFDLElBQUksVUFBVSxHQUFHLFdBQVcsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLElBQUksTUFBTSxDQUFDO0FBQzlGO0FBQ0E7QUFDQSxDQUFDLElBQUksYUFBYSxHQUFHLFVBQVUsSUFBSSxVQUFVLENBQUMsT0FBTyxLQUFLLFdBQVcsQ0FBQztBQUN0RTtBQUNBO0FBQ0EsQ0FBQyxJQUFJLE1BQU0sR0FBRyxhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUM7QUFDdEQ7QUFDQTtBQUNBLENBQUMsSUFBSSxjQUFjLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsSUFBSSxRQUFRLEdBQUcsY0FBYyxJQUFJLFNBQVMsQ0FBQztBQUM1QztBQUNBLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUM7QUFDM0IsQ0FBQyxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDcEM7QUFDQSxJQUFJLFlBQVksR0FBRyxXQUFXO0FBQzlCLElBQUksY0FBYyxHQUFHLGFBQWE7QUFDbEMsSUFBSSxjQUFjLEdBQUcsY0FBYyxDQUFDO0FBQ3BDO0FBQ0E7QUFDQSxJQUFJLFdBQVcsR0FBRyxpQkFBaUIsQ0FBQztBQUNwQztBQUNBO0FBQ0EsSUFBSSxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVM7QUFDbEMsSUFBSSxhQUFhLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQztBQUNyQztBQUNBO0FBQ0EsSUFBSSxZQUFZLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQztBQUN0QztBQUNBO0FBQ0EsSUFBSSxnQkFBZ0IsR0FBRyxhQUFhLENBQUMsY0FBYyxDQUFDO0FBQ3BEO0FBQ0E7QUFDQSxJQUFJLGdCQUFnQixHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsZUFBZSxDQUFDLEtBQUssRUFBRTtBQUNoQyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLElBQUksWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLFdBQVcsRUFBRTtBQUNwRSxJQUFJLE9BQU8sS0FBSyxDQUFDO0FBQ2pCLEdBQUc7QUFDSCxFQUFFLElBQUksS0FBSyxHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNwQyxFQUFFLElBQUksS0FBSyxLQUFLLElBQUksRUFBRTtBQUN0QixJQUFJLE9BQU8sSUFBSSxDQUFDO0FBQ2hCLEdBQUc7QUFDSCxFQUFFLElBQUksSUFBSSxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsYUFBYSxDQUFDLElBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQztBQUM5RSxFQUFFLE9BQU8sT0FBTyxJQUFJLElBQUksVUFBVSxJQUFJLElBQUksWUFBWSxJQUFJO0FBQzFELElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQztBQUNoRCxDQUFDO0FBQ0Q7QUFDQSxJQUFJLGVBQWUsR0FBRyxlQUFlLENBQUM7QUFDdEM7QUFDQSxJQUFJLFlBQVksR0FBRyxXQUFXO0FBQzlCLElBQUksVUFBVSxHQUFHLFVBQVU7QUFDM0IsSUFBSSxjQUFjLEdBQUcsY0FBYyxDQUFDO0FBQ3BDO0FBQ0E7QUFDQSxJQUFJLFNBQVMsR0FBRyxvQkFBb0I7QUFDcEMsSUFBSSxVQUFVLEdBQUcsZ0JBQWdCO0FBQ2pDLElBQUksU0FBUyxHQUFHLGtCQUFrQjtBQUNsQyxJQUFJLFNBQVMsR0FBRyxlQUFlO0FBQy9CLElBQUksVUFBVSxHQUFHLGdCQUFnQjtBQUNqQyxJQUFJLFNBQVMsR0FBRyxtQkFBbUI7QUFDbkMsSUFBSSxRQUFRLEdBQUcsY0FBYztBQUM3QixJQUFJLFdBQVcsR0FBRyxpQkFBaUI7QUFDbkMsSUFBSSxXQUFXLEdBQUcsaUJBQWlCO0FBQ25DLElBQUksV0FBVyxHQUFHLGlCQUFpQjtBQUNuQyxJQUFJLFFBQVEsR0FBRyxjQUFjO0FBQzdCLElBQUksV0FBVyxHQUFHLGlCQUFpQjtBQUNuQyxJQUFJLFlBQVksR0FBRyxrQkFBa0IsQ0FBQztBQUN0QztBQUNBLElBQUksZ0JBQWdCLEdBQUcsc0JBQXNCO0FBQzdDLElBQUksYUFBYSxHQUFHLG1CQUFtQjtBQUN2QyxJQUFJLFlBQVksR0FBRyx1QkFBdUI7QUFDMUMsSUFBSSxZQUFZLEdBQUcsdUJBQXVCO0FBQzFDLElBQUksU0FBUyxHQUFHLG9CQUFvQjtBQUNwQyxJQUFJLFVBQVUsR0FBRyxxQkFBcUI7QUFDdEMsSUFBSSxVQUFVLEdBQUcscUJBQXFCO0FBQ3RDLElBQUksVUFBVSxHQUFHLHFCQUFxQjtBQUN0QyxJQUFJLGlCQUFpQixHQUFHLDRCQUE0QjtBQUNwRCxJQUFJLFdBQVcsR0FBRyxzQkFBc0I7QUFDeEMsSUFBSSxXQUFXLEdBQUcsc0JBQXNCLENBQUM7QUFDekM7QUFDQTtBQUNBLElBQUksY0FBYyxHQUFHLEVBQUUsQ0FBQztBQUN4QixjQUFjLENBQUMsWUFBWSxDQUFDLEdBQUcsY0FBYyxDQUFDLFlBQVksQ0FBQztBQUMzRCxjQUFjLENBQUMsU0FBUyxDQUFDLEdBQUcsY0FBYyxDQUFDLFVBQVUsQ0FBQztBQUN0RCxjQUFjLENBQUMsVUFBVSxDQUFDLEdBQUcsY0FBYyxDQUFDLFVBQVUsQ0FBQztBQUN2RCxjQUFjLENBQUMsaUJBQWlCLENBQUMsR0FBRyxjQUFjLENBQUMsV0FBVyxDQUFDO0FBQy9ELGNBQWMsQ0FBQyxXQUFXLENBQUMsR0FBRyxJQUFJLENBQUM7QUFDbkMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxVQUFVLENBQUM7QUFDdEQsY0FBYyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsY0FBYyxDQUFDLFNBQVMsQ0FBQztBQUM1RCxjQUFjLENBQUMsYUFBYSxDQUFDLEdBQUcsY0FBYyxDQUFDLFNBQVMsQ0FBQztBQUN6RCxjQUFjLENBQUMsVUFBVSxDQUFDLEdBQUcsY0FBYyxDQUFDLFNBQVMsQ0FBQztBQUN0RCxjQUFjLENBQUMsUUFBUSxDQUFDLEdBQUcsY0FBYyxDQUFDLFdBQVcsQ0FBQztBQUN0RCxjQUFjLENBQUMsV0FBVyxDQUFDLEdBQUcsY0FBYyxDQUFDLFdBQVcsQ0FBQztBQUN6RCxjQUFjLENBQUMsUUFBUSxDQUFDLEdBQUcsY0FBYyxDQUFDLFdBQVcsQ0FBQztBQUN0RCxjQUFjLENBQUMsWUFBWSxDQUFDLEdBQUcsS0FBSyxDQUFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGtCQUFrQixDQUFDLEtBQUssRUFBRTtBQUNuQyxFQUFFLE9BQU8sY0FBYyxDQUFDLEtBQUssQ0FBQztBQUM5QixJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxJQUFJLGlCQUFpQixHQUFHLGtCQUFrQixDQUFDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksVUFBVSxDQUFDO0FBQ2YsSUFBSSxxQkFBcUIsQ0FBQztBQUMxQjtBQUNBLFNBQVMsaUJBQWlCLElBQUk7QUFDOUIsQ0FBQyxJQUFJLHFCQUFxQixFQUFFLE9BQU8sVUFBVSxDQUFDO0FBQzlDLENBQUMscUJBQXFCLEdBQUcsQ0FBQyxDQUFDO0FBQzNCLENBQUMsU0FBUyxTQUFTLENBQUMsSUFBSSxFQUFFO0FBQzFCLEdBQUcsT0FBTyxTQUFTLEtBQUssRUFBRTtBQUMxQixLQUFLLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3hCLElBQUksQ0FBQztBQUNMLEVBQUU7QUFDRjtBQUNBLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQztBQUN4QixDQUFDLE9BQU8sVUFBVSxDQUFDO0FBQ25CLENBQUM7QUFDRDtBQUNBLElBQUksU0FBUyxHQUFHLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQzlCO0FBQ0EsQ0FBQyxVQUFVLE1BQU0sRUFBRSxPQUFPLEVBQUU7QUFDNUIsQ0FBQyxJQUFJLFVBQVUsR0FBRyxXQUFXLENBQUM7QUFDOUI7QUFDQTtBQUNBLENBQUMsSUFBSSxXQUFXLEdBQUcsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxPQUFPLENBQUM7QUFDM0Q7QUFDQTtBQUNBLENBQUMsSUFBSSxVQUFVLEdBQUcsV0FBVyxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsSUFBSSxNQUFNLENBQUM7QUFDOUY7QUFDQTtBQUNBLENBQUMsSUFBSSxhQUFhLEdBQUcsVUFBVSxJQUFJLFVBQVUsQ0FBQyxPQUFPLEtBQUssV0FBVyxDQUFDO0FBQ3RFO0FBQ0E7QUFDQSxDQUFDLElBQUksV0FBVyxHQUFHLGFBQWEsSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDO0FBQ3ZEO0FBQ0E7QUFDQSxDQUFDLElBQUksUUFBUSxJQUFJLFdBQVc7QUFDNUIsR0FBRyxJQUFJO0FBQ1A7QUFDQSxLQUFLLElBQUksS0FBSyxHQUFHLFVBQVUsSUFBSSxVQUFVLENBQUMsT0FBTyxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDO0FBQ3RGO0FBQ0EsS0FBSyxJQUFJLEtBQUssRUFBRTtBQUNoQixPQUFPLE9BQU8sS0FBSyxDQUFDO0FBQ3BCLE1BQU07QUFDTjtBQUNBO0FBQ0EsS0FBSyxPQUFPLFdBQVcsSUFBSSxXQUFXLENBQUMsT0FBTyxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDOUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUU7QUFDakIsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNOO0FBQ0EsQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQztBQUMzQixDQUFDLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUNsQztBQUNBLElBQUksZ0JBQWdCLEdBQUcsaUJBQWlCO0FBQ3hDLElBQUksV0FBVyxHQUFHLGlCQUFpQixFQUFFO0FBQ3JDLElBQUksVUFBVSxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUM7QUFDbkM7QUFDQTtBQUNBLElBQUksZ0JBQWdCLEdBQUcsVUFBVSxJQUFJLFVBQVUsQ0FBQyxZQUFZLENBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxjQUFjLEdBQUcsZ0JBQWdCLEdBQUcsV0FBVyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsZ0JBQWdCLENBQUM7QUFDekY7QUFDQSxJQUFJLGNBQWMsR0FBRyxjQUFjLENBQUM7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFNBQVMsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO0FBQ2hDLEVBQUUsSUFBSSxHQUFHLEtBQUssYUFBYSxJQUFJLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLFVBQVUsRUFBRTtBQUNsRSxJQUFJLE9BQU87QUFDWCxHQUFHO0FBQ0g7QUFDQSxFQUFFLElBQUksR0FBRyxJQUFJLFdBQVcsRUFBRTtBQUMxQixJQUFJLE9BQU87QUFDWCxHQUFHO0FBQ0g7QUFDQSxFQUFFLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3JCLENBQUM7QUFDRDtBQUNBLElBQUksUUFBUSxHQUFHLFNBQVMsQ0FBQztBQUN6QjtBQUNBLElBQUksaUJBQWlCLEdBQUcsZ0JBQWdCO0FBQ3hDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztBQUNoQjtBQUNBO0FBQ0EsSUFBSSxhQUFhLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQztBQUNyQztBQUNBO0FBQ0EsSUFBSSxnQkFBZ0IsR0FBRyxhQUFhLENBQUMsY0FBYyxDQUFDO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGFBQWEsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRTtBQUMzQyxFQUFFLElBQUksUUFBUSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM3QixFQUFFLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDcEUsT0FBTyxLQUFLLEtBQUssU0FBUyxJQUFJLEVBQUUsR0FBRyxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUU7QUFDakQsSUFBSSxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzFDLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQSxJQUFJLFlBQVksR0FBRyxhQUFhLENBQUM7QUFDakM7QUFDQSxJQUFJLGFBQWEsR0FBRyxZQUFZO0FBQ2hDLElBQUksaUJBQWlCLEdBQUcsZ0JBQWdCLENBQUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsWUFBWSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRTtBQUN6RCxFQUFFLElBQUksS0FBSyxHQUFHLENBQUMsTUFBTSxDQUFDO0FBQ3RCLEVBQUUsTUFBTSxLQUFLLE1BQU0sR0FBRyxFQUFFLENBQUMsQ0FBQztBQUMxQjtBQUNBLEVBQUUsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQ2hCLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDNUI7QUFDQSxFQUFFLE9BQU8sRUFBRSxLQUFLLEdBQUcsTUFBTSxFQUFFO0FBQzNCLElBQUksSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzNCO0FBQ0EsSUFBSSxJQUFJLFFBQVEsR0FBRyxVQUFVO0FBQzdCLFFBQVEsVUFBVSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUM7QUFDakUsUUFBUSxTQUFTLENBQUM7QUFDbEI7QUFDQSxJQUFJLElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtBQUNoQyxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDN0IsS0FBSztBQUNMLElBQUksSUFBSSxLQUFLLEVBQUU7QUFDZixNQUFNLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDL0MsS0FBSyxNQUFNO0FBQ1gsTUFBTSxhQUFhLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUMzQyxLQUFLO0FBQ0wsR0FBRztBQUNILEVBQUUsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQUNEO0FBQ0EsSUFBSSxXQUFXLEdBQUcsWUFBWSxDQUFDO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFdBQVcsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFO0FBQ2xDLEVBQUUsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQ2hCLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN4QjtBQUNBLEVBQUUsT0FBTyxFQUFFLEtBQUssR0FBRyxDQUFDLEVBQUU7QUFDdEIsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BDLEdBQUc7QUFDSCxFQUFFLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFDRDtBQUNBLElBQUksVUFBVSxHQUFHLFdBQVcsQ0FBQztBQUM3QjtBQUNBO0FBQ0E7QUFDQSxJQUFJLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDO0FBQ3hDO0FBQ0E7QUFDQSxJQUFJLFFBQVEsR0FBRyxrQkFBa0IsQ0FBQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFNBQVMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFO0FBQ2xDLEVBQUUsSUFBSSxJQUFJLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDMUIsRUFBRSxNQUFNLEdBQUcsTUFBTSxJQUFJLElBQUksR0FBRyxnQkFBZ0IsR0FBRyxNQUFNLENBQUM7QUFDdEQ7QUFDQSxFQUFFLE9BQU8sQ0FBQyxDQUFDLE1BQU07QUFDakIsS0FBSyxJQUFJLElBQUksUUFBUTtBQUNyQixPQUFPLElBQUksSUFBSSxRQUFRLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2pELFNBQVMsS0FBSyxHQUFHLENBQUMsQ0FBQyxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQztBQUN6RCxDQUFDO0FBQ0Q7QUFDQSxJQUFJLFFBQVEsR0FBRyxTQUFTLENBQUM7QUFDekI7QUFDQSxJQUFJLFNBQVMsR0FBRyxVQUFVO0FBQzFCLElBQUksYUFBYSxHQUFHLGFBQWE7QUFDakMsSUFBSSxTQUFTLEdBQUcsU0FBUztBQUN6QixJQUFJLFVBQVUsR0FBRyxVQUFVLENBQUMsT0FBTztBQUNuQyxJQUFJLFNBQVMsR0FBRyxRQUFRO0FBQ3hCLElBQUksY0FBYyxHQUFHLGNBQWMsQ0FBQztBQUNwQztBQUNBO0FBQ0EsSUFBSSxhQUFhLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQztBQUNyQztBQUNBO0FBQ0EsSUFBSSxnQkFBZ0IsR0FBRyxhQUFhLENBQUMsY0FBYyxDQUFDO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsZUFBZSxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7QUFDM0MsRUFBRSxJQUFJLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDO0FBQzlCLE1BQU0sS0FBSyxHQUFHLENBQUMsS0FBSyxJQUFJLGFBQWEsQ0FBQyxLQUFLLENBQUM7QUFDNUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxLQUFLLElBQUksQ0FBQyxLQUFLLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQztBQUNwRCxNQUFNLE1BQU0sR0FBRyxDQUFDLEtBQUssSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLE1BQU0sSUFBSSxjQUFjLENBQUMsS0FBSyxDQUFDO0FBQ25FLE1BQU0sV0FBVyxHQUFHLEtBQUssSUFBSSxLQUFLLElBQUksTUFBTSxJQUFJLE1BQU07QUFDdEQsTUFBTSxNQUFNLEdBQUcsV0FBVyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxHQUFHLEVBQUU7QUFDakUsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUM3QjtBQUNBLEVBQUUsS0FBSyxJQUFJLEdBQUcsSUFBSSxLQUFLLEVBQUU7QUFDekIsSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDO0FBQ3ZELFFBQVEsRUFBRSxXQUFXO0FBQ3JCO0FBQ0EsV0FBVyxHQUFHLElBQUksUUFBUTtBQUMxQjtBQUNBLFlBQVksTUFBTSxLQUFLLEdBQUcsSUFBSSxRQUFRLElBQUksR0FBRyxJQUFJLFFBQVEsQ0FBQyxDQUFDO0FBQzNEO0FBQ0EsWUFBWSxNQUFNLEtBQUssR0FBRyxJQUFJLFFBQVEsSUFBSSxHQUFHLElBQUksWUFBWSxJQUFJLEdBQUcsSUFBSSxZQUFZLENBQUMsQ0FBQztBQUN0RjtBQUNBLFdBQVcsU0FBUyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUM7QUFDakMsU0FBUyxDQUFDLEVBQUU7QUFDWixNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDdkIsS0FBSztBQUNMLEdBQUc7QUFDSCxFQUFFLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFDRDtBQUNBLElBQUksY0FBYyxHQUFHLGVBQWUsQ0FBQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxjQUFjLENBQUMsTUFBTSxFQUFFO0FBQ2hDLEVBQUUsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQ2xCLEVBQUUsSUFBSSxNQUFNLElBQUksSUFBSSxFQUFFO0FBQ3RCLElBQUksS0FBSyxJQUFJLEdBQUcsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUU7QUFDcEMsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZCLEtBQUs7QUFDTCxHQUFHO0FBQ0gsRUFBRSxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBQ0Q7QUFDQSxJQUFJLGFBQWEsR0FBRyxjQUFjLENBQUM7QUFDbkM7QUFDQSxJQUFJLFVBQVUsR0FBRyxVQUFVO0FBQzNCLElBQUksYUFBYSxHQUFHLFlBQVk7QUFDaEMsSUFBSSxZQUFZLEdBQUcsYUFBYSxDQUFDO0FBQ2pDO0FBQ0E7QUFDQSxJQUFJLGFBQWEsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDO0FBQ3JDO0FBQ0E7QUFDQSxJQUFJLGdCQUFnQixHQUFHLGFBQWEsQ0FBQyxjQUFjLENBQUM7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsWUFBWSxDQUFDLE1BQU0sRUFBRTtBQUM5QixFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUU7QUFDM0IsSUFBSSxPQUFPLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNoQyxHQUFHO0FBQ0gsRUFBRSxJQUFJLE9BQU8sR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDO0FBQ3JDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztBQUNsQjtBQUNBLEVBQUUsS0FBSyxJQUFJLEdBQUcsSUFBSSxNQUFNLEVBQUU7QUFDMUIsSUFBSSxJQUFJLEVBQUUsR0FBRyxJQUFJLGFBQWEsS0FBSyxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUNyRixNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDdkIsS0FBSztBQUNMLEdBQUc7QUFDSCxFQUFFLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFDRDtBQUNBLElBQUksV0FBVyxHQUFHLFlBQVksQ0FBQztBQUMvQjtBQUNBLElBQUksZUFBZSxHQUFHLGNBQWM7QUFDcEMsSUFBSSxVQUFVLEdBQUcsV0FBVztBQUM1QixJQUFJLGFBQWEsR0FBRyxhQUFhLENBQUM7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxRQUFRLENBQUMsTUFBTSxFQUFFO0FBQzFCLEVBQUUsT0FBTyxhQUFhLENBQUMsTUFBTSxDQUFDLEdBQUcsZUFBZSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDcEYsQ0FBQztBQUNEO0FBQ0EsSUFBSSxRQUFRLEdBQUcsUUFBUSxDQUFDO0FBQ3hCO0FBQ0EsSUFBSSxZQUFZLEdBQUcsV0FBVztBQUM5QixJQUFJLFFBQVEsR0FBRyxRQUFRLENBQUM7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGVBQWUsQ0FBQyxLQUFLLEVBQUU7QUFDaEMsRUFBRSxPQUFPLFlBQVksQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDOUMsQ0FBQztBQUNEO0FBQ0EsSUFBSSxlQUFlLEdBQUcsZUFBZSxDQUFDO0FBQ3RDO0FBQ0EsSUFBSSxrQkFBa0IsR0FBRyxpQkFBaUI7QUFDMUMsSUFBSSxhQUFhLEdBQUcsWUFBWSxDQUFDLE9BQU87QUFDeEMsSUFBSSxpQkFBaUIsR0FBRyxnQkFBZ0I7QUFDeEMsSUFBSSxXQUFXLEdBQUcsVUFBVTtBQUM1QixJQUFJLGlCQUFpQixHQUFHLGdCQUFnQjtBQUN4QyxJQUFJLGFBQWEsR0FBRyxhQUFhO0FBQ2pDLElBQUksU0FBUyxHQUFHLFNBQVM7QUFDekIsSUFBSSxpQkFBaUIsR0FBRyxtQkFBbUI7QUFDM0MsSUFBSSxVQUFVLEdBQUcsVUFBVSxDQUFDLE9BQU87QUFDbkMsSUFBSSxVQUFVLEdBQUcsWUFBWTtBQUM3QixJQUFJLFVBQVUsR0FBRyxVQUFVO0FBQzNCLElBQUksZUFBZSxHQUFHLGVBQWU7QUFDckMsSUFBSSxjQUFjLEdBQUcsY0FBYztBQUNuQyxJQUFJLFNBQVMsR0FBRyxRQUFRO0FBQ3hCLElBQUksYUFBYSxHQUFHLGVBQWUsQ0FBQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsZUFBZSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRTtBQUN0RixFQUFFLElBQUksUUFBUSxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDO0FBQ3ZDLE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDO0FBQ3ZDLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDcEM7QUFDQSxFQUFFLElBQUksT0FBTyxFQUFFO0FBQ2YsSUFBSSxrQkFBa0IsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzdDLElBQUksT0FBTztBQUNYLEdBQUc7QUFDSCxFQUFFLElBQUksUUFBUSxHQUFHLFVBQVU7QUFDM0IsTUFBTSxVQUFVLENBQUMsUUFBUSxFQUFFLFFBQVEsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLE1BQU0sRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDO0FBQ3ZFLE1BQU0sU0FBUyxDQUFDO0FBQ2hCO0FBQ0EsRUFBRSxJQUFJLFFBQVEsR0FBRyxRQUFRLEtBQUssU0FBUyxDQUFDO0FBQ3hDO0FBQ0EsRUFBRSxJQUFJLFFBQVEsRUFBRTtBQUNoQixJQUFJLElBQUksS0FBSyxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUM7QUFDbkMsUUFBUSxNQUFNLEdBQUcsQ0FBQyxLQUFLLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQztBQUMvQyxRQUFRLE9BQU8sR0FBRyxDQUFDLEtBQUssSUFBSSxDQUFDLE1BQU0sSUFBSSxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDaEU7QUFDQSxJQUFJLFFBQVEsR0FBRyxRQUFRLENBQUM7QUFDeEIsSUFBSSxJQUFJLEtBQUssSUFBSSxNQUFNLElBQUksT0FBTyxFQUFFO0FBQ3BDLE1BQU0sSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFDL0IsUUFBUSxRQUFRLEdBQUcsUUFBUSxDQUFDO0FBQzVCLE9BQU87QUFDUCxXQUFXLElBQUksaUJBQWlCLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFDNUMsUUFBUSxRQUFRLEdBQUcsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3pDLE9BQU87QUFDUCxXQUFXLElBQUksTUFBTSxFQUFFO0FBQ3ZCLFFBQVEsUUFBUSxHQUFHLEtBQUssQ0FBQztBQUN6QixRQUFRLFFBQVEsR0FBRyxhQUFhLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ2pELE9BQU87QUFDUCxXQUFXLElBQUksT0FBTyxFQUFFO0FBQ3hCLFFBQVEsUUFBUSxHQUFHLEtBQUssQ0FBQztBQUN6QixRQUFRLFFBQVEsR0FBRyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDckQsT0FBTztBQUNQLFdBQVc7QUFDWCxRQUFRLFFBQVEsR0FBRyxFQUFFLENBQUM7QUFDdEIsT0FBTztBQUNQLEtBQUs7QUFDTCxTQUFTLElBQUksZUFBZSxDQUFDLFFBQVEsQ0FBQyxJQUFJLGFBQWEsQ0FBQyxRQUFRLENBQUMsRUFBRTtBQUNuRSxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUM7QUFDMUIsTUFBTSxJQUFJLGFBQWEsQ0FBQyxRQUFRLENBQUMsRUFBRTtBQUNuQyxRQUFRLFFBQVEsR0FBRyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDM0MsT0FBTztBQUNQLFdBQVcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFDOUQsUUFBUSxRQUFRLEdBQUcsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDL0MsT0FBTztBQUNQLEtBQUs7QUFDTCxTQUFTO0FBQ1QsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDO0FBQ3ZCLEtBQUs7QUFDTCxHQUFHO0FBQ0gsRUFBRSxJQUFJLFFBQVEsRUFBRTtBQUNoQjtBQUNBLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDbEMsSUFBSSxTQUFTLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQy9ELElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzlCLEdBQUc7QUFDSCxFQUFFLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDNUMsQ0FBQztBQUNEO0FBQ0EsSUFBSSxjQUFjLEdBQUcsZUFBZSxDQUFDO0FBQ3JDO0FBQ0EsSUFBSSxPQUFPLEdBQUcsTUFBTTtBQUNwQixJQUFJLGdCQUFnQixHQUFHLGlCQUFpQjtBQUN4QyxJQUFJLFNBQVMsR0FBRyxRQUFRO0FBQ3hCLElBQUksYUFBYSxHQUFHLGNBQWM7QUFDbEMsSUFBSSxVQUFVLEdBQUcsVUFBVTtBQUMzQixJQUFJLFFBQVEsR0FBRyxRQUFRO0FBQ3ZCLElBQUksT0FBTyxHQUFHLFFBQVEsQ0FBQztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFdBQVcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFO0FBQ2xFLEVBQUUsSUFBSSxNQUFNLEtBQUssTUFBTSxFQUFFO0FBQ3pCLElBQUksT0FBTztBQUNYLEdBQUc7QUFDSCxFQUFFLFNBQVMsQ0FBQyxNQUFNLEVBQUUsU0FBUyxRQUFRLEVBQUUsR0FBRyxFQUFFO0FBQzVDLElBQUksS0FBSyxLQUFLLEtBQUssR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDO0FBQ25DLElBQUksSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFDOUIsTUFBTSxhQUFhLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDbkYsS0FBSztBQUNMLFNBQVM7QUFDVCxNQUFNLElBQUksUUFBUSxHQUFHLFVBQVU7QUFDL0IsVUFBVSxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFBRSxRQUFRLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQztBQUN2RixVQUFVLFNBQVMsQ0FBQztBQUNwQjtBQUNBLE1BQU0sSUFBSSxRQUFRLEtBQUssU0FBUyxFQUFFO0FBQ2xDLFFBQVEsUUFBUSxHQUFHLFFBQVEsQ0FBQztBQUM1QixPQUFPO0FBQ1AsTUFBTSxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQzlDLEtBQUs7QUFDTCxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDZixDQUFDO0FBQ0Q7QUFDQSxJQUFJLFVBQVUsR0FBRyxXQUFXLENBQUM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxVQUFVLENBQUMsS0FBSyxFQUFFO0FBQzNCLEVBQUUsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBQ0Q7QUFDQSxJQUFJLFVBQVUsR0FBRyxVQUFVLENBQUM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUU7QUFDdEMsRUFBRSxRQUFRLElBQUksQ0FBQyxNQUFNO0FBQ3JCLElBQUksS0FBSyxDQUFDLEVBQUUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3RDLElBQUksS0FBSyxDQUFDLEVBQUUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQyxJQUFJLEtBQUssQ0FBQyxFQUFFLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hELElBQUksS0FBSyxDQUFDLEVBQUUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pFLEdBQUc7QUFDSCxFQUFFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDbkMsQ0FBQztBQUNEO0FBQ0EsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDO0FBQ3JCO0FBQ0EsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDO0FBQ3JCO0FBQ0E7QUFDQSxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUU7QUFDNUMsRUFBRSxLQUFLLEdBQUcsV0FBVyxDQUFDLEtBQUssS0FBSyxTQUFTLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzFFLEVBQUUsT0FBTyxXQUFXO0FBQ3BCLElBQUksSUFBSSxJQUFJLEdBQUcsU0FBUztBQUN4QixRQUFRLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDbEIsUUFBUSxNQUFNLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxFQUFFLENBQUMsQ0FBQztBQUNwRCxRQUFRLEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDOUI7QUFDQSxJQUFJLE9BQU8sRUFBRSxLQUFLLEdBQUcsTUFBTSxFQUFFO0FBQzdCLE1BQU0sS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFDekMsS0FBSztBQUNMLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ2YsSUFBSSxJQUFJLFNBQVMsR0FBRyxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3JDLElBQUksT0FBTyxFQUFFLEtBQUssR0FBRyxLQUFLLEVBQUU7QUFDNUIsTUFBTSxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3JDLEtBQUs7QUFDTCxJQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDeEMsSUFBSSxPQUFPLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQzFDLEdBQUcsQ0FBQztBQUNKLENBQUM7QUFDRDtBQUNBLElBQUksU0FBUyxHQUFHLFVBQVUsQ0FBQztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFVBQVUsQ0FBQyxLQUFLLEVBQUU7QUFDM0IsRUFBRSxPQUFPLFdBQVc7QUFDcEIsSUFBSSxPQUFPLEtBQUssQ0FBQztBQUNqQixHQUFHLENBQUM7QUFDSixDQUFDO0FBQ0Q7QUFDQSxJQUFJLFVBQVUsR0FBRyxVQUFVLENBQUM7QUFDNUI7QUFDQSxJQUFJLFFBQVEsR0FBRyxVQUFVO0FBQ3pCLElBQUksY0FBYyxHQUFHLGVBQWU7QUFDcEMsSUFBSSxVQUFVLEdBQUcsVUFBVSxDQUFDO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksaUJBQWlCLEdBQUcsQ0FBQyxjQUFjLEdBQUcsVUFBVSxHQUFHLFNBQVMsSUFBSSxFQUFFLE1BQU0sRUFBRTtBQUM5RSxFQUFFLE9BQU8sY0FBYyxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUU7QUFDMUMsSUFBSSxjQUFjLEVBQUUsSUFBSTtBQUN4QixJQUFJLFlBQVksRUFBRSxLQUFLO0FBQ3ZCLElBQUksT0FBTyxFQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUM7QUFDN0IsSUFBSSxVQUFVLEVBQUUsSUFBSTtBQUNwQixHQUFHLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUNGO0FBQ0EsSUFBSSxnQkFBZ0IsR0FBRyxpQkFBaUIsQ0FBQztBQUN6QztBQUNBO0FBQ0E7QUFDQSxJQUFJLFNBQVMsR0FBRyxHQUFHO0FBQ25CLElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQztBQUNsQjtBQUNBO0FBQ0EsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsVUFBVSxDQUFDLElBQUksRUFBRTtBQUMxQixFQUFFLElBQUksS0FBSyxHQUFHLENBQUM7QUFDZixNQUFNLFVBQVUsR0FBRyxDQUFDLENBQUM7QUFDckI7QUFDQSxFQUFFLE9BQU8sV0FBVztBQUNwQixJQUFJLElBQUksS0FBSyxHQUFHLFNBQVMsRUFBRTtBQUMzQixRQUFRLFNBQVMsR0FBRyxRQUFRLElBQUksS0FBSyxHQUFHLFVBQVUsQ0FBQyxDQUFDO0FBQ3BEO0FBQ0EsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDO0FBQ3ZCLElBQUksSUFBSSxTQUFTLEdBQUcsQ0FBQyxFQUFFO0FBQ3ZCLE1BQU0sSUFBSSxFQUFFLEtBQUssSUFBSSxTQUFTLEVBQUU7QUFDaEMsUUFBUSxPQUFPLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM1QixPQUFPO0FBQ1AsS0FBSyxNQUFNO0FBQ1gsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQ2hCLEtBQUs7QUFDTCxJQUFJLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDNUMsR0FBRyxDQUFDO0FBQ0osQ0FBQztBQUNEO0FBQ0EsSUFBSSxTQUFTLEdBQUcsVUFBVSxDQUFDO0FBQzNCO0FBQ0EsSUFBSSxlQUFlLEdBQUcsZ0JBQWdCO0FBQ3RDLElBQUksVUFBVSxHQUFHLFNBQVMsQ0FBQztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGFBQWEsR0FBRyxVQUFVLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDaEQ7QUFDQSxJQUFJLFlBQVksR0FBRyxhQUFhLENBQUM7QUFDakM7QUFDQSxJQUFJLFVBQVUsR0FBRyxVQUFVO0FBQzNCLElBQUksUUFBUSxHQUFHLFNBQVM7QUFDeEIsSUFBSSxhQUFhLEdBQUcsWUFBWSxDQUFDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUU7QUFDakMsRUFBRSxPQUFPLGFBQWEsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxVQUFVLENBQUMsRUFBRSxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDckUsQ0FBQztBQUNEO0FBQ0EsSUFBSSxTQUFTLEdBQUcsVUFBVSxDQUFDO0FBQzNCO0FBQ0EsSUFBSSxJQUFJLEdBQUcsSUFBSTtBQUNmLElBQUksYUFBYSxHQUFHLGFBQWE7QUFDakMsSUFBSSxTQUFTLEdBQUcsUUFBUTtBQUN4QixJQUFJLFVBQVUsR0FBRyxVQUFVLENBQUM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUU7QUFDaEQsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFO0FBQzNCLElBQUksT0FBTyxLQUFLLENBQUM7QUFDakIsR0FBRztBQUNILEVBQUUsSUFBSSxJQUFJLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDMUIsRUFBRSxJQUFJLElBQUksSUFBSSxRQUFRO0FBQ3RCLFdBQVcsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUNuRSxXQUFXLElBQUksSUFBSSxRQUFRLElBQUksS0FBSyxJQUFJLE1BQU0sQ0FBQztBQUMvQyxRQUFRO0FBQ1IsSUFBSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDdEMsR0FBRztBQUNILEVBQUUsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBQ0Q7QUFDQSxJQUFJLGVBQWUsR0FBRyxnQkFBZ0IsQ0FBQztBQUN2QztBQUNBLElBQUksUUFBUSxHQUFHLFNBQVM7QUFDeEIsSUFBSSxjQUFjLEdBQUcsZUFBZSxDQUFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGdCQUFnQixDQUFDLFFBQVEsRUFBRTtBQUNwQyxFQUFFLE9BQU8sUUFBUSxDQUFDLFNBQVMsTUFBTSxFQUFFLE9BQU8sRUFBRTtBQUM1QyxJQUFJLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztBQUNsQixRQUFRLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTTtBQUMvQixRQUFRLFVBQVUsR0FBRyxNQUFNLEdBQUcsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsU0FBUztBQUNqRSxRQUFRLEtBQUssR0FBRyxNQUFNLEdBQUcsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUM7QUFDcEQ7QUFDQSxJQUFJLFVBQVUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sVUFBVSxJQUFJLFVBQVU7QUFDeEUsU0FBUyxNQUFNLEVBQUUsRUFBRSxVQUFVO0FBQzdCLFFBQVEsU0FBUyxDQUFDO0FBQ2xCO0FBQ0EsSUFBSSxJQUFJLEtBQUssSUFBSSxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRTtBQUNoRSxNQUFNLFVBQVUsR0FBRyxNQUFNLEdBQUcsQ0FBQyxHQUFHLFNBQVMsR0FBRyxVQUFVLENBQUM7QUFDdkQsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBQ2pCLEtBQUs7QUFDTCxJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDNUIsSUFBSSxPQUFPLEVBQUUsS0FBSyxHQUFHLE1BQU0sRUFBRTtBQUM3QixNQUFNLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsQyxNQUFNLElBQUksTUFBTSxFQUFFO0FBQ2xCLFFBQVEsUUFBUSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3BELE9BQU87QUFDUCxLQUFLO0FBQ0wsSUFBSSxPQUFPLE1BQU0sQ0FBQztBQUNsQixHQUFHLENBQUMsQ0FBQztBQUNMLENBQUM7QUFDRDtBQUNBLElBQUksZUFBZSxHQUFHLGdCQUFnQixDQUFDO0FBQ3ZDO0FBQ0EsSUFBSSxTQUFTLEdBQUcsVUFBVTtBQUMxQixJQUFJLGNBQWMsR0FBRyxlQUFlLENBQUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksS0FBSyxHQUFHLGNBQWMsQ0FBQyxTQUFTLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFO0FBQzlELEVBQUUsU0FBUyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDdEMsQ0FBQyxDQUFDLENBQUM7QUFDSDtBQUNBLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGVBQWUsRUFBRSwwQkFBMEIsQ0FBQztBQUNoRCxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxTQUFTLENBQUM7QUFDaEIsSUFBSSxXQUFXLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRTtBQUN2QyxRQUFRLGVBQWUsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDMUMsUUFBUSwwQkFBMEIsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDckQsUUFBUSxzQkFBc0IsQ0FBQyxJQUFJLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNqRSxRQUFRLHNCQUFzQixDQUFDLElBQUksRUFBRSwwQkFBMEIsRUFBRSxlQUFlLElBQUksU0FBUyxDQUFDLHdCQUF3QixFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQzdILEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxPQUFPLGdCQUFnQixDQUFDLElBQUksRUFBRTtBQUNsQyxRQUFRLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsQyxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksT0FBTyxlQUFlLENBQUMsSUFBSSxFQUFFO0FBQ2pDLFFBQVEsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQzNFLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxNQUFNLFNBQVMsQ0FBQyxLQUFLLEVBQUU7QUFDM0IsUUFBUSxLQUFLLENBQUMsZ0RBQWdELEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ2xGO0FBQ0EsUUFBUSxNQUFNLE1BQU0sR0FBRyxNQUFNLHNCQUFzQixDQUFDLElBQUksRUFBRSxlQUFlLEVBQUUsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2pHLFFBQVEsS0FBSyxDQUFDLCtCQUErQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3ZELFFBQVEsT0FBTyxNQUFNLENBQUM7QUFDdEIsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxNQUFNLFNBQVMsQ0FBQyxLQUFLLEVBQUU7QUFDM0IsUUFBUSxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7QUFDMUIsUUFBUSxJQUFJLEtBQUssWUFBWSxXQUFXLEVBQUU7QUFDMUMsWUFBWSxNQUFNLEdBQUcsS0FBSyxDQUFDO0FBQzNCLFNBQVM7QUFDVCxhQUFhLElBQUksS0FBSyxZQUFZLElBQUksRUFBRTtBQUN4QztBQUNBO0FBQ0EsWUFBWSxNQUFNLFVBQVUsR0FBRyxNQUFNLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUN6RCxZQUFZLElBQUksc0JBQXNCLENBQUMsSUFBSSxFQUFFLDBCQUEwQixFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUNuRixnQkFBZ0IsTUFBTSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLHNCQUFzQixDQUFDLElBQUksRUFBRSwwQkFBMEIsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzVHLGFBQWE7QUFDYixpQkFBaUI7QUFDakIsZ0JBQWdCLE1BQU0sR0FBRyxVQUFVLENBQUM7QUFDcEMsYUFBYTtBQUNiLFNBQVM7QUFDVCxRQUFRLElBQUksQ0FBQyxNQUFNLEVBQUU7QUFDckIsWUFBWSxNQUFNLElBQUksaUJBQWlCLEVBQUUsQ0FBQztBQUMxQyxTQUFTO0FBQ1QsUUFBUSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDdEMsS0FBSztBQUNMLENBQUM7QUFDRCxlQUFlLEdBQUcsSUFBSSxPQUFPLEVBQUUsRUFBRSwwQkFBMEIsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO0FBQzVFLFNBQVMsQ0FBQyxnQkFBZ0IsR0FBRztBQUM3QixJQUFJLFlBQVk7QUFDaEIsSUFBSSxXQUFXO0FBQ2YsSUFBSSxZQUFZO0FBQ2hCLElBQUksZUFBZTtBQUNuQixJQUFJLFdBQVc7QUFDZixJQUFJLG1DQUFtQztBQUN2QyxDQUFDLENBQUM7QUFDRixTQUFTLENBQUMsd0JBQXdCLEdBQUcsS0FBSyxDQUFDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksRUFBRSxFQUFFLG1CQUFtQixFQUFFLGdCQUFnQixFQUFFLHFCQUFxQixFQUFFLHlCQUF5QixFQUFFLDBCQUEwQixFQUFFLCtCQUErQixDQUFDO0FBQzdKLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ3ZDLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLFVBQVUsQ0FBQztBQUNqQixJQUFJLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxHQUFHLEVBQUUsRUFBRTtBQUNqQyxRQUFRLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUM5QyxRQUFRLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUMzQyxRQUFRLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNoRCxRQUFRLHNCQUFzQixDQUFDLElBQUksRUFBRSxtQkFBbUIsRUFBRSxFQUFFLEdBQUcsc0JBQXNCLENBQUMsVUFBVSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsMEJBQTBCLENBQUMsRUFBRSxHQUFHLElBQUksRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3hKLFFBQVEsc0JBQXNCLENBQUMsSUFBSSxFQUFFLGdCQUFnQixFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNsRSxRQUFRLHNCQUFzQixDQUFDLElBQUksRUFBRSxxQkFBcUIsRUFBRSxJQUFJLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDLEVBQUUsc0JBQXNCLENBQUMsSUFBSSxFQUFFLG1CQUFtQixFQUFFLEdBQUcsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3pNLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGFBQWEsUUFBUSxDQUFDLEdBQUcsRUFBRSxZQUFZLEdBQUcsRUFBRSxFQUFFO0FBQ2xELFFBQVEsS0FBSyxDQUFDLGFBQWEsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNsQyxRQUFRLElBQUk7QUFDWixZQUFZLE1BQU0sV0FBVyxHQUFHLHNCQUFzQixDQUFDLFVBQVUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLCtCQUErQixDQUFDLENBQUM7QUFDN0csWUFBWSxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsRUFBRSxFQUFFLFdBQVcsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUNoRTtBQUNBLFlBQVksTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFVBQVUsS0FBSyxXQUFXLENBQUMsVUFBVTtBQUN2RSxnQkFBZ0IsSUFBSSxDQUFDLFFBQVEsS0FBSyxXQUFXLENBQUMsUUFBUSxDQUFDO0FBQ3ZELFlBQVksTUFBTSxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzNFLFlBQVksTUFBTSxZQUFZLEdBQUcsUUFBUTtBQUN6QyxrQkFBa0IsRUFBRSxPQUFPLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFO0FBQzFELGtCQUFrQixJQUFJLENBQUM7QUFDdkIsWUFBWSxNQUFNLEdBQUcsR0FBRyxNQUFNLEtBQUssQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7QUFDdEYsWUFBWSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEVBQUU7QUFDeEIsZ0JBQWdCLE9BQU8sR0FBRyxDQUFDO0FBQzNCLGFBQWE7QUFDYixpQkFBaUI7QUFDakIsZ0JBQWdCLE1BQU0sSUFBSSxhQUFhLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ2xELGFBQWE7QUFDYixTQUFTO0FBQ1QsUUFBUSxPQUFPLEdBQUcsRUFBRTtBQUNwQixZQUFZLE1BQU0sSUFBSSxhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBQy9ELFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLE1BQU0sT0FBTyxDQUFDLEdBQUcsRUFBRTtBQUN2QixRQUFRLEtBQUssQ0FBQyxZQUFZLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDakMsUUFBUSxJQUFJLEdBQUcsQ0FBQztBQUNoQixRQUFRLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQztBQUMvQixRQUFRLE1BQU0sYUFBYSxHQUFHLHNCQUFzQixDQUFDLElBQUksRUFBRSxtQkFBbUIsRUFBRSxHQUFHLENBQUMsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO0FBQ3JHLFFBQVEsSUFBSSxhQUFhLEVBQUU7QUFDM0IsWUFBWSxJQUFJO0FBQ2hCLGdCQUFnQixHQUFHLEdBQUcsTUFBTSxVQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRTtBQUNyRCxvQkFBb0IsUUFBUSxFQUFFLHNCQUFzQixDQUFDLElBQUksRUFBRSxtQkFBbUIsRUFBRSxHQUFHLENBQUMsQ0FBQyxXQUFXO0FBQ2hHLGlCQUFpQixDQUFDLENBQUM7QUFDbkIsZ0JBQWdCLFdBQVcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUM5RCxnQkFBZ0IsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLEdBQUcsRUFBRTtBQUN4QyxvQkFBb0IsS0FBSyxDQUFDLHFFQUFxRSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUMzRyxpQkFBaUI7QUFDakIscUJBQXFCO0FBQ3JCLG9CQUFvQixLQUFLLENBQUMsK0VBQStFLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3JILGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsWUFBWSxPQUFPLEdBQUcsRUFBRTtBQUN4QixnQkFBZ0IsS0FBSyxDQUFDLDZFQUE2RSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQzFHLGFBQWE7QUFDYixTQUFTO0FBQ1QsYUFBYTtBQUNiLFlBQVksS0FBSyxDQUFDLGlEQUFpRCxDQUFDLENBQUM7QUFDckUsU0FBUztBQUNULFFBQVEsSUFBSSxDQUFDLEdBQUcsRUFBRTtBQUNsQixZQUFZLElBQUk7QUFDaEI7QUFDQTtBQUNBLGdCQUFnQixNQUFNLE9BQU8sR0FBRyxNQUFNLFVBQVUsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFO0FBQy9ELG9CQUFvQixXQUFXLEVBQUU7QUFDakMsd0JBQXdCLE1BQU0sRUFBRSxNQUFNO0FBQ3RDLHFCQUFxQjtBQUNyQixpQkFBaUIsQ0FBQyxDQUFDO0FBQ25CLGdCQUFnQixXQUFXLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDbEUsZ0JBQWdCLEtBQUssQ0FBQyw2Q0FBNkMsRUFBRSxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDdkYsYUFBYTtBQUNiLFlBQVksT0FBTyxHQUFHLEVBQUU7QUFDeEIsZ0JBQWdCLEtBQUssQ0FBQyx3RUFBd0UsQ0FBQyxDQUFDO0FBQ2hHLGFBQWE7QUFDYixTQUFTO0FBQ1QsUUFBUSxJQUFJLFdBQVcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLEVBQUU7QUFDcEUsWUFBWSxLQUFLLENBQUMsbUNBQW1DLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDcEUsWUFBWSxNQUFNLElBQUksb0JBQW9CLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDeEQsU0FBUztBQUNULFFBQVEsSUFBSSxDQUFDLEdBQUcsRUFBRTtBQUNsQixZQUFZLEdBQUcsR0FBRyxNQUFNLFVBQVUsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDakQsU0FBUztBQUNULFFBQVEsTUFBTSxJQUFJLEdBQUcsTUFBTSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDdEMsUUFBUSxJQUFJLENBQUMsYUFBYSxFQUFFO0FBQzVCLFlBQVksS0FBSyxDQUFDLENBQUMsK0NBQStDLENBQUMsQ0FBQyxDQUFDO0FBQ3JFLFlBQVksT0FBTyxJQUFJLENBQUM7QUFDeEIsU0FBUztBQUNULFFBQVEsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDaEQsUUFBUSxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsTUFBTSxzQkFBc0IsQ0FBQyxJQUFJLEVBQUUscUJBQXFCLEVBQUUsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNHLFFBQVEsSUFBSSxLQUFLLEVBQUU7QUFDbkIsWUFBWSxLQUFLLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDdEQsU0FBUztBQUNULGFBQWE7QUFDYixZQUFZLEtBQUssQ0FBQyxnQ0FBZ0MsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN6RCxZQUFZLE9BQU8sSUFBSSxDQUFDO0FBQ3hCLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxNQUFNLGNBQWMsR0FBRyxHQUFHLENBQUMsTUFBTSxLQUFLLEdBQUcsSUFBSSxNQUFNLENBQUMsVUFBVSxLQUFLLHNCQUFzQixDQUFDLElBQUksRUFBRSxtQkFBbUIsRUFBRSxHQUFHLENBQUMsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO0FBQ2xKLFFBQVEsSUFBSSxjQUFjLEVBQUU7QUFDNUIsWUFBWSxLQUFLLENBQUMsa0NBQWtDLEVBQUUsc0JBQXNCLENBQUMsSUFBSSxFQUFFLG1CQUFtQixFQUFFLEdBQUcsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzFILFlBQVksTUFBTSxPQUFPLEdBQUcsTUFBTSxVQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRTtBQUMzRDtBQUNBLGdCQUFnQixVQUFVLEVBQUUsc0JBQXNCLENBQUMsSUFBSSxFQUFFLG1CQUFtQixFQUFFLEdBQUcsQ0FBQyxDQUFDLFdBQVcsR0FBRyxDQUFDO0FBQ2xHLGFBQWEsQ0FBQyxDQUFDO0FBQ2YsWUFBWSxNQUFNLFVBQVUsR0FBRyxNQUFNLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUMzRCxZQUFZLEtBQUssQ0FBQyxpREFBaUQsRUFBRSxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDNUYsWUFBWSxPQUFPLElBQUksSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZFLFNBQVM7QUFDVCxRQUFRLE9BQU8sSUFBSSxDQUFDO0FBQ3BCLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxhQUFhLGFBQWEsQ0FBQyxHQUFHLEVBQUU7QUFDcEMsUUFBUSxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUseUJBQXlCLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFDeEYsWUFBWSxRQUFRLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDbkQsWUFBWSxNQUFNLEdBQUcsR0FBRyxNQUFNLFVBQVUsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFO0FBQ3ZELGdCQUFnQixXQUFXLEVBQUU7QUFDN0Isb0JBQW9CLFdBQVcsRUFBRSxNQUFNO0FBQ3ZDLG9CQUFvQixPQUFPLEVBQUU7QUFDN0Isd0JBQXdCLE1BQU0sRUFBRSxrQkFBa0I7QUFDbEQscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQixhQUFhLENBQUMsQ0FBQztBQUNmLFlBQVksTUFBTSxJQUFJLEdBQUcsTUFBTSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDMUMsWUFBWSxRQUFRLENBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3RELFlBQVksc0JBQXNCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUseUJBQXlCLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzVGLFNBQVM7QUFDVCxRQUFRLFFBQVEsQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN0RCxRQUFRLE9BQU8sc0JBQXNCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUseUJBQXlCLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDekYsS0FBSztBQUNMLENBQUM7QUFDRCxFQUFFLEdBQUcsVUFBVSxFQUFFLG1CQUFtQixHQUFHLElBQUksT0FBTyxFQUFFLEVBQUUsZ0JBQWdCLEdBQUcsSUFBSSxPQUFPLEVBQUUsRUFBRSxxQkFBcUIsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO0FBQzlILHlCQUF5QixHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksR0FBRyxFQUFFLEVBQUUsQ0FBQztBQUNqRCwwQkFBMEIsR0FBRyxFQUFFLEtBQUssRUFBRTtBQUN0QyxRQUFRLFdBQVcsRUFBRSxDQUFDO0FBQ3RCLEtBQUssRUFBRSxDQUFDO0FBQ1IsK0JBQStCLEdBQUcsRUFBRSxLQUFLLEVBQUU7QUFDM0MsUUFBUSxVQUFVLEVBQUUsQ0FBQztBQUNyQixRQUFRLFFBQVEsRUFBRSxTQUFTO0FBQzNCLFFBQVEsV0FBVyxFQUFFLEVBQUU7QUFDdkIsS0FBSyxFQUFFLENBQUM7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFVBQVUsQ0FBQyxJQUFJLEVBQUU7QUFDMUIsSUFBSSxPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGdCQUFnQixDQUFDLGVBQWUsRUFBRTtBQUMzQyxJQUFJLElBQUksSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzdCLElBQUksSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUM3QyxJQUFJLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQzNDO0FBQ0EsUUFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25ELEtBQUs7QUFDTCxJQUFJLE9BQU8sSUFBSSxDQUFDO0FBQ2hCLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLG1CQUFtQixDQUFDLFNBQVMsRUFBRTtBQUN4QyxJQUFJLE1BQU0sTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQzdELElBQUksSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDO0FBQ3hCLElBQUksTUFBTSxPQUFPLEdBQUcsT0FBTyxPQUFPLEtBQUs7QUFDdkMsUUFBUSxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3BDLFFBQVEsT0FBTyxHQUFHLElBQUksQ0FBQztBQUN2QixRQUFRLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxLQUFLO0FBQ2hELFlBQVksTUFBTSxDQUFDLFNBQVMsR0FBRyxVQUFVLENBQUMsRUFBRTtBQUM1QyxnQkFBZ0IsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxTQUFTLEVBQUU7QUFDL0Msb0JBQW9CLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pDLGlCQUFpQjtBQUNqQixxQkFBcUI7QUFDckIsb0JBQW9CLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDM0QsaUJBQWlCO0FBQ2pCLGdCQUFnQixPQUFPLEdBQUcsS0FBSyxDQUFDO0FBQ2hDLGFBQWEsQ0FBQztBQUNkLFlBQVksTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMsRUFBRTtBQUMxQyxnQkFBZ0IsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUNoQyxnQkFBZ0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzFCLGFBQWEsQ0FBQztBQUNkLFNBQVMsQ0FBQyxDQUFDO0FBQ1gsS0FBSyxDQUFDO0FBQ04sSUFBSSxNQUFNLFNBQVMsR0FBRyxNQUFNLE9BQU8sQ0FBQztBQUNwQyxJQUFJLE1BQU0sU0FBUyxHQUFHLE1BQU0sTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQy9DLElBQUksT0FBTztBQUNYLFFBQVEsT0FBTztBQUNmLFFBQVEsU0FBUztBQUNqQixRQUFRLFNBQVM7QUFDakIsS0FBSyxDQUFDO0FBQ04sQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFO0FBQ2xDLElBQUksTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDO0FBQ3ZCLElBQUksTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksTUFBTSxTQUFTLEdBQUcsTUFBTTtBQUM1QixRQUFRLEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO0FBQ3RDLFlBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUU7QUFDbkMsZ0JBQWdCLE9BQU8sTUFBTSxDQUFDO0FBQzlCLFNBQVM7QUFDVCxRQUFRLElBQUksT0FBTyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsVUFBVSxFQUFFO0FBQ2hELFlBQVksTUFBTSxTQUFTLEdBQUcsbUJBQW1CLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3BFLFlBQVksT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNwQyxZQUFZLE9BQU8sU0FBUyxDQUFDO0FBQzdCLFNBQVM7QUFDVCxRQUFRLE9BQU8sSUFBSSxDQUFDO0FBQ3BCLEtBQUssQ0FBQztBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxNQUFNLFVBQVUsR0FBRyxZQUFZO0FBQ25DLFFBQVEsTUFBTSxNQUFNLEdBQUcsU0FBUyxFQUFFLENBQUM7QUFDbkMsUUFBUSxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQ3JCLFlBQVksT0FBTztBQUNuQixTQUFTO0FBQ1QsUUFBUSxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDakMsUUFBUSxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQ25CLFlBQVksT0FBTztBQUNuQixTQUFTO0FBQ1QsUUFBUSxJQUFJO0FBQ1osWUFBWSxNQUFNLE1BQU0sR0FBRyxNQUFNLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzlELFlBQVksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNqQyxTQUFTO0FBQ1QsUUFBUSxPQUFPLEtBQUssRUFBRTtBQUN0QixZQUFZLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDL0IsU0FBUztBQUNULEtBQUssQ0FBQztBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxNQUFNLE9BQU8sR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLEtBQUs7QUFDdEMsUUFBUSxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sS0FBSztBQUNoRCxZQUFZLE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQztBQUNwQyxnQkFBZ0IsT0FBTyxFQUFFO0FBQ3pCLG9CQUFvQixNQUFNO0FBQzFCLG9CQUFvQixJQUFJO0FBQ3hCLGlCQUFpQjtBQUNqQixnQkFBZ0IsT0FBTyxFQUFFLENBQUMsS0FBSyxLQUFLO0FBQ3BDLG9CQUFvQixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbkM7QUFDQSxvQkFBb0IsVUFBVSxFQUFFLENBQUM7QUFDakMsaUJBQWlCO0FBQ2pCLGdCQUFnQixNQUFNLEVBQUUsQ0FBQyxLQUFLLEtBQUs7QUFDbkMsb0JBQW9CLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsQyxvQkFBb0IsVUFBVSxFQUFFLENBQUM7QUFDakMsaUJBQWlCO0FBQ2pCLGFBQWEsQ0FBQyxDQUFDO0FBQ2YsWUFBWSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzdCLFlBQVksVUFBVSxFQUFFLENBQUM7QUFDekIsU0FBUyxDQUFDLENBQUM7QUFDWCxLQUFLLENBQUM7QUFDTixJQUFJLE1BQU0sU0FBUyxHQUFHLE1BQU07QUFDNUIsUUFBUSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO0FBQ3hELEtBQUssQ0FBQztBQUNOLElBQUksT0FBTztBQUNYLFFBQVEsT0FBTztBQUNmLFFBQVEsU0FBUztBQUNqQixLQUFLLENBQUM7QUFDTixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3BDLGVBQWUsK0JBQStCLENBQUMsU0FBUyxFQUFFO0FBQzFELElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyx3Q0FBd0MsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUN2RSxJQUFJLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxNQUFNO0FBQzdCLGlEQUFpRCxTQUFTLENBQUMsQ0FBQztBQUM1RCxJQUFJLE9BQU87QUFDWCxRQUFRLEdBQUcsTUFBTTtBQUNqQixRQUFRLE9BQU8sRUFBRSxNQUFNLEdBQUc7QUFDMUIsS0FBSyxDQUFDO0FBQ04sQ0FBQztBQUNELGVBQWUsaUJBQWlCLENBQUMsTUFBTSxFQUFFO0FBQ3pDO0FBQ0EsSUFBSSxJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsRUFBRTtBQUN2QyxRQUFRLE9BQU8sK0JBQStCLENBQUMsTUFBTSxDQUFDLGlCQUFpQixJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUM3RixLQUFLO0FBQ0wsSUFBSSxNQUFNLEdBQUcsR0FBRyxNQUFNLEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDOUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFDZixRQUFRLE1BQU0sSUFBSSx3QkFBd0IsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ2xFLElBQUksTUFBTSxHQUFHLEdBQUcsTUFBTSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDakM7QUFDQSxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsRUFBRSxNQUFNLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM3RSxJQUFJLE1BQU0sVUFBVSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsQ0FBQyxDQUFDO0FBQzNFLElBQUksTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUN0RCxJQUFJLE1BQU0sVUFBVSxHQUFHLGdCQUFnQixDQUFDO0FBQ3hDLFFBQVEsR0FBRyxNQUFNO0FBQ2pCLFFBQVEsU0FBUyxFQUFFLFNBQVM7QUFDNUIsS0FBSyxDQUFDLENBQUM7QUFDUCxJQUFJLE1BQU0sSUFBSSxHQUFHO0FBQ2pCLFFBQVEsV0FBVyxFQUFFLE9BQU8sR0FBRyxJQUFJLEtBQUssVUFBVSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDO0FBQy9FLFFBQVEsWUFBWSxFQUFFLE9BQU8sR0FBRyxJQUFJLEtBQUssVUFBVSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDO0FBQ2pGLFFBQVEsV0FBVyxFQUFFLE9BQU8sR0FBRyxJQUFJLEtBQUssVUFBVSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDO0FBQy9FLFFBQVEsU0FBUyxFQUFFLE9BQU8sR0FBRyxJQUFJLEtBQUssVUFBVSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDO0FBQzNFLFFBQVEsbUNBQW1DLEVBQUUsT0FBTyxHQUFHLElBQUksS0FBSyxVQUFVLENBQUMsT0FBTyxDQUFDLHFDQUFxQyxFQUFFLElBQUksQ0FBQztBQUMvSCxRQUFRLFNBQVMsRUFBRSxPQUFPLEdBQUcsSUFBSSxLQUFLLFVBQVUsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQztBQUMzRSxRQUFRLFlBQVksRUFBRSxPQUFPLEdBQUcsSUFBSSxLQUFLLFVBQVUsQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQztBQUNqRixRQUFRLCtCQUErQixFQUFFLE9BQU8sR0FBRyxJQUFJLEtBQUssVUFBVSxDQUFDLE9BQU8sQ0FBQyxpQ0FBaUMsRUFBRSxJQUFJLENBQUM7QUFDdkgsUUFBUSx3QkFBd0IsRUFBRSxPQUFPLEdBQUcsSUFBSSxLQUFLLFVBQVUsQ0FBQyxPQUFPLENBQUMsMEJBQTBCLEVBQUUsSUFBSSxDQUFDO0FBQ3pHLEtBQUssQ0FBQztBQUNOLElBQUksT0FBTztBQUNYLFFBQVEsR0FBRyxJQUFJO0FBQ2YsUUFBUSxPQUFPLEVBQUUsTUFBTTtBQUN2QixZQUFZLEdBQUcsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDM0MsWUFBWSxPQUFPLFVBQVUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUMxQyxTQUFTO0FBQ1QsS0FBSyxDQUFDO0FBQ04sQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFNBQVMsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFO0FBQzFDO0FBQ0EsSUFBSSxNQUFNLFNBQVMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxpR0FBaUcsQ0FBQyxZQUFZLENBQUMsaUdBQWlHLENBQUMsaUJBQWlCLENBQUMsaUdBQWlHLENBQUMsc0JBQXNCLENBQUMsaUdBQWlHLENBQUMsQ0FBQztBQUNyZSxJQUFJLE1BQU0sYUFBYSxHQUFHLFNBQVMsR0FBRyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ3pELElBQUksS0FBSyxDQUFDLGtDQUFrQyxFQUFFLFNBQVMsRUFBRTtBQUN6RCxRQUFRLGlCQUFpQixFQUFFLGFBQWE7QUFDeEMsS0FBSyxDQUFDLENBQUM7QUFDUCxJQUFJLE1BQU0sUUFBUSxHQUFHLE1BQU0sS0FBSyxDQUFDLFNBQVMsRUFBRTtBQUM1QyxRQUFRLFNBQVMsRUFBRSxhQUFhO0FBQ2hDLEtBQUssQ0FBQyxDQUFDO0FBQ1AsSUFBSSxNQUFNLE1BQU0sR0FBRyxNQUFNLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUNoRCxJQUFJLEtBQUssQ0FBQyxzREFBc0QsRUFBRTtBQUNsRSxRQUFRLElBQUksRUFBRSxNQUFNLENBQUMsVUFBVTtBQUMvQixLQUFLLENBQUMsQ0FBQztBQUNQLElBQUksTUFBTSxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2hELElBQUksS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFDbEMsSUFBSSxPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsdUJBQXVCLENBQUMsYUFBYSxFQUFFO0FBQ2hELElBQUksTUFBTSxnQkFBZ0IsR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxRQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxRQUFRLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuRyxJQUFJLE9BQU87QUFDWCxRQUFRLElBQUksRUFBRSxnQkFBZ0I7QUFDOUIsUUFBUSxHQUFHLEVBQUUsQ0FBQyxLQUFLLEtBQUs7QUFDeEI7QUFDQSxZQUFZLE9BQU8sZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLENBQUM7QUFDM0UsU0FBUztBQUNULEtBQUssQ0FBQztBQUNOLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUM7QUFDOUI7QUFDQTtBQUNBO0FBQ0EsZUFBZSxHQUFHLENBQUMsSUFBSSxFQUFFLFNBQVMsR0FBRyxXQUFXLEVBQUU7QUFDbEQsSUFBSSxNQUFNLE1BQU0sR0FBRyxJQUFJLFlBQVksV0FBVyxHQUFHLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUNqRjtBQUNBLElBQUksTUFBTSxPQUFPLEdBQUcsTUFBTSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDbEUsSUFBSSxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDeEQ7QUFDQSxJQUFJLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3JFLENBQUM7QUFDRCxlQUFlLFVBQVUsQ0FBQyxJQUFJLEVBQUUsU0FBUyxHQUFHLFdBQVcsRUFBRTtBQUN6RCxJQUFJLE1BQU0sSUFBSSxHQUFHLE1BQU0sR0FBRyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztBQUM1QyxJQUFJLE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZFLElBQUksTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDO0FBQ3BELElBQUksT0FBTyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDekMsQ0FBQztBQUNELGVBQWUsb0JBQW9CLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxTQUFTLEdBQUcsV0FBVyxFQUFFO0FBQy9FLElBQUksTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDO0FBQ3BELElBQUksTUFBTSxVQUFVLEdBQUcsVUFBVTtBQUNqQyxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNsRSxVQUFVLE1BQU0sVUFBVSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztBQUM1QyxJQUFJLE9BQU87QUFDWCxRQUFRLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSTtBQUN6QixRQUFRLFVBQVU7QUFDbEIsS0FBSyxDQUFDO0FBQ04sQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsaUJBQWlCLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRTtBQUM3QyxJQUFJLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxHQUFHLFNBQVMsSUFBSSxFQUFFLENBQUM7QUFDekQsSUFBSSxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxDQUFDO0FBQy9DLElBQUksSUFBSSxJQUFJLEVBQUU7QUFDZCxRQUFRLE9BQU8sSUFBSSxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7QUFDakQsWUFBWSxJQUFJO0FBQ2hCLFNBQVMsQ0FBQyxDQUFDO0FBQ1gsS0FBSztBQUNMLElBQUksT0FBTyxJQUFJLENBQUM7QUFDaEIsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsaUJBQWlCLENBQUMsYUFBYSxFQUFFLGlCQUFpQixFQUFFO0FBQzdELElBQUksTUFBTSxJQUFJLEdBQUcsaUJBQWlCLElBQUksaUJBQWlCLENBQUMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLENBQUM7QUFDMUYsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQ2YsUUFBUSxPQUFPLElBQUksQ0FBQztBQUNwQixLQUFLO0FBQ0wsSUFBSSxPQUFPO0FBQ1gsUUFBUSxJQUFJO0FBQ1osUUFBUSxXQUFXLEVBQUUsaUJBQWlCLENBQUMsTUFBTTtBQUM3QyxRQUFRLElBQUksRUFBRSxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUM7QUFDN0IsUUFBUSxNQUFNLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQyxJQUFJLENBQUM7QUFDbkQsS0FBSyxDQUFDO0FBQ04sQ0FBQztBQUNELFNBQVMsdUJBQXVCLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRTtBQUNwRCxJQUFJLE9BQU87QUFDWCxRQUFRLElBQUk7QUFDWixRQUFRLFdBQVc7QUFDbkIsUUFBUSxJQUFJLEVBQUUsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDO0FBQzdCLFFBQVEsTUFBTSxFQUFFLE1BQU0sdUJBQXVCLENBQUMsSUFBSSxDQUFDO0FBQ25ELEtBQUssQ0FBQztBQUNOLENBQUM7QUFDRCxTQUFTLHNCQUFzQixDQUFDLEdBQUcsRUFBRTtBQUNyQyxJQUFJLE9BQU87QUFDWCxRQUFRLFdBQVcsRUFBRSxTQUFTO0FBQzlCLFFBQVEsTUFBTSxFQUFFLE9BQU87QUFDdkIsWUFBWSxHQUFHO0FBQ2YsWUFBWSxPQUFPLEVBQUUsTUFBTSxHQUFHO0FBQzlCLFNBQVMsQ0FBQztBQUNWLEtBQUssQ0FBQztBQUNOLENBQUM7QUFDRCxTQUFTLHVCQUF1QixDQUFDLElBQUksRUFBRTtBQUN2QyxJQUFJLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDMUMsSUFBSSxPQUFPO0FBQ1gsUUFBUSxHQUFHO0FBQ1gsUUFBUSxPQUFPLEVBQUUsTUFBTSxHQUFHLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQztBQUMvQyxLQUFLLENBQUM7QUFDTixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxnQkFBZ0IsQ0FBQyxjQUFjLEVBQUUsUUFBUSxFQUFFO0FBQ3BELElBQUksT0FBTztBQUNYLFFBQVEsS0FBSyxFQUFFLGNBQWMsQ0FBQyxLQUFLO0FBQ25DLFFBQVEsTUFBTSxFQUFFLGNBQWMsQ0FBQyxNQUFNO0FBQ3JDLFFBQVEsVUFBVSxFQUFFLGNBQWMsQ0FBQyxXQUFXLElBQUksSUFBSTtBQUN0RCxRQUFRLFVBQVUsRUFBRSxjQUFjLENBQUMsV0FBVztBQUM5QyxRQUFRLFVBQVUsRUFBRSxjQUFjLENBQUMsVUFBVSxJQUFJLElBQUk7QUFDckQsUUFBUSxJQUFJLEVBQUUsY0FBYyxDQUFDLElBQUksSUFBSSxJQUFJO0FBQ3pDLFFBQVEsWUFBWSxFQUFFLGNBQWMsQ0FBQyxZQUFZLElBQUksSUFBSTtBQUN6RCxRQUFRLGdCQUFnQixFQUFFLGNBQWMsQ0FBQyxpQkFBaUIsSUFBSSxFQUFFO0FBQ2hFLFFBQVEsUUFBUSxFQUFFLGNBQWMsQ0FBQyxRQUFRLElBQUksSUFBSTtBQUNqRCxRQUFRLFFBQVEsRUFBRSxRQUFRLElBQUksSUFBSTtBQUNsQyxRQUFRLFNBQVMsRUFBRSxpQkFBaUIsQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLGNBQWMsQ0FBQyxTQUFTLENBQUM7QUFDeEYsS0FBSyxDQUFDO0FBQ04sQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsY0FBYyxDQUFDLFlBQVksRUFBRSxTQUFTLEVBQUU7QUFDakQsSUFBSSxNQUFNLFdBQVcsR0FBRyxZQUFZLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLGNBQWMsS0FBSyxnQkFBZ0IsQ0FBQyxjQUFjLEVBQUUsY0FBYyxDQUFDLGVBQWU7QUFDeEksVUFBVSxTQUFTLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQztBQUNuRCxVQUFVLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFDdEIsSUFBSSxPQUFPO0FBQ1gsUUFBUSxLQUFLLEVBQUUsWUFBWSxDQUFDLEtBQUs7QUFDakMsUUFBUSxNQUFNLEVBQUUsWUFBWSxDQUFDLE1BQU07QUFDbkMsUUFBUSxNQUFNLEVBQUUsWUFBWSxDQUFDLE1BQU0sSUFBSSxJQUFJO0FBQzNDLFFBQVEsY0FBYyxFQUFFLFlBQVksQ0FBQyxlQUFlO0FBQ3BELFFBQVEsbUJBQW1CLEVBQUUsWUFBWSxDQUFDLHFCQUFxQixJQUFJLElBQUk7QUFDdkUsUUFBUSxVQUFVLEVBQUUsWUFBWSxDQUFDLFdBQVc7QUFDNUMsUUFBUSxhQUFhLEVBQUUsWUFBWSxDQUFDLGNBQWMsSUFBSSxJQUFJO0FBQzFELFFBQVEsV0FBVyxFQUFFLFlBQVksQ0FBQyxXQUFXLElBQUksRUFBRTtBQUNuRCxRQUFRLFdBQVc7QUFDbkIsUUFBUSxVQUFVLEVBQUUsWUFBWSxDQUFDLFVBQVUsSUFBSSxFQUFFO0FBQ2pELFFBQVEsTUFBTSxFQUFFLElBQUk7QUFDcEIsUUFBUSxTQUFTLEVBQUUsaUJBQWlCLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsU0FBUyxDQUFDO0FBQ3BGLFFBQVEsVUFBVSxFQUFFLHVCQUF1QixDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUM7QUFDcEUsS0FBSyxDQUFDO0FBQ04sQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsbUJBQW1CLENBQUMsaUJBQWlCLEVBQUU7QUFDaEQsSUFBSSxNQUFNLFNBQVMsR0FBRyxlQUFlLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUN6RCxJQUFJLE9BQU87QUFDWCxRQUFRLFNBQVM7QUFDakIsUUFBUSxjQUFjLEVBQUUsU0FBUyxDQUFDLGlCQUFpQixDQUFDLGVBQWUsQ0FBQztBQUNwRSxRQUFRLGdCQUFnQixFQUFFLGlCQUFpQixFQUFFLGlCQUFpQixJQUFJLEVBQUU7QUFDcEUsS0FBSyxDQUFDO0FBQ04sQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsZUFBZSxDQUFDLGlCQUFpQixFQUFFO0FBQzVDLElBQUksTUFBTSxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRSxlQUFlLEVBQUUsdUJBQXVCLEdBQUcsR0FBRyxpQkFBaUIsQ0FBQztBQUN6RyxJQUFJLEtBQUssQ0FBQyxzQ0FBc0MsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0FBQ3JFO0FBQ0E7QUFDQSxJQUFJLE1BQU0sS0FBSyxHQUFHO0FBQ2xCLFFBQVE7QUFDUixZQUFZLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyx1QkFBdUIsQ0FBQztBQUMzRCxZQUFZLEtBQUssRUFBRSx1QkFBdUI7QUFDMUMsU0FBUztBQUNULEtBQUssQ0FBQztBQUNOLElBQUksTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUM7QUFDbEMsSUFBSSxPQUFPLEtBQUssQ0FBQyxNQUFNLEVBQUU7QUFDekIsUUFBUSxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDcEMsUUFBUSxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDNUMsUUFBUSxNQUFNLEVBQUUsSUFBSSxFQUFFLGVBQWUsRUFBRSxHQUFHLE9BQU8sQ0FBQztBQUNsRCxRQUFRLGVBQWUsRUFBRSxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUMsRUFBRSxlQUFlLEVBQUUsVUFBVSxFQUFFLEtBQUs7QUFDbkYsWUFBWSxJQUFJLFVBQVUsRUFBRTtBQUM1QixnQkFBZ0IsSUFBSSxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLEVBQUU7QUFDN0Qsb0JBQW9CLEtBQUssQ0FBQyxJQUFJLENBQUM7QUFDL0Isd0JBQXdCLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO0FBQ3JFLHdCQUF3QixLQUFLLEVBQUUsVUFBVTtBQUN6QyxxQkFBcUIsQ0FBQyxDQUFDO0FBQ3ZCLGlCQUFpQjtBQUNqQixxQkFBcUI7QUFDckIsb0JBQW9CLEtBQUssQ0FBQywwQkFBMEIsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNsRSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVMsQ0FBQyxDQUFDO0FBQ1gsS0FBSztBQUNMLElBQUksTUFBTSxnQkFBZ0IsR0FBRyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLEVBQUUsaUJBQWlCLEtBQUs7QUFDekYsUUFBUSxNQUFNLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsR0FBRyxpQkFBaUIsQ0FBQztBQUNoRSxRQUFRLEtBQUssQ0FBQyw2QkFBNkIsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUMzRCxRQUFRLE1BQU0sUUFBUSxHQUFHLGNBQWMsQ0FBQyxZQUFZLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDakUsUUFBUSxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsUUFBUSxDQUFDO0FBQ3BDLFFBQVEsT0FBTyxTQUFTLENBQUM7QUFDekIsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ1gsSUFBSSxNQUFNLGFBQWEsR0FBRyxDQUFDLGdCQUFnQixDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQztBQUN0RTtBQUNBLElBQUksT0FBTyxhQUFhLENBQUMsTUFBTSxFQUFFO0FBQ2pDLFFBQVEsTUFBTSxlQUFlLEdBQUcsYUFBYSxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ3BELFFBQVEsZUFBZSxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLO0FBQy9ELFlBQVksSUFBSSxRQUFRLEVBQUU7QUFDMUIsZ0JBQWdCLE1BQU0sZ0JBQWdCLEdBQUcsUUFBUSxDQUFDO0FBQ2xELGdCQUFnQixnQkFBZ0IsQ0FBQyxNQUFNLEdBQUcsZUFBZSxDQUFDO0FBQzFELGdCQUFnQixhQUFhLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDckQsYUFBYTtBQUNiLFNBQVMsQ0FBQyxDQUFDO0FBQ1gsS0FBSztBQUNMLElBQUksT0FBTyxnQkFBZ0IsQ0FBQztBQUM1QixDQUFDO0FBQ0Q7QUFDQSxJQUFJLE9BQU8sR0FBRyxRQUFRLENBQUM7QUFDdkI7QUFDQTtBQUNBLElBQUksWUFBWSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ2hEO0FBQ0EsSUFBSSxXQUFXLEdBQUcsWUFBWSxDQUFDO0FBQy9CO0FBQ0EsSUFBSSxXQUFXLEdBQUcsWUFBWTtBQUM5QixJQUFJLFVBQVUsR0FBRyxXQUFXLENBQUM7QUFDN0I7QUFDQTtBQUNBLElBQUksYUFBYSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7QUFDckM7QUFDQTtBQUNBLElBQUksZ0JBQWdCLEdBQUcsYUFBYSxDQUFDLGNBQWMsQ0FBQztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxVQUFVLENBQUMsTUFBTSxFQUFFO0FBQzVCLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsRUFBRTtBQUM1QixJQUFJLE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzlCLEdBQUc7QUFDSCxFQUFFLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztBQUNsQixFQUFFLEtBQUssSUFBSSxHQUFHLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFO0FBQ2xDLElBQUksSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxhQUFhLEVBQUU7QUFDcEUsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZCLEtBQUs7QUFDTCxHQUFHO0FBQ0gsRUFBRSxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBQ0Q7QUFDQSxJQUFJLFNBQVMsR0FBRyxVQUFVLENBQUM7QUFDM0I7QUFDQSxJQUFJLGFBQWEsR0FBRyxjQUFjO0FBQ2xDLElBQUksUUFBUSxHQUFHLFNBQVM7QUFDeEIsSUFBSSxhQUFhLEdBQUcsYUFBYSxDQUFDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLE1BQU0sQ0FBQyxNQUFNLEVBQUU7QUFDeEIsRUFBRSxPQUFPLGFBQWEsQ0FBQyxNQUFNLENBQUMsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzFFLENBQUM7QUFDRDtBQUNBLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQztBQUNwQjtBQUNBLElBQUksT0FBTyxHQUFHLFFBQVE7QUFDdEIsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsWUFBWSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUU7QUFDeEMsRUFBRSxPQUFPLE1BQU0sSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNyRCxDQUFDO0FBQ0Q7QUFDQSxJQUFJLFdBQVcsR0FBRyxZQUFZLENBQUM7QUFDL0I7QUFDQTtBQUNBO0FBQ0EsSUFBSSxZQUFZLENBQUM7QUFDakIsSUFBSSx1QkFBdUIsQ0FBQztBQUM1QjtBQUNBLFNBQVMsbUJBQW1CLElBQUk7QUFDaEMsQ0FBQyxJQUFJLHVCQUF1QixFQUFFLE9BQU8sWUFBWSxDQUFDO0FBQ2xELENBQUMsdUJBQXVCLEdBQUcsQ0FBQyxDQUFDO0FBQzdCLENBQUMsSUFBSSxjQUFjLEdBQUcsMkJBQTJCLENBQUM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsU0FBUyxXQUFXLENBQUMsS0FBSyxFQUFFO0FBQzdCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBQzVDLEdBQUcsT0FBTyxJQUFJLENBQUM7QUFDZixFQUFFO0FBQ0Y7QUFDQSxDQUFDLFlBQVksR0FBRyxXQUFXLENBQUM7QUFDNUIsQ0FBQyxPQUFPLFlBQVksQ0FBQztBQUNyQixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksWUFBWSxDQUFDO0FBQ2pCLElBQUksdUJBQXVCLENBQUM7QUFDNUI7QUFDQSxTQUFTLG1CQUFtQixJQUFJO0FBQ2hDLENBQUMsSUFBSSx1QkFBdUIsRUFBRSxPQUFPLFlBQVksQ0FBQztBQUNsRCxDQUFDLHVCQUF1QixHQUFHLENBQUMsQ0FBQztBQUM3QixDQUFDLFNBQVMsV0FBVyxDQUFDLEtBQUssRUFBRTtBQUM3QixHQUFHLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbkMsRUFBRTtBQUNGO0FBQ0EsQ0FBQyxZQUFZLEdBQUcsV0FBVyxDQUFDO0FBQzVCLENBQUMsT0FBTyxZQUFZLENBQUM7QUFDckIsQ0FBQztBQUNEO0FBQ0EsSUFBSSxTQUFTLENBQUM7QUFDZCxJQUFJLG9CQUFvQixDQUFDO0FBQ3pCO0FBQ0EsU0FBUyxnQkFBZ0IsSUFBSTtBQUM3QixDQUFDLElBQUksb0JBQW9CLEVBQUUsT0FBTyxTQUFTLENBQUM7QUFDNUMsQ0FBQyxvQkFBb0IsR0FBRyxDQUFDLENBQUM7QUFDMUIsQ0FBQyxJQUFJLFFBQVEsR0FBRyxTQUFTO0FBQ3pCLEtBQUssV0FBVyxHQUFHLG1CQUFtQixFQUFFO0FBQ3hDLEtBQUssV0FBVyxHQUFHLG1CQUFtQixFQUFFLENBQUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxTQUFTLFFBQVEsQ0FBQyxNQUFNLEVBQUU7QUFDM0IsR0FBRyxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDakIsT0FBTyxNQUFNLEdBQUcsTUFBTSxJQUFJLElBQUksR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUNuRDtBQUNBLEdBQUcsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLFFBQVEsQ0FBQztBQUNoQyxHQUFHLE9BQU8sRUFBRSxLQUFLLEdBQUcsTUFBTSxFQUFFO0FBQzVCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUM3QixJQUFJO0FBQ0osRUFBRTtBQUNGO0FBQ0E7QUFDQSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFdBQVcsQ0FBQztBQUNoRSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLFdBQVcsQ0FBQztBQUN0QztBQUNBLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztBQUN0QixDQUFDLE9BQU8sU0FBUyxDQUFDO0FBQ2xCLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFdBQVcsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO0FBQ3ZDLEVBQUUsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQ2hCLE1BQU0sTUFBTSxHQUFHLEtBQUssSUFBSSxJQUFJLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDaEQ7QUFDQSxFQUFFLE9BQU8sRUFBRSxLQUFLLEdBQUcsTUFBTSxFQUFFO0FBQzNCLElBQUksSUFBSSxTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRTtBQUMvQyxNQUFNLE9BQU8sSUFBSSxDQUFDO0FBQ2xCLEtBQUs7QUFDTCxHQUFHO0FBQ0gsRUFBRSxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFDRDtBQUNBLElBQUksVUFBVSxHQUFHLFdBQVcsQ0FBQztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksU0FBUyxDQUFDO0FBQ2QsSUFBSSxvQkFBb0IsQ0FBQztBQUN6QjtBQUNBLFNBQVMsZ0JBQWdCLElBQUk7QUFDN0IsQ0FBQyxJQUFJLG9CQUFvQixFQUFFLE9BQU8sU0FBUyxDQUFDO0FBQzVDLENBQUMsb0JBQW9CLEdBQUcsQ0FBQyxDQUFDO0FBQzFCLENBQUMsU0FBUyxRQUFRLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRTtBQUMvQixHQUFHLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN6QixFQUFFO0FBQ0Y7QUFDQSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7QUFDdEIsQ0FBQyxPQUFPLFNBQVMsQ0FBQztBQUNsQixDQUFDO0FBQ0Q7QUFDQSxJQUFJLFFBQVEsR0FBRyxnQkFBZ0IsRUFBRTtBQUNqQyxJQUFJLFNBQVMsR0FBRyxVQUFVO0FBQzFCLElBQUksUUFBUSxHQUFHLGdCQUFnQixFQUFFLENBQUM7QUFDbEM7QUFDQTtBQUNBLElBQUksc0JBQXNCLEdBQUcsQ0FBQztBQUM5QixJQUFJLHdCQUF3QixHQUFHLENBQUMsQ0FBQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxhQUFhLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUU7QUFDNUUsRUFBRSxJQUFJLFNBQVMsR0FBRyxPQUFPLEdBQUcsc0JBQXNCO0FBQ2xELE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQzlCLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDL0I7QUFDQSxFQUFFLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxFQUFFLFNBQVMsSUFBSSxTQUFTLEdBQUcsU0FBUyxDQUFDLEVBQUU7QUFDdkUsSUFBSSxPQUFPLEtBQUssQ0FBQztBQUNqQixHQUFHO0FBQ0g7QUFDQSxFQUFFLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDcEMsRUFBRSxJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BDLEVBQUUsSUFBSSxVQUFVLElBQUksVUFBVSxFQUFFO0FBQ2hDLElBQUksT0FBTyxVQUFVLElBQUksS0FBSyxJQUFJLFVBQVUsSUFBSSxLQUFLLENBQUM7QUFDdEQsR0FBRztBQUNILEVBQUUsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQ2hCLE1BQU0sTUFBTSxHQUFHLElBQUk7QUFDbkIsTUFBTSxJQUFJLEdBQUcsQ0FBQyxPQUFPLEdBQUcsd0JBQXdCLElBQUksSUFBSSxRQUFRLEdBQUcsU0FBUyxDQUFDO0FBQzdFO0FBQ0EsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztBQUMxQixFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzFCO0FBQ0E7QUFDQSxFQUFFLE9BQU8sRUFBRSxLQUFLLEdBQUcsU0FBUyxFQUFFO0FBQzlCLElBQUksSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztBQUMvQixRQUFRLFFBQVEsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDaEM7QUFDQSxJQUFJLElBQUksVUFBVSxFQUFFO0FBQ3BCLE1BQU0sSUFBSSxRQUFRLEdBQUcsU0FBUztBQUM5QixVQUFVLFVBQVUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQztBQUNwRSxVQUFVLFVBQVUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3JFLEtBQUs7QUFDTCxJQUFJLElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtBQUNoQyxNQUFNLElBQUksUUFBUSxFQUFFO0FBQ3BCLFFBQVEsU0FBUztBQUNqQixPQUFPO0FBQ1AsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDO0FBQ3JCLE1BQU0sTUFBTTtBQUNaLEtBQUs7QUFDTDtBQUNBLElBQUksSUFBSSxJQUFJLEVBQUU7QUFDZCxNQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLFNBQVMsUUFBUSxFQUFFLFFBQVEsRUFBRTtBQUN6RCxZQUFZLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQztBQUN6QyxpQkFBaUIsUUFBUSxLQUFLLFFBQVEsSUFBSSxTQUFTLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUU7QUFDdEcsY0FBYyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDekMsYUFBYTtBQUNiLFdBQVcsQ0FBQyxFQUFFO0FBQ2QsUUFBUSxNQUFNLEdBQUcsS0FBSyxDQUFDO0FBQ3ZCLFFBQVEsTUFBTTtBQUNkLE9BQU87QUFDUCxLQUFLLE1BQU0sSUFBSTtBQUNmLFVBQVUsUUFBUSxLQUFLLFFBQVE7QUFDL0IsWUFBWSxTQUFTLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLEtBQUssQ0FBQztBQUNyRSxTQUFTLEVBQUU7QUFDWCxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDckIsTUFBTSxNQUFNO0FBQ1osS0FBSztBQUNMLEdBQUc7QUFDSCxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN6QixFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN6QixFQUFFLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFDRDtBQUNBLElBQUksWUFBWSxHQUFHLGFBQWEsQ0FBQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFlBQVksQ0FBQyxHQUFHLEVBQUU7QUFDM0IsRUFBRSxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDaEIsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMvQjtBQUNBLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEtBQUssRUFBRSxHQUFHLEVBQUU7QUFDbkMsSUFBSSxNQUFNLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNuQyxHQUFHLENBQUMsQ0FBQztBQUNMLEVBQUUsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQUNEO0FBQ0EsSUFBSSxXQUFXLEdBQUcsWUFBWSxDQUFDO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksV0FBVyxDQUFDO0FBQ2hCLElBQUksc0JBQXNCLENBQUM7QUFDM0I7QUFDQSxTQUFTLGtCQUFrQixJQUFJO0FBQy9CLENBQUMsSUFBSSxzQkFBc0IsRUFBRSxPQUFPLFdBQVcsQ0FBQztBQUNoRCxDQUFDLHNCQUFzQixHQUFHLENBQUMsQ0FBQztBQUM1QixDQUFDLFNBQVMsVUFBVSxDQUFDLEdBQUcsRUFBRTtBQUMxQixHQUFHLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztBQUNqQixPQUFPLE1BQU0sR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2hDO0FBQ0EsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLFNBQVMsS0FBSyxFQUFFO0FBQy9CLEtBQUssTUFBTSxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDO0FBQzdCLElBQUksQ0FBQyxDQUFDO0FBQ04sR0FBRyxPQUFPLE1BQU0sQ0FBQztBQUNqQixFQUFFO0FBQ0Y7QUFDQSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUM7QUFDMUIsQ0FBQyxPQUFPLFdBQVcsQ0FBQztBQUNwQixDQUFDO0FBQ0Q7QUFDQSxJQUFJLFFBQVEsR0FBRyxjQUFjLEVBQUU7QUFDL0IsSUFBSSxZQUFZLEdBQUcsV0FBVztBQUM5QixJQUFJLEVBQUUsR0FBRyxJQUFJO0FBQ2IsSUFBSSxhQUFhLEdBQUcsWUFBWTtBQUNoQyxJQUFJLFVBQVUsR0FBRyxXQUFXO0FBQzVCLElBQUksVUFBVSxHQUFHLGtCQUFrQixFQUFFLENBQUM7QUFDdEM7QUFDQTtBQUNBLElBQUksc0JBQXNCLEdBQUcsQ0FBQztBQUM5QixJQUFJLHdCQUF3QixHQUFHLENBQUMsQ0FBQztBQUNqQztBQUNBO0FBQ0EsSUFBSSxTQUFTLEdBQUcsa0JBQWtCO0FBQ2xDLElBQUksU0FBUyxHQUFHLGVBQWU7QUFDL0IsSUFBSSxVQUFVLEdBQUcsZ0JBQWdCO0FBQ2pDLElBQUksUUFBUSxHQUFHLGNBQWM7QUFDN0IsSUFBSSxXQUFXLEdBQUcsaUJBQWlCO0FBQ25DLElBQUksV0FBVyxHQUFHLGlCQUFpQjtBQUNuQyxJQUFJLFFBQVEsR0FBRyxjQUFjO0FBQzdCLElBQUksV0FBVyxHQUFHLGlCQUFpQjtBQUNuQyxJQUFJLFdBQVcsR0FBRyxpQkFBaUIsQ0FBQztBQUNwQztBQUNBLElBQUksZ0JBQWdCLEdBQUcsc0JBQXNCO0FBQzdDLElBQUksYUFBYSxHQUFHLG1CQUFtQixDQUFDO0FBQ3hDO0FBQ0E7QUFDQSxJQUFJLGFBQWEsR0FBRyxRQUFRLEdBQUcsUUFBUSxDQUFDLFNBQVMsR0FBRyxTQUFTO0FBQzdELElBQUksZUFBZSxHQUFHLGFBQWEsR0FBRyxhQUFhLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQztBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFlBQVksQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUU7QUFDakYsRUFBRSxRQUFRLEdBQUc7QUFDYixJQUFJLEtBQUssYUFBYTtBQUN0QixNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxJQUFJLEtBQUssQ0FBQyxVQUFVO0FBQ2hELFdBQVcsTUFBTSxDQUFDLFVBQVUsSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUU7QUFDbkQsUUFBUSxPQUFPLEtBQUssQ0FBQztBQUNyQixPQUFPO0FBQ1AsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUM3QixNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0FBQzNCO0FBQ0EsSUFBSSxLQUFLLGdCQUFnQjtBQUN6QixNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxJQUFJLEtBQUssQ0FBQyxVQUFVO0FBQ2hELFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtBQUN6RSxRQUFRLE9BQU8sS0FBSyxDQUFDO0FBQ3JCLE9BQU87QUFDUCxNQUFNLE9BQU8sSUFBSSxDQUFDO0FBQ2xCO0FBQ0EsSUFBSSxLQUFLLFNBQVMsQ0FBQztBQUNuQixJQUFJLEtBQUssU0FBUyxDQUFDO0FBQ25CLElBQUksS0FBSyxXQUFXO0FBQ3BCO0FBQ0E7QUFDQSxNQUFNLE9BQU8sRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDakM7QUFDQSxJQUFJLEtBQUssVUFBVTtBQUNuQixNQUFNLE9BQU8sTUFBTSxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxPQUFPLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQztBQUMxRTtBQUNBLElBQUksS0FBSyxXQUFXLENBQUM7QUFDckIsSUFBSSxLQUFLLFdBQVc7QUFDcEI7QUFDQTtBQUNBO0FBQ0EsTUFBTSxPQUFPLE1BQU0sS0FBSyxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDcEM7QUFDQSxJQUFJLEtBQUssUUFBUTtBQUNqQixNQUFNLElBQUksT0FBTyxHQUFHLFVBQVUsQ0FBQztBQUMvQjtBQUNBLElBQUksS0FBSyxRQUFRO0FBQ2pCLE1BQU0sSUFBSSxTQUFTLEdBQUcsT0FBTyxHQUFHLHNCQUFzQixDQUFDO0FBQ3ZELE1BQU0sT0FBTyxLQUFLLE9BQU8sR0FBRyxVQUFVLENBQUMsQ0FBQztBQUN4QztBQUNBLE1BQU0sSUFBSSxNQUFNLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7QUFDbkQsUUFBUSxPQUFPLEtBQUssQ0FBQztBQUNyQixPQUFPO0FBQ1A7QUFDQSxNQUFNLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDdEMsTUFBTSxJQUFJLE9BQU8sRUFBRTtBQUNuQixRQUFRLE9BQU8sT0FBTyxJQUFJLEtBQUssQ0FBQztBQUNoQyxPQUFPO0FBQ1AsTUFBTSxPQUFPLElBQUksd0JBQXdCLENBQUM7QUFDMUM7QUFDQTtBQUNBLE1BQU0sS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDL0IsTUFBTSxJQUFJLE1BQU0sR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN6RyxNQUFNLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM5QixNQUFNLE9BQU8sTUFBTSxDQUFDO0FBQ3BCO0FBQ0EsSUFBSSxLQUFLLFdBQVc7QUFDcEIsTUFBTSxJQUFJLGVBQWUsRUFBRTtBQUMzQixRQUFRLE9BQU8sZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzNFLE9BQU87QUFDUCxHQUFHO0FBQ0gsRUFBRSxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFDRDtBQUNBLElBQUksV0FBVyxHQUFHLFlBQVksQ0FBQztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksVUFBVSxDQUFDO0FBQ2YsSUFBSSxxQkFBcUIsQ0FBQztBQUMxQjtBQUNBLFNBQVMsaUJBQWlCLElBQUk7QUFDOUIsQ0FBQyxJQUFJLHFCQUFxQixFQUFFLE9BQU8sVUFBVSxDQUFDO0FBQzlDLENBQUMscUJBQXFCLEdBQUcsQ0FBQyxDQUFDO0FBQzNCLENBQUMsU0FBUyxTQUFTLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRTtBQUNuQyxHQUFHLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztBQUNqQixPQUFPLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTTtBQUM3QixPQUFPLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0FBQzdCO0FBQ0EsR0FBRyxPQUFPLEVBQUUsS0FBSyxHQUFHLE1BQU0sRUFBRTtBQUM1QixLQUFLLEtBQUssQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzNDLElBQUk7QUFDSixHQUFHLE9BQU8sS0FBSyxDQUFDO0FBQ2hCLEVBQUU7QUFDRjtBQUNBLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQztBQUN4QixDQUFDLE9BQU8sVUFBVSxDQUFDO0FBQ25CLENBQUM7QUFDRDtBQUNBLElBQUksV0FBVyxHQUFHLGlCQUFpQixFQUFFO0FBQ3JDLElBQUksU0FBUyxHQUFHLFNBQVMsQ0FBQztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFO0FBQ3pELEVBQUUsSUFBSSxNQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2hDLEVBQUUsT0FBTyxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxHQUFHLFdBQVcsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDL0UsQ0FBQztBQUNEO0FBQ0EsSUFBSSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsYUFBYSxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7QUFDekMsRUFBRSxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDaEIsTUFBTSxNQUFNLEdBQUcsS0FBSyxJQUFJLElBQUksR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFDL0MsTUFBTSxRQUFRLEdBQUcsQ0FBQztBQUNsQixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7QUFDbEI7QUFDQSxFQUFFLE9BQU8sRUFBRSxLQUFLLEdBQUcsTUFBTSxFQUFFO0FBQzNCLElBQUksSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzdCLElBQUksSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRTtBQUN4QyxNQUFNLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQztBQUNqQyxLQUFLO0FBQ0wsR0FBRztBQUNILEVBQUUsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQUNEO0FBQ0EsSUFBSSxZQUFZLEdBQUcsYUFBYSxDQUFDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFdBQVcsR0FBRztBQUN2QixFQUFFLE9BQU8sRUFBRSxDQUFDO0FBQ1osQ0FBQztBQUNEO0FBQ0EsSUFBSSxXQUFXLEdBQUcsV0FBVyxDQUFDO0FBQzlCO0FBQ0EsSUFBSSxXQUFXLEdBQUcsWUFBWTtBQUM5QixJQUFJLFdBQVcsR0FBRyxXQUFXLENBQUM7QUFDOUI7QUFDQTtBQUNBLElBQUksYUFBYSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7QUFDckM7QUFDQTtBQUNBLElBQUksb0JBQW9CLEdBQUcsYUFBYSxDQUFDLG9CQUFvQixDQUFDO0FBQzlEO0FBQ0E7QUFDQSxJQUFJLGtCQUFrQixHQUFHLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxZQUFZLEdBQUcsQ0FBQyxrQkFBa0IsR0FBRyxXQUFXLEdBQUcsU0FBUyxNQUFNLEVBQUU7QUFDeEUsRUFBRSxJQUFJLE1BQU0sSUFBSSxJQUFJLEVBQUU7QUFDdEIsSUFBSSxPQUFPLEVBQUUsQ0FBQztBQUNkLEdBQUc7QUFDSCxFQUFFLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDMUIsRUFBRSxPQUFPLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsRUFBRSxTQUFTLE1BQU0sRUFBRTtBQUNsRSxJQUFJLE9BQU8sb0JBQW9CLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNyRCxHQUFHLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUNGO0FBQ0EsSUFBSSxXQUFXLEdBQUcsWUFBWSxDQUFDO0FBQy9CO0FBQ0EsSUFBSSxnQkFBZ0IsR0FBRyxlQUFlO0FBQ3RDLElBQUksWUFBWSxHQUFHLFdBQVc7QUFDOUIsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFlBQVksQ0FBQyxNQUFNLEVBQUU7QUFDOUIsRUFBRSxPQUFPLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDeEQsQ0FBQztBQUNEO0FBQ0EsSUFBSSxXQUFXLEdBQUcsWUFBWSxDQUFDO0FBQy9CO0FBQ0EsSUFBSSxZQUFZLEdBQUcsV0FBVyxDQUFDO0FBQy9CO0FBQ0E7QUFDQSxJQUFJLHNCQUFzQixHQUFHLENBQUMsQ0FBQztBQUMvQjtBQUNBO0FBQ0EsSUFBSSxhQUFhLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQztBQUNyQztBQUNBO0FBQ0EsSUFBSSxnQkFBZ0IsR0FBRyxhQUFhLENBQUMsY0FBYyxDQUFDO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGNBQWMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRTtBQUM5RSxFQUFFLElBQUksU0FBUyxHQUFHLE9BQU8sR0FBRyxzQkFBc0I7QUFDbEQsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQztBQUNyQyxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsTUFBTTtBQUNqQyxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDO0FBQ3BDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7QUFDbEM7QUFDQSxFQUFFLElBQUksU0FBUyxJQUFJLFNBQVMsSUFBSSxDQUFDLFNBQVMsRUFBRTtBQUM1QyxJQUFJLE9BQU8sS0FBSyxDQUFDO0FBQ2pCLEdBQUc7QUFDSCxFQUFFLElBQUksS0FBSyxHQUFHLFNBQVMsQ0FBQztBQUN4QixFQUFFLE9BQU8sS0FBSyxFQUFFLEVBQUU7QUFDbEIsSUFBSSxJQUFJLEdBQUcsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDOUIsSUFBSSxJQUFJLEVBQUUsU0FBUyxHQUFHLEdBQUcsSUFBSSxLQUFLLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFO0FBQ3pFLE1BQU0sT0FBTyxLQUFLLENBQUM7QUFDbkIsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBLEVBQUUsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNyQyxFQUFFLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDcEMsRUFBRSxJQUFJLFVBQVUsSUFBSSxVQUFVLEVBQUU7QUFDaEMsSUFBSSxPQUFPLFVBQVUsSUFBSSxLQUFLLElBQUksVUFBVSxJQUFJLE1BQU0sQ0FBQztBQUN2RCxHQUFHO0FBQ0gsRUFBRSxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7QUFDcEIsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztBQUMzQixFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzNCO0FBQ0EsRUFBRSxJQUFJLFFBQVEsR0FBRyxTQUFTLENBQUM7QUFDM0IsRUFBRSxPQUFPLEVBQUUsS0FBSyxHQUFHLFNBQVMsRUFBRTtBQUM5QixJQUFJLEdBQUcsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUIsSUFBSSxJQUFJLFFBQVEsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDO0FBQzlCLFFBQVEsUUFBUSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM5QjtBQUNBLElBQUksSUFBSSxVQUFVLEVBQUU7QUFDcEIsTUFBTSxJQUFJLFFBQVEsR0FBRyxTQUFTO0FBQzlCLFVBQVUsVUFBVSxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDO0FBQ25FLFVBQVUsVUFBVSxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDcEUsS0FBSztBQUNMO0FBQ0EsSUFBSSxJQUFJLEVBQUUsUUFBUSxLQUFLLFNBQVM7QUFDaEMsYUFBYSxRQUFRLEtBQUssUUFBUSxJQUFJLFNBQVMsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsS0FBSyxDQUFDO0FBQy9GLFlBQVksUUFBUTtBQUNwQixTQUFTLEVBQUU7QUFDWCxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDckIsTUFBTSxNQUFNO0FBQ1osS0FBSztBQUNMLElBQUksUUFBUSxLQUFLLFFBQVEsR0FBRyxHQUFHLElBQUksYUFBYSxDQUFDLENBQUM7QUFDbEQsR0FBRztBQUNILEVBQUUsSUFBSSxNQUFNLElBQUksQ0FBQyxRQUFRLEVBQUU7QUFDM0IsSUFBSSxJQUFJLE9BQU8sR0FBRyxNQUFNLENBQUMsV0FBVztBQUNwQyxRQUFRLE9BQU8sR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO0FBQ3BDO0FBQ0E7QUFDQSxJQUFJLElBQUksT0FBTyxJQUFJLE9BQU87QUFDMUIsU0FBUyxhQUFhLElBQUksTUFBTSxJQUFJLGFBQWEsSUFBSSxLQUFLLENBQUM7QUFDM0QsUUFBUSxFQUFFLE9BQU8sT0FBTyxJQUFJLFVBQVUsSUFBSSxPQUFPLFlBQVksT0FBTztBQUNwRSxVQUFVLE9BQU8sT0FBTyxJQUFJLFVBQVUsSUFBSSxPQUFPLFlBQVksT0FBTyxDQUFDLEVBQUU7QUFDdkUsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDO0FBQ3JCLEtBQUs7QUFDTCxHQUFHO0FBQ0gsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDMUIsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDekIsRUFBRSxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBQ0Q7QUFDQSxJQUFJLGFBQWEsR0FBRyxjQUFjLENBQUM7QUFDbkM7QUFDQSxJQUFJLFdBQVcsR0FBRyxVQUFVO0FBQzVCLElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQztBQUNuQjtBQUNBO0FBQ0EsSUFBSSxVQUFVLEdBQUcsV0FBVyxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNqRDtBQUNBLElBQUksU0FBUyxHQUFHLFVBQVUsQ0FBQztBQUMzQjtBQUNBLElBQUksV0FBVyxHQUFHLFVBQVU7QUFDNUIsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDO0FBQ25CO0FBQ0E7QUFDQSxJQUFJLFNBQVMsR0FBRyxXQUFXLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQy9DO0FBQ0EsSUFBSSxRQUFRLEdBQUcsU0FBUyxDQUFDO0FBQ3pCO0FBQ0EsSUFBSSxJQUFJLENBQUM7QUFDVCxJQUFJLGVBQWUsQ0FBQztBQUNwQjtBQUNBLFNBQVMsV0FBVyxJQUFJO0FBQ3hCLENBQUMsSUFBSSxlQUFlLEVBQUUsT0FBTyxJQUFJLENBQUM7QUFDbEMsQ0FBQyxlQUFlLEdBQUcsQ0FBQyxDQUFDO0FBQ3JCLENBQUMsSUFBSSxTQUFTLEdBQUcsVUFBVTtBQUMzQixLQUFLLElBQUksR0FBRyxLQUFLLENBQUM7QUFDbEI7QUFDQTtBQUNBLENBQUMsSUFBSSxHQUFHLEdBQUcsU0FBUyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNsQztBQUNBLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztBQUNaLENBQUMsT0FBTyxJQUFJLENBQUM7QUFDYixDQUFDO0FBQ0Q7QUFDQSxJQUFJLFNBQVMsR0FBRyxVQUFVO0FBQzFCLElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQztBQUNuQjtBQUNBO0FBQ0EsSUFBSSxTQUFTLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztBQUM3QztBQUNBLElBQUksUUFBUSxHQUFHLFNBQVMsQ0FBQztBQUN6QjtBQUNBLElBQUksUUFBUSxHQUFHLFNBQVM7QUFDeEIsSUFBSSxLQUFLLEdBQUcsSUFBSTtBQUNoQixJQUFJLFNBQVMsR0FBRyxRQUFRO0FBQ3hCLElBQUksR0FBRyxHQUFHLFdBQVcsRUFBRTtBQUN2QixJQUFJLFNBQVMsR0FBRyxRQUFRO0FBQ3hCLElBQUksWUFBWSxHQUFHLFdBQVc7QUFDOUIsSUFBSSxRQUFRLEdBQUcsU0FBUyxDQUFDO0FBQ3pCO0FBQ0E7QUFDQSxJQUFJLFFBQVEsR0FBRyxjQUFjO0FBQzdCLElBQUksV0FBVyxHQUFHLGlCQUFpQjtBQUNuQyxJQUFJLFVBQVUsR0FBRyxrQkFBa0I7QUFDbkMsSUFBSSxRQUFRLEdBQUcsY0FBYztBQUM3QixJQUFJLFlBQVksR0FBRyxrQkFBa0IsQ0FBQztBQUN0QztBQUNBLElBQUksYUFBYSxHQUFHLG1CQUFtQixDQUFDO0FBQ3hDO0FBQ0E7QUFDQSxJQUFJLGtCQUFrQixHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUM7QUFDM0MsSUFBSSxhQUFhLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQztBQUNuQyxJQUFJLGlCQUFpQixHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUM7QUFDM0MsSUFBSSxhQUFhLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQztBQUNqQyxJQUFJLGlCQUFpQixHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxRQUFRLEdBQUcsWUFBWSxDQUFDO0FBQzVCO0FBQ0E7QUFDQSxJQUFJLENBQUMsUUFBUSxJQUFJLFFBQVEsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksYUFBYTtBQUM1RSxLQUFLLEtBQUssSUFBSSxRQUFRLENBQUMsSUFBSSxLQUFLLENBQUMsSUFBSSxRQUFRLENBQUM7QUFDOUMsS0FBSyxTQUFTLElBQUksUUFBUSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLFVBQVUsQ0FBQztBQUM5RCxLQUFLLEdBQUcsSUFBSSxRQUFRLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxRQUFRLENBQUM7QUFDMUMsS0FBSyxTQUFTLElBQUksUUFBUSxDQUFDLElBQUksU0FBUyxDQUFDLElBQUksWUFBWSxDQUFDLEVBQUU7QUFDNUQsRUFBRSxRQUFRLEdBQUcsU0FBUyxLQUFLLEVBQUU7QUFDN0IsSUFBSSxJQUFJLE1BQU0sR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDO0FBQ3BDLFFBQVEsSUFBSSxHQUFHLE1BQU0sSUFBSSxXQUFXLEdBQUcsS0FBSyxDQUFDLFdBQVcsR0FBRyxTQUFTO0FBQ3BFLFFBQVEsVUFBVSxHQUFHLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2hEO0FBQ0EsSUFBSSxJQUFJLFVBQVUsRUFBRTtBQUNwQixNQUFNLFFBQVEsVUFBVTtBQUN4QixRQUFRLEtBQUssa0JBQWtCLEVBQUUsT0FBTyxhQUFhLENBQUM7QUFDdEQsUUFBUSxLQUFLLGFBQWEsRUFBRSxPQUFPLFFBQVEsQ0FBQztBQUM1QyxRQUFRLEtBQUssaUJBQWlCLEVBQUUsT0FBTyxVQUFVLENBQUM7QUFDbEQsUUFBUSxLQUFLLGFBQWEsRUFBRSxPQUFPLFFBQVEsQ0FBQztBQUM1QyxRQUFRLEtBQUssaUJBQWlCLEVBQUUsT0FBTyxZQUFZLENBQUM7QUFDcEQsT0FBTztBQUNQLEtBQUs7QUFDTCxJQUFJLE9BQU8sTUFBTSxDQUFDO0FBQ2xCLEdBQUcsQ0FBQztBQUNKLENBQUM7QUFDRDtBQUNBLElBQUksT0FBTyxHQUFHLFFBQVEsQ0FBQztBQUN2QjtBQUNBLElBQUksT0FBTyxHQUFHLE1BQU07QUFDcEIsSUFBSSxXQUFXLEdBQUcsWUFBWTtBQUM5QixJQUFJLFVBQVUsR0FBRyxXQUFXO0FBQzVCLElBQUksWUFBWSxHQUFHLGFBQWE7QUFDaEMsSUFBSSxRQUFRLEdBQUcsT0FBTztBQUN0QixJQUFJLFNBQVMsR0FBRyxTQUFTO0FBQ3pCLElBQUksVUFBVSxHQUFHLFVBQVUsQ0FBQyxPQUFPO0FBQ25DLElBQUksWUFBWSxHQUFHLGNBQWMsQ0FBQztBQUNsQztBQUNBO0FBQ0EsSUFBSSxzQkFBc0IsR0FBRyxDQUFDLENBQUM7QUFDL0I7QUFDQTtBQUNBLElBQUksU0FBUyxHQUFHLG9CQUFvQjtBQUNwQyxJQUFJLFVBQVUsR0FBRyxnQkFBZ0I7QUFDakMsSUFBSSxXQUFXLEdBQUcsaUJBQWlCLENBQUM7QUFDcEM7QUFDQTtBQUNBLElBQUksYUFBYSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7QUFDckM7QUFDQTtBQUNBLElBQUksZ0JBQWdCLEdBQUcsYUFBYSxDQUFDLGNBQWMsQ0FBQztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFO0FBQ2pGLEVBQUUsSUFBSSxRQUFRLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQztBQUNsQyxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDO0FBQ2pDLE1BQU0sTUFBTSxHQUFHLFFBQVEsR0FBRyxVQUFVLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztBQUN2RCxNQUFNLE1BQU0sR0FBRyxRQUFRLEdBQUcsVUFBVSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN2RDtBQUNBLEVBQUUsTUFBTSxHQUFHLE1BQU0sSUFBSSxTQUFTLEdBQUcsV0FBVyxHQUFHLE1BQU0sQ0FBQztBQUN0RCxFQUFFLE1BQU0sR0FBRyxNQUFNLElBQUksU0FBUyxHQUFHLFdBQVcsR0FBRyxNQUFNLENBQUM7QUFDdEQ7QUFDQSxFQUFFLElBQUksUUFBUSxHQUFHLE1BQU0sSUFBSSxXQUFXO0FBQ3RDLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxXQUFXO0FBQ3RDLE1BQU0sU0FBUyxHQUFHLE1BQU0sSUFBSSxNQUFNLENBQUM7QUFDbkM7QUFDQSxFQUFFLElBQUksU0FBUyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRTtBQUN2QyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDNUIsTUFBTSxPQUFPLEtBQUssQ0FBQztBQUNuQixLQUFLO0FBQ0wsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDO0FBQ3BCLElBQUksUUFBUSxHQUFHLEtBQUssQ0FBQztBQUNyQixHQUFHO0FBQ0gsRUFBRSxJQUFJLFNBQVMsSUFBSSxDQUFDLFFBQVEsRUFBRTtBQUM5QixJQUFJLEtBQUssS0FBSyxLQUFLLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQztBQUNuQyxJQUFJLE9BQU8sQ0FBQyxRQUFRLElBQUksWUFBWSxDQUFDLE1BQU0sQ0FBQztBQUM1QyxRQUFRLFdBQVcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQztBQUN6RSxRQUFRLFVBQVUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNqRixHQUFHO0FBQ0gsRUFBRSxJQUFJLEVBQUUsT0FBTyxHQUFHLHNCQUFzQixDQUFDLEVBQUU7QUFDM0MsSUFBSSxJQUFJLFlBQVksR0FBRyxRQUFRLElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxhQUFhLENBQUM7QUFDL0UsUUFBUSxZQUFZLEdBQUcsUUFBUSxJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFDL0U7QUFDQSxJQUFJLElBQUksWUFBWSxJQUFJLFlBQVksRUFBRTtBQUN0QyxNQUFNLElBQUksWUFBWSxHQUFHLFlBQVksR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLEdBQUcsTUFBTTtBQUMvRCxVQUFVLFlBQVksR0FBRyxZQUFZLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxHQUFHLEtBQUssQ0FBQztBQUM5RDtBQUNBLE1BQU0sS0FBSyxLQUFLLEtBQUssR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDO0FBQ3JDLE1BQU0sT0FBTyxTQUFTLENBQUMsWUFBWSxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQy9FLEtBQUs7QUFDTCxHQUFHO0FBQ0gsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFO0FBQ2xCLElBQUksT0FBTyxLQUFLLENBQUM7QUFDakIsR0FBRztBQUNILEVBQUUsS0FBSyxLQUFLLEtBQUssR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDO0FBQ2pDLEVBQUUsT0FBTyxZQUFZLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUM1RSxDQUFDO0FBQ0Q7QUFDQSxJQUFJLGdCQUFnQixHQUFHLGlCQUFpQixDQUFDO0FBQ3pDO0FBQ0EsSUFBSSxlQUFlLEdBQUcsZ0JBQWdCO0FBQ3RDLElBQUksY0FBYyxHQUFHLGNBQWMsQ0FBQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGFBQWEsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFO0FBQ2pFLEVBQUUsSUFBSSxLQUFLLEtBQUssS0FBSyxFQUFFO0FBQ3ZCLElBQUksT0FBTyxJQUFJLENBQUM7QUFDaEIsR0FBRztBQUNILEVBQUUsSUFBSSxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssSUFBSSxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtBQUM1RixJQUFJLE9BQU8sS0FBSyxLQUFLLEtBQUssSUFBSSxLQUFLLEtBQUssS0FBSyxDQUFDO0FBQzlDLEdBQUc7QUFDSCxFQUFFLE9BQU8sZUFBZSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDbEYsQ0FBQztBQUNEO0FBQ0EsSUFBSSxZQUFZLEdBQUcsYUFBYSxDQUFDO0FBQ2pDO0FBQ0EsSUFBSSxPQUFPLEdBQUcsTUFBTTtBQUNwQixJQUFJLGFBQWEsR0FBRyxZQUFZLENBQUM7QUFDakM7QUFDQTtBQUNBLElBQUksc0JBQXNCLEdBQUcsQ0FBQztBQUM5QixJQUFJLHdCQUF3QixHQUFHLENBQUMsQ0FBQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxhQUFhLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFO0FBQzlELEVBQUUsSUFBSSxLQUFLLEdBQUcsU0FBUyxDQUFDLE1BQU07QUFDOUIsTUFBTSxNQUFNLEdBQUcsS0FBSztBQUNwQixNQUFNLFlBQVksR0FBRyxDQUFDLFVBQVUsQ0FBQztBQUNqQztBQUNBLEVBQUUsSUFBSSxNQUFNLElBQUksSUFBSSxFQUFFO0FBQ3RCLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUNuQixHQUFHO0FBQ0gsRUFBRSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzFCLEVBQUUsT0FBTyxLQUFLLEVBQUUsRUFBRTtBQUNsQixJQUFJLElBQUksSUFBSSxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNoQyxJQUFJLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztBQUNoQyxZQUFZLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDO0FBQ2hDLFVBQVU7QUFDVixNQUFNLE9BQU8sS0FBSyxDQUFDO0FBQ25CLEtBQUs7QUFDTCxHQUFHO0FBQ0gsRUFBRSxPQUFPLEVBQUUsS0FBSyxHQUFHLE1BQU0sRUFBRTtBQUMzQixJQUFJLElBQUksR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDNUIsSUFBSSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3JCLFFBQVEsUUFBUSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUM7QUFDOUIsUUFBUSxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNCO0FBQ0EsSUFBSSxJQUFJLFlBQVksSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7QUFDakMsTUFBTSxJQUFJLFFBQVEsS0FBSyxTQUFTLElBQUksRUFBRSxHQUFHLElBQUksTUFBTSxDQUFDLEVBQUU7QUFDdEQsUUFBUSxPQUFPLEtBQUssQ0FBQztBQUNyQixPQUFPO0FBQ1AsS0FBSyxNQUFNO0FBQ1gsTUFBTSxJQUFJLEtBQUssR0FBRyxJQUFJLE9BQU8sQ0FBQztBQUM5QixNQUFNLElBQUksVUFBVSxFQUFFO0FBQ3RCLFFBQVEsSUFBSSxNQUFNLEdBQUcsVUFBVSxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDaEYsT0FBTztBQUNQLE1BQU0sSUFBSSxFQUFFLE1BQU0sS0FBSyxTQUFTO0FBQ2hDLGNBQWMsYUFBYSxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsc0JBQXNCLEdBQUcsd0JBQXdCLEVBQUUsVUFBVSxFQUFFLEtBQUssQ0FBQztBQUNySCxjQUFjLE1BQU07QUFDcEIsV0FBVyxFQUFFO0FBQ2IsUUFBUSxPQUFPLEtBQUssQ0FBQztBQUNyQixPQUFPO0FBQ1AsS0FBSztBQUNMLEdBQUc7QUFDSCxFQUFFLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUNEO0FBQ0EsSUFBSSxZQUFZLEdBQUcsYUFBYSxDQUFDO0FBQ2pDO0FBQ0EsSUFBSSxVQUFVLEdBQUcsVUFBVSxDQUFDO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsb0JBQW9CLENBQUMsS0FBSyxFQUFFO0FBQ3JDLEVBQUUsT0FBTyxLQUFLLEtBQUssS0FBSyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQy9DLENBQUM7QUFDRDtBQUNBLElBQUksbUJBQW1CLEdBQUcsb0JBQW9CLENBQUM7QUFDL0M7QUFDQSxJQUFJLG9CQUFvQixHQUFHLG1CQUFtQjtBQUM5QyxJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsY0FBYyxDQUFDLE1BQU0sRUFBRTtBQUNoQyxFQUFFLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDN0IsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUM3QjtBQUNBLEVBQUUsT0FBTyxNQUFNLEVBQUUsRUFBRTtBQUNuQixJQUFJLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDNUIsUUFBUSxLQUFLLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzVCO0FBQ0EsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDL0QsR0FBRztBQUNILEVBQUUsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQUNEO0FBQ0EsSUFBSSxhQUFhLEdBQUcsY0FBYyxDQUFDO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUU7QUFDbEQsRUFBRSxPQUFPLFNBQVMsTUFBTSxFQUFFO0FBQzFCLElBQUksSUFBSSxNQUFNLElBQUksSUFBSSxFQUFFO0FBQ3hCLE1BQU0sT0FBTyxLQUFLLENBQUM7QUFDbkIsS0FBSztBQUNMLElBQUksT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssUUFBUTtBQUNuQyxPQUFPLFFBQVEsS0FBSyxTQUFTLEtBQUssR0FBRyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUQsR0FBRyxDQUFDO0FBQ0osQ0FBQztBQUNEO0FBQ0EsSUFBSSx3QkFBd0IsR0FBRyx5QkFBeUIsQ0FBQztBQUN6RDtBQUNBLElBQUksV0FBVyxHQUFHLFlBQVk7QUFDOUIsSUFBSSxZQUFZLEdBQUcsYUFBYTtBQUNoQyxJQUFJLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGFBQWEsQ0FBQyxNQUFNLEVBQUU7QUFDL0IsRUFBRSxJQUFJLFNBQVMsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDdkMsRUFBRSxJQUFJLFNBQVMsQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUNoRCxJQUFJLE9BQU8seUJBQXlCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZFLEdBQUc7QUFDSCxFQUFFLE9BQU8sU0FBUyxNQUFNLEVBQUU7QUFDMUIsSUFBSSxPQUFPLE1BQU0sS0FBSyxNQUFNLElBQUksV0FBVyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDdkUsR0FBRyxDQUFDO0FBQ0osQ0FBQztBQUNEO0FBQ0EsSUFBSSxZQUFZLEdBQUcsYUFBYSxDQUFDO0FBQ2pDO0FBQ0EsSUFBSSxZQUFZLEdBQUcsV0FBVztBQUM5QixJQUFJLGNBQWMsR0FBRyxjQUFjLENBQUM7QUFDcEM7QUFDQTtBQUNBLElBQUksV0FBVyxHQUFHLGlCQUFpQixDQUFDO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsVUFBVSxDQUFDLEtBQUssRUFBRTtBQUMzQixFQUFFLE9BQU8sT0FBTyxLQUFLLElBQUksUUFBUTtBQUNqQyxLQUFLLGNBQWMsQ0FBQyxLQUFLLENBQUMsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksV0FBVyxDQUFDLENBQUM7QUFDbEUsQ0FBQztBQUNEO0FBQ0EsSUFBSSxVQUFVLEdBQUcsVUFBVSxDQUFDO0FBQzVCO0FBQ0EsSUFBSSxTQUFTLEdBQUcsU0FBUztBQUN6QixJQUFJLFVBQVUsR0FBRyxVQUFVLENBQUM7QUFDNUI7QUFDQTtBQUNBLElBQUksWUFBWSxHQUFHLGtEQUFrRDtBQUNyRSxJQUFJLGFBQWEsR0FBRyxPQUFPLENBQUM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxPQUFPLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRTtBQUNoQyxFQUFFLElBQUksU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ3hCLElBQUksT0FBTyxLQUFLLENBQUM7QUFDakIsR0FBRztBQUNILEVBQUUsSUFBSSxJQUFJLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDMUIsRUFBRSxJQUFJLElBQUksSUFBSSxRQUFRLElBQUksSUFBSSxJQUFJLFFBQVEsSUFBSSxJQUFJLElBQUksU0FBUztBQUMvRCxNQUFNLEtBQUssSUFBSSxJQUFJLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQzFDLElBQUksT0FBTyxJQUFJLENBQUM7QUFDaEIsR0FBRztBQUNILEVBQUUsT0FBTyxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7QUFDL0QsS0FBSyxNQUFNLElBQUksSUFBSSxJQUFJLEtBQUssSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUNoRCxDQUFDO0FBQ0Q7QUFDQSxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUM7QUFDckI7QUFDQSxJQUFJLFFBQVEsR0FBRyxTQUFTLENBQUM7QUFDekI7QUFDQTtBQUNBLElBQUksaUJBQWlCLEdBQUcscUJBQXFCLENBQUM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxTQUFTLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRTtBQUNuQyxFQUFFLElBQUksT0FBTyxJQUFJLElBQUksVUFBVSxLQUFLLFFBQVEsSUFBSSxJQUFJLElBQUksT0FBTyxRQUFRLElBQUksVUFBVSxDQUFDLEVBQUU7QUFDeEYsSUFBSSxNQUFNLElBQUksU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDM0MsR0FBRztBQUNILEVBQUUsSUFBSSxRQUFRLEdBQUcsV0FBVztBQUM1QixJQUFJLElBQUksSUFBSSxHQUFHLFNBQVM7QUFDeEIsUUFBUSxHQUFHLEdBQUcsUUFBUSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDN0QsUUFBUSxLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQztBQUMvQjtBQUNBLElBQUksSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQ3hCLE1BQU0sT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzVCLEtBQUs7QUFDTCxJQUFJLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3hDLElBQUksUUFBUSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUM7QUFDckQsSUFBSSxPQUFPLE1BQU0sQ0FBQztBQUNsQixHQUFHLENBQUM7QUFDSixFQUFFLFFBQVEsQ0FBQyxLQUFLLEdBQUcsS0FBSyxTQUFTLENBQUMsS0FBSyxJQUFJLFFBQVEsQ0FBQyxDQUFDO0FBQ3JELEVBQUUsT0FBTyxRQUFRLENBQUM7QUFDbEIsQ0FBQztBQUNEO0FBQ0E7QUFDQSxTQUFTLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQztBQUMzQjtBQUNBLElBQUksU0FBUyxHQUFHLFNBQVMsQ0FBQztBQUMxQjtBQUNBLElBQUksT0FBTyxHQUFHLFNBQVMsQ0FBQztBQUN4QjtBQUNBO0FBQ0EsSUFBSSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxlQUFlLENBQUMsSUFBSSxFQUFFO0FBQy9CLEVBQUUsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLElBQUksRUFBRSxTQUFTLEdBQUcsRUFBRTtBQUMzQyxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxnQkFBZ0IsRUFBRTtBQUN6QyxNQUFNLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNwQixLQUFLO0FBQ0wsSUFBSSxPQUFPLEdBQUcsQ0FBQztBQUNmLEdBQUcsQ0FBQyxDQUFDO0FBQ0w7QUFDQSxFQUFFLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDM0IsRUFBRSxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBQ0Q7QUFDQSxJQUFJLGNBQWMsR0FBRyxlQUFlLENBQUM7QUFDckM7QUFDQSxJQUFJLGFBQWEsR0FBRyxjQUFjLENBQUM7QUFDbkM7QUFDQTtBQUNBLElBQUksVUFBVSxHQUFHLGtHQUFrRyxDQUFDO0FBQ3BIO0FBQ0E7QUFDQSxJQUFJLFlBQVksR0FBRyxVQUFVLENBQUM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksY0FBYyxHQUFHLGFBQWEsQ0FBQyxTQUFTLE1BQU0sRUFBRTtBQUNwRCxFQUFFLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztBQUNsQixFQUFFLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLFVBQVU7QUFDM0MsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3BCLEdBQUc7QUFDSCxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLFNBQVMsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFO0FBQ3ZFLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLElBQUksTUFBTSxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDbkYsR0FBRyxDQUFDLENBQUM7QUFDTCxFQUFFLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMsQ0FBQyxDQUFDO0FBQ0g7QUFDQSxJQUFJLGFBQWEsR0FBRyxjQUFjLENBQUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksU0FBUyxDQUFDO0FBQ2QsSUFBSSxvQkFBb0IsQ0FBQztBQUN6QjtBQUNBLFNBQVMsZ0JBQWdCLElBQUk7QUFDN0IsQ0FBQyxJQUFJLG9CQUFvQixFQUFFLE9BQU8sU0FBUyxDQUFDO0FBQzVDLENBQUMsb0JBQW9CLEdBQUcsQ0FBQyxDQUFDO0FBQzFCLENBQUMsU0FBUyxRQUFRLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRTtBQUNwQyxHQUFHLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztBQUNqQixPQUFPLE1BQU0sR0FBRyxLQUFLLElBQUksSUFBSSxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTTtBQUNoRCxPQUFPLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDOUI7QUFDQSxHQUFHLE9BQU8sRUFBRSxLQUFLLEdBQUcsTUFBTSxFQUFFO0FBQzVCLEtBQUssTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzFELElBQUk7QUFDSixHQUFHLE9BQU8sTUFBTSxDQUFDO0FBQ2pCLEVBQUU7QUFDRjtBQUNBLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztBQUN0QixDQUFDLE9BQU8sU0FBUyxDQUFDO0FBQ2xCLENBQUM7QUFDRDtBQUNBLElBQUksUUFBUSxHQUFHLGNBQWMsRUFBRTtBQUMvQixJQUFJLFVBQVUsR0FBRyxnQkFBZ0IsRUFBRTtBQUNuQyxJQUFJLFNBQVMsR0FBRyxTQUFTO0FBQ3pCLElBQUksVUFBVSxHQUFHLFVBQVUsQ0FBQztBQUM1QjtBQUNBO0FBQ0EsSUFBSSxVQUFVLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN2QjtBQUNBO0FBQ0EsSUFBSSxhQUFhLEdBQUcsUUFBUSxHQUFHLFFBQVEsQ0FBQyxTQUFTLEdBQUcsU0FBUztBQUM3RCxJQUFJLGNBQWMsR0FBRyxhQUFhLEdBQUcsYUFBYSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUM7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxjQUFjLENBQUMsS0FBSyxFQUFFO0FBQy9CO0FBQ0EsRUFBRSxJQUFJLE9BQU8sS0FBSyxJQUFJLFFBQVEsRUFBRTtBQUNoQyxJQUFJLE9BQU8sS0FBSyxDQUFDO0FBQ2pCLEdBQUc7QUFDSCxFQUFFLElBQUksU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ3hCO0FBQ0EsSUFBSSxPQUFPLFVBQVUsQ0FBQyxLQUFLLEVBQUUsY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2xELEdBQUc7QUFDSCxFQUFFLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ3pCLElBQUksT0FBTyxjQUFjLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDNUQsR0FBRztBQUNILEVBQUUsSUFBSSxNQUFNLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBQzVCLEVBQUUsT0FBTyxDQUFDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxLQUFLLENBQUMsVUFBVSxJQUFJLElBQUksR0FBRyxNQUFNLENBQUM7QUFDdkUsQ0FBQztBQUNEO0FBQ0EsSUFBSSxhQUFhLEdBQUcsY0FBYyxDQUFDO0FBQ25DO0FBQ0EsSUFBSSxZQUFZLEdBQUcsYUFBYSxDQUFDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxVQUFVLENBQUMsS0FBSyxFQUFFO0FBQzNCLEVBQUUsT0FBTyxLQUFLLElBQUksSUFBSSxHQUFHLEVBQUUsR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbEQsQ0FBQztBQUNEO0FBQ0EsSUFBSSxVQUFVLEdBQUcsVUFBVSxDQUFDO0FBQzVCO0FBQ0EsSUFBSSxTQUFTLEdBQUcsU0FBUztBQUN6QixJQUFJLE9BQU8sR0FBRyxNQUFNO0FBQ3BCLElBQUksY0FBYyxHQUFHLGFBQWE7QUFDbEMsSUFBSSxVQUFVLEdBQUcsVUFBVSxDQUFDO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsVUFBVSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUU7QUFDbkMsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUN4QixJQUFJLE9BQU8sS0FBSyxDQUFDO0FBQ2pCLEdBQUc7QUFDSCxFQUFFLE9BQU8sT0FBTyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLGNBQWMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUM5RSxDQUFDO0FBQ0Q7QUFDQSxJQUFJLFNBQVMsR0FBRyxVQUFVLENBQUM7QUFDM0I7QUFDQSxJQUFJLFVBQVUsR0FBRyxVQUFVLENBQUM7QUFDNUI7QUFDQTtBQUNBLElBQUksVUFBVSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsT0FBTyxDQUFDLEtBQUssRUFBRTtBQUN4QixFQUFFLElBQUksT0FBTyxLQUFLLElBQUksUUFBUSxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUNyRCxJQUFJLE9BQU8sS0FBSyxDQUFDO0FBQ2pCLEdBQUc7QUFDSCxFQUFFLElBQUksTUFBTSxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUMsQ0FBQztBQUM1QixFQUFFLE9BQU8sQ0FBQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssS0FBSyxDQUFDLFVBQVUsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDO0FBQ3ZFLENBQUM7QUFDRDtBQUNBLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQztBQUNyQjtBQUNBLElBQUksUUFBUSxDQUFDO0FBQ2IsSUFBSSxtQkFBbUIsQ0FBQztBQUN4QjtBQUNBLFNBQVMsZUFBZSxJQUFJO0FBQzVCLENBQUMsSUFBSSxtQkFBbUIsRUFBRSxPQUFPLFFBQVEsQ0FBQztBQUMxQyxDQUFDLG1CQUFtQixHQUFHLENBQUMsQ0FBQztBQUN6QixDQUFDLElBQUksUUFBUSxHQUFHLFNBQVM7QUFDekIsS0FBSyxLQUFLLEdBQUcsTUFBTSxDQUFDO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsU0FBUyxPQUFPLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRTtBQUNoQyxHQUFHLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ2pDO0FBQ0EsR0FBRyxJQUFJLEtBQUssR0FBRyxDQUFDO0FBQ2hCLE9BQU8sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDNUI7QUFDQSxHQUFHLE9BQU8sTUFBTSxJQUFJLElBQUksSUFBSSxLQUFLLEdBQUcsTUFBTSxFQUFFO0FBQzVDLEtBQUssTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNDLElBQUk7QUFDSixHQUFHLE9BQU8sQ0FBQyxLQUFLLElBQUksS0FBSyxJQUFJLE1BQU0sSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDO0FBQzFELEVBQUU7QUFDRjtBQUNBLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztBQUNwQixDQUFDLE9BQU8sUUFBUSxDQUFDO0FBQ2pCLENBQUM7QUFDRDtBQUNBLElBQUksU0FBUyxHQUFHLGVBQWUsRUFBRSxDQUFDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLEtBQUssQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRTtBQUMzQyxFQUFFLElBQUksTUFBTSxHQUFHLE1BQU0sSUFBSSxJQUFJLEdBQUcsU0FBUyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDcEUsRUFBRSxPQUFPLE1BQU0sS0FBSyxTQUFTLEdBQUcsWUFBWSxHQUFHLE1BQU0sQ0FBQztBQUN0RCxDQUFDO0FBQ0Q7QUFDQSxJQUFJLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFdBQVcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO0FBQ2xDLEVBQUUsT0FBTyxNQUFNLElBQUksSUFBSSxJQUFJLEdBQUcsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDakQsQ0FBQztBQUNEO0FBQ0EsSUFBSSxVQUFVLEdBQUcsV0FBVyxDQUFDO0FBQzdCO0FBQ0EsSUFBSSxVQUFVLEdBQUcsU0FBUztBQUMxQixJQUFJLFdBQVcsR0FBRyxhQUFhO0FBQy9CLElBQUksU0FBUyxHQUFHLFNBQVM7QUFDekIsSUFBSSxTQUFTLEdBQUcsUUFBUTtBQUN4QixJQUFJLFFBQVEsR0FBRyxVQUFVO0FBQ3pCLElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsU0FBUyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFO0FBQzFDLEVBQUUsSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDbEM7QUFDQSxFQUFFLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztBQUNoQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTTtBQUMxQixNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDckI7QUFDQSxFQUFFLE9BQU8sRUFBRSxLQUFLLEdBQUcsTUFBTSxFQUFFO0FBQzNCLElBQUksSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ25DLElBQUksSUFBSSxFQUFFLE1BQU0sR0FBRyxNQUFNLElBQUksSUFBSSxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRTtBQUM1RCxNQUFNLE1BQU07QUFDWixLQUFLO0FBQ0wsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3pCLEdBQUc7QUFDSCxFQUFFLElBQUksTUFBTSxJQUFJLEVBQUUsS0FBSyxJQUFJLE1BQU0sRUFBRTtBQUNuQyxJQUFJLE9BQU8sTUFBTSxDQUFDO0FBQ2xCLEdBQUc7QUFDSCxFQUFFLE1BQU0sR0FBRyxNQUFNLElBQUksSUFBSSxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0FBQzlDLEVBQUUsT0FBTyxDQUFDLENBQUMsTUFBTSxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxTQUFTLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQztBQUMvRCxLQUFLLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUMvQyxDQUFDO0FBQ0Q7QUFDQSxJQUFJLFFBQVEsR0FBRyxTQUFTLENBQUM7QUFDekI7QUFDQSxJQUFJLFNBQVMsR0FBRyxVQUFVO0FBQzFCLElBQUksT0FBTyxHQUFHLFFBQVEsQ0FBQztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLE9BQU8sQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFO0FBQy9CLEVBQUUsT0FBTyxNQUFNLElBQUksSUFBSSxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQzVELENBQUM7QUFDRDtBQUNBLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQztBQUN0QjtBQUNBLElBQUksV0FBVyxHQUFHLFlBQVk7QUFDOUIsSUFBSSxHQUFHLEdBQUcsS0FBSztBQUNmLElBQUksS0FBSyxHQUFHLE9BQU87QUFDbkIsSUFBSSxPQUFPLEdBQUcsTUFBTTtBQUNwQixJQUFJLGtCQUFrQixHQUFHLG1CQUFtQjtBQUM1QyxJQUFJLHVCQUF1QixHQUFHLHdCQUF3QjtBQUN0RCxJQUFJLE9BQU8sR0FBRyxNQUFNLENBQUM7QUFDckI7QUFDQTtBQUNBLElBQUksb0JBQW9CLEdBQUcsQ0FBQztBQUM1QixJQUFJLHNCQUFzQixHQUFHLENBQUMsQ0FBQztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLHFCQUFxQixDQUFDLElBQUksRUFBRSxRQUFRLEVBQUU7QUFDL0MsRUFBRSxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsRUFBRTtBQUNyRCxJQUFJLE9BQU8sdUJBQXVCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQzVELEdBQUc7QUFDSCxFQUFFLE9BQU8sU0FBUyxNQUFNLEVBQUU7QUFDMUIsSUFBSSxJQUFJLFFBQVEsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3JDLElBQUksT0FBTyxDQUFDLFFBQVEsS0FBSyxTQUFTLElBQUksUUFBUSxLQUFLLFFBQVE7QUFDM0QsUUFBUSxLQUFLLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQztBQUMzQixRQUFRLFdBQVcsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLG9CQUFvQixHQUFHLHNCQUFzQixDQUFDLENBQUM7QUFDdkYsR0FBRyxDQUFDO0FBQ0osQ0FBQztBQUNEO0FBQ0EsSUFBSSxvQkFBb0IsR0FBRyxxQkFBcUIsQ0FBQztBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGNBQWMsQ0FBQyxHQUFHLEVBQUU7QUFDN0IsRUFBRSxPQUFPLFNBQVMsTUFBTSxFQUFFO0FBQzFCLElBQUksT0FBTyxNQUFNLElBQUksSUFBSSxHQUFHLFNBQVMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDcEQsR0FBRyxDQUFDO0FBQ0osQ0FBQztBQUNEO0FBQ0EsSUFBSSxhQUFhLEdBQUcsY0FBYyxDQUFDO0FBQ25DO0FBQ0EsSUFBSSxPQUFPLEdBQUcsZUFBZSxFQUFFLENBQUM7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsa0JBQWtCLENBQUMsSUFBSSxFQUFFO0FBQ2xDLEVBQUUsT0FBTyxTQUFTLE1BQU0sRUFBRTtBQUMxQixJQUFJLE9BQU8sT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNqQyxHQUFHLENBQUM7QUFDSixDQUFDO0FBQ0Q7QUFDQSxJQUFJLGlCQUFpQixHQUFHLGtCQUFrQixDQUFDO0FBQzNDO0FBQ0EsSUFBSSxZQUFZLEdBQUcsYUFBYTtBQUNoQyxJQUFJLGdCQUFnQixHQUFHLGlCQUFpQjtBQUN4QyxJQUFJLEtBQUssR0FBRyxNQUFNO0FBQ2xCLElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxVQUFVLENBQUMsSUFBSSxFQUFFO0FBQzFCLEVBQUUsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzVFLENBQUM7QUFDRDtBQUNBLElBQUksVUFBVSxHQUFHLFVBQVUsQ0FBQztBQUM1QjtBQUNBLElBQUksV0FBVyxHQUFHLFlBQVk7QUFDOUIsSUFBSSxtQkFBbUIsR0FBRyxvQkFBb0I7QUFDOUMsSUFBSSxVQUFVLEdBQUcsVUFBVTtBQUMzQixJQUFJLFNBQVMsR0FBRyxTQUFTO0FBQ3pCLElBQUksUUFBUSxHQUFHLFVBQVUsQ0FBQztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxjQUFjLENBQUMsS0FBSyxFQUFFO0FBQy9CO0FBQ0E7QUFDQSxFQUFFLElBQUksT0FBTyxLQUFLLElBQUksVUFBVSxFQUFFO0FBQ2xDLElBQUksT0FBTyxLQUFLLENBQUM7QUFDakIsR0FBRztBQUNILEVBQUUsSUFBSSxLQUFLLElBQUksSUFBSSxFQUFFO0FBQ3JCLElBQUksT0FBTyxVQUFVLENBQUM7QUFDdEIsR0FBRztBQUNILEVBQUUsSUFBSSxPQUFPLEtBQUssSUFBSSxRQUFRLEVBQUU7QUFDaEMsSUFBSSxPQUFPLFNBQVMsQ0FBQyxLQUFLLENBQUM7QUFDM0IsUUFBUSxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9DLFFBQVEsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzNCLEdBQUc7QUFDSCxFQUFFLE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3pCLENBQUM7QUFDRDtBQUNBLElBQUksYUFBYSxHQUFHLGNBQWMsQ0FBQztBQUNuQztBQUNBLElBQUksaUJBQWlCLEdBQUcsZ0JBQWdCO0FBQ3hDLElBQUksWUFBWSxHQUFHLFdBQVc7QUFDOUIsSUFBSSxjQUFjLEdBQUcsYUFBYSxDQUFDO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFNBQVMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFO0FBQ3JDLEVBQUUsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQ2xCLEVBQUUsUUFBUSxHQUFHLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN0QztBQUNBLEVBQUUsWUFBWSxDQUFDLE1BQU0sRUFBRSxTQUFTLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFO0FBQ3BELElBQUksaUJBQWlCLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxRQUFRLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ2pFLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsRUFBRSxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBQ0Q7QUFDQSxJQUFJLFdBQVcsR0FBRyxTQUFTLENBQUM7QUFDNUI7QUFDQSxJQUFJLFFBQVEsR0FBRyxNQUFNO0FBQ3JCLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDO0FBQ2hCO0FBQ0EsQ0FBQyxHQUFHLENBQUMsT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sS0FBSztBQUNoRCxFQUFFLEdBQUcsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0FBQ3hCLEVBQUUsR0FBRyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDdEIsRUFBRSxDQUFDLENBQUM7QUFDSjtBQUNBLENBQUMsT0FBTyxHQUFHLENBQUM7QUFDWixDQUFDLENBQUM7QUFDRjtBQUNBLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQztBQUN4QixTQUFTLGVBQWUsQ0FBQyxHQUFHLEVBQUUsUUFBUSxHQUFHLFFBQVEsRUFBRTtBQUNuRCxJQUFJLElBQUksYUFBYSxDQUFDO0FBQ3RCLElBQUksSUFBSSxlQUFlLENBQUM7QUFDeEIsSUFBSSxJQUFJLGtCQUFrQixDQUFDO0FBQzNCLElBQUksTUFBTSxPQUFPLEdBQUcsWUFBWTtBQUNoQyxRQUFRLElBQUksYUFBYSxLQUFLLFNBQVMsRUFBRTtBQUN6QztBQUNBLFlBQVksT0FBTztBQUNuQixTQUFTO0FBQ1QsUUFBUSxNQUFNLFVBQVUsR0FBRyxPQUFPLElBQUksS0FBSztBQUMzQyxZQUFZLGtCQUFrQixHQUFHLE1BQU0sRUFBRSxDQUFDO0FBQzFDLFlBQVksTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUN6RCxZQUFZLElBQUksS0FBSyxJQUFJLENBQUMsRUFBRTtBQUM1QjtBQUNBLGdCQUFnQixHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BDLGdCQUFnQixrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUM3QyxnQkFBZ0IsT0FBTztBQUN2QixhQUFhO0FBQ2I7QUFDQSxZQUFZLGFBQWEsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcEMsWUFBWSxlQUFlLEdBQUcsVUFBVSxDQUFDLE1BQU07QUFDL0M7QUFDQSxnQkFBZ0IsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNwQyxnQkFBZ0IsSUFBSSxrQkFBa0IsRUFBRTtBQUN4QyxvQkFBb0Isa0JBQWtCLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDakQsaUJBQWlCO0FBQ2pCLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN0QjtBQUNBLFlBQVksSUFBSSxPQUFPLGVBQWUsQ0FBQyxLQUFLLEtBQUssVUFBVSxFQUFFO0FBQzdEO0FBQ0EsZ0JBQWdCLGVBQWUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUN4QyxhQUFhO0FBQ2IsWUFBWSxPQUFPLGtCQUFrQixDQUFDLE9BQU8sQ0FBQztBQUM5QyxTQUFTLENBQUM7QUFDVixRQUFRLElBQUk7QUFDWixZQUFZLEtBQUssTUFBTSxLQUFLLElBQUksR0FBRyxFQUFFO0FBQ3JDLGdCQUFnQixNQUFNLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN4QyxhQUFhO0FBQ2IsU0FBUztBQUNULFFBQVEsT0FBTyxFQUFFLEVBQUU7QUFDbkI7QUFDQSxTQUFTO0FBQ1QsUUFBUSxhQUFhLEdBQUcsU0FBUyxDQUFDO0FBQ2xDLEtBQUssQ0FBQztBQUNOLElBQUksTUFBTSxLQUFLLEdBQUcsTUFBTTtBQUN4QixRQUFRLGFBQWEsR0FBRyxTQUFTLENBQUM7QUFDbEMsUUFBUSxJQUFJLGVBQWUsS0FBSyxTQUFTLEVBQUU7QUFDM0MsWUFBWSxZQUFZLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDMUMsWUFBWSxlQUFlLEdBQUcsU0FBUyxDQUFDO0FBQ3hDLFNBQVM7QUFDVCxRQUFRLElBQUksa0JBQWtCLEtBQUssU0FBUyxFQUFFO0FBQzlDLFlBQVksa0JBQWtCLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2pELFlBQVksa0JBQWtCLEdBQUcsU0FBUyxDQUFDO0FBQzNDLFNBQVM7QUFDVCxLQUFLLENBQUM7QUFDTixJQUFJLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzFDLElBQUksR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLEtBQUs7QUFDOUIsUUFBUSxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFDMUI7QUFDQSxZQUFZLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDNUIsU0FBUztBQUNUO0FBQ0EsUUFBUSxNQUFNLE1BQU0sR0FBRyxXQUFXLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQy9DO0FBQ0EsUUFBUSxJQUFJLGFBQWEsSUFBSSxhQUFhLEtBQUssR0FBRyxFQUFFO0FBQ3BELFlBQVksS0FBSyxFQUFFLENBQUM7QUFDcEIsU0FBUztBQUNUO0FBQ0EsUUFBUSxPQUFPLEVBQUUsQ0FBQztBQUNsQixRQUFRLE9BQU8sTUFBTSxDQUFDO0FBQ3RCLEtBQUssQ0FBQztBQUNOLElBQUksT0FBTyxFQUFFLENBQUM7QUFDZCxJQUFJLE9BQU8sR0FBRyxDQUFDO0FBQ2YsQ0FBQztBQUNELElBQUksTUFBTSxHQUFHLGVBQWUsQ0FBQztBQUM3QjtBQUNBLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQztBQUM3QixNQUFNLFNBQVMsQ0FBQztBQUNoQixJQUFJLFdBQVcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFO0FBQzlCLFFBQVEsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDN0IsUUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEtBQUssQ0FBQztBQUN6QyxRQUFRLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUM5QjtBQUNBLFFBQVEsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNqQyxRQUFRLElBQUksSUFBSSxFQUFFO0FBQ2xCLFlBQVksS0FBSyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLElBQUksRUFBRTtBQUM3QyxnQkFBZ0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDckMsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0wsSUFBSSxJQUFJLElBQUksR0FBRztBQUNmLFFBQVEsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztBQUM5QixLQUFLO0FBQ0wsSUFBSSxLQUFLLEdBQUc7QUFDWixRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDMUIsS0FBSztBQUNMLElBQUksTUFBTSxDQUFDLEdBQUcsRUFBRTtBQUNoQixRQUFRLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDckMsS0FBSztBQUNMLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRTtBQUNiLFFBQVEsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNsQyxLQUFLO0FBQ0wsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFO0FBQ2IsUUFBUSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN6QyxRQUFRLElBQUksS0FBSyxFQUFFO0FBQ25CLFlBQVksT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQzlCLFNBQVM7QUFDVCxRQUFRLE9BQU87QUFDZixLQUFLO0FBQ0wsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRTtBQUNwQixRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRTtBQUMzQixZQUFZLE1BQU0sRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU07QUFDNUMsWUFBWSxJQUFJLEVBQUUsS0FBSztBQUN2QixTQUFTLENBQUMsQ0FBQztBQUNYLFFBQVEsT0FBTyxJQUFJLENBQUM7QUFDcEIsS0FBSztBQUNMLElBQUksTUFBTSxHQUFHO0FBQ2IsUUFBUSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6RCxLQUFLO0FBQ0wsSUFBSSxJQUFJLEdBQUc7QUFDWCxRQUFRLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNoQyxLQUFLO0FBQ0wsSUFBSSxPQUFPLEdBQUc7QUFDZCxRQUFRLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDcEUsS0FBSztBQUNMLElBQUksT0FBTyxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUU7QUFDakMsUUFBUSxLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFO0FBQ25ELFlBQVksVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDMUQsU0FBUztBQUNULEtBQUs7QUFDTCxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHO0FBQ3hCLFFBQVEsT0FBTyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDOUIsS0FBSztBQUNMLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxFQUFFO0FBQ2hDLFFBQVEsS0FBSyxNQUFNLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFO0FBQ2hELFlBQVksTUFBTSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbkMsU0FBUztBQUNULEtBQUs7QUFDTCxDQUFDO0FBQ0QsSUFBSSxJQUFJLEdBQUcsU0FBUyxDQUFDO0FBQ3JCO0FBQ0EsTUFBTSxZQUFZLEdBQUcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxxQkFBcUIsS0FBSztBQUNwRTtBQUNBO0FBQ0EsQ0FBQyxJQUFJLFFBQVEsS0FBSyxRQUFRLElBQUksUUFBUSxLQUFLLFdBQVcsRUFBRTtBQUN4RCxFQUFFLE9BQU87QUFDVCxFQUFFO0FBQ0Y7QUFDQTtBQUNBLENBQUMsSUFBSSxRQUFRLEtBQUssV0FBVyxJQUFJLFFBQVEsS0FBSyxRQUFRLEVBQUU7QUFDeEQsRUFBRSxPQUFPO0FBQ1QsRUFBRTtBQUNGO0FBQ0EsQ0FBQyxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsd0JBQXdCLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3BFLENBQUMsTUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDLHdCQUF3QixDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztBQUN4RTtBQUNBLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLEVBQUUsY0FBYyxDQUFDLElBQUkscUJBQXFCLEVBQUU7QUFDOUUsRUFBRSxPQUFPO0FBQ1QsRUFBRTtBQUNGO0FBQ0EsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFDckQsQ0FBQyxDQUFDO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLGVBQWUsR0FBRyxVQUFVLFlBQVksRUFBRSxjQUFjLEVBQUU7QUFDaEUsQ0FBQyxPQUFPLFlBQVksS0FBSyxTQUFTLElBQUksWUFBWSxDQUFDLFlBQVk7QUFDL0QsRUFBRSxZQUFZLENBQUMsUUFBUSxLQUFLLGNBQWMsQ0FBQyxRQUFRO0FBQ25ELEVBQUUsWUFBWSxDQUFDLFVBQVUsS0FBSyxjQUFjLENBQUMsVUFBVTtBQUN2RCxFQUFFLFlBQVksQ0FBQyxZQUFZLEtBQUssY0FBYyxDQUFDLFlBQVk7QUFDM0QsR0FBRyxZQUFZLENBQUMsUUFBUSxJQUFJLFlBQVksQ0FBQyxLQUFLLEtBQUssY0FBYyxDQUFDLEtBQUssQ0FBQztBQUN4RSxFQUFFLENBQUM7QUFDSCxDQUFDLENBQUM7QUFDRjtBQUNBLE1BQU0sZUFBZSxHQUFHLENBQUMsRUFBRSxFQUFFLElBQUksS0FBSztBQUN0QyxDQUFDLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbkQsQ0FBQyxJQUFJLGFBQWEsS0FBSyxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxFQUFFO0FBQ2xELEVBQUUsT0FBTztBQUNULEVBQUU7QUFDRjtBQUNBLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFDMUMsQ0FBQyxDQUFDO0FBQ0Y7QUFDQSxNQUFNLGVBQWUsR0FBRyxDQUFDLFFBQVEsRUFBRSxRQUFRLEtBQUssQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ3hGO0FBQ0EsTUFBTSxrQkFBa0IsR0FBRyxNQUFNLENBQUMsd0JBQXdCLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUMzRixNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsd0JBQXdCLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLGNBQWMsR0FBRyxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxLQUFLO0FBQzNDLENBQUMsTUFBTSxRQUFRLEdBQUcsSUFBSSxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzlELENBQUMsTUFBTSxXQUFXLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQzNFO0FBQ0EsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLFdBQVcsRUFBRSxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDMUQsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRSxVQUFVLEVBQUUsQ0FBQyxHQUFHLGtCQUFrQixFQUFFLEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDO0FBQ3BGLENBQUMsQ0FBQztBQUNGO0FBQ0EsU0FBUyxhQUFhLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLHFCQUFxQixHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsRUFBRTtBQUN2RSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDbkI7QUFDQSxDQUFDLEtBQUssTUFBTSxRQUFRLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUMvQyxFQUFFLFlBQVksQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0FBQzFELEVBQUU7QUFDRjtBQUNBLENBQUMsZUFBZSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUMzQixDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ2hDO0FBQ0EsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUNYLENBQUM7QUFDRDtBQUNBLE1BQU0sVUFBVSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxRQUFRLENBQUMsRUFBRSxFQUFFLEVBQUUsUUFBUSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxhQUFhLEVBQUUsS0FBSyxHQUFHLElBQUksR0FBRyxFQUFFLEdBQUcsR0FBRyxFQUFFLEVBQUU7QUFDbEc7QUFDQTtBQUNBLElBQUksTUFBTSxZQUFZLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUNuQyxJQUFJLE1BQU0sUUFBUSxHQUFHLFVBQVUsR0FBRyxVQUFVLEVBQUU7QUFDOUMsUUFBUSxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDekMsUUFBUSxJQUFJLFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFDbkMsWUFBWSxPQUFPLFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDekMsU0FBUztBQUNULFFBQVEsTUFBTSxPQUFPLEdBQUcsQ0FBQyxZQUFZO0FBQ3JDLFlBQVksSUFBSTtBQUNoQixnQkFBZ0IsSUFBSSxLQUFLLElBQUksTUFBTSxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQ25ELG9CQUFvQixRQUFRLE1BQU0sS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUNsRCxpQkFBaUI7QUFDakIsZ0JBQWdCLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQzNELGdCQUFnQixNQUFNLE1BQU0sR0FBRyxNQUFNLE9BQU8sQ0FBQztBQUM3QyxnQkFBZ0IsSUFBSTtBQUNwQixvQkFBb0IsT0FBTyxNQUFNLENBQUM7QUFDbEMsaUJBQWlCO0FBQ2pCLHdCQUF3QjtBQUN4QixvQkFBb0IsSUFBSSxLQUFLLEVBQUU7QUFDL0Isd0JBQXdCLE1BQU0sS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDckQscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2Isb0JBQW9CO0FBQ3BCLGdCQUFnQixZQUFZLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3pDLGFBQWE7QUFDYixTQUFTLEdBQUcsQ0FBQztBQUNiLFFBQVEsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDdkMsUUFBUSxPQUFPLE9BQU8sQ0FBQztBQUN2QixLQUFLLENBQUM7QUFDTixJQUFJLGFBQWEsQ0FBQyxRQUFRLEVBQUUsRUFBRSxFQUFFO0FBQ2hDLFFBQVEscUJBQXFCLEVBQUUsSUFBSTtBQUNuQyxLQUFLLENBQUMsQ0FBQztBQUNQLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDcEMsSUFBSSxPQUFPLFFBQVEsQ0FBQztBQUNwQixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxVQUFVLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRTtBQUNyQyxJQUFJLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUM7QUFDNUQsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQ2Y7QUFDQSxRQUFRLE1BQU0sSUFBSSxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUNyRCxLQUFLO0FBQ0wsSUFBSSxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM5QixJQUFJLEdBQUcsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNoQyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbEUsQ0FBQztBQUNELGVBQWUsb0JBQW9CLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRTtBQUN4RCxJQUFJLE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQztBQUNoRSxJQUFJLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO0FBQ3hDLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxJQUFJLENBQUMsU0FBUyxFQUFFO0FBQ3JFLFFBQVEsTUFBTSxJQUFJLGtCQUFrQixDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO0FBQ3pELEtBQUs7QUFDTCxJQUFJLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsYUFBYSxDQUFDO0FBQzNDLElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN2QyxJQUFJLE1BQU0sR0FBRyxHQUFHLE1BQU0sS0FBSyxDQUFDLEdBQUcsRUFBRTtBQUNqQyxRQUFRLE1BQU0sRUFBRSxNQUFNO0FBQ3RCLFFBQVEsT0FBTyxFQUFFLElBQUksT0FBTyxDQUFDO0FBQzdCLFlBQVksV0FBVyxFQUFFLE1BQU07QUFDL0IsWUFBWSxhQUFhLEVBQUUsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDaEQsU0FBUyxDQUFDO0FBQ1YsUUFBUSxJQUFJLEVBQUUsUUFBUTtBQUN0QixLQUFLLENBQUMsQ0FBQztBQUNQLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUU7QUFDakIsUUFBUSxNQUFNLElBQUksYUFBYSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUMxQyxLQUFLO0FBQ0wsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ3ZDLFNBQVMsU0FBUyxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsYUFBYSxHQUFHLElBQUksRUFBRTtBQUN4RCxJQUFJLElBQUksYUFBYSxFQUFFO0FBQ3ZCLFFBQVEsYUFBYSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDcEMsUUFBUSxhQUFhLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztBQUN0QyxRQUFRLE9BQU8sYUFBYSxDQUFDO0FBQzdCLEtBQUs7QUFDTCxJQUFJLE9BQU8sSUFBSSxlQUFlLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzlDLENBQUM7QUFDRCxTQUFTLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFO0FBQzNELElBQUksTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLE9BQU8sQ0FBQztBQUNoQyxJQUFJLElBQUksUUFBUSxHQUFHLE9BQU8sSUFBSSxTQUFTLEdBQUcsT0FBTyxFQUFFO0FBQ25ELFFBQVEsTUFBTSxLQUFLLEdBQUcsUUFBUSxJQUFJLFNBQVMsR0FBRyxPQUFPLEdBQUcsUUFBUSxHQUFHLE9BQU8sR0FBRyxTQUFTLENBQUM7QUFDdkYsUUFBUSxPQUFPO0FBQ2YsWUFBWSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0FBQy9DLFlBQVksTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztBQUNqRCxTQUFTLENBQUM7QUFDVixLQUFLO0FBQ0wsSUFBSSxPQUFPO0FBQ1gsUUFBUSxLQUFLLEVBQUUsUUFBUTtBQUN2QixRQUFRLE1BQU0sRUFBRSxTQUFTO0FBQ3pCLEtBQUssQ0FBQztBQUNOLENBQUM7QUFDRCxTQUFTLFFBQVEsQ0FBQyxLQUFLLEVBQUU7QUFDekIsSUFBSSxJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUM7QUFDM0IsSUFBSSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUNuRCxRQUFRLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUU7QUFDakMsWUFBWSxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQzlCLFlBQVksTUFBTTtBQUNsQixTQUFTO0FBQ1QsS0FBSztBQUNMLElBQUksS0FBSyxDQUFDLGNBQWMsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUN0QyxJQUFJLE9BQU8sVUFBVSxDQUFDO0FBQ3RCLENBQUM7QUFDRDtBQUNBLGVBQWUsV0FBVyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsYUFBYSxHQUFHLElBQUksRUFBRTtBQUNoRSxJQUFJLElBQUksS0FBSyxHQUFHLFNBQVMsQ0FBQztBQUMxQixJQUFJLElBQUk7QUFDUixRQUFRLEtBQUssR0FBRyxNQUFNLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzlDLFFBQVEsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLE9BQU8sQ0FBQztBQUNwQyxRQUFRLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcsbUJBQW1CLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzFGO0FBQ0E7QUFDQSxRQUFRLE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBQy9ELFFBQVEsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM1QyxRQUFRLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ2xELFFBQVEsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNoRSxRQUFRLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxXQUFXLEdBQUcsWUFBWSxDQUFDO0FBQ3RFLFFBQVEsSUFBSSxpQkFBaUIsSUFBSSxVQUFVLElBQUksTUFBTSxZQUFZLGVBQWUsRUFBRTtBQUNsRixZQUFZLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0FBQ3BEO0FBQ0EsWUFBWSxPQUFPLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUMzRCxTQUFTO0FBQ1QsYUFBYSxJQUFJLE1BQU0sWUFBWSxpQkFBaUIsRUFBRTtBQUN0RCxZQUFZLEtBQUssQ0FBQyxxREFBcUQsQ0FBQyxDQUFDO0FBQ3pFLFlBQVksT0FBTyxNQUFNLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sS0FBSztBQUMxRCxnQkFBZ0IsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxLQUFLO0FBQ25ELG9CQUFvQixJQUFJLFFBQVEsRUFBRTtBQUNsQyx3QkFBd0IsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzFDLHFCQUFxQjtBQUNyQix5QkFBeUI7QUFDekIsd0JBQXdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNyQyxxQkFBcUI7QUFDckIsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ2xDLGFBQWEsQ0FBQyxDQUFDO0FBQ2YsU0FBUztBQUNULGFBQWE7QUFDYixZQUFZLE1BQU0sSUFBSSxnQkFBZ0IsQ0FBQztBQUN2QyxnQkFBZ0IsS0FBSyxFQUFFLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDO0FBQzdELGFBQWEsQ0FBQyxDQUFDO0FBQ2YsU0FBUztBQUNULEtBQUs7QUFDTCxJQUFJLE9BQU8sR0FBRyxFQUFFO0FBQ2hCLFFBQVEsTUFBTSxJQUFJLGdCQUFnQixDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDbkQsS0FBSztBQUNMLFlBQVk7QUFDWixRQUFRLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQztBQUN2QixLQUFLO0FBQ0wsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sZ0JBQWdCLEdBQUc7QUFDekIsSUFBSSxZQUFZO0FBQ2hCLElBQUksV0FBVztBQUNmLElBQUksWUFBWTtBQUNoQixJQUFJLGVBQWU7QUFDbkIsQ0FBQyxDQUFDO0FBQ0YsTUFBTSx3QkFBd0IsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ25ELGVBQWUsZUFBZSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFO0FBQ3BELElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDL0MsUUFBUSxNQUFNLElBQUksMkJBQTJCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pELEtBQUs7QUFDTCxJQUFJLElBQUksaUJBQWlCLElBQUksSUFBSTtBQUNqQyxRQUFRLENBQUMsd0JBQXdCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUN2RCxRQUFRLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDL0MsS0FBSztBQUNMLFNBQVMsSUFBSSxVQUFVLElBQUksSUFBSTtBQUMvQixRQUFRLENBQUMsd0JBQXdCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUN2RDtBQUNBLFFBQVEsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN4RCxRQUFRLE9BQU8sV0FBVyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDbEQsS0FBSztBQUNMLFNBQVM7QUFDVCxRQUFRLE9BQU8sSUFBSSxDQUFDO0FBQ3BCLEtBQUs7QUFDTCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDdEMsTUFBTSxtQkFBbUIsR0FBRztBQUM1QixJQUFJLGlCQUFpQixFQUFFO0FBQ3ZCLFFBQVEsSUFBSSxFQUFFLCtCQUErQjtBQUM3QyxRQUFRLE1BQU0sRUFBRSxlQUFlO0FBQy9CLEtBQUs7QUFDTCxJQUFJLFlBQVksRUFBRTtBQUNsQixRQUFRLElBQUksRUFBRSxzQkFBc0I7QUFDcEMsUUFBUSxNQUFNLEVBQUUsb0JBQW9CO0FBQ3BDLFFBQVEsa0JBQWtCLEVBQUUsSUFBSSxHQUFHLElBQUk7QUFDdkMsS0FBSztBQUNMLElBQUksZUFBZSxFQUFFO0FBQ3JCLFFBQVEsSUFBSSxFQUFFO0FBQ2QsWUFBWSxJQUFJLEVBQUUsMEJBQTBCO0FBQzVDLFlBQVksTUFBTSxFQUFFLG9CQUFvQjtBQUN4QyxTQUFTO0FBQ1QsUUFBUSxHQUFHLEVBQUU7QUFDYixZQUFZLElBQUksRUFBRSxpQ0FBaUM7QUFDbkQsU0FBUztBQUNULEtBQUs7QUFDTCxJQUFJLGFBQWEsRUFBRSxFQUFFLEdBQUcsSUFBSTtBQUM1QixJQUFJLFNBQVMsRUFBRTtBQUNmLFFBQVEsT0FBTyxFQUFFLElBQUk7QUFDckIsUUFBUSxPQUFPLEVBQUUsRUFBRTtBQUNuQixLQUFLO0FBQ0wsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxpQkFBaUIsR0FBRztBQUMxQixJQUFJLFNBQVMsRUFBRSxFQUFFO0FBQ2pCLElBQUksZ0JBQWdCLEVBQUUsQ0FBQyxVQUFVLENBQUM7QUFDbEMsQ0FBQyxDQUFDO0FBQ0YsZUFBZSxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsVUFBVSxFQUFFO0FBQzFELElBQUksTUFBTSxhQUFhLEdBQUcsWUFBWSxDQUFDLFlBQVksQ0FBQztBQUNwRCxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUU7QUFDaEYsUUFBUSxNQUFNLElBQUksa0JBQWtCLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0FBQ3RELEtBQUs7QUFDTCxJQUFJLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsYUFBYSxDQUFDO0FBQzNDLElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQ2hELElBQUksTUFBTSxHQUFHLEdBQUcsTUFBTSxLQUFLLENBQUMsR0FBRyxFQUFFO0FBQ2pDLFFBQVEsT0FBTyxFQUFFLElBQUksT0FBTyxDQUFDO0FBQzdCLFlBQVksV0FBVyxFQUFFLE1BQU07QUFDL0IsWUFBWSxhQUFhLEVBQUUsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzNELFNBQVMsQ0FBQztBQUNWLEtBQUssQ0FBQyxDQUFDO0FBQ1AsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRTtBQUNqQixRQUFRLE1BQU0sSUFBSSxhQUFhLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQzFDLEtBQUs7QUFDTCxJQUFJLE1BQU0sSUFBSSxHQUFHLE1BQU0sR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ2xDLElBQUksT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQ3pCLENBQUM7QUFDRCxTQUFTLGdCQUFnQixDQUFDLFlBQVksRUFBRTtBQUN4QyxJQUFJLE1BQU0sT0FBTyxHQUFHLFlBQVksQ0FBQyxZQUFZLEVBQUUsa0JBQWtCO0FBQ2pFLFFBQVEsbUJBQW1CLENBQUMsWUFBWSxDQUFDLGtCQUFrQixDQUFDO0FBQzVELElBQUksSUFBSSxPQUFPLEtBQUssUUFBUSxFQUFFO0FBQzlCLFFBQVEsT0FBTyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUMxQyxLQUFLO0FBQ0wsU0FBUyxJQUFJLENBQUMsT0FBTyxFQUFFO0FBQ3ZCLFFBQVEsT0FBTyxnQkFBZ0IsQ0FBQztBQUNoQyxLQUFLO0FBQ0wsU0FBUztBQUNULFFBQVEsTUFBTSxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDeEMsUUFBUSxPQUFPLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7QUFDckQsS0FBSztBQUNMLENBQUM7QUFDRCxTQUFTLFVBQVUsQ0FBQyxVQUFVLEVBQUUsWUFBWTtBQUM1QztBQUNBLFNBQVMsRUFBRTtBQUNYLElBQUksTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLEVBQUUsRUFBRSxtQkFBbUIsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUN0RSxJQUFJLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsWUFBWSxDQUFDO0FBQ3hDLElBQUksTUFBTSxjQUFjLEdBQUcsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDMUQ7QUFDQSxJQUFJLElBQUksU0FBUyxFQUFFO0FBQ25CLFFBQVEsY0FBYyxDQUFDLFlBQVksRUFBRSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7QUFDcEQsS0FBSztBQUNMLElBQUksTUFBTSxNQUFNLEdBQUcsT0FBTyxLQUFLLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxPQUFPLEtBQUs7QUFDbkUsUUFBUSxJQUFJO0FBQ1osWUFBWSxNQUFNLEVBQUUsZ0JBQWdCLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUUsYUFBYSxHQUFHLEdBQUcsT0FBTyxDQUFDLEVBQUUsRUFBRSxpQkFBaUIsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUMzSixZQUFZLE9BQU8sVUFBVSxDQUFDLGFBQWEsQ0FBQztBQUM1QyxZQUFZLE9BQU8sVUFBVSxDQUFDLFVBQVUsQ0FBQztBQUN6QyxZQUFZLE9BQU8sVUFBVSxDQUFDLFFBQVEsQ0FBQztBQUN2QyxZQUFZLE9BQU8sVUFBVSxDQUFDLGdCQUFnQixDQUFDO0FBQy9DLFlBQVksT0FBTyxVQUFVLENBQUMsYUFBYSxDQUFDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxNQUFNLGdCQUFnQixHQUFHLE1BQU07QUFDM0MsZ0JBQWdCLElBQUksT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUU7QUFDOUMsb0JBQW9CLE1BQU0sSUFBSSxxQkFBcUIsRUFBRSxDQUFDO0FBQ3RELGlCQUFpQjtBQUNqQixhQUFhLENBQUM7QUFDZCxZQUFZLE1BQU0sY0FBYyxHQUFHLENBQUMsUUFBUSxLQUFLO0FBQ2pELGdCQUFnQixnQkFBZ0IsRUFBRSxDQUFDO0FBQ25DLGdCQUFnQixVQUFVLEdBQUcsUUFBUSxDQUFDLENBQUM7QUFDdkMsYUFBYSxDQUFDO0FBQ2QsWUFBWSxNQUFNLFlBQVksR0FBRyxDQUFDLE1BQU0sS0FBSztBQUM3QyxnQkFBZ0IsZ0JBQWdCLEVBQUUsQ0FBQztBQUNuQyxnQkFBZ0IsUUFBUSxHQUFHLE1BQU0sQ0FBQyxDQUFDO0FBQ25DLGFBQWEsQ0FBQztBQUNkLFlBQVksSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsRUFBRTtBQUN4RCxnQkFBZ0IsTUFBTSxJQUFJLDBCQUEwQixFQUFFLENBQUM7QUFDdkQsYUFBYTtBQUNiLFlBQVksTUFBTSxLQUFLLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQzVDLFlBQVksTUFBTSxVQUFVLEdBQUcsTUFBTSxXQUFXLENBQUMsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDO0FBQy9ELFlBQVksY0FBYyxDQUFDO0FBQzNCLGdCQUFnQixLQUFLLEVBQUUsQ0FBQztBQUN4QixnQkFBZ0IsS0FBSyxFQUFFLGFBQWE7QUFDcEMsZ0JBQWdCLE9BQU8sRUFBRSxVQUFVLEVBQUU7QUFDckMsYUFBYSxDQUFDLENBQUM7QUFDZixZQUFZLE1BQU0sV0FBVyxHQUFHLE1BQU0sY0FBYyxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztBQUMvRSxZQUFZLE1BQU0sUUFBUSxHQUFHO0FBQzdCLGdCQUFnQixNQUFNLEVBQUUsWUFBWTtBQUNwQyxnQkFBZ0IsSUFBSSxFQUFFLFVBQVU7QUFDaEMsZ0JBQWdCLFdBQVc7QUFDM0IsYUFBYSxDQUFDO0FBQ2QsWUFBWSxNQUFNLGdCQUFnQixHQUFHLE9BQU8sVUFBVSxFQUFFLFNBQVMsS0FBSyxXQUFXO0FBQ2pGLGtCQUFrQixVQUFVLENBQUMsU0FBUztBQUN0QyxrQkFBa0IsUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7QUFDNUMsWUFBWSxjQUFjLENBQUM7QUFDM0IsZ0JBQWdCLEtBQUssRUFBRSxFQUFFO0FBQ3pCLGdCQUFnQixLQUFLLEVBQUUsa0JBQWtCO0FBQ3pDLGdCQUFnQixPQUFPLEVBQUUsVUFBVSxFQUFFO0FBQ3JDLGFBQWEsQ0FBQyxDQUFDO0FBQ2Y7QUFDQTtBQUNBLFlBQVksTUFBTSxTQUFTLEdBQUcsZ0JBQWdCO0FBQzlDLGtCQUFrQixNQUFNLGVBQWUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixDQUFDO0FBQ3RFLGtCQUFrQixJQUFJLENBQUM7QUFDdkIsWUFBWSxjQUFjLENBQUM7QUFDM0IsZ0JBQWdCLEtBQUssRUFBRSxFQUFFO0FBQ3pCLGdCQUFnQixLQUFLLEVBQUUsbUJBQW1CO0FBQzFDLGdCQUFnQixPQUFPLEVBQUUsVUFBVSxFQUFFO0FBQ3JDLGFBQWEsQ0FBQyxDQUFDO0FBQ2YsWUFBWSxRQUFRLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxPQUFPLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDdEYsWUFBWSxJQUFJLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUNwRCxnQkFBZ0IsUUFBUSxDQUFDLGlCQUFpQixHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztBQUM3RixhQUFhO0FBQ2IsWUFBWSxLQUFLLENBQUMscUNBQXFDLEVBQUU7QUFDekQsZ0JBQWdCLEtBQUs7QUFDckIsZ0JBQWdCLFFBQVE7QUFDeEIsZ0JBQWdCLFNBQVM7QUFDekIsZ0JBQWdCLFFBQVE7QUFDeEIsYUFBYSxDQUFDLENBQUM7QUFDZjtBQUNBLFlBQVksTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsV0FBVyxFQUFFLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNoSSxZQUFZLGNBQWMsQ0FBQztBQUMzQixnQkFBZ0IsS0FBSyxFQUFFLEVBQUU7QUFDekIsZ0JBQWdCLEtBQUssRUFBRSxnQkFBZ0I7QUFDdkMsZ0JBQWdCLE9BQU8sRUFBRSxVQUFVLEVBQUU7QUFDckMsYUFBYSxDQUFDLENBQUM7QUFDZixZQUFZLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNqQyxZQUFZLElBQUksZ0JBQWdCLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLGFBQWEsS0FBSyxLQUFLLEVBQUU7QUFDL0U7QUFDQSxnQkFBZ0IsVUFBVSxDQUFDLE1BQU07QUFDakMsb0JBQW9CLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsUUFBUSxDQUFDO0FBQ3pFLHlCQUF5QixJQUFJLENBQUMsTUFBTTtBQUNwQyx3QkFBd0IsY0FBYyxDQUFDO0FBQ3ZDLDRCQUE0QixLQUFLLEVBQUUsR0FBRztBQUN0Qyw0QkFBNEIsS0FBSyxFQUFFLFVBQVU7QUFDN0MsNEJBQTRCLE9BQU8sRUFBRSxVQUFVLEVBQUU7QUFDakQseUJBQXlCLENBQUMsQ0FBQztBQUMzQix3QkFBd0IsZ0JBQWdCLElBQUksQ0FBQztBQUM3QyxxQkFBcUIsQ0FBQztBQUN0Qix5QkFBeUIsS0FBSyxDQUFDLENBQUMsR0FBRyxLQUFLO0FBQ3hDLHdCQUF3QixJQUFJLGFBQWEsRUFBRTtBQUMzQyw0QkFBNEIsYUFBYSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQ2pELHlCQUF5QjtBQUN6Qiw2QkFBNkI7QUFDN0IsNEJBQTRCLE1BQU0sR0FBRyxDQUFDO0FBQ3RDLHlCQUF5QjtBQUN6QixxQkFBcUIsQ0FBQyxDQUFDO0FBQ3ZCLGlCQUFpQixDQUFDLENBQUM7QUFDbkIsZ0JBQWdCLE9BQU8sTUFBTSxDQUFDO0FBQzlCLGFBQWE7QUFDYixpQkFBaUIsSUFBSSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDekQsZ0JBQWdCLElBQUk7QUFDcEIsb0JBQW9CLE1BQU0sb0JBQW9CLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNoRixvQkFBb0IsZ0JBQWdCLElBQUksQ0FBQztBQUN6QyxpQkFBaUI7QUFDakIsZ0JBQWdCLE9BQU8sR0FBRyxFQUFFO0FBQzVCLG9CQUFvQixhQUFhLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFDekMsb0JBQW9CLE1BQU0sR0FBRyxDQUFDO0FBQzlCLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsWUFBWSxjQUFjLENBQUM7QUFDM0IsZ0JBQWdCLEtBQUssRUFBRSxHQUFHO0FBQzFCLGdCQUFnQixLQUFLLEVBQUUsVUFBVTtBQUNqQyxnQkFBZ0IsT0FBTyxFQUFFLFVBQVUsRUFBRTtBQUNyQyxhQUFhLENBQUMsQ0FBQztBQUNmLFlBQVksT0FBTyxNQUFNLENBQUM7QUFDMUIsU0FBUztBQUNULFFBQVEsT0FBTyxHQUFHLEVBQUU7QUFDcEIsWUFBWSxNQUFNLElBQUksZ0JBQWdCLENBQUMsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUN2RCxTQUFTO0FBQ1QsS0FBSyxDQUFDO0FBQ04sSUFBSSxPQUFPLE9BQU8sS0FBSyxFQUFFLFFBQVEsRUFBRSxVQUFVLEtBQUs7QUFDbEQsUUFBUSxNQUFNLE9BQU8sR0FBRyxZQUFZLENBQUMsYUFBYSxDQUFDO0FBQ25ELFFBQVEsTUFBTSxnQkFBZ0IsR0FBRyxhQUFhLElBQUksSUFBSSxJQUFJLE9BQU8sV0FBVyxDQUFDLE9BQU8sS0FBSyxVQUFVLENBQUM7QUFDcEcsUUFBUSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7QUFDL0IsWUFBWSxPQUFPLENBQUMsSUFBSSxDQUFDLHdEQUF3RCxDQUFDLENBQUM7QUFDbkYsU0FBUztBQUNUO0FBQ0EsUUFBUSxNQUFNLE1BQU0sR0FBRyxPQUFPLElBQUksZ0JBQWdCLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxTQUFTLENBQUM7QUFDOUYsUUFBUSxPQUFPLE1BQU0sQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDL0QsS0FBSyxDQUFDO0FBQ04sQ0FBQztBQUNEO0FBQ0EsU0FBUyx1QkFBdUIsQ0FBQyxVQUFVLEVBQUUsWUFBWSxFQUFFO0FBQzNEO0FBQ0EsSUFBSSxNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsRUFBRSxFQUFFLG1CQUFtQixFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3RFLElBQUksTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxZQUFZLENBQUM7QUFDeEMsSUFBSSxPQUFPO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxNQUFNLGdCQUFnQixDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLDJCQUEyQixHQUFHLElBQUksR0FBRyxFQUFFO0FBQzdHLFlBQVksSUFBSSxVQUFVLENBQUM7QUFDM0IsWUFBWSxJQUFJLEtBQUssWUFBWSxJQUFJLEVBQUU7QUFDdkMsZ0JBQWdCLFVBQVUsR0FBRyxNQUFNLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDOUUsZ0JBQWdCLElBQUksQ0FBQyxVQUFVLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxJQUFJLENBQUMsMkJBQTJCLEVBQUU7QUFDckYsb0JBQW9CLE1BQU0sSUFBSSwyQkFBMkIsRUFBRSxDQUFDO0FBQzVELGlCQUFpQjtBQUNqQjtBQUNBLGdCQUFnQixVQUFVLENBQUMsSUFBSSxHQUFHLFVBQVUsSUFBSSxVQUFVLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUN2RixhQUFhO0FBQ2IsaUJBQWlCO0FBQ2pCLGdCQUFnQixNQUFNLE1BQU0sR0FBRyxNQUFNLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUN6RCxnQkFBZ0IsVUFBVSxHQUFHLE1BQU0sSUFBSSxDQUFDLCtCQUErQixDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2xHLGdCQUFnQixJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksSUFBSSxDQUFDLDJCQUEyQixFQUFFO0FBQ3JGLG9CQUFvQixNQUFNLElBQUksMkJBQTJCLEVBQUUsQ0FBQztBQUM1RCxpQkFBaUI7QUFDakI7QUFDQSxnQkFBZ0IsVUFBVSxDQUFDLElBQUk7QUFDL0Isb0JBQW9CLFVBQVUsSUFBSSxVQUFVLENBQUMsSUFBSSxLQUFLLE1BQU0sVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDL0UsYUFBYTtBQUNiO0FBQ0EsWUFBWSxNQUFNLFNBQVMsR0FBRyxXQUFXLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxTQUFTLElBQUksRUFBRSxFQUFFLENBQUMsUUFBUSxLQUFLLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDaEksWUFBWSxVQUFVLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztBQUN0QyxZQUFZLFVBQVUsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ3JDO0FBQ0EsWUFBWSxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRTtBQUN2QyxnQkFBZ0IsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDaEUsZ0JBQWdCLE1BQU0sYUFBYTtBQUNuQztBQUNBLGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0EscUJBQXFCLFlBQVksQ0FBQyxTQUFTLElBQUksU0FBUyxLQUFLLEtBQUssSUFBSSxPQUFPO0FBQzdFLDBCQUEwQixNQUFNLGVBQWUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLFlBQVksQ0FBQyxTQUFTLENBQUM7QUFDcEYsMEJBQTBCLElBQUksQ0FBQyxDQUFDO0FBQ2hDLGdCQUFnQixJQUFJLGFBQWEsRUFBRTtBQUNuQyxvQkFBb0IsTUFBTSxXQUFXLEdBQUcsTUFBTSxvQkFBb0IsQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzFHLG9CQUFvQixVQUFVLENBQUMsU0FBUyxHQUFHLFdBQVcsQ0FBQztBQUN2RCxvQkFBb0IsU0FBUyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsR0FBRyxNQUFNLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUMxRixpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFlBQVksT0FBTztBQUNuQixnQkFBZ0IsVUFBVTtBQUMxQixnQkFBZ0IsU0FBUztBQUN6QixhQUFhLENBQUM7QUFDZCxTQUFTO0FBQ1QsS0FBSyxDQUFDO0FBQ04sQ0FBQztBQUNEO0FBQ0EsSUFBSSxPQUFPLEdBQUcsUUFBUSxDQUFDO0FBQ3ZCO0FBQ0EsSUFBSSwyQkFBMkIsRUFBRSx1QkFBdUIsRUFBRSw0QkFBNEIsQ0FBQztBQUN2RixNQUFNLGVBQWUsQ0FBQztBQUN0QixJQUFJLFdBQVcsU0FBUyxHQUFHO0FBQzNCLFFBQVEsT0FBTyxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQzFDLEtBQUs7QUFDTCxJQUFJLFdBQVcsQ0FBQyxjQUFjLEVBQUUsTUFBTSxFQUFFO0FBQ3hDO0FBQ0EsUUFBUSwyQkFBMkIsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDdEQsUUFBUSx1QkFBdUIsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDbEQsUUFBUSw0QkFBNEIsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLE1BQU0sY0FBYyxHQUFHLGNBQWMsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzNFLFFBQVEsY0FBYyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDdkQsUUFBUSxjQUFjLENBQUMsZUFBZSxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbEUsUUFBUSxzQkFBc0IsQ0FBQyxJQUFJLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQzNFLFFBQVEsc0JBQXNCLENBQUMsSUFBSSxFQUFFLDJCQUEyQixFQUFFLGNBQWMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN2RixLQUFLO0FBQ0wsSUFBSSxXQUFXLENBQUMsTUFBTSxFQUFFO0FBQ3hCLFFBQVEsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO0FBQ3hDLFFBQVEsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUU7QUFDeEMsWUFBWSxzQkFBc0IsQ0FBQyxJQUFJLEVBQUUsMkJBQTJCLEVBQUUsR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDcEgsU0FBUztBQUNULFFBQVEsc0JBQXNCLENBQUMsSUFBSSxFQUFFLDJCQUEyQixFQUFFLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7QUFDbkYsS0FBSztBQUNMLElBQUksTUFBTSxhQUFhLENBQUMsS0FBSyxFQUFFO0FBQy9CLFFBQVEsTUFBTSxFQUFFLFVBQVUsRUFBRSxHQUFHLEtBQUssQ0FBQztBQUNyQyxRQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFO0FBQzlCLFlBQVksTUFBTSxJQUFJLDBCQUEwQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQzdELFNBQVM7QUFDVCxRQUFRLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLEVBQUUsNEJBQTRCLEVBQUUsR0FBRyxDQUFDLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUM5RyxZQUFZLHNCQUFzQixDQUFDLElBQUksRUFBRSw0QkFBNEIsRUFBRSxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO0FBQ3JHLFNBQVM7QUFDVCxLQUFLO0FBQ0wsSUFBSSxJQUFJLFVBQVUsR0FBRztBQUNyQixRQUFRLE9BQU8sc0JBQXNCLENBQUMsSUFBSSxFQUFFLDJCQUEyQixFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQzlFLEtBQUs7QUFDTCxJQUFJLElBQUksV0FBVyxHQUFHO0FBQ3RCLFFBQVEsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLHNCQUFzQixDQUFDLElBQUksRUFBRSw0QkFBNEIsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzlGLEtBQUs7QUFDTCxDQUFDO0FBQ0QsMkJBQTJCLEdBQUcsSUFBSSxPQUFPLEVBQUUsRUFBRSx1QkFBdUIsR0FBRyxJQUFJLE9BQU8sRUFBRSxFQUFFLDRCQUE0QixHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7QUFDbkksZUFBZSxDQUFDLGNBQWMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQy9ELFNBQVMscUJBQXFCLENBQUMsVUFBVSxFQUFFLFlBQVksRUFBRTtBQUN6RDtBQUNBLElBQUksTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLEVBQUUsRUFBRSxtQkFBbUIsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUN0RSxJQUFJLE9BQU8sQ0FBQyxjQUFjLEtBQUs7QUFDL0IsUUFBUSxPQUFPLElBQUksZUFBZSxDQUFDLGNBQWMsRUFBRTtBQUNuRCxZQUFZLFlBQVk7QUFDeEIsWUFBWSxZQUFZO0FBQ3hCLFNBQVMsQ0FBQyxDQUFDO0FBQ1gsS0FBSyxDQUFDO0FBQ04sQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxZQUFZLENBQUMsVUFBVSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUU7QUFDekQsSUFBSSxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsR0FBRyxNQUFNLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxLQUFLLEVBQUUsUUFBUSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ3hHLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtBQUNmLFFBQVEsT0FBTztBQUNmLFlBQVksU0FBUyxFQUFFLHNCQUFzQixDQUFDLEtBQUssQ0FBQztBQUNwRCxZQUFZLFFBQVEsRUFBRSxFQUFFLEdBQUcsYUFBYSxFQUFFLEdBQUcsUUFBUSxFQUFFO0FBQ3ZELFlBQVksSUFBSSxFQUFFLEVBQUU7QUFDcEIsWUFBWSxJQUFJLEVBQUUsSUFBSTtBQUN0QixZQUFZLFdBQVcsRUFBRSxZQUFZLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQztBQUN2RCxTQUFTLENBQUM7QUFDVixLQUFLO0FBQ0wsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQzdDLFFBQVEsTUFBTSxJQUFJLG9CQUFvQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNsRCxJQUFJLE9BQU87QUFDWCxRQUFRLFNBQVMsRUFBRSx1QkFBdUIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQztBQUMzRCxRQUFRLFFBQVEsRUFBRSxFQUFFLEdBQUcsYUFBYSxFQUFFLEdBQUcsUUFBUSxFQUFFO0FBQ25ELFFBQVEsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO0FBQ3ZCLFFBQVEsSUFBSSxFQUFFLElBQUk7QUFDbEIsUUFBUSxXQUFXLEVBQUUsTUFBTSxJQUFJLENBQUMsV0FBVyxFQUFFO0FBQzdDLEtBQUssQ0FBQztBQUNOLENBQUM7QUFDRCxlQUFlLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFO0FBQzdELElBQUksSUFBSSxLQUFLLFlBQVksSUFBSSxFQUFFO0FBQy9CO0FBQ0EsUUFBUSxNQUFNLGFBQWEsR0FBRztBQUM5QixZQUFZLEdBQUcsUUFBUTtBQUN2QixZQUFZLFFBQVEsRUFBRSxLQUFLLFlBQVksSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLEdBQUcsU0FBUztBQUNwRSxTQUFTLENBQUM7QUFDVixRQUFRLE9BQU87QUFDZixZQUFZLElBQUksRUFBRSxLQUFLO0FBQ3ZCLFlBQVksUUFBUSxFQUFFLGFBQWE7QUFDbkMsU0FBUyxDQUFDO0FBQ1YsS0FBSztBQUNMLFNBQVM7QUFDVDtBQUNBLFFBQVEsTUFBTSxHQUFHLEdBQUcsT0FBTyxLQUFLLEtBQUssUUFBUSxHQUFHLEtBQUssR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDO0FBQ2xFLFFBQVEsTUFBTSxJQUFJLEdBQUcsTUFBTSxVQUFVLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ25ELFFBQVEsSUFBSSxJQUFJLEdBQUcsR0FBRyxDQUFDO0FBQ3ZCLFFBQVEsSUFBSTtBQUNaLFlBQVksTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzlDLFlBQVksSUFBSSxHQUFHLFFBQVEsQ0FBQztBQUM1QixTQUFTO0FBQ1QsUUFBUSxPQUFPLEdBQUcsRUFBRSxHQUFHO0FBQ3ZCLFFBQVEsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUM7QUFDckQsUUFBUSxPQUFPO0FBQ2YsWUFBWSxJQUFJO0FBQ2hCLFlBQVksUUFBUSxFQUFFLEVBQUUsR0FBRyxRQUFRLEVBQUUsUUFBUSxFQUFFO0FBQy9DLFNBQVMsQ0FBQztBQUNWLEtBQUs7QUFDTCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzVCLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxVQUFVLENBQUMsTUFBTSxFQUFFO0FBQ2xDLElBQUksSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZCLElBQUksS0FBSyxDQUFDLDJCQUEyQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQy9DLElBQUksbUJBQW1CLEVBQUUsQ0FBQztBQUMxQixJQUFJLE1BQU0sSUFBSSxHQUFHLE1BQU0saUJBQWlCLENBQUM7QUFDekMsUUFBUSxTQUFTLEVBQUUsTUFBTSxDQUFDLFNBQVM7QUFDbkMsUUFBUSxpQkFBaUIsRUFBRSxNQUFNLENBQUMsaUJBQWlCO0FBQ25ELFFBQVEsVUFBVSxFQUFFLFNBQVMsQ0FBQyxtQkFBbUIsSUFBSSxDQUFDO0FBQ3RELEtBQUssQ0FBQyxDQUFDO0FBQ1AsSUFBSSxNQUFNLFVBQVUsR0FBRyxJQUFJLFVBQVUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDdEUsSUFBSSxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsT0FBTyxZQUFZLFdBQVcsQ0FBQyxNQUFNO0FBQzdELFVBQVUsTUFBTSxDQUFDLE9BQU87QUFDeEIsVUFBVSxNQUFNLFNBQVMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2hELElBQUksTUFBTSxJQUFJLEdBQUcsT0FBTyxLQUFLLEtBQUs7QUFDbEMsUUFBUSxNQUFNLEtBQUssR0FBRyxFQUFFLFVBQVUsQ0FBQztBQUNuQyxRQUFRLE9BQU8sQ0FBQyx5QkFBeUIsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDekQsUUFBUSxNQUFNLE1BQU0sR0FBRyxNQUFNLFlBQVksQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDN0QsUUFBUSxPQUFPLENBQUMsdUJBQXVCLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3ZELFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUU7QUFDMUIsWUFBWSxPQUFPO0FBQ25CLGdCQUFnQixhQUFhLEVBQUUsSUFBSTtBQUNuQyxnQkFBZ0IsTUFBTTtBQUN0QixhQUFhLENBQUM7QUFDZCxTQUFTO0FBQ1QsUUFBUSxNQUFNLE1BQU0sR0FBRyxNQUFNLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUNsRCxRQUFRLElBQUk7QUFDWixZQUFZLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMzRSxZQUFZLE9BQU8sQ0FBQyw2QkFBNkIsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDbEUsWUFBWSxPQUFPO0FBQ25CLGdCQUFnQixhQUFhLEVBQUUsbUJBQW1CLENBQUMsTUFBTSxDQUFDO0FBQzFELGdCQUFnQixNQUFNO0FBQ3RCLGFBQWEsQ0FBQztBQUNkLFNBQVM7QUFDVCxRQUFRLE9BQU8sR0FBRyxFQUFFO0FBQ3BCLFlBQVksTUFBTSxhQUFhLEdBQUcsTUFBTSxZQUFZLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQzNHLFlBQVksT0FBTztBQUNuQixnQkFBZ0IsYUFBYTtBQUM3QixnQkFBZ0IsTUFBTTtBQUN0QixhQUFhLENBQUM7QUFDZCxTQUFTO0FBQ1QsS0FBSyxDQUFDO0FBQ04sSUFBSSxNQUFNLE9BQU8sR0FBRyxPQUFPLE1BQU0sS0FBSyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0RixJQUFJLE1BQU0sMkJBQTJCLEdBQUcsT0FBTyxjQUFjLEVBQUUsS0FBSyxLQUFLO0FBQ3pFLFFBQVEsTUFBTSxNQUFNLEdBQUcsTUFBTSxZQUFZLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzdELFFBQVEsTUFBTSxNQUFNLEdBQUcsTUFBTSxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDbEQsUUFBUSxJQUFJO0FBQ1osWUFBWSxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxtQ0FBbUMsQ0FBQyxJQUFJLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDckgsWUFBWSxPQUFPO0FBQ25CLGdCQUFnQixhQUFhLEVBQUUsbUJBQW1CLENBQUMsTUFBTSxDQUFDO0FBQzFELGdCQUFnQixNQUFNO0FBQ3RCLGFBQWEsQ0FBQztBQUNkLFNBQVM7QUFDVCxRQUFRLE9BQU8sR0FBRyxFQUFFO0FBQ3BCLFlBQVksTUFBTSxhQUFhLEdBQUcsTUFBTSxZQUFZLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQzNHLFlBQVksT0FBTztBQUNuQixnQkFBZ0IsYUFBYTtBQUM3QixnQkFBZ0IsTUFBTTtBQUN0QixhQUFhLENBQUM7QUFDZCxTQUFTO0FBQ1QsS0FBSyxDQUFDO0FBQ04sSUFBSSxNQUFNLElBQUksR0FBRyxPQUFPLEtBQUssS0FBSztBQUNsQyxRQUFRLE1BQU0sTUFBTSxHQUFHLE1BQU0sWUFBWSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUM3RCxRQUFRLE1BQU0sTUFBTSxHQUFHLE1BQU0sTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ2xELFFBQVEsSUFBSTtBQUNaLFlBQVksT0FBTyxNQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDaEQsU0FBUztBQUNULFFBQVEsT0FBTyxHQUFHLEVBQUU7QUFDcEIsWUFBWSxNQUFNLElBQUksaUJBQWlCLENBQUMsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUN4RCxTQUFTO0FBQ1QsS0FBSyxDQUFDO0FBQ04sSUFBSSxNQUFNLE9BQU8sR0FBRyxPQUFPLEdBQUcsS0FBSztBQUNuQyxRQUFRLElBQUk7QUFDWixZQUFZLE9BQU8sTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2hELFNBQVM7QUFDVCxRQUFRLE9BQU8sR0FBRyxFQUFFO0FBQ3BCLFlBQVksTUFBTSxJQUFJLGlCQUFpQixDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDeEQsU0FBUztBQUNULEtBQUssQ0FBQztBQUNOLElBQUksTUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ3BELElBQUksTUFBTSxjQUFjLEdBQUcscUJBQXFCLENBQUMsTUFBTSxFQUFFO0FBQ3pELFFBQVEsSUFBSTtBQUNaLFFBQVEsSUFBSTtBQUNaLEtBQUssQ0FBQyxDQUFDO0FBQ1AsSUFBSSxNQUFNLGlCQUFpQixHQUFHLHVCQUF1QixDQUFDLE1BQU0sRUFBRTtBQUM5RCxRQUFRLElBQUk7QUFDWixRQUFRLElBQUk7QUFDWixLQUFLLENBQUMsQ0FBQztBQUNQLElBQUksT0FBTztBQUNYLFFBQVEsS0FBSyxFQUFFLElBQUk7QUFDbkIsUUFBUSxJQUFJO0FBQ1osUUFBUSxPQUFPO0FBQ2YsUUFBUSwyQkFBMkI7QUFDbkMsUUFBUSxJQUFJO0FBQ1osUUFBUSxPQUFPO0FBQ2YsUUFBUSxJQUFJO0FBQ1osUUFBUSxjQUFjO0FBQ3RCLFFBQVEsZ0JBQWdCLEVBQUUsaUJBQWlCLENBQUMsZ0JBQWdCO0FBQzVELFFBQVEsT0FBTyxFQUFFLE1BQU0sSUFBSSxDQUFDLE9BQU8sRUFBRTtBQUNyQyxLQUFLLENBQUM7QUFDTixDQUFDO0FBWUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFlBQVksQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsV0FBVyxHQUFHLElBQUksRUFBRTtBQUNyRSxJQUFJLFFBQVEsS0FBSyxDQUFDLElBQUk7QUFDdEIsUUFBUSxLQUFLLDRCQUE0QjtBQUN6QyxZQUFZLElBQUksV0FBVyxJQUFJLEtBQUssQ0FBQyxHQUFHLEVBQUU7QUFDMUMsZ0JBQWdCLE9BQU8sbUJBQW1CLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzFFLGFBQWE7QUFDYixZQUFZLE1BQU07QUFDbEIsUUFBUSxLQUFLLHlCQUF5QixDQUFDO0FBQ3ZDLFFBQVEsS0FBSyxxQkFBcUI7QUFDbEMsWUFBWSxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztBQUM5QyxZQUFZLE1BQU07QUFDbEIsUUFBUTtBQUNSLFlBQVksTUFBTSxLQUFLLENBQUM7QUFDeEIsS0FBSztBQUNMLElBQUksT0FBTyxJQUFJLENBQUM7QUFDaEIsQ0FBQztBQUNELGVBQWUsbUJBQW1CLENBQUMsTUFBTSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFO0FBQ3BFLElBQUksSUFBSTtBQUNSLFFBQVEsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDekMsUUFBUSxLQUFLLENBQUMsK0JBQStCLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDcEQsUUFBUSxNQUFNLGFBQWEsR0FBRyxNQUFNLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMxRCxRQUFRLE1BQU0sWUFBWSxHQUFHLE1BQU0sYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ3hELFFBQVEsTUFBTSxjQUFjLEdBQUcsTUFBTSxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDaEUsUUFBUSxNQUFNLFlBQVksR0FBRyxNQUFNLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUN4RCxRQUFRLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLG1DQUFtQyxDQUFDLElBQUksRUFBRSxjQUFjLEVBQUUsWUFBWSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN2SCxRQUFRLE9BQU8sbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDM0MsS0FBSztBQUNMLElBQUksT0FBTyxHQUFHLEVBQUU7QUFDaEIsUUFBUSxJQUFJLEdBQUcsWUFBWSxTQUFTLEVBQUU7QUFDdEMsWUFBWSxLQUFLLENBQUMscURBQXFELEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDdEYsWUFBWSxPQUFPLElBQUksQ0FBQztBQUN4QixTQUFTO0FBQ1QsUUFBUSxLQUFLLENBQUMsb0NBQW9DLEVBQUUsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3RFLFFBQVEsTUFBTSxHQUFHLENBQUM7QUFDbEIsS0FBSztBQUNMLENBQUM7QUErQkQ7QUFDQSxJQUFJLE1BQU0sR0FBRyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxXQUFXLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRTtBQUN0QyxFQUFFLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztBQUNoQixNQUFNLE1BQU0sR0FBRyxLQUFLLElBQUksSUFBSSxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0FBQ2hEO0FBQ0EsRUFBRSxPQUFPLEVBQUUsS0FBSyxHQUFHLE1BQU0sRUFBRTtBQUMzQixJQUFJLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUssS0FBSyxFQUFFO0FBQ3hELE1BQU0sTUFBTTtBQUNaLEtBQUs7QUFDTCxHQUFHO0FBQ0gsRUFBRSxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFDRDtBQUNBLElBQUksVUFBVSxHQUFHLFdBQVcsQ0FBQztBQUM3QjtBQUNBLElBQUksV0FBVyxHQUFHLGFBQWEsQ0FBQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUU7QUFDL0MsRUFBRSxPQUFPLFNBQVMsVUFBVSxFQUFFLFFBQVEsRUFBRTtBQUN4QyxJQUFJLElBQUksVUFBVSxJQUFJLElBQUksRUFBRTtBQUM1QixNQUFNLE9BQU8sVUFBVSxDQUFDO0FBQ3hCLEtBQUs7QUFDTCxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLEVBQUU7QUFDbEMsTUFBTSxPQUFPLFFBQVEsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDNUMsS0FBSztBQUNMLElBQUksSUFBSSxNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQU07QUFDbEMsUUFBUSxLQUFLLEdBQUcsU0FBUyxHQUFHLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFDdkMsUUFBUSxRQUFRLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3RDO0FBQ0EsSUFBSSxRQUFRLFNBQVMsR0FBRyxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssR0FBRyxNQUFNLEdBQUc7QUFDckQsTUFBTSxJQUFJLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxLQUFLLEtBQUssRUFBRTtBQUNoRSxRQUFRLE1BQU07QUFDZCxPQUFPO0FBQ1AsS0FBSztBQUNMLElBQUksT0FBTyxVQUFVLENBQUM7QUFDdEIsR0FBRyxDQUFDO0FBQ0osQ0FBQztBQUNEO0FBQ0EsSUFBSSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFDdkM7QUFDQSxJQUFJLFlBQVksR0FBRyxXQUFXO0FBQzlCLElBQUksY0FBYyxHQUFHLGVBQWUsQ0FBQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLFVBQVUsR0FBRyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDOUM7QUFDQSxJQUFJLFNBQVMsR0FBRyxVQUFVLENBQUM7QUFDM0I7QUFDQSxJQUFJLFVBQVUsR0FBRyxVQUFVLENBQUM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsY0FBYyxDQUFDLEtBQUssRUFBRTtBQUMvQixFQUFFLE9BQU8sT0FBTyxLQUFLLElBQUksVUFBVSxHQUFHLEtBQUssR0FBRyxVQUFVLENBQUM7QUFDekQsQ0FBQztBQUNEO0FBQ0EsSUFBSSxhQUFhLEdBQUcsY0FBYyxDQUFDO0FBQ25DO0FBQ0EsSUFBSSxXQUFXLEdBQUcsVUFBVTtBQUM1QixJQUFJLFFBQVEsR0FBRyxTQUFTO0FBQ3hCLElBQUksWUFBWSxHQUFHLGFBQWE7QUFDaEMsSUFBSSxTQUFTLEdBQUcsU0FBUyxDQUFDO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxPQUFPLENBQUMsVUFBVSxFQUFFLFFBQVEsRUFBRTtBQUN2QyxFQUFFLElBQUksSUFBSSxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsR0FBRyxXQUFXLEdBQUcsUUFBUSxDQUFDO0FBQzVELEVBQUUsT0FBTyxJQUFJLENBQUMsVUFBVSxFQUFFLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ2xELENBQUM7QUFDRDtBQUNBLElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQztBQUN4QjtBQUNBLENBQUMsVUFBVSxNQUFNLEVBQUU7QUFDbkIsQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQztBQUM1QixDQUFDLEVBQUUsTUFBTSxDQUFDLEVBQUU7QUFDWjtBQUNXLGFBQWEsdUJBQXVCLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRTtBQUNoRTtBQUNBLElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQztBQUNsQjtBQUNBO0FBQ0E7QUFDQSxDQUFDLFVBQVUsT0FBTyxFQUFFO0FBQ3BCLENBQUMsT0FBTyxDQUFDLFdBQVcsR0FBRztBQUN2QjtBQUNBO0FBQ0EsR0FBRyxNQUFNLEVBQUUsU0FBUztBQUNwQixHQUFHLFdBQVcsRUFBRSxjQUFjO0FBQzlCLEdBQUcsU0FBUyxFQUFFLFNBQVM7QUFDdkIsR0FBRyxXQUFXLEVBQUUsV0FBVztBQUMzQixHQUFHLFFBQVEsRUFBRSxVQUFVO0FBQ3ZCLEdBQUcsV0FBVyxFQUFFLGFBQWE7QUFDN0IsR0FBRyxlQUFlLEVBQUUsaUJBQWlCO0FBQ3JDLEdBQUcsWUFBWSxFQUFFLGNBQWM7QUFDL0IsR0FBRyxPQUFPLEVBQUUsTUFBTTtBQUNsQjtBQUNBO0FBQ0EsR0FBRyxVQUFVLEVBQUUsWUFBWTtBQUMzQixHQUFHLFNBQVMsRUFBRSxTQUFTO0FBQ3ZCLEdBQUcsVUFBVSxFQUFFLEtBQUs7QUFDcEI7QUFDQTtBQUNBLEdBQUcsSUFBSSxFQUFFLGFBQWE7QUFDdEIsR0FBRyxHQUFHLEVBQUUsV0FBVztBQUNuQixHQUFHLEdBQUcsRUFBRSxVQUFVO0FBQ2xCLEdBQUcsS0FBSyxFQUFFLE9BQU87QUFDakIsR0FBRyxTQUFTLEVBQUUsV0FBVztBQUN6QixHQUFHLFFBQVEsRUFBRSxVQUFVO0FBQ3ZCLEdBQUcsS0FBSyxFQUFFLE1BQU07QUFDaEIsR0FBRyxTQUFTLEVBQUUsVUFBVTtBQUN4QixHQUFHLE9BQU8sRUFBRSxRQUFRO0FBQ3BCLEdBQUcsT0FBTyxFQUFFLEtBQUs7QUFDakIsR0FBRyxXQUFXLEVBQUUsS0FBSztBQUNyQixHQUFHLFlBQVksRUFBRSxRQUFRO0FBQ3pCLEdBQUcsU0FBUyxFQUFFLFdBQVc7QUFDekIsR0FBRyxVQUFVLEVBQUUsVUFBVTtBQUN6QixHQUFHLFFBQVEsRUFBRSxPQUFPO0FBQ3BCLEdBQUcsWUFBWSxFQUFFLE9BQU87QUFDeEIsR0FBRyxVQUFVLEVBQUUsV0FBVztBQUMxQixHQUFHLGVBQWUsRUFBRSxnQkFBZ0I7QUFDcEMsR0FBRyxRQUFRLEVBQUUsU0FBUztBQUN0QixHQUFHLFdBQVcsRUFBRSxJQUFJO0FBQ3BCLEdBQUcsU0FBUyxFQUFFLE9BQU87QUFDckIsR0FBRyxNQUFNLEVBQUUsU0FBUztBQUNwQixHQUFHLFdBQVcsRUFBRSxRQUFRO0FBQ3hCLEdBQUcsTUFBTSxFQUFFLE1BQU07QUFDakIsR0FBRyxTQUFTLEVBQUUsTUFBTTtBQUNwQixHQUFHLE1BQU0sRUFBRSxLQUFLO0FBQ2hCLEdBQUcsTUFBTSxFQUFFLEtBQUs7QUFDaEIsR0FBRyxRQUFRLEVBQUUsaUJBQWlCO0FBQzlCLEdBQUcsUUFBUSxFQUFFLE9BQU87QUFDcEIsR0FBRyxPQUFPLEVBQUUsSUFBSTtBQUNoQixHQUFHLFNBQVMsRUFBRSxNQUFNO0FBQ3BCLEdBQUcsTUFBTSxFQUFFLE1BQU07QUFDakIsR0FBRyxPQUFPLEVBQUUsS0FBSztBQUNqQixHQUFHLE1BQU0sRUFBRSxLQUFLO0FBQ2hCLEdBQUcsUUFBUSxFQUFFLGlCQUFpQjtBQUM5QixHQUFHLFFBQVEsRUFBRSxPQUFPO0FBQ3BCLEdBQUcsT0FBTyxFQUFFLElBQUk7QUFDaEIsR0FBRyxxQkFBcUIsRUFBRSxLQUFLO0FBQy9CLEdBQUcsdUJBQXVCLEVBQUUsT0FBTztBQUNuQyxHQUFHLHlCQUF5QixFQUFFLFNBQVM7QUFDdkMsR0FBRyxVQUFVLEVBQUUsV0FBVztBQUMxQixHQUFHLGVBQWUsRUFBRSxnQkFBZ0I7QUFDcEMsR0FBRyxTQUFTLEVBQUUsTUFBTTtBQUNwQixHQUFHLFFBQVEsRUFBRSxTQUFTO0FBQ3RCLEdBQUcsU0FBUyxFQUFFLFVBQVU7QUFDeEIsR0FBRyxPQUFPLEVBQUUsWUFBWTtBQUN4QixHQUFHLFNBQVMsRUFBRSxTQUFTO0FBQ3ZCLEdBQUcsUUFBUSxFQUFFLFdBQVc7QUFDeEIsRUFBRSxDQUFDO0FBQ0g7QUFDQTtBQUNBLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRztBQUNyQixHQUFHLEdBQUcsRUFBRTtBQUNSLEtBQUssV0FBVyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxRQUFRO0FBQ3pFLEtBQUssT0FBTyxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsaUJBQWlCLEVBQUUsT0FBTyxFQUFFLE1BQU07QUFDN0UsS0FBSyxXQUFXLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxVQUFVO0FBQ3BGLEtBQUssVUFBVSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsTUFBTSxFQUFFLFNBQVM7QUFDckYsS0FBSyxPQUFPLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxXQUFXO0FBQ2xGLEtBQUssVUFBVSxFQUFFLE9BQU8sRUFBRSxRQUFRO0FBQ2xDLElBQUk7QUFDSixHQUFHLEdBQUcsRUFBRTtBQUNSLEtBQUssS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQUUsaUJBQWlCO0FBQ3BGLEtBQUssSUFBSSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsZUFBZTtBQUMzRSxLQUFLLFdBQVcsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsYUFBYTtBQUM1RSxLQUFLLFVBQVUsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsWUFBWTtBQUMvRSxLQUFLLFFBQVEsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsSUFBSTtBQUNuRixLQUFLLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLGVBQWU7QUFDbkYsS0FBSyxhQUFhLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxjQUFjLEVBQUUsU0FBUztBQUN2RSxLQUFLLGNBQWMsRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsS0FBSztBQUMxRSxLQUFLLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxjQUFjO0FBQ2xGLEtBQUssVUFBVSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsT0FBTztBQUM3RSxLQUFLLGFBQWEsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLGlCQUFpQjtBQUNqRixLQUFLLE9BQU8sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNO0FBQ25GLEtBQUssUUFBUSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsU0FBUztBQUM3RSxLQUFLLGNBQWMsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLFNBQVM7QUFDbkYsS0FBSyxRQUFRLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRO0FBQzNFLEtBQUssUUFBUSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsYUFBYTtBQUNsRixLQUFLLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxtQkFBbUIsRUFBRSxjQUFjO0FBQzVFLEtBQUssT0FBTyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsV0FBVztBQUNsRixLQUFLLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsV0FBVztBQUNuRixLQUFLLGNBQWMsRUFBRSxnQkFBZ0IsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxVQUFVO0FBQ2hGLEtBQUssT0FBTyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsV0FBVztBQUN2RSxLQUFLLGVBQWU7QUFDcEIsSUFBSTtBQUNKLEdBQUcsR0FBRyxFQUFFO0FBQ1IsS0FBSyxjQUFjLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsZ0JBQWdCO0FBQzVFLEtBQUssVUFBVSxFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUUsbUJBQW1CLEVBQUUsT0FBTztBQUM5RSxLQUFLLGNBQWMsRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFLGtCQUFrQjtBQUNuRixLQUFLLFlBQVksRUFBRSxlQUFlLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxjQUFjO0FBQ2hGLEtBQUssaUJBQWlCLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsYUFBYTtBQUN6RSxLQUFLLGVBQWUsRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRSxnQkFBZ0I7QUFDL0UsS0FBSyxRQUFRLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLGVBQWU7QUFDeEUsS0FBSyxtQkFBbUIsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsT0FBTztBQUNoRixLQUFLLFNBQVMsRUFBRSxTQUFTO0FBQ3pCLElBQUk7QUFDSixHQUFHLEdBQUcsRUFBRTtBQUNSLEtBQUssTUFBTSxFQUFFLFNBQVMsRUFBRSxZQUFZO0FBQ3BDLElBQUk7QUFDSixFQUFFLENBQUM7QUFDSDtBQUNBO0FBQ0EsQ0FBQyxPQUFPLENBQUMsUUFBUSxHQUFHO0FBQ3BCLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNkLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDakIsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDcEIsRUFBRSxDQUFDO0FBQ0g7QUFDQTtBQUNBLENBQUMsT0FBTyxDQUFDLFdBQVcsR0FBRztBQUN2QixHQUFHLGdCQUFnQixFQUFFLENBQUM7QUFDdEIsR0FBRyxXQUFXLEVBQUUsQ0FBQztBQUNqQixHQUFHLE9BQU8sRUFBRSxDQUFDO0FBQ2IsR0FBRyxRQUFRLEVBQUUsQ0FBQztBQUNkLEdBQUcsTUFBTSxFQUFFLENBQUM7QUFDWixHQUFHLFVBQVUsRUFBRSxDQUFDO0FBQ2hCLEdBQUcsV0FBVyxFQUFFLENBQUM7QUFDakIsR0FBRyxlQUFlLEVBQUUsQ0FBQztBQUNyQixHQUFHLFNBQVMsRUFBRSxDQUFDO0FBQ2YsR0FBRyxVQUFVLEVBQUUsQ0FBQztBQUNoQixHQUFHLGNBQWMsRUFBRSxDQUFDO0FBQ3BCLEdBQUcsZUFBZSxFQUFFLENBQUM7QUFDckIsR0FBRyxtQkFBbUIsRUFBRSxDQUFDO0FBQ3pCLEdBQUcsYUFBYSxFQUFFLENBQUM7QUFDbkIsR0FBRyxTQUFTLEVBQUUsQ0FBQztBQUNmLEdBQUcsYUFBYSxFQUFFLENBQUM7QUFDbkIsR0FBRyxjQUFjLEVBQUUsQ0FBQztBQUNwQixHQUFHLFNBQVMsRUFBRSxDQUFDO0FBQ2YsR0FBRyxjQUFjLEVBQUUsQ0FBQztBQUNwQixHQUFHLE9BQU8sRUFBRSxDQUFDO0FBQ2IsR0FBRyxZQUFZLEVBQUUsQ0FBQztBQUNsQixHQUFHLFFBQVEsRUFBRSxDQUFDO0FBQ2QsR0FBRyxhQUFhLEVBQUUsQ0FBQztBQUNuQixHQUFHLEtBQUssRUFBRSxDQUFDO0FBQ1gsR0FBRyxTQUFTLEVBQUUsQ0FBQztBQUNmLEdBQUcsV0FBVyxFQUFFLENBQUM7QUFDakIsR0FBRyxXQUFXLEVBQUUsQ0FBQztBQUNqQixHQUFHLFFBQVEsRUFBRSxDQUFDO0FBQ2QsR0FBRyxhQUFhLEVBQUUsQ0FBQztBQUNuQixHQUFHLFFBQVEsRUFBRSxDQUFDO0FBQ2QsR0FBRyxRQUFRLEVBQUUsQ0FBQztBQUNkLEdBQUcsTUFBTSxFQUFFLENBQUM7QUFDWixHQUFHLGdCQUFnQixFQUFFLENBQUM7QUFDdEIsR0FBRyxXQUFXLEVBQUUsQ0FBQztBQUNqQixHQUFHLE9BQU8sRUFBRSxDQUFDO0FBQ2IsR0FBRyxXQUFXLEVBQUUsQ0FBQztBQUNqQixFQUFFLENBQUM7QUFDSDtBQUNBO0FBQ0EsQ0FBQyxPQUFPLENBQUMsYUFBYSxHQUFHO0FBQ3pCLEdBQUcsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ2pCLEdBQUcsYUFBYSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN4QixFQUFFLENBQUM7QUFDSDtBQUNBO0FBQ0EsQ0FBQyxPQUFPLENBQUMsV0FBVyxHQUFHO0FBQ3ZCLEdBQUcsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzVCLEdBQUcsY0FBYyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDNUIsR0FBRyxlQUFlLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzFCLEdBQUcsWUFBWSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDMUIsR0FBRyxjQUFjLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUM1QixHQUFHLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDOUIsR0FBRyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNyQixHQUFHLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDOUIsR0FBRyxrQkFBa0IsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2hDLEdBQUcsYUFBYSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDM0IsR0FBRyxhQUFhLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMzQixHQUFHLGNBQWMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDekIsR0FBRyxXQUFXLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN6QixHQUFHLFVBQVUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3hCLEdBQUcsYUFBYSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDM0IsR0FBRyxlQUFlLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUM3QixHQUFHLFdBQVcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3pCLEdBQUcsYUFBYSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDM0IsR0FBRyxXQUFXLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN6QixHQUFHLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDOUIsR0FBRyxTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDMUIsR0FBRyxlQUFlLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUM3QixHQUFHLG1CQUFtQixFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDakMsR0FBRyxTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN2QixHQUFHLFdBQVcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3pCLEdBQUcsWUFBWSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzdCLEdBQUcsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDckIsR0FBRyxTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN2QixHQUFHLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZCLEVBQUUsQ0FBQztBQUNIO0FBQ0E7QUFDQSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEdBQUc7QUFDeEIsR0FBRyxXQUFXLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFO0FBQzlCLEdBQUcsZUFBZSxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRTtBQUNsQyxHQUFHLGFBQWEsRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUU7QUFDaEMsR0FBRyxpQkFBaUIsRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUU7QUFDcEMsR0FBRyxhQUFhLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFO0FBQ2hDLEdBQUcsaUJBQWlCLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFO0FBQ3BDLEdBQUcsWUFBWSxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRTtBQUMvQixHQUFHLGVBQWUsRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUU7QUFDbEMsR0FBRyxVQUFVLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFO0FBQzdCLEdBQUcsY0FBYyxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRTtBQUNqQyxHQUFHLFNBQVMsRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUU7QUFDNUIsR0FBRyxjQUFjLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFO0FBQ2pDLEdBQUcsU0FBUyxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRTtBQUM1QixHQUFHLFFBQVEsRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUU7QUFDM0IsRUFBRSxDQUFDO0FBQ0g7QUFDQTtBQUNBLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRztBQUNsQixHQUFHLE9BQU8sRUFBRTtBQUNaLEtBQUssTUFBTSxFQUFFLElBQUk7QUFDakIsS0FBSyxNQUFNLEVBQUUsSUFBSTtBQUNqQixLQUFLLFNBQVMsRUFBRSxJQUFJO0FBQ3BCLEtBQUssV0FBVyxFQUFFLElBQUk7QUFDdEIsS0FBSyxhQUFhLEVBQUUsSUFBSTtBQUN4QixLQUFLLFFBQVEsRUFBRSxJQUFJO0FBQ25CLEtBQUssUUFBUSxFQUFFLElBQUk7QUFDbkIsS0FBSyxTQUFTLEVBQUUsSUFBSTtBQUNwQixJQUFJO0FBQ0osR0FBRyxRQUFRLEVBQUU7QUFDYixLQUFLLFFBQVEsRUFBRSxJQUFJO0FBQ25CLEtBQUssV0FBVyxFQUFFLElBQUk7QUFDdEIsS0FBSyxlQUFlLEVBQUUsSUFBSTtBQUMxQixLQUFLLFVBQVUsRUFBRSxJQUFJO0FBQ3JCLEtBQUssYUFBYSxFQUFFLElBQUk7QUFDeEIsS0FBSyxpQkFBaUIsRUFBRSxJQUFJO0FBQzVCLEtBQUssY0FBYyxFQUFFLElBQUk7QUFDekIsS0FBSyxZQUFZLEVBQUUsSUFBSTtBQUN2QixLQUFLLFVBQVUsRUFBRSxJQUFJO0FBQ3JCLEtBQUssYUFBYSxFQUFFLElBQUk7QUFDeEIsS0FBSyxjQUFjLEVBQUUsSUFBSTtBQUN6QixLQUFLLGlCQUFpQixFQUFFLElBQUk7QUFDNUIsS0FBSyxPQUFPLEVBQUUsSUFBSTtBQUNsQixLQUFLLFVBQVUsRUFBRSxJQUFJO0FBQ3JCLEtBQUssY0FBYyxFQUFFLElBQUk7QUFDekIsS0FBSyxXQUFXLEVBQUUsSUFBSTtBQUN0QixJQUFJO0FBQ0osR0FBRyxLQUFLLEVBQUU7QUFDVixLQUFLLEtBQUssRUFBRSxJQUFJO0FBQ2hCLEtBQUssU0FBUyxFQUFFLElBQUk7QUFDcEIsS0FBSyxPQUFPLEVBQUUsSUFBSTtBQUNsQixLQUFLLFFBQVEsRUFBRSxJQUFJO0FBQ25CLEtBQUssWUFBWSxFQUFFLElBQUk7QUFDdkIsSUFBSTtBQUNKLEVBQUUsQ0FBQztBQUNIO0FBQ0E7QUFDQSxDQUFDLE9BQU8sQ0FBQyxXQUFXLElBQUksV0FBVztBQUNuQyxHQUFHLElBQUksY0FBYyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYztBQUN2RCxPQUFPLE1BQU0sR0FBRyxPQUFPLENBQUMsV0FBVztBQUNuQyxPQUFPLE1BQU0sR0FBRyxFQUFFLENBQUM7QUFDbkI7QUFDQSxHQUFHLEtBQUssSUFBSSxHQUFHLElBQUksTUFBTSxFQUFFO0FBQzNCLEtBQUssSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzdCLEtBQUssSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsRUFBRTtBQUM3QyxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDL0IsTUFBTSxNQUFNO0FBQ1osT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM3QixNQUFNO0FBQ04sSUFBSTtBQUNKLEdBQUcsT0FBTyxNQUFNLENBQUM7QUFDakIsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNOO0FBQ0E7QUFDQSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUc7QUFDakIsR0FBRyxXQUFXLEVBQUUsUUFBUTtBQUN4QixHQUFHLGVBQWUsRUFBRSxZQUFZO0FBQ2hDLEdBQUcsYUFBYSxFQUFFLFVBQVU7QUFDNUIsR0FBRyxpQkFBaUIsRUFBRSxjQUFjO0FBQ3BDLEdBQUcsUUFBUSxFQUFFLE9BQU87QUFDcEIsR0FBRyxhQUFhLEVBQUUsWUFBWTtBQUM5QixHQUFHLGFBQWEsRUFBRSxVQUFVO0FBQzVCLEdBQUcsaUJBQWlCLEVBQUUsY0FBYztBQUNwQyxHQUFHLFVBQVUsRUFBRSxNQUFNO0FBQ3JCLEdBQUcsZUFBZSxFQUFFLFdBQVc7QUFDL0IsR0FBRyxjQUFjLEVBQUUsVUFBVTtBQUM3QixHQUFHLG1CQUFtQixFQUFFLGVBQWU7QUFDdkMsR0FBRyxPQUFPLEVBQUUsS0FBSztBQUNqQixHQUFHLGNBQWMsRUFBRSxVQUFVO0FBQzdCLEdBQUcsYUFBYSxFQUFFLFNBQVM7QUFDM0IsR0FBRyxZQUFZLEVBQUUsUUFBUTtBQUN6QixHQUFHLGVBQWUsRUFBRSxXQUFXO0FBQy9CLEdBQUcsaUJBQWlCLEVBQUUsYUFBYTtBQUNuQyxHQUFHLFVBQVUsRUFBRSxPQUFPO0FBQ3RCLEdBQUcsY0FBYyxFQUFFLFdBQVc7QUFDOUIsR0FBRyxVQUFVLEVBQUUsS0FBSztBQUNwQixHQUFHLGFBQWEsRUFBRSxRQUFRO0FBQzFCLEdBQUcsZUFBZSxFQUFFLFVBQVU7QUFDOUIsR0FBRyxZQUFZLEVBQUUsS0FBSztBQUN0QixHQUFHLFdBQVcsRUFBRSxPQUFPO0FBQ3ZCLEdBQUcsZ0JBQWdCLEVBQUUsWUFBWTtBQUNqQyxHQUFHLFVBQVUsRUFBRSxNQUFNO0FBQ3JCLEdBQUcsWUFBWSxFQUFFLFFBQVE7QUFDekIsR0FBRyxXQUFXLEVBQUUsTUFBTTtBQUN0QixHQUFHLGNBQWMsRUFBRSxTQUFTO0FBQzVCLEdBQUcsZ0JBQWdCLEVBQUUsV0FBVztBQUNoQyxHQUFHLFFBQVEsRUFBRSxLQUFLO0FBQ2xCLEVBQUUsQ0FBQztBQUNIO0FBQ0E7QUFDQSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUc7QUFDckIsR0FBRyxXQUFXLEVBQUUsSUFBSTtBQUNwQixHQUFHLE1BQU0sRUFBRSxJQUFJO0FBQ2YsR0FBRyxXQUFXLEVBQUUsSUFBSTtBQUNwQixHQUFHLFVBQVUsRUFBRSxJQUFJO0FBQ25CLEdBQUcsT0FBTyxFQUFFLElBQUk7QUFDaEIsR0FBRyxPQUFPLEVBQUUsSUFBSTtBQUNoQixHQUFHLGNBQWMsRUFBRSxJQUFJO0FBQ3ZCLEVBQUUsQ0FBQztBQUNIO0FBQ0E7QUFDQSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUc7QUFDckIsR0FBRyxLQUFLLEVBQUUsSUFBSTtBQUNkLEdBQUcsUUFBUSxFQUFFLElBQUk7QUFDakIsR0FBRyxVQUFVLEVBQUUsSUFBSTtBQUNuQixHQUFHLE1BQU0sRUFBRSxJQUFJO0FBQ2YsR0FBRyxTQUFTLEVBQUUsSUFBSTtBQUNsQixHQUFHLFFBQVEsRUFBRSxJQUFJO0FBQ2pCLEdBQUcsWUFBWSxFQUFFLElBQUk7QUFDckIsR0FBRyxRQUFRLEVBQUUsSUFBSTtBQUNqQixHQUFHLElBQUksRUFBRSxJQUFJO0FBQ2IsR0FBRyxJQUFJLEVBQUUsSUFBSTtBQUNiLEdBQUcsS0FBSyxFQUFFLElBQUk7QUFDZCxHQUFHLFNBQVMsRUFBRSxJQUFJO0FBQ2xCLEdBQUcsSUFBSSxFQUFFLElBQUk7QUFDYixHQUFHLEtBQUssRUFBRSxJQUFJO0FBQ2QsR0FBRyxpQkFBaUIsRUFBRSxJQUFJO0FBQzFCLEdBQUcsT0FBTyxFQUFFLElBQUk7QUFDaEIsR0FBRyxVQUFVLEVBQUUsSUFBSTtBQUNuQixHQUFHLFVBQVUsRUFBRSxJQUFJO0FBQ25CLEdBQUcsU0FBUyxFQUFFLElBQUk7QUFDbEIsR0FBRyxjQUFjLEVBQUUsSUFBSTtBQUN2QixHQUFHLFlBQVksRUFBRSxJQUFJO0FBQ3JCLEdBQUcsUUFBUSxFQUFFLElBQUk7QUFDakIsR0FBRyxPQUFPLEVBQUUsSUFBSTtBQUNoQixHQUFHLFlBQVksRUFBRSxJQUFJO0FBQ3JCLEdBQUcsVUFBVSxFQUFFLElBQUk7QUFDbkIsR0FBRyxLQUFLLEVBQUUsSUFBSTtBQUNkLEdBQUcsV0FBVyxFQUFFLElBQUk7QUFDcEIsR0FBRyxlQUFlLEVBQUUsSUFBSTtBQUN4QixFQUFFLENBQUM7QUFDSCxDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUU7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksV0FBVyxDQUFDO0FBQ2hCLElBQUksc0JBQXNCLENBQUM7QUFDM0I7QUFDQSxTQUFTLGtCQUFrQixJQUFJO0FBQy9CLENBQUMsSUFBSSxzQkFBc0IsRUFBRSxPQUFPLFdBQVcsQ0FBQztBQUNoRCxDQUFDLHNCQUFzQixHQUFHLENBQUMsQ0FBQztBQUM1QixDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7QUFDbEIsQ0FBQyxPQUFPLFdBQVcsQ0FBQztBQUNwQixDQUFDO0FBQ0Q7QUFDQSxJQUFJLE9BQU8sR0FBRyxRQUFRO0FBQ3RCLElBQUksY0FBYyxHQUFHLGtCQUFrQixFQUFFLENBQUM7QUFDMUM7QUFDQTtBQUNBLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRTtBQUM1QixFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUM7QUFDZixNQUFNLFNBQVMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUMsRUFBRTtBQUNqRSxNQUFNLFNBQVMsQ0FBQyxFQUFFLEVBQUUsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDL0QsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRTtBQUMxQixFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUM7QUFDZixNQUFNLFNBQVMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLE9BQU8sSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFO0FBQzNDLE1BQU0sU0FBUyxDQUFDLEVBQUUsRUFBRSxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDdEMsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFVBQVUsQ0FBQyxLQUFLLEVBQUU7QUFDM0IsRUFBRSxJQUFJLE1BQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDO0FBQ3ZDLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM3QjtBQUNBLEVBQUUsT0FBTyxNQUFNLEVBQUUsRUFBRTtBQUNuQixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDbkMsR0FBRztBQUNILEVBQUUsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFlBQVksQ0FBQyxJQUFJLEVBQUU7QUFDNUIsRUFBRSxPQUFPLFNBQVMsTUFBTSxFQUFFO0FBQzFCLElBQUksT0FBTyxJQUFJLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzVCLEdBQUcsQ0FBQztBQUNKLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUU7QUFDakMsRUFBRSxPQUFPLFdBQVc7QUFDcEIsSUFBSSxJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUMsTUFBTTtBQUNqQyxRQUFRLFNBQVMsR0FBRyxNQUFNLEdBQUcsQ0FBQztBQUM5QixRQUFRLElBQUksR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDN0I7QUFDQSxJQUFJLE9BQU8sTUFBTSxFQUFFLEVBQUU7QUFDckIsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3ZDLEtBQUs7QUFDTCxJQUFJLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7QUFDM0IsUUFBUSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDekM7QUFDQSxJQUFJLElBQUksS0FBSyxFQUFFO0FBQ2YsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNuQyxLQUFLO0FBQ0wsSUFBSSxJQUFJLEtBQUssSUFBSSxTQUFTLEVBQUU7QUFDNUIsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25ELEtBQUs7QUFDTCxJQUFJLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDdkMsR0FBRyxDQUFDO0FBQ0osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxhQUFhLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRTtBQUNyQyxFQUFFLE9BQU8sV0FBVztBQUNwQixJQUFJLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUM7QUFDbEMsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO0FBQ2pCLE1BQU0sT0FBTztBQUNiLEtBQUs7QUFDTCxJQUFJLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM3QixJQUFJLE9BQU8sTUFBTSxFQUFFLEVBQUU7QUFDckIsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3ZDLEtBQUs7QUFDTCxJQUFJLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN6RCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ2hDLElBQUksT0FBTyxNQUFNLENBQUM7QUFDbEIsR0FBRyxDQUFDO0FBQ0osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxhQUFhLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFO0FBQ2xELEVBQUUsSUFBSSxLQUFLLEdBQUcsT0FBTyxJQUFJLElBQUksVUFBVTtBQUN2QyxNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3BDO0FBQ0EsRUFBRSxJQUFJLEtBQUssRUFBRTtBQUNiLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQztBQUNuQixJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7QUFDaEIsSUFBSSxJQUFJLEdBQUcsU0FBUyxDQUFDO0FBQ3JCLEdBQUc7QUFDSCxFQUFFLElBQUksSUFBSSxJQUFJLElBQUksRUFBRTtBQUNwQixJQUFJLE1BQU0sSUFBSSxTQUFTLENBQUM7QUFDeEIsR0FBRztBQUNILEVBQUUsT0FBTyxLQUFLLE9BQU8sR0FBRyxFQUFFLENBQUMsQ0FBQztBQUM1QjtBQUNBLEVBQUUsSUFBSSxNQUFNLEdBQUc7QUFDZixJQUFJLEtBQUssRUFBRSxLQUFLLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxHQUFHLEdBQUcsSUFBSTtBQUNoRCxJQUFJLE9BQU8sRUFBRSxPQUFPLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxLQUFLLEdBQUcsSUFBSTtBQUN0RCxJQUFJLE9BQU8sRUFBRSxPQUFPLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxLQUFLLEdBQUcsSUFBSTtBQUN0RCxJQUFJLFdBQVcsRUFBRSxXQUFXLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxTQUFTLEdBQUcsSUFBSTtBQUNsRSxJQUFJLE9BQU8sRUFBRSxPQUFPLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxLQUFLLEdBQUcsSUFBSTtBQUN0RCxHQUFHLENBQUM7QUFDSjtBQUNBLEVBQUUsSUFBSSxhQUFhLEdBQUcsS0FBSyxHQUFHLElBQUksR0FBRyxjQUFjO0FBQ25ELE1BQU0sVUFBVSxHQUFHLENBQUMsT0FBTyxJQUFJLE9BQU8sS0FBSyxPQUFPLENBQUMsS0FBSztBQUN4RCxNQUFNLFVBQVUsR0FBRyxDQUFDLE9BQU8sSUFBSSxPQUFPLEtBQUssT0FBTyxDQUFDLEtBQUs7QUFDeEQsTUFBTSxVQUFVLEdBQUcsQ0FBQyxPQUFPLElBQUksT0FBTyxLQUFLLE9BQU8sQ0FBQyxLQUFLO0FBQ3hELE1BQU0sUUFBUSxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFLEdBQUcsU0FBUyxDQUFDO0FBQ3pEO0FBQ0EsRUFBRSxJQUFJLE9BQU8sR0FBRyxLQUFLLEdBQUcsSUFBSSxHQUFHO0FBQy9CLElBQUksS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHO0FBQ25CLElBQUksUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNO0FBQ3pCLElBQUksT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLO0FBQ3ZCLElBQUksT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLO0FBQ3ZCLElBQUksU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPO0FBQzNCLElBQUksU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPO0FBQzNCLElBQUksU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPO0FBQzNCLElBQUksWUFBWSxFQUFFLElBQUksQ0FBQyxVQUFVO0FBQ2pDLElBQUksV0FBVyxFQUFFLElBQUksQ0FBQyxTQUFTO0FBQy9CLElBQUksVUFBVSxFQUFFLElBQUksQ0FBQyxRQUFRO0FBQzdCLElBQUksTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJO0FBQ3JCLElBQUksT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLO0FBQ3ZCLElBQUksV0FBVyxFQUFFLElBQUksQ0FBQyxTQUFTO0FBQy9CLElBQUksUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNO0FBQ3pCLEdBQUcsQ0FBQztBQUNKO0FBQ0EsRUFBRSxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRztBQUN2QixNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTTtBQUM3QixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSztBQUMzQixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSztBQUMzQixNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsT0FBTztBQUM1QixNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTztBQUMvQixNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTztBQUMvQixNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsVUFBVTtBQUNyQyxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUztBQUNuQyxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSTtBQUN6QixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSztBQUMzQixNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUztBQUNuQyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO0FBQzlCO0FBQ0EsRUFBRSxJQUFJLGFBQWEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzlDO0FBQ0EsRUFBRSxJQUFJLFFBQVEsR0FBRztBQUNqQixJQUFJLFdBQVcsRUFBRSxTQUFTLFNBQVMsRUFBRTtBQUNyQyxNQUFNLE9BQU8sV0FBVztBQUN4QixRQUFRLElBQUksS0FBSyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQyxRQUFRLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQztBQUM3QixZQUFZLFNBQVMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDeEMsWUFBWSxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNsRCxPQUFPLENBQUM7QUFDUixLQUFLO0FBQ0wsSUFBSSxVQUFVLEVBQUUsU0FBUyxRQUFRLEVBQUU7QUFDbkMsTUFBTSxPQUFPLFdBQVc7QUFDeEIsUUFBUSxJQUFJLElBQUksR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO0FBQy9CLFlBQVksS0FBSyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFDaEMsWUFBWSxNQUFNLEdBQUcsUUFBUSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUM7QUFDMUMsWUFBWSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUNuQztBQUNBLFFBQVEsSUFBSSxNQUFNLENBQUMsR0FBRyxJQUFJLE9BQU8sS0FBSyxJQUFJLFFBQVEsRUFBRTtBQUNwRCxVQUFVLEtBQUssR0FBRyxLQUFLLEdBQUcsQ0FBQyxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzlDLFVBQVUsT0FBTyxDQUFDLE1BQU0sSUFBSSxNQUFNLElBQUksS0FBSyxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQy9FLFNBQVM7QUFDVCxRQUFRLE9BQU8sTUFBTSxDQUFDO0FBQ3RCLE9BQU8sQ0FBQztBQUNSLEtBQUs7QUFDTCxJQUFJLE9BQU8sRUFBRSxTQUFTLEtBQUssRUFBRTtBQUM3QixNQUFNLE9BQU8sU0FBUyxNQUFNLEVBQUU7QUFDOUIsUUFBUSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7QUFDeEIsUUFBUSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQy9CLFVBQVUsT0FBTyxLQUFLLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQzdDLFNBQVM7QUFDVCxRQUFRLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQztBQUN2QixRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsU0FBUyxHQUFHLEVBQUU7QUFDekMsVUFBVSxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtBQUN2QyxZQUFZLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkQsV0FBVztBQUNYLFNBQVMsQ0FBQyxDQUFDO0FBQ1g7QUFDQSxRQUFRLEtBQUssQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDcEM7QUFDQSxRQUFRLElBQUksQ0FBQyxLQUFLLEVBQUUsU0FBUyxJQUFJLEVBQUU7QUFDbkMsVUFBVSxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDOUIsVUFBVSxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUNqQyxZQUFZLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO0FBQzVDLFdBQVcsTUFBTTtBQUNqQixZQUFZLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMzQyxXQUFXO0FBQ1gsU0FBUyxDQUFDLENBQUM7QUFDWCxRQUFRLE9BQU8sSUFBSSxDQUFDO0FBQ3BCLE9BQU8sQ0FBQztBQUNSLEtBQUs7QUFDTCxJQUFJLFFBQVEsRUFBRSxTQUFTLE1BQU0sRUFBRTtBQUMvQixNQUFNLE9BQU8sU0FBUyxDQUFDLEVBQUU7QUFDekIsUUFBUSxJQUFJLEtBQUssR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDbkQsUUFBUSxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDdkMsT0FBTyxDQUFDO0FBQ1IsS0FBSztBQUNMLElBQUksT0FBTyxFQUFFLFNBQVMsS0FBSyxFQUFFO0FBQzdCLE1BQU0sT0FBTyxTQUFTLElBQUksRUFBRSxPQUFPLEVBQUU7QUFDckMsUUFBUSxJQUFJLEtBQUssR0FBRyxPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFDakQsUUFBUSxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ2xELE9BQU8sQ0FBQztBQUNSLEtBQUs7QUFDTCxJQUFJLGNBQWMsRUFBRSxTQUFTLFlBQVksRUFBRTtBQUMzQyxNQUFNLE9BQU8sU0FBUyxPQUFPLEVBQUU7QUFDL0IsUUFBUSxPQUFPLGFBQWEsQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLE9BQU8sQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ25FLE9BQU8sQ0FBQztBQUNSLEtBQUs7QUFDTCxHQUFHLENBQUM7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxTQUFTLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFO0FBQy9CLElBQUksSUFBSSxNQUFNLENBQUMsR0FBRyxFQUFFO0FBQ3BCLE1BQU0sSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNoRCxNQUFNLElBQUksT0FBTyxFQUFFO0FBQ25CLFFBQVEsT0FBTyxhQUFhLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzVDLE9BQU87QUFDUCxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbEQsTUFBTSxJQUFJLENBQUMsRUFBRTtBQUNiLFFBQVEsT0FBTyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3BDLE9BQU87QUFDUCxLQUFLO0FBQ0wsSUFBSSxPQUFPLElBQUksQ0FBQztBQUNoQixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLFNBQVMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFO0FBQ3BDLElBQUksT0FBTyxDQUFDLFVBQVUsS0FBSyxNQUFNLENBQUMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDakQsUUFBUSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUN0QixRQUFRLElBQUksQ0FBQztBQUNiLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsU0FBUyxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUU7QUFDcEMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxLQUFLLEtBQUssVUFBVSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO0FBQ2xFLE1BQU0sSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7QUFDM0MsVUFBVSxLQUFLLEdBQUcsSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUM7QUFDckM7QUFDQSxNQUFNLE9BQU8sS0FBSyxNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDM0UsS0FBSztBQUNMLElBQUksT0FBTyxJQUFJLENBQUM7QUFDaEIsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxTQUFTLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRTtBQUNwQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM3RSxRQUFRLEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3JFLFFBQVEsSUFBSSxDQUFDO0FBQ2IsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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RUFBRSxPQUFPLElBQUksSUFBSSxDQUFDO0FBQzlCLE1BQU0sS0FBSyxDQUFDLEVBQUUsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2QyxNQUFNLEtBQUssQ0FBQyxFQUFFLE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hELE1BQU0sS0FBSyxDQUFDLEVBQUUsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3pELE1BQU0sS0FBSyxDQUFDLEVBQUUsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsRSxNQUFNLEtBQUssQ0FBQyxFQUFFLE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNFLE1BQU0sS0FBSyxDQUFDLEVBQUUsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BGLE1BQU0sS0FBSyxDQUFDLEVBQUUsT0FBTyxJQUFJLElBQUksQ0FB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QztBQUMxQjtBQUNBO0FBQ0EsSUFBSSxRQUFRLEdBQUcsQ0FBQyxHQUFHLENBQUM7QUFDcEIsSUFBSSxXQUFXLEdBQUcsdUJBQXVCLENBQUM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxVQUFVLENBQUMsS0FBSyxFQUFFO0FBQzNCLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRTtBQUNkLElBQUksT0FBTyxLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDbkMsR0FBRztBQUNILEVBQUUsS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMxQixFQUFFLElBQUksS0FBSyxLQUFLLFFBQVEsSUFBSSxLQUFLLEtBQUssQ0FBQyxRQUFRLEVBQUU7QUFDakQsSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3BDLElBQUksT0FBTyxJQUFJLEdBQUcsV0FBVyxDQUFDO0FBQzlCLEdBQUc7QUFDSCxFQUFFLE9BQU8sS0FBSyxLQUFLLEtBQUssR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQ3JDLENBQUM7QUFDRDtBQUNBLElBQUksVUFBVSxHQUFHLFVBQVUsQ0FBQztBQUM1QjtBQUNBLElBQUksUUFBUSxHQUFHLFVBQVUsQ0FBQztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFdBQVcsQ0FBQyxLQUFLLEVBQUU7QUFDNUIsRUFBRSxJQUFJLE1BQU0sR0FBRyxRQUFRLENBQUMsS0FB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LFFBQVEsR0FBRyxLQUFLLENBQUM7QUFDdEIsS0FBSyxRQUFRLEdBQUcsUUFBUSxDQUFDO0FBQ3pCLEtBQUssSUFBSSxHQUFHLElBQUksUUFBUSxDQUFDO0FBQ3pCLElBQUk7QUFDSixRQUFRO0FBQ1IsS0FBSyxJQUFJLEdBQUcsUUFBUSxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUM7QUFDbkMsSUFBSTtBQUNKLEdBQUcsS0FBSztBQUNSLEdBQUcsT0FBTyxFQUFFLEtBQUssR0FBRyxNQUFNLEVBQUU7QUFDNUIsS0FBSyxJQUFJLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO0FBQzdCLFNBQVMsUUFBUSxHQUFHLFFBQVEsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDO0FBQ3ZEO0FBQ0EsS0FBSyxLQUFLLEdBQUcsQ0FBQyxVQUFVLElBQUksS0FBSyxLQUFLLENBQUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQ3JELEtBQUssSUFBSSxRQUFRLElBQUksUUFBUSxLQUFLLFFBQVEsRUFBRTtBQUM1QyxPQUFPLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDbkMsT0FBTyxPQUFPLFNBQVMsRUFBRSxFQUFFO0FBQzNCLFNBQVMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssUUFBUSxFQUFFO0FBQzNDLFdBQVcsU0FBUyxLQUFLLENBQUM7QUFDMUIsVUFBVTtBQUNWLFFBQVE7QUFDUixPQUFPLElBQUksUUFBUSxFQUFFO0FBQ3JCLFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM3QixRQUFRO0FBQ1IsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFCLE1BQU07QUFDTixVQUFVLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxVQUFVLENBQUMsRUFBRTtBQUNyRCxPQUFPLElBQUksSUFBSSxLQUFLLE1BQU0sRUFBRTtBQUM1QixTQUFTLElBQUksQ0FBQyxJ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
